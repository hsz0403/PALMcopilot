{"code": ["Require Import Lia List.", "Import ListNotations.", "Require Import Undecidability.PolynomialConstraints.LPolyNC.", "Require Import ssreflect ssrbool ssrfun.", "Set Default Goal Selector \"!\".", "Local Notation \"p \u2243 q\" := (poly_eq p q) (at level 65).", "Lemma poly_eq_refl {p} : p \u2243 p.", "Proof.", "done.", "Qed.", "Lemma poly_eq_sym {p q} : p \u2243 q -> q \u2243 p.", "Proof.", "by move=> + i => /(_ i) ->.", "Qed.", "Lemma poly_eq_trans {p q r} : p \u2243 q -> q \u2243 r -> p \u2243 r.", "Proof.", "by move=> + + i => /(_ i) + /(_ i) => -> ->.", "Qed.", "Lemma poly_add_nthP {i p q} : nth i (poly_add p q) 0 = (nth i p 0) + (nth i q 0).", "Proof.", "elim: i p q.", "-", "move=> [| a p [/= | ]]; [done | by lia | done].", "-", "move=> i IH [| a p [/= | b q /=]]; [done | by lia | done].", "Qed.", "Lemma poly_add_comm {p q} : poly_add p q = poly_add q p.", "Proof.", "elim: p q; first by case.", "move=> a p IH [|b q /=]; [done | by f_equal; [lia | ]].", "Qed.", "Lemma poly_add_assoc {p q r} : poly_add p (poly_add q r) \u2243 poly_add (poly_add p q) r.", "Proof.", "move=> i.", "rewrite ?poly_add_nthP.", "by lia.", "Qed.", "Lemma repeat_0P {n} : repeat 0 n \u2243 [].", "Proof.", "elim: n; first done.", "move=> n + i => /(_ (Nat.pred i)).", "case: i; [done | by case].", "Qed.", "Lemma poly_eq_consI {a b p q} : a = b -> p \u2243 q -> a :: p \u2243 b :: q.", "Proof.", "move=> -> + i => /(_ (Nat.pred i)).", "by case i.", "Qed.", "Lemma poly_eq_consE {a b p q} : a :: p \u2243 b :: q -> a = b /\\ p \u2243 q.", "Proof.", "move=> H.", "constructor=> [| i]; [by move: (H 0) | by move: (H (S i))].", "Qed.", "Lemma poly_eq_nilE {a p} : a :: p \u2243 [] -> a = 0 /\\ p \u2243 [].", "Proof.", "move=> Hp.", "constructor; first by move: (Hp 0).", "move=> i.", "move: (Hp (S i)).", "by case: i.", "Qed.", "Lemma poly_eq_nilI {a p} : a = 0 -> p \u2243 [] -> a :: p \u2243 [].", "Proof.", "move=> -> + i => /(_ (Nat.pred i)).", "case: i; [done | by case].", "Qed."], "theorems": [{"name": "poly_eq_refl", "kind": "Lemma", "begin": 6, "end": 9}, {"name": "poly_eq_sym", "kind": "Lemma", "begin": 10, "end": 13}, {"name": "poly_eq_trans", "kind": "Lemma", "begin": 14, "end": 17}, {"name": "poly_add_nthP", "kind": "Lemma", "begin": 18, "end": 25}, {"name": "poly_add_comm", "kind": "Lemma", "begin": 26, "end": 30}, {"name": "poly_add_assoc", "kind": "Lemma", "begin": 31, "end": 36}, {"name": "repeat_0P", "kind": "Lemma", "begin": 37, "end": 42}, {"name": "poly_eq_consI", "kind": "Lemma", "begin": 43, "end": 47}, {"name": "poly_eq_consE", "kind": "Lemma", "begin": 48, "end": 52}, {"name": "poly_eq_nilE", "kind": "Lemma", "begin": 53, "end": 60}, {"name": "poly_eq_nilI", "kind": "Lemma", "begin": 61, "end": 65}]}