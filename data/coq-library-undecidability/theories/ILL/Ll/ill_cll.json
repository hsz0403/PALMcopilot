{"code": ["Require Import List Permutation.", "From Undecidability.Shared.Libs.DLW Require Import utils.", "From Undecidability.ILL Require Import ILL CLL.", "Set Implicit Arguments.", "Section mapping_ill_to_cll.", "Reserved Notation \"[ f ]\" (at level 1).", "Reserved Notation \"\u27e8 f \u27e9\" (at level 1).", "Fixpoint ill_cll f := match f with | ill_var v => cll_var v | ill_cst ill_bot => cll_cst cll_bot | ill_cst ill_top => cll_cst cll_top | ill_cst ill_1 => cll_cst cll_1 | ill_ban f => cll_una cll_bang [f] | ill_bin ill_times f g => cll_bin cll_times [f] [g] | ill_bin ill_with f g => cll_bin cll_with [f] [g] | ill_bin ill_plus f g => cll_bin cll_plus [f] [g] | ill_bin ill_limp f g => cll_bin cll_limp [f] [g] end where \"[ f ]\" := (ill_cll f).", "Fixpoint cll_ill f := match f with | cll_var v => ill_var v | cll_cst cll_bot => ill_cst ill_bot | cll_cst cll_top => ill_cst ill_top | cll_cst cll_1 => ill_cst ill_1 | cll_una cll_bang f => ill_ban \u27e8f\u27e9 | cll_bin cll_times f g => ill_bin ill_times \u27e8f\u27e9 \u27e8g\u27e9 | cll_bin cll_with f g => ill_bin ill_with \u27e8f\u27e9 \u27e8g\u27e9 | cll_bin cll_plus f g => ill_bin ill_plus \u27e8f\u27e9 \u27e8g\u27e9 | cll_bin cll_limp f g => ill_bin ill_limp \u27e8f\u27e9 \u27e8g\u27e9 | _ => ill_cst ill_bot (* arbitrary value *) end where \"\u27e8 f \u27e9\" := (cll_ill f).", "Fixpoint from_ill f := match f with | cll_var _ => True | cll_cst cll_bot => True | cll_cst cll_top => True | cll_cst cll_1 => True | cll_una cll_bang f => from_ill f | cll_bin cll_times f g => from_ill f /\\ from_ill g | cll_bin cll_with f g => from_ill f /\\ from_ill g | cll_bin cll_plus f g => from_ill f /\\ from_ill g | cll_bin cll_limp f g => from_ill f /\\ from_ill g | _ => False end.", "Fact ill_cll_ill f : \u27e8[f]\u27e9 = f.", "Proof.", "induction f as [ | [] | | [] ]; simpl; f_equal; auto.", "Qed.", "Fact cll_ill_cll f : from_ill f -> [\u27e8f\u27e9] = f.", "Proof.", "induction f as [ | [] | [] | [] ]; simpl; try tauto; intros; f_equal; tauto.", "Qed.", "Fact ill_cll_from_ill f : from_ill [f].", "Proof.", "induction f as [ | [] | | [] ]; simpl; tauto.", "Qed.", "Fixpoint cll_has_bot_zero_neg f := match f with | cll_var _ => False | cll_cst c => c = cll_bot \\/ c = cll_0 | cll_una m f => m = cll_neg \\/ cll_has_bot_zero_neg f | cll_bin _ f g => cll_has_bot_zero_neg f \\/ cll_has_bot_zero_neg g end.", "Fixpoint ill_has_bot f := match f with | ill_var _ => False | ill_cst ill_bot => True | ill_ban f => ill_has_bot f | ill_bin _ f g => ill_has_bot f \\/ ill_has_bot g | _ => False end.", "Fact cll_ill_has_bot f : cll_has_bot_zero_neg f -> ill_has_bot \u27e8f\u27e9.", "Proof.", "induction f as [ | [] | [] | [] ]; simpl; try tauto.", "all: intros []; auto; discriminate.", "Qed.", "Fact ill_cll_has_bot f : ill_has_bot f -> cll_has_bot_zero_neg [f].", "Proof.", "induction f as [ | [] | | [] ]; simpl; tauto.", "Qed.", "Fact ill_cll_has_bot_eq f : ill_has_bot f <-> cll_has_bot_zero_neg [f].", "Proof.", "split.", "+", "apply ill_cll_has_bot.", "+", "intros H.", "apply cll_ill_has_bot in H.", "now rewrite ill_cll_ill in H.", "Qed.", "End mapping_ill_to_cll.", "Notation \"[ f ]\" := (ill_cll f).", "Notation \"\u27e8 f \u27e9\" := (cll_ill f).", "Notation \"\u27e6 \u0393 \u27e7\" := (map ill_cll \u0393).", "Notation \"\u27ea \u0393 \u27eb\" := (map cll_ill \u0393).", "Local Hint Resolve ill_cll_ill : core.", "Fact ill_cll_ill_list \u0393 : \u27ea\u27e6\u0393\u27e7\u27eb = \u0393.", "Proof.", "induction \u0393; simpl; f_equal; auto.", "Qed.", "Fact ill_cll_lbang \u0393 : \u27e6map ill_ban \u0393\u27e7 = \u203c\u27e6\u0393\u27e7.", "Proof.", "induction \u0393; simpl; f_equal; auto.", "Qed.", "Fact cll_ill_lbang \u0393 : \u27ea\u203c\u0393\u27eb = map ill_ban \u27ea\u0393\u27eb.", "Proof.", "induction \u0393; simpl; f_equal; auto.", "Qed."], "theorems": [{"name": "ill_cll_ill", "kind": "Fact", "begin": 10, "end": 13}, {"name": "cll_ill_cll", "kind": "Fact", "begin": 14, "end": 17}, {"name": "ill_cll_from_ill", "kind": "Fact", "begin": 18, "end": 21}, {"name": "cll_ill_has_bot", "kind": "Fact", "begin": 24, "end": 28}, {"name": "ill_cll_has_bot", "kind": "Fact", "begin": 29, "end": 32}, {"name": "ill_cll_has_bot_eq", "kind": "Fact", "begin": 33, "end": 42}, {"name": "ill_cll_ill_list", "kind": "Fact", "begin": 49, "end": 52}, {"name": "ill_cll_lbang", "kind": "Fact", "begin": 53, "end": 56}, {"name": "cll_ill_lbang", "kind": "Fact", "begin": 57, "end": 60}]}