{"code": ["Require Import List.", "Inductive h10c : Set := | h10c_one : nat -> h10c | h10c_plus : nat -> nat -> nat -> h10c | h10c_mult : nat -> nat -> nat -> h10c.", "Definition h10c_sem c \u03c6 := match c with | h10c_one x => \u03c6 x = 1 | h10c_plus x y z => \u03c6 x + \u03c6 y = \u03c6 z | h10c_mult x y z => \u03c6 x * \u03c6 y = \u03c6 z end.", "Definition H10C_SAT (cs: list h10c) := exists (\u03c6: nat -> nat), forall c, In c cs -> h10c_sem c \u03c6.", "Inductive h10sqc : Set := | h10sqc_one : nat -> h10sqc | h10sqc_plus : nat -> nat -> nat -> h10sqc | h10sqc_sq : nat -> nat -> h10sqc.", "Definition h10sqc_sem \u03c6 c := match c with | h10sqc_one x => \u03c6 x = 1 | h10sqc_plus x y z => \u03c6 x + \u03c6 y = \u03c6 z | h10sqc_sq x y => \u03c6 x * \u03c6 x = \u03c6 y end.", "Definition H10SQC_SAT (cs: list h10sqc) := exists (\u03c6: nat -> nat), forall c, In c cs -> h10sqc_sem \u03c6 c.", "Definition h10uc := (nat * nat * nat)%type.", "Definition h10uc_sem \u03c6 (c : h10uc) := match c with | (x, y, z) => 1 + \u03c6 x + \u03c6 y * \u03c6 y = \u03c6 z end.", "Definition H10UC_SAT (cs: list h10uc) := exists (\u03c6: nat -> nat), forall c, In c cs -> h10uc_sem \u03c6 c."], "theorems": []}