{"code": ["Require Import Undecidability.FOL.Util.Syntax.", "Require Import Undecidability.FOL.Util.FullTarski.", "Require Import Undecidability.FOL.Util.FullDeduction.", "Import Vector.VectorNotations.", "Require Import List.", "Existing Instance falsity_on.", "Inductive ZF_Funcs : Type := | eset : ZF_Funcs | pair : ZF_Funcs | union : ZF_Funcs | power : ZF_Funcs | om : ZF_Funcs.", "Definition ZF_fun_ar (f : ZF_Funcs) : nat := match f with | eset => 0 | pair => 2 | union => 1 | power => 1 | om => 0 end.", "Inductive ZF_Preds : Type := | elem : ZF_Preds | equal : ZF_Preds.", "Definition ZF_pred_ar (P : ZF_Preds) : nat := match P with _ => 2 end.", "Instance ZF_func_sig : funcs_signature := {| syms := ZF_Funcs; ar_syms := ZF_fun_ar; |}.", "Instance ZF_pred_sig : preds_signature := {| preds := ZF_Preds; ar_preds := ZF_pred_ar; |}.", "Notation \"x \u2208 y\" := (atom _ ZF_pred_sig elem ([x; y])) (at level 35) : syn.", "Notation \"x \u2261 y\" := (atom (\u03a3_preds := ZF_pred_sig) equal ([x; y])) (at level 35) : syn.", "Notation \"\u2205\" := (func ZF_func_sig eset ([])) : syn.", "Notation \"'\u03c9'\" := (func ZF_func_sig om ([])) : syn.", "Notation \"{ x ; y }\" := (func ZF_func_sig pair ([x; y])) (at level 31) : syn.", "Notation \"\u22c3 x\" := (func ZF_func_sig union ([x])) (at level 32) : syn.", "Notation \"'PP' x\" := (func ZF_func_sig power ([x])) (at level 31) : syn.", "Notation \"x \u222a y\" := (\u22c3 {x; y}) (at level 32) : syn.", "Notation \"'\u03c3' x\" := (x \u222a {x; x}) (at level 32) : syn.", "Definition sub x y := \u2200 $0 \u2208 x`[\u2191] ~> $0 \u2208 y`[\u2191].", "Notation \"x \u2286 y\" := (sub x y) (at level 34) : syn.", "Definition ax_ext := \u2200 \u2200 $1 \u2286 $0 ~> $0 \u2286 $1 ~> $1 \u2261 $0.", "Definition ax_eset := \u2200 \u00ac ($0 \u2208 \u2205).", "Definition ax_pair := \u2200 \u2200 \u2200 $0 \u2208 {$1; $2} <~> $0 \u2261 $1 \u2228 $0 \u2261 $2.", "Definition ax_union := \u2200 \u2200 $0 \u2208 \u22c3 $1 <~> \u2203 $0 \u2208 $2 \u2227 $1 \u2208 $0.", "Definition ax_power := \u2200 \u2200 $0 \u2208 PP $1 <~> $0 \u2286 $1.", "Definition inductive x := \u2205 \u2208 x \u2227 \u2200 $0 \u2208 x`[\u2191] ~> \u03c3 $0 \u2208 x`[\u2191].", "Definition ax_om1 := inductive \u03c9.", "Definition ax_om2 := \u2200 inductive $0 ~> \u03c9 \u2286 $0.", "Definition ax_sep phi := \u2200 \u2203 \u2200 $0 \u2208 $1 <~> $0 \u2208 $2 \u2227 phi[$0.: Nat.add 3 >> var].", "Definition fun_rel phi := \u2200 \u2200 \u2200 phi[$2 .: $1 .: Nat.add 3 >> var] ~> phi[$2 .: $0 .: Nat.add 3 >> var] ~> $1 \u2261 $0.", "Definition ax_rep phi := fun_rel phi ~> \u2200 \u2203 \u2200 $0 \u2208 $1 <~> \u2203 $0 \u2208 $3 \u2227 phi[$0 .: $1 .: Nat.add 4 >> var].", "Definition ZF' := ax_ext :: ax_eset :: ax_pair :: ax_union :: ax_power :: ax_om1 :: ax_om2 :: nil.", "Inductive ZF : form -> Prop := | ZF_base phi : In phi ZF' -> ZF phi | ZF_sep phi : ZF (ax_sep phi) | ZF_rep phi : ZF (ax_rep phi).", "Definition ax_refl := \u2200 $0 \u2261 $0.", "Definition ax_sym := \u2200 \u2200 $1 \u2261 $0 ~> $0 \u2261 $1.", "Definition ax_trans := \u2200 \u2200 \u2200 $2 \u2261 $1 ~> $1 \u2261 $0 ~> $2 \u2261 $0.", "Definition ax_eq_elem := \u2200 \u2200 \u2200 \u2200 $3 \u2261 $1 ~> $2 \u2261 $0 ~> $3 \u2208 $2 ~> $1 \u2208 $0.", "Definition ZFeq' := ax_refl :: ax_sym :: ax_trans :: ax_eq_elem :: ZF'.", "Inductive ZFeq : form -> Prop := | ZFeq_base phi : In phi ZFeq' -> ZFeq phi | ZFeq_sep phi : ZFeq (ax_sep phi) | ZFeq_rep phi : ZFeq (ax_rep phi).", "Notation extensional M := (forall x y, @i_atom _ ZF_pred_sig _ M equal ([x; y]) <-> x = y).", "Definition entailment_ZFeq' phi := forall D (M : interp D) (rho : nat -> D), (forall sigma psi, In psi ZFeq' -> sigma \u22a8 psi) -> rho \u22a8 phi.", "Definition entailment_ZF' phi := forall D (M : interp D) (rho : nat -> D), extensional M -> (forall sigma psi, In psi ZF' -> sigma \u22a8 psi) -> rho \u22a8 phi.", "Definition entailment_ZF phi := forall D (M : interp D) (rho : nat -> D), extensional M -> (forall sigma psi, ZF psi -> sigma \u22a8 psi) -> rho \u22a8 phi.", "Definition deduction_ZF' phi := ZFeq' \u22a2I phi.", "Definition deduction_ZF phi := ZFeq \u22a2TI phi."], "theorems": []}