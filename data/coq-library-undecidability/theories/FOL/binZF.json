{"code": ["Require Import Undecidability.FOL.Util.Syntax.", "Require Import Undecidability.FOL.Util.sig_bin.", "Require Import Undecidability.FOL.Util.FullTarski.", "Require Import Undecidability.FOL.Util.FullDeduction.", "Import Vector.VectorNotations.", "Require Import List.", "Existing Instance falsity_on.", "Notation term' := (term sig_empty).", "Notation form' := (form sig_empty sig_binary _ falsity_on).", "Arguments Vector.nil {_}, _.", "Arguments Vector.cons {_} _ {_} _, _ _ _ _.", "Declare Scope syn'.", "Open Scope syn'.", "Notation \"x \u2208' y\" := (atom sig_empty sig_binary tt ([x; y])) (at level 35) : syn'.", "Definition eq' (x y : term') := \u2200 x`[\u2191] \u2208' $0 <~> y`[\u2191] \u2208' $0.", "Notation \"x \u2261' y\" := (eq' x y) (at level 35) : syn'.", "Fixpoint shift `{funcs_signature} `{preds_signature} n (t : term) := match n with | O => t | S n => subst_term \u2191 (shift n t) end.", "Definition is_eset (t : term') := \u2200 \u00ac ($0 \u2208' t`[\u2191]).", "Definition is_pair (x y t : term') := \u2200 $0 \u2208' t`[\u2191] <~> $0 \u2261' x`[\u2191] \u2228 $0 \u2261' y`[\u2191].", "Definition is_union (x t : term') := \u2200 $0 \u2208' t`[\u2191] <~> \u2203 $0 \u2208' shift 2 x \u2227 $1 \u2208' $0.", "Definition sub' (x y : term') := \u2200 $0 \u2208' x`[\u2191] ~> $0 \u2208' y`[\u2191].", "Definition is_power (x t : term') := \u2200 $0 \u2208' t`[\u2191] <~> sub' $0 x`[\u2191].", "Definition is_sigma (x t : term') := \u2200 $0 \u2208' t`[\u2191] <~> $0 \u2208' x`[\u2191] \u2228 $0 \u2261' x`[\u2191].", "Definition is_inductive (t : term') := (\u2203 is_eset $0 \u2227 $0 \u2208' t`[\u2191]) \u2227 \u2200 $0 \u2208' t`[\u2191] ~> (\u2203 is_sigma $1 $0 \u2227 $0 \u2208' shift 2 t).", "Definition is_om (t : term') := is_inductive t \u2227 \u2200 is_inductive $0 ~> sub' t`[\u2191] $0.", "Definition ax_ext' := \u2200 \u2200 sub' $1 $0 ~> sub' $0 $1 ~> $1 \u2261' $0.", "Definition ax_eq_elem' := \u2200 \u2200 \u2200 \u2200 $3 \u2261' $1 ~> $2 \u2261' $0 ~> $3 \u2208' $2 ~> $1 \u2208' $0.", "Definition ax_eset' := \u2203 is_eset $0.", "Definition ax_pair' := \u2200 \u2200 \u2203 is_pair $2 $1 $0.", "Definition ax_union' := \u2200 \u2203 is_union $1 $0.", "Definition ax_power' := \u2200 \u2203 is_power $1 $0.", "Definition ax_om' := \u2203 is_om $0.", "Definition binZF := ax_ext' :: ax_eq_elem' :: ax_eset' :: ax_pair' :: ax_union' :: ax_power' :: ax_om' :: nil.", "Definition entailment_binZF phi := forall D (M : @interp sig_empty _ D) (rho : nat -> D), (forall psi, In psi binZF -> rho \u22a8 psi) -> rho \u22a8 phi.", "Definition deduction_binZF phi := binZF \u22a2I phi."], "theorems": []}