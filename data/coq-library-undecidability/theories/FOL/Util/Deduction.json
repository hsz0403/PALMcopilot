{"code": ["From Undecidability Require Import FOL.Util.Tarski FOL.Util.Syntax.", "Import FragmentSyntax.", "From Undecidability Require Import Shared.ListAutomation.", "Import ListAutomationNotations.", "Local Set Implicit Arguments.", "Ltac comp := repeat (progress (cbn in *; autounfold in *)).", "Inductive peirce := class | intu.", "Existing Class peirce.", "Section ND_def.", "Context {\u03a3_funcs : funcs_signature}.", "Context {\u03a3_preds : preds_signature}.", "Reserved Notation \"A \u22a2 phi\" (at level 61).", "Implicit Type p : peirce.", "Implicit Type ff : falsity_flag.", "Inductive prv : forall (ff : falsity_flag) (p : peirce), list form -> form -> Prop := | II {ff} {p} A phi psi : phi::A \u22a2 psi -> A \u22a2 phi --> psi | IE {ff} {p} A phi psi : A \u22a2 phi --> psi -> A \u22a2 phi -> A \u22a2 psi | AllI {ff} {p} A phi : map (subst_form \u2191) A \u22a2 phi -> A \u22a2 \u2200 phi | AllE {ff} {p} A t phi : A \u22a2 \u2200 phi -> A \u22a2 phi[t..] | Exp {p} A phi : prv p A falsity -> prv p A phi | Ctx {ff} {p} A phi : phi el A -> A \u22a2 phi | Pc {ff} A phi psi : prv class A (((phi --> psi) --> phi) --> phi) where \"A \u22a2 phi\" := (prv _ A phi).", "Arguments prv {_} _ _.", "Context {ff : falsity_flag}.", "Context {p : peirce}.", "Lemma impl_prv A B phi : (rev B ++ A) \u22a2 phi -> A \u22a2 (B ==> phi).", "Proof.", "revert A; induction B; intros A; cbn; simpl_list; intros.", "-", "firstorder.", "-", "eapply II.", "now eapply IHB.", "Qed.", "Theorem Weak A B phi : A \u22a2 phi -> A <<= B -> B \u22a2 phi.", "Proof.", "intros H.", "revert B.", "induction H; intros B HB; try unshelve (solve [econstructor; intuition]); try now econstructor.", "Qed.", "End ND_def.", "Hint Constructors prv : core.", "Arguments prv {_ _ _ _} _ _.", "Notation \"A \u22a2 phi\" := (prv A phi) (at level 30).", "Notation \"A \u22a2C phi\" := (@prv _ _ _ class A phi) (at level 30).", "Notation \"A \u22a2I phi\" := (@prv _ _ _ intu A phi) (at level 30).", "Notation \"A \u22a2M phi\" := (@prv _ _ falsity_off intu A phi) (at level 30).", "Section Soundness.", "Context {\u03a3_funcs : funcs_signature}.", "Context {\u03a3_preds : preds_signature}.", "Lemma soundness {ff : falsity_flag} A phi : A \u22a2I phi -> valid_ctx A phi.", "Proof.", "remember intu as p.", "induction 1; intros D I rho HA; comp.", "-", "intros Hphi.", "apply IHprv; trivial.", "intros ? []; subst.", "assumption.", "now apply HA.", "-", "now apply IHprv1, IHprv2.", "-", "intros d.", "apply IHprv; trivial.", "intros psi [psi'[<- H' % HA]] % in_map_iff.", "eapply sat_comp.", "now comp.", "-", "eapply sat_comp, sat_ext.", "2: apply (IHprv Heqp D I rho HA (eval rho t)).", "now intros [].", "-", "apply (IHprv Heqp) in HA.", "firstorder.", "-", "firstorder.", "-", "discriminate.", "Qed.", "Lemma soundness' {ff : falsity_flag} phi : [] \u22a2I phi -> valid phi.", "Proof.", "intros H % soundness.", "firstorder.", "Qed.", "End Soundness."], "theorems": [{"name": "impl_prv", "kind": "Lemma", "begin": 18, "end": 26}, {"name": "Weak", "kind": "Theorem", "begin": 27, "end": 32}, {"name": "soundness", "kind": "Lemma", "begin": 43, "end": 72}, {"name": "soundness'", "kind": "Lemma", "begin": 73, "end": 77}]}