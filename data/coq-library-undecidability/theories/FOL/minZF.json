{"code": ["Require Import Undecidability.FOL.Util.Syntax.", "Require Import Undecidability.FOL.Util.FullTarski.", "Require Import Undecidability.FOL.Util.FullDeduction.", "Require Import Undecidability.FOL.ZF.", "Import Vector.VectorNotations.", "Require Import List.", "Instance sig_empty : funcs_signature := {| syms := False; ar_syms := False_rect nat |}.", "Existing Instance ZF_func_sig.", "Notation term' := (term sig_empty).", "Notation form' := (form sig_empty _ _ falsity_on).", "Notation \"x \u2208' y\" := (atom sig_empty ZF_pred_sig elem ([x; y])) (at level 35) : syn.", "Notation \"x \u2261' y\" := (atom sig_empty ZF_pred_sig equal ([x; y])) (at level 35) : syn.", "Fixpoint shift `{funcs_signature} `{preds_signature} n (t : term) := match n with | O => t | S n => subst_term \u2191 (shift n t) end.", "Definition is_eset (t : term') := \u2200 \u00ac ($0 \u2208 t`[\u2191]).", "Definition is_pair (x y t : term') := \u2200 $0 \u2208 t`[\u2191] <~> $0 \u2261 x`[\u2191] \u2228 $0 \u2261 y`[\u2191].", "Definition is_union (x t : term') := \u2200 $0 \u2208 t`[\u2191] <~> \u2203 $0 \u2208 shift 2 x \u2227 $1 \u2208 $0.", "Definition sub' (x y : term') := \u2200 $0 \u2208 x`[\u2191] ~> $0 \u2208 y`[\u2191].", "Definition is_power (x t : term') := \u2200 $0 \u2208 t`[\u2191] <~> sub' $0 x`[\u2191].", "Definition is_sigma (x t : term') := \u2200 $0 \u2208 t`[\u2191] <~> $0 \u2208 x`[\u2191] \u2228 $0 \u2261 x`[\u2191].", "Definition is_inductive (t : term') := (\u2203 is_eset $0 \u2227 $0 \u2208 t`[\u2191]) \u2227 \u2200 $0 \u2208 t`[\u2191] ~> (\u2203 is_sigma $1 $0 \u2227 $0 \u2208 shift 2 t).", "Definition is_om (t : term') := is_inductive t \u2227 \u2200 is_inductive $0 ~> sub' t`[\u2191] $0.", "Definition ax_ext' := \u2200 \u2200 sub' $1 $0 ~> sub' $0 $1 ~> $1 \u2261' $0.", "Definition ax_eset' := \u2203 is_eset $0.", "Definition ax_pair' := \u2200 \u2200 \u2203 is_pair $2 $1 $0.", "Definition ax_union' := \u2200 \u2203 is_union $1 $0.", "Definition ax_power' := \u2200 \u2203 is_power $1 $0.", "Definition ax_om' := \u2203 is_om $0.", "Definition ax_refl' := \u2200 $0 \u2261' $0.", "Definition ax_sym' := \u2200 \u2200 $1 \u2261' $0 ~> $0 \u2261' $1.", "Definition ax_trans' := \u2200 \u2200 \u2200 $2 \u2261' $1 ~> $1 \u2261' $0 ~> $2 \u2261' $0.", "Definition ax_eq_elem' := \u2200 \u2200 \u2200 \u2200 $3 \u2261' $1 ~> $2 \u2261' $0 ~> $3 \u2208' $2 ~> $1 \u2208' $0.", "Definition minZF' := ax_ext' :: ax_eset' :: ax_pair' :: ax_union' :: ax_power' :: ax_om' :: nil.", "Definition minZFeq' := ax_refl' :: ax_sym' :: ax_trans' :: ax_eq_elem' :: minZF'.", "Definition ax_sep' phi := \u2200 \u2203 \u2200 $0 \u2208' $1 <~> $0 \u2208' $2 \u2227 phi[$0.: Nat.add 3 >> var].", "Definition fun_rel' phi := \u2200 \u2200 \u2200 phi[$2 .: $1 .: Nat.add 3 >> var] ~> phi[$2 .: $0 .: Nat.add 3 >> var] ~> $1 \u2261' $0.", "Definition ax_rep' phi := fun_rel' phi ~> \u2200 \u2203 \u2200 $0 \u2208' $1 <~> \u2203 $0 \u2208' $3 \u2227 phi[$0 .: $1 .: Nat.add 4 >> var].", "Inductive minZF : form' -> Prop := | minZF_base phi : In phi minZF' -> minZF phi | minZF_sep phi : minZF (ax_sep' phi) | minZF_rep phi : minZF (ax_rep' phi).", "Inductive minZFeq : form' -> Prop := | minZFeq_base phi : In phi minZFeq' -> minZFeq phi | minZFeq_sep phi : minZFeq (ax_sep' phi) | minZFeq_rep phi : minZFeq (ax_rep' phi).", "Definition entailment_minZFeq' phi := forall D (M : interp D) (rho : nat -> D), (forall sigma psi, In psi minZFeq' -> sigma \u22a8 psi) -> rho \u22a8 phi.", "Definition entailment_minZF' phi := forall D (M : @interp sig_empty _ D) (rho : nat -> D), extensional M -> (forall sigma psi, In psi minZF' -> sigma \u22a8 psi) -> rho \u22a8 phi.", "Definition entailment_minZF phi := forall D (M : @interp sig_empty _ D) (rho : nat -> D), extensional M -> (forall sigma psi, minZF psi -> sigma \u22a8 psi) -> rho \u22a8 phi.", "Definition deduction_minZF' phi := minZFeq' \u22a2I phi.", "Definition deduction_minZF phi := minZFeq \u22a2TI phi."], "theorems": []}