{"code": ["Require Import List Lia Morphisms.", "From Undecidability.HOU Require Import std.std calculus.calculus unification.higher_order_unification unification.systemunification.", "Import ListNotations.", "Set Default Proof Using \"Type\".", "Section NthOrderUnificationDefinition.", "Context {n: nat} {X: Const}.", "Class orduni := { Gamma\u2080 : ctx; s\u2080 : exp X; t\u2080 : exp X; A\u2080 : type; H1\u2080 : Gamma\u2080 \u22a2(n) s\u2080 : A\u2080; H2\u2080 : Gamma\u2080 \u22a2(n) t\u2080 : A\u2080 }.", "Definition OU (I: orduni) := exists (Delta: ctx) (sigma: fin -> exp X), Delta \u22a9(n) sigma : Gamma\u2080 /\\ sigma \u2022 s\u2080 \u2261 sigma \u2022 t\u2080.", "End NthOrderUnificationDefinition.", "Arguments orduni _ : clear implicits.", "Arguments OU _ : clear implicits.", "Hint Resolve H1\u2080 H2\u2080 : core.", "Section NthOrderSystemUnification.", "Variable (X: Const).", "Implicit Types (sigma: fin -> exp X) (e: eq X) (E : eqs X).", "Definition eq_ordertyping n Gamma e A := Gamma \u22a2(n) fst e : A /\\ Gamma \u22a2(n) snd e : A.", "Notation \"Gamma \u22a2\u2082( n ')' e : A\" := (eq_ordertyping n Gamma e A) (at level 80, e at level 99).", "Reserved Notation \"Gamma \u22a2\u208a\u208a( n ) E : L\" (at level 80, E at level 99).", "Inductive eqs_ordertyping Gamma n : eqs X -> list type -> Prop := | eqs_ordertyping_nil: Gamma \u22a2\u208a\u208a(n) nil : nil | eqs_ordertyping_cons s t A E L: Gamma \u22a2(n) s : A -> Gamma \u22a2(n) t : A -> Gamma \u22a2\u208a\u208a(n) E : L -> Gamma \u22a2\u208a\u208a(n) ((s,t) :: E) : A :: L where \"Gamma \u22a2\u208a\u208a( n ) E : L\" := (eqs_ordertyping Gamma n E L).", "Hint Constructors eqs_ordertyping : core.", "Lemma eqs_ordertyping_step Gamma n E L: Gamma \u22a2\u208a\u208a(n) E : L -> Gamma \u22a2\u208a\u208a(S n) E : L.", "Proof.", "induction 1; eauto.", "Qed.", "Lemma eqs_ordertyping_monotone Gamma n m E L: n <= m -> Gamma \u22a2\u208a\u208a(n) E : L -> Gamma \u22a2\u208a\u208a(m) E : L.", "Proof.", "induction 1; eauto using eqs_ordertyping_step.", "Qed.", "Lemma eqs_ordertyping_soundness Gamma n E L: Gamma \u22a2\u208a\u208a(n) E : L -> Gamma \u22a2\u208a\u208a E : L.", "Proof.", "induction 1; eauto using eqs_typing.", "Qed.", "Lemma left_ordertyping Gamma n E L: Gamma \u22a2\u208a\u208a(n) E : L -> Gamma \u22a2\u208a(n) left_side E : L.", "Proof.", "induction 1; cbn; eauto.", "Qed.", "Lemma right_ordertyping Gamma n E L: Gamma \u22a2\u208a\u208a(n) E : L -> Gamma \u22a2\u208a(n) right_side E : L.", "Proof.", "induction 1; cbn; eauto.", "Qed.", "Lemma ordertyping_combine Gamma n E L: Gamma \u22a2\u208a(n) left_side E : L -> Gamma \u22a2\u208a(n) right_side E : L -> Gamma \u22a2\u208a\u208a(n) E : L.", "Proof.", "intros H1 H2; induction E in L, H1, H2 |-*; inv H1; inv H2; eauto.", "destruct a; eauto.", "Qed.", "Hint Resolve left_typing right_typing left_ordertyping right_ordertyping : core.", "Hint Rewrite Vars'_cons Vars'_app : simplify.", "Hint Rewrite left_subst_eqs right_subst_eqs : simplify.", "Lemma eqs_ordertyping_preservation_subst n Gamma E L Delta sigma: Gamma \u22a2\u208a\u208a(n) E : L -> Delta \u22a9(n) sigma : Gamma -> Delta \u22a2\u208a\u208a(n) sigma \u2022\u208a\u208a E : L.", "Proof.", "induction 1; cbn; eauto.", "Qed.", "Class ordsysuni (n: nat) := { Gamma\u2080' : ctx; E\u2080' : eqs X; L\u2080' : list type; H\u2080' : Gamma\u2080' \u22a2\u208a\u208a(n) E\u2080' : L\u2080'; }.", "Definition SOU n (I: ordsysuni n) := exists (Delta: ctx) (sigma: fin -> exp X), Delta \u22a9(n) sigma : Gamma\u2080' /\\ forall s t, (s, t) \u2208 E\u2080' -> sigma \u2022 s \u2261 sigma \u2022 t.", "Arguments SOU: clear implicits.", "Hint Resolve H\u2080' : core.", "Lemma linearize_terms_ordertyping n Gamma (S: list (exp X)) L A: ord' L < n -> ord A <= n -> Gamma \u22a2\u208a(n) S : L -> Gamma \u22a2(n) linearize_terms S : (Arr (rev L) A) \u2192 A.", "Proof.", "intros H; econstructor; eapply AppR_ordertyping with (L0 := L).", "eapply orderlisttyping_preservation_under_renaming; eauto.", "intros x ?; cbn; eauto.", "econstructor; eauto; simplify; cbn; intuition.", "Qed.", "Hint Resolve linearize_terms_ordertyping : core.", "Global Instance orduni_ordsysuni n (I: orduni n X): ordsysuni n.", "Proof.", "refine {| Gamma\u2080' := Gamma\u2080; E\u2080' := [(s\u2080, t\u2080)]; L\u2080' := [A\u2080]; H\u2080' := _; |}.", "abstract (eauto).", "Defined.", "Global Instance ordsysuni_orduni {n} (I: ordsysuni n): ord' L\u2080' < n -> orduni n X.", "Proof.", "intro H.", "refine {| Gamma\u2080 := Gamma\u2080'; s\u2080 := linearize_terms (left_side E\u2080'); t\u2080 := linearize_terms (right_side E\u2080'); A\u2080 := (Arr (rev L\u2080') alpha) \u2192 alpha; H1\u2080 := _; H2\u2080 := _; |}.", "-", "abstract (assert (1 <= n) by (destruct n; lia); eauto).", "-", "abstract (assert (1 <= n) by (destruct n; lia); eauto).", "Defined.", "Lemma OU_SOU n: OU n X \u2aaf SOU n.", "Proof.", "exists (orduni_ordsysuni n); intros I.", "split; intros (Delta & sigma & H1 & H2); exists Delta; exists sigma; intuition.", "firstorder; injection H; intros; subst; eauto.", "firstorder.", "Qed.", "Lemma SOU_OU n (I: ordsysuni n) (H: ord' L\u2080' < n): SOU n I <-> OU n X (ordsysuni_orduni I H).", "Proof.", "split; intros (Delta & sigma & H1 & H2); exists Delta; exists sigma; intuition; cbn [s\u2080 t\u2080 ordsysuni_orduni] in *.", "rewrite !linearize_terms_subst, linearize_terms_equiv.", "now apply equiv_pointwise_eqs.", "eapply equiv_eqs_pointwise; eauto.", "now rewrite <-linearize_terms_equiv, <-!linearize_terms_subst.", "Qed.", "End NthOrderSystemUnification.", "Arguments SOU : clear implicits.", "Arguments ordsysuni : clear implicits.", "Arguments Gamma\u2080' {_} {_} {_}.", "Arguments E\u2080' {_} {_} {_}.", "Arguments L\u2080' {_} {_} {_}.", "Notation \"Gamma \u22a2\u208a\u208a( n ) E : L\" := (eqs_ordertyping _ Gamma n E L)(at level 80, E at level 99).", "Notation \"Gamma \u22a2\u2082( n ')' e : A\" := (eq_ordertyping _ n Gamma e A) (at level 80, e at level 99).", "Hint Resolve eqs_ordertyping_soundness : core.", "Definition NOU {X: Const} n (I: orduni n X) := exists Delta sigma, Delta \u22a9(n) sigma : Gamma\u2080 /\\ sigma \u2022 s\u2080 \u2261 sigma \u2022 t\u2080 /\\ forall x, normal (sigma x).", "Definition NSOU {X: Const} n (I: ordsysuni X n) := exists Delta sigma, Delta \u22a9(n) sigma : Gamma\u2080' /\\ (forall s t, (s, t) \u2208 E\u2080' -> sigma \u2022 s \u2261 sigma \u2022 t) /\\ forall x, normal (sigma x).", "Section SubstitutionTransformations.", "Variable (X: Const) (n: nat) (s t: exp X) (A: type) (Gamma: ctx).", "Hypothesis (Leq: 1 <= n).", "Hypothesis (T1: Gamma \u22a2(n) s : A) (T2: Gamma \u22a2(n) t : A).", "Implicit Types (Delta: ctx) (sigma : fin -> exp X).", "Lemma ordertyping_normalise_subst sigma Delta : Delta \u22a9(n) sigma : Gamma -> {tau | (forall x : fin, sigma x >* tau x) /\\ (forall x : nat, x \u2208 dom Gamma -> normal (tau x)) /\\ Delta \u22a9(n) tau : Gamma}.", "Proof.", "intros H; eapply ordertypingSubst_soundness in H as H'; eapply normalise_subst in H' as [tau].", "exists tau; intuition.", "intros ???.", "eapply ordertyping_preservation_under_steps; [eapply H0 |].", "eapply H; eauto.", "Qed.", "End SubstitutionTransformations.", "Section Normalisation.", "Variable (X: Const).", "Arguments s\u2080 {_} {_} _.", "Arguments t\u2080 {_} {_} _.", "Arguments Gamma\u2080 {_} {_} _.", "Arguments A\u2080 {_} {_} _.", "Arguments s\u1d64 {_} _.", "Arguments t\u1d64 {_} _.", "Arguments Gamma\u1d64 {_} _.", "Arguments A\u1d64 {_} _.", "Lemma U_NU I: U X I <-> NU I.", "Proof.", "split; intros (Delta & sigma & H1 & H2); [| exists Delta; exists sigma; intuition].", "eapply normalise_subst in H1 as (tau & H5 & H6 & H7).", "pose (theta x := if nth (Gamma\u1d64 I) x then tau x else var x).", "exists Delta.", "exists theta.", "intuition.", "+", "intros ???; unfold theta; rewrite H; eapply H7; eauto.", "+", "rewrite subst_pointwise_equiv with (sigma0 := theta) (tau0 := sigma).", "rewrite subst_pointwise_equiv with (sigma0 := theta) (tau0 := sigma); eauto.", "all: intros ? H; eapply typing_variables in H; eauto; domin H.", "all: unfold theta; now rewrite H, H5.", "+", "unfold theta; destruct nth eqn: ?; [|eauto].", "domin Heqo; eauto.", "Qed.", "Lemma OU_NOU n I: 1 <= n -> OU n X I <-> NOU n I.", "Proof.", "intros Leq; split; intros (Delta & sigma & H1 & H2); [| exists Delta; exists sigma; intuition].", "eapply ordertyping_normalise_subst in H1 as (tau & H5 & H6 & H7).", "pose (theta x := if nth (Gamma\u2080 I) x then tau x else var x).", "exists Delta.", "exists theta.", "intuition.", "+", "intros ???; unfold theta; rewrite H; eapply H7; eauto.", "+", "rewrite subst_pointwise_equiv with (sigma0 := theta) (tau0 := sigma).", "rewrite subst_pointwise_equiv with (sigma0 := theta) (tau0 := sigma); eauto.", "all: intros ? H; eapply typing_variables in H; eauto; domin H.", "all: unfold theta; now rewrite H, H5.", "+", "unfold theta; destruct nth eqn: ?; [|eauto]; domin Heqo; eauto.", "Qed.", "Lemma SOU_NSOU n I: 1 <= n -> SOU X n I <-> NSOU n I.", "Proof.", "intros Leq; split; intros (Delta & sigma & H1 & H2); [| exists Delta; exists sigma; intuition].", "eapply ordertyping_normalise_subst in H1 as (tau & H5 & H6 & H7).", "pose (theta x := if nth (@Gamma\u2080' _ _ I) x then tau x else var x).", "exists Delta.", "exists theta.", "intuition.", "+", "intros ???; unfold theta; rewrite H; eapply H7; eauto.", "+", "intros; eauto.", "rewrite subst_pointwise_equiv with (sigma0 := theta) (tau0 := sigma).", "rewrite subst_pointwise_equiv with (sigma0 := theta) (tau0 := sigma); eauto.", "all: intros ? ?; enough (x \u2208 dom Gamma\u2080') as D; [domin D; unfold theta; rewrite D; eauto|].", "all: eapply Vars_listtyping.", "2, 4: eapply in_flat_map; eexists; (intuition eauto).", "2: change t with (snd (s, t)); eapply in_map; eauto.", "2: change s with (fst (s, t)); eapply in_map; eauto.", "eapply right_typing, eqs_ordertyping_soundness, @H\u2080'.", "eapply left_typing, eqs_ordertyping_soundness, @H\u2080'.", "+", "unfold theta; destruct nth eqn: ?; [|eauto].", "domin Heqo; eauto.", "Qed.", "Lemma OU_reduction n (I I': orduni n X): s\u2080 I \u2261 s\u2080 I' -> t\u2080 I \u2261 t\u2080 I' -> Gamma\u2080 I = Gamma\u2080 I' -> A\u2080 I = A\u2080 I' -> OU n X I -> OU n X I'.", "Proof.", "intros H1 H2 H3 H4; intros (Delta & sigma & T & N); exists Delta; exists sigma; split.", "rewrite <-H3; eauto.", "now rewrite <-H1, <-H2, N.", "Qed.", "Program Instance orduni_normalise n (I: orduni n X) : orduni n X := { Gamma\u2080 := Gamma\u2080 I; s\u2080 := eta\u2080 (s\u2080 I) H1\u2080; t\u2080 := eta\u2080 (t\u2080 I) H2\u2080; A\u2080 := A\u2080 I }.", "Next Obligation.", "eapply ordertyping_preservation_under_steps.", "rewrite <-eta\u2080_correct.", "all: eauto.", "Qed.", "Next Obligation.", "eapply ordertyping_preservation_under_steps.", "rewrite <-eta\u2080_correct.", "all: eauto.", "Qed.", "Lemma orduni_normalise_correct n I: OU n X I <-> OU n X (orduni_normalise n I).", "Proof.", "split; intros H; [eapply @OU_reduction|eapply @OU_reduction with (I := orduni_normalise n I)].", "all: eauto; cbn; eapply equiv_join.", "1, 3, 6, 8: rewrite eta\u2080_correct.", "all: reflexivity.", "Qed.", "End Normalisation."], "theorems": [{"name": "eqs_ordertyping_step", "kind": "Lemma", "begin": 20, "end": 23}, {"name": "eqs_ordertyping_monotone", "kind": "Lemma", "begin": 24, "end": 27}, {"name": "eqs_ordertyping_soundness", "kind": "Lemma", "begin": 28, "end": 31}, {"name": "left_ordertyping", "kind": "Lemma", "begin": 32, "end": 35}, {"name": "right_ordertyping", "kind": "Lemma", "begin": 36, "end": 39}, {"name": "ordertyping_combine", "kind": "Lemma", "begin": 40, "end": 44}, {"name": "eqs_ordertyping_preservation_subst", "kind": "Lemma", "begin": 48, "end": 51}, {"name": "linearize_terms_ordertyping", "kind": "Lemma", "begin": 56, "end": 62}, {"name": "OU_SOU", "kind": "Lemma", "begin": 78, "end": 84}, {"name": "SOU_OU", "kind": "Lemma", "begin": 85, "end": 92}, {"name": "ordertyping_normalise_subst", "kind": "Lemma", "begin": 109, "end": 116}, {"name": "U_NU", "kind": "Lemma", "begin": 128, "end": 146}, {"name": "OU_NOU", "kind": "Lemma", "begin": 147, "end": 164}, {"name": "SOU_NSOU", "kind": "Lemma", "begin": 165, "end": 189}, {"name": "OU_reduction", "kind": "Lemma", "begin": 190, "end": 195}, {"name": "orduni_normalise_correct", "kind": "Lemma", "begin": 207, "end": 213}]}