{"code": ["Require Import List.", "Require Import Undecidability.SemiUnification.SemiU.", "From Undecidability.SemiUnification.Util Require Import Facts Enumerable.", "Require Import ssreflect ssrfun ssrbool.", "Set Default Proof Using \"Type\".", "Set Default Goal Selector \"!\".", "Module Argument.", "Definition embed_var (x: nat) := atom (to_nat (x, 0)).", "Definition z (b: bool) := atom (to_nat (0, if b then 2 else 1)).", "Section RU2SemiU_LU2SemiU.", "Variables s0 s1 t: term.", "Definition s' := substitute embed_var (arr s0 s1).", "Definition t0' := arr (substitute embed_var t) (z false).", "Definition t1' := arr (z true) (substitute embed_var t).", "Section Transport.", "Variables \u03c6 \u03c80 \u03c81 : valuation.", "Variable H\u03c80 : substitute \u03c80 (substitute \u03c6 s0) = substitute \u03c6 t.", "Variable H\u03c81 : substitute \u03c81 (substitute \u03c6 s1) = substitute \u03c6 t.", "Definition \u03c6' : valuation := fun x => match of_nat x with | (x, 0) => substitute embed_var (\u03c6 x) | (0, 1) => substitute embed_var (substitute \u03c80 (substitute \u03c6 s1)) | (0, 2) => substitute embed_var (substitute \u03c81 (substitute \u03c6 s0)) | _ => atom x end.", "Definition \u03c80' : valuation := fun x => match of_nat x with | (x, 0) => substitute embed_var (\u03c80 x) | _ => atom x end.", "Definition \u03c81' : valuation := fun x => match of_nat x with | (x, 0) => substitute embed_var (\u03c81 x) | _ => atom x end.", "Lemma substitute_\u03c6'P {r: term} : substitute \u03c6' (substitute embed_var r) = substitute embed_var (substitute \u03c6 r).", "Proof.", "elim: r => [[| ?] | *] /=; [by rewrite /\u03c6' ?enumP | by rewrite /\u03c6' ?enumP | by f_equal].", "Qed.", "Lemma substitute_\u03c80'P {r: term} : substitute \u03c80' (substitute embed_var r) = substitute embed_var (substitute \u03c80 r).", "Proof.", "elim: r => [[| ?] | *] /=; [by rewrite /\u03c80' ?enumP | by rewrite /\u03c80' ?enumP | by f_equal].", "Qed.", "Lemma substitute_\u03c81'P {r: term} : substitute \u03c81' (substitute embed_var r) = substitute embed_var (substitute \u03c81 r).", "Proof.", "elim: r => [[| ?] | *] /=; [by rewrite /\u03c81' ?enumP | by rewrite /\u03c81' ?enumP | by f_equal].", "Qed.", "Lemma transport : LU2SemiU (s', t0', t1').", "Proof using \u03c6 \u03c80 \u03c81 H\u03c80 H\u03c81.", "exists \u03c6', \u03c80', \u03c81'.", "constructor.", "-", "rewrite /s' /t0' /=.", "congr arr; rewrite ?substitute_\u03c6'P substitute_\u03c80'P ?/\u03c6' ?enumP; by congruence.", "-", "rewrite /s' /t1' /=.", "congr arr; rewrite ?substitute_\u03c6'P substitute_\u03c81'P ?/\u03c6' ?enumP; by congruence.", "Qed.", "End Transport.", "Section Reflection.", "Variables \u03c6' \u03c80' \u03c81' : valuation.", "Variable H\u03c80' : substitute \u03c80' (substitute \u03c6' s') = substitute \u03c6' t0'.", "Variable H\u03c81' : substitute \u03c81' (substitute \u03c6' s') = substitute \u03c6' t1'.", "Lemma substitute_embed_var {\u03be r} : substitute (fun x => \u03be (to_nat (x, 0))) r = substitute \u03be (substitute embed_var r).", "Proof.", "elim: r; [done | by move=> /=; congruence].", "Qed.", "Lemma reflection : RU2SemiU (s0, s1, t).", "Proof using \u03c6' \u03c80' \u03c81' H\u03c80' H\u03c81'.", "exists (fun x => \u03c6' (to_nat (x, 0))), \u03c80', \u03c81'.", "move: H\u03c80' H\u03c81'.", "rewrite ?(substitute_embed_var (\u03be := \u03c6')) /s' /t0' /t1' /=.", "move=> ? ?.", "constructor; by congruence.", "Qed.", "End Reflection.", "End RU2SemiU_LU2SemiU.", "End Argument.", "Require Import Undecidability.Synthetic.Definitions.", "Theorem reduction : RU2SemiU \u2aaf LU2SemiU.", "Proof.", "exists (fun '(s0, s1, t) => (Argument.s' s0 s1, Argument.t0' t, Argument.t1' t)).", "move=> [[? ?] ?].", "constructor.", "-", "move=> [?] [?] [?] [? ?].", "apply: Argument.transport; by eassumption.", "-", "move=> [?] [?] [?] [? ?].", "apply: Argument.reflection; by eassumption.", "Qed."], "theorems": [{"name": "substitute_\u03c6'P", "kind": "Lemma", "begin": 21, "end": 24}, {"name": "substitute_\u03c80'P", "kind": "Lemma", "begin": 25, "end": 28}, {"name": "substitute_\u03c81'P", "kind": "Lemma", "begin": 29, "end": 32}, {"name": "transport", "kind": "Lemma", "begin": 33, "end": 43}, {"name": "substitute_embed_var", "kind": "Lemma", "begin": 49, "end": 52}, {"name": "reflection", "kind": "Lemma", "begin": 53, "end": 60}, {"name": "reduction", "kind": "Theorem", "begin": 65, "end": 76}]}