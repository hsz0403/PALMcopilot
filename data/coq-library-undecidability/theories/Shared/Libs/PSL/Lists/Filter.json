{"code": ["From Undecidability.Shared.Libs.PSL Require Import BaseLists.", "Section Filter.", "Variable X : Type.", "Implicit Types (x y: X) (A B C: list X) (p q: X -> bool).", "Lemma in_filter_iff x p A : x el filter p A <-> x el A /\\ p x.", "Proof.", "induction A as [|y A]; cbn.", "-", "tauto.", "-", "destruct (p y) eqn:E; cbn; rewrite IHA; intuition; subst; auto.", "destruct (p x); auto.", "Qed.", "Lemma filter_incl p A : filter p A <<= A.", "Proof.", "intros x D.", "apply in_filter_iff in D.", "apply D.", "Qed.", "Lemma filter_mono p A B : A <<= B -> filter p A <<= filter p B.", "Proof.", "intros D x E.", "apply in_filter_iff in E as [E E'].", "apply in_filter_iff.", "auto.", "Qed.", "Lemma filter_id p A : (forall x, x el A -> p x) -> filter p A = A.", "Proof.", "intros D.", "induction A as [|x A]; cbn.", "-", "reflexivity.", "-", "destruct (p x) eqn:E.", "+", "f_equal; auto.", "+", "exfalso.", "apply bool_Prop_false in E.", "auto.", "Qed.", "Lemma filter_app p A B : filter p (A ++ B) = filter p A ++ filter p B.", "Proof.", "induction A as [|y A]; cbn.", "-", "reflexivity.", "-", "rewrite IHA.", "destruct (p y); reflexivity.", "Qed.", "Lemma filter_fst p x A : p x -> filter p (x::A) = x::filter p A.", "Proof.", "cbn.", "destruct (p x); auto.", "Qed.", "Lemma filter_fst' p x A : ~ p x -> filter p (x::A) = filter p A.", "Proof.", "cbn.", "destruct (p x); auto.", "Qed.", "Lemma filter_pq_mono p q A : (forall x, x el A -> p x -> q x) -> filter p A <<= filter q A.", "Proof.", "intros D x E.", "apply in_filter_iff in E as [E E'].", "apply in_filter_iff.", "auto.", "Qed.", "Lemma filter_pq_eq p q A : (forall x, x el A -> p x = q x) -> filter p A = filter q A.", "Proof.", "intros C; induction A as [|x A]; cbn.", "-", "reflexivity.", "-", "destruct (p x) eqn:D, (q x) eqn:E.", "+", "f_equal.", "auto.", "+", "exfalso.", "enough (p x = q x) by congruence.", "auto.", "+", "exfalso.", "enough (p x = q x) by congruence.", "auto.", "+", "auto.", "Qed.", "Lemma filter_and p q A : filter p (filter q A) = filter (fun x => p x && q x) A.", "Proof.", "induction A as [|x A]; cbn.", "reflexivity.", "destruct (p x) eqn:E, (q x); cbn; try rewrite E; now rewrite IHA.", "Qed.", "Lemma filter_comm p q A : filter p (filter q A) = filter q (filter p A).", "Proof.", "rewrite !filter_and.", "apply filter_pq_eq.", "intros x _.", "now destruct (p x), (q x).", "Qed.", "End Filter.", "Lemma filter_map X Y p (f: X -> Y) A : filter p (map f A) = map f (filter (fun x => p (f x)) A).", "Proof.", "induction A;cbn.", "reflexivity.", "destruct _;cbn; congruence.", "Qed."], "theorems": [{"name": "in_filter_iff", "kind": "Lemma", "begin": 4, "end": 12}, {"name": "filter_incl", "kind": "Lemma", "begin": 13, "end": 18}, {"name": "filter_mono", "kind": "Lemma", "begin": 19, "end": 25}, {"name": "filter_id", "kind": "Lemma", "begin": 26, "end": 40}, {"name": "filter_app", "kind": "Lemma", "begin": 41, "end": 49}, {"name": "filter_fst", "kind": "Lemma", "begin": 50, "end": 54}, {"name": "filter_fst'", "kind": "Lemma", "begin": 55, "end": 59}, {"name": "filter_pq_mono", "kind": "Lemma", "begin": 60, "end": 66}, {"name": "filter_pq_eq", "kind": "Lemma", "begin": 67, "end": 87}, {"name": "filter_and", "kind": "Lemma", "begin": 88, "end": 93}, {"name": "filter_comm", "kind": "Lemma", "begin": 94, "end": 100}, {"name": "filter_map", "kind": "Lemma", "begin": 102, "end": 107}]}