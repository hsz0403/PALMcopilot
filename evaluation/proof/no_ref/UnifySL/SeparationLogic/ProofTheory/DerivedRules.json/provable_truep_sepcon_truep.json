[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": [], "tactic": "unfold iff, and, not.", "exn": "Cannot coerce and to an evaluable reference.", "type": "not_evaluable", "handled": true}, {"ctx": [], "tactic": "split; intros.", "exn": "Not an inductive product.", "type": "not_inductive_product", "handled": true}, {"ctx": [], "tactic": "intro.", "exn": "No product even after head-reduction.", "type": "no_product", "handled": true}, {"ctx": [], "tactic": "apply emp_sepcon_truep_elim.", "exn": "In environment L : Language minL : MinimumLanguage L pL : PropositionalLanguage L sepconL : SepconLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipAX : IntuitionisticPropositionalLogic L Gamma sepconAX : SepconAxiomatization L Gamma ExtsGamma : ExtSeparationLogic L Gamma Unable to unify \"(let (provable) := ?Gamma in provable) (?M2155 * TT && emp --> ?M2155)\" with \"(let (provable) := Gamma in provable) (TT * TT <--> TT)\".", "type": "cannot_unify", "handled": true}, {"ctx": [], "tactic": "split; auto.", "exn": "Not an inductive product.", "type": "not_inductive_product", "handled": true}, {"ctx": [], "tactic": "intro.", "exn": "No product even after head-reduction.", "type": "no_product", "handled": true}, {"ctx": [], "tactic": "apply emp_sepcon_truep_elim in H.", "exn": "No such hypothesis: H", "type": "no_hypos", "handled": true}]}, "chat": [], "original": "unfold iff, and, not. split; intros. - intro. apply emp_sepcon_truep_elim. split; auto. - intro. apply emp_sepcon_truep_elim in H. destruct H as [H _]. auto.", "succ": false}]