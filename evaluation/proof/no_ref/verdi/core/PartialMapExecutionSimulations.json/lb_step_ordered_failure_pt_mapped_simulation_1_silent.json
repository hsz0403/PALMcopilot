[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": ["intros net net' failed failed' lb tr H_label H_step.", "split.", "-"], "tactic": "apply lb_step_ordered_failure_pt_mapped_simulation_1_non_silent with (failed := failed) (net := net) (lb := label_silent) (failed' := failed') (net' := net') (tr := tr); auto.", "exn": "In environment base_fst, base_snd : BaseParams labeled_multi_fst : LabeledMultiParams base_fst labeled_multi_snd : LabeledMultiParams base_snd base_map : BaseParamsPartialMap base_fst base_snd name_map : MultiParamsNameTotalMap unlabeled_multi_params unlabeled_multi_params msg_map : MultiParamsMsgPartialMap unlabeled_multi_params unlabeled_multi_params label_map : LabeledMultiParamsLabelTotalMap labeled_multi_fst labeled_multi_snd name_map_bijective : MultiParamsNameTotalMapBijective name_map multi_map_congr : MultiParamsPartialMapCongruency base_map name_map msg_map multi_map_lb_congr : LabeledMultiParamsPartialMapCongruency base_map name_map msg_map label_map label_eq_dec : forall x y : label, {x = y} + {x <> y} tot_map_label_injective : forall l l' : label, tot_map_label l = tot_map_label l' -> l = l' label_tot_mapped : forall l : label, exists l' : label, l = tot_map_label l' net, net' : ordered_network failed, failed' : list name lb : label tr : list (name * (input + output)) H_label : tot_map_label lb = label_silent H_step : lb_step_ordered_failure (failed, net) lb (failed', net') tr Unable to unify \"lb_step_ordered_failure (List.map tot_map_name failed, pt_map_onet net) (tot_map_label label_silent) (List.map tot_map_name failed', pt_map_onet net') (filterMap pt_map_trace_ev tr)\" with \"lb_step_ordered_failure (List.map tot_map_name failed, pt_map_onet net) label_silent (List.map tot_map_name failed', pt_map_onet net') []\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros net net' failed failed' lb tr H_label H_step.", "split.", "-"], "tactic": "-", "exn": "Wrong bullet -: Current bullet - is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["intros net net' failed failed' lb tr H_label H_step.", "split.", "-", "shelve.", "-", "unfold filterMap."], "tactic": "reflexivity.", "exn": "In environment base_fst, base_snd : BaseParams labeled_multi_fst : LabeledMultiParams base_fst labeled_multi_snd : LabeledMultiParams base_snd base_map : BaseParamsPartialMap base_fst base_snd name_map : MultiParamsNameTotalMap unlabeled_multi_params unlabeled_multi_params msg_map : MultiParamsMsgPartialMap unlabeled_multi_params unlabeled_multi_params label_map : LabeledMultiParamsLabelTotalMap labeled_multi_fst labeled_multi_snd name_map_bijective : MultiParamsNameTotalMapBijective name_map multi_map_congr : MultiParamsPartialMapCongruency base_map name_map msg_map multi_map_lb_congr : LabeledMultiParamsPartialMapCongruency base_map name_map msg_map label_map label_eq_dec : forall x y : label, {x = y} + {x <> y} tot_map_label_injective : forall l l' : label, tot_map_label l = tot_map_label l' -> l = l' label_tot_mapped : forall l : label, exists l' : label, l = tot_map_label l' net, net' : ordered_network failed, failed' : list name lb : label tr : list (name * (input + output)) H_label : tot_map_label lb = label_silent H_step : lb_step_ordered_failure (failed, net) lb (failed', net') tr Unable to unify \"[]\" with \"(fix filterMap (A B : Type) (f : A -> option B) (l : list A) {struct l} : list B := match l with | [] => [] | x :: xs => match f x with | Some y => y :: filterMap A B f xs | None => filterMap A B f xs end end) (name * (input + output))%type (name * (input + output))%type pt_map_trace_ev tr\".", "type": "cannot_unify", "handled": true}]}, "chat": [], "original": "intros net net' failed failed' lb tr H_label H_step. split. - apply lb_step_ordered_failure_pt_mapped_simulation_1_non_silent with (failed := failed) (net := net) (lb := label_silent) (failed' := failed') (net' := net') (tr := tr); auto. - unfold filterMap. reflexivity.", "succ": false, "time": 27.152400737999983}]