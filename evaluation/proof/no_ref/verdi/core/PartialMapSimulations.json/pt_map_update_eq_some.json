[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": ["intros net d p p' H.", "unfold pt_map_packet in H.", "destruct p as [src dst m].", "destruct (pt_map_msg m) eqn:Hmsg.", "-", "inversion H; subst; clear H.", "simpl."], "tactic": "apply f_equal.", "exn": "In environment base_fst, base_snd : BaseParams multi_fst : MultiParams base_fst multi_snd : MultiParams base_snd base_map : BaseParamsPartialMap base_fst base_snd name_map : MultiParamsNameTotalMap multi_fst multi_snd msg_map : MultiParamsMsgPartialMap multi_fst multi_snd name_map_bijective : MultiParamsNameTotalMapBijective name_map multi_map_congr : MultiParamsPartialMapCongruency base_map name_map msg_map net : network d : data src, dst : name m : msg m0 : msg Hmsg : pt_map_msg m = Some m0 Unable to unify \"?M1666 ?M1667 = ?M1666 ?M1668\" with \"(fun n : name => pt_map_data (update name_eq_dec (nwState net) dst d (tot_map_name_inv n))) = update name_eq_dec (fun n : name => pt_map_data (nwState net (tot_map_name_inv n))) (tot_map_name dst) (pt_map_data d)\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros net d p p' H.", "unfold pt_map_packet in H.", "destruct p as [src dst m].", "destruct (pt_map_msg m) eqn:Hmsg.", "-", "inversion H; subst; clear H.", "simpl."], "tactic": "apply f_equal with (f:= fun n => pt_map_data (update name_eq_dec (nwState net) dst d (tot_map_name_inv n))).", "exn": "In environment base_fst, base_snd : BaseParams multi_fst : MultiParams base_fst multi_snd : MultiParams base_snd base_map : BaseParamsPartialMap base_fst base_snd name_map : MultiParamsNameTotalMap multi_fst multi_snd msg_map : MultiParamsMsgPartialMap multi_fst multi_snd name_map_bijective : MultiParamsNameTotalMapBijective name_map multi_map_congr : MultiParamsPartialMapCongruency base_map name_map msg_map net : network d : data src, dst : name m : msg m0 : msg Hmsg : pt_map_msg m = Some m0 Unable to unify \"pt_map_data (update name_eq_dec (nwState net) dst d (tot_map_name_inv ?M1667)) = pt_map_data (update name_eq_dec (nwState net) dst d (tot_map_name_inv ?M1668))\" with \"(fun n : name => pt_map_data (update name_eq_dec (nwState net) dst d (tot_map_name_inv n))) = update name_eq_dec (fun n : name => pt_map_data (nwState net (tot_map_name_inv n))) (tot_map_name dst) (pt_map_data d)\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros net d p p' H.", "unfold pt_map_packet in H.", "destruct p as [src dst m].", "destruct (pt_map_msg m) eqn:Hmsg.", "-", "inversion H; subst; clear H.", "simpl."], "tactic": "-", "exn": "Wrong bullet -: Current bullet - is not finished.", "type": "unfinished_bullet", "handled": true}]}, "chat": [], "original": "intros net d p p' H. unfold pt_map_packet in H. destruct p as [src dst m]. destruct (pt_map_msg m) eqn:Hmsg. - inversion H; subst; clear H. simpl. apply f_equal. apply f_equal with (f:= fun n => pt_map_data (update name_eq_dec (nwState net) dst d (tot_map_name_inv n))). apply to_net_inv_eq. - inversion H.", "succ": false, "time": 45.79992649499991}]