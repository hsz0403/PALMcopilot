[{"history": {"proof": "apply functional_extensionality. intros n. unfold tot_map_name_inv. destruct name_map_bijective. sauto lq: on depth: 3.", "repairs": ["", "", "", "", "hammer"], "exceptions": [{"ctx": ["apply functional_extensionality.", "intros n.", "unfold tot_map_name_inv.", "destruct name_map_bijective."], "tactic": "apply tot_map_name_inv_inverse.", "exn": "In environment base_fst, base_snd : BaseParams multi_fst : MultiParams base_fst multi_snd : MultiParams base_snd name_map : MultiParamsNameTotalMap multi_fst multi_snd msg_map : MultiParamsMsgPartialMap multi_fst multi_snd multi_map : MultiParamsPartialExtendedMap multi_fst multi_snd name_map_bijective : MultiParamsNameTotalMapBijective name_map multi_map_congr : MultiParamsPartialExtendedMapCongruency name_map msg_map multi_map n : name tot_map_name_inv_inverse : forall n : name, tot_map_name_inv (tot_map_name n) = n tot_map_name_inverse_inv : forall n : name, tot_map_name (tot_map_name_inv n) = n Unable to unify \"tot_map_name_inv (tot_map_name ?M1646) = ?M1646\" with \"init_handlers n = pt_ext_map_data (init_handlers ((let (_, tot_map_name_inv) := name_map in tot_map_name_inv) n)) ((let (_, tot_map_name_inv) := name_map in tot_map_name_inv) n)\".", "type": "cannot_unify", "handled": true}]}, "chat": [], "original": "simpl. apply functional_extensionality. intros n. unfold tot_map_name_inv. destruct name_map_bijective. apply tot_map_name_inv_inverse.", "succ": true, "time": 0.23390631400002349}]