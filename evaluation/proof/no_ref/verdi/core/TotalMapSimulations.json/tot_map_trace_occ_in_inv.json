[{"history": {"proof": "intros tr h inp out H. unfold tot_map_trace_occ in H. destruct tr as [| [h' [inp'|out']] tr'] eqn: Heqtr. - discriminate H. - inversion H. hauto rew: off use: @tot_map_name_injective unfold: map, output, input, name inv: list. - scongruence depth: 3.", "repairs": ["", "", "", "", "", "", "", "hammer", "", "hammer"], "exceptions": []}, "chat": [], "original": "intros tr h inp out H. unfold tot_map_trace_occ in H. destruct tr as [| [h' [inp'|out']] tr'] eqn: Heqtr. - discriminate H. - inversion H. subst. clear H. exists h', inp', out'. repeat split; auto. + reflexivity. + rewrite tot_map_name_inv_inverse. reflexivity. + rewrite map_map. apply map_ext. intros. apply tot_map_output_inverse. + rewrite tot_map_input_inverse. reflexivity.", "succ": true, "time": 20.568086017000013}]