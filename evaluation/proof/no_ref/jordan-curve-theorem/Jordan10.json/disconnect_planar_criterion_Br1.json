[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": [], "tactic": "intros m x x' Hmap Hpl Hdl y y' Hexpf.", "exn": "No product even after head-reduction.", "type": "no_product", "handled": true}, {"ctx": ["intros.", "unfold expf, Br1, inv_hmap, double_link, expf in *.", "split; intro Hexpf'.", "-", "intro Heqc."], "tactic": "apply Hexpf' in Heqc.", "exn": "Unable to apply lemma of type \"(fix inv_hmap (m : fmap) : Prop := match m with | V => True | I m0 x _ _ => inv_hmap m0 /\\\\ prec_I m0 x | L m0 k0 x y => inv_hmap m0 /\\\\ prec_L m0 k0 x y end) m /\\\\ MF.expo m y y'\" on hypothesis of type \"eqc (if succ_dec m zero x then if succ_dec m zero x' then B (L (B m zero x) zero (top m zero x) (bottom m zero x)) zero x' else B m zero x else B m zero x') x' y'\".", "type": "cannot_apply_in", "handled": true}, {"ctx": ["intros.", "unfold expf, Br1, inv_hmap, double_link, expf in *.", "split; intro Hexpf'.", "-", "intro Heqc."], "tactic": "-", "exn": "Wrong bullet -: Current bullet - is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["intros.", "unfold expf, Br1, inv_hmap, double_link, expf in *.", "split; intro Hexpf'.", "-", "intro Heqc.", "shelve.", "-"], "tactic": "intros Heqc.", "exn": "No product even after head-reduction.", "type": "no_product", "handled": true}]}, "chat": [], "original": "intros m x x' Hmap Hpl Hdl y y' Hexpf. unfold expf, Br1, inv_hmap, double_link, expf in *. split; intro Hexpf'. - intro Heqc. apply Hexpf' in Heqc. destruct Hdl as [Hneq Hexpe]. destruct (succ_dec m zero x) as [Hsuccx|Hsuccx]; rewrite Hsuccx in *. + destruct (succ_dec m zero x') as [Hsuccx'|Hsuccx']; rewrite Hsuccx' in *. * apply (proj2 Hexpf'). apply Hmap. apply Hpl. apply Heqc. * apply (not_eqc_planar_0 m x x' Hmap). { apply Hmap. } { apply Hpl. } { apply Heqc. } + apply (not_eqc_planar_0 m x x' Hmap). * apply Hmap. * apply Hpl. * apply Heqc. - intros Heqc. apply Hexpf; try auto. intro Heqcc. apply Heqc. destruct Hdl as [Hneq Hexpe]. destruct (succ_dec m zero x) as [Hsuccx|Hsuccx]; rewrite Hsuccx in *. + destruct (succ_dec m zero x') as [Hsuccx'|Hsuccx']; rewrite Hsuccx' in *. * apply Hexpe. auto. * apply Hexpe. left. symmetry. auto. + apply Heqc.", "succ": false}]