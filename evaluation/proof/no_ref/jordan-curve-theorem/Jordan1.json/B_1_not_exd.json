[{"history": {"proof": "intros m k x Hmap Hexd. srun best use: not_pred_B_1, pred_exd.", "repairs": ["", "hammer"], "exceptions": [{"ctx": ["intros m k x Hmap Hexd.", "unfold B_1.", "destruct m.", "-", "reflexivity.", "-"], "tactic": "assert (H: k = d \\/ k <> d) by apply eq_dim_dec.", "exn": "In environment m : fmap d : dart t : tag p : point k : dim x : dart Hmap : inv_hmap (I m d t p) Hexd : ~ exd (I m d t p) x The term \"d\" has type \"dart\" while it is expected to have type \"dim\".", "type": "wrong_type", "handled": true}, {"ctx": ["intros m k x Hmap Hexd.", "unfold B_1.", "destruct m.", "-", "reflexivity.", "-"], "tactic": "-", "exn": "Wrong bullet -: Current bullet - is not finished.", "type": "unfinished_bullet", "handled": true}]}, "chat": [], "original": "intros m k x Hmap Hexd. unfold B_1. destruct m. - reflexivity. - assert (H: k = d \\/ k <> d) by apply eq_dim_dec. destruct H. + subst. assert (Hn: x = x0 \\/ x <> x0) by apply eq_dart_dec. destruct Hn. * subst. contradiction. * reflexivity. + assert (H: ~ exd (B_1 m k x) x) by (intros H0; apply Hexd; unfold B_1; destruct m; assumption). apply B_not_exd in Hmap. apply Hmap in H. congruence. - assert (H: k0 = d \\/ k0 <> d) by apply eq_dim_dec. destruct H. + subst. assert (Hn: x0 = x \\/ x0 <> x) by apply eq_dart_dec. destruct Hn. * subst. assert (Hy: y0 = x \\/ y0 <> x) by apply eq_dart_dec. destruct Hy. ++ subst. contradiction. ++ reflexivity. * reflexivity. + assert (H: ~ exd (B_1 m k x) x) by (intros H0; apply Hexd; unfold B_1; destruct m; assumption). apply B_not_exd in Hmap. apply Hmap in H. congruence.", "succ": true}]