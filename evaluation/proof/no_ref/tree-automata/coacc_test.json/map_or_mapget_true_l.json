[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": ["intros m0 m1 a H H0."], "tactic": "intros H1 H2.", "exn": "No product even after head-reduction.", "type": "no_product", "handled": true}, {"ctx": ["intros m0 m1 a H H0.", "unfold map_or.", "destruct m0.", "-"], "tactic": "simpl in H1.", "exn": "No such hypothesis: H1", "type": "no_hypos", "handled": true}, {"ctx": ["intros m0 m1 a H H0.", "unfold map_or.", "destruct m0.", "-"], "tactic": "inversion H1.", "exn": "No such hypothesis: H1", "type": "no_hypos", "handled": true}, {"ctx": ["intros m0 m1 a H H0.", "unfold map_or.", "destruct m0.", "-"], "tactic": "-", "exn": "Wrong bullet -: Current bullet - is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["intros m0 m1 a H H0.", "unfold map_or.", "destruct m0.", "-", "shelve.", "-", "destruct m1.", "+"], "tactic": "simpl in H1, H2.", "exn": "No such hypothesis: H1", "type": "no_hypos", "handled": true}, {"ctx": ["intros m0 m1 a H H0.", "unfold map_or.", "destruct m0.", "-", "shelve.", "-", "destruct m1.", "+"], "tactic": "destruct (eqb a a0) eqn:Eq.", "exn": "In environment a0 : ad b : bool a : ad H : domain_equal bool bool (M1 bool a0 b) (M0 bool) H0 : MapGet bool (M1 bool a0 b) a = Some true The term \"a\" has type \"ad\" while it is expected to have type \"bool\".", "type": "wrong_type", "handled": true}, {"ctx": ["intros m0 m1 a H H0.", "unfold map_or.", "destruct m0.", "-", "shelve.", "-", "destruct m1.", "+"], "tactic": "rewrite (lem_get_leb m0 m1 a b true) in H2.", "exn": "No such hypothesis: H2", "type": "no_hypos", "handled": true}, {"ctx": ["intros m0 m1 a H H0.", "unfold map_or.", "destruct m0.", "-", "shelve.", "-", "destruct m1.", "+"], "tactic": "+", "exn": "Wrong bullet +: Current bullet + is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["intros m0 m1 a H H0.", "unfold map_or.", "destruct m0.", "-", "shelve.", "-", "destruct m1.", "+", "shelve.", "+"], "tactic": "simpl in H1.", "exn": "No such hypothesis: H1", "type": "no_hypos", "handled": true}, {"ctx": ["intros m0 m1 a H H0.", "unfold map_or.", "destruct m0.", "-", "shelve.", "-", "destruct m1.", "+", "shelve.", "+"], "tactic": "inversion H1.", "exn": "No such hypothesis: H1", "type": "no_hypos", "handled": true}, {"ctx": ["intros m0 m1 a H H0.", "unfold map_or.", "destruct m0.", "-", "shelve.", "-", "destruct m1.", "+", "shelve.", "+"], "tactic": "-", "exn": "Wrong bullet -: Current bullet + is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["intros m0 m1 a H H0.", "unfold map_or.", "destruct m0.", "-", "shelve.", "-", "destruct m1.", "+", "shelve.", "+", "shelve."], "tactic": "-", "exn": "Wrong bullet -: Expecting +.", "type": "wrong_bullet", "handled": true}, {"ctx": ["intros m0 m1 a H H0.", "unfold map_or.", "destruct m0.", "-", "shelve.", "-", "destruct m1.", "+", "shelve.", "+", "shelve.", "+"], "tactic": "+", "exn": "Wrong bullet +: Current bullet + is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["intros m0 m1 a H H0.", "unfold map_or.", "destruct m0.", "-", "shelve.", "-", "destruct m1.", "+", "shelve.", "+", "shelve.", "+", "shelve."], "tactic": "+", "exn": "Wrong bullet +: Expecting -.", "type": "wrong_bullet", "handled": true}, {"ctx": ["intros m0 m1 a H H0.", "unfold map_or.", "destruct m0.", "-", "shelve.", "-", "destruct m1.", "+", "shelve.", "+", "shelve.", "+", "shelve.", "-"], "tactic": "simpl in H1.", "exn": "No such hypothesis: H1", "type": "no_hypos", "handled": true}]}, "chat": [], "original": "intros m0 m1 a H H0. intros H1 H2. unfold map_or. destruct m0. - simpl in H1. inversion H1. - destruct m1. + simpl in H1, H2. destruct (eqb a a0) eqn:Eq. * rewrite (lem_get_leb m0 m1 a b true) in H2. ** rewrite<- H2. apply leb_true_iff. ** apply lem_domain_equal with (m1:= m1); auto. * apply MapGet_M1_neq with (a:= a) in H2; auto. rewrite H2. simpl. rewrite Eq. reflexivity. + simpl in H1. inversion H1. - destruct m1. + simpl in H1. destruct (eqb a a0) eqn:Eq. * apply lem_domain_equal with (m0:= m0); auto. * apply MapGet_M1_neq with (a:= a) in H1; auto. rewrite H1. reflexivity. + simpl in H1. inversion H1.", "succ": false}]