[{"history": {"proof": "intros m H1 m0 H2. unfold mpl_compat_7_def in *. intros c pl l H. unfold union_mpl_0, union_pl in *. hauto lq: on rew: off depth: 3.", "repairs": ["", "", "", "", "hammer"], "exceptions": [{"ctx": ["intros m H1 m0 H2.", "unfold mpl_compat_7_def in *.", "intros c pl l H."], "tactic": "unfold M2.", "exn": "Cannot coerce M2 to an evaluable reference.", "type": "not_evaluable", "handled": true}, {"ctx": ["intros m H1 m0 H2.", "unfold mpl_compat_7_def in *.", "intros c pl l H."], "tactic": "intros c0 pl0 l0 H0.", "exn": "No product even after head-reduction.", "type": "no_product", "handled": true}, {"ctx": ["intros m H1 m0 H2.", "unfold mpl_compat_7_def in *.", "intros c pl l H.", "unfold union_mpl_0, union_pl in *."], "tactic": "apply H1 with (c:=c) (pl:=pl) (l:=l).", "exn": "In environment m : Map prec_list H1 : forall (c : ad) (pl l : prec_list), MapGet prec_list m c = Some l -> MapGet prec_list ((fix union_mpl_0 (c0 : ad) (pl0 : prec_list) (s : state) {struct s} : state := match s with | @M0 _ => M1 prec_list c0 pl0 | @M1 _ c1 pl1 => if (c0 =? c1)%N then M1 prec_list c0 ((fix union_pl (pl2 pl3 : prec_list) {struct pl2} : prec_list := match pl2 with | prec_cons a pl00 pl01 => prec_cons a pl00 (union_pl pl01 pl3) | prec_empty => pl3 end) pl0 pl1) else MapMerge prec_list (M1 prec_list c0 pl0) (M1 prec_list c1 pl1) | @M2 _ s0 s1 => match c0 with | 0%N => M2 prec_list (union_mpl_0 0%N pl0 s0) s1 | N.pos (p'~1)%positive => M2 prec_list s0 (union_mpl_0 (N.pos p') pl0 s1) | N.pos (p'~0)%positive => M2 prec_list (union_mpl_0 (N.pos p') pl0 s0) s1 | 1%N => M2 prec_list s0 (union_mpl_0 0%N pl0 s1) end end) c pl m) c = Some ((fix union_pl (pl0 pl1 : prec_list) {struct pl0} : prec_list := match pl0 with | prec_cons a pl00 pl01 => prec_cons a pl00 (union_pl pl01 pl1) | prec_empty => pl1 end) pl l) m0 : Map prec_list H2 : forall (c : ad) (pl l : prec_list), MapGet prec_list m0 c = Some l -> MapGet prec_list ((fix union_mpl_0 (c0 : ad) (pl0 : prec_list) (s : state) {struct s} : state := match s with | @M0 _ => M1 prec_list c0 pl0 | @M1 _ c1 pl1 => if (c0 =? c1)%N then M1 prec_list c0 ((fix union_pl (pl2 pl3 : prec_list) {struct pl2} : prec_list := match pl2 with | prec_cons a pl00 pl01 => prec_cons a pl00 (union_pl pl01 pl3) | prec_empty => pl3 end) pl0 pl1) else MapMerge prec_list (M1 prec_list c0 pl0) (M1 prec_list c1 pl1) | @M2 _ s0 s1 => match c0 with | 0%N => M2 prec_list (union_mpl_0 0%N pl0 s0) s1 | N.pos (p'~1)%positive => M2 prec_list s0 (union_mpl_0 (N.pos p') pl0 s1) | N.pos (p'~0)%positive => M2 prec_list (union_mpl_0 (N.pos p') pl0 s0) s1 | 1%N => M2 prec_list s0 (union_mpl_0 0%N pl0 s1) end end) c pl m0) c = Some ((fix union_pl (pl0 pl1 : prec_list) {struct pl0} : prec_list := match pl0 with | prec_cons a pl00 pl01 => prec_cons a pl00 (union_pl pl01 pl1) | prec_empty => pl1 end) pl l) c : ad pl, l : prec_list H : MapGet prec_list (M2 prec_list m m0) c = Some l Unable to unify \"MapGet prec_list ((fix union_mpl_0 (c : ad) (pl : prec_list) (s : state) {struct s} : state := match s with | @M0 _ => M1 prec_list c pl | @M1 _ c0 pl0 => if (c =? c0)%N then M1 prec_list c ((fix union_pl (pl1 pl2 : prec_list) {struct pl1} : prec_list := match pl1 with | prec_cons a pl00 pl01 => prec_cons a pl00 (union_pl pl01 pl2) | prec_empty => pl2 end) pl pl0) else MapMerge prec_list (M1 prec_list c pl) (M1 prec_list c0 pl0) | @M2 _ s0 s1 => match c with | 0%N => M2 prec_list (union_mpl_0 0%N pl s0) s1 | N.pos (p'~1)%positive => M2 prec_list s0 (union_mpl_0 (N.pos p') pl s1) | N.pos (p'~0)%positive => M2 prec_list (union_mpl_0 (N.pos p') pl s0) s1 | 1%N => M2 prec_list s0 (union_mpl_0 0%N pl s1) end end) c pl m) c = Some ((fix union_pl (pl0 pl1 : prec_list) {struct pl0} : prec_list := match pl0 with | prec_cons a pl00 pl01 => prec_cons a pl00 (union_pl pl01 pl1) | prec_empty => pl1 end) pl l)\" with \"MapGet prec_list match c with | 0%N => M2 prec_list ((fix union_mpl_0 (c : ad) (pl : prec_list) (s : state) {struct s} : state := match s with | @M0 _ => M1 prec_list c pl | @M1 _ c0 pl0 => if (c =? c0)%N then M1 prec_list c ((fix union_pl (pl1 pl2 : prec_list) {struct pl1} : prec_list := match pl1 with | prec_cons a pl00 pl01 => prec_cons a pl00 (union_pl pl01 pl2) | prec_empty => pl2 end) pl pl0) else MapMerge prec_list (M1 prec_list c pl) (M1 prec_list c0 pl0) | @M2 _ s0 s1 => match c with | 0%N => M2 prec_list (union_mpl_0 0%N pl s0) s1 | N.pos (p'~1)%positive => M2 prec_list s0 (union_mpl_0 (N.pos p') pl s1) | N.pos (p'~0)%positive => M2 prec_list (union_mpl_0 (N.pos p') pl s0) s1 | 1%N => M2 prec_list s0 (union_mpl_0 0%N pl s1) end end) 0%N pl m) m0 | N.pos (p'~1)%positive => M2 prec_list m ((fix union_mpl_0 (c : ad) (pl : prec_list) (s : state) {struct s} : state := match s with | @M0 _ => M1 prec_list c pl | @M1 _ c0 pl0 => if (c =? c0)%N then M1 prec_list c ((fix union_pl (pl1 pl2 : prec_list) {struct pl1} : prec_list := match pl1 with | prec_cons a pl00 pl01 => prec_cons a pl00 (union_pl pl01 pl2) | prec_empty => pl2 end) pl pl0) else MapMerge prec_list (M1 prec_list c pl) (M1 prec_list c0 pl0) | @M2 _ s0 s1 => match c with | 0%N => M2 prec_list (union_mpl_0 0%N pl s0) s1 | N.pos (p'0~1)%positive => M2 prec_list s0 (union_mpl_0 (N.pos p'0) pl s1) | N.pos (p'0~0)%positive => M2 prec_list (union_mpl_0 (N.pos p'0) pl s0) s1 | 1%N => M2 prec_list s0 (union_mpl_0 0%N pl s1) end end) (N.pos p') pl m0) | N.pos (p'~0)%positive => M2 prec_list ((fix union_mpl_0 (c : ad) (pl : prec_list) (s : state) {struct s} : state := match s with | @M0 _ => M1 prec_list c pl | @M1 _ c0 pl0 => if (c =? c0)%N then M1 prec_list c ((fix union_pl (pl1 pl2 : prec_list) {struct pl1} : prec_list := match pl1 with | prec_cons a pl00 pl01 => prec_cons a pl00 (union_pl pl01 pl2) | prec_empty => pl2 end) pl pl0) else MapMerge prec_list (M1 prec_list c pl) (M1 prec_list c0 pl0) | @M2 _ s0 s1 => match c with | 0%N => M2 prec_list (union_mpl_0 0%N pl s0) s1 | N.pos (p'0~1)%positive => M2 prec_list s0 (union_mpl_0 (N.pos p'0) pl s1) | N.pos (p'0~0)%positive => M2 prec_list (union_mpl_0 (N.pos p'0) pl s0) s1 | 1%N => M2 prec_list s0 (union_mpl_0 0%N pl s1) end end) (N.pos p') pl m) m0 | 1%N => M2 prec_list m ((fix union_mpl_0 (c : ad) (pl : prec_list) (s : state) {struct s} : state := match s with | @M0 _ => M1 prec_list c pl | @M1 _ c0 pl0 => if (c =? c0)%N then M1 prec_list c ((fix union_pl (pl1 pl2 : prec_list) {struct pl1} : prec_list := match pl1 with | prec_cons a pl00 pl01 => prec_cons a pl00 (union_pl pl01 pl2) | prec_empty => pl2 end) pl pl0) else MapMerge prec_list (M1 prec_list c pl) (M1 prec_list c0 pl0) | @M2 _ s0 s1 => match c with | 0%N => M2 prec_list (union_mpl_0 0%N pl s0) s1 | N.pos (p'~1)%positive => M2 prec_list s0 (union_mpl_0 (N.pos p') pl s1) | N.pos (p'~0)%positive => M2 prec_list (union_mpl_0 (N.pos p') pl s0) s1 | 1%N => M2 prec_list s0 (union_mpl_0 0%N pl s1) end end) 0%N pl m0) end c = Some ((fix union_pl (pl0 pl1 : prec_list) {struct pl0} : prec_list := match pl0 with | prec_cons a pl00 pl01 => prec_cons a pl00 (union_pl pl01 pl1) | prec_empty => pl1 end) pl l)\".", "type": "cannot_unify", "handled": true}]}, "chat": [], "original": "intros m H1 m0 H2. unfold mpl_compat_7_def in *. intros c pl l H. unfold M2. unfold mpl_compat_7_def in H1, H2. intros c0 pl0 l0 H0. unfold union_mpl_0, union_pl in *. apply H1 with (c:=c) (pl:=pl) (l:=l). apply H with (c:=c0) (pl:=pl0) (l:=l0). auto. auto.", "succ": true}]