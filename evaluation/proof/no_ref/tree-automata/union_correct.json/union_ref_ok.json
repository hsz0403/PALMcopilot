[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": ["intros d0 d1 H0 H1.", "unfold DTA_ref_ok in *.", "unfold union.", "destruct d0 as [p0 a0].", "destruct d1 as [p1 a1].", "unfold union_1.", "simpl."], "tactic": "apply union_semantics; auto.", "exn": "In environment p0 : preDTA a0 : ad p1 : preDTA a1 : ad H0 : preDTA_ref_ok p0 H1 : preDTA_ref_ok p1 Unable to unify \"(reconnait ?M1857 ?M1860 \\\\/ reconnait ?M1858 ?M1860 -> reconnait (union ?M1857 ?M1858) ?M1860) /\\\\ (reconnait (union ?M1857 ?M1858) ?M1860 -> reconnait ?M1857 ?M1860 \\\\/ reconnait ?M1858 ?M1860)\" with \"forall (a : ad) (s : state) (c : ad) (pl : prec_list) (b : ad), MapGet state (insert_ostate (u_merge p0 p1) (N.min (N.double (new_preDTA_ad (MapMerge state (udta_conv_0_aux p0) (M0 state)))) (N.succ_double (new_preDTA_ad (udta_conv_1_aux p1)))) (union_0 (u_merge p0 p1) a0 a1)) a = Some s -> MapGet prec_list s c = Some pl -> prec_occur pl b -> exists s0 : state, MapGet state (insert_ostate (u_merge p0 p1) (N.min (N.double (new_preDTA_ad (MapMerge state (udta_conv_0_aux p0) (M0 state)))) (N.succ_double (new_preDTA_ad (udta_conv_1_aux p1)))) (union_0 (u_merge p0 p1) a0 a1)) b = Some s0\".", "type": "cannot_unify", "handled": true}]}, "chat": [], "original": "intros d0 d1 H0 H1. unfold DTA_ref_ok in *. unfold union. destruct d0 as [p0 a0]. destruct d1 as [p1 a1]. unfold union_1. simpl. apply union_semantics; auto.", "succ": false}]