[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": ["intros A T f x n H1 H2."], "tactic": "apply (prechain_dom_ok_ind A (fun T p => prechain_dom_ok A T (iteres A f x n))).", "exn": "Unable to find an instance for the variable p.", "type": "no_instance_var", "handled": true}, {"ctx": ["intros A T f x n H1 H2."], "tactic": "intros y H3.", "exn": "No product even after head-reduction.", "type": "no_product", "handled": true}, {"ctx": ["intros A T f x n H1 H2."], "tactic": "apply domok_single.", "exn": "In environment A : Set T : mEnsemble A f : Map A -> Map A x : Map A n : nat H1 : T x H2 : def_ok_app A T f Unable to unify \"prechain_dom_ok ?M1851 ?M1853 (single ?M1851 ?M1852)\" with \"prechain_dom_ok A T (iteres A f x n)\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros A T f x n H1 H2."], "tactic": "intros y T' p' H3 H4 H5.", "exn": "No product even after head-reduction.", "type": "no_product", "handled": true}, {"ctx": ["intros A T f x n H1 H2."], "tactic": "apply (domok_concat A x T (iteres A f x n)).", "exn": "In environment A : Set T : mEnsemble A f : Map A -> Map A x : Map A n : nat H1 : T x H2 : def_ok_app A T f Unable to unify \"prechain_dom_ok A T (concat A (iteres A f x n) x)\" with \"prechain_dom_ok A T (iteres A f x n)\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros A T f x n H1 H2."], "tactic": "apply H1.", "exn": "In environment A : Set T : mEnsemble A f : Map A -> Map A x : Map A n : nat H1 : T x H2 : def_ok_app A T f Unable to unify \"T x\" with \"prechain_dom_ok A T (iteres A f x n)\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros A T f x n H1 H2."], "tactic": "apply H2.", "exn": "In environment A : Set T : mEnsemble A f : Map A -> Map A x : Map A n : nat H1 : T x H2 : def_ok_app A T f Unable to unify \"def_ok_app A T f\" with \"prechain_dom_ok A T (iteres A f x n)\".", "type": "cannot_unify", "handled": true}]}, "chat": [], "original": "intros A T f x n H1 H2. apply (prechain_dom_ok_ind A (fun T p => prechain_dom_ok A T (iteres A f x n))). + intros y H3. apply domok_single. + intros y T' p' H3 H4 H5. apply (domok_concat A x T (iteres A f x n)). * apply H1. * apply H2. * apply H3. * apply H5. + apply H2; auto.", "succ": false}]