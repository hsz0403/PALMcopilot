[{"history": {"proof": "intros n H. sauto lq: on depth: 3.", "repairs": ["", "hammer"], "exceptions": [{"ctx": ["intros n H."], "tactic": ["inversion H as [H0].", ""], "exn": "Expects a disjunctive pattern with 2 branches.", "type": "num_branch", "handled": false}]}, "chat": [{"role": "user", "content": "I will give you a Coq proof state, including both hypotheses and a specific goal and your need to prove it. Your response should be a singular code block of Coq proof starting with \"```coq\n\", ending with \"Qed.\", without any additional explanation or commentary. Follow to these guidelines:\nIntroduce variables using unique names to avoid any conflicts.\nKeep each command distinct and separated, avoid concatenations like ';' or '[cmd|cmd]'.\nOrganize your proof with bullets like '-', '+', and '*' instead of braces ({, }). Shift to their double symbols like '--' and '++', when necessary.\nEffectively use given premises, follow the syntax and structure demonstrated in the examples provided.\n\nExample 1:\n\nHypotheses:\nn, m: nat\nIHn: m + n = n + m\n\nGoal:\nm + S n = S n + m\n\nProof:\n```coq\nsimpl. rewrite <- IHn. auto.\nQed.```\n\nExample 2:\nHypotheses:\n\nGoal:\nforall n m : nat, m + n = n + m\n\n```coq\nintros n m. induction n.\n- simpl. auto.\n- simpl. rewrite <- IHn. auto.\nQed.```\n\nSolve This Proof State:\n\nHypotheses:\n\n\nGoal:\nforall n : nat, 0 < n -> predZ (pos n) = pos (Init.Nat.pred n)\n\nPremises:\nInductive Z : Set := OZ : Z | pos : nat -> Z | neg : nat -> Z Arguments pos _%nat_scope Arguments neg _%nat_scope\nModule Init := Struct Definition Unconvertible : forall A : Type, A -> A -> Set. Definition unconvertible : forall (A : Type) (a b : A), Unconvertible A a b -> unit. End \nModule Nat := Struct Definition t : Set. Definition zero : nat. Definition one : nat. Definition two : nat. Definition succ : nat -> nat. Definition pred : nat -> nat. Definition add : nat -> nat -> nat. Definition double : nat -> nat. Definition mul : nat -> nat -> nat. Definition sub : nat -> nat -> nat. Definition eqb : nat -> nat -> bool. Definition leb : nat -> nat -> bool. Definition ltb : nat -> nat -> bool. Definition compare : nat -> nat -> comparison. Definition max : nat -> nat -> nat. Definition min : nat -> nat -> nat. Definition even : nat -> bool. Definition odd : nat -> bool. Definition pow : nat -> nat -> nat. Definition tail_add : nat -> nat -> nat. Definition tail_addmul : nat -> nat -> nat -> nat. Definition tail_mul : nat -> nat -> nat. Definition of_uint_acc : Decimal.uint -> nat -> nat. Definition of_uint : Decimal.uint -> nat. Definition to_little_uint : nat -> Decimal\npredZ = fun x : Z => match x with | OZ => neg 0 | pos 0 => OZ | pos (S m) => pos m | neg n => neg (S n) end : Z -> Z\nInductive nat : Set := O : nat | S : nat -> nat Arguments S _%nat_scope\nNotation pred := Init.Nat.pred\nS_pred_pos : forall n : nat, 0 < n -> n = S (Init.Nat.pred n)\nS_pred : forall n m : nat, m < n -> n = S (Init.Nat.pred n)\nPnat.Nat2Pos.inj_pred : forall n : nat, BinPos.Pos.of_nat (Init.Nat.pred n) = BinPos.Pos.pred (BinPos.Pos.of_nat n)\nZnat.Nat2Z.inj_pred : forall n : nat, 0 < n -> BinInt.Z.of_nat (Nat.pred n) = BinInt.Z.pred (BinInt.Z.of_nat n)\nNat.succ_pred_pos : forall n : nat, 0 < n -> S (Nat.pred n) = n\nNat.lt_succ_pred : forall z n : nat, z < n -> S (Nat.pred n) = n\nNat.succ_pred : forall n : nat, n <> 0 -> S (Nat.pred n) = n\nNat.odd_pred : forall n : nat, n <> 0 -> Nat.odd (Nat.pred n) = Nat.even n\nNat.even_pred : forall n : nat, n <> 0 -> Nat.even (Nat.pred n) = Nat.odd n\ntech_pos_not_posZ : forall n m : nat, n <> m -> pos n <> pos m\nInit.Nat.log2 = fun n : nat => Init.Nat.log2_iter (Init.Nat.pred n) 0 1 0 : nat -> nat Arguments Init.Nat.log2 _%nat_scope\nNat.order_induction : forall A : nat -> Prop, Morphisms.Proper (Morphisms.respectful eq iff) A -> forall z : nat, A z -> (forall n : nat, z <= n -> A n -> A (S n)) -> (forall n : nat, n < z -> A (S n) -> A n) -> forall n : nat, A n\nNnat.Nat2N.id : forall n : nat, BinNat.N.to_nat (BinNat.N.of_nat n) = n\npred_Sn : forall n : nat, n = Init.Nat.pred (S n)\nNat.pred_succ : forall n : nat, Nat.pred (S n) = n\nNnat.Nat2N.inj_pred : forall n : nat, BinNat.N.of_nat (Nat.pred n) = BinNat.N.pred (BinNat.N.of_nat n)\nNat.log2_spec : forall n : nat, 0 < n -> 2 ^ Nat.log2 n <= n < 2 ^ S (Nat.log2 n)\nZnat.Zabs2Nat.inj_pred : forall n : BinNums.Z, BinInt.Z.lt BinNums.Z0 n -> BinInt.Z.abs_nat (BinInt.Z.pred n) = Nat.pred (BinInt.Z.abs_nat n)\nZnat.N2Z.inj_pred : forall n : BinNums.N, BinNat.N.lt BinNums.N0 n -> BinInt.Z.of_N (BinNat.N.pred n) = BinInt.Z.pred (BinInt.Z.of_N n)\nZnat.Zabs2N.inj_pred : forall n : BinNums.Z, BinInt.Z.lt BinNums.Z0 n -> BinInt.Z.abs_N (BinInt.Z.pred n) = BinNat.N.pred (BinInt.Z.abs_N n)\nNat.even_succ : forall n : nat, Nat.even (S n) = Nat.odd n\nNat.odd_succ : forall n : nat, Nat.odd (S n) = Nat.even n\nZnat.nat_N_Z : forall n : nat, BinInt.Z.of_N (BinNat.N.of_nat n) = BinInt.Z.of_nat n\nPnat.SuccNat2Pos.id_succ : forall n : nat, BinPos.Pos.to_nat (BinPos.Pos.of_succ_nat n) = S n\nNat.ones_equiv : forall n : nat, Nat.ones n = Nat.pred (2 ^ n)\nVectorDef.cons : forall A : Type, A -> forall n : nat, VectorDef.t A n -> VectorDef.t A (S n)\nInductive t : nat -> Set := F1 : forall n : nat, Fin.t (S n) | FS : forall n : nat, Fin.t n -> Fin.t (S n) Arguments Fin.t _%nat_scope Arguments Fin.F1 {n}%nat_scope Arguments Fin.FS {n}%nat_scope\nZnat.Z2Nat.inj_pred : forall n : BinNums.Z, BinInt.Z.to_nat (BinInt.Z.pred n) = Nat.pred (BinInt.Z.to_nat n)\nZnat.Z2N.inj_pred : forall n : BinNums.Z, BinInt.Z.to_N (BinInt.Z.pred n) = BinNat.N.pred (BinInt.Z.to_N n)\nZ_ind : forall P : Z -> Prop, P OZ -> (forall n : nat, P (pos n)) -> (forall n : nat, P (neg n)) -> forall z : Z, P z\nZ_sind : forall P : Z -> SProp, P OZ -> (forall n : nat, P (pos n)) -> (forall n : nat, P (neg n)) -> forall z : Z, P z\nZ_rect : forall P : Z -> Type, P OZ -> (forall n : nat, P (pos n)) -> (forall n : nat, P (neg n)) -> forall z : Z, P z\nZ_rec : forall P : Z -> Set, P OZ -> (forall n : nat, P (pos n)) -> (forall n : nat, P (neg n)) -> forall z : Z, P z\nZnat.Z_N_nat : forall n : BinNums.Z, BinNat.N.to_nat (BinInt.Z.to_N n) = BinInt.Z.to_nat n\nZnat.Zabs_N_nat : forall n : BinNums.Z, BinNat.N.to_nat (BinInt.Z.abs_N n) = BinInt.Z.abs_nat n\nZnat.Nat2Z.inj_pred_max : forall n : nat, BinInt.Z.of_nat (Nat.pred n) = BinInt.Z.max BinNums.Z0 (BinInt.Z.pred (BinInt.Z.of_nat n))\nNat.le_ind_rel : forall R : Relation_Definitions.relation nat, Morphisms.Proper (Morphisms.respectful eq (Morphisms.respectful eq iff)) R -> (forall m : nat, R 0 m) -> (forall n m : nat, n <= m -> R n m -> R (S n) (S m)) -> forall n m : nat, n <= m -> R n m\nNat.testbit_neg_r : forall a n : nat, n < 0 -> Nat.testbit a n = false\nNnat.Nat2N.inj_compare : forall n n' : nat, (n ?= n') = BinNat.N.compare (BinNat.N.of_nat n) (BinNat.N.of_nat n')\nlt_pred_n_n : forall n : nat, 0 < n -> Init.Nat.pred n < n"}, {"role": "assistant", "content": "```coq\nintros n H. inversion H as [H0]. reflexivity.\nQed.```"}], "original": "intros n H. inversion H as [H0]. reflexivity.", "succ": true}]