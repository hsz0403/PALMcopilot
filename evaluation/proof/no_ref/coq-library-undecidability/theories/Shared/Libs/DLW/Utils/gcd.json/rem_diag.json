[{"history": {"proof": "strivial use: divides_rem_eq, is_gcd_0l unfold: is_gcd.", "repairs": ["hammer"], "exceptions": [{"ctx": ["unfold rem."], "tactic": "apply rem_idem.", "exn": "In environment p : nat Hp : p <> 0 Unable to unify \"0\" with \"p\".", "type": "cannot_unify", "handled": true}, {"ctx": ["unfold rem."], "tactic": "apply div_rem_spec1.", "exn": "In environment p : nat Hp : p <> 0 Unable to unify \"?M1408 = div ?M1408 ?M1409 * ?M1409 + rem ?M1408 ?M1409\" with \"proj1_sig (projT2 (div_full p p)) = 0\".", "type": "cannot_unify", "handled": true}, {"ctx": ["unfold rem."], "tactic": "apply Hp.", "exn": "In environment p : nat Hp : p <> 0 Unable to unify \"p <> 0\" with \"proj1_sig (projT2 (div_full p p)) = 0\".", "type": "cannot_unify", "handled": true}, {"ctx": ["unfold rem."], "tactic": "apply div_rem_spec2.", "exn": "In environment p : nat Hp : p <> 0 Unable to unify \"S (rem ?M1408 ?M1409) <= ?M1409\" with \"proj1_sig (projT2 (div_full p p)) = 0\".", "type": "cannot_unify", "handled": true}, {"ctx": ["unfold rem."], "tactic": "apply Hp.", "exn": "In environment p : nat Hp : p <> 0 Unable to unify \"p <> 0\" with \"proj1_sig (projT2 (div_full p p)) = 0\".", "type": "cannot_unify", "handled": true}]}, "chat": [], "original": "unfold rem. apply rem_idem. - apply div_rem_spec1. - apply Hp. - apply div_rem_spec2. apply Hp.", "succ": true}]