[{"history": {"proof": "hauto use: Nat.le_1_r, Nat.lt_succ_r, div_rem_spec2.", "repairs": ["hammer"], "exceptions": [{"ctx": [], "tactic": "apply Nat.eq_add_1 in Hx.", "exn": "No such hypothesis: Hx", "type": "no_hypos", "handled": true}]}, "chat": [], "original": "apply Nat.eq_add_1 in Hx. destruct Hx as [H1 H2]. destruct H1 as [H1 | H1]; destruct H2 as [H2 | H2]. - left. apply own_multiple in H1. destruct H1 as [H1 | H1]. + subst. apply rem_of_0. + apply divides_rem_eq in H1. auto. - right. apply own_multiple in H2. destruct H2 as [H2 | H2]. + subst. apply rem_of_0. + apply divides_rem_eq in H2. auto. - right. apply divides_2_inv in H1. destruct H1 as [H1 | H1]; subst. + rewrite Nat.b2n_div2. apply Nat.testbit_false. auto. + rewrite Nat.b2n_div2, Nat.add_b2n_double_div2. apply Nat.testbit_true. auto. - left. apply Nat.le_1_r in H2. destruct H2; subst. + rewrite Nat.zero_one in H1. destruct H1; congruence. + apply Nat.eq_pred_0 in H1. congruence.", "succ": true}]