[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": ["intros n.", "unfold is_sqr.", "split.", "-"], "tactic": "apply Z.le_0_mul.", "exn": "In environment n : Z Unable to unify \"0 <= ?M1841 /\\\\ 0 <= ?M1842 \\\\/ ?M1841 <= 0 /\\\\ ?M1842 <= 0\" with \"(0 ?= n * n) = Gt -> False\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros n.", "unfold is_sqr.", "split.", "-"], "tactic": "-", "exn": "Wrong bullet -: Current bullet - is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["intros n.", "unfold is_sqr.", "split.", "-", "shelve.", "-", "exists n.", "split.", "+"], "tactic": "+", "exn": "Wrong bullet +: Current bullet + is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["intros n.", "unfold is_sqr.", "split.", "-", "shelve.", "-", "exists n.", "split.", "+", "shelve.", "+"], "tactic": "split.", "exn": "Not an inductive goal with 1 constructor.", "type": "not_inductive_goal", "handled": true}, {"ctx": ["intros n.", "unfold is_sqr.", "split.", "-", "shelve.", "-", "exists n.", "split.", "+", "shelve.", "+"], "tactic": "apply Z.le_ge_cases.", "exn": "In environment n : Z Unable to unify \"?M1849 <= ?M1850 \\\\/ ?M1850 <= ?M1849\" with \"(0 ?= n) = Gt -> False\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros n.", "unfold is_sqr.", "split.", "-", "shelve.", "-", "exists n.", "split.", "+", "shelve.", "+", "apply Z.lt_le_incl."], "tactic": "apply Z.sqrt_nonneg.", "exn": "In environment n : Z Unable to unify \"(0 ?= Z.sqrt ?M1852) = Gt -> False\" with \"(0 ?= n) = Lt\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros n.", "unfold is_sqr.", "split.", "-", "shelve.", "-", "exists n.", "split.", "+", "shelve.", "+", "apply Z.lt_le_incl."], "tactic": "apply Z.lt_succ_diag_r.", "exn": "In environment n : Z Unable to unify \"(?M1852 ?= Z.succ ?M1852) = Lt\" with \"(0 ?= n) = Lt\".", "type": "cannot_unify", "handled": true}]}, "chat": [], "original": "intros n. unfold is_sqr. split. - apply Z.le_0_mul. - exists n. split. + rewrite Z.mul_comm. apply Z.mul_comm. + split. * apply Z.le_ge_cases. apply Z.lt_le_incl. apply Z.sqrt_nonneg. * apply Z.lt_succ_diag_r.", "succ": false}]