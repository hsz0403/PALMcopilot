[{"history": {"proof": "intros n m p Hp Hgt. qauto depth: 4 l: on use: Zabs_spec, Zcompare_mult_compat, Zgt_asym unfold: Z.gt, BinIntDef.Z.abs.", "repairs": ["", "hammer"], "exceptions": [{"ctx": ["intros n m p Hp Hgt."], "tactic": "apply Zmult_gt_compat_r in Hgt.", "exn": "Unable to find an instance for the variable p.", "type": "no_instance_var", "handled": true}, {"ctx": ["intros n m p Hp Hgt."], "tactic": "apply Zmult_gt_neg_compat_l in Hp.", "exn": "Unable to find an instance for the variable p.", "type": "no_instance_var", "handled": true}, {"ctx": ["intros n m p Hp Hgt."], "tactic": "apply Zgt_trans with (n := Z.mul p n) (m := Z.mul p m) (p := 0).", "exn": "In environment n, m, p : Z Hp : p > 0 Hgt : p * n > p * m Unable to unify \"p * n > 0\" with \"n > m\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros n m p Hp Hgt."], "tactic": "apply Zmult_gt_reg_r; auto.", "exn": "Unable to find an instance for the variable p.", "type": "no_instance_var", "handled": true}]}, "chat": [], "original": "intros n m p Hp Hgt. apply Zmult_gt_compat_r in Hgt. apply Zmult_gt_neg_compat_l in Hp. apply Zgt_trans with (n := Z.mul p n) (m := Z.mul p m) (p := 0). - apply Zmult_gt_reg_r; auto. - auto.", "succ": true}]