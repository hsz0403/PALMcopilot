[{"history": {"proof": "intros n m p H. strivial use: N.add_lt_mono_l.", "repairs": ["", "hammer"], "exceptions": [{"ctx": ["intros n m p H."], "tactic": "apply N.lt_le_trans with (n := p + n) (m := p + m) (p := m).", "exn": "In environment n, m, p : N H : n < m Unable to unify \"p + n < m\" with \"p + n < p + m\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros n m p H."], "tactic": "apply N.lt_le_add_lt.", "exn": "Unable to find an instance for the variables n, m.", "type": "no_instance_var", "handled": true}, {"ctx": ["intros n m p H."], "tactic": "apply H.", "exn": "In environment n, m, p : N H : n < m Unable to unify \"n < m\" with \"p + n < p + m\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros n m p H."], "tactic": "rewrite N.add_shuffle0.", "exn": "Found no subterm matching \"?M1837 + ?M1838 + ?M1839\" in the current goal.", "type": "no_subterm", "handled": true}, {"ctx": ["intros n m p H."], "tactic": "apply N.add_lt_mono_r.", "exn": "In environment n, m, p : N H : n < m Unable to unify \"(?M1837 < ?M1838 -> ?M1837 + ?M1839 < ?M1838 + ?M1839) /\\\\ (?M1837 + ?M1839 < ?M1838 + ?M1839 -> ?M1837 < ?M1838)\" with \"(p + n ?= p + m) = Lt\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros n m p H.", "apply N.lt_lt_add_r."], "tactic": "apply H.", "exn": "In environment n, m, p : N H : n < m Unable to unify \"n < m\" with \"p + n < p\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros n m p H.", "apply N.lt_lt_add_r."], "tactic": "apply N.le_refl.", "exn": "In environment n, m, p : N H : n < m Unable to unify \"(?M1841 ?= ?M1841) = Gt -> False\" with \"(p + n ?= p) = Lt\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros n m p H.", "apply N.lt_lt_add_r."], "tactic": "apply N.le_refl.", "exn": "In environment n, m, p : N H : n < m Unable to unify \"(?M1841 ?= ?M1841) = Gt -> False\" with \"(p + n ?= p) = Lt\".", "type": "cannot_unify", "handled": true}]}, "chat": [], "original": "intros n m p H. apply N.lt_le_trans with (n := p + n) (m := p + m) (p := m). - apply N.lt_le_add_lt. + apply H. + rewrite N.add_shuffle0. apply N.add_lt_mono_r. * apply N.lt_lt_add_r. apply H. * apply N.le_refl. - apply N.le_refl.", "succ": true}]