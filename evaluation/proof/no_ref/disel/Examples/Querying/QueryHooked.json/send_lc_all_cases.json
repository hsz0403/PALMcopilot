[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": ["intros."], "tactic": "case_eq (msg_just_sent (getStatelet (upd (cT:=union_mapUMC Label dstatelet) (plab pc) {| dstate := upd (cT:=union_mapUMC nat_ordType heap) to n (dstate (getSq s)); dsoup := dsoup (getSq s) \\+ fresh (dsoup (getSq s)) \\\\-> {| content := {| tag := t_snd st; tms_cont := msg |}; from := to; to := to'; active := true |} |} s) lq) reqs resp req_num to).", "exn": "Not an inductive product.", "type": "not_inductive_product", "handled": true}, {"ctx": ["intros."], "tactic": "left.", "exn": "Not an inductive goal with 2 constructors.", "type": "not_inductive_goal", "handled": true}, {"ctx": ["intros."], "tactic": "right.", "exn": "Not an inductive goal with 2 constructors.", "type": "not_inductive_goal", "handled": true}, {"ctx": ["intros."], "tactic": "left.", "exn": "Not an inductive goal with 2 constructors.", "type": "not_inductive_goal", "handled": true}, {"ctx": ["intros."], "tactic": "right.", "exn": "Not an inductive goal with 2 constructors.", "type": "not_inductive_goal", "handled": true}, {"ctx": ["intros."], "tactic": "right.", "exn": "Not an inductive goal with 2 constructors.", "type": "not_inductive_goal", "handled": true}]}, "chat": [], "original": "intros. unfold all_hooks_fire in H. unfold send_step in H0. case_eq (msg_just_sent (getStatelet (upd (cT:=union_mapUMC Label dstatelet) (plab pc) {| dstate := upd (cT:=union_mapUMC nat_ordType heap) to n (dstate (getSq s)); dsoup := dsoup (getSq s) \\+ fresh (dsoup (getSq s)) \\\\-> {| content := {| tag := t_snd st; tms_cont := msg |}; from := to; to := to'; active := true |} |} s) lq) reqs resp req_num to). - intros. left. auto. - intros. right. left. auto. - intros. right. right. auto.", "succ": false}]