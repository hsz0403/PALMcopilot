[{"history": {"proof": "rewrite svalE. unfold chain_closed in C. destruct C as [C_bot C_lim]. hauto l: on depth: 3use: svalE.", "repairs": ["", "", "", "hammer"], "exceptions": [{"ctx": ["rewrite svalE.", "unfold chain_closed in C.", "destruct C as [C_bot C_lim]."], "tactic": "rewrite svalE.", "exn": "The LHS of svalE (sval (exist _ _ _)) does not match any subterm of the goal", "type": "no_match_term", "handled": true}, {"ctx": ["rewrite svalE.", "unfold chain_closed in C.", "destruct C as [C_bot C_lim]."], "tactic": "apply C_bot.", "exn": "In environment D : cpo s : Pred D C : [Pred s | bot \\\\In s /\\\\ (forall d : chain D, d <=p s -> lim d \\\\In s)] s x : tp C_bot : bot \\\\In s C_lim : forall d : chain D, d <=p s -> lim d \\\\In s Unable to unify \"bot \\\\In s\" with \"bot <== sval x\".", "type": "cannot_unify", "handled": true}, {"ctx": ["rewrite svalE.", "unfold chain_closed in C.", "destruct C as [C_bot C_lim]."], "tactic": "apply C_lim.", "exn": "In environment D : cpo s : Pred D C : [Pred s | bot \\\\In s /\\\\ (forall d : chain D, d <=p s -> lim d \\\\In s)] s x : tp C_bot : bot \\\\In s C_lim : forall d : chain D, d <=p s -> lim d \\\\In s Unable to unify \"(let 'MemProp p := Mem s in [eta p]) (lim ?M1478)\" with \"(let (mx_leq, _, _, _) := Poset.mixin (Poset.class D) in mx_leq) bot (sval x)\".", "type": "cannot_unify", "handled": true}]}, "chat": [], "original": "rewrite svalE. unfold sub_bot. simpl. unfold chain_closed in C. destruct C as [C_bot C_lim]. rewrite svalE. apply C_bot. apply C_lim.", "succ": true}]