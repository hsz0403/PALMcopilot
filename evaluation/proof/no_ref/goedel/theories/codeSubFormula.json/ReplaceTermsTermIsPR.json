[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": ["unfold ReplaceTermsTerm, isPR."], "tactic": "intros L codeF codeR var apply codeTerm H.", "exn": "L is already used.", "type": "used_var", "handled": true}, {"ctx": ["unfold ReplaceTermsTerm, isPR."], "tactic": "intros L' codeF codeR var apply codeTerm H.", "exn": "codeF is already used.", "type": "used_var", "handled": true}, {"ctx": ["unfold ReplaceTermsTerm, isPR."], "tactic": "intros L' codeF' codeR var apply codeTerm H.", "exn": "codeR is already used.", "type": "used_var", "handled": true}, {"ctx": ["unfold ReplaceTermsTerm, isPR."], "tactic": "intros L' codeF' codeR' var apply codeTerm H.", "exn": "var is already used.", "type": "used_var", "handled": true}, {"ctx": ["unfold ReplaceTermsTerm, isPR."], "tactic": "intros L' codeF' codeR' var' apply codeTerm H.", "exn": "apply is already used.", "type": "used_var", "handled": true}, {"ctx": ["unfold ReplaceTermsTerm, isPR."], "tactic": "intros L' codeF' codeR' var' apply' codeTerm H.", "exn": "codeTerm is already used.", "type": "used_var", "handled": true}, {"ctx": ["unfold ReplaceTermsTerm, isPR."], "tactic": "intros L' codeF' codeR' var' apply' codeTerm' H.", "exn": "No product even after head-reduction.", "type": "no_product", "handled": true}, {"ctx": ["unfold ReplaceTermsTerm, isPR."], "tactic": "split.", "exn": "Unable to find an instance for the variable x.", "type": "no_instance_var", "handled": true}, {"ctx": ["unfold ReplaceTermsTerm, isPR."], "tactic": "intros n.", "exn": "No product even after head-reduction.", "type": "no_product", "handled": true}]}, "chat": [], "original": "unfold ReplaceTermsTerm, isPR. intros L codeF codeR var apply codeTerm H. split. - intros n. induction n; intros; destruct a as [f ts]. + simpl. apply H. + simpl. destruct ts as [t ts']. rewrite (Term_Terms_rec L _ (fun _ => nat) (fun _ _ => nat) codeTerm). rewrite (Terms_Term_rec_full L _ (fun _ => nat) (fun _ _ => nat)). rewrite (Terms_Term_rec_full L _ (fun _ => nat) (fun _ _ => nat)). rewrite (Term_Terms_rec L _ (fun _ => nat) (fun _ _ => nat) codeTerm). auto. - intros n ts. induction ts; simpl. + apply H. + rewrite (Term_Terms_rec L _ (fun _ => nat) (fun _ _ => nat) codeTerm). rewrite (Terms_Term_rec_full L _ (fun _ => nat) (fun _ _ => nat)). rewrite (Terms_Term_rec_full L _ (fun _ => nat) (fun _ _ => nat)). rewrite (Term_Terms_rec L _ (fun _ => nat) (fun _ _ => nat) codeTerm). auto.", "succ": false}]