[{"history": {"proof": "intros a b. induction a as [|n a' IHa]. - simpl. apply le_0_n. - simpl. apply Nat.max_lub. + apply Nat.le_max_l. + qsimpl.", "repairs": ["", "", "", "", "", "", "", "", "", "", "", "cannot_unify"], "exceptions": [{"ctx": ["intros a b.", "induction a as [|n a' IHa].", "-", "simpl.", "apply le_0_n.", "-", "simpl.", "apply Nat.max_lub.", "+", "apply Nat.le_max_l.", "+"], "tactic": "apply IHa.", "exn": "In environment L : Language codeF : Functions L -> nat codeR : Relations L -> nat var := fol.var L : nat -> fol.Term L apply := fol.apply L : forall f : Functions L, fol.Terms L (arity L (inr f)) -> fol.Term L codeFormula := code.codeFormula L codeF codeR : fol.Formula L -> nat codeTerm := code.codeTerm L codeF : fol.Term L -> nat n : nat a', b : list nat IHa : fold_right Nat.max 0 a' <= fold_right Nat.max 0 (a' ++ b) Unable to unify \"fold_right Nat.max 0 a' <= fold_right Nat.max 0 (a' ++ b)\" with \"fold_right Nat.max 0 a' <= Nat.max n (fold_right Nat.max 0 (a' ++ b))\".", "type": "cannot_unify", "handled": true}]}, "chat": [], "original": "intros a b. induction a as [|n a' IHa]. - simpl. apply le_0_n. - simpl. apply Nat.max_lub. + apply Nat.le_max_l. + apply IHa.", "succ": true}]