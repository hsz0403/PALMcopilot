[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": ["intros t v s.", "unfold codeSubTerm, codeTerm, substituteTerm."], "tactic": "rewrite <- subTermFunction.", "exn": "Found no subterm matching \"fol.apply ?M1475 ?M1476 (substituteTerms ?M1475 (arity ?M1475 (inr ?M1476)) ?M1477 ?M1478 ?M1479)\" in the current goal.", "type": "no_subterm", "handled": true}, {"ctx": ["intros t v s.", "unfold codeSubTerm, codeTerm, substituteTerm."], "tactic": "reflexivity.", "exn": "In environment L : Language codeF : Functions L -> nat Formula := fol.Formula L : Set Formulas := fol.Formulas L : Set System := fol.System L : Type Term := fol.Term L : Set Terms := fol.Terms L : nat -> Set var := fol.var L : nat -> fol.Term L apply := fol.apply L : forall f : Functions L, fol.Terms L (arity L (inr f)) -> fol.Term L t : Term v : nat s : Term Unable to unify \"(fix codeTerm (t : fol.Term L) : nat := match t with | @fol.var _ n => cPair 0 n | @fol.apply _ f ts => cPair (S (codeF f)) (codeTerms (arity L (inr f)) ts) end with codeTerms (n : nat) (ts : fol.Terms L n) {struct ts} : nat := match ts with | @Tnil _ => 0 | @Tcons _ n0 t ss => S (cPair (codeTerm t) (codeTerms n0 ss)) end for codeTerm) ((fix substituteTerm (s : fol.Term L) (x : nat) (t : fol.Term L) {struct s} : fol.Term L := match s with | @fol.var _ v => if Nat.eq_dec x v then t else fol.var L v | @fol.apply _ f ts => fol.apply L f (substituteTerms (arity L (inr f)) ts x t) end with substituteTerms (n : nat) (ss : fol.Terms L n) (x : nat) (t : fol.Term L) {struct ss} : fol.Terms L n := match ss in (fol.Terms _ n0) return (fol.Terms L n0) with | @Tnil _ => Tnil L | @Tcons _ m s ts => Tcons L m (substituteTerm s x t) (substituteTerms m ts x t) end for substituteTerm) t v s)\" with \"cPairPi1 (codeSubTermTerms ((fix codeTerm (t : fol.Term L) : nat := match t with | @fol.var _ n => cPair 0 n | @fol.apply _ f ts => cPair (S (codeF f)) (codeTerms (arity L (inr f)) ts) end with codeTerms (n : nat) (ts : fol.Terms L n) {struct ts} : nat := match ts with | @Tnil _ => 0 | @Tcons _ n0 t ss => S (cPair (codeTerm t) (codeTerms n0 ss)) end for codeTerm) t) v ((fix codeTerm (t : fol.Term L) : nat := match t with | @fol.var _ n => cPair 0 n | @fol.apply _ f ts => cPair (S (codeF f)) (codeTerms (arity L (inr f)) ts) end with codeTerms (n : nat) (ts : fol.Terms L n) {struct ts} : nat := match ts with | @Tnil _ => 0 | @Tcons _ n0 t ss => S (cPair (codeTerm t) (codeTerms n0 ss)) end for codeTerm) s))\".", "type": "cannot_unify", "handled": true}]}, "chat": [], "original": "intros t v s. unfold codeSubTerm, codeTerm, substituteTerm. rewrite <- subTermFunction. reflexivity.", "succ": false}]