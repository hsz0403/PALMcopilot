[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": ["intros t v1 v2 s1 s2 Hv Hn.", "unfold substituteTerm."], "tactic": "rewrite subTermTrans.", "exn": "Found no subterm matching \"substituteTerm ?M1420 (substituteTerm ?M1420 ?M1421 ?M1422 (fol.var ?M1420 ?M1423)) ?M1423 ?M1424\" in the current goal.", "type": "no_subterm", "handled": true}, {"ctx": ["intros t v1 v2 s1 s2 Hv Hn.", "unfold substituteTerm."], "tactic": "rewrite subTermTrans.", "exn": "Found no subterm matching \"substituteTerm ?M1420 (substituteTerm ?M1420 ?M1421 ?M1422 (fol.var ?M1420 ?M1423)) ?M1423 ?M1424\" in the current goal.", "type": "no_subterm", "handled": true}, {"ctx": ["intros t v1 v2 s1 s2 Hv Hn.", "unfold substituteTerm."], "tactic": "apply subTermExch; auto.", "exn": "In environment L : Language Formula := fol.Formula L : Set Formulas := fol.Formulas L : Set System := fol.System L : Type Term := fol.Term L : Set Terms := fol.Terms L : nat -> Set var := fol.var L : nat -> fol.Term L apply := fol.apply L : forall f : Functions L, fol.Terms L (arity L (inr f)) -> fol.Term L equal := fol.equal L : fol.Term L -> fol.Term L -> fol.Formula L atomic := fol.atomic L : forall r : Relations L, fol.Terms L (arity L (inl r)) -> fol.Formula L impH := fol.impH L : fol.Formula L -> fol.Formula L -> fol.Formula L notH := fol.notH L : fol.Formula L -> fol.Formula L forallH := fol.forallH L : nat -> fol.Formula L -> fol.Formula L orH := fol.orH L : fol.Formula L -> fol.Formula L -> fol.Formula L andH := fol.andH L : fol.Formula L -> fol.Formula L -> fol.Formula L existH := fol.existH L : nat -> fol.Formula L -> fol.Formula L iffH := fol.iffH L : fol.Formula L -> fol.Formula L -> fol.Formula L ifThenElseH := fol.ifThenElseH L : fol.Formula L -> fol.Formula L -> fol.Formula L -> fol.Formula L Prf := folProof.Prf L : fol.Formulas L -> fol.Formula L -> Set SysPrf := folProof.SysPrf L : fol.System L -> fol.Formula L -> Prop t : Term v1, v2 : nat s1, s2 : Term Hv : v1 <> v2 Hn : ~ In v1 (freeVarTerm L s2) Unable to unify \"(fix substituteTerm (s : fol.Term L) (x : nat) (t : fol.Term L) {struct s} : fol.Term L := match s with | @fol.var _ v => if Nat.eq_dec x v then t else fol.var L v | @fol.apply _ f ts => fol.apply L f (substituteTerms (arity L (inr f)) ts x t) end with substituteTerms (n : nat) (ss : fol.Terms L n) (x : nat) (t : fol.Term L) {struct ss} : fol.Terms L n := match ss in (fol.Terms _ n0) return (fol.Terms L n0) with | @Tnil _ => Tnil L | @Tcons _ m s ts => Tcons L m (substituteTerm s x t) (substituteTerms m ts x t) end for substituteTerm) s1 v2 s2\" with \"s1\".", "type": "cannot_unify", "handled": true}]}, "chat": [], "original": "intros t v1 v2 s1 s2 Hv Hn. unfold substituteTerm. rewrite subTermTrans. rewrite subTermTrans. apply subTermExch; auto.", "succ": false}]