[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": ["unfold isPR.", "unfold checkPrfMP."], "tactic": "apply compose2_1IsPR; auto.", "exn": "In environment L : Language codeF : Functions L -> nat codeR : Relations L -> nat codeArityF, codeArityR : nat -> nat codeArityFIsPR : isPR 1 codeArityF codeArityFIsCorrect1 : forall f : Functions L, codeArityF (codeF f) = S (arity L (inr f)) codeArityFIsCorrect2 : forall n : nat, codeArityF n <> 0 -> exists f : Functions L, codeF f = n codeArityRIsPR : isPR 1 codeArityR codeArityRIsCorrect1 : forall r : Relations L, codeArityR (codeR r) = S (arity L (inl r)) codeArityRIsCorrect2 : forall n : nat, codeArityR n <> 0 -> exists r : Relations L, codeR r = n codeFInj : forall f g : Functions L, codeF f = codeF g -> f = g codeRInj : forall R S : Relations L, codeR R = codeR S -> R = S Term := fol.Term L : Set Terms := fol.Terms L : nat -> Set var := fol.var L : nat -> fol.Term L apply := fol.apply L : forall f : Functions L, fol.Terms L (arity L (inr f)) -> fol.Term L Formula := fol.Formula L : Set equal := fol.equal L : fol.Term L -> fol.Term L -> fol.Formula L atomic := fol.atomic L : forall r : Relations L, fol.Terms L (arity L (inl r)) -> fol.Formula L impH := fol.impH L : fol.Formula L -> fol.Formula L -> fol.Formula L notH := fol.notH L : fol.Formula L -> fol.Formula L forallH := fol.forallH L : nat -> fol.Formula L -> fol.Formula L wellFormedTerm := wellFormed.wellFormedTerm codeArityF : nat -> nat wellFormedFormula := wellFormed.wellFormedFormula codeArityF codeArityR : nat -> nat Prf := folProof.Prf L : Formulas L -> fol.Formula L -> Set Unable to unify \"{p : PrimRec 2 | extEqual 2 (evalPrimRec 2 p) (fun x y : nat => ?M1477 (?M1475 x y))}\" with \"{p : PrimRec 2 | extEqual 2 (evalPrimRec 2 p) (fun p0 recs : nat => switchPR (wellFormedFormula (cPairPi1 (cPairPi2 (cPairPi2 (cPairPi2 p0)))) * (charFunction 2 Nat.eqb (cPairPi1 (cPairPi1 (cPairPi2 (cPairPi2 p0)))) (codeImp (cPairPi1 (cPairPi2 (cPairPi2 (cPairPi2 p0)))) (cPairPi1 p0)) * (codeNth (p0 - S (cPairPi1 (cPairPi2 (cPairPi2 p0)))) recs * codeNth (p0 - S (cPairPi2 (cPairPi2 (cPairPi2 p0)))) recs))) (S (codeApp (Init.Nat.pred (codeNth (p0 - S (cPairPi1 (cPairPi2 (cPairPi2 p0)))) recs)) (Init.Nat.pred (codeNth (p0 - S (cPairPi2 (cPairPi2 (cPairPi2 p0)))) recs)))) 0)}\".", "type": "cannot_unify", "handled": true}]}, "chat": [], "original": "unfold isPR. intros. unfold checkPrfMP. apply compose2_1IsPR; auto.", "succ": false}]