[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": ["intros n m l1 l2 c H.", "unfold evalOneParamList.", "unfold extEqualVector in H.", "unfold extEqualVector."], "tactic": "intros i.", "exn": "No product even after head-reduction.", "type": "no_product", "handled": true}, {"ctx": ["intros n m l1 l2 c H.", "unfold evalOneParamList.", "unfold extEqualVector in H.", "unfold extEqualVector."], "tactic": "apply H.", "exn": "In environment n, m : nat l1, l2 : Vector.t (naryFunc (S n)) m c : nat H : Vector.rect2 (fun (n0 : nat) (_ _ : Vector.t (naryFunc (S n)) n0) => Prop) True (fun (n0 : nat) (_ _ : Vector.t (naryFunc (S n)) n0) (X : Prop) (a b : naryFunc (S n)) => extEqual (S n) a b /\\\\ X) l1 l2 Unable to unify \"Vector.rect2 (fun (n0 : nat) (_ _ : Vector.t (naryFunc (S n)) n0) => Prop) True (fun (n0 : nat) (_ _ : Vector.t (naryFunc (S n)) n0) (X : Prop) (a b : naryFunc (S n)) => extEqual (S n) a b /\\\\ X) l1 l2\" with \"Vector.rect2 (fun (n0 : nat) (_ _ : Vector.t (naryFunc n) n0) => Prop) True (fun (n0 : nat) (_ _ : Vector.t (naryFunc n) n0) (X : Prop) (a b : naryFunc n) => extEqual n a b /\\\\ X) ((fix evalOneParamList (n m a : nat) (l : Vector.t (naryFunc (S n)) m) {struct l} : Vector.t (naryFunc n) m := match l in (Vector.t _ m0) return (Vector.t (naryFunc n) m0) with | @Vector.nil _ => Vector.nil (naryFunc n) | @Vector.cons _ f m' l' => Vector.cons ((fix naryFunc (n0 : nat) : Set := match n0 with | 0 => nat | S n1 => nat -> naryFunc n1 end) n) (f a) m' (evalOneParamList n m' a l') end) n m c l1) ((fix evalOneParamList (n m a : nat) (l : Vector.t (naryFunc (S n)) m) {struct l} : Vector.t (naryFunc n) m := match l in (Vector.t _ m0) return (Vector.t (naryFunc n) m0) with | @Vector.nil _ => Vector.nil (naryFunc n) | @Vector.cons _ f m' l' => Vector.cons ((fix naryFunc (n0 : nat) : Set := match n0 with | 0 => nat | S n1 => nat -> naryFunc n1 end) n) (f a) m' (evalOneParamList n m' a l') end) n m c l2)\".", "type": "cannot_unify", "handled": true}]}, "chat": [], "original": "intros n m l1 l2 c H. unfold evalOneParamList. unfold extEqualVector in H. unfold extEqualVector. intros i. unfold evalPrimRecs. apply H.", "succ": false}]