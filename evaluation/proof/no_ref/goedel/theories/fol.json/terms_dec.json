[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": ["intros n x y."], "tactic": "pose proof (consTerms n x) as [p Hp].", "exn": "In environment L : Language language_dec : language_decideable nilTermsHelp := fun (n : nat) (H : n = 0) => nat_rec (fun n0 : nat => n0 = 0 -> Terms n0) (fun _ : 0 = 0 => Tnil) (fun (n0 : nat) (_ : n0 = 0 -> Terms n0) (H0 : S n0 = 0) => let H1 : False := eq_ind (S n0) (fun e : nat => match e with | 0 => False | S _ => True end) I 0 H0 in False_rec (Terms (S n0)) H1) n H : forall n : nat, n = 0 -> Terms n consTermsHelp := fun (n : nat) (H : Terms n) => match n with | 0 => forall p : 0 = n, {_ : unit | eq_rec 0 (fun z : nat => Terms z) Tnil n p = H} | S n0 => forall p : S n0 = n, {t : Term * Terms n0 | eq_rec (S n0) (fun z : nat => Terms z) (Tcons n0 (fst t) (snd t)) n p = H} end : forall n : nat, Terms n -> Set n : nat x, y : Terms n The term \"x\" has type \"Terms n\" while it is expected to have type \"Terms (S n)\".", "type": "wrong_type", "handled": true}, {"ctx": ["intros n x y."], "tactic": "pose proof (consTerms n y) as [q Hq].", "exn": "In environment L : Language language_dec : language_decideable nilTermsHelp := fun (n : nat) (H : n = 0) => nat_rec (fun n0 : nat => n0 = 0 -> Terms n0) (fun _ : 0 = 0 => Tnil) (fun (n0 : nat) (_ : n0 = 0 -> Terms n0) (H0 : S n0 = 0) => let H1 : False := eq_ind (S n0) (fun e : nat => match e with | 0 => False | S _ => True end) I 0 H0 in False_rec (Terms (S n0)) H1) n H : forall n : nat, n = 0 -> Terms n consTermsHelp := fun (n : nat) (H : Terms n) => match n with | 0 => forall p : 0 = n, {_ : unit | eq_rec 0 (fun z : nat => Terms z) Tnil n p = H} | S n0 => forall p : S n0 = n, {t : Term * Terms n0 | eq_rec (S n0) (fun z : nat => Terms z) (Tcons n0 (fst t) (snd t)) n p = H} end : forall n : nat, Terms n -> Set n : nat x, y : Terms n The term \"y\" has type \"Terms n\" while it is expected to have type \"Terms (S n)\".", "type": "wrong_type", "handled": true}]}, "chat": [], "original": "intros n x y. pose proof (consTerms n x) as [p Hp]. pose proof (consTerms n y) as [q Hq]. destruct (term_dec (fst p) (fst q)). - left. rewrite <- Hp, <- Hq. rewrite e. reflexivity. - right. intro Contra. apply n0. inversion Contra. reflexivity.", "succ": false}]