[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": ["intros l a H.", "induction l.", "-"], "tactic": "intros H0.", "exn": "No product even after head-reduction.", "type": "no_product", "handled": true}, {"ctx": ["intros l a H.", "induction l.", "-"], "tactic": "-", "exn": "Wrong bullet -: Current bullet - is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["intros l a H.", "induction l.", "-", "shelve.", "-"], "tactic": "intros H0.", "exn": "No product even after head-reduction.", "type": "no_product", "handled": true}, {"ctx": ["intros l a H.", "induction l.", "-", "shelve.", "-"], "tactic": "inversion H0; subst.", "exn": "No such hypothesis: H0", "type": "no_hypos", "handled": true}, {"ctx": ["intros l a H.", "induction l.", "-", "shelve.", "-"], "tactic": "apply olist_cons.", "exn": "In environment A : Set A0, A1 : A eqA : A -> A -> Prop plusA : A -> A -> A invA : A -> A minusA, multA : A -> A -> A divA : A -> forall b : A, ~ eqA b A0 -> A cs : CoefStructure A A0 A1 eqA plusA invA minusA multA divA eqA_dec : forall a b : A, {eqA a b} + {~ eqA a b} n : nat ltM : mon n -> mon n -> Prop ltM_dec : forall a b : mon n, {ltM a b} + {ltM b a} + {a = b} os : OrderStructure (mon n) (zero_mon n) ltM (mult_mon n) eqT_refl := Term.eqT_refl A n : reflexive (Term A n) (eqT (A:=A) (n:=n)) consA := cons : mon n -> list (mon n) -> list (mon n) nilA := nil : list (mon n) listA := list (mon n) : Set DescA := Desc (mon n) ltM : list (mon n) -> Prop a0 : Term A n l : list (Term A n) a : Term A n H : olist (pX a (a0 :: l)) IHl : olist (pX a l) -> olist l Unable to unify \"Desc (mon n) ltM (fP (pX ?M1554 (pX ?M1555 ?M1553)))\" with \"Desc (mon n) ltM (fP (a0 :: l))\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros l a H.", "induction l.", "-", "shelve.", "-"], "tactic": "apply IHl.", "exn": "In environment A : Set A0, A1 : A eqA : A -> A -> Prop plusA : A -> A -> A invA : A -> A minusA, multA : A -> A -> A divA : A -> forall b : A, ~ eqA b A0 -> A cs : CoefStructure A A0 A1 eqA plusA invA minusA multA divA eqA_dec : forall a b : A, {eqA a b} + {~ eqA a b} n : nat ltM : mon n -> mon n -> Prop ltM_dec : forall a b : mon n, {ltM a b} + {ltM b a} + {a = b} os : OrderStructure (mon n) (zero_mon n) ltM (mult_mon n) eqT_refl := Term.eqT_refl A n : reflexive (Term A n) (eqT (A:=A) (n:=n)) consA := cons : mon n -> list (mon n) -> list (mon n) nilA := nil : list (mon n) listA := list (mon n) : Set DescA := Desc (mon n) ltM : list (mon n) -> Prop a0 : Term A n l : list (Term A n) a : Term A n H : olist (pX a (a0 :: l)) IHl : olist (pX a l) -> olist l Unable to unify \"olist l\" with \"olist (a0 :: l)\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros l a H.", "induction l.", "-", "shelve.", "-"], "tactic": "apply olist_pX_order in H0.", "exn": "No such hypothesis: H0", "type": "no_hypos", "handled": true}, {"ctx": ["intros l a H.", "induction l.", "-", "shelve.", "-"], "tactic": "apply olist_ltT in H0.", "exn": "No such hypothesis: H0", "type": "no_hypos", "handled": true}]}, "chat": [], "original": "intros l a H. induction l. - intros H0. apply H0. - intros H0. inversion H0; subst. + apply olist_cons. auto. apply IHl. auto. + apply olist_pX_order in H0. apply olist_ltT in H0. apply H0.", "succ": false}]