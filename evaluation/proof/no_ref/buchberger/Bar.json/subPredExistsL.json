[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": ["intros A B P S f H l H0.", "pose proof H as H'."], "tactic": "apply ExistsL_rec with (l:=l) in H0.", "exn": "Unable to apply lemma of type \"forall (A : Set) (P : Pred A) (P0 : forall l : list A, ExistsL A P l -> Set), (forall (a : A) (l : list A) (p : P a), P0 (a :: l) (FoundE A P a l p)) -> (forall (a : A) (l : list A) (e : ExistsL A P l), P0 l e -> P0 (a :: l) (SearchE A P a l e)) -> forall (l : list A) (e : ExistsL A P l), P0 l e\" on hypothesis of type \"ExistsL A P l\".", "type": "cannot_apply_in", "handled": true}, {"ctx": ["intros A B P S f H l H0.", "pose proof H as H'.", "clear H0."], "tactic": "induction H'.", "exn": "Unable to find an instance for the variable a.", "type": "no_instance_var", "handled": true}, {"ctx": ["intros A B P S f H l H0.", "pose proof H as H'.", "clear H0."], "tactic": "apply FoundE.", "exn": "In environment A, B : Set P : Pred A S : Pred B f : A -> B H : forall a : A, P a -> S (f a) l : list A H' : forall a : A, P a -> S (f a) Unable to unify \"ExistsL ?M1460 ?M1461 (?M1462 :: ?M1463)\" with \"ExistsL B S (map f l)\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros A B P S f H l H0.", "pose proof H as H'.", "clear H0."], "tactic": "apply H.", "exn": "In environment A, B : Set P : Pred A S : Pred B f : A -> B H : forall a : A, P a -> S (f a) l : list A H' : forall a : A, P a -> S (f a) Unable to unify \"S (f ?M1460)\" with \"ExistsL B S (map f l)\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros A B P S f H l H0.", "pose proof H as H'.", "clear H0."], "tactic": "apply SearchE.", "exn": "In environment A, B : Set P : Pred A S : Pred B f : A -> B H : forall a : A, P a -> S (f a) l : list A H' : forall a : A, P a -> S (f a) Unable to unify \"ExistsL ?M1460 ?M1461 (?M1462 :: ?M1463)\" with \"ExistsL B S (map f l)\".", "type": "cannot_unify", "handled": true}]}, "chat": [], "original": "intros A B P S f H l H0. pose proof H as H'. apply ExistsL_rec with (l:=l) in H0. - clear H0. induction H'. + simpl. apply FoundE. apply H. + simpl. apply SearchE. apply IHE. * auto. * auto. - intros a l p. apply in_map with (f:=f) in p. apply H in p. auto.", "succ": false}]