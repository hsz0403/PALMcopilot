[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": ["intros xs ys k H1 H2."], "tactic": "apply (NoDup_remove_2 k).", "exn": "In environment K : Type K_eq_dec : forall x y : K, {x = y} + {x <> y} xs, ys : list op k : K H1 : NoDup (get_op_output_keys (xs ++ O k :: ys)) H2 : In (O k) (xs ++ ys) The term \"k\" has type \"K\" while it is expected to have type \"list ?A\".", "type": "wrong_type", "handled": true}]}, "chat": [], "original": "intros xs ys k H1 H2. apply (NoDup_remove_2 k). apply (NoDup_app_3_not_in_2 _ _ [] ys k) in H1. simpl in H1. auto. apply In_split in H2. destruct H2 as [xs' [ys' H2']]. rewrite H2'. apply in_app_iff in H1. destruct H1. - apply (dedup_partition K K_eq_dec _ _ _ _) in H; rewrite H. destruct (K_eq_dec k k) as [e|n]; [contradiction|]. apply (get_op_output_keys_complete _ _ k) in H. apply (get_op_output_keys_sound k (k :: _)) in H. simpl in H. contradiction. - apply (dedup_partition K K_eq_dec _ _ _ _) in H; rewrite H. destruct (K_eq_dec k k) as [e|n]; [contradiction|]. apply (get_op_output_keys_complete _ _ k) in H. apply (get_op_output_keys_sound _ _ _) in H. simpl in H. contradiction.", "succ": false}]