[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": ["intros e es st l st' o Hcache Hin HlastId HstateMachine HidValid HidCorrect.", "apply applyEntry_output_correct with (st:=st) (l:=l) (st':=st') (o:=o) (es:=es)."], "tactic": "apply Hcache.", "exn": "In environment orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params aemi : applied_entries_monotonic_interface smci : state_machine_correct_interface si : sorted_interface lacimi : lastApplied_commitIndex_match_interface lmi : log_matching_interface client : clientId id : nat out : output e : entry es : list entry st : RaftState.raft_data term name entry logIndex serverType data clientId output l : list output st' : RaftState.raft_data term name entry logIndex serverType data clientId output o : output Hcache : cacheApplyEntry st e = (l, st') Hin : In o l HlastId : forall (c : clientId) (i : nat) (o : output), getLastId st c = Some (i, o) -> output_correct c i o es HstateMachine : stateMachine st = snd (execute_log (deduplicate_log es)) HidValid : forall (c : clientId) (i : nat) (o : output) (e' : entry), getLastId st c = Some (i, o) -> In e' es -> eClient e' = c -> eId e' <= i HidCorrect : forall e' : entry, In e' es -> exists (i : nat) (o : output), getLastId st (eClient e') = Some (i, o) /\\\\ eId e' <= i Unable to unify \"cacheApplyEntry st e = (l, st')\" with \"applyEntry st e = (l, st')\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros e es st l st' o Hcache Hin HlastId HstateMachine HidValid HidCorrect.", "apply applyEntry_output_correct with (st:=st) (l:=l) (st':=st') (o:=o) (es:=es)."], "tactic": "apply Hin.", "exn": "In environment orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params aemi : applied_entries_monotonic_interface smci : state_machine_correct_interface si : sorted_interface lacimi : lastApplied_commitIndex_match_interface lmi : log_matching_interface client : clientId id : nat out : output e : entry es : list entry st : RaftState.raft_data term name entry logIndex serverType data clientId output l : list output st' : RaftState.raft_data term name entry logIndex serverType data clientId output o : output Hcache : cacheApplyEntry st e = (l, st') Hin : In o l HlastId : forall (c : clientId) (i : nat) (o : output), getLastId st c = Some (i, o) -> output_correct c i o es HstateMachine : stateMachine st = snd (execute_log (deduplicate_log es)) HidValid : forall (c : clientId) (i : nat) (o : output) (e' : entry), getLastId st c = Some (i, o) -> In e' es -> eClient e' = c -> eId e' <= i HidCorrect : forall e' : entry, In e' es -> exists (i : nat) (o : output), getLastId st (eClient e') = Some (i, o) /\\\\ eId e' <= i Unable to unify \"In o l\" with \"applyEntry st e = (l, st')\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros e es st l st' o Hcache Hin HlastId HstateMachine HidValid HidCorrect.", "apply applyEntry_output_correct with (st:=st) (l:=l) (st':=st') (o:=o) (es:=es)."], "tactic": "apply HstateMachine.", "exn": "In environment orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params aemi : applied_entries_monotonic_interface smci : state_machine_correct_interface si : sorted_interface lacimi : lastApplied_commitIndex_match_interface lmi : log_matching_interface client : clientId id : nat out : output e : entry es : list entry st : RaftState.raft_data term name entry logIndex serverType data clientId output l : list output st' : RaftState.raft_data term name entry logIndex serverType data clientId output o : output Hcache : cacheApplyEntry st e = (l, st') Hin : In o l HlastId : forall (c : clientId) (i : nat) (o : output), getLastId st c = Some (i, o) -> output_correct c i o es HstateMachine : stateMachine st = snd (execute_log (deduplicate_log es)) HidValid : forall (c : clientId) (i : nat) (o : output) (e' : entry), getLastId st c = Some (i, o) -> In e' es -> eClient e' = c -> eId e' <= i HidCorrect : forall e' : entry, In e' es -> exists (i : nat) (o : output), getLastId st (eClient e') = Some (i, o) /\\\\ eId e' <= i Unable to unify \"stateMachine st = snd (execute_log (deduplicate_log es))\" with \"applyEntry st e = (l, st')\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros e es st l st' o Hcache Hin HlastId HstateMachine HidValid HidCorrect.", "apply applyEntry_output_correct with (st:=st) (l:=l) (st':=st') (o:=o) (es:=es)."], "tactic": "apply HidValid.", "exn": "In environment orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params aemi : applied_entries_monotonic_interface smci : state_machine_correct_interface si : sorted_interface lacimi : lastApplied_commitIndex_match_interface lmi : log_matching_interface client : clientId id : nat out : output e : entry es : list entry st : RaftState.raft_data term name entry logIndex serverType data clientId output l : list output st' : RaftState.raft_data term name entry logIndex serverType data clientId output o : output Hcache : cacheApplyEntry st e = (l, st') Hin : In o l HlastId : forall (c : clientId) (i : nat) (o : output), getLastId st c = Some (i, o) -> output_correct c i o es HstateMachine : stateMachine st = snd (execute_log (deduplicate_log es)) HidValid : forall (c : clientId) (i : nat) (o : output) (e' : entry), getLastId st c = Some (i, o) -> In e' es -> eClient e' = c -> eId e' <= i HidCorrect : forall e' : entry, In e' es -> exists (i : nat) (o : output), getLastId st (eClient e') = Some (i, o) /\\\\ eId e' <= i Unable to unify \"eId ?M1648 <= ?M1646\" with \"applyEntry st e = (l, st')\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros e es st l st' o Hcache Hin HlastId HstateMachine HidValid HidCorrect.", "apply applyEntry_output_correct with (st:=st) (l:=l) (st':=st') (o:=o) (es:=es)."], "tactic": "apply HidCorrect.", "exn": "In environment orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params aemi : applied_entries_monotonic_interface smci : state_machine_correct_interface si : sorted_interface lacimi : lastApplied_commitIndex_match_interface lmi : log_matching_interface client : clientId id : nat out : output e : entry es : list entry st : RaftState.raft_data term name entry logIndex serverType data clientId output l : list output st' : RaftState.raft_data term name entry logIndex serverType data clientId output o : output Hcache : cacheApplyEntry st e = (l, st') Hin : In o l HlastId : forall (c : clientId) (i : nat) (o : output), getLastId st c = Some (i, o) -> output_correct c i o es HstateMachine : stateMachine st = snd (execute_log (deduplicate_log es)) HidValid : forall (c : clientId) (i : nat) (o : output) (e' : entry), getLastId st c = Some (i, o) -> In e' es -> eClient e' = c -> eId e' <= i HidCorrect : forall e' : entry, In e' es -> exists (i : nat) (o : output), getLastId st (eClient e') = Some (i, o) /\\\\ eId e' <= i Unable to unify \"exists (i : nat) (o : output), getLastId st (eClient ?M1645) = Some (i, o) /\\\\ eId ?M1645 <= i\" with \"applyEntry st e = (l, st')\".", "type": "cannot_unify", "handled": true}]}, "chat": [], "original": "intros e es st l st' o Hcache Hin HlastId HstateMachine HidValid HidCorrect. apply applyEntry_output_correct with (st:=st) (l:=l) (st':=st') (o:=o) (es:=es). apply Hcache. apply Hin. apply HstateMachine. apply HidValid. apply HidCorrect.", "succ": false}]