[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": ["unfold refined_raft_net_invariant_append_entries, requestVote_maxIndex_maxTerm."], "tactic": "intros orig_base_params one_node_params raft_params net t h p n mi mt H1 H2 H3 H4 H5 H6 H7 H8.", "exn": "orig_base_params is already used.", "type": "used_var", "handled": true}, {"ctx": ["unfold refined_raft_net_invariant_append_entries, requestVote_maxIndex_maxTerm."], "tactic": "intros orig_base_params' one_node_params raft_params net t h p n mi mt H1 H2 H3 H4 H5 H6 H7 H8.", "exn": "one_node_params is already used.", "type": "used_var", "handled": true}, {"ctx": ["unfold refined_raft_net_invariant_append_entries, requestVote_maxIndex_maxTerm."], "tactic": "intros orig_base_params' one_node_params' raft_params net t h p n mi mt H1 H2 H3 H4 H5 H6 H7 H8.", "exn": "raft_params is already used.", "type": "used_var", "handled": true}, {"ctx": ["unfold refined_raft_net_invariant_append_entries, requestVote_maxIndex_maxTerm.", "intros orig_base_params' one_node_params' raft_params' net t h p n mi mt H1 H2 H3 H4 H5 H6 H7 H8.", "split.", "-"], "tactic": "apply H4; auto.", "exn": "In environment orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params rri : raft_refinement_interface rvrtsi : requestVote_term_sanity_interface orig_base_params' : list packet one_node_params' : packet raft_params' : list packet net : network t : name -> data h : list packet p : electionsData n : raft_data mi : msg mt : term H1 : name H2 : logIndex H3 : term H4 : list entry H5 : logIndex H6 : handleAppendEntries (pDst one_node_params') (snd (nwState net (pDst one_node_params'))) mt H1 H2 H3 H4 H5 = (n, mi) H7 : p = update_elections_data_appendEntries (pDst one_node_params') (nwState net (pDst one_node_params')) mt H1 H2 H3 H4 H5 H8 : pBody one_node_params' = AppendEntries mt H1 H2 H3 H4 H5 H : forall (t : term) (h : Net.name) (p : packet) (n : name) (mi : logIndex) (mt : term), currentTerm (snd (nwState net h)) = t -> type (snd (nwState net h)) = Candidate -> In p (nwPackets net) -> pBody p = RequestVote t n mi mt -> pSrc p = h -> maxIndex (log (snd (nwState net h))) = mi /\\\\ maxTerm (log (snd (nwState net h))) = mt H0 : refined_raft_intermediate_reachable net H9 : nwPackets net = orig_base_params' ++ one_node_params' :: raft_params' H10 : forall h : name, t h = update name_eq_dec (nwState net) (pDst one_node_params') (p, n) h H11 : forall p' : packet, In p' h -> In p' (orig_base_params' ++ raft_params') \\\\/ p' = {| pSrc := pDst one_node_params'; pDst := pSrc one_node_params'; pBody := mi |} t0 : term h0 : Net.name p0 : packet n0 : name mi0 : logIndex mt0 : term H12 : currentTerm (snd (nwState {| nwPackets := h; nwState := t |} h0)) = t0 H13 : type (snd (nwState {| nwPackets := h; nwState := t |} h0)) = Candidate H14 : In p0 (nwPackets {| nwPackets := h; nwState := t |}) H15 : pBody p0 = RequestVote t0 n0 mi0 mt0 H16 : pSrc p0 = h0 Unable to unify \"list entry\" with \"maxIndex (log (snd (nwState {| nwPackets := h; nwState := t |} h0))) = mi0\".", "type": "cannot_unify", "handled": true}, {"ctx": ["unfold refined_raft_net_invariant_append_entries, requestVote_maxIndex_maxTerm.", "intros orig_base_params' one_node_params' raft_params' net t h p n mi mt H1 H2 H3 H4 H5 H6 H7 H8.", "split.", "-"], "tactic": "-", "exn": "Wrong bullet -: Current bullet - is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["unfold refined_raft_net_invariant_append_entries, requestVote_maxIndex_maxTerm.", "intros orig_base_params' one_node_params' raft_params' net t h p n mi mt H1 H2 H3 H4 H5 H6 H7 H8.", "split.", "-", "shelve.", "-"], "tactic": "apply H7; auto.", "exn": "In environment orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params rri : raft_refinement_interface rvrtsi : requestVote_term_sanity_interface orig_base_params' : list packet one_node_params' : packet raft_params' : list packet net : network t : name -> data h : list packet p : electionsData n : raft_data mi : msg mt : term H1 : name H2 : logIndex H3 : term H4 : list entry H5 : logIndex H6 : handleAppendEntries (pDst one_node_params') (snd (nwState net (pDst one_node_params'))) mt H1 H2 H3 H4 H5 = (n, mi) H7 : p = update_elections_data_appendEntries (pDst one_node_params') (nwState net (pDst one_node_params')) mt H1 H2 H3 H4 H5 H8 : pBody one_node_params' = AppendEntries mt H1 H2 H3 H4 H5 H : forall (t : term) (h : Net.name) (p : packet) (n : name) (mi : logIndex) (mt : term), currentTerm (snd (nwState net h)) = t -> type (snd (nwState net h)) = Candidate -> In p (nwPackets net) -> pBody p = RequestVote t n mi mt -> pSrc p = h -> maxIndex (log (snd (nwState net h))) = mi /\\\\ maxTerm (log (snd (nwState net h))) = mt H0 : refined_raft_intermediate_reachable net H9 : nwPackets net = orig_base_params' ++ one_node_params' :: raft_params' H10 : forall h : name, t h = update name_eq_dec (nwState net) (pDst one_node_params') (p, n) h H11 : forall p' : packet, In p' h -> In p' (orig_base_params' ++ raft_params') \\\\/ p' = {| pSrc := pDst one_node_params'; pDst := pSrc one_node_params'; pBody := mi |} t0 : term h0 : Net.name p0 : packet n0 : name mi0 : logIndex mt0 : term H12 : currentTerm (snd (nwState {| nwPackets := h; nwState := t |} h0)) = t0 H13 : type (snd (nwState {| nwPackets := h; nwState := t |} h0)) = Candidate H14 : In p0 (nwPackets {| nwPackets := h; nwState := t |}) H15 : pBody p0 = RequestVote t0 n0 mi0 mt0 H16 : pSrc p0 = h0 Unable to unify \"p = update_elections_data_appendEntries (pDst one_node_params') (nwState net (pDst one_node_params')) mt H1 H2 H3 H4 H5\" with \"maxTerm (log (snd (nwState {| nwPackets := h; nwState := t |} h0))) = mt0\".", "type": "cannot_unify", "handled": true}]}, "chat": [], "original": "unfold refined_raft_net_invariant_append_entries, requestVote_maxIndex_maxTerm. intros orig_base_params one_node_params raft_params net t h p n mi mt H1 H2 H3 H4 H5 H6 H7 H8. split. - intros. apply H4; auto. - intros. apply H7; auto.", "succ": false}]