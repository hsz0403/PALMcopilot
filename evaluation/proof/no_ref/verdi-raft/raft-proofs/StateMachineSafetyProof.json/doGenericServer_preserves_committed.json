[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": ["intros net net' h out st' ms e t H1 H2 H3.", "unfold doGenericServer in H1."], "tactic": "destruct (applyEntries h (snd (nwState net h)) (rev (filter (fun x : entry => lastApplied (snd (nwState net h)) <? eIndex x && eIndex x <=? commitIndex (snd (nwState net h))) (findGtIndex (log (snd (nwState net h)) (lastApplied (snd (nwState net h)))))))) eqn:Heq.", "exn": "In environment orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params rri : raft_refinement_interface si : sorted_interface lmi : log_matching_interface smspi : state_machine_safety'interface rlmli : refined_log_matching_lemmas_interface pllsi : prevLog_leader_sublog_interface ctgt0 : current_term_gt_zero_interface lalcii : lastApplied_le_commitIndex_interface miaei : match_index_all_entries_interface lhlli : leaders_have_leaderLogs_interface lci : leader_completeness_interface lsi : leader_sublog_interface taifoli : terms_and_indices_from_one_log_interface glci : ghost_log_correct_interface lphogli : log_properties_hold_on_ghost_logs_interface glemi : ghost_log_entries_match_interface tci : transitive_commit_interface tsi : term_sanity_interface lhllsi : leaders_have_leaderLogs_strong_interface ollpti : one_leaderLog_per_term_interface rmri : raft_msg_refinement_interface net, net' : ghost_log_network h : name out : list raft_output st' : raft_data ms : list (name * msg) e : entry t : term H1 : (let (out, state) := applyEntries h (snd (nwState net h)) (rev (filter (fun x : entry => (lastApplied (snd (nwState net h)) <? eIndex x) && (eIndex x <=? commitIndex (snd (nwState net h)))) (findGtIndex (log (snd (nwState net h))) (lastApplied (snd (nwState net h)))))) in (out, RaftState.set_raft_data_lastApplied term name entry logIndex serverType data clientId output state (if lastApplied state <? commitIndex state then commitIndex state else lastApplied state), [])) = (out, st', ms) H2 : forall h' : Net.name, nwState net' h' = update name_eq_dec (nwState net) h (fst (nwState net h), st') h' H3 : lifted_committed net e t x : entry The term \"eIndex x\" has type \"logIndex\" while it is expected to have type \"bool\".", "type": "wrong_type", "handled": true}, {"ctx": ["intros net net' h out st' ms e t H1 H2 H3.", "unfold doGenericServer in H1.", "inversion H1; subst; clear H1."], "tactic": "intros h'.", "exn": "No product even after head-reduction.", "type": "no_product", "handled": true}]}, "chat": [], "original": "intros net net' h out st' ms e t H1 H2 H3. unfold doGenericServer in H1. destruct (applyEntries h (snd (nwState net h)) (rev (filter (fun x : entry => lastApplied (snd (nwState net h)) <? eIndex x && eIndex x <=? commitIndex (snd (nwState net h))) (findGtIndex (log (snd (nwState net h)) (lastApplied (snd (nwState net h)))))))) eqn:Heq. inversion H1; subst; clear H1. intros h'. specialize (H2 h'). rewrite H2. apply lifted_committed_log_allEntries_preserved. apply H3.", "succ": false}]