[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": ["unfold refined_raft_net_invariant_request_vote_reply, handleRequestVoteReply.", "intros."], "tactic": "apply H0.", "exn": "In environment orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params rri : raft_refinement_interface lsi : leader_sublog_interface lltsi : leaderLogs_term_sanity_interface eewci : every_entry_was_created_interface llcei : leaderLogs_candidate_entries_interface cci : cronies_correct_interface vci : votes_correct_interface xs : list packet p : packet ys : list packet net : network st' : name -> data ps' : list packet gd : electionsData d : raft_data t : nat v : bool H : (if currentTerm (snd (nwState net (pDst p))) <? t then RaftState.set_raft_data_type term name entry logIndex serverType data clientId output (advanceCurrentTerm (snd (nwState net (pDst p))) t) Follower else if t <? currentTerm (snd (nwState net (pDst p))) then snd (nwState net (pDst p)) else match type (snd (nwState net (pDst p))) with | Candidate => RaftState.set_raft_data_electoralVictories term name entry logIndex serverType data clientId output (RaftState.set_raft_data_nextIndex term name entry logIndex serverType data clientId output (RaftState.set_raft_data_matchIndex term name entry logIndex serverType data clientId output (RaftState.set_raft_data_type term name entry logIndex serverType data clientId output (RaftState.set_raft_data_votesReceived term name entry logIndex serverType data clientId output (snd (nwState net (pDst p))) ((if v then [pSrc p] else []) ++ votesReceived (snd (nwState net (pDst p))))) (if v && wonElection (dedup name_eq_dec (pSrc p :: votesReceived (snd (nwState net (pDst p))))) then Leader else type (snd (nwState net (pDst p))))) (assoc_set name_eq_dec [] (pDst p) (maxIndex (log (snd (nwState net (pDst p))))))) []) ((if v && wonElection (dedup name_eq_dec (pSrc p :: votesReceived (snd (nwState net (pDst p))))) then [(currentTerm (snd (nwState net (pDst p))), pSrc p :: votesReceived (snd (nwState net (pDst p))), log (snd (nwState net (pDst p))))] else []) ++ electoralVictories (snd (nwState net (pDst p)))) | _ => snd (nwState net (pDst p)) end) = d H0 : gd = update_elections_data_requestVoteReply (pDst p) (pSrc p) t v (nwState net (pDst p)) H1 : pBody p = RequestVoteReply t v H2 : leaderLogs_sublog net H3 : refined_raft_intermediate_reachable net H4 : nwPackets net = xs ++ p :: ys H5 : forall h : name, st' h = update name_eq_dec (nwState net) (pDst p) (gd, d) h H6 : forall p' : packet, In p' ps' -> In p' (xs ++ ys) Unable to unify \"gd = update_elections_data_requestVoteReply (pDst p) (pSrc p) t v (nwState net (pDst p))\" with \"leaderLogs_sublog {| nwPackets := ps'; nwState := st' |}\".", "type": "cannot_unify", "handled": true}]}, "chat": [], "original": "unfold refined_raft_net_invariant_request_vote_reply, handleRequestVoteReply. intros. apply H0.", "succ": false}]