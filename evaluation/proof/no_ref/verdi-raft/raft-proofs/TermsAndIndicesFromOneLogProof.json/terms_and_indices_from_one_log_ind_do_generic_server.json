[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": ["unfold raft_net_invariant_do_generic_server.", "intros.", "unfold doGenericServer in H."], "tactic": "find_apply_lem_hyp applyEntries_spec_ind.", "exn": "Cannot infer the implicit parameter es of applyEntries_spec_ind whose type is \"list entry\" in environment: orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params ctgzi : current_term_gt_zero_interface net : network st' : name -> data ps' : list packet d : raft_data os : list raft_output d' : raft_data ms : list (name * msg) h : name H : (let (out, state) := applyEntries h d (rev (filter (fun x : entry => (lastApplied d <? eIndex x) && (eIndex x <=? commitIndex d)) (findGtIndex (log d) (lastApplied d)))) in (out, RaftState.set_raft_data_lastApplied term name entry logIndex serverType data clientId output state (if lastApplied state <? commitIndex state then commitIndex state else lastApplied state), [])) = (os, d', ms) H0 : terms_and_indices_from_one_log_ind net H1 : raft_intermediate_reachable net H2 : nwState net h = d H3 : forall h' : name, st' h' = update name_eq_dec (nwState net) h d' h' H4 : forall p : packet, In p ps' -> In p (nwPackets net) \\\\/ In p (send_packets h ms)", "type": "cannot_infer_para", "handled": true}]}, "chat": [], "original": "intros. unfold raft_net_invariant_do_generic_server. intros. unfold doGenericServer in H. find_apply_lem_hyp applyEntries_spec_ind. break_exists. intuition. cut P {| nwPackets := ps'0; nwState := st'0 |}; auto. eapply H5; eauto. intros. find_apply_lem_hyp in_inv. repeat find_higher_order_rewrite. find_apply_lem_hyp update_fun_comm. rewrite update_nop_ext. auto.", "succ": false}]