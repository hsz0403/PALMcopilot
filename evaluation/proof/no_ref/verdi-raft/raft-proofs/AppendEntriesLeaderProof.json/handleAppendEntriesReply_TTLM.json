[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": ["intros h st h' t es r st' ms Hhandle.", "unfold type_term_log_monotonic.", "intros Htype.", "split;[|split].", "-"], "tactic": "-", "exn": "Wrong bullet -: Current bullet - is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["intros h st h' t es r st' ms Hhandle.", "unfold type_term_log_monotonic.", "intros Htype.", "split;[|split].", "-", "shelve.", "-", "apply handleAppendEntriesReply_type_term in Hhandle.", "destruct Hhandle as [Heq|Heq].", "+", "destruct Heq as [Heq' Heq'']."], "tactic": "+", "exn": "Wrong bullet +: Current bullet + is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["intros h st h' t es r st' ms Hhandle.", "unfold type_term_log_monotonic.", "intros Htype.", "split;[|split].", "-", "shelve.", "-", "apply handleAppendEntriesReply_type_term in Hhandle.", "destruct Hhandle as [Heq|Heq].", "+", "destruct Heq as [Heq' Heq''].", "shelve.", "+"], "tactic": ["destruct Heq as [Heq|Heq];[|inversion Heq].", ""], "exn": "Expects a disjunctive pattern with 1 branch or a conjunctive pattern made of 2 patterns.", "type": "num_branch_both", "handled": false}, {"ctx": ["intros h st h' t es r st' ms Hhandle.", "unfold type_term_log_monotonic.", "intros Htype.", "split;[|split].", "-", "shelve.", "-", "apply handleAppendEntriesReply_type_term in Hhandle.", "destruct Hhandle as [Heq|Heq].", "+", "destruct Heq as [Heq' Heq''].", "shelve.", "+"], "tactic": "-", "exn": "Wrong bullet -: Current bullet + is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["intros h st h' t es r st' ms Hhandle.", "unfold type_term_log_monotonic.", "intros Htype.", "split;[|split].", "-", "shelve.", "-", "apply handleAppendEntriesReply_type_term in Hhandle.", "destruct Hhandle as [Heq|Heq].", "+", "destruct Heq as [Heq' Heq''].", "shelve.", "+", "shelve.", "-", "intros e Hin."], "tactic": "rewrite Hhandle.", "exn": "Found no subterm matching \"handleAppendEntriesReply h st h' t es r\" in the current goal.", "type": "no_subterm", "handled": true}, {"ctx": ["intros h st h' t es r st' ms Hhandle.", "unfold type_term_log_monotonic.", "intros Htype.", "split;[|split].", "-", "shelve.", "-", "apply handleAppendEntriesReply_type_term in Hhandle.", "destruct Hhandle as [Heq|Heq].", "+", "destruct Heq as [Heq' Heq''].", "shelve.", "+", "shelve.", "-", "intros e Hin."], "tactic": "apply Hin.", "exn": "In environment orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params rri : raft_refinement_interface aecfli : append_entries_came_from_leaders_interface ollpti : one_leaderLog_per_term_interface lltsi : leaderLogs_term_sanity_interface olpti : one_leader_per_term_interface h : name st : RaftState.raft_data term name entry logIndex serverType data clientId output h' : name t : nat es : list entry r : bool st' : raft_data ms : list (name * msg) Hhandle : handleAppendEntriesReply h st h' t es r = (st', ms) Htype : type st' = Leader e : entry Hin : In e (log st) Unable to unify \"In e (log st)\" with \"In e (log st')\".", "type": "cannot_unify", "handled": true}]}, "chat": [], "original": "intros h st h' t es r st' ms Hhandle. unfold type_term_log_monotonic. intros Htype. split;[|split]. - unfold type_term_log_monotonic in Htype. destruct (type st');[|inversion Htype]. + destruct (type st);[|inversion Htype]. destruct Htype as [Htype' [Hterm Hin]]. rewrite Htype', Hterm. apply handleAppendEntriesReply_log in Hhandle. rewrite Hhandle. reflexivity. + destruct Htype as [Heq|Heq];[inversion Heq|]. apply handleAppendEntriesReply_type in Hhandle. destruct Hhandle as [Heq|Heq]. * rewrite Heq, Heq in Htype. destruct (type st);[inversion Heq|]. reflexivity. * destruct Heq as [Heq|Heq];[|inversion Heq]. inversion Heq. - apply handleAppendEntriesReply_type_term in Hhandle. destruct Hhandle as [Heq|Heq]. + destruct Heq as [Heq' Heq'']. destruct (type st);[inversion Heq'|]. rewrite Heq'. reflexivity. + destruct Heq as [Heq|Heq];[|inversion Heq]. destruct (type st);[discriminate|]. destruct (type st');[|inversion Heq]. destruct Heq as [_ Heq]. omega. - intros e Hin. rewrite Hhandle. apply Hin.", "succ": false}]