[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": [], "tactic": "intros orig_base_params one_node_params raft_params net net'.", "exn": "orig_base_params is already used.", "type": "used_var", "handled": true}, {"ctx": [], "tactic": "intros orig_base_params' one_node_params raft_params net net'.", "exn": "one_node_params is already used.", "type": "used_var", "handled": true}, {"ctx": [], "tactic": "intros orig_base_params' one_node_params' raft_params net net'.", "exn": "raft_params is already used.", "type": "used_var", "handled": true}, {"ctx": ["intros orig_base_params' one_node_params' raft_params' net net'.", "intros H_same_state H_packet_subset H_inv_reachable."], "tactic": "intros t h h' H_currentTerm H_type H_votedFor H_currentTerm'.", "exn": "No product even after head-reduction.", "type": "no_product", "handled": true}]}, "chat": [], "original": "intros orig_base_params one_node_params raft_params net net'. intros H_same_state H_packet_subset H_inv_reachable. unfold votedFor_moreUpToDate. intros t h h' H_currentTerm H_type H_votedFor H_currentTerm'. exists (maxTerm (log (snd (nwState net h))), maxIndex (log (snd (nwState net h)))). split. - apply moreUpToDate_true. + unfold maxTerm, maxIndex. reflexivity. + rewrite <- H_currentTerm. apply H_same_state. + apply H_votedFor. - apply H_votedFor.", "succ": false}]