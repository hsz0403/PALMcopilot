[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": [], "tactic": "intros orig_base_params one_node_params raft_params tsi net h st' ps' out d l H_timeout H_P H_reachable H_st' H_ps'.", "exn": "orig_base_params is already used.", "type": "used_var", "handled": true}, {"ctx": [], "tactic": "intros orig_base_params' one_node_params raft_params tsi net h st' ps' out d l H_timeout H_P H_reachable H_st' H_ps'.", "exn": "one_node_params is already used.", "type": "used_var", "handled": true}, {"ctx": [], "tactic": "intros orig_base_params' one_node_params' raft_params tsi net h st' ps' out d l H_timeout H_P H_reachable H_st' H_ps'.", "exn": "raft_params is already used.", "type": "used_var", "handled": true}, {"ctx": [], "tactic": "intros orig_base_params' one_node_params' raft_params' tsi net h st' ps' out d l H_timeout H_P H_reachable H_st' H_ps'.", "exn": "tsi is already used.", "type": "used_var", "handled": true}, {"ctx": ["intros orig_base_params' one_node_params' raft_params' tsi' net h st' ps' out d l H_timeout H_P H_reachable H_st' H_ps'."], "tactic": "intros H_handleTimeout.", "exn": "No product even after head-reduction.", "type": "no_product", "handled": true}, {"ctx": ["intros orig_base_params' one_node_params' raft_params' tsi' net h st' ps' out d l H_timeout H_P H_reachable H_st' H_ps'."], "tactic": "apply H_P.", "exn": "In environment orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params tsi : term_sanity_interface orig_base_params' : network one_node_params' : name raft_params' : name -> data tsi' : list packet net : list raft_output h : raft_data st' : list (name * msg) ps' : handleTimeout one_node_params' (nwState orig_base_params' one_node_params') = (net, h, st') out : candidate_term_gt_log orig_base_params' d : raft_intermediate_reachable orig_base_params' l : forall h' : name, raft_params' h' = update name_eq_dec (nwState orig_base_params') one_node_params' h h' H_timeout : forall p' : packet, In p' tsi' -> In p' (nwPackets orig_base_params') \\\\/ In p' (send_packets one_node_params' st') H_P : name H_reachable : type (nwState {| nwPackets := tsi'; nwState := raft_params' |} H_P) = Candidate H_st' : entry H_ps' : In H_st' (log (nwState {| nwPackets := tsi'; nwState := raft_params' |} H_P)) Unable to unify \"name\" with \"currentTerm (nwState {| nwPackets := tsi'; nwState := raft_params' |} H_P) > eTerm H_st'\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros orig_base_params' one_node_params' raft_params' tsi' net h st' ps' out d l H_timeout H_P H_reachable H_st' H_ps'."], "tactic": "apply H_timeout.", "exn": "In environment orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params tsi : term_sanity_interface orig_base_params' : network one_node_params' : name raft_params' : name -> data tsi' : list packet net : list raft_output h : raft_data st' : list (name * msg) ps' : handleTimeout one_node_params' (nwState orig_base_params' one_node_params') = (net, h, st') out : candidate_term_gt_log orig_base_params' d : raft_intermediate_reachable orig_base_params' l : forall h' : name, raft_params' h' = update name_eq_dec (nwState orig_base_params') one_node_params' h h' H_timeout : forall p' : packet, In p' tsi' -> In p' (nwPackets orig_base_params') \\\\/ In p' (send_packets one_node_params' st') H_P : name H_reachable : type (nwState {| nwPackets := tsi'; nwState := raft_params' |} H_P) = Candidate H_st' : entry H_ps' : In H_st' (log (nwState {| nwPackets := tsi'; nwState := raft_params' |} H_P)) Unable to unify \"In ?M1635 (nwPackets orig_base_params') \\\\/ In ?M1635 (send_packets one_node_params' st')\" with \"S (eTerm H_st') <= currentTerm (nwState {| nwPackets := tsi'; nwState := raft_params' |} H_P)\".", "type": "cannot_unify", "handled": true}]}, "chat": [], "original": "intros orig_base_params one_node_params raft_params tsi net h st' ps' out d l H_timeout H_P H_reachable H_st' H_ps'. unfold raft_net_invariant_timeout in *. intros H_handleTimeout. apply H_P. apply H_timeout. apply H_handleTimeout. apply H_P. apply H_reachable. intros h'. apply H_st'. apply H_st'. intros p' H_in. apply H_ps'. apply H_in.", "succ": false}]