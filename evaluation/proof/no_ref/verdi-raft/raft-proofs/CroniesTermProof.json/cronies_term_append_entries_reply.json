[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": [], "tactic": "intros orig_base_params one_node_params raft_params rri xs p ys net st' ps' gd d m t es res Hhandle Hgd Hp Hreachable Hpackets Hst'.", "exn": "orig_base_params is already used.", "type": "used_var", "handled": true}, {"ctx": [], "tactic": "intros orig_base_params' one_node_params raft_params rri xs p ys net st' ps' gd d m t es res Hhandle Hgd Hp Hreachable Hpackets Hst'.", "exn": "one_node_params is already used.", "type": "used_var", "handled": true}, {"ctx": [], "tactic": "intros orig_base_params' one_node_params' raft_params rri xs p ys net st' ps' gd d m t es res Hhandle Hgd Hp Hreachable Hpackets Hst'.", "exn": "raft_params is already used.", "type": "used_var", "handled": true}, {"ctx": [], "tactic": "intros orig_base_params' one_node_params' raft_params' rri xs p ys net st' ps' gd d m t es res Hhandle Hgd Hp Hreachable Hpackets Hst'.", "exn": "rri is already used.", "type": "used_var", "handled": true}, {"ctx": ["intros orig_base_params' one_node_params' raft_params' rri' xs p ys net st' ps' gd d m t es res Hhandle Hgd Hp Hreachable Hpackets Hst'."], "tactic": "apply (refined_raft_net_invariant_append_entries_reply orig_base_params one_node_params raft_params rri).", "exn": "In environment orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params rri : raft_refinement_interface orig_base_params' : list packet one_node_params' : packet raft_params' : list packet rri' : network xs : name -> data p : list packet ys : GhostSimulations.ghost_data net : raft_data st' : list (name * msg) ps' : nat gd : list entry d : bool m : handleAppendEntriesReply (pDst one_node_params') (snd (nwState rri' (pDst one_node_params'))) (pSrc one_node_params') ps' gd d = (net, st') t : ys = fst (nwState rri' (pDst one_node_params')) es : pBody one_node_params' = AppendEntriesReply ps' gd d res : cronies_term rri' Hhandle : refined_raft_intermediate_reachable rri' Hgd : nwPackets rri' = orig_base_params' ++ one_node_params' :: raft_params' Hp : forall h : name, xs h = update name_eq_dec (nwState rri') (pDst one_node_params') (ys, net) h Hreachable : forall p' : packet, In p' p -> In p' (orig_base_params' ++ raft_params') \\\\/ In p' (send_packets (pDst one_node_params') st') Hpackets : name Hst' : Net.name The term \"orig_base_params\" has type \"BaseParams\" while it is expected to have type \"network -> Prop\".", "type": "wrong_type", "handled": true}, {"ctx": ["intros orig_base_params' one_node_params' raft_params' rri' xs p ys net st' ps' gd d m t es res Hhandle Hgd Hp Hreachable Hpackets Hst'."], "tactic": ["apply Hhandle.", ""], "exn": "Applied theorem does not have enough premises.", "type": "no_enough_premises", "handled": false}]}, "chat": [], "original": "intros orig_base_params one_node_params raft_params rri xs p ys net st' ps' gd d m t es res Hhandle Hgd Hp Hreachable Hpackets Hst'. apply (refined_raft_net_invariant_append_entries_reply orig_base_params one_node_params raft_params rri). - apply Hhandle. - apply Hgd. - apply Hp. - apply Hreachable. - apply Hpackets. - intros h'. apply Hst'.", "succ": false}]