[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": [], "tactic": "intros orig_base_params one_node_params raft_params rmri nisi rlmli net net' gd d h d' Hreboot HP Href1 Href2 Hstate Hupdate Hpackets.", "exn": "orig_base_params is already used.", "type": "used_var", "handled": true}, {"ctx": [], "tactic": "intros orig_base_params' one_node_params raft_params rmri nisi rlmli net net' gd d h d' Hreboot HP Href1 Href2 Hstate Hupdate Hpackets.", "exn": "one_node_params is already used.", "type": "used_var", "handled": true}, {"ctx": [], "tactic": "intros orig_base_params' one_node_params' raft_params rmri nisi rlmli net net' gd d h d' Hreboot HP Href1 Href2 Hstate Hupdate Hpackets.", "exn": "raft_params is already used.", "type": "used_var", "handled": true}, {"ctx": [], "tactic": "intros orig_base_params' one_node_params' raft_params' rmri nisi rlmli net net' gd d h d' Hreboot HP Href1 Href2 Hstate Hupdate Hpackets.", "exn": "rmri is already used.", "type": "used_var", "handled": true}, {"ctx": [], "tactic": "intros orig_base_params' one_node_params' raft_params' rmri' nisi rlmli net net' gd d h d' Hreboot HP Href1 Href2 Hstate Hupdate Hpackets.", "exn": "nisi is already used.", "type": "used_var", "handled": true}, {"ctx": [], "tactic": "intros orig_base_params' one_node_params' raft_params' rmri' nisi' rlmli net net' gd d h d' Hreboot HP Href1 Href2 Hstate Hupdate Hpackets.", "exn": "rlmli is already used.", "type": "used_var", "handled": true}, {"ctx": ["intros orig_base_params' one_node_params' raft_params' rmri' nisi' rlmli' net net' gd d h d' Hreboot HP Href1 Href2 Hstate Hupdate Hpackets."], "tactic": "apply (RaftRefinementInterface.refined_raft_net_invariant_reboot orig_base_params one_node_params raft_params HP net net' gd d h d' Hreboot Href1 Href2 Hstate Hupdate eq_refl).", "exn": "In environment orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params rmri : raft_msg_refinement_interface nisi : nextIndex_safety_interface rlmli : refined_log_matching_lemmas_interface orig_base_params', one_node_params' : network raft_params' : ghost_data rmri' : RaftState.raft_data term name entry logIndex serverType data clientId output nisi' : Net.name rlmli' : raft_data net : reboot rmri' = rlmli' net' : ghost_log_correct orig_base_params' gd : msg_refined_raft_intermediate_reachable orig_base_params' d : nwState orig_base_params' nisi' = (raft_params', rmri') h : forall h' : Net.name, nwState one_node_params' h' = update name_eq_dec (nwState orig_base_params') nisi' (raft_params', rlmli') h' d' : nwPackets orig_base_params' = nwPackets one_node_params' Hreboot : packet HP : ghost_msg Href1 : term Href2 : name Hstate : logIndex Hupdate : term Hpackets : list entry The term \"orig_base_params\" has type \"BaseParams\" while it is expected to have type \"network -> Prop\".", "type": "wrong_type", "handled": true}]}, "chat": [], "original": "intros orig_base_params one_node_params raft_params rmri nisi rlmli net net' gd d h d' Hreboot HP Href1 Href2 Hstate Hupdate Hpackets. apply (RaftRefinementInterface.refined_raft_net_invariant_reboot orig_base_params one_node_params raft_params HP net net' gd d h d' Hreboot Href1 Href2 Hstate Hupdate eq_refl).", "succ": false}]