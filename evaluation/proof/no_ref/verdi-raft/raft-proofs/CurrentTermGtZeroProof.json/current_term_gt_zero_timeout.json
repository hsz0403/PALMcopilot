[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": [], "tactic": "intros orig_base_params one_node_params raft_params net h st' ps' out d l H_handleTimeout Hp H_reachable H_st_update H_packets.", "exn": "orig_base_params is already used.", "type": "used_var", "handled": true}, {"ctx": [], "tactic": "intros orig_base_params' one_node_params raft_params net h st' ps' out d l H_handleTimeout Hp H_reachable H_st_update H_packets.", "exn": "one_node_params is already used.", "type": "used_var", "handled": true}, {"ctx": [], "tactic": "intros orig_base_params' one_node_params' raft_params net h st' ps' out d l H_handleTimeout Hp H_reachable H_st_update H_packets.", "exn": "raft_params is already used.", "type": "used_var", "handled": true}, {"ctx": [], "tactic": "intros orig_base_params' one_node_params' raft_params' net h st' ps' out d l H_handleTimeout Hp H_reachable H_st_update H_packets.", "exn": "No product even after head-reduction.", "type": "no_product", "handled": true}]}, "chat": [], "original": "intros orig_base_params one_node_params raft_params net h st' ps' out d l H_handleTimeout Hp H_reachable H_st_update H_packets. unfold raft_net_invariant_timeout in *. intros H_timeout. pose proof (H_timeout net h) as H_timeout'. specialize (H_timeout' ltac:(auto)). apply (H_timeout' H_handleTimeout Hp H_reachable H_st_update H_packets).", "succ": false}]