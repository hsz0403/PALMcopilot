[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": [], "tactic": "intros orig_base_params one_node_params raft_params rri cci cti cei lltsi.", "exn": "orig_base_params is already used.", "type": "used_var", "handled": true}, {"ctx": [], "tactic": "intros orig_base_params' one_node_params raft_params rri cci cti cei lltsi.", "exn": "one_node_params is already used.", "type": "used_var", "handled": true}, {"ctx": [], "tactic": "intros orig_base_params' one_node_params' raft_params rri cci cti cei lltsi.", "exn": "raft_params is already used.", "type": "used_var", "handled": true}, {"ctx": [], "tactic": "intros orig_base_params' one_node_params' raft_params' rri cci cti cei lltsi.", "exn": "rri is already used.", "type": "used_var", "handled": true}, {"ctx": [], "tactic": "intros orig_base_params' one_node_params' raft_params' rri' cci cti cei lltsi.", "exn": "cci is already used.", "type": "used_var", "handled": true}, {"ctx": [], "tactic": "intros orig_base_params' one_node_params' raft_params' rri' cci' cti cei lltsi.", "exn": "cti is already used.", "type": "used_var", "handled": true}, {"ctx": [], "tactic": "intros orig_base_params' one_node_params' raft_params' rri' cci' cti' cei lltsi.", "exn": "cei is already used.", "type": "used_var", "handled": true}, {"ctx": [], "tactic": "intros orig_base_params' one_node_params' raft_params' rri' cci' cti' cei' lltsi.", "exn": "lltsi is already used.", "type": "used_var", "handled": true}, {"ctx": ["intros orig_base_params' one_node_params' raft_params' rri' cci' cti' cei' lltsi'.", "intros xs p ys net st' ps' gd d m t es res Hhandle Hgd Hbody HP."], "tactic": "apply (refined_raft_net_invariant_append_entries_reply' net); auto.", "exn": "In environment orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params rri : raft_refinement_interface cci : cronies_correct_interface cti : cronies_term_interface cei : candidate_entries_interface lltsi : allEntries_term_sanity_interface orig_base_params' : list packet one_node_params' : packet raft_params' : list packet rri' : network cci' : name -> data cti' : list packet cei' : GhostSimulations.ghost_data lltsi' : raft_data xs : list (name * msg) p : nat ys : list entry net : bool st' : handleAppendEntriesReply (pDst one_node_params') (snd (nwState rri' (pDst one_node_params'))) (pSrc one_node_params') p ys net = (lltsi', xs) ps' : cei' = fst (nwState rri' (pDst one_node_params')) gd : pBody one_node_params' = AppendEntriesReply p ys net d : allEntries_candidateEntries rri' m : refined_raft_intermediate_reachable rri' t : nwPackets rri' = orig_base_params' ++ one_node_params' :: raft_params' es : forall h : name, cci' h = update name_eq_dec (nwState rri') (pDst one_node_params') (cei', lltsi') h res : forall p' : packet, In p' cti' -> In p' (orig_base_params' ++ raft_params') \\\\/ In p' (send_packets (pDst one_node_params') xs) Hhandle : Net.name Hgd : term Hbody : entry HP : In (Hgd, Hbody) (allEntries (fst (nwState {| nwPackets := cti'; nwState := cci' |} Hhandle))) The term \"net\" has type \"bool\" while it is expected to have type \"network -> Prop\".", "type": "wrong_type", "handled": true}]}, "chat": [], "original": "intros orig_base_params one_node_params raft_params rri cci cti cei lltsi. unfold refined_raft_net_invariant_append_entries_reply. intros xs p ys net st' ps' gd d m t es res Hhandle Hgd Hbody HP. apply (refined_raft_net_invariant_append_entries_reply' net); auto.", "succ": false}]