[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": ["unfold raft_net_invariant_do_leader.", "unfold match_index_leader.", "intros."], "tactic": "apply H.", "exn": "In environment orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params naertsi : no_append_entries_replies_to_self_interface net : network st' : name -> data ps' : list packet d : raft_data h : name os : list raft_output d' : raft_data ms : list (name * msg) H : doLeader d h = (os, d', ms) H0 : forall leader : Net.name, type (nwState net leader) = Leader -> assoc_default name_eq_dec (matchIndex (nwState net leader)) leader 0 = maxIndex (log (nwState net leader)) H1 : raft_intermediate_reachable net H2 : nwState net h = d H3 : forall h' : name, st' h' = update name_eq_dec (nwState net) h d' h' H4 : forall p : packet, In p ps' -> In p (nwPackets net) \\\\/ In p (send_packets h ms) leader : Net.name H5 : type (nwState {| nwPackets := ps'; nwState := st' |} leader) = Leader Unable to unify \"doLeader d h = (os, d', ms)\" with \"assoc_default name_eq_dec (matchIndex (nwState {| nwPackets := ps'; nwState := st' |} leader)) leader 0 = maxIndex (log (nwState {| nwPackets := ps'; nwState := st' |} leader))\".", "type": "cannot_unify", "handled": true}]}, "chat": [], "original": "intros. unfold raft_net_invariant_do_leader. unfold match_index_leader. intros. apply H.", "succ": false}]