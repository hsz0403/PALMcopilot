[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": [], "tactic": "intros orig_base_params one_node_params raft_params rri net h t n Hin.", "exn": "orig_base_params is already used.", "type": "used_var", "handled": true}, {"ctx": [], "tactic": "intros orig_base_params' one_node_params raft_params rri net h t n Hin.", "exn": "one_node_params is already used.", "type": "used_var", "handled": true}, {"ctx": [], "tactic": "intros orig_base_params' one_node_params' raft_params rri net h t n Hin.", "exn": "raft_params is already used.", "type": "used_var", "handled": true}, {"ctx": [], "tactic": "intros orig_base_params' one_node_params' raft_params' rri net h t n Hin.", "exn": "rri is already used.", "type": "used_var", "handled": true}, {"ctx": ["intros orig_base_params' one_node_params' raft_params' rri' net h t n Hin."], "tactic": "apply (votes_le_current_term_invariant orig_base_params one_node_params raft_params net h t n).", "exn": "In environment orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params rri : raft_refinement_interface orig_base_params' : network one_node_params' : name -> data raft_params' : list packet rri' : GhostSimulations.ghost_data net : raft_data h : list raft_output t : raft_data n : list (name * msg) Hin : name The term \"orig_base_params\" has type \"BaseParams\" while it is expected to have type \"network\".", "type": "wrong_type", "handled": true}, {"ctx": ["intros orig_base_params' one_node_params' raft_params' rri' net h t n Hin."], "tactic": ["apply Hin.", ""], "exn": "Applied theorem does not have enough premises.", "type": "no_enough_premises", "handled": false}]}, "chat": [], "original": "intros orig_base_params one_node_params raft_params rri net h t n Hin. apply (votes_le_current_term_invariant orig_base_params one_node_params raft_params net h t n). apply Hin.", "succ": false}]