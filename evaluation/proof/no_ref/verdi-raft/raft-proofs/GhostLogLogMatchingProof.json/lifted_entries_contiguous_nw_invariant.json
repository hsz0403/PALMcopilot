[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": ["intros net Hreach.", "unfold lifted_entries_contiguous_nw.", "intros p t n pli plt es ci Hin Hp."], "tactic": "apply Hreach in Hin.", "exn": "Unable to apply lemma of type \"msg_refined_raft_intermediate_reachable net\" on hypothesis of type \"In p (nwPackets net)\".", "type": "cannot_apply_in", "handled": true}, {"ctx": ["intros net Hreach.", "unfold lifted_entries_contiguous_nw.", "intros p t n pli plt es ci Hin Hp."], "tactic": "unfold msg_refined_raft_intermediate_reachable in Hin.", "exn": "Cannot coerce msg_refined_raft_intermediate_reachable to an evaluable reference.", "type": "not_evaluable", "handled": true}, {"ctx": ["intros net Hreach.", "unfold lifted_entries_contiguous_nw.", "intros p t n pli plt es ci Hin Hp."], "tactic": "destruct Hin as [Hinit | Hfail | Hhandle].", "exn": "Not an inductive product.", "type": "not_inductive_product", "handled": true}]}, "chat": [], "original": "intros net Hreach. unfold lifted_entries_contiguous_nw. intros p t n pli plt es ci Hin Hp. apply Hreach in Hin. unfold msg_refined_raft_intermediate_reachable in Hin. destruct Hin as [Hinit | Hfail | Hhandle]. - destruct Hinit. discriminate. - destruct Hfail as [failed net' failed' out Hmrr Hsf]. intros Hcont. apply (Hcont p t n pli plt es ci). + auto. + apply Hsf. - destruct Hhandle as [net h inp gd out]. intros Hn NATO Hgd Hl. apply (Hl p t n pli plt es ci). + auto. + reflexivity.", "succ": false}]