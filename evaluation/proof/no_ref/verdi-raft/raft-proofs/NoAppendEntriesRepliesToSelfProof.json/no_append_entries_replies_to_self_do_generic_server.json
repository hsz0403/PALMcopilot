[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": ["unfold raft_net_invariant_do_generic_server."], "tactic": "intros orig_base_params one_node_params raft_params P net st' ps' d os d' ms h HdoGenericServer HP Hintermediate Hnet Hst' Hps'.", "exn": "orig_base_params is already used.", "type": "used_var", "handled": true}, {"ctx": ["unfold raft_net_invariant_do_generic_server."], "tactic": "intros orig_base_params' one_node_params raft_params P net st' ps' d os d' ms h HdoGenericServer HP Hintermediate Hnet Hst' Hps'.", "exn": "one_node_params is already used.", "type": "used_var", "handled": true}, {"ctx": ["unfold raft_net_invariant_do_generic_server."], "tactic": "intros orig_base_params' one_node_params' raft_params P net st' ps' d os d' ms h HdoGenericServer HP Hintermediate Hnet Hst' Hps'.", "exn": "raft_params is already used.", "type": "used_var", "handled": true}, {"ctx": ["unfold raft_net_invariant_do_generic_server.", "intros orig_base_params' one_node_params' raft_params' P net st' ps' d os d' ms h HdoGenericServer HP Hintermediate Hnet Hst' Hps'."], "tactic": "apply Hintermediate in Hnet.", "exn": "Unable to apply lemma of type \"packet\" on hypothesis of type \"term\".", "type": "cannot_apply_in", "handled": true}]}, "chat": [], "original": "unfold raft_net_invariant_do_generic_server. intros orig_base_params one_node_params raft_params P net st' ps' d os d' ms h HdoGenericServer HP Hintermediate Hnet Hst' Hps'. unfold no_append_entries_replies_to_self in Hintermediate. apply Hintermediate in Hnet. contradiction.", "succ": false}]