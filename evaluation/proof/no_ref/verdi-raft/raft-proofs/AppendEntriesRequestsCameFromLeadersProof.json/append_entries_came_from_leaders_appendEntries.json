[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": [], "tactic": "intros orig_base_params one_node_params raft_params net H1 H2 p t n pli plt es ci H3 H4.", "exn": "orig_base_params is already used.", "type": "used_var", "handled": true}, {"ctx": [], "tactic": "intros orig_base_params' one_node_params raft_params net H1 H2 p t n pli plt es ci H3 H4.", "exn": "one_node_params is already used.", "type": "used_var", "handled": true}, {"ctx": [], "tactic": "intros orig_base_params' one_node_params' raft_params net H1 H2 p t n pli plt es ci H3 H4.", "exn": "raft_params is already used.", "type": "used_var", "handled": true}, {"ctx": ["intros orig_base_params' one_node_params' raft_params' net H1 H2 p t n pli plt es ci H3 H4."], "tactic": "intros xs p' ys net' st' ps' gd d m t' n' pli' plt' es' ci' H5 H6 H7 H8 H9 H10.", "exn": "No product even after head-reduction.", "type": "no_product", "handled": true}]}, "chat": [], "original": "intros orig_base_params one_node_params raft_params net H1 H2 p t n pli plt es ci H3 H4. unfold refined_raft_net_invariant_append_entries in *. intros xs p' ys net' st' ps' gd d m t' n' pli' plt' es' ci' H5 H6 H7 H8 H9 H10. unfold append_entries_came_from_leaders in *. intros p'' t'' n'' pli'' plt'' es'' ci'' H11 H12. apply (H2 xs p' ys net' st' ps' gd d m t n pli plt es ci H3 H4 H5 H6 H7 H8 H9 H10). apply (H12 p'' t'' n'' pli'' plt'' es'' ci'' H11).", "succ": false}]