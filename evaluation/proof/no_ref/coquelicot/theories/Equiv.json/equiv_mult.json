[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": ["intros T F FF f1 f2 g1 g2 H1 H2.", "unfold is_equiv, is_domin in *.", "intros eps.", "specialize (H1 eps).", "specialize (H2 eps)."], "tactic": "intros x.", "exn": "No product even after head-reduction.", "type": "no_product", "handled": true}, {"ctx": ["intros T F FF f1 f2 g1 g2 H1 H2.", "unfold is_equiv, is_domin in *.", "intros eps.", "specialize (H1 eps).", "specialize (H2 eps).", "unfold mult, minus."], "tactic": "rewrite 2! Rmult_plus_distr_r.", "exn": "At iteration 1: The LHS of Rmult_plus_distr_r ((_ + _) * _) does not match any subterm of the goal", "type": "no_match_term", "handled": true}, {"ctx": ["intros T F FF f1 f2 g1 g2 H1 H2.", "unfold is_equiv, is_domin in *.", "intros eps.", "specialize (H1 eps).", "specialize (H2 eps).", "unfold mult, minus."], "tactic": "rewrite <- Rmult_minus_distr_l.", "exn": "Found no subterm matching \"?M2363 * ?M2364 - ?M2363 * ?M2365\" in the current goal.", "type": "no_subterm", "handled": true}, {"ctx": ["intros T F FF f1 f2 g1 g2 H1 H2.", "unfold is_equiv, is_domin in *.", "intros eps.", "specialize (H1 eps).", "specialize (H2 eps).", "unfold mult, minus."], "tactic": "rewrite Rabs_mult.", "exn": "The LHS of Rabs_mult (Rabs (_ * _)) does not match any subterm of the goal", "type": "no_match_term", "handled": true}, {"ctx": ["intros T F FF f1 f2 g1 g2 H1 H2.", "unfold is_equiv, is_domin in *.", "intros eps.", "specialize (H1 eps).", "specialize (H2 eps).", "unfold mult, minus."], "tactic": "rewrite Rabs_minus_sym.", "exn": "The LHS of Rabs_minus_sym (Rabs (_ - _)) does not match any subterm of the goal", "type": "no_match_term", "handled": true}]}, "chat": [], "original": "intros T F FF f1 f2 g1 g2 H1 H2. unfold is_equiv, is_domin in *. intros eps. specialize (H1 eps). specialize (H2 eps). intros x. unfold mult, minus. rewrite 2! Rmult_plus_distr_r. rewrite <- Rmult_minus_distr_l. rewrite Rabs_mult. rewrite Rabs_minus_sym. apply Rle_trans with (r2 := eps * (norm (f1 x) + norm (f2 x)) + norm (g1 x) * eps + norm (g2 x) * eps). - repeat apply Rplus_le_compat. + apply Rmult_le_compat_r. * apply Rabs_pos. * apply H1. + apply Rmult_le_compat_r. * apply Rabs_pos. * apply H2. + apply Rmult_le_compat_r. * apply Rabs_pos. * apply H1. + apply Rmult_le_compat_r. * apply Rabs_pos. * apply H2. - repeat rewrite Rmult_plus_distr_l. repeat rewrite Rmult_assoc. repeat apply Rplus_le_compat_r. repeat apply Rplus_le_compat_l. apply Rmult_le_compat_l. + apply Rplus_le_le_0_compat. * apply Rabs_pos. * apply Rabs_pos. + apply Rabs_triang.", "succ": false}]