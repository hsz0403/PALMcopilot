[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": ["intros.", "unfold CV_disk, PS_scal."], "tactic": "intros H.", "exn": "H is already used.", "type": "used_var", "handled": true}, {"ctx": ["intros.", "unfold CV_disk, PS_scal."], "tactic": "intros H'.", "exn": "No product even after head-reduction.", "type": "no_product", "handled": true}, {"ctx": ["intros.", "unfold CV_disk, PS_scal.", "apply CV_disk_correct in H."], "tactic": "apply ex_pseries_scal in H.", "exn": "Unable to find an instance for the variable c.", "type": "no_instance_var", "handled": true}, {"ctx": ["intros.", "unfold CV_disk, PS_scal.", "apply CV_disk_correct in H.", "destruct H."], "tactic": "destruct H.", "exn": "Unable to find an instance for the variable P.", "type": "no_instance_var", "handled": true}, {"ctx": ["intros.", "unfold CV_disk, PS_scal.", "apply CV_disk_correct in H.", "destruct H."], "tactic": "split.", "exn": "Unable to find an instance for the variable x.", "type": "no_instance_var", "handled": true}, {"ctx": ["intros.", "unfold CV_disk, PS_scal.", "apply CV_disk_correct in H.", "destruct H.", "exists x0."], "tactic": "apply Series_scal_l.", "exn": "In environment c : R a : nat -> R x : R x0 : R_NormedModule H : is_series (fun k : nat => scal (pow_n x k) (a k)) x0 Unable to unify \"Series (fun n : nat => ?M2375 * ?M2376 n) = ?M2375 * Series ?M2376\" with \"forall P : R_NormedModule -> Prop, locally x0 P -> filtermap (sum_n (fun n : nat => Rabs (scal c (a n) * x ^ n))) eventually P\".", "type": "cannot_unify", "handled": true}]}, "chat": [], "original": "intros. unfold CV_disk, PS_scal. intros H. apply CV_disk_correct in H. apply ex_pseries_scal in H. destruct H. unfold ex_pseries in *. destruct H. split. - exists x0. apply Series_scal_l. - intros eps Heps. specialize (H0 eps Heps). destruct H0 as [N HN]. exists N. intros n Hn. specialize (HN n Hn). rewrite PSeries_scal. unfold R_dist in *. rewrite Rminus_eq_0 in HN. rewrite Rabs_R0. rewrite Rabs_mult. rewrite Rabs_Rabsolu. apply Rmult_lt_compat_r with (r:=Rabs c) in HN. + rewrite Rmult_1_r in HN. apply HN. + apply Rabs_pos.", "succ": false}]