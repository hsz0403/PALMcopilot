[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": ["unfold Rbar_glb, Rbar_lub.", "destruct (Rbar_ex_glb E) as [glb glb_prop].", "destruct (Rbar_ex_lub E) as [lub lub_prop]."], "tactic": "rewrite (Rbar_opp_involutive (Rbar_lub E)).", "exn": "The LHS of (Rbar_opp_involutive (Rbar_lub E)) (Rbar_opp (Rbar_opp (Rbar_lub E))) does not match any subterm of the goal", "type": "no_match_term", "handled": true}, {"ctx": ["unfold Rbar_glb, Rbar_lub.", "destruct (Rbar_ex_glb E) as [glb glb_prop].", "destruct (Rbar_ex_lub E) as [lub lub_prop]."], "tactic": "apply (Rbar_lb_ub E lub).", "exn": "In environment E : Rbar -> Prop glb : Rbar glb_prop : Rbar_is_glb E glb lub : Rbar lub_prop : Rbar_is_lub E lub Unable to unify \"Rbar_is_lower_bound (fun x : Rbar => E (Rbar_opp x)) (Rbar_opp lub) <-> Rbar_is_upper_bound E lub\" with \"proj1_sig (Rbar_ex_glb (fun x : Rbar => E (Rbar_opp x))) = Rbar_opp (proj1_sig (exist (fun l : Rbar => Rbar_is_lub E l) lub lub_prop))\".", "type": "cannot_unify", "handled": true}]}, "chat": [], "original": "unfold Rbar_glb, Rbar_lub. destruct (Rbar_ex_glb E) as [glb glb_prop]. destruct (Rbar_ex_lub E) as [lub lub_prop]. rewrite (Rbar_opp_involutive (Rbar_lub E)). apply (Rbar_lb_ub E lub).", "succ": false}]