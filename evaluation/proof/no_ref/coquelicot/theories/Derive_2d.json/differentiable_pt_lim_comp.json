[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": ["intros f1 f2 f3 x y l1x l1y l2x l2y l3x l3y H1 H2 H3.", "unfold differentiable_pt_lim in *.", "intros eps.", "specialize (H1 eps).", "specialize (H2 eps).", "specialize (H3 eps).", "destruct H1 as [delta1 Hd1].", "destruct H2 as [delta2 Hd2].", "destruct H3 as [delta3 Hd3]."], "tactic": "exists (Rmin delta1 (Rmin delta2 delta3)).", "exn": "In environment f1, f2, f3 : R -> R -> R x, y, l1x, l1y, l2x, l2y, l3x, l3y : R eps, delta1 : posreal Hd1 : forall u v : R, Rabs (u - f2 x y) < delta1 -> Rabs (v - f3 x y) < delta1 -> Rabs (f1 u v - f1 (f2 x y) (f3 x y) - (l1x * (u - f2 x y) + l1y * (v - f3 x y))) <= eps * Rmax (Rabs (u - f2 x y)) (Rabs (v - f3 x y)) delta2 : posreal Hd2 : forall u v : R, Rabs (u - x) < delta2 -> Rabs (v - y) < delta2 -> Rabs (f2 u v - f2 x y - (l2x * (u - x) + l2y * (v - y))) <= eps * Rmax (Rabs (u - x)) (Rabs (v - y)) delta3 : posreal Hd3 : forall u v : R, Rabs (u - x) < delta3 -> Rabs (v - y) < delta3 -> Rabs (f3 u v - f3 x y - (l3x * (u - x) + l3y * (v - y))) <= eps * Rmax (Rabs (u - x)) (Rabs (v - y)) The term \"Rmin delta1 (Rmin delta2 delta3)\" has type \"R\" while it is expected to have type \"posreal\".", "type": "wrong_type", "handled": true}, {"ctx": ["intros f1 f2 f3 x y l1x l1y l2x l2y l3x l3y H1 H2 H3.", "unfold differentiable_pt_lim in *.", "intros eps.", "specialize (H1 eps).", "specialize (H2 eps).", "specialize (H3 eps).", "destruct H1 as [delta1 Hd1].", "destruct H2 as [delta2 Hd2].", "destruct H3 as [delta3 Hd3]."], "tactic": "intros u v H4 H5.", "exn": "No product even after head-reduction.", "type": "no_product", "handled": true}]}, "chat": [], "original": "intros f1 f2 f3 x y l1x l1y l2x l2y l3x l3y H1 H2 H3. unfold differentiable_pt_lim in *. intros eps. specialize (H1 eps). specialize (H2 eps). specialize (H3 eps). destruct H1 as [delta1 Hd1]. destruct H2 as [delta2 Hd2]. destruct H3 as [delta3 Hd3]. exists (Rmin delta1 (Rmin delta2 delta3)). intros u v H4 H5. assert (Hd1' : ball x (Rmin delta1 (Rmin delta2 delta3)) u) by (apply Rlt_trans with delta1; auto). assert (Hd2' : ball y (Rmin delta1 (Rmin delta2 delta3)) v) by (apply Rlt_trans with delta1; auto). specialize (Hd1 u v Hd1' H4 H5). specialize (Hd2 x y Hd2' H4 H5). apply locally_2d_impl with (fun u0 v0 => Rabs (f1 (f2 u0 v0) (f3 u0 v0) - f1 (f2 x y) (f3 x y) - (l1x * (f2 u0 v0 - f2 x y) + l1y * (f3 u0 v0 - f3 x y))) <= eps * Rmax (Rabs (f2 u0 v0 - f2 x y)) (Rabs (f3 u0 v0 - f3 x y))). apply locally_2d_impl with (fun u0 v0 => Rabs (f2 u0 v0 - f2 x y - l2x * (u0 - x) - l2y * (v0 - y)) <= eps * Rmax (Rabs (u0 - x)) (Rabs (v0 - y))). apply locally_2d_impl with (fun u0 v0 => Rabs (f3 u0 v0 - f3 x y - l3x * (u0 - x) - l3y * (v0 - y)) <= eps * Rmax (Rabs (u0 - x)) (Rabs (v0 - y))). + apply locally_2d_impl with (fun u0 v0 => Rabs (f1 (f2 u0 v0) (f3 u0 v0) - f1 (f2 x y) (f3 x y) - (l1x * (f2 u0 v0 - f2 x y) + l1y * (f3 u0 v0 - f3 x y))) <= eps * Rmax (Rabs (f2 u0 v0 - f2 x y)) (Rabs (f3 u0 v0 - f3 x y))). apply locally_2d_forall. intros a b. apply ClassicalFacts.f1. apply locally_2d_forall. intros a b. apply ClassicalFacts.f2. apply derive_pt_mult. apply derive_pt_plus. apply Hd1. apply derive_pt_mult. apply derive_pt_plus. apply Hd2. apply Hd3.", "succ": false}]