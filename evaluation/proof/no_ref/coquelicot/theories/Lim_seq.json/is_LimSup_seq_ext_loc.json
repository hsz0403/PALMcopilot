[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": ["intros H1 H2.", "unfold is_LimSup_seq in *."], "tactic": "destruct H2 as [H2_inf H2_sup].", "exn": "Not an inductive product.", "type": "not_inductive_product", "handled": true}, {"ctx": ["intros H1 H2.", "unfold is_LimSup_seq in *."], "tactic": "split.", "exn": "Not an inductive product.", "type": "not_inductive_product", "handled": true}, {"ctx": ["intros H1 H2.", "unfold is_LimSup_seq in *."], "tactic": "intros eps.", "exn": "No product even after head-reduction.", "type": "no_product", "handled": true}]}, "chat": [], "original": "intros H1 H2. unfold is_LimSup_seq in *. unfold is_LimSup_seq in H2. destruct H2 as [H2_inf H2_sup]. unfold is_LimSup_seq. split. - intros eps. specialize (H1 eps). specialize (H2_inf eps). destruct H1 as [N1 H1]. destruct H2_inf as [N2 H2_inf]. exists (Nat.max N1 N2). intros n H. apply Nat.max_lub in H. apply Nat.max_lub in H. specialize (H1 n H). specialize (H2_inf n H). rewrite H1. apply H2_inf. - intros eps. specialize (H1 eps). specialize (H2_sup eps). destruct H1 as [N1 H1]. destruct H2_sup as [N2 H2_sup]. exists (Nat.max N1 N2). intros n H. apply Nat.max_lub in H. apply Nat.max_lub in H. specialize (H1 n H). specialize (H2_sup n H). rewrite H1. apply H2_sup.", "succ": false}]