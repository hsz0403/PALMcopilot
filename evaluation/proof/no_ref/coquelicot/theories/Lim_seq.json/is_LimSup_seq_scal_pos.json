[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": ["intros a_pos limsup_u_l.", "unfold is_LimSup_seq in *.", "destruct l as [l0| |].", "-", "intros eps."], "tactic": "specialize (limsup_u_l (pos_div_2 a_pos) ) as [H1 H2].", "exn": "In environment a : R u : nat -> R l0 : R a_pos : 0 < a limsup_u_l : forall eps : posreal, (forall N : nat, exists n : nat, (N <= n)%nat /\\\\ l0 - eps < u n) /\\\\ (exists N : nat, forall n : nat, (N <= n)%nat -> u n < l0 + eps) eps : posreal The term \"a_pos\" has type \"0 < a\" while it is expected to have type \"posreal\".", "type": "wrong_type", "handled": true}, {"ctx": ["intros a_pos limsup_u_l.", "unfold is_LimSup_seq in *.", "destruct l as [l0| |].", "-", "intros eps."], "tactic": "-", "exn": "Wrong bullet -: Current bullet - is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["intros a_pos limsup_u_l.", "unfold is_LimSup_seq in *.", "destruct l as [l0| |].", "-", "intros eps.", "shelve.", "-"], "tactic": "intros M N.", "exn": "No product even after head-reduction.", "type": "no_product", "handled": true}, {"ctx": ["intros a_pos limsup_u_l.", "unfold is_LimSup_seq in *.", "destruct l as [l0| |].", "-", "intros eps.", "shelve.", "-"], "tactic": "-", "exn": "Wrong bullet -: Current bullet - is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["intros a_pos limsup_u_l.", "unfold is_LimSup_seq in *.", "destruct l as [l0| |].", "-", "intros eps.", "shelve.", "-", "shelve.", "-"], "tactic": "intros M.", "exn": "No product even after head-reduction.", "type": "no_product", "handled": true}]}, "chat": [], "original": "intros a_pos limsup_u_l. unfold is_LimSup_seq in *. destruct l as [l0| |]. - intros eps. specialize (limsup_u_l (pos_div_2 a_pos) ) as [H1 H2]. destruct (H1 0%nat) as [n0 [Hn0 _]]. exists n0. split. + apply Hn0. + intros n Hn. specialize (H2 n) as [m [Hm1 Hm2]]. split. * apply Hm1. * apply (Rle_lt_trans _ l0 _). -- apply Rmult_le_compat_l. ++ apply pos_div_2_pos. ++ apply Hm2. -- apply Rlt_le. apply Rplus_lt_reg_r with (a * l0). rewrite Rplus_comm. apply Hm1. - intros M N. specialize (limsup_u_l M N) as [n [H1 H2]]. exists n. split. + apply H1. + intros n0 Hn0. apply Rlt_trans with M; auto. - intros M. specialize (limsup_u_l M 0%nat) as [n [H1 _]]. exists n. intros n0 Hn0. apply Rlt_trans with M; auto.", "succ": false}]