[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": ["intros b_series a_series.", "assert (ex_series (fun n => a n - b n)) as diff_series.", "-"], "tactic": "apply ex_series_minus; auto.", "exn": "In environment a, b : nat -> R b_series : ex_series a a_series : ex_series b Unable to unify \"exists l : ?V, is_series (fun n : nat => plus (?M2363 n) (opp (?M2364 n))) l\" with \"exists l : R_NormedModule, is_series (fun n : nat => a n - b n) l\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros b_series a_series.", "assert (ex_series (fun n => a n - b n)) as diff_series.", "-"], "tactic": "-", "exn": "Wrong bullet -: Current bullet - is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["intros b_series a_series.", "assert (ex_series (fun n => a n - b n)) as diff_series.", "-", "shelve.", "-"], "tactic": "apply is_series_unique in a_series.", "exn": "Unable to apply lemma of type \"forall (a : nat -> R) (l : R), is_series a l -> Series a = l\" on hypothesis of type \"ex_series b\".", "type": "cannot_apply_in", "handled": true}, {"ctx": ["intros b_series a_series.", "assert (ex_series (fun n => a n - b n)) as diff_series.", "-", "shelve.", "-"], "tactic": "apply is_series_unique in b_series.", "exn": "Unable to apply lemma of type \"forall (a : nat -> R) (l : R), is_series a l -> Series a = l\" on hypothesis of type \"ex_series a\".", "type": "cannot_apply_in", "handled": true}, {"ctx": ["intros b_series a_series.", "assert (ex_series (fun n => a n - b n)) as diff_series.", "-", "shelve.", "-"], "tactic": "apply is_series_ext with (a0 := fun n => a n - b n) in a_series.", "exn": "Unable to apply lemma of type \"forall (a0 b0 : nat -> ?V) (l : ?V), (forall n : nat, a0 n = b0 n) -> is_series a0 l -> is_series b0 l\" on hypothesis of type \"ex_series b\".", "type": "cannot_apply_in", "handled": true}]}, "chat": [], "original": "intros b_series a_series. assert (ex_series (fun n => a n - b n)) as diff_series. - apply ex_series_minus; auto. - apply is_series_unique in a_series. apply is_series_unique in b_series. apply is_series_ext with (a0 := fun n => a n - b n) in a_series. rewrite a_series. symmetry. apply Series_opp. apply Series_ext. intros n. unfold Rminus. rewrite Rplus_comm. reflexivity. apply ex_series_Rabs in diff_series. apply Rle_antisym. + apply Series_Rabs. apply ex_series_minus; auto. + apply Ropp_le_cancel. rewrite Series_Rabs. apply ex_series_Rabs. apply ex_series_plus; auto.", "succ": false}]