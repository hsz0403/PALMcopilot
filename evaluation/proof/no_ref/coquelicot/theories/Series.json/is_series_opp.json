[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": [], "tactic": "intros K V a la H.", "exn": "K is already used.", "type": "used_var", "handled": true}, {"ctx": [], "tactic": "intros K' V a la H.", "exn": "V is already used.", "type": "used_var", "handled": true}, {"ctx": [], "tactic": "intros K' V' a la H.", "exn": "a is already used.", "type": "used_var", "handled": true}, {"ctx": [], "tactic": "intros K' V' a' la H.", "exn": "la is already used.", "type": "used_var", "handled": true}, {"ctx": [], "tactic": "intros K' V' a' la' H.", "exn": "No product even after head-reduction.", "type": "no_product", "handled": true}, {"ctx": ["intros.", "unfold is_series in *.", "unfold opp."], "tactic": "apply filterlim_ext_loc.", "exn": "Unable to find an instance for the variable f.", "type": "no_instance_var", "handled": true}, {"ctx": ["intros.", "unfold is_series in *.", "unfold opp.", "intros eps."], "tactic": "split; intros H'.", "exn": "Unable to find an instance for the variable x.", "type": "no_instance_var", "handled": true}]}, "chat": [], "original": "intros K V a la H. unfold is_series in *. unfold opp. apply filterlim_ext_loc. - intros eps. split; intros H'. + destruct H' as [N HN]. exists N. intros n Hn. specialize (HN n Hn). rewrite norm_opp. apply HN. + destruct H' as [N HN]. exists N. intros n Hn. specialize (HN n Hn). rewrite <- norm_opp. apply HN. - apply H.", "succ": false}]