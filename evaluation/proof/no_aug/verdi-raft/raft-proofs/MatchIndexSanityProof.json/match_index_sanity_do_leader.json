[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": [], "tactic": "intros orig_base_params one_node_params raft_params aersi si net leader h H_type H_assoc.", "exn": "orig_base_params is already used.", "type": "used_var", "handled": true}, {"ctx": [], "tactic": "intros orig_base_params' one_node_params raft_params aersi si net leader h H_type H_assoc.", "exn": "one_node_params is already used.", "type": "used_var", "handled": true}, {"ctx": [], "tactic": "intros orig_base_params' one_node_params' raft_params aersi si net leader h H_type H_assoc.", "exn": "raft_params is already used.", "type": "used_var", "handled": true}, {"ctx": [], "tactic": "intros orig_base_params' one_node_params' raft_params' aersi si net leader h H_type H_assoc.", "exn": "aersi is already used.", "type": "used_var", "handled": true}, {"ctx": [], "tactic": "intros orig_base_params' one_node_params' raft_params' aersi' si net leader h H_type H_assoc.", "exn": "si is already used.", "type": "used_var", "handled": true}]}, "chat": [], "original": "intros orig_base_params one_node_params raft_params aersi si net leader h H_type H_assoc. unfold match_index_sanity. intros h' H_type'. simpl in *. rewrite H_assoc in H_type'. apply Peano.le_trans with (m := maxIndex (log (nwState net leader))). apply assoc_default_in; auto. apply le_maxIndex_assoc_default with (st := nwState net leader); auto.", "succ": false}]