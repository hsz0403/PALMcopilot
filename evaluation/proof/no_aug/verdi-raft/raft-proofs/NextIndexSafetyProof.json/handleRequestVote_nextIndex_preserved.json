[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": ["intros st h h' t lli llt st' m HhandleRequestVote.", "unfold handleRequestVote in HhandleRequestVote.", "destruct (t <? currentTerm st) eqn:Heq1.", "-", "inv HhandleRequestVote.", "unfold nextIndex_preserved.", "split; [auto|].", "split; [auto|]."], "tactic": "-", "exn": "Wrong bullet -: Current bullet - is not finished.", "type": "unfinished_bullet", "handled": true}]}, "chat": [], "original": "intros st h h' t lli llt st' m HhandleRequestVote. unfold handleRequestVote in HhandleRequestVote. destruct (t <? currentTerm st) eqn:Heq1. - inv HhandleRequestVote. unfold nextIndex_preserved. split; [auto|]. split; [auto|]. rewrite Heq1. apply le_refl. - destruct (leaderId (advanceCurrentTerm st t) || negb (currentTerm (advanceCurrentTerm st t) <? currentTerm st)) eqn:Heq2. + apply handleRequestVote_type in HhandleRequestVote. destruct HhandleRequestVote as [Htype | Htype]. * destruct Htype as [Heq3 Heq4]. rewrite Heq3. rewrite Heq4. rewrite Heq2. split; [auto|]. split; [auto|]. unfold advanceCurrentTerm in Heq3. apply Nat.le_trans with (m:=currentTerm st). ++ apply le_trans with (m:=currentTerm st); [auto|]. apply le_maxTerm. ++ apply le_refl. * destruct Htype as [Heq3 Heq4]. rewrite Heq3. rewrite Heq4. rewrite Heq2. split; [auto|]. split; [auto|]. unfold advanceCurrentTerm in Heq3. rewrite Heq3. rewrite max_l; [auto|]. apply le_refl. + destruct (votedFor (advanceCurrentTerm st t)) eqn: Heq3. * apply handleRequestVote_reply_true in HhandleRequestVote. destruct HhandleRequestVote as [Heq_reply1 Heq_reply2]. destruct Heq_reply2 as [Heq_reply3 Heq_reply4]. apply handleRequestVote_votedFor in HhandleRequestVote. destruct HhandleRequestVote. ++ subst. contradict Heq3. apply andb_prop in Heq2. destruct Heq2; discriminate. ++ assert (currentTerm st = t /\\ votedFor st' = votedFor st) as Heq5 by auto. destruct Heq5 as [Heq5 Heq6]. rewrite Heq5, Heq6. split; [auto|]. split; [auto|]. unfold advanceCurrentTerm in Heq5. rewrite Heq5. rewrite max_l; [auto|]. apply le_refl. * apply handleRequestVote_reply_true' in HhandleRequestVote. destruct HhandleRequestVote as [Heq_reply1 Heq_reply2]. destruct Heq_reply2 as [Heq_reply3 Heq_reply4]. apply handleRequestVote_votedFor in HhandleRequestVote. destruct HhandleRequestVote. ++ subst. rewrite Heq_reply1. contradict Heq3. apply andb_prop in Heq2. destruct Heq2. discriminate. ++ assert (currentTerm st = t /\\ votedFor st' = votedFor st) as Heq5 by auto. destruct Heq5 as [Heq5 Heq6]. rewrite Heq5, Heq6. split; [auto|]. split; [auto|]. unfold advanceCurrentTerm in Heq5. rewrite Heq5. rewrite max_l; [auto|]. apply le_refl.", "succ": false}]