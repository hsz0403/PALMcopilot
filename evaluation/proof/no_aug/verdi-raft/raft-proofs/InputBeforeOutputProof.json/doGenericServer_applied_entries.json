[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": ["intros ps h sigma os st' ms H_reach H_doGenericServer.", "unfold doGenericServer in H_doGenericServer.", "destruct (applyEntries h (sigma h) (rev (filter (fun x : entry => (lastApplied (sigma h) <? eIndex x) && (eIndex x <=? commitIndex (sigma h))) (findGtIndex (log (sigma h)) (lastApplied (sigma h)))))).", "inversion H_doGenericServer.", "clear H_doGenericServer.", "exists (rev (removeAfterIndex (log (sigma h)) (lastApplied (sigma h)))).", "split.", "-"], "tactic": "rewrite applied_entries_update with (st := r) by lia.", "exn": "The reference lia was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros ps h sigma os st' ms H_reach H_doGenericServer.", "unfold doGenericServer in H_doGenericServer.", "destruct (applyEntries h (sigma h) (rev (filter (fun x : entry => (lastApplied (sigma h) <? eIndex x) && (eIndex x <=? commitIndex (sigma h))) (findGtIndex (log (sigma h)) (lastApplied (sigma h)))))).", "inversion H_doGenericServer.", "clear H_doGenericServer.", "exists (rev (removeAfterIndex (log (sigma h)) (lastApplied (sigma h)))).", "split.", "-"], "tactic": "rewrite H.", "exn": "The reference H was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros ps h sigma os st' ms H_reach H_doGenericServer.", "unfold doGenericServer in H_doGenericServer.", "destruct (applyEntries h (sigma h) (rev (filter (fun x : entry => (lastApplied (sigma h) <? eIndex x) && (eIndex x <=? commitIndex (sigma h))) (findGtIndex (log (sigma h)) (lastApplied (sigma h)))))).", "inversion H_doGenericServer.", "clear H_doGenericServer.", "exists (rev (removeAfterIndex (log (sigma h)) (lastApplied (sigma h)))).", "split.", "-"], "tactic": "-", "exn": "Wrong bullet -: Current bullet - is not finished.", "type": "unfinished_bullet", "handled": true}]}, "chat": [], "original": "intros ps h sigma os st' ms H_reach H_doGenericServer. unfold doGenericServer in H_doGenericServer. destruct (applyEntries h (sigma h) (rev (filter (fun x : entry => (lastApplied (sigma h) <? eIndex x) && (eIndex x <=? commitIndex (sigma h))) (findGtIndex (log (sigma h)) (lastApplied (sigma h)))))). inversion H_doGenericServer. clear H_doGenericServer. exists (rev (removeAfterIndex (log (sigma h)) (lastApplied (sigma h)))). split. - rewrite applied_entries_update with (st := r) by lia. rewrite H. apply applied_entries_update. lia. - intros e H_in. apply in_app_iff in H_in. destruct H_in. + eapply log_matching_nw with (p:=mkPacket h h (AppendEntries t h pli plt es ci)) in H_reach; try auto. unfold log_matching_nw in H_reach. specialize (H_reach (mkPacket h h (AppendEntries t h pli plt es ci)) t h pli plt es ci). apply H_reach. * unfold nwPackets. simpl. left. reflexivity. * unfold nwPackets. simpl. left. reflexivity. + apply send_packets_app in H. apply in_app_iff in H. destruct H. * exfalso. apply in_map_iff in H. destruct H as [p [_ H_in]]. inversion H_in. * auto.", "succ": false}]