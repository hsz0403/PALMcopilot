[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": ["intros h st out st' ms H.", "unfold doGenericServer, applyEntries in H.", "destruct (rev (filter (fun x : entry => (lastApplied st <? eIndex x) && (eIndex x <=? commitIndex st)) (findGtIndex (log st) (lastApplied st)))) eqn:Heq.", "-", "inversion H.", "left."], "tactic": "-", "exn": "Wrong bullet -: Current bullet - is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["intros h st out st' ms H.", "unfold doGenericServer, applyEntries in H.", "destruct (rev (filter (fun x : entry => (lastApplied st <? eIndex x) && (eIndex x <=? commitIndex st)) (findGtIndex (log st) (lastApplied st)))) eqn:Heq.", "-", "inversion H.", "left.", "shelve.", "-"], "tactic": "destruct p as [out' st''].", "exn": "The reference p was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros h st out st' ms H.", "unfold doGenericServer, applyEntries in H.", "destruct (rev (filter (fun x : entry => (lastApplied st <? eIndex x) && (eIndex x <=? commitIndex st)) (findGtIndex (log st) (lastApplied st)))) eqn:Heq.", "-", "inversion H.", "left.", "shelve.", "-", "destruct raft_refined_multi_params as [out' st''].", "inversion H; subst.", "right.", "split.", "+"], "tactic": "+", "exn": "Wrong bullet +: Current bullet + is not finished.", "type": "unfinished_bullet", "handled": true}]}, "chat": [], "original": "intros h st out st' ms H. unfold doGenericServer, applyEntries in H. destruct (rev (filter (fun x : entry => (lastApplied st <? eIndex x) && (eIndex x <=? commitIndex st)) (findGtIndex (log st) (lastApplied st)))) eqn:Heq. - inversion H. left. reflexivity. - destruct p as [out' st'']. inversion H; subst. right. split. + right. split; [auto |]. symmetry in Heq. apply filter_In in Heq. destruct Heq as [Hin Heq']. apply andb_true_iff in Heq'. destruct Heq' as [H1 H2]. apply Nat.ltb_lt in H1. apply Nat.leb_le in H2. apply findGtIndex_In in Hin. destruct Hin as [Hin _]. exists e. split; auto. + apply Nat.lt_le_incl. apply Nat.ltb_lt. auto.", "succ": false}]