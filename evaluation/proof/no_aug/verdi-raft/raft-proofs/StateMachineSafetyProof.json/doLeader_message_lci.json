[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": ["intros st h os st' ms m t n pli plt es ci H1 H2 H3.", "unfold doLeader in H1.", "destruct (advanceCommitIndex st h) as [st1 shouldSend] eqn:Heq1.", "destruct (shouldSend) eqn:Heq2.", "-", "inversion H1."], "tactic": "-", "exn": "Wrong bullet -: Current bullet - is not finished.", "type": "unfinished_bullet", "handled": true}]}, "chat": [], "original": "intros st h os st' ms m t n pli plt es ci H1 H2 H3. unfold doLeader in H1. destruct (advanceCommitIndex st h) as [st1 shouldSend] eqn:Heq1. destruct (shouldSend) eqn:Heq2. - inversion H1. - destruct (RaftState.set_raft_data_shouldSend term name entry logIndex serverType data clientId output st1 false) as [st'0 replicaMessages] eqn:Heq3. inversion H1. subst. clear H1. assert (Hst: st' = st'0) by (eapply doLeader_spec; eauto). subst st'0. assert (Hms: ms = []) by (eapply doLeader_spec; eauto). subst ms. apply and_comm. apply and_comm in H2. apply and_comm in H3. apply RaftState.set_raft_data_shouldSend_spec in Heq3 as [Hstilt Heq3]. split; try split; try reflexivity. + unfold advanceCommitIndex in Heq1. injection Heq1 as Heq4 Heq5. subst st1 shouldSend. apply Heq3. + intros m' HIn. apply RaftState.set_raft_data_shouldSend_spec in Heq3 as [H _]. specialize (H _ HIn). destruct H as [h' [Hneq HEq]]. exists h'. split; auto.", "succ": false}]