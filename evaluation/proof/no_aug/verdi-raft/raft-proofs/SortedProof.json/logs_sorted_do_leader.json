[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": ["unfold raft_net_invariant_do_leader.", "unfold doLeader."], "tactic": "intros logs_sorted orig_base_params one_node_params raft_params tsi net st' ps' d h os d' ms Hdo Pnet Hrr Hns Hstate Hupdate Hp.", "exn": "orig_base_params is already used.", "type": "used_var", "handled": true}, {"ctx": ["unfold raft_net_invariant_do_leader.", "unfold doLeader."], "tactic": "intros logs_sorted orig_base_params' one_node_params raft_params tsi net st' ps' d h os d' ms Hdo Pnet Hrr Hns Hstate Hupdate Hp.", "exn": "one_node_params is already used.", "type": "used_var", "handled": true}, {"ctx": ["unfold raft_net_invariant_do_leader.", "unfold doLeader."], "tactic": "intros logs_sorted orig_base_params' one_node_params' raft_params tsi net st' ps' d h os d' ms Hdo Pnet Hrr Hns Hstate Hupdate Hp.", "exn": "raft_params is already used.", "type": "used_var", "handled": true}, {"ctx": ["unfold raft_net_invariant_do_leader.", "unfold doLeader."], "tactic": "intros logs_sorted orig_base_params' one_node_params' raft_params' tsi net st' ps' d h os d' ms Hdo Pnet Hrr Hns Hstate Hupdate Hp.", "exn": "tsi is already used.", "type": "used_var", "handled": true}, {"ctx": ["unfold raft_net_invariant_do_leader.", "unfold doLeader."], "tactic": "intros logs_sorted orig_base_params' one_node_params' raft_params' tsi' net st' ps' d h os d' ms Hdo Pnet Hrr Hns Hstate Hupdate Hp.", "exn": "No product even after head-reduction.", "type": "no_product", "handled": true}, {"ctx": ["unfold raft_net_invariant_do_leader.", "unfold doLeader.", "intros."], "tactic": "specialize (logs_sorted_invariant net Hrr) as H.", "exn": "The reference Hrr was not found in the current environment.", "type": "ref_not_found", "handled": true}]}, "chat": [], "original": "unfold raft_net_invariant_do_leader. unfold doLeader. intros logs_sorted orig_base_params one_node_params raft_params tsi net st' ps' d h os d' ms Hdo Pnet Hrr Hns Hstate Hupdate Hp. specialize (logs_sorted_invariant net Hrr) as H. apply H in Hns. unfold logs_sorted in Hns. destruct Hns as [H1 [H2 [H3 H4]]]. assert (Hst': st' h = update name_eq_dec (nwState net) h d'). - apply Hupdate. assert (H: forall p : packet, In p ps' -> In p (nwPackets net) \\/ In p (send_packets h ms)). - apply Hp. apply H.", "succ": false}]