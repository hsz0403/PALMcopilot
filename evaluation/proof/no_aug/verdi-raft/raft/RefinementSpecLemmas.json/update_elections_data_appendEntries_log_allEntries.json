[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": ["intros h st t n pli plt es ci st' ps H.", "destruct (t <? currentTerm (snd st)) eqn:Heq1.", "-", "inversion H."], "tactic": "-", "exn": "Wrong bullet -: Current bullet - is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["intros h st t n pli plt es ci st' ps H.", "destruct (t <? currentTerm (snd st)) eqn:Heq1.", "-", "inversion H.", "+", "shelve.", "+", "shelve.", "+", "shelve.", "+", "shelve.", "-", "destruct (pli =? 0) eqn:Heq2.", "+"], "tactic": "+", "exn": "Wrong bullet +: Current bullet + is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["intros h st t n pli plt es ci st' ps H.", "destruct (t <? currentTerm (snd st)) eqn:Heq1.", "-", "inversion H.", "+", "shelve.", "+", "shelve.", "+", "shelve.", "+", "shelve.", "-", "destruct (pli =? 0) eqn:Heq2.", "+", "shelve.", "+"], "tactic": "+", "exn": "Wrong bullet +: Current bullet + is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["intros h st t n pli plt es ci st' ps H.", "destruct (t <? currentTerm (snd st)) eqn:Heq1.", "-", "inversion H.", "+", "shelve.", "+", "shelve.", "+", "shelve.", "+", "shelve.", "-", "destruct (pli =? 0) eqn:Heq2.", "+", "shelve.", "+", "shelve."], "tactic": "+", "exn": "Wrong bullet +: No more subgoals.", "type": "no_more_subgoals", "handled": true}]}, "chat": [], "original": "intros h st t n pli plt es ci st' ps H. unfold handleAppendEntries in H. destruct (t <? currentTerm (snd st)) eqn:Heq1. - inversion H. subst. split; reflexivity. - destruct (pli =? 0) eqn:Heq2. + assert (haveNewEntries (snd st) es = false \\/ log st' = log (snd st) \\/ currentTerm st' = t /\\ log st' = es) as Hor by apply handleAppendEntries_log; auto. destruct Hor as [Hor_false | [Hor_log | [Hor_term_log | Hor_log_es]]]. * right. left. auto. * left. right. auto. * destruct (es =? []) eqn:Heq3. { inversion H. subst. split; [reflexivity | left]. } { inversion H. subst. split. + reflexivity. + right. split; [reflexivity | split; [auto | right; split; [auto | right; split; [auto | auto ]]]]. } + inversion H. subst. split; [reflexivity | right; split; [reflexivity | split; [assumption | right; split; [assumption | right; split; [assumption | auto ]]]]].", "succ": false}]