[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": ["intros pDst t cid lli llt d d' m H.", "unfold handleRequestVote in H.", "destruct (t <? currentTerm d) eqn:H1.", "-", "inversion H."], "tactic": "-", "exn": "Wrong bullet -: Current bullet - is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["intros pDst t cid lli llt d d' m H.", "unfold handleRequestVote in H.", "destruct (t <? currentTerm d) eqn:H1.", "-", "inversion H.", "shelve.", "-"], "tactic": ["destruct (advanceCurrentTerm d t) as [newData|] eqn:H2.", ""], "exn": "Expects a disjunctive pattern with 1 branch or a conjunctive pattern made of 14 patterns.", "type": "num_branch_both", "handled": false}]}, "chat": [], "original": "intros pDst t cid lli llt d d' m H. unfold handleRequestVote in H. destruct (t <? currentTerm d) eqn:H1. - inversion H. - destruct (advanceCurrentTerm d t) as [newData|] eqn:H2. + destruct (leaderId newData) eqn:H3. * inversion H. * destruct (leaderId d) eqn:H4. ** inversion H. ** apply advanceCurrentTerm_currentTerm in H2. rewrite H2. apply Nat.le_trans with (n := currentTerm d). *** apply leb_complete_conv in H1. apply H1. *** apply le_n_S. apply Nat.le_refl. + inversion H.", "succ": false}]