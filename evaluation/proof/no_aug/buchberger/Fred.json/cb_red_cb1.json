[{"history": {"proof": "srun best use: cb_red.", "repairs": ["hammer"], "exceptions": []}, "chat": [], "original": "intros p L H. unfold red. unfold redacc. remember nil as Acc. induction H. - rewrite -> HeqAcc. simpl. eapply cb_trans with (p := p). + apply cb_red. auto. + apply cb_zerop. apply zerop_nf_cb. auto. - simpl. remember (nf (p ++ Acc) a) as u eqn:Hequ. destruct (zerop_dec u) as [Hu | Hu]. + rewrite -> Hequ. eapply cb_trans with (p := u); [apply cb_nf |]; rewrite <- Hequ. eapply IHcb in Hequ. rewrite <- Hequ. apply cb_comp. * intros q Hq. apply in_cons. apply Hq. * auto. + rewrite -> Hequ. apply cb_comp. * intros q Hq. apply in_cons. apply Hq. * apply zerop_elim_cb with (p := a); auto.", "succ": true}]