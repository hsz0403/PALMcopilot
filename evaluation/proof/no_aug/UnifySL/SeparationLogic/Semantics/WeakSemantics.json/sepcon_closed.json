[{"history": {"proof": "intros X Y HX HY m Hincreasing. unfold upwards_closed_Kdenote in *. intros. unfold sepcon in *. destruct H0 as [m1 [m2 [Hjoin [HXm1 HYm2]]]]. hauto unfold: UpwardsClosedSeparationAlgebra.", "repairs": ["", "", "no_product", "", "ref_not_found", "hammer"], "exceptions": [{"ctx": ["intros X Y HX HY m Hincreasing.", "unfold upwards_closed_Kdenote in *."], "tactic": "intros n1 n2 Hleq Hsepcon.", "exn": "No product even after head-reduction.", "type": "no_product", "handled": true}, {"ctx": ["intros X Y HX HY m Hincreasing.", "unfold upwards_closed_Kdenote in *.", "intros.", "unfold sepcon in *."], "tactic": "destruct Hsepcon as [m1 [m2 [Hjoin [HXm1 HYm2]]]].", "exn": "The reference Hsepcon was not found in the current environment.", "type": "ref_not_found", "handled": true}]}, "chat": [], "original": "intros X Y HX HY m Hincreasing. unfold upwards_closed_Kdenote in *. intros n1 n2 Hleq Hsepcon. unfold sepcon in *. destruct Hsepcon as [m1 [m2 [Hjoin [HXm1 HYm2]]]]. destruct Hjoin as [m1' [m2' Hjoin']]. exists m1', m2'. split. - exists n1, n2. split. + apply Hjoin'. + split. * apply HX. apply Hincreasing with m. ++ apply Hjoin'. ++ apply HXm1. * apply HY. apply Hincreasing with m. ++ apply Hjoin'. ++ apply HYm2. - split. + apply HXm1. + apply HYm2.", "succ": true}]