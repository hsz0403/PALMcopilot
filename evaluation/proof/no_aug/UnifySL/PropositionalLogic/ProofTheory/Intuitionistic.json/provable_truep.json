[{"history": {"proof": "sfirstorder depth: 3.", "repairs": ["hammer"], "exceptions": []}, "chat": [{"role": "user", "content": "I will give you a Coq proof state, including both hypotheses and a specific goal and your need to prove it. Your response should be a singular code block of Coq proof starting with \"```coq\n\", ending with \"Qed.\", without any additional explanation or commentary. Follow to these guidelines:\nIntroduce variables using unique names to avoid any conflicts.\nKeep each command distinct and separated, avoid concatenations like ';' or '[cmd|cmd]'.\nOrganize your proof with bullets like '-', '+', and '*' instead of braces ({, }). Shift to their double symbols like '--' and '++', when necessary.\nEffectively use given premises, follow the syntax and structure demonstrated in the examples provided.\n\nExample 1:\n\nHypotheses:\nn, m: nat\nIHn: m + n = n + m\n\nGoal:\nm + S n = S n + m\n\nProof:\n```coq\nsimpl. rewrite <- IHn. auto.\nQed.```\n\nExample 2:\nHypotheses:\n\nGoal:\nforall n m : nat, m + n = n + m\n\n```coq\nintros n m. induction n.\n- simpl. auto.\n- simpl. rewrite <- IHn. auto.\nQed.```\n\nSolve This Proof State:\n\nHypotheses:\nL: Language\nminL: MinimumLanguage L\npL: PropositionalLanguage L\nGamma: Provable L\nminAX: MinimumAxiomatization L Gamma\nipGamma: IntuitionisticPropositionalLogic L Gamma\n\nGoal:\n|-- TT\n\nPremises:\nMinimumAxiomatization : forall L : Language, MinimumLanguage L -> Provable L -> Prop\nRecord MinimumLanguage (L : Language) : Type := Build_MinimumLanguage { impp : expr -> expr -> expr } For Build_MinimumLanguage: Argument scopes are [_ function_scope]\nRecord Provable (L : Language) : Type := Build_Provable { provable : expr -> Prop } For Build_Provable: Argument scopes are [_ function_scope]\nIntuitionisticPropositionalLogic : forall (L : Language) (minL : MinimumLanguage L), PropositionalLanguage L -> forall Gamma : Provable L, MinimumAxiomatization L Gamma -> Prop\nRecord PropositionalLanguage (L : Language) : Type := Build_PropositionalLanguage { andp : expr -> expr -> expr; orp : expr -> expr -> expr; falsep : expr } For Build_PropositionalLanguage: Argument scopes are [_ function_scope function_scope _]\nTestInAxiomatization.Unnamed_thm0 : forall (Phi : context) (x1 y1 x2 y2 : expr), |-- x2 --> x1 -> |-- y1 --> y2 -> Phi |-- x1 --> y1 -> Phi |-- x2 --> y2 where ?L : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipGamma : IntuitionisticPropositionalLogic L Gamma |- Language] ?minL : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipGamma : IntuitionisticPropositionalLogic L Gamma |- MinimumLanguage ?L] ?GammaP : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipGamma : IntuitionisticPropositionalLogic L Gamma |- Provable ?L] ?GammaD : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma...\nTestInSequentCalculus.Unnamed_thm0 : forall (Phi : context) (x1 y1 x2 y2 : expr), |-- x2 --> x1 -> |-- y1 --> y2 -> Phi |-- x1 --> y1 -> Phi |-- x2 --> y2 where ?L : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipGamma : IntuitionisticPropositionalLogic L Gamma |- Language] ?minL : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipGamma : IntuitionisticPropositionalLogic L Gamma |- MinimumLanguage ?L] ?GammaP : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipGamma : IntuitionisticPropositionalLogic L Gamma |- Provable ?L] ?GammaD : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma...\ndeduction_andp_intros : forall (Phi : context) (x y : expr), Phi |-- x -> Phi |-- y -> Phi |-- x && y where ?L : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipGamma : IntuitionisticPropositionalLogic L Gamma |- Language] ?pL : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipGamma : IntuitionisticPropositionalLogic L Gamma |- PropositionalLanguage ?L] ?Gamma : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipGamma : IntuitionisticPropositionalLogic L Gamma |- Derivable ?L] ?IntuitionisticPropositionalSequentCalculus : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipGamma : Intuition...\nTestInAxiomatization.Unnamed_thm : forall (Phi : context) (y1 y2 : expr), |-- y1 --> y2 -> Phi |-- y1 -> Phi |-- y2 where ?L : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipGamma : IntuitionisticPropositionalLogic L Gamma |- Language] ?minL : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipGamma : IntuitionisticPropositionalLogic L Gamma |- MinimumLanguage ?L] ?GammaP : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipGamma : IntuitionisticPropositionalLogic L Gamma |- Provable ?L] ?GammaD : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipGamma : Int...\ndeduction_orp_elim : forall (Phi : Ensemble expr) (x y z : expr), Phi;; x |-- z -> Phi;; y |-- z -> Phi;; x || y |-- z where ?L : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipGamma : IntuitionisticPropositionalLogic L Gamma |- Language] ?pL : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipGamma : IntuitionisticPropositionalLogic L Gamma |- PropositionalLanguage ?L] ?Gamma : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipGamma : IntuitionisticPropositionalLogic L Gamma |- Derivable ?L] ?IntuitionisticPropositionalSequentCalculus : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Provable L minAX : MinimumAxiomatization...\ndeduction_contradiction_elim : forall (Phi : context) (x y : expr), Phi |-- x -> Phi |-- ~~ x -> Phi |-- y where ?L : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipGamma : IntuitionisticPropositionalLogic L Gamma |- Language] ?minL : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipGamma : IntuitionisticPropositionalLogic L Gamma |- MinimumLanguage ?L] ?pL : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipGamma : IntuitionisticPropositionalLogic L Gamma |- PropositionalLanguage ?L] ?Gamma : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipGamma : IntuitionisticPropositionalLogic L Gamma |- Der...\ndeduction_modus_ponens : forall (Phi : context) (x y : expr), Phi |-- x -> Phi |-- x --> y -> Phi |-- y where ?L : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipGamma : IntuitionisticPropositionalLogic L Gamma |- Language] ?minL : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipGamma : IntuitionisticPropositionalLogic L Gamma |- MinimumLanguage ?L] ?Gamma : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipGamma : IntuitionisticPropositionalLogic L Gamma |- Derivable ?L] ?MinimumSequentCalculus : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipGamma : IntuitionisticPropositionalLogic...\nTestInAxiomatization.Unnamed_thm1 : context -> forall x1 y1 x2 y2 : expr, |-- x2 --> x1 -> |-- y1 --> y2 -> |-- (x1 --> y1) --> x2 --> y2 where ?L : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipGamma : IntuitionisticPropositionalLogic L Gamma |- Language] ?minL : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipGamma : IntuitionisticPropositionalLogic L Gamma |- MinimumLanguage ?L] ?GammaP : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipGamma : IntuitionisticPropositionalLogic L Gamma |- Provable ?L] ?GammaD : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Provable L min...\nTestInSequentCalculus.Unnamed_thm : forall (Phi : context) (y1 y2 : expr), |-- y1 --> y2 -> Phi |-- y1 -> Phi |-- y2 where ?L : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipGamma : IntuitionisticPropositionalLogic L Gamma |- Language] ?minL : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipGamma : IntuitionisticPropositionalLogic L Gamma |- MinimumLanguage ?L] ?GammaP : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipGamma : IntuitionisticPropositionalLogic L Gamma |- Provable ?L] ?GammaD : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipGamma : Int...\ndeduction_impp_trans : forall (Phi : context) (x y z : expr), Phi |-- x --> y -> Phi |-- y --> z -> Phi |-- x --> z where ?L : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipGamma : IntuitionisticPropositionalLogic L Gamma |- Language] ?GammaD : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipGamma : IntuitionisticPropositionalLogic L Gamma |- Derivable ?L] ?bSC : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipGamma : IntuitionisticPropositionalLogic L Gamma |- BasicSequentCalculus ?L ?GammaD] ?minL : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipGamma :...\ndeduction_subst1 : forall (Phi : context) (x y : expr), Phi |-- x -> Phi;; x |-- y -> Phi |-- y where ?L : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipGamma : IntuitionisticPropositionalLogic L Gamma |- Language] ?Gamma : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipGamma : IntuitionisticPropositionalLogic L Gamma |- Derivable ?L] ?bSC : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipGamma : IntuitionisticPropositionalLogic L Gamma |- BasicSequentCalculus ?L ?Gamma]\ndeduction_orp_elim' : forall (Phi : context) (x y z : expr), Phi |-- x --> z -> Phi |-- y --> z -> Phi |-- x || y --> z where ?L : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipGamma : IntuitionisticPropositionalLogic L Gamma |- Language] ?minL : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipGamma : IntuitionisticPropositionalLogic L Gamma |- MinimumLanguage ?L] ?pL : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipGamma : IntuitionisticPropositionalLogic L Gamma |- PropositionalLanguage ?L] ?Gamma : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipGamma : Intuitionistic...\nprodp_mono : forall x1 y1 x2 y2 : expr, |-- x1 - -> x2 -> |-- y1 - -> y2 -> |-- ?prodp x1 y1 - ->...-> expr] ?Monotonicity : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipGamma : IntuitionisticPropositionalLogic L Gamma |- Monotonicity ?L ?Gamma ?prodp]\nTestInSequentCalculus.Unnamed_thm1 : context -> forall x1 y1 x2 y2 : expr, |-- x2 --> x1 -> |-- y1 --> y2 -> |-- (x1 --> y1) --> x2 --> y2 where ?L : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipGamma : IntuitionisticPropositionalLogic L Gamma |- Language] ?minL : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipGamma : IntuitionisticPropositionalLogic L Gamma |- MinimumLanguage ?L] ?GammaP : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipGamma : IntuitionisticPropositionalLogic L Gamma |- Provable ?L] ?GammaD : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Provable L min...\nfuncp_mono : forall x1 y1 x2 y2 : expr, |-- x2 - -> x1 -> |-- y1 - -> y2 -> |-- ?funcp x1 y1 - ->...-> expr] ?Adj : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipGamma : IntuitionisticPropositionalLogic L Gamma |- Adjointness ?L ?Gamma ?prodp ?funcp] ?Mono : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipGamma : IntuitionisticPropositionalLogic L Gamma |- Monotonicity ?L ?Gamma ?prodp]\ndeduction_falsep_elim : forall (Phi : context) (x : expr), Phi |-- FF -> Phi |-- x where ?L : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipGamma : IntuitionisticPropositionalLogic L Gamma |- Language] ?pL : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipGamma : IntuitionisticPropositionalLogic L Gamma |- PropositionalLanguage ?L] ?Gamma : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipGamma : IntuitionisticPropositionalLogic L Gamma |- Derivable ?L] ?IntuitionisticPropositionalSequentCalculus : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipGamma : IntuitionisticPropositionalLogic L Gamma |-...\nprovable_derivable : forall x : expr, |-- x <-> empty_context |-- x where ?L : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipGamma : IntuitionisticPropositionalLogic L Gamma |- Language] ?GammaP : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipGamma : IntuitionisticPropositionalLogic L Gamma |- Provable ?L] ?GammaD : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipGamma : IntuitionisticPropositionalLogic L Gamma |- Derivable ?L] ?NormalSequentCalculus : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipGamma : IntuitionisticPropositionalLogic L Gamma |- NormalSequentCalculus ?L ?GammaP ?Gamma...\nderivable_trans : forall (Phi Psi : context) (y : expr), (forall x : expr, Psi x -> Phi |-- x) -> Psi |-- y -> Phi |-- y where ?L : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipGamma : IntuitionisticPropositionalLogic L Gamma |- Language] ?Gamma : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipGamma : IntuitionisticPropositionalLogic L Gamma |- Derivable ?L] ?bSC : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipGamma : IntuitionisticPropositionalLogic L Gamma |- BasicSequentCalculus ?L ?Gamma]\ndeduction_andp_elim1 : forall (Phi : context) (x y : expr), Phi |-- x && y -> Phi |-- x where ?L : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipGamma : IntuitionisticPropositionalLogic L Gamma |- Language] ?pL : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipGamma : IntuitionisticPropositionalLogic L Gamma |- PropositionalLanguage ?L] ?Gamma : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipGamma : IntuitionisticPropositionalLogic L Gamma |- Derivable ?L] ?IntuitionisticPropositionalSequentCalculus : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipGamma : IntuitionisticPropositional...\ndeduction_orp_intros1 : forall (Phi : context) (x y : expr), Phi |-- x -> Phi |-- x || y where ?L : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipGamma : IntuitionisticPropositionalLogic L Gamma |- Language] ?pL : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipGamma : IntuitionisticPropositionalLogic L Gamma |- PropositionalLanguage ?L] ?Gamma : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipGamma : IntuitionisticPropositionalLogic L Gamma |- Derivable ?L] ?IntuitionisticPropositionalSequentCalculus : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipGamma : IntuitionisticProposition...\ndeduction_orp_intros2 : forall (Phi : context) (x y : expr), Phi |-- y -> Phi |-- x || y where ?L : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipGamma : IntuitionisticPropositionalLogic L Gamma |- Language] ?pL : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipGamma : IntuitionisticPropositionalLogic L Gamma |- PropositionalLanguage ?L] ?Gamma : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipGamma : IntuitionisticPropositionalLogic L Gamma |- Derivable ?L] ?IntuitionisticPropositionalSequentCalculus : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipGamma : IntuitionisticProposition...\ndeduction_andp_elim2 : forall (Phi : context) (x y : expr), Phi |-- x && y -> Phi |-- y where ?L : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipGamma : IntuitionisticPropositionalLogic L Gamma |- Language] ?pL : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipGamma : IntuitionisticPropositionalLogic L Gamma |- PropositionalLanguage ?L] ?Gamma : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipGamma : IntuitionisticPropositionalLogic L Gamma |- Derivable ?L] ?IntuitionisticPropositionalSequentCalculus : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipGamma : IntuitionisticPropositional...\ndeduction_subst : forall (Phi Psi : context) (y : expr), (forall x : expr, Psi x -> Phi |-- x) -> Union expr Phi Psi |-- y -> Phi |-- y where ?L : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipGamma : IntuitionisticPropositionalLogic L Gamma |- Language] ?Gamma : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipGamma : IntuitionisticPropositionalLogic L Gamma |- Derivable ?L] ?BasicSequentCalculus : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipGamma : IntuitionisticPropositionalLogic L Gamma |- BasicSequentCalculus ?L ?Gamma]\ndeduction_weaken0 : forall (Phi : context) (y : expr), |-- y -> Phi |-- y where ?L : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipGamma : IntuitionisticPropositionalLogic L Gamma |- Language] ?Gamma : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipGamma : IntuitionisticPropositionalLogic L Gamma |- Derivable ?L] ?bSC : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipGamma : IntuitionisticPropositionalLogic L Gamma |- BasicSequentCalculus ?L ?Gamma] ?GammaP : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipGamma : IntuitionisticPropositionalLogic L Gamma |- Provable ?L]...\nfold_right_mono : forall (x1 x2 : expr) (xs1 xs2 : list expr), Forall2 (fun x3 x4 : expr => |-- x3 --> x4) xs1 xs2 -> |-- x1 - -> x2 -> |-- fold_right ?prodp x1 xs1 - ->...-> expr] ?Mono : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipGamma : IntuitionisticPropositionalLogic L Gamma |- Monotonicity ?L ?Gamma ?prodp]\nfold_left_mono : forall (x1 x2 : expr) (xs1 xs2 : list expr), Forall2 (fun x3 x4 : expr => |-- x3 --> x4) xs1 xs2 -> |-- x1 - -> x2 -> |-- fold_left ?prodp xs1 x1 - ->...-> expr] ?Mono : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipGamma : IntuitionisticPropositionalLogic L Gamma |- Monotonicity ?L ?Gamma ?prodp]\ndeduction_double_negp_intros : forall (Phi : context) (x : expr), Phi |-- x -> Phi |-- ~~ (~~ x) where ?L : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipGamma : IntuitionisticPropositionalLogic L Gamma |- Language] ?minL : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipGamma : IntuitionisticPropositionalLogic L Gamma |- MinimumLanguage ?L] ?pL : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipGamma : IntuitionisticPropositionalLogic L Gamma |- PropositionalLanguage ?L] ?Gamma : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipGamma : IntuitionisticPropositionalLogic L Gamma |- Derivable...\ndeduction_left_impp_intros : forall (Phi : context) (x y : expr), Phi |-- x -> Phi |-- y --> x where ?L : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipGamma : IntuitionisticPropositionalLogic L Gamma |- Language] ?GammaD : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipGamma : IntuitionisticPropositionalLogic L Gamma |- Derivable ?L] ?bSC : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipGamma : IntuitionisticPropositionalLogic L Gamma |- BasicSequentCalculus ?L ?GammaD] ?minL : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipGamma : IntuitionisticPropositionalLogic...\ndeduction_theorem : forall (Phi : context) (x y : expr), Phi;; x |-- y <-> Phi |-- x --> y where ?L : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipGamma : IntuitionisticPropositionalLogic L Gamma |- Language] ?GammaD : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipGamma : IntuitionisticPropositionalLogic L Gamma |- Derivable ?L] ?bSC : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipGamma : IntuitionisticPropositionalLogic L Gamma |- BasicSequentCalculus ?L ?GammaD] ?minL : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipGamma : IntuitionisticPropositionalLogic L...\ndeduction_impp_elim : forall (Phi : context) (x y : expr), Phi |-- x --> y -> Phi;; x |-- y where ?L : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipGamma : IntuitionisticPropositionalLogic L Gamma |- Language] ?GammaD : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipGamma : IntuitionisticPropositionalLogic L Gamma |- Derivable ?L] ?bSC : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipGamma : IntuitionisticPropositionalLogic L Gamma |- BasicSequentCalculus ?L ?GammaD] ?minL : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipGamma : IntuitionisticPropositionalLogic...\ndeduction_impp_intros : forall (Phi : Ensemble expr) (x y : expr), Phi;; x |-- y -> Phi |-- x --> y where ?L : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipGamma : IntuitionisticPropositionalLogic L Gamma |- Language] ?minL : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipGamma : IntuitionisticPropositionalLogic L Gamma |- MinimumLanguage ?L] ?Gamma : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipGamma : IntuitionisticPropositionalLogic L Gamma |- Derivable ?L] ?MinimumSequentCalculus : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipGamma : IntuitionisticPropositionalLogic L Gamma...\ndeduction_weaken1 : forall (Phi : context) (x y : expr), Phi |-- y -> Phi;; x |-- y where ?L : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipGamma : IntuitionisticPropositionalLogic L Gamma |- Language] ?Gamma : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipGamma : IntuitionisticPropositionalLogic L Gamma |- Derivable ?L] ?bSC : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipGamma : IntuitionisticPropositionalLogic L Gamma |- BasicSequentCalculus ?L ?Gamma]\ndeduction_contrapositivePN : forall (Phi : context) (x y : expr), Phi |-- y --> ~~ x -> Phi |-- x --> ~~ y where ?L : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipGamma : IntuitionisticPropositionalLogic L Gamma |- Language] ?minL : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipGamma : IntuitionisticPropositionalLogic L Gamma |- MinimumLanguage ?L] ?pL : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipGamma : IntuitionisticPropositionalLogic L Gamma |- PropositionalLanguage ?L] ?Gamma : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipGamma : IntuitionisticPropositionalLogic L Gamma |-...\ndeduction_contrapositivePP : forall (Phi : context) (x y : expr), Phi |-- y --> x -> Phi |-- ~~ x --> ~~ y where ?L : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipGamma : IntuitionisticPropositionalLogic L Gamma |- Language] ?minL : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipGamma : IntuitionisticPropositionalLogic L Gamma |- MinimumLanguage ?L] ?pL : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipGamma : IntuitionisticPropositionalLogic L Gamma |- PropositionalLanguage ?L] ?Gamma : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipGamma : IntuitionisticPropositionalLogic L Gamma |-...\nfold_right_mono2 : forall (x1 x2 : expr) (xs : list expr), |-- x1 - -> x2 -> |-- fold_right ?prodp x1 xs - ->...-> expr] ?Mono : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipGamma : IntuitionisticPropositionalLogic L Gamma |- Monotonicity ?L ?Gamma ?prodp]\nfold_left_mono2 : forall (x1 x2 : expr) (xs : list expr), |-- x1 - -> x2 -> |-- fold_left ?prodp xs x1 - ->...-> expr] ?Mono : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipGamma : IntuitionisticPropositionalLogic L Gamma |- Monotonicity ?L ?Gamma ?prodp]\ndeduction_impp_arg_switch : forall (Phi : context) (x y z : expr), Phi |-- x --> y --> z -> Phi |-- y --> x --> z where ?L : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipGamma : IntuitionisticPropositionalLogic L Gamma |- Language] ?GammaD : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipGamma : IntuitionisticPropositionalLogic L Gamma |- Derivable ?L] ?bSC : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipGamma : IntuitionisticPropositionalLogic L Gamma |- BasicSequentCalculus ?L ?GammaD] ?minL : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipGamma : Int...\nprodp_mono1 : forall x1 x2 y : expr, |-- x1 - -> x2 -> |-- ?prodp x1 y - ->...-> expr] ?Adj : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipGamma : IntuitionisticPropositionalLogic L Gamma |- Adjointness ?L ?Gamma ?prodp ?funcp]\nfuncp_mono2 : forall x y1 y2 : expr, |-- y1 - -> y2 -> |-- ?funcp x y1 - ->...-> expr] ?Adj : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipGamma : IntuitionisticPropositionalLogic L Gamma |- Adjointness ?L ?Gamma ?prodp ?funcp]\nadjoint : forall x y z : expr, |-- ?prodp x y - -> z < -> |-- x - ->...-> expr] ?Adjointness : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipGamma : IntuitionisticPropositionalLogic L Gamma |- Adjointness ?L ?Gamma ?prodp ?funcp]"}, {"role": "assistant", "content": "```coq\nintros.\npose proof (provable_derivable TT) as H.\napply H.\nQed.```"}], "original": "intros. pose proof (provable_derivable TT) as H. apply H.", "succ": true}]