[{"history": {"proof": "intros x y. hauto use: @adjoint, @provable_impp_refl.", "repairs": ["", "hammer"], "exceptions": []}, "chat": [{"role": "user", "content": "I will give you a Coq proof state, including both hypotheses and a specific goal and your need to prove it. Your response should be a singular code block of Coq proof starting with \"```coq\n\", ending with \"Qed.\", without any additional explanation or commentary. Follow to these guidelines:\nIntroduce variables using unique names to avoid any conflicts.\nKeep each command distinct and separated, avoid concatenations like ';' or '[cmd|cmd]'.\nOrganize your proof with bullets like '-', '+', and '*' instead of braces ({, }). Shift to their double symbols like '--' and '++', when necessary.\nEffectively use given premises, follow the syntax and structure demonstrated in the examples provided.\n\nExample 1:\n\nHypotheses:\nn, m: nat\nIHn: m + n = n + m\n\nGoal:\nm + S n = S n + m\n\nProof:\n```coq\nsimpl. rewrite <- IHn. auto.\nQed.```\n\nExample 2:\nHypotheses:\n\nGoal:\nforall n m : nat, m + n = n + m\n\n```coq\nintros n m. induction n.\n- simpl. auto.\n- simpl. rewrite <- IHn. auto.\nQed.```\n\nSolve This Proof State:\n\nHypotheses:\nL: Language\nminL: MinimumLanguage L\nGamma: Provable L\nminAX: MinimumAxiomatization L Gamma\nfuncp: expr -> expr -> expr\nprodp: expr -> expr -> expr\nAdj: Adjointness L Gamma prodp funcp\n\nGoal:\nforall x y : expr, |-- prodp (funcp x y) x --> y\n\nPremises:\nMinimumAxiomatization : forall L : Language, MinimumLanguage L -> Provable L -> Prop\nRecord MinimumLanguage (L : Language) : Type := Build_MinimumLanguage { impp : expr -> expr -> expr } For Build_MinimumLanguage: Argument scopes are [_ function_scope]\nexpr = fun Language0 : Language => let (expr) := Language0 in expr : Language -> Type Argument Language is implicit and maximally inserted\nAdjointness : forall L : Language, MinimumLanguage L -> Provable L -> (expr -> expr -> expr) -> (expr -> expr -> expr) -> Prop\nRecord Provable (L : Language) : Type := Build_Provable { provable : expr -> Prop } For Build_Provable: Argument scopes are [_ function_scope]\nprodp_assoc1 : forall x y z : expr, |-- ?prodp x (?prodp y z) - -> ?prodp (?prodp x y) z where ?L : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr funcp : expr -> expr -> expr Adj : Adjointness L Gamma prodp funcp |- Language] ?minL : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr funcp : expr -> expr -> expr Adj : Adjointness L Gamma prodp funcp |- MinimumLanguage ?L] ?Gamma : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr funcp : expr -> expr ->...-> expr Adj : Adjointness L Gamma prodp funcp |- Associativity ?L ?Gamma ?prodp]\nprodp_assoc2 : forall x y z : expr, |-- ?prodp (?prodp x y) z - -> ?prodp x (?prodp y z) where ?L : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr funcp : expr -> expr -> expr Adj : Adjointness L Gamma prodp funcp |- Language] ?minL : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr funcp : expr -> expr -> expr Adj : Adjointness L Gamma prodp funcp |- MinimumLanguage ?L] ?Gamma : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr funcp : expr -> expr ->...-> expr Adj : Adjointness L Gamma prodp funcp |- Associativity ?L ?Gamma ?prodp]\nderivable_axiom2 : forall (Phi : context) (x y z : expr), Phi |-- (x --> y --> z) - -> (x --> y) - -> x - -> z where ?L : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr funcp : expr -> expr -> expr Adj : Adjointness L Gamma prodp funcp |- Language] ?GammaD : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr funcp : expr -> expr -> expr Adj : Adjointness L Gamma prodp funcp |- Derivable ?L] ?bSC : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr funcp : expr -> expr ->...-> expr Adj : Adjointness L Gamma prodp funcp |- MinimumSequentCalculus ?L ?GammaD]\nderivable_modus_ponens : forall (Phi : context) (x y : expr), Phi |-- x - -> (x --> y) - -> y where ?L : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr funcp : expr -> expr -> expr Adj : Adjointness L Gamma prodp funcp |- Language] ?GammaD : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr funcp : expr -> expr -> expr Adj : Adjointness L Gamma prodp funcp |- Derivable ?L] ?bSC : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr funcp : expr -> expr ->...-> expr Adj : Adjointness L Gamma prodp funcp |- MinimumSequentCalculus ?L ?GammaD]\nleft_distr1 : forall x y z : expr, |-- ?prodp x (?sump y z) - -> ?sump (?prodp x y) (?prodp x z) where ?L : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr funcp : expr -> expr -> expr Adj : Adjointness L Gamma prodp funcp |- Language] ?minL : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr funcp : expr -> expr -> expr Adj : Adjointness L Gamma prodp funcp |- MinimumLanguage ?L] ?Gamma : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr funcp : expr -> expr ->...-> expr Adj : Adjointness L Gamma prodp funcp |- LeftDistr ?L ?Gamma ?prodp ?sump]\nleft_distr2 : forall x y z : expr, |-- ?sump (?prodp x y) (?prodp x z) - -> ?prodp x (?sump y z) where ?L : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr funcp : expr -> expr -> expr Adj : Adjointness L Gamma prodp funcp |- Language] ?minL : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr funcp : expr -> expr -> expr Adj : Adjointness L Gamma prodp funcp |- MinimumLanguage ?L] ?Gamma : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr funcp : expr -> expr ->...-> expr Adj : Adjointness L Gamma prodp funcp |- LeftDistr ?L ?Gamma ?prodp ?sump]\nprodp_comm_impp : forall x y : expr, |-- ?prodp x y - -> ?prodp y x where ?L : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr funcp : expr -> expr -> expr Adj : Adjointness L Gamma prodp funcp |- Language] ?minL : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr funcp : expr -> expr -> expr Adj : Adjointness L Gamma prodp funcp |- MinimumLanguage ?L] ?Gamma : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr funcp : expr -> expr ->...-> expr Adj : Adjointness L Gamma prodp funcp |- Commutativity ?L ?Gamma ?prodp]\nTestInAxiomatization.Unnamed_thm1 : context -> forall x1 y1 x2 y2 : expr, |-- x2 - -> x1 -> |-- y1 - -> y2 -> |-- (x1 --> y1) - -> x2 - -> y2 where ?L : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr funcp : expr -> expr -> expr Adj : Adjointness L Gamma prodp funcp |- Language] ?minL : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr funcp : expr -> expr -> expr Adj : Adjointness L Gamma prodp funcp |- MinimumLanguage ?L] ?GammaP : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr ->...-> expr Adj : Adjointness L Gamma prodp funcp |- MinimumAxiomatization ?L ?GammaP]\ndeduction_impp_arg_switch : forall (Phi : context) (x y z : expr), Phi |-- x - -> y - -> z -> Phi |-- y - -> x - -> z where ?L : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr funcp : expr -> expr -> expr Adj : Adjointness L Gamma prodp funcp |- Language] ?GammaD : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr funcp : expr -> expr -> expr Adj : Adjointness L Gamma prodp funcp |- Derivable ?L] ?bSC : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr funcp : expr -> expr ->...-> expr Adj : Adjointness L Gamma prodp funcp |- MinimumSequentCalculus ?L ?GammaD]\ndeduction_impp_trans : forall (Phi : context) (x y z : expr), Phi |-- x - -> y -> Phi |-- y - -> z -> Phi |-- x - -> z where ?L : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr funcp : expr -> expr -> expr Adj : Adjointness L Gamma prodp funcp |- Language] ?GammaD : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr funcp : expr -> expr -> expr Adj : Adjointness L Gamma prodp funcp |- Derivable ?L] ?bSC : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr funcp : expr -> expr ->...-> expr Adj : Adjointness L Gamma prodp funcp |- MinimumSequentCalculus ?L ?GammaD]\nTestInSequentCalculus.Unnamed_thm1 : context -> forall x1 y1 x2 y2 : expr, |-- x2 - -> x1 -> |-- y1 - -> y2 -> |-- (x1 --> y1) - -> x2 - -> y2 where ?L : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr funcp : expr -> expr -> expr Adj : Adjointness L Gamma prodp funcp |- Language] ?minL : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr funcp : expr -> expr -> expr Adj : Adjointness L Gamma prodp funcp |- MinimumLanguage ?L] ?GammaP : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr ->...-> expr Adj : Adjointness L Gamma prodp funcp |- MinimumSequentCalculus ?L ?GammaD]\nderivable_provable : forall (Phi : context) (y : expr), Phi |-- y < -> (exists xs : list expr, Forall (fun x : expr => Phi x) xs /\\ |-- multi_imp xs y) where ?L : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr funcp : expr -> expr -> expr Adj : Adjointness L Gamma prodp funcp |- Language] ?minL : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr funcp : expr -> expr -> expr Adj : Adjointness L Gamma prodp funcp |- MinimumLanguage ?L] ?GammaP : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr funcp : expr -> expr ->...-> expr Adj : Adjointness L Gamma prodp funcp |- NormalAxiomatization ?L ?GammaP ?GammaD]\nright_distr1 : forall x y z : expr, |-- ?prodp (?sump y z) x - -> ?sump (?prodp y x) (?prodp z x) where ?L : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr funcp : expr -> expr -> expr Adj : Adjointness L Gamma prodp funcp |- Language] ?minL : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr funcp : expr -> expr -> expr Adj : Adjointness L Gamma prodp funcp |- MinimumLanguage ?L] ?Gamma : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr funcp : expr -> expr ->...-> expr Adj : Adjointness L Gamma prodp funcp |- RightDistr ?L ?Gamma ?prodp ?sump]\nright_distr2 : forall x y z : expr, |-- ?sump (?prodp y x) (?prodp z x) - -> ?prodp (?sump y z) x where ?L : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr funcp : expr -> expr -> expr Adj : Adjointness L Gamma prodp funcp |- Language] ?minL : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr funcp : expr -> expr -> expr Adj : Adjointness L Gamma prodp funcp |- MinimumLanguage ?L] ?Gamma : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr funcp : expr -> expr ->...-> expr Adj : Adjointness L Gamma prodp funcp |- RightDistr ?L ?Gamma ?prodp ?sump]\nprodp_mono : forall x1 y1 x2 y2 : expr, |-- x1 - -> x2 -> |-- y1 - -> y2 -> |-- ?prodp x1 y1 - -> ?prodp x2 y2 where ?L : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr funcp : expr -> expr -> expr Adj : Adjointness L Gamma prodp funcp |- Language] ?minL : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr funcp : expr -> expr -> expr Adj : Adjointness L Gamma prodp funcp |- MinimumLanguage ?L] ?Gamma : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr funcp : expr -> expr ->...-> expr Adj : Adjointness L Gamma prodp funcp |- Monotonicity ?L ?Gamma ?prodp]\nderivable_axiom1 : forall (Phi : context) (x y : expr), Phi |-- x - -> y - -> x where ?L : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr funcp : expr -> expr -> expr Adj : Adjointness L Gamma prodp funcp |- Language] ?GammaD : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr funcp : expr -> expr -> expr Adj : Adjointness L Gamma prodp funcp |- Derivable ?L] ?bSC : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr funcp : expr -> expr ->...-> expr Adj : Adjointness L Gamma prodp funcp |- MinimumSequentCalculus ?L ?GammaD]\ndeduction_modus_ponens : forall (Phi : context) (x y : expr), Phi |-- x -> Phi |-- x - -> y -> Phi |-- y where ?L : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr funcp : expr -> expr -> expr Adj : Adjointness L Gamma prodp funcp |- Language] ?minL : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr funcp : expr -> expr -> expr Adj : Adjointness L Gamma prodp funcp |- MinimumLanguage ?L] ?Gamma : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr funcp : expr -> expr ->...-> expr Adj : Adjointness L Gamma prodp funcp |- MinimumSequentCalculus ?L ?Gamma]\ndeduction_impp_intros : forall (Phi : Ensemble expr) (x y : expr), Phi;; x |-- y -> Phi |-- x - -> y where ?L : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr funcp : expr -> expr -> expr Adj : Adjointness L Gamma prodp funcp |- Language] ?minL : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr funcp : expr -> expr -> expr Adj : Adjointness L Gamma prodp funcp |- MinimumLanguage ?L] ?Gamma : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr funcp : expr -> expr ->...-> expr Adj : Adjointness L Gamma prodp funcp |- MinimumSequentCalculus ?L ?Gamma]\nright_unit2 : forall x : expr, |-- x - -> ?prodp x ?e where ?L : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr funcp : expr -> expr -> expr Adj : Adjointness L Gamma prodp funcp |- Language] ?minL : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr funcp : expr -> expr -> expr Adj : Adjointness L Gamma prodp funcp |- MinimumLanguage ?L] ?Gamma : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr funcp : expr -> expr ->...-> expr Adj : Adjointness L Gamma prodp funcp |- RightUnit ?L ?Gamma ?e ?prodp]\nleft_unit1 : forall x : expr, |-- ?prodp ?e x - -> x where ?L : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr funcp : expr -> expr -> expr Adj : Adjointness L Gamma prodp funcp |- Language] ?minL : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr funcp : expr -> expr -> expr Adj : Adjointness L Gamma prodp funcp |- MinimumLanguage ?L] ?Gamma : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr funcp : expr -> expr ->...-> expr Adj : Adjointness L Gamma prodp funcp |- LeftUnit ?L ?Gamma ?e ?prodp]\nright_unit1 : forall x : expr, |-- ?prodp x ?e - -> x where ?L : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr funcp : expr -> expr -> expr Adj : Adjointness L Gamma prodp funcp |- Language] ?minL : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr funcp : expr -> expr -> expr Adj : Adjointness L Gamma prodp funcp |- MinimumLanguage ?L] ?Gamma : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr funcp : expr -> expr ->...-> expr Adj : Adjointness L Gamma prodp funcp |- RightUnit ?L ?Gamma ?e ?prodp]\nleft_unit2 : forall x : expr, |-- x - -> ?prodp ?e x where ?L : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr funcp : expr -> expr -> expr Adj : Adjointness L Gamma prodp funcp |- Language] ?minL : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr funcp : expr -> expr -> expr Adj : Adjointness L Gamma prodp funcp |- MinimumLanguage ?L] ?Gamma : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr funcp : expr -> expr ->...-> expr Adj : Adjointness L Gamma prodp funcp |- LeftUnit ?L ?Gamma ?e ?prodp]\ndeduction_impp_elim : forall (Phi : context) (x y : expr), Phi |-- x - -> y -> Phi;; x |-- y where ?L : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr funcp : expr -> expr -> expr Adj : Adjointness L Gamma prodp funcp |- Language] ?GammaD : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr funcp : expr -> expr -> expr Adj : Adjointness L Gamma prodp funcp |- Derivable ?L] ?bSC : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr funcp : expr -> expr ->...-> expr Adj : Adjointness L Gamma prodp funcp |- MinimumSequentCalculus ?L ?GammaD]\ndeduction_theorem : forall (Phi : context) (x y : expr), Phi;; x |-- y < -> Phi |-- x - -> y where ?L : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr funcp : expr -> expr -> expr Adj : Adjointness L Gamma prodp funcp |- Language] ?GammaD : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr funcp : expr -> expr -> expr Adj : Adjointness L Gamma prodp funcp |- Derivable ?L] ?bSC : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr funcp : expr -> expr ->...-> expr Adj : Adjointness L Gamma prodp funcp |- MinimumSequentCalculus ?L ?GammaD]\nTestInAxiomatization.Unnamed_thm0 : forall (Phi : context) (x1 y1 x2 y2 : expr), |-- x2 - -> x1 -> |-- y1 - -> y2 -> Phi |-- x1 - -> y1 -> Phi |-- x2 - -> y2 where ?L : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr funcp : expr -> expr -> expr Adj : Adjointness L Gamma prodp funcp |- Language] ?minL : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr funcp : expr -> expr -> expr Adj : Adjointness L Gamma prodp funcp |- MinimumLanguage ?L] ?GammaP : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr ->...-> expr Adj : Adjointness L Gamma prodp funcp |- MinimumAxiomatization ?L ?GammaP]\ndeduction_left_impp_intros : forall (Phi : context) (x y : expr), Phi |-- x -> Phi |-- y - -> x where ?L : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr funcp : expr -> expr -> expr Adj : Adjointness L Gamma prodp funcp |- Language] ?GammaD : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr funcp : expr -> expr -> expr Adj : Adjointness L Gamma prodp funcp |- Derivable ?L] ?bSC : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr funcp : expr -> expr ->...-> expr Adj : Adjointness L Gamma prodp funcp |- MinimumSequentCalculus ?L ?GammaD]\nTestInSequentCalculus.Unnamed_thm0 : forall (Phi : context) (x1 y1 x2 y2 : expr), |-- x2 - -> x1 -> |-- y1 - -> y2 -> Phi |-- x1 - -> y1 -> Phi |-- x2 - -> y2 where ?L : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr funcp : expr -> expr -> expr Adj : Adjointness L Gamma prodp funcp |- Language] ?minL : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr funcp : expr -> expr -> expr Adj : Adjointness L Gamma prodp funcp |- MinimumLanguage ?L] ?GammaP : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr ->...-> expr Adj : Adjointness L Gamma prodp funcp |- MinimumSequentCalculus ?L ?GammaD]\nderivable_trans : forall (Phi Psi : context) (y : expr), (forall x : expr, Psi x -> Phi |-- x) -> Psi |-- y -> Phi |-- y where ?L : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr funcp : expr -> expr -> expr Adj : Adjointness L Gamma prodp funcp |- Language] ?Gamma : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr funcp : expr -> expr -> expr Adj : Adjointness L Gamma prodp funcp |- Derivable ?L] ?bSC : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr funcp : expr -> expr -> expr Adj : Adjointness L Gamma prodp funcp |- BasicSequentCalculus ?L ?Gamma]\nprovable_derivable : forall x : expr, |-- x < -> empty_context |-- x where ?L : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr funcp : expr -> expr -> expr Adj : Adjointness L Gamma prodp funcp |- Language] ?GammaP : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr funcp : expr -> expr -> expr Adj : Adjointness L Gamma prodp funcp |- Provable ?L] ?GammaD : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr funcp : expr -> expr ->...-> expr Adj : Adjointness L Gamma prodp funcp |- NormalSequentCalculus ?L ?GammaP ?GammaD]\ndeduction_subst : forall (Phi Psi : context) (y : expr), (forall x : expr, Psi x -> Phi |-- x) -> Union expr Phi Psi |-- y -> Phi |-- y where ?L : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr funcp : expr -> expr -> expr Adj : Adjointness L Gamma prodp funcp |- Language] ?Gamma : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr funcp : expr -> expr -> expr Adj : Adjointness L Gamma prodp funcp |- Derivable ?L] ?BasicSequentCalculus : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr funcp : expr -> expr -> expr Adj : Adjointness L Gamma prodp funcp |- BasicSequentCalculus ?L ?Gamma]\nTestInAxiomatization.Unnamed_thm : forall (Phi : context) (y1 y2 : expr), |-- y1 - -> y2 -> Phi |-- y1 -> Phi |-- y2 where ?L : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr funcp : expr -> expr -> expr Adj : Adjointness L Gamma prodp funcp |- Language] ?minL : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr funcp : expr -> expr -> expr Adj : Adjointness L Gamma prodp funcp |- MinimumLanguage ?L] ?GammaP : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr funcp : expr -> expr ->...-> expr Adj : Adjointness L Gamma prodp funcp |- MinimumAxiomatization ?L ?GammaP]\nderivable_finite_witnessed : forall (Phi : context) (y : expr), Phi |-- y -> exists xs : list expr, Forall Phi xs /\\ (fun x : expr => In x xs) |-- y where ?L : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr funcp : expr -> expr -> expr Adj : Adjointness L Gamma prodp funcp |- Language] ?Gamma : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr funcp : expr -> expr -> expr Adj : Adjointness L Gamma prodp funcp |- Derivable ?L] ?FiniteWitnessedSequentCalculus : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr funcp : expr -> expr -> expr Adj : Adjointness L Gamma prodp funcp |- FiniteWitnessedSequentCalculus ?L ?Gamma]\nderivable_impp_refl : forall (Phi : context) (x : expr), Phi |-- x - -> x where ?L : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr funcp : expr -> expr -> expr Adj : Adjointness L Gamma prodp funcp |- Language] ?GammaD : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr funcp : expr -> expr -> expr Adj : Adjointness L Gamma prodp funcp |- Derivable ?L] ?bSC : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr funcp : expr -> expr ->...-> expr Adj : Adjointness L Gamma prodp funcp |- MinimumSequentCalculus ?L ?GammaD]\ncontextual_derivable_finite_witnessed : forall (Phi Psi : context) (y : expr), Union expr Phi Psi |-- y -> exists xs : list expr, Forall Psi xs /\\ Union expr Phi (fun x : expr => In x xs) |-- y where ?L : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr funcp : expr -> expr -> expr Adj : Adjointness L Gamma prodp funcp |- Language] ?Gamma : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr funcp : expr -> expr -> expr Adj : Adjointness L Gamma prodp funcp |- Derivable ?L] ?bSC : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr funcp : expr ->...-> expr Adj : Adjointness L Gamma prodp funcp |- FiniteWitnessedSequentCalculus ?L ?Gamma]\ndeduction_weaken0 : forall (Phi : context) (y : expr), |-- y -> Phi |-- y where ?L : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr funcp : expr -> expr -> expr Adj : Adjointness L Gamma prodp funcp |- Language] ?Gamma : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr funcp : expr -> expr -> expr Adj : Adjointness L Gamma prodp funcp |- Derivable ?L] ?bSC : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr funcp : expr -> expr ->...-> expr Adj : Adjointness L Gamma prodp funcp |- NormalSequentCalculus ?L ?GammaP ?Gamma]\ndeduction_subst1 : forall (Phi : context) (x y : expr), Phi |-- x -> Phi;; x |-- y -> Phi |-- y where ?L : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr funcp : expr -> expr -> expr Adj : Adjointness L Gamma prodp funcp |- Language] ?Gamma : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr funcp : expr -> expr -> expr Adj : Adjointness L Gamma prodp funcp |- Derivable ?L] ?bSC : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr funcp : expr -> expr -> expr Adj : Adjointness L Gamma prodp funcp |- BasicSequentCalculus ?L ?Gamma]\nTestInSequentCalculus.Unnamed_thm : forall (Phi : context) (y1 y2 : expr), |-- y1 - -> y2 -> Phi |-- y1 -> Phi |-- y2 where ?L : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr funcp : expr -> expr -> expr Adj : Adjointness L Gamma prodp funcp |- Language] ?minL : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr funcp : expr -> expr -> expr Adj : Adjointness L Gamma prodp funcp |- MinimumLanguage ?L] ?GammaP : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr funcp : expr -> expr ->...-> expr Adj : Adjointness L Gamma prodp funcp |- MinimumSequentCalculus ?L ?GammaD]\ndeduction_weaken1 : forall (Phi : context) (x y : expr), Phi |-- y -> Phi;; x |-- y where ?L : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr funcp : expr -> expr -> expr Adj : Adjointness L Gamma prodp funcp |- Language] ?Gamma : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr funcp : expr -> expr -> expr Adj : Adjointness L Gamma prodp funcp |- Derivable ?L] ?bSC : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr funcp : expr -> expr -> expr Adj : Adjointness L Gamma prodp funcp |- BasicSequentCalculus ?L ?Gamma]\ndeduction_theorem_multi_imp : forall (Phi : context) (xs : list expr) (y : expr), Union expr Phi (fun x : expr => In x xs) |-- y < -> Phi |-- multi_imp xs y where ?L : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr funcp : expr -> expr -> expr Adj : Adjointness L Gamma prodp funcp |- Language] ?GammaD : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr funcp : expr -> expr -> expr Adj : Adjointness L Gamma prodp funcp |- Derivable ?L] ?bSC : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr funcp : expr -> expr ->...-> expr Adj : Adjointness L Gamma prodp funcp |- MinimumSequentCalculus ?L ?GammaD]\nderivable_assum1 : forall (Phi : context) (x : expr), Phi;; x |-- x where ?L : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr funcp : expr -> expr -> expr Adj : Adjointness L Gamma prodp funcp |- Language] ?Gamma : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr funcp : expr -> expr -> expr Adj : Adjointness L Gamma prodp funcp |- Derivable ?L] ?bSC : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr funcp : expr -> expr -> expr Adj : Adjointness L Gamma prodp funcp |- BasicSequentCalculus ?L ?Gamma]"}, {"role": "assistant", "content": "```coq\nintros x y.\nunfold Adjointness in Adj.\napply prodp_comm_impp.\nQed.```"}], "original": "intros x y. unfold Adjointness in Adj. apply prodp_comm_impp.", "succ": true}]