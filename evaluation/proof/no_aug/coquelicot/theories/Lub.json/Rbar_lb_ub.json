[{"history": {"proof": "split. - intros H x H'. hauto use: Rbar_opp_le, Rbar_opp_involutive unfold: Rbar_is_lower_bound. - intros H x H'. specialize (H (Rbar_opp x)). unfold Rbar_opp in H. destruct x; try destruct l; auto. hauto lq: on use: Ropp_0, Rbar_opp_real, Rbar_abs_opp, Rbar_abs_pos, Rbar_finite_neq, Rbar_le_refl, Rbar_opp_involutive, is_finite_correct, Rbar_opp_le unfold: Rbar_abs, real, Rbar_opp, is_finite.", "repairs": ["", "", "", "hammer", "", "", "", "", "", "hammer"], "exceptions": [{"ctx": [], "tactic": "intros E l.", "exn": "E is already used.", "type": "used_var", "handled": true}, {"ctx": [], "tactic": "intros E' l.", "exn": "l is already used.", "type": "used_var", "handled": true}, {"ctx": [], "tactic": "intros E' l'.", "exn": "No product even after head-reduction.", "type": "no_product", "handled": true}, {"ctx": ["split.", "-", "intros H x H'."], "tactic": "-", "exn": "Wrong bullet -: Current bullet - is not finished.", "type": "unfinished_bullet", "handled": true}]}, "chat": [], "original": "intros E l. split. - intros H x H'. apply H. unfold Rbar_opp. destruct x; try destruct l; auto. - intros H x H'. specialize (H (Rbar_opp x)). unfold Rbar_opp in H. destruct x; try destruct l; auto.", "succ": true}]