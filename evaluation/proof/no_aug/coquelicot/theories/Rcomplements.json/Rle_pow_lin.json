[{"history": {"proof": "hauto lq: on use: cos_2PI, poly, Rmult_0_l, Rplus_0_r, pow_R1_Rle, Rmult_comm unfold: Rle.", "repairs": [], "exceptions": [{"ctx": ["intros.", "induction n.", "-", "simpl."], "tactic": "intros _.", "exn": "No product even after head-reduction.", "type": "no_product", "handled": true}, {"ctx": ["intros.", "induction n.", "-", "simpl."], "tactic": "-", "exn": "Wrong bullet -: Current bullet - is not finished.", "type": "unfinished_bullet", "handled": true}]}, "chat": [], "original": "intros. induction n. - simpl. intros _. apply Rle_lt_0_plus_1. apply Rlt_0_1. - assert (H0 : 0 < 1 + a) by lra. assert (H1 : 1 + a <= (1 + a) ^ S n) by (apply poly; lra). assert (H2 : 1 + INR n * a <= (1 + a) ^ n) by apply IHn. assert (H3 : INR n * a + a <= INR n * a + 1) by lra. assert (H4 : INR n + 1 <= INR (S n)) by (rewrite S_INR; apply Rplus_le_reg_l with (r := INR n); lra). assert (H5 : 1 + INR n * a <= INR n * a + a) by lra. assert (H6 : 1 + INR n * a <= INR n + 1) by lra. assert (H7 : INR n + 1 <= INR (S n)) by (rewrite S_INR; apply Rplus_le_compat_l; lra). lra.", "succ": true}]