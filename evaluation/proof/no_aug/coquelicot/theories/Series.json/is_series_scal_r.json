[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": [], "tactic": "intros c a l H_series.", "exn": "c is already used.", "type": "used_var", "handled": true}, {"ctx": [], "tactic": "intros c' a l H_series.", "exn": "a is already used.", "type": "used_var", "handled": true}, {"ctx": [], "tactic": "intros c' a' l H_series.", "exn": "l is already used.", "type": "used_var", "handled": true}, {"ctx": [], "tactic": "intros c' a' l' H_series.", "exn": "No product even after head-reduction.", "type": "no_product", "handled": true}, {"ctx": ["intros.", "unfold is_series in *.", "unfold filterlim in *.", "intros eps H_eps."], "tactic": "destruct (H_series eps H_eps) as [N H_N].", "exn": "The reference H_series was not found in the current environment.", "type": "ref_not_found", "handled": true}]}, "chat": [], "original": "intros c a l H_series. unfold is_series in *. unfold filterlim in *. intros eps H_eps. destruct (H_series eps H_eps) as [N H_N]. exists N. intros n H_n. unfold eventually in *. specialize (H_N n H_n). rewrite -> Rmult_minus_distr_l. rewrite -> Rminus_0_r in H_N. rewrite -> Rmult_comm. rewrite -> Rmult_assoc. rewrite -> Rmult_comm with (r:=c). apply H_N.", "succ": false}]