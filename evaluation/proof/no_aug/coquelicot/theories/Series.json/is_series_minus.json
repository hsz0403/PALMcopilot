[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": [], "tactic": "intros K V b a lb la H1 H2.", "exn": "K is already used.", "type": "used_var", "handled": true}, {"ctx": [], "tactic": "intros K' V b a lb la H1 H2.", "exn": "V is already used.", "type": "used_var", "handled": true}, {"ctx": [], "tactic": "intros K' V' b a lb la H1 H2.", "exn": "b is already used.", "type": "used_var", "handled": true}, {"ctx": [], "tactic": "intros K' V' b' a lb la H1 H2.", "exn": "a is already used.", "type": "used_var", "handled": true}, {"ctx": [], "tactic": "intros K' V' b' a' lb la H1 H2.", "exn": "lb is already used.", "type": "used_var", "handled": true}, {"ctx": [], "tactic": "intros K' V' b' a' lb' la H1 H2.", "exn": "la is already used.", "type": "used_var", "handled": true}, {"ctx": [], "tactic": "intros K' V' b' a' lb' la' H1 H2.", "exn": "No product even after head-reduction.", "type": "no_product", "handled": true}, {"ctx": ["intros."], "tactic": ["apply is_series_ext with (a := (fun n => plus (a n) (opp (b n)))) (b := (fun n => plus (a n) (opp (b n)))).", ""], "exn": "No such bound variable a (possible names are: a0, b0 and l).", "type": "no_such_bound", "handled": false}]}, "chat": [], "original": "intros K V b a lb la H1 H2. apply is_series_ext with (a := (fun n => plus (a n) (opp (b n)))) (b := (fun n => plus (a n) (opp (b n)))). - intro n. symmetry. apply plus_opp_l. - apply is_series_plus; auto.", "succ": false}]