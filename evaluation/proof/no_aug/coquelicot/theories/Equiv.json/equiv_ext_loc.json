[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": ["intros H.", "unfold is_equiv, is_domin.", "intros eps.", "apply filter_imp with (fun x : T => norm (g x) <= sqrt eps * norm (f x)).", "-"], "tactic": "-", "exn": "Wrong bullet -: Current bullet - is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["intros H.", "unfold is_equiv, is_domin.", "intros eps.", "apply filter_imp with (fun x : T => norm (g x) <= sqrt eps * norm (f x)).", "-", "shelve.", "-", "apply filter_imp with (fun x : T => norm (minus (g x) (f x)) <= eps * norm (f x)).", "+"], "tactic": "+", "exn": "Wrong bullet +: Current bullet + is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["intros H.", "unfold is_equiv, is_domin.", "intros eps.", "apply filter_imp with (fun x : T => norm (g x) <= sqrt eps * norm (f x)).", "-", "shelve.", "-", "apply filter_imp with (fun x : T => norm (minus (g x) (f x)) <= eps * norm (f x)).", "+", "shelve.", "+"], "tactic": "intros x H0.", "exn": "No product even after head-reduction.", "type": "no_product", "handled": true}]}, "chat": [], "original": "intros H. unfold is_equiv, is_domin. intros eps. apply filter_imp with (fun x : T => norm (g x) <= sqrt eps * norm (f x)). - apply filter_and. + apply equiv_carac_0. + intros x y H0 H1. apply filter_imp with (fun x : T => norm (g x) <= sqrt eps * norm (f x)). * apply filter_imp with (fun x : T => norm (f x) <= sqrt eps * norm (g x)). ++ apply equiv_carac_0. ++ apply filter_and. -- apply equiv_le_2. -- apply equiv_le_2. * apply equiv_carac_1. - apply filter_imp with (fun x : T => norm (minus (g x) (f x)) <= eps * norm (f x)). + apply equiv_carac_0. + intros x H0. apply H in H0. unfold ball_norm in H0. apply H0.", "succ": false}]