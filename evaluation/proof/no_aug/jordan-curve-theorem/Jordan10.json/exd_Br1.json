[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": ["intros m x x' z.", "split.", "-", "intros H.", "unfold exd in H.", "unfold Br1.", "destruct (succ_dec m zero x) as [Hx|Hx]; destruct (succ_dec m zero x') as [Hx'|Hx'].", "+", "unfold exd."], "tactic": "+", "exn": "Wrong bullet +: Current bullet + is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["intros m x x' z.", "split.", "-", "intros H.", "unfold exd in H.", "unfold Br1.", "destruct (succ_dec m zero x) as [Hx|Hx]; destruct (succ_dec m zero x') as [Hx'|Hx'].", "+", "unfold exd.", "shelve.", "+", "unfold exd."], "tactic": "+", "exn": "Wrong bullet +: Current bullet + is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["intros m x x' z.", "split.", "-", "intros H.", "unfold exd in H.", "unfold Br1.", "destruct (succ_dec m zero x) as [Hx|Hx]; destruct (succ_dec m zero x') as [Hx'|Hx'].", "+", "unfold exd.", "shelve.", "+", "unfold exd.", "shelve.", "+"], "tactic": "+", "exn": "Wrong bullet +: Current bullet + is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["intros m x x' z.", "split.", "-", "intros H.", "unfold exd in H.", "unfold Br1.", "destruct (succ_dec m zero x) as [Hx|Hx]; destruct (succ_dec m zero x') as [Hx'|Hx'].", "+", "unfold exd.", "shelve.", "+", "unfold exd.", "shelve.", "+", "shelve.", "+"], "tactic": "-", "exn": "Wrong bullet -: Current bullet + is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["intros m x x' z.", "split.", "-", "intros H.", "unfold exd in H.", "unfold Br1.", "destruct (succ_dec m zero x) as [Hx|Hx]; destruct (succ_dec m zero x') as [Hx'|Hx'].", "+", "unfold exd.", "shelve.", "+", "unfold exd.", "shelve.", "+", "shelve.", "+", "shelve.", "-", "intros H.", "unfold exd in H.", "destruct (succ_dec m zero x) as [Hx|Hx]; destruct (succ_dec m zero x') as [Hx'|Hx'].", "+", "unfold exd."], "tactic": "+", "exn": "Wrong bullet +: Current bullet + is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["intros m x x' z.", "split.", "-", "intros H.", "unfold exd in H.", "unfold Br1.", "destruct (succ_dec m zero x) as [Hx|Hx]; destruct (succ_dec m zero x') as [Hx'|Hx'].", "+", "unfold exd.", "shelve.", "+", "unfold exd.", "shelve.", "+", "shelve.", "+", "shelve.", "-", "intros H.", "unfold exd in H.", "destruct (succ_dec m zero x) as [Hx|Hx]; destruct (succ_dec m zero x') as [Hx'|Hx'].", "+", "unfold exd.", "shelve.", "+", "unfold exd."], "tactic": "+", "exn": "Wrong bullet +: Current bullet + is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["intros m x x' z.", "split.", "-", "intros H.", "unfold exd in H.", "unfold Br1.", "destruct (succ_dec m zero x) as [Hx|Hx]; destruct (succ_dec m zero x') as [Hx'|Hx'].", "+", "unfold exd.", "shelve.", "+", "unfold exd.", "shelve.", "+", "shelve.", "+", "shelve.", "-", "intros H.", "unfold exd in H.", "destruct (succ_dec m zero x) as [Hx|Hx]; destruct (succ_dec m zero x') as [Hx'|Hx'].", "+", "unfold exd.", "shelve.", "+", "unfold exd.", "shelve.", "+"], "tactic": "+", "exn": "Wrong bullet +: Current bullet + is not finished.", "type": "unfinished_bullet", "handled": true}]}, "chat": [], "original": "intros m x x' z. split. - intros H. unfold exd in H. unfold Br1. destruct (succ_dec m zero x) as [Hx|Hx]; destruct (succ_dec m zero x') as [Hx'|Hx']. + unfold exd. destruct H as [H|H]. * right. apply exd_B with zero x. auto. * left. rewrite H. apply exd_B with zero x'. auto. + unfold exd. destruct H as [H|H]. * right. apply exd_B with zero x. auto. * left. rewrite H. apply exd_B_1 with zero x'. auto. + left. apply exd_B with zero x'. * unfold exd in H. destruct H as [H|H]. ++ subst. contradiction. ++ auto. + right. apply exd_B_1 with zero x'. * unfold exd in H. destruct H as [H|H]. ++ subst. auto. ++ contradiction. - intros H. unfold exd in H. unfold Br1. destruct (succ_dec m zero x) as [Hx|Hx]; destruct (succ_dec m zero x') as [Hx'|Hx']. + unfold exd. destruct H as [H|H]. * right. apply exd_B with zero x. auto. * left. rewrite H. apply exd_B with zero x'. auto. + unfold exd. destruct H as [H|H]. * right. apply exd_B with zero x. auto. * left. rewrite H. apply exd_B_1 with zero x'. auto. + left. apply exd_B with zero x'. * auto. + right. apply exd_B_1 with zero x'. * auto.", "succ": false}]