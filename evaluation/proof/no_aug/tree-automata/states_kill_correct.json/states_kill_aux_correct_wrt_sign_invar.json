[{"history": {"proof": "intros s m sigma H. srun best use: kill_empty_correct_wrt_sign_invar_1.", "repairs": ["", "hammer"], "exceptions": [{"ctx": ["intros s m sigma H.", "unfold states_kill_aux.", "destruct s.", "-", "unfold state_correct_wrt_sign in H.", "intros a p H'.", "apply H in H'.", "destruct H' as [n [H1 H2]].", "exists n.", "split.", "+"], "tactic": "intros a' p' H''.", "exn": "No product even after head-reduction.", "type": "no_product", "handled": true}, {"ctx": ["intros s m sigma H.", "unfold states_kill_aux.", "destruct s.", "-", "unfold state_correct_wrt_sign in H.", "intros a p H'.", "apply H in H'.", "destruct H' as [n [H1 H2]].", "exists n.", "split.", "+"], "tactic": "+", "exn": "Wrong bullet +: Current bullet + is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["intros s m sigma H.", "unfold states_kill_aux.", "destruct s.", "-", "unfold state_correct_wrt_sign in H.", "intros a p H'.", "apply H in H'.", "destruct H' as [n [H1 H2]].", "exists n.", "split.", "+", "shelve.", "+"], "tactic": "-", "exn": "Wrong bullet -: Current bullet + is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["intros s m sigma H.", "unfold states_kill_aux.", "destruct s.", "-", "unfold state_correct_wrt_sign in H.", "intros a p H'.", "apply H in H'.", "destruct H' as [n [H1 H2]].", "exists n.", "split.", "+", "shelve.", "+", "shelve.", "-", "destruct (prec_list_kill m p) eqn: Eq_kill.", "+"], "tactic": "+", "exn": "Wrong bullet +: Current bullet + is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["intros s m sigma H.", "unfold states_kill_aux.", "destruct s.", "-", "unfold state_correct_wrt_sign in H.", "intros a p H'.", "apply H in H'.", "destruct H' as [n [H1 H2]].", "exists n.", "split.", "+", "shelve.", "+", "shelve.", "-", "destruct (prec_list_kill m p) eqn: Eq_kill.", "+", "shelve.", "+"], "tactic": "-", "exn": "Wrong bullet -: Current bullet + is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["intros s m sigma H.", "unfold states_kill_aux.", "destruct s.", "-", "unfold state_correct_wrt_sign in H.", "intros a p H'.", "apply H in H'.", "destruct H' as [n [H1 H2]].", "exists n.", "split.", "+", "shelve.", "+", "shelve.", "-", "destruct (prec_list_kill m p) eqn: Eq_kill.", "+", "shelve.", "+", "shelve.", "-", "destruct (states_kill_aux m s1) eqn: Eq.", "+"], "tactic": "exists (M1 prec_list (N.double a) p).", "exn": "The reference p was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros s m sigma H.", "unfold states_kill_aux.", "destruct s.", "-", "unfold state_correct_wrt_sign in H.", "intros a p H'.", "apply H in H'.", "destruct H' as [n [H1 H2]].", "exists n.", "split.", "+", "shelve.", "+", "shelve.", "-", "destruct (prec_list_kill m p) eqn: Eq_kill.", "+", "shelve.", "+", "shelve.", "-", "destruct (states_kill_aux m s1) eqn: Eq.", "+", "unfold state_correct_wrt_sign.", "intros a' p' H'."], "tactic": "-", "exn": "Wrong bullet -: Current bullet + is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["intros s m sigma H.", "unfold states_kill_aux.", "destruct s.", "-", "unfold state_correct_wrt_sign in H.", "intros a p H'.", "apply H in H'.", "destruct H' as [n [H1 H2]].", "exists n.", "split.", "+", "shelve.", "+", "shelve.", "-", "destruct (prec_list_kill m p) eqn: Eq_kill.", "+", "shelve.", "+", "shelve.", "-", "destruct (states_kill_aux m s1) eqn: Eq.", "+", "unfold state_correct_wrt_sign.", "intros a' p' H'.", "shelve."], "tactic": "-", "exn": "Wrong bullet -: Expecting +.", "type": "wrong_bullet", "handled": true}, {"ctx": ["intros s m sigma H.", "unfold states_kill_aux.", "destruct s.", "-", "unfold state_correct_wrt_sign in H.", "intros a p H'.", "apply H in H'.", "destruct H' as [n [H1 H2]].", "exists n.", "split.", "+", "shelve.", "+", "shelve.", "-", "destruct (prec_list_kill m p) eqn: Eq_kill.", "+", "shelve.", "+", "shelve.", "-", "destruct (states_kill_aux m s1) eqn: Eq.", "+", "unfold state_correct_wrt_sign.", "intros a' p' H'.", "shelve.", "+"], "tactic": "-", "exn": "Wrong bullet -: Current bullet + is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["intros s m sigma H.", "unfold states_kill_aux.", "destruct s.", "-", "unfold state_correct_wrt_sign in H.", "intros a p H'.", "apply H in H'.", "destruct H' as [n [H1 H2]].", "exists n.", "split.", "+", "shelve.", "+", "shelve.", "-", "destruct (prec_list_kill m p) eqn: Eq_kill.", "+", "shelve.", "+", "shelve.", "-", "destruct (states_kill_aux m s1) eqn: Eq.", "+", "unfold state_correct_wrt_sign.", "intros a' p' H'.", "shelve.", "+", "shelve."], "tactic": "-", "exn": "Wrong bullet -: Expecting +.", "type": "wrong_bullet", "handled": true}, {"ctx": ["intros s m sigma H.", "unfold states_kill_aux.", "destruct s.", "-", "unfold state_correct_wrt_sign in H.", "intros a p H'.", "apply H in H'.", "destruct H' as [n [H1 H2]].", "exists n.", "split.", "+", "shelve.", "+", "shelve.", "-", "destruct (prec_list_kill m p) eqn: Eq_kill.", "+", "shelve.", "+", "shelve.", "-", "destruct (states_kill_aux m s1) eqn: Eq.", "+", "unfold state_correct_wrt_sign.", "intros a' p' H'.", "shelve.", "+", "shelve.", "+"], "tactic": "+", "exn": "Wrong bullet +: Current bullet + is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["intros s m sigma H.", "unfold states_kill_aux.", "destruct s.", "-", "unfold state_correct_wrt_sign in H.", "intros a p H'.", "apply H in H'.", "destruct H' as [n [H1 H2]].", "exists n.", "split.", "+", "shelve.", "+", "shelve.", "-", "destruct (prec_list_kill m p) eqn: Eq_kill.", "+", "shelve.", "+", "shelve.", "-", "destruct (states_kill_aux m s1) eqn: Eq.", "+", "unfold state_correct_wrt_sign.", "intros a' p' H'.", "shelve.", "+", "shelve.", "+", "shelve."], "tactic": "+", "exn": "Wrong bullet +: No more subgoals.", "type": "no_more_subgoals", "handled": true}]}, "chat": [], "original": "intros s m sigma H. unfold states_kill_aux. destruct s. - unfold state_correct_wrt_sign in H. intros a p H'. apply H in H'. destruct H' as [n [H1 H2]]. exists n. split. + unfold state_correct_wrt_sign. intros a' p' H''. apply H in H''. destruct H'' as [n' [H1' H2']]. rewrite H1'. auto. + apply pl_tl_length. auto. - destruct (prec_list_kill m p) eqn: Eq_kill. + exists (M1 prec_list a p0). unfold state_correct_wrt_sign. intros a' p' H'. apply H in H'. destruct H' as [n [H1 H2]]. exists n. split. * unfold MapGet in H'. destruct (ad_eqb a a') eqn: Eq_ad. { apply Nat.eqb_eq in Eq_ad. subst. rewrite <- H1. rewrite <- H1'. auto. } { apply Nat.eqb_neq in Eq_ad. unfold MapGet. rewrite Eq_ad. apply H. auto. } * apply pl_tl_length. auto. + exists (M0 prec_list). unfold state_correct_wrt_sign. intros a p' H'. discriminate H'. - destruct (states_kill_aux m s1) eqn: Eq. + exists (M1 prec_list (N.double a) p). unfold state_correct_wrt_sign. intros a' p' H'. apply H in H'. destruct H' as [n [H1 H2]]. destruct (ad_eqb a a') eqn: Eq_ad. * apply Nat.eqb_eq in Eq_ad. subst. exists n. split. { unfold MapGet in H'. destruct (ad_eqb a (N.double a)) eqn: Eq_ad'. - apply ad_eqb_eq in Eq_ad'. discriminate Eq_ad'. - apply ad_eqb_neq in Eq_ad'. rewrite Eq_ad in H'. injection H' as H''. rewrite <- Eq_kill in H''. discriminate H''. } { apply pl_tl_length. auto. } * apply Nat.eqb_neq in Eq_ad. unfold MapGet. rewrite Eq_ad. apply H. auto. + destruct (prec_list_kill m p) eqn: Eq_kill'. * destruct (states_kill_aux m s0) eqn: Eq'. { destruct (states_kill_aux m1 s1) eqn: Eq''. - exists (M2 prec_list (M0 prec_list) (M2 prec_list m2 m3)). unfold state_correct_wrt_sign. intros a p' H'. apply H in H'. destruct H' as [n [H1 H2]]. destruct (ad_eqb a a0) eqn: Eq_ad. + apply Nat.eqb_eq in Eq_ad. subst. exists n. split. { unfold MapGet in H'. destruct (ad_eqb a a) eqn: Eq_ad'. - apply ad_eqb_eq in Eq_ad'. discriminate Eq_ad'. - apply ad_eqb_neq in Eq_ad'. rewrite Eq_ad in H'. injection H' as H''. rewrite <- Eq_kill in H''. discriminate H''. } { apply pl_tl_length. auto. } + apply Nat.eqb_neq in Eq_ad. unfold MapGet. rewrite Eq_ad. apply H. auto. - exists (M1 prec_list (N.double a) p). unfold state_correct_wrt_sign. intros a' p' H'. apply H in H'. destruct H' as [n [H1 H2]]. destruct (ad_eqb a a') eqn: Eq_ad. { apply Nat.eqb_eq in Eq_ad. subst. exists n. split. { unfold MapGet in H'. destruct (ad_eqb a (N.double a)) eqn: Eq_ad'. - apply ad_eqb_eq in Eq_ad'. discriminate Eq_ad'. - apply ad_eqb_neq in Eq_ad'. rewrite Eq_ad in H'. injection H' as H''. rewrite <- Eq_kill in H''. discriminate H''. } { apply pl_tl_length. auto. } } { apply Nat.eqb_neq in Eq_ad. unfold MapGet. rewrite Eq_ad. apply H. auto. } } * exists (M1 prec_list a p). unfold state_correct_wrt_sign. intros a' p' H'. apply H in H'. destruct H' as [n [H1 H2]]. destruct (ad_eqb a a') eqn: Eq_ad. { apply Nat.eqb_eq in Eq_ad. subst. exists n. split. { unfold MapGet in H'. destruct (ad_eqb a a). - discriminate Eq_ad. - apply H. auto. } { apply pl_tl_length. auto. } } { apply Nat.eqb_neq in Eq_ad. unfold MapGet. rewrite Eq_ad. apply H. auto. }", "succ": true}]