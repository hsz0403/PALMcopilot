[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": ["unfold isPR."], "tactic": "intros L codeF codeArityF codeArityFIsPR codeArityFIsCorrect1 codeArityFIsCorrect2 Term Terms var apply.", "exn": "L is already used.", "type": "used_var", "handled": true}, {"ctx": ["unfold isPR."], "tactic": "intros L' codeF codeArityF codeArityFIsPR codeArityFIsCorrect1 codeArityFIsCorrect2 Term Terms var apply.", "exn": "codeF is already used.", "type": "used_var", "handled": true}, {"ctx": ["unfold isPR."], "tactic": "intros L' codeF' codeArityF codeArityFIsPR codeArityFIsCorrect1 codeArityFIsCorrect2 Term Terms var apply.", "exn": "codeArityF is already used.", "type": "used_var", "handled": true}, {"ctx": ["unfold isPR."], "tactic": "intros L' codeF' codeArityF' codeArityFIsPR codeArityFIsCorrect1 codeArityFIsCorrect2 Term Terms var apply.", "exn": "codeArityFIsPR is already used.", "type": "used_var", "handled": true}, {"ctx": ["unfold isPR."], "tactic": "intros L' codeF' codeArityF' codeArityFIsPR' codeArityFIsCorrect1 codeArityFIsCorrect2 Term Terms var apply.", "exn": "codeArityFIsCorrect1 is already used.", "type": "used_var", "handled": true}, {"ctx": ["unfold isPR."], "tactic": "intros L' codeF' codeArityF' codeArityFIsPR' codeArityFIsCorrect1' codeArityFIsCorrect2 Term Terms var apply.", "exn": "codeArityFIsCorrect2 is already used.", "type": "used_var", "handled": true}, {"ctx": ["unfold isPR."], "tactic": "intros L' codeF' codeArityF' codeArityFIsPR' codeArityFIsCorrect1' codeArityFIsCorrect2' Term Terms var apply.", "exn": "Term is already used.", "type": "used_var", "handled": true}, {"ctx": ["unfold isPR."], "tactic": "intros L' codeF' codeArityF' codeArityFIsPR' codeArityFIsCorrect1' codeArityFIsCorrect2' Term' Terms var apply.", "exn": "Terms is already used.", "type": "used_var", "handled": true}, {"ctx": ["unfold isPR."], "tactic": "intros L' codeF' codeArityF' codeArityFIsPR' codeArityFIsCorrect1' codeArityFIsCorrect2' Term' Terms' var apply.", "exn": "var is already used.", "type": "used_var", "handled": true}, {"ctx": ["unfold isPR."], "tactic": "intros L' codeF' codeArityF' codeArityFIsPR' codeArityFIsCorrect1' codeArityFIsCorrect2' Term' Terms' var' apply.", "exn": "apply is already used.", "type": "used_var", "handled": true}, {"ctx": ["unfold isPR."], "tactic": "intros L' codeF' codeArityF' codeArityFIsPR' codeArityFIsCorrect1' codeArityFIsCorrect2' Term' Terms' var' apply'.", "exn": "No product even after head-reduction.", "type": "no_product", "handled": true}, {"ctx": ["unfold isPR."], "tactic": "intros isPR1 isPR1CodeF v s.", "exn": "No product even after head-reduction.", "type": "no_product", "handled": true}, {"ctx": ["unfold isPR.", "unfold wellFormedTerms.", "unfold isPR in *."], "tactic": "intros n ts.", "exn": "No product even after head-reduction.", "type": "no_product", "handled": true}]}, "chat": [], "original": "unfold isPR. intros L codeF codeArityF codeArityFIsPR codeArityFIsCorrect1 codeArityFIsCorrect2 Term Terms var apply. intros isPR1 isPR1CodeF v s. unfold wellFormedTerms. unfold isPR in *. intros n ts. unfold substituteTerm. rewrite (freeVarTermApply L) with (f := apply L). apply compose1_1IsPR. apply subTermFunction.", "succ": false}]