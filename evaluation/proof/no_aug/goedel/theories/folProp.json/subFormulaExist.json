[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": ["intros f x v s nv.", "unfold substituteFormula, nv.", "destruct (Nat.eq_dec x v) as [eq | neq].", "-", "rewrite eq."], "tactic": "-", "exn": "Wrong bullet -: Current bullet - is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["intros f x v s nv.", "unfold substituteFormula, nv.", "destruct (Nat.eq_dec x v) as [eq | neq].", "-", "rewrite eq.", "shelve.", "-", "destruct (in_dec Nat.eq_dec x (freeVarTerm s)) as [xin | xnotin].", "+"], "tactic": "+", "exn": "Wrong bullet +: Current bullet + is not finished.", "type": "unfinished_bullet", "handled": true}]}, "chat": [], "original": "intros f x v s nv. unfold substituteFormula, nv. destruct (Nat.eq_dec x v) as [eq | neq]. - rewrite eq. reflexivity. - destruct (in_dec Nat.eq_dec x (freeVarTerm s)) as [xin | xnotin]. + rewrite (subFormulaForall f x nv s). * destruct (Nat.eq_dec x v) as [eq' | neq']. ++ apply (substituteFormulaImp f). apply (substituteFormulaNot). apply eq. ++ apply (substituteFormulaNot). apply (substituteFormulaForall (substituteFormula f x (var nv)) v s). * apply xin. + rewrite neq. destruct (Nat.eq_dec x v). * reflexivity. * apply (subFormulaForall f x nv s).", "succ": false}]