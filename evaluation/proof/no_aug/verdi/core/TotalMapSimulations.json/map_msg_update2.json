[{"history": {"proof": "intros f ms to from. unfold update2. extensionality a. extensionality b. destruct (name_eq_dec a (tot_map_name from)) as [Hfrom|Hfrom], (name_eq_dec b (tot_map_name to)) as [Hto|Hto]. - subst. sauto depth: 3. - sauto depth: 3. - sauto depth: 3. - sauto depth: 3.", "repairs": ["", "", "", "", "", "", "", "hammer", "", "hammer", "", "hammer", "", "hammer"], "exceptions": [{"ctx": ["intros f ms to from.", "unfold update2.", "extensionality a.", "extensionality b.", "destruct (name_eq_dec a (tot_map_name from)) as [Hfrom|Hfrom], (name_eq_dec b (tot_map_name to)) as [Hto|Hto].", "-", "subst."], "tactic": "-", "exn": "Wrong bullet -: Current bullet - is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["intros f ms to from.", "unfold update2.", "extensionality a.", "extensionality b.", "destruct (name_eq_dec a (tot_map_name from)) as [Hfrom|Hfrom], (name_eq_dec b (tot_map_name to)) as [Hto|Hto].", "-", "subst.", "shelve.", "-"], "tactic": "-", "exn": "Wrong bullet -: Current bullet - is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["intros f ms to from.", "unfold update2.", "extensionality a.", "extensionality b.", "destruct (name_eq_dec a (tot_map_name from)) as [Hfrom|Hfrom], (name_eq_dec b (tot_map_name to)) as [Hto|Hto].", "-", "subst.", "shelve.", "-", "shelve.", "-"], "tactic": "-", "exn": "Wrong bullet -: Current bullet - is not finished.", "type": "unfinished_bullet", "handled": true}]}, "chat": [], "original": "intros f ms to from. unfold update2. extensionality a. extensionality b. destruct (name_eq_dec a (tot_map_name from)) as [Hfrom|Hfrom], (name_eq_dec b (tot_map_name to)) as [Hto|Hto]. - subst. simpl. repeat f_equal. apply functional_extensionality. intros x. apply tot_map_in_in with (m:=tot_map_msg) in H0. + contradiction. + rewrite <- Hfrom. apply H0. unfold update. destruct (name_eq_dec x from); auto. - unfold tot_map_name_msgs. apply map_ext_in. intros [n msg] Hin. simpl. f_equal. apply in_tot_map_name with (m:=msg); auto. destruct Hin. + congruence. + apply in_map_iff in H. destruct H as [[n' msg'] [Heq Hin']]. inversion Heq. inversion H0. auto. - unfold tot_map_name_msgs. apply map_ext_in. intros [n msg] Hin. simpl. f_equal. apply in_tot_map_msg with (m:=msg); auto. destruct Hin. + inversion H. subst. f_equal. apply tot_map_name_inv_inverse. + apply in_map_iff in H. destruct H as [[n' msg'] [Heq Hin']]. inversion Heq. inversion H0. auto. - simpl. reflexivity.", "succ": true, "time": 6.050975472000005}]