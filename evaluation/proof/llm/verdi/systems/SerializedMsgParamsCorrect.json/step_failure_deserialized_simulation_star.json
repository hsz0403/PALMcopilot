[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": ["intros."], "tactic": ["destruct tr as [failed' tr].", ""], "exn": "Expects a disjunctive pattern with 2 branches.", "type": "num_branch", "handled": false}]}, "chat": [], "original": "intros. destruct tr as [failed' tr]. simpl in *. revert failed' net H. induction tr; intros. - exists tr. split. auto. apply filterMap_app. simpl. rewrite app_nil_r. symmetry. apply filterMap_app. simpl. rewrite app_nil_r. reflexivity. - simpl in *. destruct a. destruct y; try (destruct (IHtr _ _ H)); subst. + destruct (event_eq e (Event resume h d outputs)) eqn:?. subst. destruct (Net.dequeue_spec outputs). destruct (step_failure_init_is_input _ _ _ H) as [? [? [? [? ?]]]]. inv H1. subst. find_copy_apply_lem_hyp Net.step_any_reachable. specialize (H7 H2). eapply step_failure_star_trans; [| apply H7]; auto. repeat (split; auto). simpl.", "hammer_times": 2, "succ": false}]