[{"history": {"proof": "induction l; simpl; intros. contradiction. destruct H0. subst a. qsimpl time: 1 use: map_cons. hauto lq: on depth: 3use: map_cons.", "repairs": ["", "", "", "", "no_match_term", "hammer"], "exceptions": [{"ctx": ["induction l; simpl; intros.", "contradiction.", "destruct H0.", "subst a."], "tactic": "rewrite map_cons.", "exn": "The LHS of map_cons (map _ (_ :: _)) does not match any subterm of the goal", "type": "no_match_term", "handled": true}, {"ctx": ["induction l; simpl; intros.", "contradiction.", "destruct H0.", "subst a.", "qsimpl time: 1 use: map_cons.", "left."], "tactic": "rewrite map_cons.", "exn": "The LHS of map_cons (map _ (_ :: _)) does not match any subterm of the goal", "type": "no_match_term", "handled": true}, {"ctx": ["induction l; simpl; intros.", "contradiction.", "destruct H0.", "subst a.", "qsimpl time: 1 use: map_cons.", "left.", "qsimpl time: 1 use: map_cons."], "tactic": "right.", "exn": "Not an inductive goal with 2 constructors.", "type": "not_inductive_goal", "handled": true}, {"ctx": ["induction l; simpl; intros.", "contradiction.", "destruct H0.", "subst a.", "qsimpl time: 1 use: map_cons.", "left.", "qsimpl time: 1 use: map_cons.", "qsimpl time: 1 use: map_cons."], "tactic": "apply IHl.", "exn": "In environment H5 : forall (A B : Type) (f : A -> B) (x : A) (l : list A), f x :: map f l = f x :: map f l base_fst, base_snd : BaseParams multi_fst : MultiParams base_fst multi_snd : MultiParams base_snd base_map : BaseParamsTotalMap base_fst base_snd name_map : MultiParamsNameTotalMap multi_fst multi_snd msg_map : MultiParamsMsgTotalMap multi_fst multi_snd tot_map_output_injective : forall o o' : output, tot_map_output o = tot_map_output o' -> o = o' fail_fst : FailureParams multi_fst fail_snd : FailureParams multi_snd overlay_fst : NameOverlayParams multi_fst overlay_snd : NameOverlayParams multi_snd m : msg a0 : name a1 : msg l : list (name * msg) IHl : forall n : name, (forall nm : name * msg, In nm l -> snd nm = m) -> In (tot_map_name_inv n, m) l -> In (n, tot_map_msg m) (map (fun nm : name * msg => (tot_map_name (fst nm), tot_map_msg (snd nm))) l) n : name H0 : In (tot_map_name_inv n, m) l H : forall nm : name * msg, In nm l -> snd nm = m H2 : forall nm : name * msg, (a0, a1) = nm -> snd nm = m tot_reboot_eq0 : forall d : data, tot_map_data (reboot d) = reboot (tot_map_data d) tot_init_handlers_eq0 : forall n : name, tot_map_data (init_handlers n) = init_handlers (tot_map_name n) tot_net_handlers_eq0 : forall (me src : name) (m : msg) (st : data), tot_mapped_net_handlers me src m st = net_handlers (tot_map_name me) (tot_map_name src) (tot_map_msg m) (tot_map_data st) tot_input_handlers_eq0 : forall (me : name) (inp : input) (st : data), tot_mapped_input_handlers me inp st = input_handlers (tot_map_name me) (tot_map_input inp) (tot_map_data st) tot_map_name_inv_inverse0 : forall n : name, tot_map_name_inv (tot_map_name n) = n tot_map_name_inverse_inv0 : forall n : name, tot_map_name (tot_map_name_inv n) = n H3 : forall n n' : name, adjacent_to (tot_map_name n) (tot_map_name n') -> adjacent_to n n' H4 : forall n n' : name, adjacent_to n n' -> adjacent_to (tot_map_name n) (tot_map_name n') Unable to unify \"(fix In (a : name * msg) (l : list (name * msg)) {struct l} : Prop := match l with | [] => False | b :: m => b = a \\\\/ In a m end) (?M5955, tot_map_msg m) (map (fun nm : name * msg => (tot_map_name (fst nm), tot_map_msg (snd nm))) l)\" with \"(tot_map_name a0, tot_map_msg a1) = (n, tot_map_msg m)\".", "type": "cannot_unify", "handled": true}, {"ctx": ["induction l; simpl; intros.", "contradiction.", "destruct H0.", "subst a.", "qsimpl time: 1 use: map_cons.", "left.", "qsimpl time: 1 use: map_cons.", "qsimpl time: 1 use: map_cons.", "qsimpl time: 1 use: map_cons."], "tactic": "apply H.", "exn": "In environment H1 : forall (A B : Type) (f : A -> B) (x : A) (l : list A), f x :: map f l = f x :: map f l base_fst, base_snd : BaseParams multi_fst : MultiParams base_fst multi_snd : MultiParams base_snd base_map : BaseParamsTotalMap base_fst base_snd name_map : MultiParamsNameTotalMap multi_fst multi_snd msg_map : MultiParamsMsgTotalMap multi_fst multi_snd tot_map_output_injective : forall o o' : output, tot_map_output o = tot_map_output o' -> o = o' fail_fst : FailureParams multi_fst fail_snd : FailureParams multi_snd overlay_fst : NameOverlayParams multi_fst overlay_snd : NameOverlayParams multi_snd m : msg a0 : name a1 : msg l : list (name * msg) IHl : forall n : name, (forall nm : name * msg, In nm l -> snd nm = m) -> In (tot_map_name_inv n, m) l -> In (n, tot_map_msg m) (map (fun nm : name * msg => (tot_map_name (fst nm), tot_map_msg (snd nm))) l) n : name H0 : In (tot_map_name_inv n, m) l H : forall nm : name * msg, In nm l -> snd nm = m H2 : forall nm : name * msg, (a0, a1) = nm -> snd nm = m tot_reboot_eq0 : forall d : data, tot_map_data (reboot d) = reboot (tot_map_data d) tot_init_handlers_eq0 : forall n : name, tot_map_data (init_handlers n) = init_handlers (tot_map_name n) tot_net_handlers_eq0 : forall (me src : name) (m : msg) (st : data), tot_mapped_net_handlers me src m st = net_handlers (tot_map_name me) (tot_map_name src) (tot_map_msg m) (tot_map_data st) tot_input_handlers_eq0 : forall (me : name) (inp : input) (st : data), tot_mapped_input_handlers me inp st = input_handlers (tot_map_name me) (tot_map_input inp) (tot_map_data st) tot_map_name_inv_inverse0 : forall n : name, tot_map_name_inv (tot_map_name n) = n tot_map_name_inverse_inv0 : forall n : name, tot_map_name (tot_map_name_inv n) = n H3 : forall n n' : name, adjacent_to (tot_map_name n) (tot_map_name n') -> adjacent_to n n' H4 : forall n n' : name, adjacent_to n n' -> adjacent_to (tot_map_name n) (tot_map_name n') Unable to unify \"snd ?M6997 = m\" with \"(tot_map_name a0, tot_map_msg a1) = (n, tot_map_msg m)\".", "type": "cannot_unify", "handled": true}]}, "chat": [], "original": "induction l; simpl; intros. contradiction. destruct H0. subst a. rewrite map_cons. left. repeat rewrite <- surjective_pairing. auto. rewrite map_cons. right. apply IHl. intros. apply H. auto. auto.", "hammer_times": 2, "succ": true}]