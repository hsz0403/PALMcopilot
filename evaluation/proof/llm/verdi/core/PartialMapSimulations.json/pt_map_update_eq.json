[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": ["unfold update.", "intros."], "tactic": "destruct (eq_name h n).", "exn": "The reference eq_name was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["unfold update.", "intros."], "tactic": "rewrite tot_map_name_inverse_inv.", "exn": "The LHS of tot_map_name_inverse_inv (tot_map_name (tot_map_name_inv _)) does not match any subterm of the goal", "type": "no_match_term", "handled": true}, {"ctx": ["unfold update.", "intros.", "qsimpl time: 1 use: tot_map_name_inverse_inv."], "tactic": "reflexivity.", "exn": "In environment base_fst, base_snd : BaseParams multi_fst : MultiParams base_fst multi_snd : MultiParams base_snd name_map : MultiParamsNameTotalMap multi_fst multi_snd H : forall n : name, tot_map_name (tot_map_name_inv n) = n base_map : BaseParamsPartialMap base_fst base_snd msg_map : MultiParamsMsgPartialMap multi_fst multi_snd f : name -> data h : name d : data pt_init_handlers_eq0 : forall n : name, pt_map_data (init_handlers n) = init_handlers (tot_map_name n) pt_net_handlers_some0 : forall (me src : name) (m : msg) (st : data) (m' : msg), pt_map_msg m = Some m' -> pt_mapped_net_handlers me src m st = net_handlers (tot_map_name me) (tot_map_name src) m' (pt_map_data st) pt_net_handlers_none0 : forall (me src : name) (m : msg) (st : data) (out : list output) (st' : data) (ps : list (name * msg)), pt_map_msg m = None -> net_handlers me src m st = (out, st', ps) -> pt_map_data st' = pt_map_data st /\\\\ filterMap pt_map_name_msg ps = [] /\\\\ filterMap pt_map_output out = [] pt_input_handlers_some0 : forall (me : name) (inp : input) (st : data) (inp' : input), pt_map_input inp = Some inp' -> pt_mapped_input_handlers me inp st = input_handlers (tot_map_name me) inp' (pt_map_data st) tot_map_name_inv_inverse : forall n : name, tot_map_name_inv (tot_map_name n) = n H1 : forall (me : name) (inp : input) (st : data) (out : list output) (st' : data) (ps : list (name * msg)), pt_map_input inp = None -> input_handlers me inp st = (out, st', ps) -> filterMap pt_map_output out = [] H2 : forall (me : name) (inp : input) (st : data) (out : list output) (st' : data) (ps : list (name * msg)), pt_map_input inp = None -> input_handlers me inp st = (out, st', ps) -> filterMap pt_map_name_msg ps = [] H0 : forall (me : name) (inp : input) (st : data) (out : list output) (st' : data) (ps : list (name * msg)), pt_map_input inp = None -> input_handlers me inp st = (out, st', ps) -> pt_map_data st' = pt_map_data st nm : name Unable to unify \"if name_eq_dec nm (tot_map_name h) then pt_map_data d else pt_map_data (f (tot_map_name_inv nm))\" with \"pt_map_data (if name_eq_dec (tot_map_name_inv nm) h then d else f (tot_map_name_inv nm))\".", "type": "cannot_unify", "handled": true}, {"ctx": ["unfold update.", "intros.", "qsimpl time: 1 use: tot_map_name_inverse_inv."], "tactic": "rewrite tot_map_name_inverse_inv_neq.", "exn": "The reference tot_map_name_inverse_inv_neq was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["unfold update.", "intros.", "qsimpl time: 1 use: tot_map_name_inverse_inv."], "tactic": "reflexivity.", "exn": "In environment base_fst, base_snd : BaseParams multi_fst : MultiParams base_fst multi_snd : MultiParams base_snd name_map : MultiParamsNameTotalMap multi_fst multi_snd H : forall n : name, tot_map_name (tot_map_name_inv n) = n base_map : BaseParamsPartialMap base_fst base_snd msg_map : MultiParamsMsgPartialMap multi_fst multi_snd f : name -> data h : name d : data pt_init_handlers_eq0 : forall n : name, pt_map_data (init_handlers n) = init_handlers (tot_map_name n) pt_net_handlers_some0 : forall (me src : name) (m : msg) (st : data) (m' : msg), pt_map_msg m = Some m' -> pt_mapped_net_handlers me src m st = net_handlers (tot_map_name me) (tot_map_name src) m' (pt_map_data st) pt_net_handlers_none0 : forall (me src : name) (m : msg) (st : data) (out : list output) (st' : data) (ps : list (name * msg)), pt_map_msg m = None -> net_handlers me src m st = (out, st', ps) -> pt_map_data st' = pt_map_data st /\\\\ filterMap pt_map_name_msg ps = [] /\\\\ filterMap pt_map_output out = [] pt_input_handlers_some0 : forall (me : name) (inp : input) (st : data) (inp' : input), pt_map_input inp = Some inp' -> pt_mapped_input_handlers me inp st = input_handlers (tot_map_name me) inp' (pt_map_data st) tot_map_name_inv_inverse : forall n : name, tot_map_name_inv (tot_map_name n) = n H1 : forall (me : name) (inp : input) (st : data) (out : list output) (st' : data) (ps : list (name * msg)), pt_map_input inp = None -> input_handlers me inp st = (out, st', ps) -> filterMap pt_map_output out = [] H2 : forall (me : name) (inp : input) (st : data) (out : list output) (st' : data) (ps : list (name * msg)), pt_map_input inp = None -> input_handlers me inp st = (out, st', ps) -> filterMap pt_map_name_msg ps = [] H0 : forall (me : name) (inp : input) (st : data) (out : list output) (st' : data) (ps : list (name * msg)), pt_map_input inp = None -> input_handlers me inp st = (out, st', ps) -> pt_map_data st' = pt_map_data st nm : name Unable to unify \"if name_eq_dec nm (tot_map_name h) then pt_map_data d else pt_map_data (f (tot_map_name_inv nm))\" with \"pt_map_data (if name_eq_dec (tot_map_name_inv nm) h then d else f (tot_map_name_inv nm))\".", "type": "cannot_unify", "handled": true}]}, "chat": [], "original": "unfold update. intros. destruct (eq_name h n). - subst. rewrite tot_map_name_inverse_inv. reflexivity. - rewrite tot_map_name_inverse_inv_neq. reflexivity. auto.", "hammer_times": 3, "succ": false}]