[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": [], "tactic": "unfold lb_step_ordered_failure, pt_map_onet.", "exn": "Cannot coerce lb_step_ordered_failure to an evaluable reference.", "type": "not_evaluable", "handled": true}]}, "chat": [], "original": "unfold lb_step_ordered_failure, pt_map_onet. intros. invcs H0. - unfold map_lb_step_ordered_input in *. repeat break_let. find_inversion. do_in_app. break_and. repeat find_rewrite. break_if; try congruence. repeat find_inversion. normalize_input_output. destruct (pt_map_name n) eqn:?; simpl in *; try congruence. rewrite map_app. split. + rewrite map_app. constructor 1 with (map tot_map_name fl). * rewrite tot_map_onet_map_tot_map_name_onet. auto. * rewrite pt_map_label_tot_map_label. auto. * rewrite <- tot_map_trace_of_map_tot_map_name_in. auto. + rewrite <- map_app. simpl. rewrite <- map_app. repeat find_rewrite. break_if; try congruence. repeat find_inversion. simpl in *. congruence. - unfold map_lb_step_ordered_input in *. repeat break_let. find_inversion. do_in_app. break_and. repeat find_rewrite. break_if; try congruence. repeat find_inversion. simpl in *. rewrite tot_map_onet_map_tot_map_name_onet. split. + constructor 1 with (map tot_map_name fl); auto. rewrite pt_map_label_tot_map_label; auto. + repeat find_rewrite. repeat find_inversion. simpl in *. congruence. - unfold map_lb_step_ordered_input in *. repeat break_let. find_inversion. do_in_app. break_and. repeat find_rewrite. break_if; try congruence. repeat find_inversion. simpl in *. rewrite tot_map_onet_map_tot_map_name_onet. split. + constructor 1 with (map tot_map_name fl); auto. rewrite pt_map_label_tot_map_label; auto. + repeat find_rewrite. repeat find_inversion. simpl in *. congruence. - unfold map_lb_step_ordered_input in *. repeat break_let. find_inversion. do_in_app. break_and. repeat find_rewrite. break_if; try congruence. repeat find_inversion. simpl in *. rewrite tot_map_onet_map_tot_map_name_onet. split. + constructor 1 with (map tot_map_name fl); auto. rewrite pt_map_label_tot_map_label; auto. + repeat find_rewrite. repeat find_inversion. simpl in *. congruence. - repeat find_apply_lem_hyp in_onet_name. unfold map_lb_step_ordered_input in *. repeat break_let. find_inversion. do_in_app. break_and. repeat find_rewrite. break_if; try congruence. repeat find_inversion. simpl in *. destruct (pt_map_name n) eqn:?; simpl in *; try congruence. rewrite map_app. split. + rewrite map_app. constructor 1 with (map tot_map_name fl). * rewrite tot_map_onet_map_tot_map_name_onet. auto. * rewrite pt_map_label_tot_map_label. auto. * rewrite <- tot_map_trace_of_map_tot_map_name_in. auto. + rewrite <- map_app. simpl. rewrite <- map_app. repeat find_rewrite. break_if; try congruence. repeat find_inversion. simpl in *. congruence. - repeat find_apply_lem_hyp in_onet_name. unfold map_lb_step_ordered_input in *. repeat break_let. find_inversion. do_in_app. break_and. repeat find_rewrite. break_if; try congruence. repeat find_inversion. simpl in *. destruct (pt_map_name n) eqn:?; simpl in *; try congruence. rewrite map_app. split. + rewrite map_app. constructor 1 with (map tot_map_name fl). * rewrite tot_map_onet_map_tot_map_name_onet. auto. * rewrite pt_map_label_tot_map_label. auto. * rewrite <- tot_map_trace_of_map_tot_map_name_in. auto. + rewrite <- map_app. simpl. rewrite <- map_app. repeat find_rewrite. break_if; try congruence. repeat find_inversion. simpl in *. congruence. - repeat find_apply_lem_hyp in_onet_name. unfold map_lb_step_ordered_input in *. repeat break_let. find_inversion. do_in_app. break_and. repeat find_rewrite. break_if; try congruence. repeat find_inversion. simpl in *. destruct (pt_map_name n) eqn:?; simpl in *; try congruence. rewrite map_app. split. + rewrite map_app. constructor 1 with (map tot_map_name fl). * rewrite tot_map_onet_map_tot_map_name_onet. auto. * rewrite pt_map_label_tot_map_label. auto. * rewrite <- tot_map_trace_of_map_tot_map_name_in. auto. + rewrite <- map_app. simpl. rewrite <- map_app. repeat find_rewrite. break_if; try congruence. repeat find_inversion. simpl in *. congruence. - repeat find_apply_lem_hyp in_onet_name. unfold map_lb_step_ordered_input in *. repeat break_let. find_inversion. do_in_app. break_and.", "hammer_times": 1, "succ": false}]