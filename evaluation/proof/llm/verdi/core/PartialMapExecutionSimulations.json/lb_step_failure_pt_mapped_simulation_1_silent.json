[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": [], "tactic": "unfold lb_step_failure.", "exn": "Cannot coerce lb_step_failure to an evaluable reference.", "type": "not_evaluable", "handled": true}]}, "chat": [], "original": "unfold lb_step_failure. intros. invcs H0. - split. * simpl in *. unfold pt_map_net. repeat break_let. icase r. + simpl in *. unfold do_input in *. repeat break_match. icase x. inversion H. simpl. repeat find_rewrite. auto. inversion H0. simpl. repeat find_rewrite. auto. + simpl in *. find_apply_lem_hyp do_output_tot_map_name. repeat break_let. unfold do_output, pt_map_trace_occ. repeat break_match; try solve [find_inversion; discriminate]. inversion H; inversion H0; subst. repeat find_rewrite. replace (find_pt_name net s) with (tot_map_name n0). find_rewrite. do 2 find_injection. auto. unfold find_pt_name. rewrite map_app. simpl in *. find_inversion. rewrite in_app_iff in *. intuition; subst; find_apply_lem_hyp in_map_iff; break_exists; break_and; find_inversion; auto. * simpl in *. unfold pt_map_net. repeat break_let. replace (filterMap trace_non_empty_out (filterMap pt_map_trace_occ (map (fun x : act => act_net_input (tot_map_name (fst x)) (inr (map tot_map_output (snd x)))) l))) with ([]: (list trace)). simpl in *. unfold do_input in *. repeat break_match. + inversion H0. simpl. repeat find_rewrite. replace (filterMap trace_non_empty_out (filterMap pt_map_trace_occ (map (fun x : act => act_net_input (tot_map_name (fst x)) (inr (map tot_map_output (snd x)))) l))) with ([]: (list trace)). auto. auto. + inversion H. simpl. repeat find_rewrite. replace (filterMap trace_non_empty_out (filterMap pt_map_trace_occ (map (fun x : act => act_net_input (tot_map_name (fst x)) (inr (map tot_map_output (snd x)))) l))) with ([]: (list trace)). auto. auto. + unfold do_input in *. repeat break_match. * inversion H0. simpl. repeat find_rewrite. replace (filterMap trace_non_empty_out (filterMap pt_map_trace_occ (map (fun x : act => act_net_input (tot_map_name (fst x)) (inr (map tot_map_output (snd x)))) l))) with ([]: (list trace)). auto. auto. * inversion H. simpl. repeat find_rewrite. replace (filterMap trace_non_empty_out (filterMap pt_map_trace_occ (map (fun x : act => act_net_input (tot_map_name (fst x)) (inr (map tot_map_output (snd x)))) l))) with ([]: (list trace)). auto. auto. * inversion H. inversion H0. simpl. repeat find_rewrite. repeat find_apply_lem_hyp do_output_tot_map_name. repeat break_and. repeat find_rewrite. auto. - split. * simpl in *. unfold pt_map_net. repeat break_let. simpl in *. unfold do_input in *. repeat break_match. + inversion H0. simpl. repeat find_rewrite. replace (filterMap trace_non_empty_out (filterMap pt_map_trace_occ (map (fun x : act => act_net_input (tot_map_name (fst x)) (inr (map tot_map_output (snd x)))) l))) with ([]: (list trace)). auto. auto. + inversion H. simpl. repeat find_rewrite. replace (filterMap trace_non_empty_out (filterMap pt_map_trace_occ (map (fun x : act => act_net_input (tot_map_name (fst x)) (inr (map tot_map_output (snd x)))) l))) with ([]: (list trace)). auto. auto. + unfold do_input in *. repeat break_match. * inversion H0. simpl. repeat find_rewrite. replace (filterMap trace_non_empty_out (filterMap pt_map_trace_occ (map (fun x : act => act_net_input (tot_map_name (fst x)) (inr (map tot_map_output (snd x)))) l))) with ([]: (list trace)). auto. auto. * inversion H. simpl. repeat find_rewrite. replace (filterMap trace_non_empty_out (filterMap pt_map_trace_occ (map (fun x : act => act_net_input (tot_map_name (fst x)) (inr (map tot_map_output (snd x)))) l))) with ([]: (list trace)). auto. auto. * inversion H. inversion H0. simpl. repeat find_rewrite. repeat find_apply_lem_hyp do_output_tot_map_name. repeat break_and. repeat find_rewrite. auto. * find_inversion. auto. * find_inversion. auto. * find_inversion. auto. * find_inversion. auto. * find_inversion. auto. * find_inversion. auto. * find_inversion. auto. * find_inversion. auto. * find_inversion. auto. * find_inversion. auto. * find_inversion. auto. * find_inversion. auto. * find_inversion. auto. * find_inversion. auto. * find_inversion. auto. * find_inversion.", "hammer_times": 1, "succ": false}]