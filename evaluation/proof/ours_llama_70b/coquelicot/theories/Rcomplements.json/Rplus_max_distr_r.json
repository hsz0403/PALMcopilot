[{"history": {"proof": "scongruence use: Rplus_max_distr_l, Rplus_comm unfold: Rmax.", "repairs": [], "exceptions": [{"ctx": ["intros a b c."], "tactic": "rewrite Rplus_max_distr_l.", "exn": "The LHS of Rplus_max_distr_l (_ + Rmax _ _) does not match any subterm of the goal", "type": "no_match_term", "handled": true}, {"ctx": ["intros a b c.", "qsimpl time: 1 use: Rplus_max_distr_l."], "tactic": "reflexivity.", "exn": "In environment H : forall a b c : R, a + Rmax b c = Rmax (a + b) (a + c) a, b, c : R Unable to unify \"Rmax (b + a) (c + a)\" with \"Rmax b c + a\".", "type": "cannot_unify", "handled": true}]}, "chat": [{"role": "user", "content": "I will give you a Coq proof state, including both hypotheses and a specific goal and your need to prove it. Your response should be a singular code block of Coq proof starting with \"```coq\n\", ending with \"Qed.```\", without any additional explanation or commentary. Follow to these guidelines:\nIntroduce variables using unique names to avoid any conflicts.\nKeep each command distinct and separated, avoid concatenations like ';' or '[cmd|cmd]'.\nOrganize your proof with bullets like '-', '+', and '*' instead of braces ({, }). Shift to their double symbols like '--' and '++', when necessary.\nEffectively use given premises, follow the syntax and structure demonstrated in the examples provided.\n\nExample 1:\n\nHypotheses:\nn, m: nat\nIHn: m + n = n + m\n\nGoal:\nm + S n = S n + m\n\nProof:\n```coq\nsimpl. rewrite <- IHn. auto.\nQed.```\n\nExample 2:\nHypotheses:\n\nGoal:\nforall n m : nat, m + n = n + m\n\n```coq\nintros n m. induction n.\n- simpl. auto.\n- simpl. rewrite <- IHn. auto.\nQed.```\n\nSolve This Proof State:\n\nHypotheses:\n\n\nGoal:\nforall a b c : R, Rmax b c + a = Rmax (b + a) (c + a)\n\nPremises:\n*** [ R : Set ]\nRmax = fun x y : R => if Rle_dec x y then y else x : R -> R -> R Argument scopes are [R_scope R_scope]\nMVT_abs : forall (f f' : R -> R) (a b : R), (forall c : R, Rmin a b <= c <= Rmax a b -> derivable_pt_lim f c (f' c)) -> exists c : R, Rabs (f b - f a) = Rabs (f' c) * Rabs (b - a) /\\ Rmin a b <= c <= Rmax a b\nRplus_max_distr_l : forall a b c : R, a + Rmax b c = Rmax (a + b) (a + c)\nMVT_cor2 : forall (f f' : R -> R) (a b : R), a < b -> (forall c : R, a <= c <= b -> derivable_pt_lim f c (f' c)) -> exists c : R, f b - f a = f' c * (b - a) /\\ a < c < b\nRdiv_plus_distr : forall a b c : R, (a + b) / c = a / c + b / c\nRmax_assoc : forall a b c : R, Rmax a (Rmax b c) = Rmax (Rmax a b) c\nRminmax : forall a b : R, Rmin a b <= Rmax a b\nRabs_triang : forall a b : R, Rabs (a + b) <= Rabs a + Rabs b\nRiemann_integrable_ext : forall (f g : R -> R) (a b : R), (forall x : R, Rmin a b <= x <= Rmax a b -> f x = g x) -> Riemann_integrable f a b -> Riemann_integrable g a b\nboule_of_interval : forall x y : R, x < y -> {c : R & {r : posreal | c - r = x /\\ c + r = y}}\nStepFun_P28 : forall (a b l : R) (f g : StepFun a b), IsStepFun (fun x : R => f x + l * g x) a b\nBinNatDef.N.div_eucl = fun a b : N => match a with | 0%N => (0%N, 0%N) | N.pos na => match b with | 0%N => (0%N, a) | N.pos _ => BinNatDef.N.pos_div_eucl na b end end : N -> N -> N * N Argument scopes are [N_scope N_scope]\nRiemannInt_P12 : forall (f g : R -> R) (a b l : R) (pr1 : Riemann_integrable f a b) (pr2 : Riemann_integrable g a b) (pr3 : Riemann_integrable (fun x : R => f x + l * g x) a b), a <= b -> RiemannInt pr3 = RiemannInt pr1 + l * RiemannInt pr2\nRlt_Rminus : forall a b : R, a < b -> 0 < b - a\nphi_sequence_prop : forall (un : nat -> posreal) (f : R -> R) (a b : R) (pr : Riemann_integrable f a b) (N : nat), {psi : StepFun a b | (forall t : R, Rmin a b <= t <= Rmax a b -> Rabs (f t - phi_sequence un pr N t) <= psi t) /\\ Rabs (RiemannInt_SF psi) < un N}\nsubdivision : forall a b : R, StepFun a b -> Rlist\nRiemannInt_SF : forall a b : R, StepFun a b -> R\nsubdivision_val : forall a b : R, StepFun a b -> Rlist\nRiemann_integrable = fun (f : R -> R) (a b : R) => forall eps : posreal, {phi : StepFun a b & {psi : StepFun a b | (forall t : R, Rmin a b <= t <= Rmax a b -> Rabs (f t - phi t) <= psi t) /\\ Rabs (RiemannInt_SF psi) < eps}} : (R -> R) -> R -> R -> Type Argument scopes are [function_scope R_scope R_scope]\nfe : forall a b : R, StepFun a b -> R -> R\nmkStepFun : forall (a b : R) (fe : R -> R), IsStepFun fe a b -> StepFun a b\npre : forall (a b : R) (s : StepFun a b), IsStepFun s a b\nStepFun_P6 : forall (f : R -> R) (a b : R), IsStepFun f a b -> IsStepFun f b a\nStepFun_P1 : forall (a b : R) (f : StepFun a b), adapted_couple f a b (subdivision f) (subdivision_val f)\nphi_sequence : (nat -> posreal) -> forall (f : R -> R) (a b : R), Riemann_integrable f a b -> nat -> StepFun a b\nStepFun_P32 : forall (a b : R) (f : StepFun a b), IsStepFun (fun x : R => Rabs (f x)) a b"}, {"role": "assistant", "content": "```coq\nintros a b c.\nrewrite Rplus_max_distr_l.\nreflexivity.\nQed.```"}], "original": "intros a b c. rewrite Rplus_max_distr_l. reflexivity.", "succ": true}]