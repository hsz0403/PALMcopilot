[{"history": {"proof": "intros. rewrite zip_rcons. reflexivity. sfirstorder depth: 3.", "repairs": ["", "", "", "hammer"], "exceptions": []}, "chat": [{"role": "user", "content": "I will give you a Coq proof state, including both hypotheses and a specific goal and your need to prove it. Your response should be a singular code block of Coq proof starting with \"```coq\n\", ending with \"Qed.```\", without any additional explanation or commentary. Follow to these guidelines:\nIntroduce variables using unique names to avoid any conflicts.\nKeep each command distinct and separated, avoid concatenations like ';' or '[cmd|cmd]'.\nOrganize your proof with bullets like '-', '+', and '*' instead of braces ({, }). Shift to their double symbols like '--' and '++', when necessary.\nEffectively use given premises, follow the syntax and structure demonstrated in the examples provided.\n\nExample 1:\n\nHypotheses:\nn, m: nat\nIHn: m + n = n + m\n\nGoal:\nm + S n = S n + m\n\nProof:\n```coq\nsimpl. rewrite <- IHn. auto.\nQed.```\n\nExample 2:\nHypotheses:\n\nGoal:\nforall n m : nat, m + n = n + m\n\n```coq\nintros n m. induction n.\n- simpl. auto.\n- simpl. rewrite <- IHn. auto.\nQed.```\n\nSolve This Proof State:\n\nHypotheses:\nS: Type\nT: Type\ns: seq S\nt: seq T\nhs: S\nht: T\n\nGoal:\nsize s = size t -> zip (rcons s hs) (rcons t ht) = rcons (zip s t) (hs, ht)\n\nPremises:\nzip = fun S T : Type => fix zip (s : seq S) (t : seq T) {struct t} : seq (S * T) := match s with | [::] => [::] | x :: s' => match t with | [::] => [::] | y :: t' => (x, y) :: zip s' t' end end : forall S T : Type, seq S -> seq T -> seq (S * T) Arguments S, T are implicit and maximally inserted Argument scopes are [type_scope type_scope seq_scope seq_scope]\nNotation seq := list\nrcons = fun T : Type => fix rcons (s : seq T) (z : T) {struct s} : seq T := match s with | [::] => [:: z] | x :: s' => x :: rcons s' z end : forall T : Type, seq T -> T -> seq T Argument T is implicit and maximally inserted Argument scopes are [type_scope seq_scope _]\nsize = fun T : Type => fix size (s : seq T) : nat := match s with | [::] => 0%nat | _ :: s' => S (size s') end : forall T : Type, seq T -> nat Argument T is implicit and maximally inserted Argument scopes are [type_scope seq_scope]\nzip_rcons : forall (S T : Type) (s : seq S) (t : seq T) (x : S) (y : T), size s = size t -> zip (rcons s x) (rcons t y) = rcons (zip s t) (x, y)\nrev_zip : forall (S T : Type) (s : seq S) (t : seq T), size s = size t -> rev (zip s t) = zip (rev s) (rev t)\nsize2_zip : forall (S T : Type) (s : seq S) (t : seq T), ssrnat.leq (size t) (size s) -> size (zip s t) = size t\nnth_zip : forall (S T : Type) (x : S) (y : T) (s : seq S) (t : seq T) (i : nat), size s = size t -> nth (x, y) (zip s t) i = (nth x s i, nth y t i)\nsize1_zip : forall (S T : Type) (s : seq S) (t : seq T), ssrnat.leq (size s) (size t) -> size (zip s t) = size s\nbehead_rcons : forall (s0 : seq ?T) (t0 : ?T), (0 < size s0)%nat -> behead (rcons s0 t0) = rcons (behead s0) t0 where ?T : [S : Type T : Type s : seq S t : seq T hs : S ht : T |- Type]\nunzip2_zip : forall (S T : Type) (s : seq S) (t : seq T), ssrnat.leq (size t) (size s) -> unzip2 (zip s t) = t\npairmap_rcons : forall (f : ?T -> ?T -> ?T0) (s0 : seq ?T) (h0 h x0 : ?T), pairmap f x0 (rcons (rcons s0 h0) h) = rcons (pairmap f x0 (rcons s0 h0)) (f h0 h) where ?T : [S : Type T : Type s : seq S t : seq T hs : S ht : T |- Type] ?T0 : [S : Type T : Type s : seq S t : seq T hs : S ht : T |- Type]\nsize_zip : forall (S T : Type) (s : seq S) (t : seq T), size (zip s t) = ssrnat.minn (size s) (size t)\nseq_ind2 : forall P : seq ?S -> seq ?T -> Type, P [::] [::] -> (forall (x : ?S) (y : ?T) (s0 : seq ?S) (t0 : seq ?T), size s0 = size t0 -> P s0 t0 -> P (x :: s0) (y :: t0)) -> forall (s0 : seq ?S) (t0 : seq ?T), size s0 = size t0 -> P s0 t0 where ?S : [S : Type T : Type s : seq S t : seq T hs : S ht : T |- Type] ?T : [S : Type T : Type s : seq S t : seq T hs : S ht : T |- Type]\nsize_rcons_pos : forall (s0 : seq ?T) (t0 : ?T), (0 < size (rcons s0 t0))%nat where ?T : [S : Type T : Type s : seq S t : seq T hs : S ht : T |- Type]\nreshape_rcons : forall (T : Type) (s : seq T) (sh : seq nat) (n : nat), let m := sumn sh in ssrnat.addn m n = size s -> reshape (rcons sh n) s = rcons (reshape sh (take m s)) (drop m s)\nzip_cat : forall (S T : Type) (s1 s2 : seq S) (t1 t2 : seq T), size s1 = size t1 -> zip (s1 ++ s2) (t1 ++ t2) = zip s1 t1 ++ zip s2 t2\nall2E : forall (S T : Type) (r : S -> T -> bool) (s : seq S) (t : seq T), all2 r s t = eqtype.eq_op (size s) (size t) && all (pred_of_simpl (T:=S * T) (SimplPred (fun xy : S * T => r (fst xy) (snd xy)))) (zip s t)\nzip_cons : forall (hs0 : ?S) (ht0 : ?T) (s0 : seq ?S) (t0 : seq ?T), zip (hs0 :: s0) (ht0 :: t0) = (hs0, ht0) :: zip s0 t0 where ?S : [S : Type T : Type s : seq S t : seq T hs : S ht : T |- Type] ?T : [S : Type T : Type s : seq S t : seq T hs : S ht : T |- Type]\nunzip1_zip : forall (S T : Type) (s : seq S) (t : seq T), ssrnat.leq (size s) (size t) -> unzip1 (zip s t) = s\nsize_rcons : forall (T : Type) (s : seq T) (x : T), size (rcons s x) = Datatypes.S (size s)\nfoldr_rcons : forall (f : ?T0 -> ?T -> ?T) (x0 : ?T) (s0 : seq ?T0) (t0 : ?T0), foldr f x0 (rcons s0 t0) = foldr f (f t0 x0) s0 where ?T : [S : Type T : Type s : seq S t : seq T hs : S ht : T |- Type] ?T0 : [S : Type T : Type s : seq S t : seq T hs : S ht : T |- Type]\nfoldl_rcons : forall (f : ?T -> ?T0 -> ?T) (x0 : ?T) (s0 : seq ?T0) (t0 : ?T0), foldl f x0 (rcons s0 t0) = f (foldl f x0 s0) t0 where ?T : [S : Type T : Type s : seq S t : seq T hs : S ht : T |- Type] ?T0 : [S : Type T : Type s : seq S t : seq T hs : S ht : T |- Type]\nnth_zip_cond : forall (S0 T : Type) (p : S0 * T) (s : seq S0) (t : seq T) (i : nat), nth p (zip s t) i = (if ssrnat.leq (Datatypes.S i) (size (zip s t)) then (nth (fst p) s i, nth (snd p) t i) else p)\nrev_cat : forall (T : Type) (s t : seq T), rev (s ++ t) = rev t ++ rev s\nhead_rcons : forall (x0 : ?T) (s0 : seq ?T) (t0 : ?T), head x0 (rcons s0 t0) = head t0 s0 where ?T : [S : Type T : Type s : seq S t : seq T hs : S ht : T |- Type]\nrcons_injr : forall s0 : seq ?T, ssrfun.injective (rcons s0) where ?T : [S : Type T : Type s : seq S t : seq T hs : S ht : T |- Type]\nheadI : forall (T : Type) (s : seq T) (x : T), rcons s x = head x s :: behead (rcons s x)\nsize0nil : forall (T : Type) (s : seq T), size s = 0%nat -> s = [::]"}, {"role": "assistant", "content": "```coq\nintros. rewrite zip_rcons. reflexivity.\nQed.```"}], "original": "intros. rewrite zip_rcons. reflexivity.", "succ": true}]