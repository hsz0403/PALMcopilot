[{"history": {"proof": "reflexivity.", "repairs": [""], "exceptions": []}, "chat": [{"role": "user", "content": "I will give you a Coq proof state, including both hypotheses and a specific goal and your need to prove it. Your response should be a singular code block of Coq proof starting with \"```coq\n\", ending with \"Qed.```\", without any additional explanation or commentary. Follow to these guidelines:\nIntroduce variables using unique names to avoid any conflicts.\nKeep each command distinct and separated, avoid concatenations like ';' or '[cmd|cmd]'.\nOrganize your proof with bullets like '-', '+', and '*' instead of braces ({, }). Shift to their double symbols like '--' and '++', when necessary.\nEffectively use given premises, follow the syntax and structure demonstrated in the examples provided.\n\nExample 1:\n\nHypotheses:\nn, m: nat\nIHn: m + n = n + m\n\nGoal:\nm + S n = S n + m\n\nProof:\n```coq\nsimpl. rewrite <- IHn. auto.\nQed.```\n\nExample 2:\nHypotheses:\n\nGoal:\nforall n m : nat, m + n = n + m\n\n```coq\nintros n m. induction n.\n- simpl. auto.\n- simpl. rewrite <- IHn. auto.\nQed.```\n\nSolve This Proof State:\n\nHypotheses:\nS: Type\nT: Type\nhs: S\nht: T\ns: seq S\nt: seq T\n\nGoal:\nzip (hs :: s) (ht :: t) = (hs, ht) :: zip s t\n\nPremises:\nzip = fun S T : Type => fix zip (s : seq S) (t : seq T) {struct t} : seq (S * T) := match s with | [::] => [::] | x :: s' => match t with | [::] => [::] | y :: t' => (x, y) :: zip s' t' end end : forall S T : Type, seq S -> seq T -> seq (S * T) Arguments S, T are implicit and maximally inserted Argument scopes are [type_scope type_scope seq_scope seq_scope]\nNotation seq := list\nrev_zip : forall (S T : Type) (s : seq S) (t : seq T), size s = size t -> rev (zip s t) = zip (rev s) (rev t)\nzip_unzip : forall (S T : Type) (s : seq (S * T)), zip (unzip1 s) (unzip2 s) = s\nzip_cat : forall (S T : Type) (s1 s2 : seq S) (t1 t2 : seq T), size s1 = size t1 -> zip (s1 ++ s2) (t1 ++ t2) = zip s1 t1 ++ zip s2 t2\nzip_rcons : forall (S T : Type) (s : seq S) (t : seq T) (x : S) (y : T), size s = size t -> zip (rcons s x) (rcons t y) = rcons (zip s t) (x, y)\nrcons_cons : forall (T : Type) (x : T) (s : seq T) (z : T), rcons (x :: s) z = x :: rcons s z\nlastI : forall (T : Type) (x : T) (s : seq T), x :: s = rcons (seq.belast x s) (last x s)\nrot1_cons : forall (T : Type) (x : T) (s : seq T), rot 1 (x :: s) = rcons s x\nunzip1_zip : forall (S T : Type) (s : seq S) (t : seq T), ssrnat.leq (size s) (size t) -> unzip1 (zip s t) = s\nrev_cons : forall (T : Type) (x : T) (s : seq T), rev (x :: s) = rcons (rev s) x\nsize1_zip : forall (S T : Type) (s : seq S) (t : seq T), ssrnat.leq (size s) (size t) -> size (zip s t) = size s\nsize_zip : forall (S T : Type) (s : seq S) (t : seq T), size (zip s t) = ssrnat.minn (size s) (size t)\nunzip2_zip : forall (S T : Type) (s : seq S) (t : seq T), ssrnat.leq (size t) (size s) -> unzip2 (zip s t) = t\nsize2_zip : forall (S T : Type) (s : seq S) (t : seq T), ssrnat.leq (size t) (size s) -> size (zip s t) = size t\ndrop_nth : forall (T : Type) (x0 : T) (n : nat) (s : seq T), ssrnat.leq (Datatypes.S n) (size s) -> drop n s = nth x0 s n :: drop (Datatypes.S n) s\ncat1s : forall (T : Type) (x : T) (s : seq T), [:: x] ++ s = x :: s\nperm_consP : reflect (exists (i : nat) (u : seq (eqtype.Equality.sort ?T)), rot i ?t = ?x :: u /\\ perm_eq u ?s) (perm_eq ?t (?x :: ?s)) where ?T : [S : Type T : Type hs : S ht : T s : seq S t : seq T |- eqtype.Equality.type] ?x : [S : Type T : Type hs : S ht : T s : seq S t : seq T |- eqtype.Equality.sort ?T] ?s : [S : Type T : Type hs : S ht : T s : seq S t : seq T |- seq (eqtype.Equality.sort ?T)] ?t : [S : Type T : Type hs : S ht : T s : seq S t : seq T |- seq (eqtype.Equality.sort ?T)]\nrotr1_rcons : forall (T : Type) (x : T) (s : seq T), rotr 1 (rcons s x) = x :: s\nrev_rcons : forall (T : Type) (s : seq T) (x : T), rev (rcons s x) = x :: rev s\nall2E : forall (S T : Type) (r : S -> T -> bool) (s : seq S) (t : seq T), all2 r s t = eqtype.eq_op (size s) (size t) && all (pred_of_simpl (T:=S * T) (SimplPred (fun xy : S * T => r (fst xy) (snd xy)))) (zip s t)\nheadI : forall (T : Type) (s : seq T) (x : T), rcons s x = head x s :: behead (rcons s x)\nseq_ind2 : forall P : seq ?S -> seq ?T -> Type, P [::] [::] -> (forall (x : ?S) (y : ?T) (s0 : seq ?S) (t0 : seq ?T), size s0 = size t0 -> P s0 t0 -> P (x :: s0) (y :: t0)) -> forall (s0 : seq ?S) (t0 : seq ?T), size s0 = size t0 -> P s0 t0 where ?S : [S : Type T : Type hs : S ht : T s : seq S t : seq T |- Type] ?T : [S : Type T : Type hs : S ht : T s : seq S t : seq T |- Type]\nbelast_rcons : forall (T : Type) (x : T) (s : seq T) (z : T), seq.belast x (rcons s z) = x :: s\nseq.belast = fun T : Type => fix belast (x : T) (s : seq T) {struct s} : seq T := match s with | [::] => [::] | x' :: s' => x :: belast x' s' end : forall T : Type, T -> seq T -> seq T Argument T is implicit and maximally inserted Argument scopes are [type_scope _ seq_scope]\nrcons = fun T : Type => fix rcons (s : seq T) (z : T) {struct s} : seq T := match s with | [::] => [:: z] | x :: s' => x :: rcons s' z end : forall T : Type, seq T -> T -> seq T Argument T is implicit and maximally inserted Argument scopes are [type_scope seq_scope _]\nList.app_comm_cons : forall (A : Type) (x y : seq A) (a : A), a :: (x ++ y)%list = ((a :: x)%SEQ ++ y)%list"}, {"role": "assistant", "content": "```coq\nreflexivity.\nQed.```"}], "original": "reflexivity.", "succ": true}]