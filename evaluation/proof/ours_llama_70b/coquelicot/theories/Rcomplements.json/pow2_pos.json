[{"history": {"proof": "induction n. - simpl. auto. - simpl. sfirstorder depth: 3.", "repairs": ["", "", "", "", "", "", "hammer"], "exceptions": []}, "chat": [{"role": "user", "content": "I will give you a Coq proof state, including both hypotheses and a specific goal and your need to prove it. Your response should be a singular code block of Coq proof starting with \"```coq\n\", ending with \"Qed.```\", without any additional explanation or commentary. Follow to these guidelines:\nIntroduce variables using unique names to avoid any conflicts.\nKeep each command distinct and separated, avoid concatenations like ';' or '[cmd|cmd]'.\nOrganize your proof with bullets like '-', '+', and '*' instead of braces ({, }). Shift to their double symbols like '--' and '++', when necessary.\nEffectively use given premises, follow the syntax and structure demonstrated in the examples provided.\n\nExample 1:\n\nHypotheses:\nn, m: nat\nIHn: m + n = n + m\n\nGoal:\nm + S n = S n + m\n\nProof:\n```coq\nsimpl. rewrite <- IHn. auto.\nQed.```\n\nExample 2:\nHypotheses:\n\nGoal:\nforall n m : nat, m + n = n + m\n\n```coq\nintros n m. induction n.\n- simpl. auto.\n- simpl. rewrite <- IHn. auto.\nQed.```\n\nSolve This Proof State:\n\nHypotheses:\nn: nat\n\nGoal:\n(0 < pow2 n)%nat\n\nPremises:\npow2 = fix pow2 (n : nat) : nat := match n with | 0%nat => 1%nat | S n0 => (2 * pow2 n0)%nat end : nat -> nat Argument scope is [nat_scope]\nlt_pred_n_n : forall n : nat, (0 < n)%nat -> (Init.Nat.pred n < n)%nat\nNat.add_pos_pos : forall n m : nat, (0 < n)%nat -> (0 < m)%nat -> (0 < n + m)%nat\nNat.lt_0_mul' : forall n m : nat, (0 < n * m)%nat < -> (0 < n)%nat /\\ (0 < m)%nat\nNat.add_pos_cases : forall n m : nat, (0 < n + m)%nat -> (0 < n)%nat \\/ (0 < m)%nat\nNat.mul_pos_cancel_r : forall n m : nat, (0 < m)%nat -> (0 < n * m)%nat < -> (0 < n)%nat\nNat.mul_pos_pos : forall n m : nat, (0 < n)%nat -> (0 < m)%nat -> (0 < n * m)%nat\nNat.mul_pos_cancel_l : forall n m : nat, (0 < n)%nat -> (0 < n * m)%nat < -> (0 < m)%nat\nNat.add_pos_l : forall n m : nat, (0 < n)%nat -> (0 < n + m)%nat\nNat.sub_lt : forall n m : nat, (m <= n)%nat -> (0 < m)%nat -> (n - m < n)%nat\nNat.add_pos_nonneg : forall n m : nat, (0 < n)%nat -> (0 <= m)%nat -> (0 < n + m)%nat\nNat.add_nonneg_pos : forall n m : nat, (0 <= n)%nat -> (0 < m)%nat -> (0 < n + m)%nat\nlt_O_fact : forall n : nat, (0 < fact n)%nat\nNat.lt_0_succ : forall n : nat, (0 < S n)%nat\nNat.lt_0_mul : forall n m : nat, (0 < n * m)%nat < -> (0 < n)%nat /\\ (0 < m)%nat \\/ (m < 0)%nat /\\ (n < 0)%nat\nneq_0_lt : forall n : nat, 0%nat <> n -> (0 < n)%nat\nNat.eq_0_gt_0_cases : forall n : nat, n = 0%nat \\/ (0 < n)%nat\nNat.neq_0_lt_0 : forall n : nat, n <> 0%nat < -> (0 < n)%nat\nNat.lt_add_pos_l : forall n m : nat, (0 < n)%nat -> (m < n + m)%nat\nlt_minus_O_lt : forall m n : nat, (m < n)%nat -> (0 < n - m)%nat\nNat.le_0_l : forall n : nat, (0 <= n)%nat\nNat.lt_1_l : forall n m : nat, (0 < n)%nat -> (n < m)%nat -> (1 < m)%nat\nNat.mul_nonneg_nonneg : forall n m : nat, (0 <= n)%nat -> (0 <= m)%nat -> (0 <= n * m)%nat\nNat.lt_1_mul_pos : forall n m : nat, (1 < n)%nat -> (0 < m)%nat -> (1 < n * m)%nat\nNat.mul_pos_neg : forall n m : nat, (0 < n)%nat -> (m < 0)%nat -> (n * m < 0)%nat\nNat.mul_0_l : forall n : nat, (0 * n)%nat = 0%nat"}, {"role": "assistant", "content": "```coq\ninduction n.\n- simpl. auto.\n- simpl. rewrite <- IHn. apply Nat.mul_pos_pos. auto. apply Nat.lt_0_succ.\nQed.\n```"}], "original": "induction n. - simpl. auto. - simpl. rewrite <- IHn. apply Nat.mul_pos_pos. auto. apply Nat.lt_0_succ.", "succ": true}]