[{"history": {"proof": "qsimpl time: 1 use: zero,Riemann_sum_cons,SF_h,plus,R. qsimpl time: 1 use: zero,Riemann_sum_cons,SF_h,plus,R. qsimpl time: 1 use: zero,Riemann_sum_cons,SF_h,plus,R. qsimpl time: 1 use: zero,Riemann_sum_cons,SF_h,plus_assoc,plus,R. qsimpl time: 1 use: zero,Riemann_sum_cons,snd,SF_h,scal,fst,plus_assoc,plus,plus_comm,R. qsimpl time: 1 use: zero,Riemann_sum_cons,snd,SF_h,scal,fst,plus_assoc,plus,plus_comm,R. qsimpl time: 1 use: zero,Riemann_sum_cons,snd,SF_h,scal,fst,plus_assoc,plus,plus_comm,R. qsimpl time: 1 use: zero,Riemann_sum_cons,snd,SF_h,scal,fst,plus_assoc,plus,plus_comm,R.", "repairs": ["no_match_term", "no_match_term", "no_match_term", "no_subterm", "no_match_term", "no_subterm", "no_match_term", "no_subterm"], "exceptions": [{"ctx": ["unfold Riemann_sum."], "tactic": "rewrite (Riemann_sum_cons (fun x : R => plus (f x) (g x)) (SF_h ptd, zero) ptd).", "exn": "The LHS of (Riemann_sum_cons (fun x : R => plus (f x) (g x)) (SF_h ptd, zero) ptd) (Riemann_sum (fun x : R => plus (f x) (g x)) (SF_cons (SF_h ptd, zero) ptd)) does not match any subterm of the goal", "type": "no_match_term", "handled": true}, {"ctx": ["unfold Riemann_sum.", "qsimpl time: 1 use: zero,Riemann_sum_cons,SF_h,plus,R."], "tactic": "rewrite (Riemann_sum_cons f (SF_h ptd, zero) ptd).", "exn": "The LHS of (Riemann_sum_cons f (SF_h ptd, zero) ptd) (Riemann_sum f (SF_cons (SF_h ptd, zero) ptd)) does not match any subterm of the goal", "type": "no_match_term", "handled": true}, {"ctx": ["unfold Riemann_sum.", "qsimpl time: 1 use: zero,Riemann_sum_cons,SF_h,plus,R.", "qsimpl time: 1 use: zero,Riemann_sum_cons,SF_h,plus,R."], "tactic": "rewrite (Riemann_sum_cons g (SF_h ptd, zero) ptd).", "exn": "The LHS of (Riemann_sum_cons g (SF_h ptd, zero) ptd) (Riemann_sum g (SF_cons (SF_h ptd, zero) ptd)) does not match any subterm of the goal", "type": "no_match_term", "handled": true}, {"ctx": ["unfold Riemann_sum.", "qsimpl time: 1 use: zero,Riemann_sum_cons,SF_h,plus,R.", "qsimpl time: 1 use: zero,Riemann_sum_cons,SF_h,plus,R.", "qsimpl time: 1 use: zero,Riemann_sum_cons,SF_h,plus,R."], "tactic": "rewrite <- plus_assoc.", "exn": "Found no subterm matching \"plus (plus ?M3122 ?M3123) ?M3124\" in the current goal.", "type": "no_subterm", "handled": true}, {"ctx": ["unfold Riemann_sum.", "qsimpl time: 1 use: zero,Riemann_sum_cons,SF_h,plus,R.", "qsimpl time: 1 use: zero,Riemann_sum_cons,SF_h,plus,R.", "qsimpl time: 1 use: zero,Riemann_sum_cons,SF_h,plus,R.", "qsimpl time: 1 use: zero,Riemann_sum_cons,SF_h,plus_assoc,plus,R."], "tactic": "rewrite (plus_comm (scal (SF_h ptd - fst (SF_h ptd, zero)) (f (snd (SF_h ptd, zero))))).", "exn": "The LHS of (plus_comm (scal (SF_h ptd - fst (SF_h ptd, zero)) (f (snd (SF_h ptd, zero))))) (plus (scal (SF_h ptd - fst (SF_h ptd, zero)) (f (snd (SF_h ptd, zero)))) _) does not match any subterm of the goal", "type": "no_match_term", "handled": true}, {"ctx": ["unfold Riemann_sum.", "qsimpl time: 1 use: zero,Riemann_sum_cons,SF_h,plus,R.", "qsimpl time: 1 use: zero,Riemann_sum_cons,SF_h,plus,R.", "qsimpl time: 1 use: zero,Riemann_sum_cons,SF_h,plus,R.", "qsimpl time: 1 use: zero,Riemann_sum_cons,SF_h,plus_assoc,plus,R.", "qsimpl time: 1 use: zero,Riemann_sum_cons,snd,SF_h,scal,fst,plus_assoc,plus,plus_comm,R."], "tactic": "rewrite <- plus_assoc.", "exn": "Found no subterm matching \"plus (plus ?M4907 ?M4908) ?M4909\" in the current goal.", "type": "no_subterm", "handled": true}, {"ctx": ["unfold Riemann_sum.", "qsimpl time: 1 use: zero,Riemann_sum_cons,SF_h,plus,R.", "qsimpl time: 1 use: zero,Riemann_sum_cons,SF_h,plus,R.", "qsimpl time: 1 use: zero,Riemann_sum_cons,SF_h,plus,R.", "qsimpl time: 1 use: zero,Riemann_sum_cons,SF_h,plus_assoc,plus,R.", "qsimpl time: 1 use: zero,Riemann_sum_cons,snd,SF_h,scal,fst,plus_assoc,plus,plus_comm,R.", "qsimpl time: 1 use: zero,Riemann_sum_cons,snd,SF_h,scal,fst,plus_assoc,plus,plus_comm,R."], "tactic": "rewrite (plus_comm (scal (SF_h ptd - fst (SF_h ptd, zero)) (g (snd (SF_h ptd, zero))))).", "exn": "The LHS of (plus_comm (scal (SF_h ptd - fst (SF_h ptd, zero)) (g (snd (SF_h ptd, zero))))) (plus (scal (SF_h ptd - fst (SF_h ptd, zero)) (g (snd (SF_h ptd, zero)))) _) does not match any subterm of the goal", "type": "no_match_term", "handled": true}, {"ctx": ["unfold Riemann_sum.", "qsimpl time: 1 use: zero,Riemann_sum_cons,SF_h,plus,R.", "qsimpl time: 1 use: zero,Riemann_sum_cons,SF_h,plus,R.", "qsimpl time: 1 use: zero,Riemann_sum_cons,SF_h,plus,R.", "qsimpl time: 1 use: zero,Riemann_sum_cons,SF_h,plus_assoc,plus,R.", "qsimpl time: 1 use: zero,Riemann_sum_cons,snd,SF_h,scal,fst,plus_assoc,plus,plus_comm,R.", "qsimpl time: 1 use: zero,Riemann_sum_cons,snd,SF_h,scal,fst,plus_assoc,plus,plus_comm,R.", "qsimpl time: 1 use: zero,Riemann_sum_cons,snd,SF_h,scal,fst,plus_assoc,plus,plus_comm,R."], "tactic": "rewrite <- plus_assoc.", "exn": "Found no subterm matching \"plus (plus ?M9719 ?M9720) ?M9721\" in the current goal.", "type": "no_subterm", "handled": true}, {"ctx": ["unfold Riemann_sum.", "qsimpl time: 1 use: zero,Riemann_sum_cons,SF_h,plus,R.", "qsimpl time: 1 use: zero,Riemann_sum_cons,SF_h,plus,R.", "qsimpl time: 1 use: zero,Riemann_sum_cons,SF_h,plus,R.", "qsimpl time: 1 use: zero,Riemann_sum_cons,SF_h,plus_assoc,plus,R.", "qsimpl time: 1 use: zero,Riemann_sum_cons,snd,SF_h,scal,fst,plus_assoc,plus,plus_comm,R.", "qsimpl time: 1 use: zero,Riemann_sum_cons,snd,SF_h,scal,fst,plus_assoc,plus,plus_comm,R.", "qsimpl time: 1 use: zero,Riemann_sum_cons,snd,SF_h,scal,fst,plus_assoc,plus,plus_comm,R.", "qsimpl time: 1 use: zero,Riemann_sum_cons,snd,SF_h,scal,fst,plus_assoc,plus,plus_comm,R."], "tactic": "rewrite (Riemann_sum_rcons (fun x : R => plus (f x) (g x)) ptd (last (SF_h ptd) (SF_lx ptd), SF_last ptd)).", "exn": "In environment X21 : Set V : ModuleSpace R_Ring X18, X15, X11, X6, X4, S0, S : Set f, g : R -> V ptd : SF_seq H : forall (f : R -> V) (h0 : R * R) (ptd : SF_seq), Riemann_sum f (SF_cons h0 ptd) = plus (scal (SF_h ptd - fst h0) (f (snd h0))) (Riemann_sum f ptd) X : ?G H0 : R X0 : ?G1 X1 : ?G3 H2 : forall x y z : ?G6, plus x (plus y z) = plus (plus x y) z X2 : ?G5 H4 : forall x y : ?G11, plus x y = plus y x H3 : forall x y z : ?G9, plus x (plus y z) = plus (plus x y) z X8 : ?K -> ?V -> ?V X3 : ?G8 H7 : forall x y : ?G13, plus x y = plus y x H6 : forall x y z : ?G14, plus x (plus y z) = plus (plus x y) z X12 : ?K0 -> ?V0 -> ?V0 X5 : ?G15 H9 : forall x y : ?G17, plus x y = plus y x H8 : forall x y z : ?G18, plus x (plus y z) = plus (plus x y) z X14 : ?K1 -> ?V1 -> ?V1 X7 : ?G19 H11 : forall x y : ?G21, plus x y = plus y x H10 : forall x y z : ?G22, plus x (plus y z) = plus (plus x y) z X17 : ?K2 -> ?V2 -> ?V2 X9 : ?G23 X16 : S -> S -> S H1 : S -> S -> S -> S The term \"(last (SF_h ptd) (SF_lx ptd), SF_last ptd)\" has type \"(R * (SF_seq -> R * SF_seq))%type\" while it is expected to have type \"(R * R)%type\".", "type": "wrong_type", "handled": true}, {"ctx": ["unfold Riemann_sum.", "qsimpl time: 1 use: zero,Riemann_sum_cons,SF_h,plus,R.", "qsimpl time: 1 use: zero,Riemann_sum_cons,SF_h,plus,R.", "qsimpl time: 1 use: zero,Riemann_sum_cons,SF_h,plus,R.", "qsimpl time: 1 use: zero,Riemann_sum_cons,SF_h,plus_assoc,plus,R.", "qsimpl time: 1 use: zero,Riemann_sum_cons,snd,SF_h,scal,fst,plus_assoc,plus,plus_comm,R.", "qsimpl time: 1 use: zero,Riemann_sum_cons,snd,SF_h,scal,fst,plus_assoc,plus,plus_comm,R.", "qsimpl time: 1 use: zero,Riemann_sum_cons,snd,SF_h,scal,fst,plus_assoc,plus,plus_comm,R.", "qsimpl time: 1 use: zero,Riemann_sum_cons,snd,SF_h,scal,fst,plus_assoc,plus,plus_comm,R.", "qsimpl time: 1 use: SF_last,zero,SF_lx,Riemann_sum_cons,snd,last,SF_h,scal,fst,plus_assoc,plus,plus_comm,Riemann_sum_rcons,R."], "tactic": "rewrite (Riemann_sum_rcons f ptd (last (SF_h ptd) (SF_lx ptd), SF_last ptd)).", "exn": "In environment X27 : Set V : ModuleSpace R_Ring H14 : forall (f : R -> V) (ptd : SF_seq) (l0 : R * R), Riemann_sum f (SF_rcons ptd l0) = plus (Riemann_sum f ptd) (scal (fst l0 - last (SF_h ptd) (unzip1 (SF_t ptd))) (f (snd l0))) X21, X18, X15, X11, X6, X4, S0, S : Set f, g : R -> V ptd : SF_seq H : forall (f : R -> V) (h0 : R * R) (ptd : SF_seq), Riemann_sum f (SF_cons h0 ptd) = plus (scal (SF_h ptd - fst h0) (f (snd h0))) (Riemann_sum f ptd) X : ?G H0 : R X0 : ?G1 X1 : ?G3 H2 : forall x y z : ?G6, plus x (plus y z) = plus (plus x y) z X2 : ?G5 H4 : forall x y : ?G11, plus x y = plus y x H3 : forall x y z : ?G9, plus x (plus y z) = plus (plus x y) z X8 : ?K -> ?V -> ?V X3 : ?G8 H7 : forall x y : ?G13, plus x y = plus y x H6 : forall x y z : ?G14, plus x (plus y z) = plus (plus x y) z X12 : ?K0 -> ?V0 -> ?V0 X5 : ?G15 H9 : forall x y : ?G17, plus x y = plus y x H8 : forall x y z : ?G18, plus x (plus y z) = plus (plus x y) z X14 : ?K1 -> ?V1 -> ?V1 X7 : ?G19 H11 : forall x y : ?G21, plus x y = plus y x H10 : forall x y z : ?G22, plus x (plus y z) = plus (plus x y) z X17 : ?K2 -> ?V2 -> ?V2 X9 : ?G23 H13 : forall x y : ?G25, plus x y = plus y x H12 : forall x y z : ?G26, plus x (plus y z) = plus (plus x y) z X24 : ?K3 -> ?V3 -> ?V3 X22 : S -> seq S -> S X13 : ?G27 X10 : S -> SF_seq -> R * S H5 : seq R X19 : S -> S -> S H1 : S -> S -> S -> S The term \"(last (SF_h ptd) (SF_lx ptd), SF_last ptd)\" has type \"(R * (SF_seq -> R * SF_seq))%type\" while it is expected to have type \"(R * R)%type\".", "type": "wrong_type", "handled": true}]}, "chat": [{"role": "user", "content": "I will give you a Coq proof state, including both hypotheses and a specific goal and your need to prove it. Your response should be a singular code block of Coq proof starting with \"```coq\n\", ending with \"Qed.```\", without any additional explanation or commentary. Follow to these guidelines:\nIntroduce variables using unique names to avoid any conflicts.\nKeep each command distinct and separated, avoid concatenations like ';' or '[cmd|cmd]'.\nOrganize your proof with bullets like '-', '+', and '*' instead of braces ({, }). Shift to their double symbols like '--' and '++', when necessary.\nEffectively use given premises, follow the syntax and structure demonstrated in the examples provided.\n\nExample 1:\n\nHypotheses:\nn, m: nat\nIHn: m + n = n + m\n\nGoal:\nm + S n = S n + m\n\nProof:\n```coq\nsimpl. rewrite <- IHn. auto.\nQed.```\n\nExample 2:\nHypotheses:\n\nGoal:\nforall n m : nat, m + n = n + m\n\n```coq\nintros n m. induction n.\n- simpl. auto.\n- simpl. rewrite <- IHn. auto.\nQed.```\n\nSolve This Proof State:\n\nHypotheses:\nV: ModuleSpace R_Ring\ng: R -> V\nf: R -> V\nptd: SF_seq\n\nGoal:\nRiemann_sum (fun x : R => plus (f x) (g x)) ptd = plus (Riemann_sum f ptd) (Riemann_sum g ptd)\n\nPremises:\n*** [ R : Set ]\nRiemann_sum = fun (f : R -> V) (ptd : SF_seq) => foldr plus zero (pairmap (fun x y : R * R => scal (fst y - fst x) (f (snd y))) (SF_h ptd, zero) (SF_t ptd)) : (R -> V) -> SF_seq -> V Argument scopes are [function_scope _]\nNotation ModuleSpace := ModuleSpace.type\nplus = fun G : AbelianGroup => AbelianGroup.plus G (AbelianGroup.class G) : forall G : AbelianGroup, G -> G -> G Argument G is implicit and maximally inserted\nRiemann_sum_opp : forall (f : R -> V) (ptd : SF_seq), Riemann_sum (fun x : R => opp (f x)) ptd = opp (Riemann_sum f ptd)\nRiemann_sum_map : forall (f : R -> V) (g : R -> R) (ptd : SF_seq), Riemann_sum (fun x : R => f (g x)) ptd = Riemann_sum f (SF_map g ptd)\nRiemann_sum_scal : forall (a : R) (f : R -> V) (ptd : SF_seq), Riemann_sum (fun x : R => scal a (f x)) ptd = scal a (Riemann_sum f ptd)\nRiemann_sum_cons : forall (f : R -> V) (h0 : R * R) (ptd : SF_seq), Riemann_sum f (SF_cons h0 ptd) = plus (scal (SF_h ptd - fst h0) (f (snd h0))) (Riemann_sum f ptd)\nRiemann_sum_rcons : forall (f : R -> V) (ptd : SF_seq) (l0 : R * R), Riemann_sum f (SF_rcons ptd l0) = plus (Riemann_sum f ptd) (scal (fst l0 - last (SF_h ptd) (SF_lx ptd)) (f (snd l0)))\nRiemann_sum_zero : forall (f : R -> V) (ptd : SF_seq), SF_sorted Rle ptd -> SF_h ptd = last (SF_h ptd) (SF_lx ptd) -> Riemann_sum f ptd = zero\nplus_opp_r : forall x : ?G, plus x (opp x) = zero where ?G : [V : ModuleSpace R_Ring f : R -> V g : R -> V ptd : SF_seq |- AbelianGroup]\nplus_opp_l : forall x : ?G, plus (opp x) x = zero where ?G : [V : ModuleSpace R_Ring f : R -> V g : R -> V ptd : SF_seq |- AbelianGroup]\nfilterlim_plus : forall x y : ?V, filterlim (fun z : ?V * ?V => plus (fst z) (snd z)) (filter_prod (locally x) (locally y)) (locally (plus x y)) where ?K : [V : ModuleSpace R_Ring f : R -> V g : R -> V ptd : SF_seq |- AbsRing] ?V : [V : ModuleSpace R_Ring f : R -> V g : R -> V ptd : SF_seq |- NormedModule ?K]\nplus_comm : forall x y : ?G, plus x y = plus y x where ?G : [V : ModuleSpace R_Ring f : R -> V g : R -> V ptd : SF_seq |- AbelianGroup]\nopp_plus : forall x y : ?G, opp (plus x y) = plus (opp x) (opp y) where ?G : [V : ModuleSpace R_Ring f : R -> V g : R -> V ptd : SF_seq |- AbelianGroup]\nplus_reg_r : forall r x y : ?G, plus x r = plus y r -> x = y where ?G : [V : ModuleSpace R_Ring f : R -> V g : R -> V ptd : SF_seq |- AbelianGroup]\nsum_n_plus : forall (u v : nat -> ?G) (n : nat), sum_n (fun k : nat => plus (u k) (v k)) n = plus (sum_n u n) (sum_n v n) where ?G : [V : ModuleSpace R_Ring f : R -> V g : R -> V ptd : SF_seq |- AbelianGroup]\nsum_n_m_plus : forall (u v : nat -> ?G) (n m : nat), sum_n_m (fun k : nat => plus (u k) (v k)) n m = plus (sum_n_m u n m) (sum_n_m v n m) where ?G : [V : ModuleSpace R_Ring f : R -> V g : R -> V ptd : SF_seq |- AbelianGroup]\nplus_assoc : forall x y z : ?G, plus x (plus y z) = plus (plus x y) z where ?G : [V : ModuleSpace R_Ring f : R -> V g : R -> V ptd : SF_seq |- AbelianGroup]\nRiemann_sum_const : forall (v : V) (ptd : SF_seq), Riemann_sum (fun _ : R => v) ptd = scal (last (SF_h ptd) (SF_lx ptd) - SF_h ptd) v\nplus_zero_l : forall x : ?G, plus zero x = x where ?G : [V : ModuleSpace R_Ring f : R -> V g : R -> V ptd : SF_seq |- AbelianGroup]\nplus_zero_r : forall x : ?G, plus x zero = x where ?G : [V : ModuleSpace R_Ring f : R -> V g : R -> V ptd : SF_seq |- AbelianGroup]\nscal_distr_l : forall (x : ?K) (u v : ?V), scal x (plus u v) = plus (scal x u) (scal x v) where ?K : [V : ModuleSpace R_Ring f : R -> V g : R -> V ptd : SF_seq |- Ring] ?V : [V : ModuleSpace R_Ring f : R -> V g : R -> V ptd : SF_seq |- ModuleSpace ?K]\nscal_distr_r : forall (x y : ?K) (u : ?V), scal (plus x y) u = plus (scal x u) (scal y u) where ?K : [V : ModuleSpace R_Ring f : R -> V g : R -> V ptd : SF_seq |- Ring] ?V : [V : ModuleSpace R_Ring f : R -> V g : R -> V ptd : SF_seq |- ModuleSpace ?K]\nlocally_le_locally_norm : forall x : ?V, filter_le (locally x) (locally_norm x) where ?K : [V : ModuleSpace R_Ring f : R -> V g : R -> V ptd : SF_seq |- AbsRing] ?V : [V : ModuleSpace R_Ring f : R -> V g : R -> V ptd : SF_seq |- NormedModule ?K]\nminus_trans : forall r x y : ?G, minus x y = plus (minus x r) (minus r y) where ?G : [V : ModuleSpace R_Ring f : R -> V g : R -> V ptd : SF_seq |- AbelianGroup]\nmult_distr_l : forall x y z : ?K, mult x (plus y z) = plus (mult x y) (mult x z) where ?K : [V : ModuleSpace R_Ring f : R -> V g : R -> V ptd : SF_seq |- Ring]\nmult_distr_r : forall x y z : ?K, mult (plus x y) z = plus (mult x z) (mult y z) where ?K : [V : ModuleSpace R_Ring f : R -> V g : R -> V ptd : SF_seq |- Ring]\nscal_opp_l : forall (x : ?K) (u : ?V), scal (opp x) u = opp (scal x u) where ?K : [V : ModuleSpace R_Ring f : R -> V g : R -> V ptd : SF_seq |- Ring] ?V : [V : ModuleSpace R_Ring f : R -> V g : R -> V ptd : SF_seq |- ModuleSpace ?K]"}, {"role": "assistant", "content": "```coq\nunfold Riemann_sum.\nrewrite (Riemann_sum_cons (fun x : R => plus (f x) (g x)) (SF_h ptd, zero) ptd).\nrewrite (Riemann_sum_cons f (SF_h ptd, zero) ptd).\nrewrite (Riemann_sum_cons g (SF_h ptd, zero) ptd).\nrewrite <- plus_assoc.\nrewrite (plus_comm (scal (SF_h ptd - fst (SF_h ptd, zero)) (f (snd (SF_h ptd, zero))))).\nrewrite <- plus_assoc.\nrewrite (plus_comm (scal (SF_h ptd - fst (SF_h ptd, zero)) (g (snd (SF_h ptd, zero))))).\nrewrite <- plus_assoc.\nrewrite (Riemann_sum_rcons (fun x : R => plus (f x) (g x)) ptd (last (SF_h ptd) (SF_lx ptd), SF_last ptd)).\nrewrite (Riemann_sum_rcons f ptd (last (SF_h ptd) (SF_lx ptd), SF_last ptd)).\nrewrite (Riemann_sum_rcons g ptd (last (SF_h ptd) (SF_lx ptd), SF_last ptd)).\nrewrite <- plus_assoc.\nrewrite (plus_comm (scal (fst (last (SF_h ptd) (SF_lx ptd), SF_last ptd) - last (SF_h ptd) (SF_lx ptd)) (f (snd (last (SF_h ptd) (SF_lx ptd), SF_last ptd))))).\nrewrite <- plus_assoc.\nrewrite (plus_comm (scal (fst (last (SF_h ptd) (SF_lx ptd), SF_last ptd) - last (SF_h ptd) (SF_lx ptd)) (g (snd (last (SF_h ptd) (SF_lx ptd), SF_last ptd))))).\nrewrite <- plus_assoc.\nrewrite (plus_comm (Riemann_sum f ptd)).\nrewrite (plus_comm (Riemann_sum g ptd)).\napply plus_assoc.\nQed.```\nThis proof uses the definitions of Riemann_sum and the properties of plus and scal, such as associativity and commutativity, to rewrite the goal into a form that can be simplified to the desired equality."}], "original": "unfold Riemann_sum. rewrite (Riemann_sum_cons (fun x : R => plus (f x) (g x)) (SF_h ptd, zero) ptd). rewrite (Riemann_sum_cons f (SF_h ptd, zero) ptd). rewrite (Riemann_sum_cons g (SF_h ptd, zero) ptd). rewrite <- plus_assoc. rewrite (plus_comm (scal (SF_h ptd - fst (SF_h ptd, zero)) (f (snd (SF_h ptd, zero))))). rewrite <- plus_assoc. rewrite (plus_comm (scal (SF_h ptd - fst (SF_h ptd, zero)) (g (snd (SF_h ptd, zero))))). rewrite <- plus_assoc. rewrite (Riemann_sum_rcons (fun x : R => plus (f x) (g x)) ptd (last (SF_h ptd) (SF_lx ptd), SF_last ptd)). rewrite (Riemann_sum_rcons f ptd (last (SF_h ptd) (SF_lx ptd), SF_last ptd)). rewrite (Riemann_sum_rcons g ptd (last (SF_h ptd) (SF_lx ptd), SF_last ptd)). rewrite <- plus_assoc. rewrite (plus_comm (scal (fst (last (SF_h ptd) (SF_lx ptd), SF_last ptd) - last (SF_h ptd) (SF_lx ptd)) (f (snd (last (SF_h ptd) (SF_lx ptd), SF_last ptd))))). rewrite <- plus_assoc. rewrite (plus_comm (scal (fst (last (SF_h ptd) (SF_lx ptd), SF_last ptd) - last (SF_h ptd) (SF_lx ptd)) (g (snd (last (SF_h ptd) (SF_lx ptd), SF_last ptd))))). rewrite <- plus_assoc. rewrite (plus_comm (Riemann_sum f ptd)). rewrite (plus_comm (Riemann_sum g ptd)). apply plus_assoc.", "succ": false}]