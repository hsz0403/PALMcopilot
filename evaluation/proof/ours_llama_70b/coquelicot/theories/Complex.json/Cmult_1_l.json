[{"history": {"proof": "rewrite <- Cmult_comm. apply Cmult_1_r.", "repairs": ["", ""], "exceptions": []}, "chat": [{"role": "user", "content": "I will give you a Coq proof state, including both hypotheses and a specific goal and your need to prove it. Your response should be a singular code block of Coq proof starting with \"```coq\n\", ending with \"Qed.```\", without any additional explanation or commentary. Follow to these guidelines:\nIntroduce variables using unique names to avoid any conflicts.\nKeep each command distinct and separated, avoid concatenations like ';' or '[cmd|cmd]'.\nOrganize your proof with bullets like '-', '+', and '*' instead of braces ({, }). Shift to their double symbols like '--' and '++', when necessary.\nEffectively use given premises, follow the syntax and structure demonstrated in the examples provided.\n\nExample 1:\n\nHypotheses:\nn, m: nat\nIHn: m + n = n + m\n\nGoal:\nm + S n = S n + m\n\nProof:\n```coq\nsimpl. rewrite <- IHn. auto.\nQed.```\n\nExample 2:\nHypotheses:\n\nGoal:\nforall n m : nat, m + n = n + m\n\n```coq\nintros n m. induction n.\n- simpl. auto.\n- simpl. rewrite <- IHn. auto.\nQed.```\n\nSolve This Proof State:\n\nHypotheses:\nx: C\n\nGoal:\n1 * x = x\n\nPremises:\nCmult_1_r : forall x : C, x * 1 = x\nZeq_bool_complete : forall x y : Z, gen_phiZ 0 1 Rplus Rmult Ropp x = gen_phiZ 0 1 Rplus Rmult Ropp y -> Zeq_bool x y = true\nLub.Empty = fun E : R -> Prop => Lub.Lub_Rbar (fun x : R => x = 0 \\/ E x) = Lub.Glb_Rbar (fun x : R => x = 0 \\/ E x) /\\ Lub.Lub_Rbar (fun x : R => x = 1 \\/ E x) = Lub.Glb_Rbar (fun x : R => x = 1 \\/ E x) : (R -> Prop) -> Prop Argument scope is [function_scope]\nCmod_1 = (fun _evar_0_ : sqrt (1 * (1 * 1) + 0) = 1 => eq_ind_r (fun _pattern_value_ : R => sqrt (1 * (1 * 1) + _pattern_value_) = 1) _evar_0_ (Rmult_0_l (0 * 1))) ((fun _evar_0_ : sqrt (1 * (1 * 1)) = 1 => eq_ind_r (fun _pattern_value_ : R => sqrt _pattern_value_ = 1) _evar_0_ (Rplus_0_r (1 * (1 * 1)))) ((fun _evar_0_ : sqrt (1 * 1) = 1 => eq_ind_r (fun _pattern_value_ : R => sqrt _pattern_value_ = 1) _evar_0_ (Rmult_1_l (1 * 1))) ((fun _evar_0_ : sqrt 1 = 1 => eq_ind_r (fun _pattern_value_ : R...\nCmult_comm : forall x y : C, x * y = y * x\nCmult_assoc : forall x y z : C, x * (y * z) = x * y * z\nRlt_0_1 = let H : 1\u00b2 = 1 := Rmult_1_r 1 in eq_ind 1\u00b2 (fun r : R => 0 < r) (Rlt_0_sqr 1 (fun H0 : 1 = 0 => R1_neq_R0 H0)) 1 H : 0 < 1\nRtoC_mult : forall x y : R, (x * y)%R = x * y\nsqrt_sqrt : forall x : R, 0 <= x -> (sqrt x * sqrt x)%R = x\nCmult_0_l : forall x : C, 0 * x = 0\nCmult_0_r : forall x : C, x * 0 = 0\nCmult = fun x y : C => ((fst x * fst y - snd x * snd y)%R, (fst x * snd y + snd x * fst y)%R) : C -> C -> C\nCmod_mult : forall x y : C, Cmod (x * y) = (Cmod x * Cmod y)%R\nRabs_mult : forall x y : R, Rabs (x * y) = (Rabs x * Rabs y)%R\nRMicromega.Rinv_1 : forall x : R, (x * / 1)%R = x\nRinv_r_sym : forall r : R, r <> 0 -> 1 = (r * / r)%R\nRinv_l_sym : forall r : R, r <> 0 -> 1 = (/ r * r)%R\nsqrt_mult : forall x y : R, 0 <= x -> 0 <= y -> sqrt (x * y) = (sqrt x * sqrt y)%R\nderive_pt_mult : forall (f1 f2 : R -> R) (x : R) (pr1 : derivable_pt f1 x) (pr2 : derivable_pt f2 x), derive_pt (f1 * f2) x (derivable_pt_mult f1 f2 x pr1 pr2) = (derive_pt f1 x pr1 * f2 x + f1 x * derive_pt f2 x pr2)%R\nCdiv = fun x y : C => x * / y : C -> C -> C\nsqrt_1 = Rsqr_inj (sqrt 1) 1 (sqrt_positivity 1 (or_introl Rlt_0_1)) (or_introl Rlt_0_1) (eq_ind_r (fun r : R => r = (1 * 1)%R) (let hyp_list := Datatypes.nil in let fv_list := Datatypes.nil in RField_ring_lemma1 ring_subst_niter fv_list hyp_list (Ring_polynom.PEc 1%Z) (Ring_polynom.PEmul (Ring_polynom.PEc 1%Z) (Ring_polynom.PEc 1%Z)) I (eq_refl <: (let lmp := Ring_polynom.mk_monpol_list 0%Z 1%Z Z.add Z.mul Z.sub Z.opp Zeq_bool Z.quotrem hyp_list in Ring_polynom.Peq Zeq_bool (Ring_polynom.norm_subst 0%Z 1%Z Z.add Z.mul Z.sub Z.opp Zeq_bool Z.quotrem ring_subst_niter lmp (Ring_polynom.PEc ...\nRtoC_inj : forall x y : R, x = y -> x = y\npow_add : forall (x : R) (n m : nat), x ^ (n + m) = (x ^ n * x ^ m)%R\nRecord mixin_of (K : Ring) : Type := Mixin { abs : K -> R; ax1 : abs zero = 0; ax2 : abs (opp one) = 1; ax3 : forall x y : K, abs (plus x y) <= abs x + abs y; ax4 : forall x y : K, abs (mult x y) <= abs x * abs y; ax5 : forall x : K, abs x = 0 -> x = zero } For Mixin: Argument scopes are [_ function_scope _ _ function_scope function_scope function_scope]\nCplus_0_l : forall x : C, 0 + x = x"}, {"role": "assistant", "content": "```coq\nintros.\nrewrite <- Cmult_comm.\napply Cmult_1_r.\nQed.\n```"}], "original": "intros. rewrite <- Cmult_comm. apply Cmult_1_r.", "succ": true}]