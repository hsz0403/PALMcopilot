[{"history": {"proof": "qsimpl time: 1 use: RInt_const.", "repairs": ["no_subterm"], "exceptions": [{"ctx": ["intros a b v.", "unfold KHInt, scal."], "tactic": "rewrite <- RInt_const.", "exn": "Found no subterm matching \"scal (?M2370 - ?M2369) ?M2371\" in the current goal.", "type": "no_subterm", "handled": true}]}, "chat": [{"role": "user", "content": "I will give you a Coq proof state, including both hypotheses and a specific goal and your need to prove it. Your response should be a singular code block of Coq proof starting with \"```coq\n\", ending with \"Qed.```\", without any additional explanation or commentary. Follow to these guidelines:\nIntroduce variables using unique names to avoid any conflicts.\nKeep each command distinct and separated, avoid concatenations like ';' or '[cmd|cmd]'.\nOrganize your proof with bullets like '-', '+', and '*' instead of braces ({, }). Shift to their double symbols like '--' and '++', when necessary.\nEffectively use given premises, follow the syntax and structure demonstrated in the examples provided.\n\nExample 1:\n\nHypotheses:\nn, m: nat\nIHn: m + n = n + m\n\nGoal:\nm + S n = S n + m\n\nProof:\n```coq\nsimpl. rewrite <- IHn. auto.\nQed.```\n\nExample 2:\nHypotheses:\n\nGoal:\nforall n m : nat, m + n = n + m\n\n```coq\nintros n m. induction n.\n- simpl. auto.\n- simpl. rewrite <- IHn. auto.\nQed.```\n\nSolve This Proof State:\n\nHypotheses:\nV: CompleteNormedModule R_AbsRing\n\nGoal:\nforall (a b : R) (v : V), KHInt (fun _ : R => v) a b = scal (b - a) v\n\nPremises:\nKHInt = fun (f : R -> V) (a b : R) => iota (is_KHInt f a b) : (R -> V) -> R -> R -> V Argument scopes are [function_scope R_scope R_scope]\nscal = fun (K : Ring) (V : ModuleSpace K) => ModuleSpace.scal K (AbelianGroup.Pack V (ModuleSpace.class K V) V) (ModuleSpace.class K V) : forall (K : Ring) (V : ModuleSpace K), K -> V -> V Arguments K, V are implicit and maximally inserted\nNotation CompleteNormedModule := CompleteNormedModule.type\n*** [ R : Set ]\nis_RInt_const : forall (a b : R) (v : ?V), is_RInt (fun _ : R => v) a b (scal (b - a) v) where ?V : [V : CompleteNormedModule R_AbsRing |- NormedModule R_AbsRing]\nRInt_const : forall (a b : R) (c : ?V), RInt (fun _ : R => c) a b = scal (b - a) c where ?V : [V : CompleteNormedModule R_AbsRing |- CompleteNormedModule R_AbsRing]\nis_KHInt_const : forall (a b : R) (c : ?V), is_KHInt (fun _ : R => c) a b (scal (b - a) c) where ?V : [V : CompleteNormedModule R_AbsRing |- NormedModule R_AbsRing]\nis_KHInt_unique : forall (f : R -> V) (a b : R) (l : V), is_KHInt f a b l -> KHInt f a b = l\nRiemann_sum_const : forall (v : ?V) (ptd : SF_seq), Riemann_sum (fun _ : R => v) ptd = scal (last (SF_h ptd) (SF_lx ptd) - SF_h ptd) v where ?V : [V : CompleteNormedModule R_AbsRing |- ModuleSpace R_Ring]\nsign_min_max : forall a b : R, sign (b - a) * (Rmax a b - Rmin a b) = b - a\nRInt_comp_lin : forall (f : R -> ?V) (u v a b : R), ex_RInt f (u * a + v) (u * b + v) -> RInt (fun y : R => scal u (f (u * y + v))) a b = RInt f (u * a + v) (u * b + v) where ?V : [V : CompleteNormedModule R_AbsRing |- CompleteNormedModule R_AbsRing]\nis_RInt_comp_lin : forall (f : R -> ?V) (u v a b : R) (l : ?V), is_RInt f (u * a + v) (u * b + v) l -> is_RInt (fun y : R => scal u (f (u * y + v))) a b l where ?V : [V : CompleteNormedModule R_AbsRing |- NormedModule R_AbsRing]\nRInt_scal : forall (f : R -> ?V) (a b l : R), ex_RInt f a b -> RInt (fun x : R => scal l (f x)) a b = scal l (RInt f a b) where ?V : [V : CompleteNormedModule R_AbsRing |- CompleteNormedModule R_AbsRing]\nunif_part = fun (a b : R) (n : nat) => mkseq (fun i : nat => a + INR i * (b - a) / (INR n + 1)) (S (S n)) : R -> R -> nat -> seq R Argument scopes are [R_scope R_scope nat_scope]\nis_RInt_scal : forall (f : R -> ?V) (a b k : R) (If : ?V), is_RInt f a b If -> is_RInt (fun y : R => scal k (f y)) a b (scal k If) where ?V : [V : CompleteNormedModule R_AbsRing |- NormedModule R_AbsRing]\nRiemann_fine_unif_part : forall (f : R -> R -> R) (a b : R) (n : nat), (forall a0 b0 : R, a0 <= b0 -> a0 <= f a0 b0 <= b0) -> a <= b -> seq_step (SF_lx (SF_seq_f2 f (unif_part a b n))) <= (b - a) / (INR n + 1) /\\ pointed_subdiv (SF_seq_f2 f (unif_part a b n)) /\\ SF_h (SF_seq_f2 f (unif_part a b n)) = a /\\ last (SF_h (SF_seq_f2 f (unif_part a b n))) (SF_lx (SF_seq_f2 f (unif_part a b n))) = b\nex_RInt_inside : forall (f : R -> ?V) (a b x e : R), ex_RInt f (x - e) (x + e) -> Rabs (a - x) <= e -> Rabs (b - x) <= e -> ex_RInt f a b where ?V : [V : CompleteNormedModule R_AbsRing |- CompleteNormedModule R_AbsRing]\nex_RInt_comp_opp : forall (f : R -> ?V) (a b : R), ex_RInt f (- a) (- b) -> ex_RInt (fun y : R => opp (f (- y))) a b where ?V : [V : CompleteNormedModule R_AbsRing |- NormedModule R_AbsRing]\nis_RInt = fun (V : NormedModule R_AbsRing) (f : R -> V) (a b : R) (If : V) => filterlim (fun ptd : SF_seq => scal (sign (b - a)) (Riemann_sum f ptd)) (Riemann_fine a b) (locally If) : forall V : NormedModule R_AbsRing, (R -> V) -> R -> R -> V -> Prop Argument V is implicit and maximally inserted Argument scopes are [_ function_scope R_scope R_scope _]\nis_KHInt = fun (V : NormedModule R_AbsRing) (f : R -> V) (a b : R) (If : V) => filterlim (fun ptd : SF_seq => scal (sign (b - a)) (Riemann_sum f ptd)) (KH_fine a b) (locally If) : forall V : NormedModule R_AbsRing, (R -> V) -> R -> R -> V -> Prop Argument V is implicit and maximally inserted Argument scopes are [_ function_scope R_scope R_scope _]\nis_RInt_opp : forall (f : R -> ?V) (a b : R) (If : ?V), is_RInt f a b If -> is_RInt (fun y : R => opp (f y)) a b (opp If) where ?V : [V : CompleteNormedModule R_AbsRing |- NormedModule R_AbsRing]\nRInt_opp : forall (f : R -> ?V) (a b : R), ex_RInt f a b -> RInt (fun x : R => opp (f x)) a b = opp (RInt f a b) where ?V : [V : CompleteNormedModule R_AbsRing |- CompleteNormedModule R_AbsRing]\nis_RInt_unique : forall (f : R -> ?V) (a b : R) (l : ?V), is_RInt f a b l -> RInt f a b = l where ?V : [V : CompleteNormedModule R_AbsRing |- CompleteNormedModule R_AbsRing]\nRInt_Reals : forall (f : R -> R) (a b : R) (pr : Riemann_integrable f a b), RInt f a b = RiemannInt pr\nis_RInt_plus : forall (f g : R -> ?V) (a b : R) (If Ig : ?V), is_RInt f a b If -> is_RInt g a b Ig -> is_RInt (fun y : R => plus (f y) (g y)) a b (plus If Ig) where ?V : [V : CompleteNormedModule R_AbsRing |- NormedModule R_AbsRing]\nis_RInt_minus : forall (f g : R -> ?V) (a b : R) (If Ig : ?V), is_RInt f a b If -> is_RInt g a b Ig -> is_RInt (fun y : R => minus (f y) (g y)) a b (minus If Ig) where ?V : [V : CompleteNormedModule R_AbsRing |- NormedModule R_AbsRing]\nRInt_minus : forall (f g : R -> ?V) (a b : R), ex_RInt f a b -> ex_RInt g a b -> RInt (fun x : R => minus (f x) (g x)) a b = minus (RInt f a b) (RInt g a b) where ?V : [V : CompleteNormedModule R_AbsRing |- CompleteNormedModule R_AbsRing]\nRInt_plus : forall (f g : R -> ?V) (a b : R), ex_RInt f a b -> ex_RInt g a b -> RInt (fun x : R => plus (f x) (g x)) a b = plus (RInt f a b) (RInt g a b) where ?V : [V : CompleteNormedModule R_AbsRing |- CompleteNormedModule R_AbsRing]\nRiemann_integrable = fun (f : R -> R) (a b : R) => forall eps : posreal, {phi : StepFun a b & {psi : StepFun a b | (forall t : R, Rmin a b <= t <= Rmax a b -> Rabs (f t - phi t) <= psi t) /\\ Rabs (RiemannInt_SF psi) < eps}} : (R -> R) -> R -> R -> Type Argument scopes are [function_scope R_scope R_scope]"}, {"role": "assistant", "content": "```coq\nintros a b v.\nunfold KHInt, scal.\nrewrite <- RInt_const.\napply is_KHInt_unique.\napply is_RInt_const.\nQed.```"}], "original": "intros a b v. unfold KHInt, scal. rewrite <- RInt_const. apply is_KHInt_unique. apply is_RInt_const.", "succ": false}]