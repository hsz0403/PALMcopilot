[{"history": {"proof": "intros xs ys H. induction H. - constructor. - constructor; auto.", "repairs": ["", "", "", "", "", ""], "exceptions": []}, "chat": [{"role": "user", "content": "I will give you a Coq proof state, including both hypotheses and a specific goal and your need to prove it. Your response should be a singular code block of Coq proof starting with \"```coq\n\", ending with \"Qed.```\", without any additional explanation or commentary. Follow to these guidelines:\nIntroduce variables using unique names to avoid any conflicts.\nKeep each command distinct and separated, avoid concatenations like ';' or '[cmd|cmd]'.\nOrganize your proof with bullets like '-', '+', and '*' instead of braces ({, }). Shift to their double symbols like '--' and '++', when necessary.\nEffectively use given premises, follow the syntax and structure demonstrated in the examples provided.\n\nExample 1:\n\nHypotheses:\nn, m: nat\nIHn: m + n = n + m\n\nGoal:\nm + S n = S n + m\n\nProof:\n```coq\nsimpl. rewrite <- IHn. auto.\nQed.```\n\nExample 2:\nHypotheses:\n\nGoal:\nforall n m : nat, m + n = n + m\n\n```coq\nintros n m. induction n.\n- simpl. auto.\n- simpl. rewrite <- IHn. auto.\nQed.```\n\nSolve This Proof State:\n\nHypotheses:\nA: Type\nB: Type\nP: A -> B -> Prop\n\nGoal:\nforall (xs : list A) (ys : list B), Forall2 (fun (y : B) (x : A) => P x y) ys xs -> Forall2 P xs ys\n\nPremises:\nForall2 : forall A B : Type, (A -> B -> Prop) -> list A -> list B -> Prop\nInductive list (A : Type) : Type := nil : list A | cons : A -> list A -> list A For cons: Arguments are renamed to A, a, l For nil: Argument A is implicit and maximally inserted For cons: Argument A is implicit and maximally inserted For list: Argument scope is [type_scope] For nil: Argument scope is [type_scope] For cons: Argument scopes are [type_scope _ list_scope]\nfin_subset_match : forall (X : Ensemble ?A) (Y : Ensemble ?B), (forall x : ?A, X x -> exists y : ?B, ?P x y /\\ Y y) -> forall xs : list ?A, Forall (fun x : ?A => X x) xs -> exists ys : list ?B, Forall2 ?P xs ys /\\ Forall (fun y : ?B => Y y) ys where ?A : [A : Type B : Type P : A -> B -> Prop |- Type] ?B : [A : Type B : Type P : A -> B -> Prop |- Type] ?P : [A : Type B : Type P : A -> B -> Prop |- ?A -> ?B -> Prop]\nForall2_sind : forall (A B : Type) (R : A -> B -> Prop) (P : list A -> list B -> SProp), P nil nil -> (forall (x : A) (y : B) (l : list A) (l' : list B), R x y -> Forall2 R l l' -> P l l' -> P (x :: l) (y :: l')) -> forall (l : list A) (l0 : list B), Forall2 R l l0 -> P l l0\nForall2_ind : forall (A B : Type) (R : A -> B -> Prop) (P : list A -> list B -> Prop), P nil nil -> (forall (x : A) (y : B) (l : list A) (l' : list B), R x y -> Forall2 R l l' -> P l l' -> P (x :: l) (y :: l')) -> forall (l : list A) (l0 : list B), Forall2 R l l0 -> P l l0\nForall2_cons : forall (A B : Type) (R : A -> B -> Prop) (x : A) (y : B) (l : list A) (l' : list B), R x y -> Forall2 R l l' -> Forall2 R (x :: l) (y :: l')\nForall2_app : forall (A B : Type) (R : A -> B -> Prop) (l1 l2 : list A) (l1' l2' : list B), Forall2 R l1 l1' -> Forall2 R l2 l2' -> Forall2 R (l1 ++ l2) (l1' ++ l2')\nSetoidList.InA_sind : forall (A : Type) (eqA : A -> A -> Prop) (x : A) (P : list A -> SProp), (forall (y : A) (l : list A), eqA x y -> P (y :: l)) -> (forall (y : A) (l : list A), SetoidList.InA eqA x l -> P l -> P (y :: l)) -> forall l : list A, SetoidList.InA eqA x l -> P l\nForall2_app_inv_l : forall (A B : Type) (R : A -> B -> Prop) (l1 l2 : list A) (l' : list B), Forall2 R (l1 ++ l2) l' -> exists l1' l2' : list B, Forall2 R l1 l1' /\\ Forall2 R l2 l2' /\\ l' = l1' ++ l2'\nForall2_app_inv_r : forall (A B : Type) (R : A -> B -> Prop) (l1' l2' : list B) (l : list A), Forall2 R l (l1' ++ l2') -> exists l1 l2 : list A, Forall2 R l1 l1' /\\ Forall2 R l2 l2' /\\ l = l1 ++ l2\nForall_cons : forall (A : Type) (P : A -> Prop) (x : A) (l : list A), P x -> Forall P l -> Forall P (x :: l)\nNoDup_ind : forall (A : Type) (P : list A -> Prop), P nil -> (forall (x : A) (l : list A), ~ In x l -> NoDup l -> P l -> P (x :: l)) -> forall l : list A, NoDup l -> P l\nForall_ind : forall (A : Type) (P : A -> Prop) (P0 : list A -> Prop), P0 nil -> (forall (x : A) (l : list A), P x -> Forall P l -> P0 l -> P0 (x :: l)) -> forall l : list A, Forall P l -> P0 l\nAdd_ind : forall (A : Type) (a : A) (P : list A -> list A -> Prop), (forall l : list A, P l (a :: l)) -> (forall (x : A) (l l' : list A), Add a l l' -> P l l' -> P (x :: l) (x :: l')) -> forall l l0 : list A, Add a l l0 -> P l l0\nSetoidList.eqlistA_ind : forall (A : Type) (eqA : A -> A -> Prop) (P : list A -> list A -> Prop), P nil nil -> (forall (x x' : A) (l l' : list A), eqA x x' -> SetoidList.eqlistA eqA l l' -> P l l' -> P (x :: l) (x' :: l')) -> forall l l0 : list A, SetoidList.eqlistA eqA l l0 -> P l l0\nExists_cons_tl : forall (A : Type) (P : A -> Prop) (x : A) (l : list A), Exists P l -> Exists P (x :: l)\nForall2_nil : forall (A B : Type) (R : A -> B -> Prop), Forall2 R nil nil\nForall2_refl : forall (A B : Type) (R : A -> B -> Prop), Forall2 R nil nil\nlist_rect : forall (A : Type) (P : list A -> Type), P nil -> (forall (a : A) (l : list A), P l -> P (a :: l)) -> forall l : list A, P l\nlist_ind : forall (A : Type) (P : list A -> Prop), P nil -> (forall (a : A) (l : list A), P l -> P (a :: l)) -> forall l : list A, P l\nSetoidList.InA_cons_hd : forall (A : Type) (eqA : A -> A -> Prop) (x y : A) (l : list A), eqA x y -> SetoidList.InA eqA x (y :: l)\nSetoidList.InA_cons_tl : forall (A : Type) (eqA : A -> A -> Prop) (x y : A) (l : list A), SetoidList.InA eqA x l -> SetoidList.InA eqA x (y :: l)\nSetoidList.InA_double_head : forall (A : Type) (eqA : A -> A -> Prop) (x y : A) (l : list A), SetoidList.InA eqA x (y :: y :: l) < -> SetoidList.InA eqA x (y :: l)\nsnd = fun (A B : Type) (p : A * B) => let (_, y) := p in y : forall A B : Type, A * B -> B Arguments A, B are implicit and maximally inserted Argument scopes are [type_scope type_scope _]\nInductive Exists (A : Type) (P : A -> Prop) : list A -> Prop := Exists_cons_hd : forall (x : A) (l : list A), P x -> Exists P (x :: l) | Exists_cons_tl : forall (x : A) (l : list A), Exists P l -> Exists P (x :: l) For Exists: Argument A is implicit For Exists_cons_hd: Argument A is implicit For Exists_cons_tl: Arguments A, P, l are implicit For Exists: Argument scopes are [type_scope function_scope list_scope] For Exists_cons_hd: Argument scopes are [type_scope function_scope _ list_scope _] For Exists_cons_tl: Argument scopes are [type_scope function_scope _ list_scope _]\nSorted.Sorted_ind : forall (A : Type) (R : A -> A -> Prop) (P : list A -> Prop), P nil -> (forall (a : A) (l : list A), Sorted.Sorted R l -> P l -> Sorted.HdRel R a l -> P (a :: l)) -> forall l : list A, Sorted.Sorted R l -> P l\nexist : forall (A : Type) (P : A -> Prop) (x : A), P x -> {x : A | P x}\nexistT : forall (A : Type) (P : A -> Type) (x : A), P x -> {x : A & P x}\nForall_inv : forall (A : Type) (P : A -> Prop) (a : A) (l : list A), Forall P (a :: l) -> P a\nInductive InA (A : Type) (eqA : A -> A -> Prop) (x : A) : list A -> Prop := InA_cons_hd : forall (y : A) (l : list A), eqA x y -> SetoidList.InA eqA x (y :: l) | InA_cons_tl : forall (y : A) (l : list A), SetoidList.InA eqA x l -> SetoidList.InA eqA x (y :: l) For InA: Argument A is implicit For InA_cons_hd: Arguments A, eqA, x, y are implicit For InA_cons_tl: Arguments A, eqA, x, l are implicit For InA: Argument scopes are [type_scope function_scope _ list_scope] For InA_cons_hd: Argument scopes are [type_scope function_scope _ _ list_scope _] For InA_cons_tl: Argument scopes are [type_scope function_scope _ _ list_scope _]\nInductive Forall (A : Type) (P : A -> Prop) : list A -> Prop := Forall_nil : Forall P nil | Forall_cons : forall (x : A) (l : list A), P x -> Forall P l -> Forall P (x :: l) For Forall: Argument A is implicit For Forall_nil: Argument A is implicit For Forall_cons: Arguments A, P, l are implicit For Forall: Argument scopes are [type_scope function_scope list_scope] For Forall_nil: Argument scopes are [type_scope function_scope] For Forall_cons: Argument scopes are [type_scope function_scope _ list_scope _ _]\nfst = fun (A B : Type) (p : A * B) => let (x, _) := p in x : forall A B : Type, A * B -> A Arguments A, B are implicit and maximally inserted Argument scopes are [type_scope type_scope _]"}, {"role": "assistant", "content": "```coq\nintros xs ys H.\ninduction H.\n- constructor.\n- constructor; auto.\nQed.\n```"}], "original": "intros xs ys H. induction H. - constructor. - constructor; auto.", "succ": true}]