[{"history": {"proof": "apply Build_IdentityKripkeIntuitionisticModel. intros m n H. sfirstorder depth: 3.", "repairs": ["", "", "hammer"], "exceptions": []}, "chat": [{"role": "user", "content": "I will give you a Coq proof state, including both hypotheses and a specific goal and your need to prove it. Your response should be a singular code block of Coq proof starting with \"```coq\n\", ending with \"Qed.```\", without any additional explanation or commentary. Follow to these guidelines:\nIntroduce variables using unique names to avoid any conflicts.\nKeep each command distinct and separated, avoid concatenations like ';' or '[cmd|cmd]'.\nOrganize your proof with bullets like '-', '+', and '*' instead of braces ({, }). Shift to their double symbols like '--' and '++', when necessary.\nEffectively use given premises, follow the syntax and structure demonstrated in the examples provided.\n\nExample 1:\n\nHypotheses:\nn, m: nat\nIHn: m + n = n + m\n\nGoal:\nm + S n = S n + m\n\nProof:\n```coq\nsimpl. rewrite <- IHn. auto.\nQed.```\n\nExample 2:\nHypotheses:\n\nGoal:\nforall n m : nat, m + n = n + m\n\n```coq\nintros n m. induction n.\n- simpl. auto.\n- simpl. rewrite <- IHn. auto.\nQed.```\n\nSolve This Proof State:\n\nHypotheses:\nworlds: Type\n\nGoal:\nIdentityKripkeIntuitionisticModel worlds\n\nPremises:\nIdentityKripkeIntuitionisticModel : forall worlds : Type, Relation worlds -> Prop\nBuild_IdentityKripkeIntuitionisticModel : forall (worlds : Type) (R : Relation worlds), (forall m n : worlds, m <= n -> m = n) -> IdentityKripkeIntuitionisticModel worlds\nRelation = fun worlds : Type => worlds -> Ensemble worlds : Type -> Type Argument scope is [type_scope]\nKrelation = fun (worlds : Type) (Relation : Relation worlds) => Relation : forall worlds : Type, Relation worlds -> worlds -> Ensemble worlds Arguments worlds, Relation are implicit and maximally inserted Argument scopes are [type_scope _ _]\nKorder_identity : forall m n : ?worlds, m <= n -> m = n where ?worlds : [worlds : Type |- Type] ?R : [worlds : Type |- Relation ?worlds] ?IdentityKripkeIntuitionisticModel : [worlds : Type |- IdentityKripkeIntuitionisticModel ?worlds]\nOmegaLemmas.fast_Zplus_comm : forall (x y : BinNums.Z) (P : BinNums.Z -> Prop), P (BinInt.Z.add y x) -> P (BinInt.Z.add x y)\nBool.andb_true_iff : forall b1 b2 : bool, (b1 && b2)%bool = true < -> b1 = true /\\ b2 = true\nbool_rec : forall P : bool -> Set, P true -> P false -> forall b : bool, P b\nBinInt.Z.pow_nonzero : forall a b : BinNums.Z, a <> BinNums.Z0 -> BinInt.Z.le BinNums.Z0 b -> BinInt.Z.pow a b <> BinNums.Z0\nZbool.Zeq_bool = fun x y : BinNums.Z => match BinInt.Z.compare x y with | Eq => true | _ => false end : BinNums.Z -> BinNums.Z -> bool Argument scopes are [Z_scope Z_scope]\nAscii.eqb_neq : forall x y : Ascii.ascii, Ascii.eqb x y = false < -> x <> y\nlt = fun n m : nat => (S n <= m)%nat : nat -> nat -> Prop Argument scopes are [nat_scope nat_scope]\nBinNat.N.max_r_iff : forall n m : BinNums.N, BinNat.N.max n m = m < -> BinNat.N.le n m\nBinPos.Pos.lt = fun x y : BinNums.positive => BinPos.Pos.compare x y = Lt : BinNums.positive -> BinNums.positive -> Prop Argument scopes are [positive_scope positive_scope]\nPeanoNat.Nat.eq_0_gt_0_cases : forall n : nat, n = 0 \\/ 0 < n\nFSetPositive.PositiveSet.In = fun (i : FSetPositive.PositiveSet.elt) (t : FSetPositive.PositiveSet.t) => FSetPositive.PositiveSet.mem i t = true : FSetPositive.PositiveSet.elt -> FSetPositive.PositiveSet.t -> Prop\nAscii.eqb = fun a b : Ascii.ascii => match a with | Ascii.Ascii a0 a1 a2 a3 a4 a5 a6 a7 => match b with | Ascii.Ascii b0 b1 b2 b3 b4 b5 b6 b7 => if if if if if if if Bool.eqb a0 b0 then Bool.eqb a1 b1 else false then Bool.eqb a2 b2 else false then Bool.eqb a3 b3 else false then Bool.eqb a4 b4 else false then Bool.eqb a5 b5 else false then Bool.eqb a6 b6 else false then Bool.eqb a7 b7 else false end end : Ascii.ascii -> Ascii.ascii -> bool Argument scopes are [char_scope char_scope]\nFSetPositive.PositiveSet.mem = fix mem (i : FSetPositive.PositiveSet.elt) (m : FSetPositive.PositiveSet.t) {struct m} : bool := match m with | FSetPositive.PositiveSet.Leaf => false | FSetPositive.PositiveSet.Node l o r => match i with | BinNums.xI i0 => mem i0 r | BinNums.xO i0 => mem i0 l | BinNums.xH => o end end : FSetPositive.PositiveSet.elt -> FSetPositive.PositiveSet.t -> bool\nWf_Z.Z_of_nat_complete : forall x : BinNums.Z, BinInt.Z.le BinNums.Z0 x -> exists n : nat, x = BinInt.Z.of_nat n\nBinIntDef.Z.of_nat = fun n : nat => match n with | 0 => BinNums.Z0 | S n0 => BinNums.Zpos (BinPos.Pos.of_succ_nat n0) end : nat -> BinNums.Z Argument scope is [nat_scope]\nBinIntDef.Z.div2 = fun z : BinNums.Z => match z with | BinNums.Zpos (BinNums.xI _ as p) | BinNums.Zpos (BinNums.xO _ as p) => BinNums.Zpos (BinPos.Pos.div2 p) | BinNums.Zneg p => BinNums.Zneg (BinPos.Pos.div2_up p) | _ => BinNums.Z0 end : BinNums.Z -> BinNums.Z Argument scope is [Z_scope]\nString.list_ascii_of_string_of_list_ascii : forall s : list Ascii.ascii, String.list_ascii_of_string (String.string_of_list_ascii s) = s\nBinInt.Z.mul_cancel_l : forall n m p : BinNums.Z, p <> BinNums.Z0 -> BinInt.Z.mul p n = BinInt.Z.mul p m < -> n = m\nBinInt.Z.gt_lt_iff : forall n m : BinNums.Z, BinInt.Z.gt n m < -> BinInt.Z.lt m n\nInductive list (A : Type) : Type := nil : list A | cons : A -> list A -> list A For cons: Arguments are renamed to A, a, l For nil: Argument A is implicit and maximally inserted For cons: Argument A is implicit and maximally inserted For list: Argument scope is [type_scope] For nil: Argument scope is [type_scope] For cons: Argument scopes are [type_scope _ list_scope]\nBinInt.Z.divide = fun x y : BinNums.Z => exists z : BinNums.Z, y = BinInt.Z.mul z x : BinNums.Z -> BinNums.Z -> Prop Argument scopes are [Z_scope Z_scope]"}, {"role": "assistant", "content": "```coq\napply Build_IdentityKripkeIntuitionisticModel.\nintros m n H.\napply Korder_identity.\nQed.\n```"}], "original": "apply Build_IdentityKripkeIntuitionisticModel. intros m n H. apply Korder_identity.", "succ": true}]