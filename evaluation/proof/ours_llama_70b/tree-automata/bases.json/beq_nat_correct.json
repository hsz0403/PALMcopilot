[{"history": {"proof": "intros n. induction n. - simpl. auto. - simpl. rewrite IHn. auto.", "repairs": ["", "", "", "", "", "", "", "", ""], "exceptions": []}, "chat": [{"role": "user", "content": "I will give you a Coq proof state, including both hypotheses and a specific goal and your need to prove it. Your response should be a singular code block of Coq proof starting with \"```coq\n\", ending with \"Qed.```\", without any additional explanation or commentary. Follow to these guidelines:\nIntroduce variables using unique names to avoid any conflicts.\nKeep each command distinct and separated, avoid concatenations like ';' or '[cmd|cmd]'.\nOrganize your proof with bullets like '-', '+', and '*' instead of braces ({, }). Shift to their double symbols like '--' and '++', when necessary.\nEffectively use given premises, follow the syntax and structure demonstrated in the examples provided.\n\nExample 1:\n\nHypotheses:\nn, m: nat\nIHn: m + n = n + m\n\nGoal:\nm + S n = S n + m\n\nProof:\n```coq\nsimpl. rewrite <- IHn. auto.\nQed.```\n\nExample 2:\nHypotheses:\n\nGoal:\nforall n m : nat, m + n = n + m\n\n```coq\nintros n m. induction n.\n- simpl. auto.\n- simpl. rewrite <- IHn. auto.\nQed.```\n\nSolve This Proof State:\n\nHypotheses:\n\n\nGoal:\nforall n : nat, Nat.eqb n n = true\n\nPremises:\nInductive nat : Set := O : nat | S : nat -> nat For S: Argument scope is [nat_scope]\nModule Nat := Struct Definition t : Set. Definition zero : nat. Definition one : nat. Definition two : nat. Definition succ : nat -> nat. Definition pred : nat -> nat. Definition add : nat -> nat -> nat. Definition double : nat -> nat. Definition mul : nat -> nat -> nat. Definition sub : nat -> nat -> nat. Definition eqb : nat -> nat -> bool. Definition leb : nat -> nat -> bool. Definition ltb : nat -> nat -> bool. Definition compare : nat -> nat -> comparison. Definition max : nat -> nat -> nat. Definition min : nat -> nat -> nat. Definition even : nat -> bool. Definition odd : nat -> bool. Definition pow : nat -> nat -> nat. Definition tail_add : nat -> nat -> nat. Definition tail_addmul : nat -> nat -> nat -> nat. Definition tail_mul : nat -> nat -> nat. Definition of_uint_acc : Decimal.uint -> nat -> nat. Definition of_uint : Decimal.uint -> nat. Definition to\neqb = fun b1 b2 : bool => if b1 then if b2 then true else false else if b2 then false else true : bool -> bool -> bool Argument scopes are [bool_scope bool_scope]\nZerob.zerob_true_intro : forall n : nat, n = 0 -> Zerob.zerob n = true\nNat.even_spec : forall n : nat, Nat.even n = true < -> Nat.Even n\nNat.odd_spec : forall n : nat, Nat.odd n = true < -> Nat.Odd n\nNat.orb_even_odd : forall n : nat, Nat.even n || Nat.odd n = true\nbeq_nat_complete : forall n m : nat, (n =? m) = true -> n = m\nbeq_nat_eq : forall n m : nat, true = (n =? m) -> n = m\nbeq_nat_true : forall n m : nat, (n =? m) = true -> n = m\nNat.eqb_eq : forall n m : nat, (n =? m) = true < -> n = m\nNat.pow2_bits_true : forall n : nat, Nat.testbit (2 ^ n) n = true\nNat.setbit_eq : forall a n : nat, Nat.testbit (Nat.setbit a n) n = true\nbeq_nat_refl : forall n : nat, true = (n =? n)\nleb_correct : forall m n : nat, m <= n -> (m <=? n) = true\nNat.leb_le : forall n m : nat, (n <=? m) = true < -> n <= m\nNat.ltb_lt : forall n m : nat, (n <? m) = true < -> n < m\nNat.setbit_iff : forall a n m : nat, Nat.testbit (Nat.setbit a n) m = true < -> n = m \\/ Nat.testbit a m = true\nNat.mul_1_l : forall n : nat, 1 * n = n\nNat.add_0_l : forall n : nat, 0 + n = n\nNat.mul_1_r : forall n : nat, n * 1 = n\nNat.ones_spec_iff : forall n m : nat, Nat.testbit (Nat.ones n) m = true < -> m < n\nNat.ones_spec_low : forall n m : nat, m < n -> Nat.testbit (Nat.ones n) m = true\nNat.add_1_l : forall n : nat, 1 + n = S n\nNat.add_1_r : forall n : nat, n + 1 = S n\nNat.clearbit_iff : forall a n m : nat, Nat.testbit (Nat.clearbit a n) m = true < -> Nat.testbit a m = true /\\ n <> m\nN.eqb_eq : forall n m : N, (n =? m)%N = true < -> n = m\nNat.testbit_true : forall a n : nat, Nat.testbit a n = true < -> (a / 2 ^ n) mod 2 = 1"}, {"role": "assistant", "content": "```coq\nintros n. induction n.\n- simpl. auto.\n- simpl. rewrite IHn. auto.\nQed.\n```"}], "original": "intros n. induction n. - simpl. auto. - simpl. rewrite IHn. auto.", "succ": true}]