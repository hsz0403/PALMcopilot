[{"history": {"proof": "intros H. qsimpl time: 1 use: filter_mono. intros x. intros Hx. apply in_filter_iff in Hx. destruct Hx as [HxA Hp]. apply H in Hp. apply in_filter_iff. split. apply HxA. auto. sfirstorder depth: 3use: filter_mono.", "repairs": ["", "cannot_unify", "", "", "", "", "", "", "", "", "", "hammer"], "exceptions": [{"ctx": ["intros H."], "tactic": "apply filter_mono.", "exn": "In environment X : Type p, q : X -> bool A : list X H : forall x, x el A -> p x -> q x Unable to unify \"q\" with \"p\".", "type": "cannot_unify", "handled": true}]}, "chat": [{"role": "user", "content": "I will give you a Coq proof state, including both hypotheses and a specific goal and your need to prove it. Your response should be a singular code block of Coq proof starting with \"```coq\n\", ending with \"Qed.```\", without any additional explanation or commentary. Follow to these guidelines:\nIntroduce variables using unique names to avoid any conflicts.\nKeep each command distinct and separated, avoid concatenations like ';' or '[cmd|cmd]'.\nOrganize your proof with bullets like '-', '+', and '*' instead of braces ({, }). Shift to their double symbols like '--' and '++', when necessary.\nEffectively use given premises, follow the syntax and structure demonstrated in the examples provided.\n\nExample 1:\n\nHypotheses:\nn, m: nat\nIHn: m + n = n + m\n\nGoal:\nm + S n = S n + m\n\nProof:\n```coq\nsimpl. rewrite <- IHn. auto.\nQed.```\n\nExample 2:\nHypotheses:\n\nGoal:\nforall n m : nat, m + n = n + m\n\n```coq\nintros n m. induction n.\n- simpl. auto.\n- simpl. rewrite <- IHn. auto.\nQed.```\n\nSolve This Proof State:\n\nHypotheses:\nX: Type\nq: X -> bool\np: X -> bool\nA: list X\n\nGoal:\n(forall x, x el A -> p x -> q x) -> filter p A <<= filter q A\n\nPremises:\nInductive list (A : Type) : Type := nil : list A | cons : A -> list A -> list A Arguments list _%type_scope Arguments nil {A}%type_scope Arguments cons {A}%type_scope a l%list_scope : rename\nfilter : forall A : Type, (A -> bool) -> list A -> list A\nfilter_id : forall p A, (forall x, x el A -> p x) -> filter p A = A\nssrbool.onPhantom : forall (P : ?T -> Prop) (x : ?T), ssreflect.phantom Prop (P x) where ?T : [X : Type p : X -> bool q : X -> bool A : list X |- Type]\nfilter_mono : forall p A B, A <<= B -> filter p A <<= filter p B\ncfind : forall (A0 : list ?X) (p0 : ?X -> Prop), (forall x : ?X, dec (p0 x)) -> {x : ?X | x el A0 /\\ p0 x} + {forall x : ?X, x el A0 -> ~ p0 x} where ?X : [X : Type p : X -> bool q : X -> bool A : list X |- Type]\nlist_cc : forall (X : Type) (p : X -> Prop) (A : list X), (forall x : X, dec (p x)) -> (exists x : X, x el A /\\ p x) -> {x : X | x el A /\\ p x}\nfilter_fst : forall p x A, p x -> filter p (x :: A) = x :: filter p A\nfilter_fst' : forall p x A, ~ p x -> filter p (x :: A) = filter p A\nlist_exists_DM : forall (X : Type) (A : list X) (p : X -> Prop), (forall x : X, dec (p x)) -> ~ (forall x : X, x el A -> ~ p x) -> exists x : X, x el A /\\ p x\nlist_exists_dec : forall (X : Type) (A : list X) (p : X -> Prop), (forall x : X, dec (p x)) -> dec (exists x : X, x el A /\\ p x)\nin_filter_iff : forall x p A, x el filter p A < -> x el A /\\ p x\nfilter_app : forall p A B, filter p (A ++ B) = filter p A ++ filter p B\nfilter_incl : forall p A, filter p A <<= A\ndec_DN : forall X : Prop, dec X -> ~ ~ X -> X\ndisjoint : forall X : Type, list X -> list X -> Prop\nequi : forall X : Type, list X -> list X -> Prop\nfilter_ext_in : forall (A : Type) (f g : A -> bool) (l : list A), (forall a : A, a el l -> f a = g a) -> filter f l = filter g l\nDec : forall X : Prop, dec X -> dec X\nfilter_ext_in_iff : forall (A : Type) (f g : A -> bool) (l : list A), filter f l = filter g l < -> (forall a : A, a el l -> f a = g a)\nincl_map : forall (X Y : Type) (A B : list X) (f : X -> Y), A <<= B -> map f A <<= map f B\nfilter_ext : forall (A : Type) (f g : A -> bool), (forall a : A, f a = g a) -> forall l : list A, filter f l = filter g l\next_in_filter : forall (A : Type) (f g : A -> bool) (l : list A), filter f l = filter g l -> forall a : A, a el l -> f a = g a\nnot_dec : forall X : Prop, dec X -> dec (~ X)\nForall_forall : forall (A : Type) (P : A -> Prop) (l : list A), Forall P l < -> (forall x : A, x el l -> P x)\nincl_filter : forall (A : Type) (f : A -> bool) (l : list A), filter f l <<= l\nincl_lrcons : forall (X : Type) (x : X) (A B : list X), x :: A <<= x :: B -> ~ x el A -> A <<= B"}, {"role": "assistant", "content": "```coq\nintros H. apply filter_mono. intros x. intros Hx.\napply in_filter_iff in Hx. destruct Hx as [HxA Hp].\napply H in Hp. apply in_filter_iff. split. apply HxA. assumption.\nQed.\n```"}], "original": "intros H. apply filter_mono. intros x. intros Hx. apply in_filter_iff in Hx. destruct Hx as [HxA Hp]. apply H in Hp. apply in_filter_iff. split. apply HxA. auto.", "succ": true}]