[{"history": {"proof": "induction n. - reflexivity. - rewrite vec_zero_S. reflexivity.", "repairs": ["", "", "", "", "", ""], "exceptions": []}, "chat": [{"role": "user", "content": "I will give you a Coq proof state, including both hypotheses and a specific goal and your need to prove it. Your response should be a singular code block of Coq proof starting with \"```coq\n\", ending with \"Qed.```\", without any additional explanation or commentary. Follow to these guidelines:\nIntroduce variables using unique names to avoid any conflicts.\nKeep each command distinct and separated, avoid concatenations like ';' or '[cmd|cmd]'.\nOrganize your proof with bullets like '-', '+', and '*' instead of braces ({, }). Shift to their double symbols like '--' and '++', when necessary.\nEffectively use given premises, follow the syntax and structure demonstrated in the examples provided.\n\nExample 1:\n\nHypotheses:\nn, m: nat\nIHn: m + n = n + m\n\nGoal:\nm + S n = S n + m\n\nProof:\n```coq\nsimpl. rewrite <- IHn. auto.\nQed.```\n\nExample 2:\nHypotheses:\n\nGoal:\nforall n m : nat, m + n = n + m\n\n```coq\nintros n m. induction n.\n- simpl. auto.\n- simpl. rewrite <- IHn. auto.\nQed.```\n\nSolve This Proof State:\n\nHypotheses:\nn: nat\n\nGoal:\nvec_one pos0 = Vector.cons nat 1 n vec_zero\n\nPremises:\nInductive nat : Set := O : nat | S : nat -> nat Arguments S _%nat_scope\nInductive list (A : Type) : Type := nil : list A | cons : A -> list A -> list A Arguments list _%type_scope Arguments nil {A}%type_scope Arguments cons {A}%type_scope a l%list_scope : rename\nvec_one = fun (n : nat) (p : pos n) => vec_set_pos (fun q : pos n => if pos_eq_dec p q then 1 else 0) : forall n : nat, pos n -> vec nat n Arguments vec_one {n}%nat_scope\nModule Vector := Struct Inductive t (A : Type) : nat -> Type := nil : t A 0 | cons : A -> forall n : nat, t A n -> t A (S n) Definition t_rect : forall (A : Type) (P : forall n : nat, vec A n -> Type), P 0 vec_nil -> (forall (h : A) (n : nat) (t : vec A n), P n t -> P (S n) (h ## t)) -> forall (n : nat) (t : vec A n), P n t. Definition t_ind : forall (A : Type) (P : forall n : nat, vec A n -> Prop), P 0 vec_nil -> (forall (h : A) (n : nat) (t : vec A n), P n t -> P (S n) (h ## t)) -> forall (n : nat)\nNotation pos0 := pos_fst\nvec_one_spec_eq : forall (n : nat) (p q : pos n), p = q -> vec_one p#>q = 1\nvec_plus_is_zero : forall (n : nat) (u v : vec nat n), vec_zero = vec_plus u v -> u = vec_zero /\\ v = vec_zero\nvec_zero = fun n : nat => vec_set_pos (fun _ : pos n => 0) : forall n : nat, vec nat n Arguments vec_zero {n}%nat_scope\nvec_zero_S : forall n : nat, vec_zero = 0 ## vec_zero\nvec_zero_plus : forall (n : nat) (v : vec nat n), vec_plus vec_zero v = v\npm_lift_fst : forall (m n : nat) (r : pos_map m n), pm_lift r pos0 = pos0\nvec_one_spec_neq : forall (n : nat) (p q : pos n), p <> q -> vec_one p#>q = 0\nNdigits.Bv2N = fix Bv2N (n : nat) (bv : Bvector.Bvector n) {struct bv} : BinNums.N := match bv with | vec_nil => BinNums.N0 | Vector.cons _ true n0 bv0 => BinNat.N.succ_double (Bv2N n0 bv0) | Vector.cons _ false n0 bv0 => BinNat.N.double (Bv2N n0 bv0) end : forall n : nat, Bvector.Bvector n -> BinNums.N Arguments Ndigits.Bv2N {n}%nat_scope, _ _\npos2nat_fst : forall n : nat, pos2nat pos0 = 0\nVectorSpec.shiftrepeat_nth : forall (A : Type) (n : nat) (k : pos (S n)) (v : vec A (S n)), VectorDef.nth (VectorDef.shiftrepeat v) (Fin.L_R 1 k) = VectorDef.nth v k\nVectorSpec.shiftin_nth : forall (A : Type) (a : A) (n : nat) (v : vec A n) (k1 k2 : pos n), k1 = k2 -> VectorDef.nth (VectorDef.shiftin a v) (Fin.L_R 1 k1) = VectorDef.nth v k2\nFin.caseS' : forall (p : pos (S ?n)) (P : pos (S ?n) -> Type), P pos0 -> (forall p0 : pos ?n, P (pos_nxt p0)) -> P p where ?n : [n : nat |- nat]\nFin.rect2 : forall P : forall n : nat, pos n -> pos n -> Type, (forall n : nat, P (S n) pos0 pos0) -> (forall (n : nat) (f : pos n), P (S n) pos0 (pos_nxt f)) -> (forall (n : nat) (f : pos n), P (S n) (pos_nxt f) pos0) -> (forall (n : nat) (f g : pos n), P n f g -> P (S n) (pos_nxt f) (pos_nxt g)) -> forall (n : nat) (a b : pos n), P n a b\npos_S_invert : forall (n : nat) (P : pos (S n) -> Type), P pos0 -> (forall p : pos n, P (pos_nxt p)) -> forall p : pos (S n), P p\nByteVector.to_Bvector = fix to_Bvector (n : nat) (v : ByteVector.ByteVector n) {struct v} : Bvector.Bvector (n * 8) := match v in (vec _ n0) return (Bvector.Bvector (n0 * 8)) with | vec_nil => vec_nil | Vector.cons _ (Ascii.Ascii b0 b1 b2 b3 b4 b5 b6 b7) n0 v' => b0 ## b1 ## b2 ## b3 ## b4 ## b5 ## b6 ## b7 ## to_Bvector n0 v' end : forall n : nat, ByteVector.ByteVector n -> Bvector.Bvector (n * 8) Arguments ByteVector.to_Bvector {n}%nat_scope\npm_lift = fun (m n : nat) (r : pos_map m n) (p : pos (S m)) => let s := pos_S_inv p in match s with | inl _ => pos0 | inr (exist _ p0 _) => pos_nxt (r p0) end : forall m n : nat, pos_map m n -> pos_map (S m) (S n) Arguments pm_lift {m n}%nat_scope _ _ /\nFin.of_nat_lt = fix of_nat_lt (p n : nat) {struct p} : p < n -> pos n := match n as n0 return (p < n0 -> pos n0) with | 0 => fun H : p < 0 => False_rect (pos 0) (Nat.nlt_0_r p H) | S n' => match p as p0 return (p0 < S n' -> pos (S n')) with | 0 => fun _ : 0 < S n' => pos0 | S p' => fun H : S p' < S n' => pos_nxt (of_nat_lt p' n' (lt_S_n p' n' H)) end end : forall p n : nat, p < n -> pos n Arguments Fin.of_nat_lt {p n}%nat_scope\ngt = fun n m : nat => m < n : nat -> nat -> Prop Arguments gt (_ _)%nat_scope\nlt = fun n m : nat => S n <= m : nat -> nat -> Prop Arguments lt (_ _)%nat_scope\npos_map = fun m n : nat => pos m -> pos n : nat -> nat -> Set Arguments pos_map (_ _)%nat_scope\nInit.Nat.pred = fun n : nat => match n with | 0 => n | S u => u end : nat -> nat Arguments Init.Nat.pred _%nat_scope\nvec_plus = fun (n : nat) (v w : vec nat n) => vec_set_pos (fun p : pos n => (v#>p) + (w#>p)) : forall n : nat, vec nat n -> vec nat n -> vec nat n Arguments vec_plus {n}%nat_scope\nInit.Nat.sub = fix sub (n m : nat) {struct n} : nat := match n with | 0 => n | S k => match m with | 0 => n | S l => sub k l end end : nat -> nat -> nat Arguments Init.Nat.sub (_ _)%nat_scope\ntail_plus = fix tail_plus (n m : nat) {struct n} : nat := match n with | 0 => m | S n0 => tail_plus n0 (S m) end : nat -> nat -> nat Arguments tail_plus (_ _)%nat_scope\nInit.Nat.add = fix add (n m : nat) {struct n} : nat := match n with | 0 => m | S p => S (add p m) end : nat -> nat -> nat Arguments Init.Nat.add (_ _)%nat_scope"}, {"role": "assistant", "content": "```coq\ninduction n.\n- simpl. reflexivity.\n- simpl. rewrite vec_zero_S. reflexivity.\nQed.```"}], "original": "induction n. - simpl. reflexivity. - simpl. rewrite vec_zero_S. reflexivity.", "succ": true}]