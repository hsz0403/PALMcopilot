[{"history": {"proof": "unfold pm_lift. sfirstorder depth: 3.", "repairs": ["", "hammer"], "exceptions": [{"ctx": ["unfold pm_lift."], "tactic": ["destruct r as [v w].", ""], "exn": "Expects a disjunctive pattern with 2 branches.", "type": "num_branch", "handled": false}]}, "chat": [{"role": "user", "content": "I will give you a Coq proof state, including both hypotheses and a specific goal and your need to prove it. Your response should be a singular code block of Coq proof starting with \"```coq\n\", ending with \"Qed.```\", without any additional explanation or commentary. Follow to these guidelines:\nIntroduce variables using unique names to avoid any conflicts.\nKeep each command distinct and separated, avoid concatenations like ';' or '[cmd|cmd]'.\nOrganize your proof with bullets like '-', '+', and '*' instead of braces ({, }). Shift to their double symbols like '--' and '++', when necessary.\nEffectively use given premises, follow the syntax and structure demonstrated in the examples provided.\n\nExample 1:\n\nHypotheses:\nn, m: nat\nIHn: m + n = n + m\n\nGoal:\nm + S n = S n + m\n\nProof:\n```coq\nsimpl. rewrite <- IHn. auto.\nQed.```\n\nExample 2:\nHypotheses:\n\nGoal:\nforall n m : nat, m + n = n + m\n\n```coq\nintros n m. induction n.\n- simpl. auto.\n- simpl. rewrite <- IHn. auto.\nQed.```\n\nSolve This Proof State:\n\nHypotheses:\nn: nat\nm: nat\nr: pos_map m n\n\nGoal:\npm_lift r pos0 = pos0\n\nPremises:\npos_map = fun m n : nat => pos m -> pos n : nat -> nat -> Set Arguments pos_map (_ _)%nat_scope\nNotation pos0 := pos_fst\npm_lift : forall m n : nat, pos_map m n -> pos_map (S m) (S n)\nFin.of_nat_ext : forall h h' : ?p < ?n, Fin.of_nat_lt h = Fin.of_nat_lt h' where ?p : [m : nat n : nat r : pos_map m n |- nat] ?n : [m : nat n : nat r : pos_map m n |- nat]\nVectorSpec.eta : forall v : VectorDef.t ?A (S ?n), v = VectorDef.cons ?A (VectorDef.hd v) ?n (VectorDef.tl v) where ?A : [m : nat n : nat r : pos_map m n |- Type] ?n : [m : nat n : nat r : pos_map m n |- nat]\nFin.caseS' : forall (p : pos (S ?n)) (P : pos (S ?n) -> Type), P pos0 -> (forall p0 : pos ?n, P (pos_nxt p0)) -> P p where ?n : [m : nat n : nat r : pos_map m n |- nat]\nVectorSpec.nth_map2 : forall (f : ?A -> ?B -> ?C) (n0 : nat) (v : VectorDef.t ?A n0) (w : VectorDef.t ?B n0) (p1 p2 p3 : pos n0), p1 = p2 -> p2 = p3 -> VectorDef.nth (VectorDef.map2 f v w) p1 = f (VectorDef.nth v p2) (VectorDef.nth w p3) where ?A : [m : nat n : nat r : pos_map m n |- Type] ?B : [m : nat n : nat r : pos_map m n |- Type] ?C : [m : nat n : nat r : pos_map m n |- Type]\nVectorDef.map2 : (?A -> ?B -> ?C) -> forall n0 : nat, VectorDef.t ?A n0 -> VectorDef.t ?B n0 -> VectorDef.t ?C n0 where ?A : [m : nat n : nat r : pos_map m n |- Type] ?B : [m : nat n : nat r : pos_map m n |- Type] ?C : [m : nat n : nat r : pos_map m n |- Type]\nFin.depair_sanity : forall (o : pos ?m) (p : pos ?n), proj1_sig (Fin.to_nat (Fin.depair o p)) = ?n * proj1_sig (Fin.to_nat o) + proj1_sig (Fin.to_nat p) where ?m : [m : nat n : nat r : pos_map m n |- nat] ?n : [m : nat n : nat r : pos_map m n |- nat]\nVectorSpec.nth_map : forall (f : ?A -> ?B) (n0 : nat) (v : VectorDef.t ?A n0) (p1 p2 : pos n0), p1 = p2 -> VectorDef.nth (VectorDef.map f v) p1 = f (VectorDef.nth v p2) where ?A : [m : nat n : nat r : pos_map m n |- Type] ?B : [m : nat n : nat r : pos_map m n |- Type]\nFin.FS_inj : forall x y : pos ?n, pos_nxt x = pos_nxt y -> x = y where ?n : [m : nat n : nat r : pos_map m n |- nat]\nFin.of_nat_to_nat_inv : forall p : pos ?m, Fin.of_nat_lt (proj2_sig (Fin.to_nat p)) = p where ?m : [m : nat n : nat r : pos_map m n |- nat]\nVectorDef.map : (?A -> ?B) -> forall n0 : nat, VectorDef.t ?A n0 -> VectorDef.t ?B n0 where ?A : [m : nat n : nat r : pos_map m n |- Type] ?B : [m : nat n : nat r : pos_map m n |- Type]\nFin.to_nat_inj : forall p q : pos ?n, proj1_sig (Fin.to_nat p) = proj1_sig (Fin.to_nat q) -> p = q where ?n : [m : nat n : nat r : pos_map m n |- nat]\nFin.cast : pos ?m -> forall n0 : nat, ?m = n0 -> pos n0 where ?m : [m : nat n : nat r : pos_map m n |- nat]\nFin.eq_dec : forall x y : pos ?n, {x = y} + {x <> y} where ?n : [m : nat n : nat r : pos_map m n |- nat]\nFin.weak : forall p : nat, (pos ?m -> pos ?n) -> pos (p + ?m) -> pos (p + ?n) where ?m : [m : nat n : nat r : pos_map m n |- nat] ?n : [m : nat n : nat r : pos_map m n |- nat]\npos_S_inv : forall p : pos (S ?n), (p = pos0) + {q : pos ?n | p = pos_nxt q} where ?n : [m : nat n : nat r : pos_map m n |- nat]\nFin.L_sanity : forall (n0 : nat) (p : pos ?m), proj1_sig (Fin.to_nat (Fin.L n0 p)) = proj1_sig (Fin.to_nat p) where ?m : [m : nat n : nat r : pos_map m n |- nat]\nFin.R_sanity : forall (n0 : nat) (p : pos ?m), proj1_sig (Fin.to_nat (Fin.R n0 p)) = n0 + proj1_sig (Fin.to_nat p) where ?m : [m : nat n : nat r : pos_map m n |- nat]\nVectorDef.const : ?A -> forall n0 : nat, VectorDef.t ?A n0 where ?A : [m : nat n : nat r : pos_map m n |- Type]\nVectorDef.caseS' : forall (v : VectorDef.t ?A (S ?n)) (P : VectorDef.t ?A (S ?n) -> Type), (forall (h : ?A) (t : VectorDef.t ?A ?n), P (VectorDef.cons ?A h ?n t)) -> P v where ?A : [m : nat n : nat r : pos_map m n |- Type] ?n : [m : nat n : nat r : pos_map m n |- nat]\nFin.L : forall n0 : nat, pos ?m -> pos (?m + n0) where ?m : [m : nat n : nat r : pos_map m n |- nat]\nFin.R : forall n0 : nat, pos ?m -> pos (n0 + ?m) where ?m : [m : nat n : nat r : pos_map m n |- nat]\nFin.L_R : forall n0 : nat, pos ?m -> pos (n0 + ?m) where ?m : [m : nat n : nat r : pos_map m n |- nat]\nVectorDef.rect2 : forall P : forall n0 : nat, VectorDef.t ?A n0 -> VectorDef.t ?B n0 -> Type, P 0 (VectorDef.nil ?A) (VectorDef.nil ?B) -> (forall (n0 : nat) (v1 : VectorDef.t ?A n0) (v2 : VectorDef.t ?B n0), P n0 v1 v2 -> forall (a : ?A) (b : ?B), P (S n0) (VectorDef.cons ?A a n0 v1) (VectorDef.cons ?B b n0 v2)) -> forall (n0 : nat) (v1 : VectorDef.t ?A n0) (v2 : VectorDef.t ?B n0), P n0 v1 v2 where ?A : [m : nat n : nat r : pos_map m n |- Type] ?B : [m : nat n : nat r : pos_map m n |- Type]\npm_ext_eq : forall m n : nat, pos_map m n -> pos_map m n -> Prop\nVectorDef.caseS : forall P : forall n0 : nat, VectorDef.t ?A (S n0) -> Type, (forall (h : ?A) (n0 : nat) (t : VectorDef.t ?A n0), P n0 (VectorDef.cons ?A h n0 t)) -> forall (n0 : nat) (v : VectorDef.t ?A (S n0)), P n0 v where ?A : [m : nat n : nat r : pos_map m n |- Type]"}, {"role": "assistant", "content": "```coq\nintros.\nunfold pm_lift.\ndestruct r as [v w].\nsimpl.\nrewrite <- (VectorSpec.eta v).\nrewrite <- (VectorSpec.eta w).\napply Fin.caseS'.\nintros.\nreflexivity.\nintros p Hp.\nrewrite <- (VectorDef.nth_map _ _ _ _ Hp).\nreflexivity.\nQed.```"}], "original": "intros. unfold pm_lift. destruct r as [v w]. simpl. rewrite <- (VectorSpec.eta v). rewrite <- (VectorSpec.eta w). apply Fin.caseS'. intros. reflexivity. intros p Hp. rewrite <- (VectorDef.nth_map _ _ _ _ Hp). reflexivity.", "succ": true}]