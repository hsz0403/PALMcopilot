[{"history": {"proof": "unfold fact. rewrite <- fact_0. induction n. - simpl. auto. - simpl. qsimpl time: 1.", "repairs": ["", "", "", "", "", "", "", "", "no_subterm"], "exceptions": [{"ctx": ["unfold fact.", "rewrite <- fact_0.", "induction n.", "-", "simpl.", "auto.", "-", "simpl."], "tactic": "rewrite IHn.", "exn": "Found no subterm matching \"S n * (fix fact (n : nat) : nat := match n with | 0 => factorial.fact 0 | S n0 => S n0 * fact n0 end) n\" in the current goal.", "type": "no_subterm", "handled": true}, {"ctx": ["unfold fact.", "rewrite <- fact_0.", "induction n.", "-", "simpl.", "auto.", "-", "simpl.", "qsimpl time: 1."], "tactic": "auto.", "exn": "No such goal.", "type": "no_goal", "handled": true}]}, "chat": [{"role": "user", "content": "I will give you a Coq proof state, including both hypotheses and a specific goal and your need to prove it. Your response should be a singular code block of Coq proof starting with \"```coq\n\", ending with \"Qed.```\", without any additional explanation or commentary. Follow to these guidelines:\nIntroduce variables using unique names to avoid any conflicts.\nKeep each command distinct and separated, avoid concatenations like ';' or '[cmd|cmd]'.\nOrganize your proof with bullets like '-', '+', and '*' instead of braces ({, }). Shift to their double symbols like '--' and '++', when necessary.\nEffectively use given premises, follow the syntax and structure demonstrated in the examples provided.\n\nExample 1:\n\nHypotheses:\nn, m: nat\nIHn: m + n = n + m\n\nGoal:\nm + S n = S n + m\n\nProof:\n```coq\nsimpl. rewrite <- IHn. auto.\nQed.```\n\nExample 2:\nHypotheses:\n\nGoal:\nforall n m : nat, m + n = n + m\n\n```coq\nintros n m. induction n.\n- simpl. auto.\n- simpl. rewrite <- IHn. auto.\nQed.```\n\nSolve This Proof State:\n\nHypotheses:\nn: nat\n\nGoal:\nfact (S n) = S n * fact n\n\nPremises:\nfact = fix fact (n : nat) : nat := match n with | 0 => 1 | S n0 => S n0 * fact n0 end : nat -> nat Arguments fact _%nat_scope\nInductive nat : Set := O : nat | S : nat -> nat Arguments S _%nat_scope\nFactorial.fact = fix fact (n : nat) : nat := match n with | 0 => 1 | S n0 => S n0 * fact n0 end : nat -> nat Arguments Factorial.fact _%nat_scope\nfact_0 = eq_refl : fact 0 = 1\nZnat.Nat2Z.inj_succ : forall n : nat, BinInt.Z.of_nat (S n) = BinInt.Z.succ (BinInt.Z.of_nat n)\nInit.Nat.sqrt_iter = fix sqrt_iter (k p q r : nat) {struct k} : nat := match k with | 0 => p | S k' => match r with | 0 => sqrt_iter k' (S p) (S (S q)) (S (S q)) | S r' => sqrt_iter k' p q r' end end : nat -> nat -> nat -> nat -> nat Arguments Init.Nat.sqrt_iter (_ _ _ _)%nat_scope\nNat.testbit_even_succ' : forall a n : nat, Nat.testbit (2 * a) (S n) = Nat.testbit a n\nNat.double_bits_succ : forall a n : nat, Nat.testbit (2 * a) (S n) = Nat.testbit a n\nNat.pred_succ : forall n : nat, Nat.pred (S n) = n\nInit.Nat.div2 = fix div2 (n : nat) : nat := match n with | S (S n') => S (div2 n') | _ => 0 end : nat -> nat Arguments Init.Nat.div2 _%nat_scope\nNat.testbit_odd_succ' : forall a n : nat, Nat.testbit (2 * a + 1) (S n) = Nat.testbit a n\nNat.testbit_even_succ : forall a n : nat, 0 <= n -> Nat.testbit (2 * a) (S n) = Nat.testbit a n\nNat.testbit_odd_succ : forall a n : nat, 0 <= n -> Nat.testbit (2 * a + 1) (S n) = Nat.testbit a n\nByteVector.to_Bvector = fix to_Bvector (n : nat) (v : ByteVector.ByteVector n) {struct v} : Bvector.Bvector (n * 8) := match v in (Vector.t _ n0) return (Bvector.Bvector (n0 * 8)) with | Vector.nil _ => Vector.nil bool | Vector.cons _ (Ascii.Ascii b0 b1 b2 b3 b4 b5 b6 b7) n0 v' => Vector.cons bool b0 (S (S (S (S (S (S (S (n0 * 8)))))))) (Vector.cons bool b1 (S (S (S (S (S (S (n0 * 8))))))) (Vector.cons bool b2 (S (S (S (S (S (n0 * 8)))))) (Vector.cons bool b3 (S (S (S (S (n0 * 8))))) (Vector.cons bool b4 (S (S (S (n0 * 8)))) (Vector.cons bool b5 (...\nNat.log2_succ_or : forall a : nat, Nat.log2 (S a) = S (Nat.log2 a) \\/ Nat.log2 (S a) = Nat.log2 a\nInit.Nat.divmod = fix divmod (x y q u : nat) {struct x} : nat * nat := match x with | 0 => (q, u) | S x' => match u with | 0 => divmod x' y (S q) y | S u' => divmod x' y q u' end end : nat -> nat -> nat -> nat -> nat * nat Arguments Init.Nat.divmod (_ _ _ _)%nat_scope\nNat.div2_bits : forall a n : nat, Nat.testbit (a / 2) n = Nat.testbit a (S n)\nNat.testbit_succ_r : forall (a : nat) (b : bool) (n : nat), Nat.testbit (2 * a + Nat.b2n b) (S n) = Nat.testbit a n\nInit.Nat.log2 = fun n : nat => Init.Nat.log2_iter (Init.Nat.pred n) 0 1 0 : nat -> nat Arguments Init.Nat.log2 _%nat_scope\nInit.Nat.odd = fun n : nat => negb (Init.Nat.even n) : nat -> bool Arguments Init.Nat.odd _%nat_scope\nNat.log2_eq_succ_is_pow2 : forall a : nat, Nat.log2 (S a) = S (Nat.log2 a) -> exists b : nat, S a = 2 ^ b\nVectorDef.uncons = fun (A : Type) (n : nat) (v : VectorDef.t A (S n)) => (VectorDef.hd v, VectorDef.tl v) : forall (A : Type) (n : nat), VectorDef.t A (S n) -> A * VectorDef.t A n Arguments VectorDef.uncons {A}%type_scope {n}%nat_scope\nNat.sub_succ_l : forall n m : nat, n <= m -> S m - n = S (m - n)\nNat.lt_succ_pred : forall z n : nat, z < n -> S (Nat.pred n) = n\nNat.le_wd = fun (n n' : nat) (Hn : n = n') (m m' : nat) (Hm : m = m') => (fun lemma : n < S m <-> n <= m => Morphisms.trans_co_eq_inv_impl_morphism RelationClasses.iff_Transitive (n <= m) (n < S m) (RelationClasses.symmetry lemma) (n' <= m') (n' <= m') (Morphisms.eq_proper_proxy (n' <= m'))) (Nat.lt_succ_r n m) ((fun lemma : n' < S m' <-> n' <= m' => Morphisms.trans_sym_co_inv_impl_morphism (RelationClasses.Equivalence_PER RelationClasses.iff_equivalence) (n' <= m') (n' < S m') (RelationClasses.symmetry lemma)) (Nat.lt_succ_r n' m') ((fun lemma : n = n' => Morphisms.trans_co_eq_inv_impl_morphism RelationClasses.iff_Transitive (n < S m) (n' < S m) (Nat.lt_wd n...\nNat.div2_succ_double : forall n : nat, Nat.div2 (S (2 * n)) = n\nlt = fun n m : nat => S n <= m : nat -> nat -> Prop Arguments lt (_ _)%nat_scope"}, {"role": "assistant", "content": "```coq\nintros.\nunfold fact.\nrewrite <- fact_0.\ninduction n.\n- simpl. auto.\n- simpl. rewrite IHn. auto.\nQed.\n```"}], "original": "intros. unfold fact. rewrite <- fact_0. induction n. - simpl. auto. - simpl. rewrite IHn. auto.", "succ": true}]