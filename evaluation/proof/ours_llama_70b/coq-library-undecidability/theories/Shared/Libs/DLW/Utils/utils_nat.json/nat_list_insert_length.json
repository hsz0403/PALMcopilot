[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": ["destruct l.", "-", "simpl.", "auto.", "-", "destruct (x <? n) eqn:E.", "+", "simpl."], "tactic": "+", "exn": "[Focus] Wrong bullet +: Current bullet + is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["destruct l.", "-", "simpl.", "auto.", "-", "destruct (x <? n) eqn:E.", "+", "simpl.", "shelve.", "+", "destruct (n <? x) eqn:F.", "*", "simpl."], "tactic": "*", "exn": "[Focus] Wrong bullet *: Current bullet * is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["destruct l.", "-", "simpl.", "auto.", "-", "destruct (x <? n) eqn:E.", "+", "simpl.", "shelve.", "+", "destruct (n <? x) eqn:F.", "*", "simpl.", "shelve.", "*", "simpl."], "tactic": "rewrite length_cons.", "exn": "Found no subterm matching \"length (?M1422 :: ?M1423)\" in the current goal.", "type": "no_subterm", "handled": true}, {"ctx": ["destruct l.", "-", "simpl.", "auto.", "-", "destruct (x <? n) eqn:E.", "+", "simpl.", "shelve.", "+", "destruct (n <? x) eqn:F.", "*", "simpl.", "shelve.", "*", "simpl.", "qsimpl time: 1 use: length_cons."], "tactic": "auto.", "exn": "No such goal.", "type": "no_goal", "handled": true}]}, "chat": [{"role": "user", "content": "I will give you a Coq proof state, including both hypotheses and a specific goal and your need to prove it. Your response should be a singular code block of Coq proof starting with \"```coq\n\", ending with \"Qed.```\", without any additional explanation or commentary. Follow to these guidelines:\nIntroduce variables using unique names to avoid any conflicts.\nKeep each command distinct and separated, avoid concatenations like ';' or '[cmd|cmd]'.\nOrganize your proof with bullets like '-', '+', and '*' instead of braces ({, }). Shift to their double symbols like '--' and '++', when necessary.\nEffectively use given premises, follow the syntax and structure demonstrated in the examples provided.\n\nExample 1:\n\nHypotheses:\nn, m: nat\nIHn: m + n = n + m\n\nGoal:\nm + S n = S n + m\n\nProof:\n```coq\nsimpl. rewrite <- IHn. auto.\nQed.```\n\nExample 2:\nHypotheses:\n\nGoal:\nforall n m : nat, m + n = n + m\n\n```coq\nintros n m. induction n.\n- simpl. auto.\n- simpl. rewrite <- IHn. auto.\nQed.```\n\nSolve This Proof State:\n\nHypotheses:\nx: nat\nl: list nat\n\nGoal:\nlength (nat_list_insert x l) <= S (length l)\n\nPremises:\nlength : forall A : Type, list A -> nat\nInductive nat : Set := O : nat | S : nat -> nat Arguments S _%nat_scope\nInductive list (A : Type) : Type := nil : list A | cons : A -> list A -> list A Arguments list _%type_scope Arguments nil {A}%type_scope Arguments cons {A}%type_scope a l%list_scope : rename\nnat_list_insert = fix nat_list_insert (x : nat) (l : list nat) {struct l} : list nat := match l with | nil => x :: nil | y :: l0 => if x <? y then x :: y :: l0 else if y <? x then y :: nat_list_insert x l0 else y :: l0 end : nat -> list nat -> list nat Arguments nat_list_insert _%nat_scope _%list_scope\nlength_cons : forall (X : Type) (x : X) (l : list X), length (x :: l) = S (length l)\nlast_length : forall (A : Type) (l : list A) (a : A), length (l ++ a :: nil) = S (length l)\nAdd_length : forall (A : Type) (a : A) (l l' : list A), Add a l l' -> length l' = S (length l)\nlist_an_app_inv : forall (a n : nat) (l r : list nat), list_an a n = l ++ r -> l = list_an a (length l) /\\ r = list_an (a + length l) (length r)\nremove_length_le : forall (A : Type) (eq_dec : forall x y : A, {x = y} + {x <> y}) (l : list A) (x : A), length (remove eq_dec x l) <= length l\nfirstn_all : forall (A : Type) (l : list A), firstn (length l) l = l\nfirstn_length_le : forall (A : Type) (l : list A) (n : nat), n <= length l -> length (firstn n l) = n\nfirstn_le_length : forall (A : Type) (n : nat) (l : list A), length (firstn n l) <= n\nnth_nth_nth_map : forall (A : Type) (l : list A) (n : nat) (d : A) (ln : list nat) (dn : nat), n < length ln \\/ length l <= dn -> nth (nth n ln dn) l d = nth n (map (fun x : nat => nth x l d) ln) d\nnth_error_app2 : forall (A : Type) (l l' : list A) (n : nat), length l <= n -> nth_error (l ++ l') n = nth_error l' (n - length l)\ncount_occ_cons_eq : forall (A : Type) (eq_dec : forall x y : A, {x = y} + {x <> y}) (l : list A) (x y : A), x = y -> count_occ eq_dec (x :: l) y = S (count_occ eq_dec l y)\nfind_pow2 = let fix loop (x n : nat) {struct n} : nat := match n with | 0 => 0 | S n0 => let (p, _) := div2 x in match p with | 0 => 0 | S _ => S (loop p n0) end end in fun x : nat => S (loop (Init.Nat.pred x) x) : nat -> nat Arguments find_pow2 _%nat_scope\nAdd_in : forall (A : Type) (a : A) (l l' : list A), Add a l l' -> forall x : A, In x l' < -> In x (a :: l)\nlmax_spec : forall (l : list nat) (x : nat), lmax l <= x < -> Forall (fun y : nat => y <= x) l\nprefix_length : forall (X : Type) (l m : list X), l <p m -> length l <= length m\nNoDup_incl_length : forall (A : Type) (l l' : list A), NoDup l -> incl l l' -> length l <= length l'\nNoDup_cons : forall (A : Type) (x : A) (l : list A), ~ In x l -> NoDup l -> NoDup (x :: l)\nNoDup_incl_NoDup : forall (A : Type) (l l' : list A), NoDup l -> length l' <= length l -> incl l l' -> NoDup l'\nPermutation.NoDup_Permutation_bis : forall (A : Type) (l l' : list A), NoDup l -> length l' <= length l -> incl l l' -> l ~p l'\nNoDup_length_incl : forall (A : Type) (l l' : list A), NoDup l -> length l' <= length l -> incl l l' -> incl l' l\nlist_split_length : forall (X : Type) (ll : list X) (k : nat), k <= length ll -> {l : list X & {r : list X | ll = l ++ r /\\ length l = k}}\nlt = fun n m : nat => S n <= m : nat -> nat -> Prop Arguments lt (_ _)%nat_scope\nInductive exists_between (Q : nat -> Prop) (k : nat) : nat -> Prop := exists_S : forall l : nat, exists_between Q k l -> exists_between Q k (S l) | exists_le : forall l : nat, k <= l -> Q l -> exists_between Q k (S l) Arguments exists_between _%function_scope (_ _)%nat_scope Arguments exists_S _%function_scope (_ _)%nat_scope Arguments exists_le _%function_scope (_ _)%nat_scope\nForall_cons : forall (A : Type) (P : A -> Prop) (x : A) (l : list A), P x -> Forall P l -> Forall P (x :: l)\nInductive nat : Set := O : nat | S : nat -> nat Arguments S _%nat_scope"}, {"role": "assistant", "content": "```coq\ndestruct l.\n- simpl. auto.\n- destruct (x <? n) eqn:E.\n  + simpl. auto.\n  + destruct (n <? x) eqn:F.\n    * simpl. auto.\n    * simpl. rewrite length_cons. auto.\nQed.```"}], "original": "destruct l. - simpl. auto. - destruct (x <? n) eqn:E. + simpl. auto. + destruct (n <? x) eqn:F. * simpl. auto. * simpl. rewrite length_cons. auto.", "succ": false}]