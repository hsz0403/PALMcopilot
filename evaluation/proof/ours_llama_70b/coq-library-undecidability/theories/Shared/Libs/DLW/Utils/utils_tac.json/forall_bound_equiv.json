[{"history": {"proof": "split; intros. + rewrite <- HPQ. auto. sfirstorder depth: 3. + rewrite HPQ. auto. sfirstorder depth: 3.", "repairs": ["", "", "", "", "hammer", "", "", "", "hammer"], "exceptions": [{"ctx": ["split; intros.", "+"], "tactic": "intros n HAn.", "exn": "n is already used.", "type": "used_var", "handled": true}, {"ctx": ["split; intros.", "+"], "tactic": "intros n' HAn.", "exn": "No product even after head-reduction.", "type": "no_product", "handled": true}, {"ctx": ["split; intros.", "+", "rewrite <- HPQ.", "auto."], "tactic": "+", "exn": "[Focus] Wrong bullet +: Current bullet + is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["split; intros.", "+", "rewrite <- HPQ.", "auto.", "shelve.", "+"], "tactic": "intros n HAn.", "exn": "n is already used.", "type": "used_var", "handled": true}, {"ctx": ["split; intros.", "+", "rewrite <- HPQ.", "auto.", "shelve.", "+"], "tactic": "intros n' HAn.", "exn": "No product even after head-reduction.", "type": "no_product", "handled": true}]}, "chat": [{"role": "user", "content": "I will give you a Coq proof state, including both hypotheses and a specific goal and your need to prove it. Your response should be a singular code block of Coq proof starting with \"```coq\n\", ending with \"Qed.```\", without any additional explanation or commentary. Follow to these guidelines:\nIntroduce variables using unique names to avoid any conflicts.\nKeep each command distinct and separated, avoid concatenations like ';' or '[cmd|cmd]'.\nOrganize your proof with bullets like '-', '+', and '*' instead of braces ({, }). Shift to their double symbols like '--' and '++', when necessary.\nEffectively use given premises, follow the syntax and structure demonstrated in the examples provided.\n\nExample 1:\n\nHypotheses:\nn, m: nat\nIHn: m + n = n + m\n\nGoal:\nm + S n = S n + m\n\nProof:\n```coq\nsimpl. rewrite <- IHn. auto.\nQed.```\n\nExample 2:\nHypotheses:\n\nGoal:\nforall n m : nat, m + n = n + m\n\n```coq\nintros n m. induction n.\n- simpl. auto.\n- simpl. rewrite <- IHn. auto.\nQed.```\n\nSolve This Proof State:\n\nHypotheses:\nX: Type\nQ: X -> Prop\nP: X -> Prop\nA: X -> Prop\nHPQ: forall n : X, A n -> P n <-> Q n\n\nGoal:\n(forall n : X, A n -> P n) <-> (forall n : X, A n -> Q n)\n\nPremises:\nTauto.FF : Tauto.GFormula where ?TA : [X : Type A : X -> Prop P : X -> Prop Q : X -> Prop HPQ : forall n : X, A n -> P n < -> Q n |- Type] ?TX : [X : Type A : X -> Prop P : X -> Prop Q : X -> Prop HPQ : forall n : X, A n -> P n < -> Q n |- Type] ?AA : [X : Type A : X -> Prop P : X -> Prop Q : X -> Prop HPQ : forall n : X, A n -> P n < -> Q n |- Type] ?AF : [X : Type A : X -> Prop P : X -> Prop Q : X -> Prop HPQ : forall n : X, A n -> P n < -> Q n |- Type]\nTauto.TT : Tauto.GFormula where ?TA : [X : Type A : X -> Prop P : X -> Prop Q : X -> Prop HPQ : forall n : X, A n -> P n < -> Q n |- Type] ?TX : [X : Type A : X -> Prop P : X -> Prop Q : X -> Prop HPQ : forall n : X, A n -> P n < -> Q n |- Type] ?AA : [X : Type A : X -> Prop P : X -> Prop Q : X -> Prop HPQ : forall n : X, A n -> P n < -> Q n |- Type] ?AF : [X : Type A : X -> Prop P : X -> Prop Q : X -> Prop HPQ : forall n : X, A n -> P n < -> Q n |- Type]\nTauto.X : ?TX -> Tauto.GFormula where ?TA : [X : Type A : X -> Prop P : X -> Prop Q : X -> Prop HPQ : forall n : X, A n -> P n < -> Q n |- Type] ?TX : [X : Type A : X -> Prop P : X -> Prop Q : X -> Prop HPQ : forall n : X, A n -> P n < -> Q n |- Type] ?AA : [X : Type A : X -> Prop P : X -> Prop Q : X -> Prop HPQ : forall n : X, A n -> P n < -> Q n |- Type] ?AF : [X : Type A : X -> Prop P : X -> Prop Q : X -> Prop HPQ : forall n : X, A n -> P n < -> Q n |- Type]\nTauto.N : Tauto.GFormula -> Tauto.GFormula where ?TA : [X : Type A : X -> Prop P : X -> Prop Q : X -> Prop HPQ : forall n : X, A n -> P n < -> Q n |- Type] ?TX : [X : Type A : X -> Prop P : X -> Prop Q : X -> Prop HPQ : forall n : X, A n -> P n < -> Q n |- Type] ?AA : [X : Type A : X -> Prop P : X -> Prop Q : X -> Prop HPQ : forall n : X, A n -> P n < -> Q n |- Type] ?AF : [X : Type A : X -> Prop P : X -> Prop Q : X -> Prop HPQ : forall n : X, A n -> P n < -> Q n |- Type]\nTauto.D : Tauto.GFormula -> Tauto.GFormula -> Tauto.GFormula where ?TA : [X : Type A : X -> Prop P : X -> Prop Q : X -> Prop HPQ : forall n : X, A n -> P n < -> Q n |- Type] ?TX : [X : Type A : X -> Prop P : X -> Prop Q : X -> Prop HPQ : forall n : X, A n -> P n < -> Q n |- Type] ?AA : [X : Type A : X -> Prop P : X -> Prop Q : X -> Prop HPQ : forall n : X, A n -> P n < -> Q n |- Type] ?AF : [X : Type A : X -> Prop P : X -> Prop Q : X -> Prop HPQ : forall n : X, A n -> P n < -> Q n |- Type]\nTauto.A : ?TA -> ?AA -> Tauto.GFormula where ?TA : [X : Type A : X -> Prop P : X -> Prop Q : X -> Prop HPQ : forall n : X, A n -> P n < -> Q n |- Type] ?TX : [X : Type A : X -> Prop P : X -> Prop Q : X -> Prop HPQ : forall n : X, A n -> P n < -> Q n |- Type] ?AA : [X : Type A : X -> Prop P : X -> Prop Q : X -> Prop HPQ : forall n : X, A n -> P n < -> Q n |- Type] ?AF : [X : Type A : X -> Prop P : X -> Prop Q : X -> Prop HPQ : forall n : X, A n -> P n < -> Q n |- Type]\nTauto.Cj : Tauto.GFormula -> Tauto.GFormula -> Tauto.GFormula where ?TA : [X : Type A : X -> Prop P : X -> Prop Q : X -> Prop HPQ : forall n : X, A n -> P n < -> Q n |- Type] ?TX : [X : Type A : X -> Prop P : X -> Prop Q : X -> Prop HPQ : forall n : X, A n -> P n < -> Q n |- Type] ?AA : [X : Type A : X -> Prop P : X -> Prop Q : X -> Prop HPQ : forall n : X, A n -> P n < -> Q n |- Type] ?AF : [X : Type A : X -> Prop P : X -> Prop Q : X -> Prop HPQ : forall n : X, A n -> P n < -> Q n |- Type]\nTauto.I : Tauto.GFormula -> option ?AF -> Tauto.GFormula -> Tauto.GFormula where ?TA : [X : Type A : X -> Prop P : X -> Prop Q : X -> Prop HPQ : forall n : X, A n -> P n < -> Q n |- Type] ?TX : [X : Type A : X -> Prop P : X -> Prop Q : X -> Prop HPQ : forall n : X, A n -> P n < -> Q n |- Type] ?AA : [X : Type A : X -> Prop P : X -> Prop Q : X -> Prop HPQ : forall n : X, A n -> P n < -> Q n |- Type] ?AF : [X : Type A : X -> Prop P : X -> Prop Q : X -> Prop HPQ : forall n : X, A n -> P n < -> Q n |- Type]\nTauto.eval_f : (?TX -> Prop) -> (?TA -> Prop) -> Tauto.GFormula -> Prop where ?TA : [X : Type A : X -> Prop P : X -> Prop Q : X -> Prop HPQ : forall n : X, A n -> P n < -> Q n |- Type] ?TX : [X : Type A : X -> Prop P : X -> Prop Q : X -> Prop HPQ : forall n : X, A n -> P n < -> Q n |- Type] ?AA : [X : Type A : X -> Prop P : X -> Prop Q : X -> Prop HPQ : forall n : X, A n -> P n < -> Q n |- Type] ?AF : [X : Type A : X -> Prop P : X -> Prop Q : X -> Prop HPQ : forall n : X, A n -> P n < -> Q n |- Type]\nVectorSpec.cons_inj : VectorDef.cons ?A ?a1 ?n ?v1 = VectorDef.cons ?A ?a2 ?n ?v2 -> ?a1 = ?a2 /\\ ?v1 = ?v2 where ?A : [X : Type A : X -> Prop P : X -> Prop Q : X -> Prop HPQ : forall n : X, A n -> P n < -> Q n |- Type] ?a1 : [X : Type A : X -> Prop P : X -> Prop Q : X -> Prop HPQ : forall n : X, A n -> P n < -> Q n |- ?A] ?a2 : [X : Type A : X -> Prop P : X -> Prop Q : X -> Prop HPQ : forall n : X, A n -> P n < -> Q n |- ?A] ?n : [X : Type A : X -> Prop P : X -> Prop Q : X -> Prop HPQ : forall n : X, A n -> P n < ->...-> Q n |- VectorDef.t ?A ?n]\nTauto.eval_f_morph : forall (ex : ?TX -> Prop) (ev ev' : ?TA -> Prop) (f : Tauto.GFormula), (forall a : ?TA, ev a <-> ev' a) -> Tauto.eval_f ex ev f < -> Tauto.eval_f ex ev' f where ?TA : [X : Type A : X -> Prop P : X -> Prop Q : X -> Prop HPQ : forall n : X, A n -> P n < -> Q n |- Type] ?TX : [X : Type A : X -> Prop P : X -> Prop Q : X -> Prop HPQ : forall n : X, A n -> P n < -> Q n |- Type] ?AA : [X : Type A : X -> Prop P : X -> Prop Q : X -> Prop HPQ : forall n : X, A n -> P n < -> Q n |- Type] ?AF : [X : Type A : X -> Prop P : X -> Prop Q : X -> Prop HPQ : forall n : X, A n ->...-> Q n |- Type]\nleft : ?A -> {?A} + {?B} where ?A : [X : Type A : X -> Prop P : X -> Prop Q : X -> Prop HPQ : forall n : X, A n -> P n < -> Q n |- Prop] ?B : [X : Type A : X -> Prop P : X -> Prop Q : X -> Prop HPQ : forall n : X, A n -> P n < -> Q n |- Prop]\nfst : ?A * ?B -> ?A where ?A : [X : Type A : X -> Prop P : X -> Prop Q : X -> Prop HPQ : forall n : X, A n -> P n < -> Q n |- Type] ?B : [X : Type A : X -> Prop P : X -> Prop Q : X -> Prop HPQ : forall n : X, A n -> P n < -> Q n |- Type]\nright : ?B -> {?A} + {?B} where ?A : [X : Type A : X -> Prop P : X -> Prop Q : X -> Prop HPQ : forall n : X, A n -> P n < -> Q n |- Prop] ?B : [X : Type A : X -> Prop P : X -> Prop Q : X -> Prop HPQ : forall n : X, A n -> P n < -> Q n |- Prop]\npair : ?A -> ?B -> ?A * ?B where ?A : [X : Type A : X -> Prop P : X -> Prop Q : X -> Prop HPQ : forall n : X, A n -> P n < -> Q n |- Type] ?B : [X : Type A : X -> Prop P : X -> Prop Q : X -> Prop HPQ : forall n : X, A n -> P n < -> Q n |- Type]\nTauto.GFormula_ind : forall P0 : Tauto.GFormula -> Prop, P0 Tauto.TT -> P0 Tauto.FF -> (forall t : ?TX, P0 (Tauto.X t)) -> (forall (t : ?TA) (a : ?AA), P0 (Tauto.A t a)) -> (forall g : Tauto.GFormula, P0 g -> forall g0 : Tauto.GFormula, P0 g0 -> P0 (Tauto.Cj g g0)) -> (forall g : Tauto.GFormula, P0 g -> forall g0 : Tauto.GFormula, P0 g0 -> P0 (Tauto.D g g0)) -> (forall g : Tauto.GFormula, P0 g -> P0 (Tauto.N g)) -> (forall g : Tauto.GFormula, P0 g -> forall (o : option ?AF) (g0 : Tauto.GFormula), P0 g0 -> P0 (Tauto.I g o g0)) ->...-> Q n |- Type]\nZifyClasses.uop_iff : forall p1 q1 : Prop, p1 < -> q1 -> ?Op p1 < -> ?Op q1 where ?Op : [X : Type A : X -> Prop P : X -> Prop Q : X -> Prop HPQ : forall n : X, A n -> P n < -> Q n |- Prop -> Prop] ?PropUOp : [X : Type A : X -> Prop P : X -> Prop Q : X -> Prop HPQ : forall n : X, A n -> P n < -> Q n |- ZifyClasses.PropUOp ?Op]\nZifyClasses.op_iff : forall p1 p2 q1 q2 : Prop, p1 < -> q1 -> p2 < -> q2 -> ?Op p1 p2 < -> ?Op q1 q2 where ?Op : [X : Type A : X -> Prop P : X -> Prop Q : X -> Prop HPQ : forall n : X, A n -> P n < -> Q n |- Prop -> Prop -> Prop] ?PropOp : [X : Type A : X -> Prop P : X -> Prop Q : X -> Prop HPQ : forall n : X, A n -> P n < -> Q n |- ZifyClasses.PropOp ?Op]\nRing_polynom.PEO : Ring_polynom.PExpr ?C where ?C : [X : Type A : X -> Prop P : X -> Prop Q : X -> Prop HPQ : forall n : X, A n -> P n < -> Q n |- Type]\nnil : list ?A where ?A : [X : Type A : X -> Prop P : X -> Prop Q : X -> Prop HPQ : forall n : X, A n -> P n < -> Q n |- Type]\nVectorDef.rect2 : forall P0 : forall n : nat, VectorDef.t ?A n -> VectorDef.t ?B n -> Type, P0 0 (VectorDef.nil ?A) (VectorDef.nil ?B) -> (forall (n : nat) (v1 : VectorDef.t ?A n) (v2 : VectorDef.t ?B n), P0 n v1 v2 -> forall (a : ?A) (b : ?B), P0 (S n) (VectorDef.cons ?A a n v1) (VectorDef.cons ?B b n v2)) -> forall (n : nat) (v1 : VectorDef.t ?A n) (v2 : VectorDef.t ?B n), P0 n v1 v2 where ?A : [X : Type A : X -> Prop P : X -> Prop Q : X -> Prop HPQ : forall n : X, A n -> P n < -> Q n |- Type] ?B : [X : Type A : X -> Prop P : X -> Prop Q : X ->...-> Q n |- Type]\ncons : ?A -> list ?A -> list ?A where ?A : [X : Type A : X -> Prop P : X -> Prop Q : X -> Prop HPQ : forall n : X, A n -> P n < -> Q n |- Type]\nNat.bi_induction : forall A : nat -> Prop, Morphisms.Proper (Morphisms.respectful eq iff) A -> A 0 -> (forall n : nat, A n <-> A (S n)) -> forall n : nat, A n\nBinNat.N.bi_induction : forall A : BinNums.N -> Prop, Morphisms.Proper (Morphisms.respectful eq iff) A -> A BinNums.N0 -> (forall n : BinNums.N, A n <-> A (BinNat.N.succ n)) -> forall n : BinNums.N, A n\nBinNat.N.central_induction : forall A : BinNums.N -> Prop, Morphisms.Proper (Morphisms.respectful eq iff) A -> forall z : BinNums.N, A z -> (forall n : BinNums.N, A n <-> A (BinNat.N.succ n)) -> forall n : BinNums.N, A n"}, {"role": "assistant", "content": "```coq\nintros.\nsplit; intros.\n+ intros n HAn.\n  rewrite <- HPQ.\n  auto.\n+ intros n HAn.\n  rewrite HPQ.\n  auto.\nQed."}], "original": "intros. split; intros. + intros n HAn. rewrite <- HPQ. auto. + intros n HAn. rewrite HPQ. auto.", "succ": true}]