[{"history": {"proof": "destruct l. - simpl. reflexivity. - simpl. qsimpl time: 1 use: lb_succ_spec.", "repairs": ["", "", "", "", "", "", "no_subterm"], "exceptions": [{"ctx": ["destruct l.", "-", "simpl.", "reflexivity.", "-", "simpl."], "tactic": "rewrite <- lb_succ_spec.", "exn": "Found no subterm matching \"bool2nat ?M1521 + \u27e6 ?M1522 \u27e7\" in the current goal.", "type": "no_subterm", "handled": true}, {"ctx": ["destruct l.", "-", "simpl.", "reflexivity.", "-", "simpl.", "qsimpl time: 1 use: lb_succ_spec."], "tactic": "reflexivity.", "exn": "No such goal.", "type": "no_goal", "handled": true}]}, "chat": [{"role": "user", "content": "I will give you a Coq proof state, including both hypotheses and a specific goal and your need to prove it. Your response should be a singular code block of Coq proof starting with \"```coq\n\", ending with \"Qed.```\", without any additional explanation or commentary. Follow to these guidelines:\nIntroduce variables using unique names to avoid any conflicts.\nKeep each command distinct and separated, avoid concatenations like ';' or '[cmd|cmd]'.\nOrganize your proof with bullets like '-', '+', and '*' instead of braces ({, }). Shift to their double symbols like '--' and '++', when necessary.\nEffectively use given premises, follow the syntax and structure demonstrated in the examples provided.\n\nExample 1:\n\nHypotheses:\nn, m: nat\nIHn: m + n = n + m\n\nGoal:\nm + S n = S n + m\n\nProof:\n```coq\nsimpl. rewrite <- IHn. auto.\nQed.```\n\nExample 2:\nHypotheses:\n\nGoal:\nforall n m : nat, m + n = n + m\n\n```coq\nintros n m. induction n.\n- simpl. auto.\n- simpl. rewrite <- IHn. auto.\nQed.```\n\nSolve This Proof State:\n\nHypotheses:\na: bool\nl: lb\n\nGoal:\nlb_plus a nil l = lb_succ a l\n\nPremises:\nlb_succ = fix lb_succ (a : bool) (l : lb) {struct l} : lb := match l with | nil => a :: nil | x :: l0 => let (r, z) := bin_add \u27d8 a x in z :: lb_succ r l0 end : bool -> lb -> lb Arguments lb_succ _%bool_scope _%list_scope\nlb_plus = fix lb_plus (a : bool) (l m : lb) {struct l} : lb := match l with | nil => lb_succ a m | x :: l0 => match m with | nil => lb_succ a l | y :: m0 => let (r, z) := bin_add a x y in z :: lb_plus r l0 m0 end end : bool -> lb -> lb -> lb Arguments lb_plus _%bool_scope (_ _)%list_scope\nInductive list (A : Type) : Type := nil : list A | cons : A -> list A -> list A Arguments list _%type_scope Arguments nil {A}%type_scope Arguments cons {A}%type_scope a l%list_scope : rename\nlb_succ_spec : forall (a : bool) (l : lb), \u27e6 lb_succ a l \u27e7 = bool2nat a + \u27e6 l \u27e7\nlb_join_nil_eq : forall a b : lb, a \u2191 b \u2242 nil -> a \u2242 nil /\\ b \u2242 nil\nlb_join_mono : forall l m a b : lb, l \u2aaf m -> a \u2aaf b -> l \u2191 a \u2aaf m \u2191 b\nlb_meet_mono : forall l m a b : lb, l \u2aaf m -> a \u2aaf b -> l \u2193 a \u2aaf m \u2193 b\nlb_mask_app : forall l m a b : lb, length l = length m -> l \u2aaf m -> a \u2aaf b -> l ++ a \u2aaf m ++ b\nlb_mask_equiv_app : forall l m a b : lb, length l = length m -> l \u2242 m -> a \u2242 b -> l ++ a \u2242 m ++ b\nlb_succ_bot : forall l : lb, lb_succ \u27d8 l \u2242 l\nlb_succ_spec_0 : forall l : lb, \u27e6 lb_succ \u27d8 l \u27e7 = \u27e6 l \u27e7\nlb_ortho_mask_nil : forall a x : lb, a \u27c2 x -> x \u2aaf a -> x \u2242 nil\nlb_succ_spec_1 : forall l : lb, \u27e6 lb_succ \u27d9 l \u27e7 = S \u27e6 l \u27e7\nlb_meet_app : forall l m a b : lb, length l = length m -> (l ++ a) \u2193 (m ++ b) = l \u2193 m ++ a \u2193 b\nmap_ext : forall (A B : Type) (f g : A -> B), (forall a : A, f a = g a) -> forall l : list A, map f l = map g l\nlb_pointwise_mono_left : forall f : bool -> bool -> bool, (forall x a b : bool, a \u2aa6 b -> f x a \u2aa6 f x b) -> f \u27d8 \u27d8 = \u27d8 -> forall l m k : lb, l \u2aaf m -> lb_pointwise f k l \u2aaf lb_pointwise f k m\nlb_meet_idem : forall a : lb, a \u2193 a = a\nlb_join_idem : forall a : lb, a \u2191 a = a\nlb_join_meet_idem : forall a b : lb, a \u2191 a \u2193 b \u2242 a\nlb_mask_meet : forall a b : lb, a \u2aaf b < -> a \u2193 b \u2242 a\nlb_join_inc_left : forall a b : lb, a \u2aaf a \u2191 b\nlb_meet_dec_left : forall a b : lb, a \u2193 b \u2aaf a\nlb_ortho_join : forall a x y : lb, a \u27c2 x \u2191 y < -> a \u27c2 x /\\ a \u27c2 y\nlb_meet_join_distr : forall a b c : lb, a \u2193 (b \u2191 c) \u2242 a \u2193 b \u2191 a \u2193 c\nlb_meet_join_idem : forall a b : lb, a \u2193 (a \u2191 b) \u2242 a\nlb_ortho_sym : forall a b : lb, a \u27c2 b -> b \u27c2 a\nlb_minus : forall a b : lb, a \u2aaf b -> {c : lb | a \u27c2 c /\\ b \u2242 a \u2191 c}\nlb_mask_join : forall a b : lb, a \u2aaf b < -> a \u2191 b \u2242 b"}, {"role": "assistant", "content": "```coq\ndestruct l.\n- simpl. reflexivity.\n- simpl. rewrite <- lb_succ_spec. reflexivity.\nQed.\n```"}], "original": "destruct l. - simpl. reflexivity. - simpl. rewrite <- lb_succ_spec. reflexivity.", "succ": true}]