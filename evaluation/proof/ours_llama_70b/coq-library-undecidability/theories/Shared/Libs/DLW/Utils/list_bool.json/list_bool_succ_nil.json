[{"history": {"proof": "intros H. inversion H; subst; auto. - sauto lq: on depth: 3. - sauto lq: on depth: 3.", "repairs": ["", "", "", "hammer", "", "hammer"], "exceptions": []}, "chat": [{"role": "user", "content": "I will give you a Coq proof state, including both hypotheses and a specific goal and your need to prove it. Your response should be a singular code block of Coq proof starting with \"```coq\n\", ending with \"Qed.```\", without any additional explanation or commentary. Follow to these guidelines:\nIntroduce variables using unique names to avoid any conflicts.\nKeep each command distinct and separated, avoid concatenations like ';' or '[cmd|cmd]'.\nOrganize your proof with bullets like '-', '+', and '*' instead of braces ({, }). Shift to their double symbols like '--' and '++', when necessary.\nEffectively use given premises, follow the syntax and structure demonstrated in the examples provided.\n\nExample 1:\n\nHypotheses:\nn, m: nat\nIHn: m + n = n + m\n\nGoal:\nm + S n = S n + m\n\nProof:\n```coq\nsimpl. rewrite <- IHn. auto.\nQed.```\n\nExample 2:\nHypotheses:\n\nGoal:\nforall n m : nat, m + n = n + m\n\n```coq\nintros n m. induction n.\n- simpl. auto.\n- simpl. rewrite <- IHn. auto.\nQed.```\n\nSolve This Proof State:\n\nHypotheses:\nl: list bool\n\nGoal:\nlist_bool_succ nil l -> l = Zero :: nil\n\nPremises:\nNotation Zero := false\nInductive list_bool_succ : list bool -> list bool -> Prop := in_lbs_0 : forall (k : nat) (l : list bool), list_bool_succ (list_repeat One k ++ Zero :: l) (list_repeat Zero k ++ One :: l) | in_lbs_1 : forall k : nat, list_bool_succ (list_repeat One k) (list_repeat Zero (S k)) Arguments list_bool_succ (_ _)%list_scope Arguments in_lbs_0 _%nat_scope _%list_scope Arguments in_lbs_1 _%nat_scope\nInductive list (A : Type) : Type := nil : list A | cons : A -> list A -> list A Arguments list _%type_scope Arguments nil {A}%type_scope Arguments cons {A}%type_scope a l%list_scope : rename\nlist_bool_succ_fun : forall l m1 m2 : list bool, list_bool_succ l m1 -> list_bool_succ l m2 -> m1 = m2\nPermutation.Permutation_length_2_inv : forall (A : Type) (a1 a2 : A) (l : list A), a1 :: a2 :: nil ~p l -> l = a1 :: a2 :: nil \\/ l = a2 :: a1 :: nil\napp_removelast_last : forall (A : Type) (l : list A) (d : A), l <> nil -> l = removelast l ++ last l d :: nil\nPermutation.Permutation_length_1_inv : forall (A : Type) (a : A) (l : list A), a :: nil ~p l -> l = a :: nil\nPermutation.Permutation_nil : forall (A : Type) (l : list A), nil ~p l -> l = nil\nin_lbs_0 : forall (k : nat) (l : list bool), list_bool_succ (list_repeat One k ++ Zero :: l) (list_repeat Zero k ++ One :: l)\nPermutation.Permutation_ind : forall (A : Type) (P : list A -> list A -> Prop), P nil nil -> (forall (x : A) (l l' : list A), l ~p l' -> P l l' -> P (x :: l) (x :: l')) -> (forall (x y : A) (l : list A), P (y :: x :: l) (x :: y :: l)) -> (forall l l' l'' : list A, l ~p l' -> P l l' -> l' ~p l'' -> P l' l'' -> P l l'') -> forall l l0 : list A, l ~p l0 -> P l l0\nlist_rec : forall (A : Type) (P : list A -> Set), P nil -> (forall (a : A) (l : list A), P l -> P (a :: l)) -> forall l : list A, P l\nlist_ind : forall (A : Type) (P : list A -> Prop), P nil -> (forall (a : A) (l : list A), P l -> P (a :: l)) -> forall l : list A, P l\nlist_rect : forall (A : Type) (P : list A -> Type), P nil -> (forall (a : A) (l : list A), P l -> P (a :: l)) -> forall l : list A, P l\nlist_One_Zero_inj : forall (a b : nat) (l m : list bool), list_repeat One a ++ Zero :: l = list_repeat One b ++ Zero :: m -> a = b /\\ l = m\nrev_ind : forall (A : Type) (P : list A -> Prop), P nil -> (forall (x : A) (l : list A), P l -> P (l ++ x :: nil)) -> forall l : list A, P l\nnat_sorted_rect : forall P : list nat -> Type, P nil -> (forall x : nat, P (x :: nil)) -> (forall (x y : nat) (l : list nat), x < y -> P (y :: l) -> P (x :: y :: l)) -> forall l : list nat, nat_sorted l -> P l\nlist_nat_bool = fix list_nat_bool (ln : list nat) : list bool := match ln with | nil => nil | x :: ll => list_repeat Zero x ++ One :: list_nat_bool ll end : list nat -> list bool Arguments list_nat_bool _%list_scope\nInductive Permutation (A : Type) : list A -> list A -> Prop := perm_nil : nil ~p nil | perm_skip : forall (x : A) (l l' : list A), l ~p l' -> x :: l ~p x :: l' | perm_swap : forall (x y : A) (l : list A), y :: x :: l ~p x :: y :: l | perm_trans : forall l l' l'' : list A, l ~p l' -> l' ~p l'' -> l ~p l'' Arguments Permutation.Permutation [A]%type_scope (_ _)%list_scope Arguments Permutation.perm_nil _%type_scope Arguments Permutation.perm_skip [A]%type_scope _ [l l']%list_scope Arguments Permutation.perm_swap [A]%type_scope _ _ _%list_scope Arguments Permutation.perm_trans [A]%type_scope [l l' l'']%list_scope\nexists_last : forall (A : Type) (l : list A), l <> nil -> {l' : list A & {a : A | l = l' ++ a :: nil}}\nlist_bool_nat = fix list_bool_nat (l : list bool) : nat := match l with | nil => 1 | One :: l0 => 1 + 2 * list_bool_nat l0 | Zero :: l0 => 0 + 2 * list_bool_nat l0 end : list bool -> nat Arguments list_bool_nat _%list_scope\nPermutation.Permutation_cons_append : forall (A : Type) (l : list A) (x : A), x :: l ~p l ++ x :: nil\napp_nil_r : forall (A : Type) (l : list A), l ++ nil = l\napp_nil_end : forall (A : Type) (l : list A), l = l ++ nil\nin_lbs_1 : forall k : nat, list_bool_succ (list_repeat One k) (list_repeat Zero (S k))\nRelation_Operators.Desc_ind : forall (A : Set) (leA : A -> A -> Prop) (P : list A -> Prop), P nil -> (forall x : A, P (x :: nil)) -> (forall (x y : A) (l : list A), Relation_Operators.clos_refl A leA x y -> Relation_Operators.Desc A leA (l ++ y :: nil) -> P (l ++ y :: nil) -> P ((l ++ y :: nil) ++ x :: nil)) -> forall l : list A, Relation_Operators.Desc A leA l -> P l\nRelation_Operators.Desc_sind : forall (A : Set) (leA : A -> A -> Prop) (P : list A -> SProp), P nil -> (forall x : A, P (x :: nil)) -> (forall (x y : A) (l : list A), Relation_Operators.clos_refl A leA x y -> Relation_Operators.Desc A leA (l ++ y :: nil) -> P (l ++ y :: nil) -> P ((l ++ y :: nil) ++ x :: nil)) -> forall l : list A, Relation_Operators.Desc A leA l -> P l\nrev_list_ind : forall (A : Type) (P : list A -> Prop), P nil -> (forall (a : A) (l : list A), P (rev l) -> P (rev (a :: l))) -> forall l : list A, P (rev l)\nnat_list_insert = fix nat_list_insert (x : nat) (l : list nat) {struct l} : list nat := match l with | nil => x :: nil | y :: l0 => if x <? y then x :: y :: l0 else if y <? x then y :: nat_list_insert x l0 else y :: l0 end : nat -> list nat -> list nat Arguments nat_list_insert _%nat_scope _%list_scope"}, {"role": "assistant", "content": "```coq\nintros H.\ninversion H; subst; auto.\nQed.```"}], "original": "intros H. inversion H; subst; auto.", "succ": true}]