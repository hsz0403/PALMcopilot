[{"history": {"proof": "intros a b c H. rewrite H. reflexivity.", "repairs": ["", "", ""], "exceptions": []}, "chat": [{"role": "user", "content": "I will give you a Coq proof state, including both hypotheses and a specific goal and your need to prove it. Your response should be a singular code block of Coq proof starting with \"```coq\n\", ending with \"Qed.```\", without any additional explanation or commentary. Follow to these guidelines:\nIntroduce variables using unique names to avoid any conflicts.\nKeep each command distinct and separated, avoid concatenations like ';' or '[cmd|cmd]'.\nOrganize your proof with bullets like '-', '+', and '*' instead of braces ({, }). Shift to their double symbols like '--' and '++', when necessary.\nEffectively use given premises, follow the syntax and structure demonstrated in the examples provided.\n\nExample 1:\n\nHypotheses:\nn, m: nat\nIHn: m + n = n + m\n\nGoal:\nm + S n = S n + m\n\nProof:\n```coq\nsimpl. rewrite <- IHn. auto.\nQed.```\n\nExample 2:\nHypotheses:\n\nGoal:\nforall n m : nat, m + n = n + m\n\n```coq\nintros n m. induction n.\n- simpl. auto.\n- simpl. rewrite <- IHn. auto.\nQed.```\n\nSolve This Proof State:\n\nHypotheses:\n\n\nGoal:\nforall a b c : Z, b = c -> Z.add a b = Z.add a c\n\nPremises:\nInductive Z : Set := Z0 : Z | Zpos : positive -> Z | Zneg : positive -> Z Arguments Zpos _%positive_scope Arguments Zneg _%positive_scope\nN.add = fun n m : N => match n with | 0%N => m | N.pos p => match m with | 0%N => n | N.pos q => N.pos (p + q) end end : N -> N -> N Arguments N.add (_ _)%N_scope\nZ_div_plus_full : forall a b c : Z, c <> 0 -> (a + b * c) / c = a / c + b\nZ.div_add : forall a b c : Z, c <> 0 -> (a + b * c) / c = a / c + b\nZ.nocarry_equiv : forall a b c : Z, c / 2 = Z.lor (Z.land a b) (Z.land c (Z.lor a b)) -> Z.testbit c 0 = false -> c = 0 < -> Z.land a b = 0\nZ.mod_add : forall a b c : Z, c <> 0 -> (a + b * c) mod c = a mod c\nZ.quot_add : forall a b c : Z, c <> 0 -> 0 <= (a + b * c) * a -> (a + b * c) \u00f7 c = a \u00f7 c + b\nZ.rem_add : forall a b c : Z, c <> 0 -> 0 <= (a + b * c) * a -> Z.rem (a + b * c) c = Z.rem a c\nZ.pow_le_mono_r : forall a b c : Z, 0 < a -> b <= c -> a ^ b <= a ^ c\nZ_div_plus_full_l : forall a b c : Z, b <> 0 -> (a * b + c) / b = a + c / b\nZ.div_add_l : forall a b c : Z, b <> 0 -> (a * b + c) / b = a + c / b\nZ.quot_add_l : forall a b c : Z, b <> 0 -> 0 <= (a * b + c) * c -> (a * b + c) \u00f7 b = a + c \u00f7 b\nZ.add_carry_bits : forall (a b : Z) (c0 : bool), exists c : Z, a + b + Z.b2z c0 = Z.lxor (Z.lxor a b) c /\\ c / 2 = Z.lor (Z.land a b) (Z.land c (Z.lor a b)) /\\ Z.testbit c 0 = c0\nZ.add_carry_bits_aux : forall n : Z, 0 <= n -> forall (a b : Z) (c0 : bool), - 2 ^ n <= a < 2 ^ n -> - 2 ^ n <= b < 2 ^ n -> exists c : Z, a + b + Z.b2z c0 = Z.lxor (Z.lxor a b) c /\\ c / 2 = Z.lor (Z.land a b) (Z.land c (Z.lor a b)) /\\ Z.testbit c 0 = c0\nZ.add3_bit0 : forall a b c : Z, Z.testbit (a + b + c) 0 = xorb (xorb (Z.testbit a 0) (Z.testbit b 0)) (Z.testbit c 0)\nZ.add_nocarry_lxor : forall a b : Z, Z.land a b = 0 -> a + b = Z.lxor a b\nZ.bits_inj' : forall a b : Z, (forall n : Z, 0 <= n -> Z.testbit a n = Z.testbit b n) -> a = b\nZ.div_mod : forall a b : Z, b <> 0 -> a = b * (a / b) + a mod b\nZ.quot_rem : forall a b : Z, b <> 0 -> a = b * (a \u00f7 b) + Z.rem a b\nZ.div_unique : forall a b q r : Z, 0 <= r < b \\/ b < r <= 0 -> a = b * q + r -> q = a / b\nZ.div_eucl_eq : forall a b : Z, b <> 0 -> let (q, r) := Z.div_eucl a b in a = b * q + r\nZ_div_mod_full : forall a b : Z, b <> 0 -> let (q, r) := Z.div_eucl a b in a = b * q + r /\\ Remainder r b\nZ_div_mod : forall a b : Z, b > 0 -> let (q, r) := Z.div_eucl a b in a = b * q + r /\\ 0 <= r < b\nZ.pow_gt_lin_r : forall a b : Z, 1 < a -> 0 <= b -> b < a ^ b\nZ.quotrem_eq : forall a b : Z, let (q, r) := Z.quotrem a b in a = q * b + r\nZ.pow_nonzero : forall a b : Z, a <> 0 -> 0 <= b -> a ^ b <> 0\nZ.pow_pos_nonneg : forall a b : Z, 0 < a -> 0 <= b -> 0 < a ^ b"}, {"role": "assistant", "content": "```coq\nintros a b c H.\nrewrite H.\nreflexivity.\nQed.\n```"}], "original": "intros a b c H. rewrite H. reflexivity.", "succ": true}]