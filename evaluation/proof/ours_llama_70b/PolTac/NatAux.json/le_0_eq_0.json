[{"history": {"proof": "intros n. induction n. - auto. - intros H. sfirstorder depth: 3.", "repairs": ["", "", "", "", "", "", "hammer"], "exceptions": []}, "chat": [{"role": "user", "content": "I will give you a Coq proof state, including both hypotheses and a specific goal and your need to prove it. Your response should be a singular code block of Coq proof starting with \"```coq\n\", ending with \"Qed.```\", without any additional explanation or commentary. Follow to these guidelines:\nIntroduce variables using unique names to avoid any conflicts.\nKeep each command distinct and separated, avoid concatenations like ';' or '[cmd|cmd]'.\nOrganize your proof with bullets like '-', '+', and '*' instead of braces ({, }). Shift to their double symbols like '--' and '++', when necessary.\nEffectively use given premises, follow the syntax and structure demonstrated in the examples provided.\n\nExample 1:\n\nHypotheses:\nn, m: nat\nIHn: m + n = n + m\n\nGoal:\nm + S n = S n + m\n\nProof:\n```coq\nsimpl. rewrite <- IHn. auto.\nQed.```\n\nExample 2:\nHypotheses:\n\nGoal:\nforall n m : nat, m + n = n + m\n\n```coq\nintros n m. induction n.\n- simpl. auto.\n- simpl. rewrite <- IHn. auto.\nQed.```\n\nSolve This Proof State:\n\nHypotheses:\n\n\nGoal:\nforall n : nat, n <= 0 -> n = 0\n\nPremises:\nInductive nat : Set := O : nat | S : nat -> nat Arguments S _%nat_scope\nle_n_0_eq : forall n : nat, n <= 0 -> 0 = n\nNat.gcd_0_l_nonneg : forall n : nat, 0 <= n -> Nat.gcd 0 n = n\nNat.gcd_0_r_nonneg : forall n : nat, 0 <= n -> Nat.gcd n 0 = n\nNat.divide_0_l : forall n : nat, Nat.divide 0 n -> n = 0\nNat.log2_nonpos : forall n : nat, n <= 0 -> Nat.log2 n = 0\nNat.eq_mul_0_r : forall n m : nat, n * m = 0 -> n <> 0 -> m = 0\nNat.eq_mul_0_l : forall n m : nat, n * m = 0 -> m <> 0 -> n = 0\nNat.mul_eq_0_r : forall n m : nat, n * m = 0 -> n <> 0 -> m = 0\nNat.mul_eq_0_l : forall n m : nat, n * m = 0 -> m <> 0 -> n = 0\nNat.gcd_eq_0_l : forall n m : nat, Nat.gcd n m = 0 -> n = 0\nmult_is_O : forall n m : nat, n * m = 0 -> n = 0 \\/ m = 0\nplus_is_O : forall n m : nat, n + m = 0 -> n = 0 /\\ m = 0\nNat.gcd_diag_nonneg : forall n : nat, 0 <= n -> Nat.gcd n n = n\nNat.divide_1_r_nonneg : forall n : nat, 0 <= n -> Nat.divide n 1 -> n = 1\nNat.divide_antisym_nonneg : forall n m : nat, 0 <= n -> 0 <= m -> Nat.divide n m -> Nat.divide m n -> n = m\nNat.gcd_eq_0_r : forall n m : nat, Nat.gcd n m = 0 -> m = 0\nNat.le_0_r : forall n : nat, n <= 0 < -> n = 0\nNat.gcd_mul_diag_l : forall n m : nat, 0 <= n -> Nat.gcd n (n * m) = n\nNat.eq_mul_1_nonneg : forall n m : nat, 0 <= n -> n * m = 1 -> n = 1 /\\ m = 1\nNat.order_induction'_0 : forall A : nat -> Prop, Morphisms.Proper (Morphisms.respectful eq iff) A -> A 0 -> (forall n : nat, 0 <= n -> A n -> A (S n)) -> (forall n : nat, n <= 0 -> A n -> A (Nat.pred n)) -> forall n : nat, A n\nNat.eq_add_1 : forall n m : nat, n + m = 1 -> n = 1 /\\ m = 0 \\/ n = 0 /\\ m = 1\nNat.divide_gcd_iff : forall n m : nat, 0 <= n -> Nat.divide n m < -> Nat.gcd n m = n\nNat.mul_0_r : forall n : nat, n * 0 = 0\nNat.sub_0_l : forall n : nat, 0 - n = 0\nNat.mul_0_l : forall n : nat, 0 * n = 0"}, {"role": "assistant", "content": "```coq\nintros n. induction n.\n- auto.\n- intros H. simpl in H. contradiction H. Qed.\n```"}], "original": "intros n. induction n. - auto. - intros H. simpl in H. contradiction H.", "succ": true}]