[{"history": {"proof": "intros d. unfold reboot. reflexivity.", "repairs": ["", "", ""], "exceptions": []}, "chat": [{"role": "user", "content": "I will give you a Coq proof state, including both hypotheses and a specific goal and your need to prove it. Your response should be a singular code block of Coq proof starting with \"```coq\n\", ending with \"Qed.```\", without any additional explanation or commentary. Follow to these guidelines:\nIntroduce variables using unique names to avoid any conflicts.\nKeep each command distinct and separated, avoid concatenations like ';' or '[cmd|cmd]'.\nOrganize your proof with bullets like '-', '+', and '*' instead of braces ({, }). Shift to their double symbols like '--' and '++', when necessary.\nEffectively use given premises, follow the syntax and structure demonstrated in the examples provided.\n\nExample 1:\n\nHypotheses:\nn, m: nat\nIHn: m + n = n + m\n\nGoal:\nm + S n = S n + m\n\nProof:\n```coq\nsimpl. rewrite <- IHn. auto.\nQed.```\n\nExample 2:\nHypotheses:\n\nGoal:\nforall n m : nat, m + n = n + m\n\n```coq\nintros n m. induction n.\n- simpl. auto.\n- simpl. rewrite <- IHn. auto.\nQed.```\n\nSolve This Proof State:\n\nHypotheses:\norig_base_params: BaseParams\none_node_params: OneNodeParams orig_base_params\nraft_params: RaftParams orig_base_params\n\nGoal:\nforall d : RaftState.raft_data term name entry logIndex serverType data clientId output, reboot (reboot d) = reboot d\n\nPremises:\nRecord entry : Type := mkEntry { eAt : name; eClient : clientId; eId : nat; eIndex : logIndex; eTerm : term; eInput : input } Arguments mkEntry _ _ _%nat_scope\nterm = nat : Set\nraft_data = RaftState.raft_data term name entry logIndex serverType data clientId output : Type\nRecord OneNodeParams (P : BaseParams) : Type := Build_OneNodeParams { init : data; handler : input -> data -> output * data } Arguments Build_OneNodeParams _ _ _%function_scope\nlogIndex = nat : Set\nreboot = fun state : RaftState.raft_data term name entry logIndex serverType data clientId output => mkRaft_data (currentTerm state) (votedFor state) (leaderId state) (log state) (commitIndex state) (lastApplied state) (stateMachine state) [] [] false [] Follower (clientCache state) (electoralVictories state) : RaftState.raft_data term name entry logIndex serverType data clientId output -> raft_data\nclientId = fun (orig_base_params : BaseParams) (RaftParams0 : RaftParams orig_base_params) => let (_, _, _, clientId, _) := RaftParams0 in clientId : forall orig_base_params : BaseParams, RaftParams orig_base_params -> Type Arguments clientId {orig_base_params RaftParams}\ndata = fun BaseParams0 : BaseParams => let (data, _, _) := BaseParams0 in data : BaseParams -> Type Arguments data {BaseParams}\nRecord RaftParams (orig_base_params : BaseParams) : Type := Build_RaftParams { N : nat; input_eq_dec : forall x y : input, {x = y} + {x <> y}; output_eq_dec : forall x y : output, {x = y} + {x <> y}; clientId : Type; clientId_eq_dec : forall x y : clientId, {x = y} + {x <> y} } Arguments Build_RaftParams _ _%nat_scope (_ _)%function_scope [clientId]%type_scope _%function_scope\nname = fin N : Type\noutput = fun BaseParams0 : BaseParams => let (_, _, output) := BaseParams0 in output : BaseParams -> Type Arguments output {BaseParams}\nInductive serverType : Set := Follower : serverType | Candidate : serverType | Leader : serverType\nModule RaftState := Struct Record raft_data (term name entry logIndex serverType stateMachineData clientId output : Type) : Type := mkRaft_data { currentTerm : term; votedFor : option name; leaderId : option name; log : list entry; commitIndex : logIndex; lastApplied : logIndex; stateMachine : stateMachineData; nextIndex : list (name * logIndex); matchIndex : list (name * logIndex); shouldSend : bool; votesReceived : list name; type : serverType; clientCache : list (clientId * (nat * output)); electoralVictories : list (term * list name * list entry) } Definition currentTerm : forall term name entry logIndex serverType stateMachineData\napplyEntry = fun (st : RaftState.raft_data term name entry logIndex serverType data clientId output) (e : entry) => let (out, d) := handler (eInput e) (stateMachine st) in ([out], {[{[st with clientCache := assoc_set clientId_eq_dec (clientCache st) (eClient e) (eId e, out)]} with stateMachine := d]}) : RaftState.raft_data term name entry logIndex serverType data clientId output -> entry -> list output * RaftState.raft_data term name entry logIndex serverType data clientId output\nraft_net_invariant_reboot = fun P : network -> Prop => forall (net net' : network) (d : RaftState.raft_data term name entry logIndex serverType data clientId output) (h : Net.name) (d' : raft_data), reboot d = d' -> P net -> raft_intermediate_reachable net -> nwState net h = d -> (forall h' : Net.name, nwState net' h' = update name_eq_dec (nwState net) h d' h') -> nwPackets net = nwPackets net' -> P net' : (network -> Prop) -> Prop Arguments raft_net_invariant_reboot _%function_scope\ngetNextIndex = fun (state : RaftState.raft_data term name entry logIndex serverType data clientId output) (h : name) => assoc_default name_eq_dec (nextIndex state) h (maxIndex (log state)) : RaftState.raft_data term name entry logIndex serverType data clientId output -> name -> logIndex\ngetLastId = fun (state : RaftState.raft_data term name entry logIndex serverType data clientId output) (client : clientId) => assoc clientId_eq_dec (clientCache state) client : RaftState.raft_data term name entry logIndex serverType data clientId output -> clientId -> option (nat * output)\nadvanceCurrentTerm = fun (state : RaftState.raft_data term name entry logIndex serverType data clientId output) (newTerm : nat) => if newTerm >? currentTerm state then {[{[{[{[state with currentTerm := newTerm]} with votedFor := None]} with type := Follower]} with leaderId := None]} else state : RaftState.raft_data term name entry logIndex serverType data clientId output -> nat -> RaftState.raft_data term name entry logIndex serverType data clientId output Arguments advanceCurrentTerm _ _%nat_scope\nset_raft_data_currentTerm : forall term name entry logIndex serverType stateMachineData clientId output : Type, RaftState.raft_data term name entry logIndex serverType stateMachineData clientId output -> term -> RaftState.raft_data term name entry logIndex serverType stateMachineData clientId output\nset_raft_data_type : forall term name entry logIndex serverType stateMachineData clientId output : Type, RaftState.raft_data term name entry logIndex serverType stateMachineData clientId output -> serverType -> RaftState.raft_data term name entry logIndex serverType stateMachineData clientId output\nset_raft_data_lastApplied : forall term name entry logIndex serverType stateMachineData clientId output : Type, RaftState.raft_data term name entry logIndex serverType stateMachineData clientId output -> logIndex -> RaftState.raft_data term name entry logIndex serverType stateMachineData clientId output\nset_raft_data_commitIndex : forall term name entry logIndex serverType stateMachineData clientId output : Type, RaftState.raft_data term name entry logIndex serverType stateMachineData clientId output -> logIndex -> RaftState.raft_data term name entry logIndex serverType stateMachineData clientId output\nset_raft_data_log : forall term name entry logIndex serverType stateMachineData clientId output : Type, RaftState.raft_data term name entry logIndex serverType stateMachineData clientId output -> list entry -> RaftState.raft_data term name entry logIndex serverType stateMachineData clientId output\nset_raft_data_votedFor : forall term name entry logIndex serverType stateMachineData clientId output : Type, RaftState.raft_data term name entry logIndex serverType stateMachineData clientId output -> option name -> RaftState.raft_data term name entry logIndex serverType stateMachineData clientId output\nset_raft_data_leaderId : forall term name entry logIndex serverType stateMachineData clientId output : Type, RaftState.raft_data term name entry logIndex serverType stateMachineData clientId output -> option name -> RaftState.raft_data term name entry logIndex serverType stateMachineData clientId output\nset_raft_data_votesReceived : forall term name entry logIndex serverType stateMachineData clientId output : Type, RaftState.raft_data term name entry logIndex serverType stateMachineData clientId output -> list name -> RaftState.raft_data term name entry logIndex serverType stateMachineData clientId output\nset_raft_data_shouldSend : forall term name entry logIndex serverType stateMachineData clientId output : Type, RaftState.raft_data term name entry logIndex serverType stateMachineData clientId output -> bool -> RaftState.raft_data term name entry logIndex serverType stateMachineData clientId output\nset_raft_data_stateMachine : forall term name entry logIndex serverType stateMachineData clientId output : Type, RaftState.raft_data term name entry logIndex serverType stateMachineData clientId output -> stateMachineData -> RaftState.raft_data term name entry logIndex serverType stateMachineData clientId output\ncacheApplyEntry = fun (st : RaftState.raft_data term name entry logIndex serverType data clientId output) (e : entry) => match getLastId st (eClient e) with | Some (id, o) => if id >? eId e then ([], st) else if eId e == id then ([o], st) else applyEntry st e | None => applyEntry st e end : RaftState.raft_data term name entry logIndex serverType data clientId output -> entry -> list output * RaftState.raft_data term name entry logIndex serverType data clientId output\nset_raft_data_nextIndex : forall term name entry logIndex serverType stateMachineData clientId output : Type, RaftState.raft_data term name entry logIndex serverType stateMachineData clientId output -> list (name * logIndex) -> RaftState.raft_data term name entry logIndex serverType stateMachineData clientId output\nset_raft_data_matchIndex : forall term name entry logIndex serverType stateMachineData clientId output : Type, RaftState.raft_data term name entry logIndex serverType stateMachineData clientId output -> list (name * logIndex) -> RaftState.raft_data term name entry logIndex serverType stateMachineData clientId output\nset_raft_data_clientCache : forall term name entry logIndex serverType stateMachineData clientId output : Type, RaftState.raft_data term name entry logIndex serverType stateMachineData clientId output -> list (clientId * (nat * output)) -> RaftState.raft_data term name entry logIndex serverType stateMachineData clientId output\nset_raft_data_electoralVictories : forall term name entry logIndex serverType stateMachineData clientId output : Type, RaftState.raft_data term name entry logIndex serverType stateMachineData clientId output -> list (term * list name * list entry) -> RaftState.raft_data term name entry logIndex serverType stateMachineData clientId output\nRaftState.currentTerm : forall term name entry logIndex serverType stateMachineData clientId output : Type, RaftState.raft_data term name entry logIndex serverType stateMachineData clientId output -> term\nRaftState.type : forall term name entry logIndex serverType stateMachineData clientId output : Type, RaftState.raft_data term name entry logIndex serverType stateMachineData clientId output -> serverType\nRaftState.commitIndex : forall term name entry logIndex serverType stateMachineData clientId output : Type, RaftState.raft_data term name entry logIndex serverType stateMachineData clientId output -> logIndex\nRaftState.lastApplied : forall term name entry logIndex serverType stateMachineData clientId output : Type, RaftState.raft_data term name entry logIndex serverType stateMachineData clientId output -> logIndex\nRaftState.log : forall term name entry logIndex serverType stateMachineData clientId output : Type, RaftState.raft_data term name entry logIndex serverType stateMachineData clientId output -> list entry"}, {"role": "assistant", "content": "```coq\nintros d.\nunfold reboot.\nreflexivity.\nQed.```"}], "original": "intros d. unfold reboot. reflexivity.", "succ": true}]