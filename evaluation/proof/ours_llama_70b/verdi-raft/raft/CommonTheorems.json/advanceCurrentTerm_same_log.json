[{"history": {"proof": "intros st t. unfold advanceCurrentTerm. destruct (currentTerm st <? t) eqn:H. - simpl. qsimpl time: 1. - reflexivity.", "repairs": ["", "", "", "", "", "no_subterm", "", ""], "exceptions": [{"ctx": ["intros st t.", "unfold advanceCurrentTerm.", "destruct (currentTerm st <? t) eqn:H.", "-", "simpl."], "tactic": "rewrite <- H.", "exn": "Found no subterm matching \"true\" in the current goal.", "type": "no_subterm", "handled": true}, {"ctx": ["intros st t.", "unfold advanceCurrentTerm.", "destruct (currentTerm st <? t) eqn:H.", "-", "simpl.", "qsimpl time: 1."], "tactic": "reflexivity.", "exn": "No such goal. Focus next goal with bullet -.", "type": "next_goal", "handled": true}]}, "chat": [{"role": "user", "content": "I will give you a Coq proof state, including both hypotheses and a specific goal and your need to prove it. Your response should be a singular code block of Coq proof starting with \"```coq\n\", ending with \"Qed.```\", without any additional explanation or commentary. Follow to these guidelines:\nIntroduce variables using unique names to avoid any conflicts.\nKeep each command distinct and separated, avoid concatenations like ';' or '[cmd|cmd]'.\nOrganize your proof with bullets like '-', '+', and '*' instead of braces ({, }). Shift to their double symbols like '--' and '++', when necessary.\nEffectively use given premises, follow the syntax and structure demonstrated in the examples provided.\n\nExample 1:\n\nHypotheses:\nn, m: nat\nIHn: m + n = n + m\n\nGoal:\nm + S n = S n + m\n\nProof:\n```coq\nsimpl. rewrite <- IHn. auto.\nQed.```\n\nExample 2:\nHypotheses:\n\nGoal:\nforall n m : nat, m + n = n + m\n\n```coq\nintros n m. induction n.\n- simpl. auto.\n- simpl. rewrite <- IHn. auto.\nQed.```\n\nSolve This Proof State:\n\nHypotheses:\norig_base_params: BaseParams\none_node_params: OneNodeParams orig_base_params\nraft_params: RaftParams orig_base_params\n\nGoal:\nforall (st : RaftState.raft_data term name entry logIndex serverType data clientId output) (t : nat), log (advanceCurrentTerm st t) = log st\n\nPremises:\nRecord entry (orig_base_params : BaseParams) (raft_params : RaftParams orig_base_params) : Type := mkEntry { eAt : name; eClient : clientId; eId : nat; eIndex : logIndex; eTerm : term; eInput : input } Arguments entry {orig_base_params raft_params} Arguments mkEntry {orig_base_params raft_params} _ _ _%nat_scope\nname = fun (orig_base_params : BaseParams) (raft_params : RaftParams orig_base_params) => fin N : forall orig_base_params : BaseParams, RaftParams orig_base_params -> Type Arguments name {orig_base_params raft_params}\nadvanceCurrentTerm = fun (orig_base_params : BaseParams) (raft_params : RaftParams orig_base_params) (state : RaftState.raft_data term name entry logIndex serverType data clientId output) (newTerm : nat) => if currentTerm state <? newTerm then {[{[{[{[state with currentTerm := newTerm]} with votedFor := None]} with type := Follower]} with leaderId := None]} else state : forall (orig_base_params : BaseParams) (raft_params : RaftParams orig_base_params), RaftState.raft_data term name entry logIndex serverType data clientId output -> nat -> RaftState.raft_data term name entry\nraft_data = fun (orig_base_params : BaseParams) (raft_params : RaftParams orig_base_params) => RaftState.raft_data term name entry logIndex serverType data clientId output : forall orig_base_params : BaseParams, RaftParams orig_base_params -> Type Arguments raft_data {orig_base_params raft_params}\nterm = nat : Set\nRecord OneNodeParams (P : BaseParams) : Type := Build_OneNodeParams { init : data; handler : input -> data -> output * data } Arguments Build_OneNodeParams _ _ _%function_scope\nlogIndex = nat : Set\nclientId = fun (orig_base_params : BaseParams) (RaftParams0 : RaftParams orig_base_params) => let (_, _, _, clientId, _) := RaftParams0 in clientId : forall orig_base_params : BaseParams, RaftParams orig_base_params -> Type Arguments clientId {orig_base_params RaftParams}\nNotation log := (RaftState.log term name entry logIndex serverType data clientId output)\nInductive nat : Set := O : nat | S : nat -> nat Arguments S _%nat_scope\ndata = fun BaseParams0 : BaseParams => let (data, _, _) := BaseParams0 in data : BaseParams -> Type Arguments data {BaseParams}\nRecord RaftParams (orig_base_params : BaseParams) : Type := Build_RaftParams { N : nat; input_eq_dec : forall x y : input, {x = y} + {x <> y}; output_eq_dec : forall x y : output, {x = y} + {x <> y}; clientId : Type; clientId_eq_dec : forall x y : clientId, {x = y} + {x <> y} } Arguments Build_RaftParams _ _%nat_scope (_ _)%function_scope [clientId]%type_scope _%function_scope\n*** [ Core.ByteListReader.t : Type -> Type ] Arguments Core.ByteListReader.t _%type_scope\noutput = fun BaseParams0 : BaseParams => let (_, _, output) := BaseParams0 in output : BaseParams -> Type Arguments output {BaseParams}\nInductive serverType : Set := Follower : serverType | Candidate : serverType | Leader : serverType\nModule RaftState := Struct Record raft_data (term name entry logIndex serverType stateMachineData clientId output : Type) : Type := mkRaft_data { currentTerm : term; votedFor : option name; leaderId : option name; log : list entry; commitIndex : logIndex; lastApplied : logIndex; stateMachine : stateMachineData; nextIndex : list (name * logIndex); matchIndex : list (name * logIndex); shouldSend : bool; votesReceived : list name; type : serverType; clientCache : list (clientId * (nat * output)); electoralVictories : list (term * list name * list entry) } Definition currentTerm :\ncacheApplyEntry = fun (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params) (st : RaftState.raft_data term name entry logIndex serverType data clientId output) (e : entry) => match getLastId st (eClient e) with | Some (id, o) => if eId e <? id then ([], st) else if eId e =? id then ([o], st) else applyEntry st e | None => applyEntry st e end : forall orig_base_params : BaseParams, OneNodeParams orig_base_params -> forall raft_params : RaftParams orig_base_params, RaftState.raft_data term name entry logIndex serverType data clientId output -> entry -> list output * RaftState.raft_data term name entry logIndex serverType data clientId output Arguments cacheApplyEntry {orig_base_params one_node_params raft_params}\napplyEntry = fun (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params) (st : RaftState.raft_data term name entry logIndex serverType data clientId output) (e : entry) => let (out, d) := handler (eInput e) (stateMachine st) in ([out], {[{[st with clientCache := assoc_set clientId_eq_dec (clientCache st) (eClient e) (eId e, out)]} with stateMachine := d]}) : forall orig_base_params : BaseParams, OneNodeParams orig_base_params -> forall raft_params : RaftParams orig_base_params, RaftState.raft_data term name entry logIndex serverType data clientId output ->...-> list output * RaftState.raft_data term name entry logIndex serverType data clientId output Arguments applyEntry {orig_base_params one_node_params raft_params}\nexecute_log' = fun (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params) => fix execute_log' (log : list entry) (st : data) (l : list (input * output)) {struct log} : list (input * output) * data := match log with | [] => (l, st) | e :: log' => let '(o, st') := handler (eInput e) st in execute_log' log' st' (l ++ [(eInput e, o)]) end : forall orig_base_params : BaseParams, OneNodeParams orig_base_params -> forall raft_params : RaftParams orig_base_params, list entry -> data -> list (input * output) -> list (input * output) * data Arguments execute_log' {orig_base_params one_node_params raft_params} _%list_scope _ _%list_scope\nexecute_log = fun (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params) (log : list entry) => execute_log' log init [] : forall orig_base_params : BaseParams, OneNodeParams orig_base_params -> forall raft_params : RaftParams orig_base_params, list entry -> list (input * output) * data Arguments execute_log {orig_base_params one_node_params raft_params} _%list_scope\ngetLastId = fun (orig_base_params : BaseParams) (raft_params : RaftParams orig_base_params) (state : RaftState.raft_data term name entry logIndex serverType data clientId output) (client : clientId) => assoc clientId_eq_dec (clientCache state) client : forall (orig_base_params : BaseParams) (raft_params : RaftParams orig_base_params), RaftState.raft_data term name entry logIndex serverType data clientId output -> clientId -> option (nat * output) Arguments getLastId {orig_base_params raft_params}\ngetNextIndex = fun (orig_base_params : BaseParams) (raft_params : RaftParams orig_base_params) (state : RaftState.raft_data term name entry logIndex serverType data clientId output) (h : name) => assoc_default name_eq_dec (nextIndex state) h (maxIndex (log state)) : forall (orig_base_params : BaseParams) (raft_params : RaftParams orig_base_params), RaftState.raft_data term name entry logIndex serverType data clientId output -> name -> logIndex Arguments getNextIndex {orig_base_params raft_params}\nreboot = fun (orig_base_params : BaseParams) (raft_params : RaftParams orig_base_params) (state : RaftState.raft_data term name entry logIndex serverType data clientId output) => mkRaft_data (currentTerm state) (votedFor state) (leaderId state) (log state) (commitIndex state) (lastApplied state) (stateMachine state) [] [] false [] Follower (clientCache state) (electoralVictories state) : forall (orig_base_params : BaseParams) (raft_params : RaftParams orig_base_params), RaftState.raft_data term name entry logIndex serverType data clientId output -> raft_data Arguments reboot {orig_base_params raft_params}\nreboot_idem : forall d : RaftState.raft_data term name entry logIndex serverType data clientId output, reboot (reboot d) = reboot d\nset_raft_data_type : forall term name entry logIndex serverType stateMachineData clientId output : Type, RaftState.raft_data term name entry logIndex serverType stateMachineData clientId output -> serverType -> RaftState.raft_data term name entry logIndex serverType stateMachineData clientId output\nset_raft_data_currentTerm : forall term name entry logIndex serverType stateMachineData clientId output : Type, RaftState.raft_data term name entry logIndex serverType stateMachineData clientId output -> term -> RaftState.raft_data term name entry logIndex serverType stateMachineData clientId output\nset_raft_data_lastApplied : forall term name entry logIndex serverType stateMachineData clientId output : Type, RaftState.raft_data term name entry logIndex serverType stateMachineData clientId output -> logIndex -> RaftState.raft_data term name entry logIndex serverType stateMachineData clientId output\nset_raft_data_commitIndex : forall term name entry logIndex serverType stateMachineData clientId output : Type, RaftState.raft_data term name entry logIndex serverType stateMachineData clientId output -> logIndex -> RaftState.raft_data term name entry logIndex serverType stateMachineData clientId output\nhandleRequestVoteReply = fun (orig_base_params : BaseParams) (raft_params : RaftParams orig_base_params) (me : name) (state : RaftState.raft_data term name entry logIndex serverType data clientId output) (src : name) (t : nat) (voteGranted : bool) => if currentTerm state <? t then {[advanceCurrentTerm state t with type := Follower]} else if t <? currentTerm state then state else let won := voteGranted && wonElection (dedup name_eq_dec (src :: votesReceived state)) in match type state with | Candidate => {[{[{[{[{[state with votesReceived := (if voteGranted then [src] else []) ++ votesReceived state]} with type := if won then Leader else type state]} with matchIndex := assoc_set name_eq_dec [] me (maxIndex (log state))]} with nextIndex := []]} with electoralVictories := (if...\nset_raft_data_stateMachine : forall term name entry logIndex serverType stateMachineData clientId output : Type, RaftState.raft_data term name entry logIndex serverType stateMachineData clientId output -> stateMachineData -> RaftState.raft_data term name entry logIndex serverType stateMachineData clientId output\nset_raft_data_shouldSend : forall term name entry logIndex serverType stateMachineData clientId output : Type, RaftState.raft_data term name entry logIndex serverType stateMachineData clientId output -> bool -> RaftState.raft_data term name entry logIndex serverType stateMachineData clientId output\nset_raft_data_log : forall term name entry logIndex serverType stateMachineData clientId output : Type, RaftState.raft_data term name entry logIndex serverType stateMachineData clientId output -> list entry -> RaftState.raft_data term name entry logIndex serverType stateMachineData clientId output\nset_raft_data_votedFor : forall term name entry logIndex serverType stateMachineData clientId output : Type, RaftState.raft_data term name entry logIndex serverType stateMachineData clientId output -> option name -> RaftState.raft_data term name entry logIndex serverType stateMachineData clientId output\nset_raft_data_leaderId : forall term name entry logIndex serverType stateMachineData clientId output : Type, RaftState.raft_data term name entry logIndex serverType stateMachineData clientId output -> option name -> RaftState.raft_data term name entry logIndex serverType stateMachineData clientId output\nset_raft_data_votesReceived : forall term name entry logIndex serverType stateMachineData clientId output : Type, RaftState.raft_data term name entry logIndex serverType stateMachineData clientId output -> list name -> RaftState.raft_data term name entry logIndex serverType stateMachineData clientId output\nset_raft_data_matchIndex : forall term name entry logIndex serverType stateMachineData clientId output : Type, RaftState.raft_data term name entry logIndex serverType stateMachineData clientId output -> list (name * logIndex) -> RaftState.raft_data term name entry logIndex serverType stateMachineData clientId output\nset_raft_data_nextIndex : forall term name entry logIndex serverType stateMachineData clientId output : Type, RaftState.raft_data term name entry logIndex serverType stateMachineData clientId output -> list (name * logIndex) -> RaftState.raft_data term name entry logIndex serverType stateMachineData clientId output\nRaftState.type : forall term name entry logIndex serverType stateMachineData clientId output : Type, RaftState.raft_data term name entry logIndex serverType stateMachineData clientId output -> serverType\nRaftState.currentTerm : forall term name entry logIndex serverType stateMachineData clientId output : Type, RaftState.raft_data term name entry logIndex serverType stateMachineData clientId output -> term\nRaftState.lastApplied : forall term name entry logIndex serverType stateMachineData clientId output : Type, RaftState.raft_data term name entry logIndex serverType stateMachineData clientId output -> logIndex\nRaftState.commitIndex : forall term name entry logIndex serverType stateMachineData clientId output : Type, RaftState.raft_data term name entry logIndex serverType stateMachineData clientId output -> logIndex"}, {"role": "assistant", "content": "```coq\nintros st t.\nunfold advanceCurrentTerm.\ndestruct (currentTerm st <? t) eqn:H.\n- simpl. rewrite <- H. reflexivity.\n- reflexivity.\nQed."}], "original": "intros st t. unfold advanceCurrentTerm. destruct (currentTerm st <? t) eqn:H. - simpl. rewrite <- H. reflexivity. - reflexivity.", "succ": true}]