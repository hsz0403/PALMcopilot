[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": ["intros es ys plt.", "intro Hsorted.", "intro Hunique.", "intros Hindices_eq.", "intros HmaxIndex.", "intros Hes_pos.", "intros Hys_pos.", "assert (Hcontiguous : contiguous 0 0 es ys).", "split.", "-", "left; reflexivity.", "-"], "tactic": "intros e Hine Hindex_le_max.", "exn": "No product even after head-reduction.", "type": "no_product", "handled": true}, {"ctx": ["intros es ys plt.", "intro Hsorted.", "intro Hunique.", "intros Hindices_eq.", "intros HmaxIndex.", "intros Hes_pos.", "intros Hys_pos.", "assert (Hcontiguous : contiguous 0 0 es ys).", "split.", "-", "left; reflexivity.", "-"], "tactic": "apply HmaxIndex.", "exn": "In environment orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params es, ys : list entry plt : term Hsorted : sorted es Hunique : uniqueIndices ys Hindices_eq : forall e1 e2 : entry, eIndex e1 = eIndex e2 -> eTerm e1 = eTerm e2 -> In e1 es -> In e2 ys -> (forall e3 : entry, eIndex e3 <= eIndex e1 -> In e3 es -> In e3 ys) /\\\\ (0 <> 0 -> exists e4 : entry, eIndex e4 = 0 /\\\\ eTerm e4 = plt /\\\\ In e4 ys) HmaxIndex : forall i : nat, 0 < i <= maxIndex es -> exists e : entry, eIndex e = i /\\\\ In e es Hes_pos : forall e : entry, In e es -> 0 < eIndex e Hys_pos : forall y : entry, In y ys -> 0 < eIndex y Unable to unify \"exists e : entry, eIndex e = ?M1644 /\\\\ In e es\" with \"(forall e : entry, In e es -> eIndex e > 0 -> eIndex e <= maxIndex ys -> In e ys) /\\\\ (forall e e' : entry, eIndex e = eIndex e' -> eTerm e = eTerm e' -> In e ys -> In e' es -> e = e')\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros es ys plt.", "intro Hsorted.", "intro Hunique.", "intros Hindices_eq.", "intros HmaxIndex.", "intros Hes_pos.", "intros Hys_pos.", "assert (Hcontiguous : contiguous 0 0 es ys).", "split.", "-", "left; reflexivity.", "-", "qsimpl time: 1."], "tactic": "-", "exn": "Wrong bullet -: Current bullet - is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["intros es ys plt.", "intro Hsorted.", "intro Hunique.", "intros Hindices_eq.", "intros HmaxIndex.", "intros Hes_pos.", "intros Hys_pos.", "assert (Hcontiguous : contiguous 0 0 es ys).", "split.", "-", "left; reflexivity.", "-", "qsimpl time: 1.", "+", "shelve.", "+", "shelve.", "-", "intros e e' Heq_index Heq_term Hine Hine'."], "tactic": "apply Hindices_eq with (e1 := e) (e2 := e'); try auto.", "exn": "In environment orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params es, ys : list entry plt : term Hsorted : sorted es Hunique : uniqueIndices ys Hindices_eq : forall e1 e2 : entry, eIndex e1 = eIndex e2 -> eTerm e1 = eTerm e2 -> In e1 es -> In e2 ys -> (forall e3 : entry, eIndex e3 <= eIndex e1 -> In e3 es -> In e3 ys) /\\\\ (0 <> 0 -> exists e4 : entry, eIndex e4 = 0 /\\\\ eTerm e4 = plt /\\\\ In e4 ys) HmaxIndex : forall i : nat, 0 < i <= maxIndex es -> exists e : entry, eIndex e = i /\\\\ In e es Hes_pos : forall e : entry, In e es -> 0 < eIndex e Hys_pos : forall y : entry, In y ys -> 0 < eIndex y Hcontiguous : contiguous 0 0 es ys e, e', Heq_index : entry Heq_term : eIndex e = eIndex e' Hine : eTerm e = eTerm e' Hine' : In e es Unable to unify \"In e es -> In e' ys -> (forall e3 : entry, eIndex e3 <= eIndex e -> In e3 es -> In e3 ys) /\\\\ (0 <> 0 -> exists e4 : entry, eIndex e4 = 0 /\\\\ eTerm e4 = plt /\\\\ In e4 ys)\" with \"In e' ys -> eIndex Heq_index <= eIndex e -> In Heq_index es <-> In Heq_index ys\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros es ys plt.", "intro Hsorted.", "intro Hunique.", "intros Hindices_eq.", "intros HmaxIndex.", "intros Hes_pos.", "intros Hys_pos.", "assert (Hcontiguous : contiguous 0 0 es ys).", "split.", "-", "left; reflexivity.", "-", "qsimpl time: 1.", "+", "shelve.", "+", "shelve.", "-", "intros e e' Heq_index Heq_term Hine Hine'.", "qsimpl time: 1."], "tactic": "split; auto.", "exn": "Not an inductive product.", "type": "not_inductive_product", "handled": true}, {"ctx": ["intros es ys plt.", "intro Hsorted.", "intro Hunique.", "intros Hindices_eq.", "intros HmaxIndex.", "intros Hes_pos.", "intros Hys_pos.", "assert (Hcontiguous : contiguous 0 0 es ys).", "split.", "-", "left; reflexivity.", "-", "qsimpl time: 1.", "+", "shelve.", "+", "shelve.", "-", "intros e e' Heq_index Heq_term Hine Hine'.", "qsimpl time: 1.", "assert (Hentries_match : entries_match es ys)."], "tactic": "intros e e' e'' Heq_index Heq_term Hine Hine' Heq_index''.", "exn": "e is already used.", "type": "used_var", "handled": true}, {"ctx": ["intros es ys plt.", "intro Hsorted.", "intro Hunique.", "intros Hindices_eq.", "intros HmaxIndex.", "intros Hes_pos.", "intros Hys_pos.", "assert (Hcontiguous : contiguous 0 0 es ys).", "split.", "-", "left; reflexivity.", "-", "qsimpl time: 1.", "+", "shelve.", "+", "shelve.", "-", "intros e e' Heq_index Heq_term Hine Hine'.", "qsimpl time: 1.", "assert (Hentries_match : entries_match es ys)."], "tactic": "intros e''' e' e'' Heq_index Heq_term Hine Hine' Heq_index''.", "exn": "e' is already used.", "type": "used_var", "handled": true}, {"ctx": ["intros es ys plt.", "intro Hsorted.", "intro Hunique.", "intros Hindices_eq.", "intros HmaxIndex.", "intros Hes_pos.", "intros Hys_pos.", "assert (Hcontiguous : contiguous 0 0 es ys).", "split.", "-", "left; reflexivity.", "-", "qsimpl time: 1.", "+", "shelve.", "+", "shelve.", "-", "intros e e' Heq_index Heq_term Hine Hine'.", "qsimpl time: 1.", "assert (Hentries_match : entries_match es ys)."], "tactic": "intros e''' e'''' e'' Heq_index Heq_term Hine Hine' Heq_index''.", "exn": "Heq_index is already used.", "type": "used_var", "handled": true}, {"ctx": ["intros es ys plt.", "intro Hsorted.", "intro Hunique.", "intros Hindices_eq.", "intros HmaxIndex.", "intros Hes_pos.", "intros Hys_pos.", "assert (Hcontiguous : contiguous 0 0 es ys).", "split.", "-", "left; reflexivity.", "-", "qsimpl time: 1.", "+", "shelve.", "+", "shelve.", "-", "intros e e' Heq_index Heq_term Hine Hine'.", "qsimpl time: 1.", "assert (Hentries_match : entries_match es ys)."], "tactic": "intros e''' e'''' e'' Heq_index''' Heq_term Hine Hine' Heq_index''.", "exn": "Heq_term is already used.", "type": "used_var", "handled": true}, {"ctx": ["intros es ys plt.", "intro Hsorted.", "intro Hunique.", "intros Hindices_eq.", "intros HmaxIndex.", "intros Hes_pos.", "intros Hys_pos.", "assert (Hcontiguous : contiguous 0 0 es ys).", "split.", "-", "left; reflexivity.", "-", "qsimpl time: 1.", "+", "shelve.", "+", "shelve.", "-", "intros e e' Heq_index Heq_term Hine Hine'.", "qsimpl time: 1.", "assert (Hentries_match : entries_match es ys)."], "tactic": "intros e''' e'''' e'' Heq_index''' Heq_term' Hine Hine' Heq_index''.", "exn": "Hine is already used.", "type": "used_var", "handled": true}, {"ctx": ["intros es ys plt.", "intro Hsorted.", "intro Hunique.", "intros Hindices_eq.", "intros HmaxIndex.", "intros Hes_pos.", "intros Hys_pos.", "assert (Hcontiguous : contiguous 0 0 es ys).", "split.", "-", "left; reflexivity.", "-", "qsimpl time: 1.", "+", "shelve.", "+", "shelve.", "-", "intros e e' Heq_index Heq_term Hine Hine'.", "qsimpl time: 1.", "assert (Hentries_match : entries_match es ys)."], "tactic": "intros e''' e'''' e'' Heq_index''' Heq_term' Hine'' Hine' Heq_index''.", "exn": "Hine' is already used.", "type": "used_var", "handled": true}, {"ctx": ["intros es ys plt.", "intro Hsorted.", "intro Hunique.", "intros Hindices_eq.", "intros HmaxIndex.", "intros Hes_pos.", "intros Hys_pos.", "assert (Hcontiguous : contiguous 0 0 es ys).", "split.", "-", "left; reflexivity.", "-", "qsimpl time: 1.", "+", "shelve.", "+", "shelve.", "-", "intros e e' Heq_index Heq_term Hine Hine'.", "qsimpl time: 1.", "assert (Hentries_match : entries_match es ys).", "intros e''' e'''' e'' Heq_index''' Heq_term' Hine'' Hine''' Heq_index''."], "tactic": "apply Hindices_eq with (e1 := e) (e2 := e'); try auto.", "exn": "The reference Hindices_eq was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros es ys plt.", "intro Hsorted.", "intro Hunique.", "intros Hindices_eq.", "intros HmaxIndex.", "intros Hes_pos.", "intros Hys_pos.", "assert (Hcontiguous : contiguous 0 0 es ys).", "split.", "-", "left; reflexivity.", "-", "qsimpl time: 1.", "+", "shelve.", "+", "shelve.", "-", "intros e e' Heq_index Heq_term Hine Hine'.", "qsimpl time: 1.", "assert (Hentries_match : entries_match es ys).", "intros e''' e'''' e'' Heq_index''' Heq_term' Hine'' Hine''' Heq_index''.", "split; auto.", "assert (Hprefix_within_term : prefix_within_term es ys)."], "tactic": "intros e e' Heq_term Heq_index Hine Hine'.", "exn": "e is already used.", "type": "used_var", "handled": true}, {"ctx": ["intros es ys plt.", "intro Hsorted.", "intro Hunique.", "intros Hindices_eq.", "intros HmaxIndex.", "intros Hes_pos.", "intros Hys_pos.", "assert (Hcontiguous : contiguous 0 0 es ys).", "split.", "-", "left; reflexivity.", "-", "qsimpl time: 1.", "+", "shelve.", "+", "shelve.", "-", "intros e e' Heq_index Heq_term Hine Hine'.", "qsimpl time: 1.", "assert (Hentries_match : entries_match es ys).", "intros e''' e'''' e'' Heq_index''' Heq_term' Hine'' Hine''' Heq_index''.", "split; auto.", "assert (Hprefix_within_term : prefix_within_term es ys)."], "tactic": "intros e'' e' Heq_term Heq_index Hine Hine'.", "exn": "e'' is already used.", "type": "used_var", "handled": true}, {"ctx": ["intros es ys plt.", "intro Hsorted.", "intro Hunique.", "intros Hindices_eq.", "intros HmaxIndex.", "intros Hes_pos.", "intros Hys_pos.", "assert (Hcontiguous : contiguous 0 0 es ys).", "split.", "-", "left; reflexivity.", "-", "qsimpl time: 1.", "+", "shelve.", "+", "shelve.", "-", "intros e e' Heq_index Heq_term Hine Hine'.", "qsimpl time: 1.", "assert (Hentries_match : entries_match es ys).", "intros e''' e'''' e'' Heq_index''' Heq_term' Hine'' Hine''' Heq_index''.", "split; auto.", "assert (Hprefix_within_term : prefix_within_term es ys)."], "tactic": "intros e''' e' Heq_term Heq_index Hine Hine'.", "exn": "e''' is already used.", "type": "used_var", "handled": true}, {"ctx": ["intros es ys plt.", "intro Hsorted.", "intro Hunique.", "intros Hindices_eq.", "intros HmaxIndex.", "intros Hes_pos.", "intros Hys_pos.", "assert (Hcontiguous : contiguous 0 0 es ys).", "split.", "-", "left; reflexivity.", "-", "qsimpl time: 1.", "+", "shelve.", "+", "shelve.", "-", "intros e e' Heq_index Heq_term Hine Hine'.", "qsimpl time: 1.", "assert (Hentries_match : entries_match es ys).", "intros e''' e'''' e'' Heq_index''' Heq_term' Hine'' Hine''' Heq_index''.", "split; auto.", "assert (Hprefix_within_term : prefix_within_term es ys)."], "tactic": "intros e'''' e' Heq_term Heq_index Hine Hine'.", "exn": "e'''' is already used.", "type": "used_var", "handled": true}, {"ctx": ["intros es ys plt.", "intro Hsorted.", "intro Hunique.", "intros Hindices_eq.", "intros HmaxIndex.", "intros Hes_pos.", "intros Hys_pos.", "assert (Hcontiguous : contiguous 0 0 es ys).", "split.", "-", "left; reflexivity.", "-", "qsimpl time: 1.", "+", "shelve.", "+", "shelve.", "-", "intros e e' Heq_index Heq_term Hine Hine'.", "qsimpl time: 1.", "assert (Hentries_match : entries_match es ys).", "intros e''' e'''' e'' Heq_index''' Heq_term' Hine'' Hine''' Heq_index''.", "split; auto.", "assert (Hprefix_within_term : prefix_within_term es ys)."], "tactic": "intros e''''' e' Heq_term Heq_index Hine Hine'.", "exn": "e' is already used.", "type": "used_var", "handled": true}, {"ctx": ["intros es ys plt.", "intro Hsorted.", "intro Hunique.", "intros Hindices_eq.", "intros HmaxIndex.", "intros Hes_pos.", "intros Hys_pos.", "assert (Hcontiguous : contiguous 0 0 es ys).", "split.", "-", "left; reflexivity.", "-", "qsimpl time: 1.", "+", "shelve.", "+", "shelve.", "-", "intros e e' Heq_index Heq_term Hine Hine'.", "qsimpl time: 1.", "assert (Hentries_match : entries_match es ys).", "intros e''' e'''' e'' Heq_index''' Heq_term' Hine'' Hine''' Heq_index''.", "split; auto.", "assert (Hprefix_within_term : prefix_within_term es ys)."], "tactic": "intros e''''' e'''''' Heq_term Heq_index Hine Hine'.", "exn": "Heq_term is already used.", "type": "used_var", "handled": true}, {"ctx": ["intros es ys plt.", "intro Hsorted.", "intro Hunique.", "intros Hindices_eq.", "intros HmaxIndex.", "intros Hes_pos.", "intros Hys_pos.", "assert (Hcontiguous : contiguous 0 0 es ys).", "split.", "-", "left; reflexivity.", "-", "qsimpl time: 1.", "+", "shelve.", "+", "shelve.", "-", "intros e e' Heq_index Heq_term Hine Hine'.", "qsimpl time: 1.", "assert (Hentries_match : entries_match es ys).", "intros e''' e'''' e'' Heq_index''' Heq_term' Hine'' Hine''' Heq_index''.", "split; auto.", "assert (Hprefix_within_term : prefix_within_term es ys)."], "tactic": "intros e''''' e'''''' Heq_term' Heq_index Hine Hine'.", "exn": "Heq_term' is already used.", "type": "used_var", "handled": true}, {"ctx": ["intros es ys plt.", "intro Hsorted.", "intro Hunique.", "intros Hindices_eq.", "intros HmaxIndex.", "intros Hes_pos.", "intros Hys_pos.", "assert (Hcontiguous : contiguous 0 0 es ys).", "split.", "-", "left; reflexivity.", "-", "qsimpl time: 1.", "+", "shelve.", "+", "shelve.", "-", "intros e e' Heq_index Heq_term Hine Hine'.", "qsimpl time: 1.", "assert (Hentries_match : entries_match es ys).", "intros e''' e'''' e'' Heq_index''' Heq_term' Hine'' Hine''' Heq_index''.", "split; auto.", "assert (Hprefix_within_term : prefix_within_term es ys)."], "tactic": "intros e''''' e'''''' Heq_term'' Heq_index Hine Hine'.", "exn": "Heq_index is already used.", "type": "used_var", "handled": true}, {"ctx": ["intros es ys plt.", "intro Hsorted.", "intro Hunique.", "intros Hindices_eq.", "intros HmaxIndex.", "intros Hes_pos.", "intros Hys_pos.", "assert (Hcontiguous : contiguous 0 0 es ys).", "split.", "-", "left; reflexivity.", "-", "qsimpl time: 1.", "+", "shelve.", "+", "shelve.", "-", "intros e e' Heq_index Heq_term Hine Hine'.", "qsimpl time: 1.", "assert (Hentries_match : entries_match es ys).", "intros e''' e'''' e'' Heq_index''' Heq_term' Hine'' Hine''' Heq_index''.", "split; auto.", "assert (Hprefix_within_term : prefix_within_term es ys)."], "tactic": "intros e''''' e'''''' Heq_term'' Heq_index' Hine Hine'.", "exn": "Hine is already used.", "type": "used_var", "handled": true}, {"ctx": ["intros es ys plt.", "intro Hsorted.", "intro Hunique.", "intros Hindices_eq.", "intros HmaxIndex.", "intros Hes_pos.", "intros Hys_pos.", "assert (Hcontiguous : contiguous 0 0 es ys).", "split.", "-", "left; reflexivity.", "-", "qsimpl time: 1.", "+", "shelve.", "+", "shelve.", "-", "intros e e' Heq_index Heq_term Hine Hine'.", "qsimpl time: 1.", "assert (Hentries_match : entries_match es ys).", "intros e''' e'''' e'' Heq_index''' Heq_term' Hine'' Hine''' Heq_index''.", "split; auto.", "assert (Hprefix_within_term : prefix_within_term es ys)."], "tactic": "intros e''''' e'''''' Heq_term'' Heq_index' Hine'' Hine'.", "exn": "Hine'' is already used.", "type": "used_var", "handled": true}, {"ctx": ["intros es ys plt.", "intro Hsorted.", "intro Hunique.", "intros Hindices_eq.", "intros HmaxIndex.", "intros Hes_pos.", "intros Hys_pos.", "assert (Hcontiguous : contiguous 0 0 es ys).", "split.", "-", "left; reflexivity.", "-", "qsimpl time: 1.", "+", "shelve.", "+", "shelve.", "-", "intros e e' Heq_index Heq_term Hine Hine'.", "qsimpl time: 1.", "assert (Hentries_match : entries_match es ys).", "intros e''' e'''' e'' Heq_index''' Heq_term' Hine'' Hine''' Heq_index''.", "split; auto.", "assert (Hprefix_within_term : prefix_within_term es ys)."], "tactic": "intros e''''' e'''''' Heq_term'' Heq_index' Hine''' Hine'.", "exn": "Hine''' is already used.", "type": "used_var", "handled": true}, {"ctx": ["intros es ys plt.", "intro Hsorted.", "intro Hunique.", "intros Hindices_eq.", "intros HmaxIndex.", "intros Hes_pos.", "intros Hys_pos.", "assert (Hcontiguous : contiguous 0 0 es ys).", "split.", "-", "left; reflexivity.", "-", "qsimpl time: 1.", "+", "shelve.", "+", "shelve.", "-", "intros e e' Heq_index Heq_term Hine Hine'.", "qsimpl time: 1.", "assert (Hentries_match : entries_match es ys).", "intros e''' e'''' e'' Heq_index''' Heq_term' Hine'' Hine''' Heq_index''.", "split; auto.", "assert (Hprefix_within_term : prefix_within_term es ys)."], "tactic": "intros e''''' e'''''' Heq_term'' Heq_index' Hine'''' Hine'.", "exn": "Hine' is already used.", "type": "used_var", "handled": true}, {"ctx": ["intros es ys plt.", "intro Hsorted.", "intro Hunique.", "intros Hindices_eq.", "intros HmaxIndex.", "intros Hes_pos.", "intros Hys_pos.", "assert (Hcontiguous : contiguous 0 0 es ys).", "split.", "-", "left; reflexivity.", "-", "qsimpl time: 1.", "+", "shelve.", "+", "shelve.", "-", "intros e e' Heq_index Heq_term Hine Hine'.", "qsimpl time: 1.", "assert (Hentries_match : entries_match es ys).", "intros e''' e'''' e'' Heq_index''' Heq_term' Hine'' Hine''' Heq_index''.", "split; auto.", "assert (Hprefix_within_term : prefix_within_term es ys).", "intros e''''' e'''''' Heq_term'' Heq_index' Hine'''' Hine'''''."], "tactic": "apply Hentries_match with (e'' := e'); try auto.", "exn": "The reference Hentries_match was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros es ys plt.", "intro Hsorted.", "intro Hunique.", "intros Hindices_eq.", "intros HmaxIndex.", "intros Hes_pos.", "intros Hys_pos.", "assert (Hcontiguous : contiguous 0 0 es ys).", "split.", "-", "left; reflexivity.", "-", "qsimpl time: 1.", "+", "shelve.", "+", "shelve.", "-", "intros e e' Heq_index Heq_term Hine Hine'.", "qsimpl time: 1.", "assert (Hentries_match : entries_match es ys).", "intros e''' e'''' e'' Heq_index''' Heq_term' Hine'' Hine''' Heq_index''.", "split; auto.", "assert (Hprefix_within_term : prefix_within_term es ys).", "intros e''''' e'''''' Heq_term'' Heq_index' Hine'''' Hine'''''."], "tactic": "left; reflexivity.", "exn": "Not an inductive product.", "type": "not_inductive_product", "handled": true}, {"ctx": ["intros es ys plt.", "intro Hsorted.", "intro Hunique.", "intros Hindices_eq.", "intros HmaxIndex.", "intros Hes_pos.", "intros Hys_pos.", "assert (Hcontiguous : contiguous 0 0 es ys).", "split.", "-", "left; reflexivity.", "-", "qsimpl time: 1.", "+", "shelve.", "+", "shelve.", "-", "intros e e' Heq_index Heq_term Hine Hine'.", "qsimpl time: 1.", "assert (Hentries_match : entries_match es ys).", "intros e''' e'''' e'' Heq_index''' Heq_term' Hine'' Hine''' Heq_index''.", "split; auto.", "assert (Hprefix_within_term : prefix_within_term es ys).", "intros e''''' e'''''' Heq_term'' Heq_index' Hine'''' Hine'''''.", "assert (Hrachet : forall x x' : entry, eIndex x = eIndex x' -> In x es -> In x' ys -> In x' es)."], "tactic": "intros x x' Heq_index Hine Hine'.", "exn": "Heq_index is already used.", "type": "used_var", "handled": true}, {"ctx": ["intros es ys plt.", "intro Hsorted.", "intro Hunique.", "intros Hindices_eq.", "intros HmaxIndex.", "intros Hes_pos.", "intros Hys_pos.", "assert (Hcontiguous : contiguous 0 0 es ys).", "split.", "-", "left; reflexivity.", "-", "qsimpl time: 1.", "+", "shelve.", "+", "shelve.", "-", "intros e e' Heq_index Heq_term Hine Hine'.", "qsimpl time: 1.", "assert (Hentries_match : entries_match es ys).", "intros e''' e'''' e'' Heq_index''' Heq_term' Hine'' Hine''' Heq_index''.", "split; auto.", "assert (Hprefix_within_term : prefix_within_term es ys).", "intros e''''' e'''''' Heq_term'' Heq_index' Hine'''' Hine'''''.", "assert (Hrachet : forall x x' : entry, eIndex x = eIndex x' -> In x es -> In x' ys -> In x' es)."], "tactic": "intros x x' Heq_index' Hine Hine'.", "exn": "Heq_index' is already used.", "type": "used_var", "handled": true}, {"ctx": ["intros es ys plt.", "intro Hsorted.", "intro Hunique.", "intros Hindices_eq.", "intros HmaxIndex.", "intros Hes_pos.", "intros Hys_pos.", "assert (Hcontiguous : contiguous 0 0 es ys).", "split.", "-", "left; reflexivity.", "-", "qsimpl time: 1.", "+", "shelve.", "+", "shelve.", "-", "intros e e' Heq_index Heq_term Hine Hine'.", "qsimpl time: 1.", "assert (Hentries_match : entries_match es ys).", "intros e''' e'''' e'' Heq_index''' Heq_term' Hine'' Hine''' Heq_index''.", "split; auto.", "assert (Hprefix_within_term : prefix_within_term es ys).", "intros e''''' e'''''' Heq_term'' Heq_index' Hine'''' Hine'''''.", "assert (Hrachet : forall x x' : entry, eIndex x = eIndex x' -> In x es -> In x' ys -> In x' es)."], "tactic": "intros x x' Heq_index'' Hine Hine'.", "exn": "Heq_index'' is already used.", "type": "used_var", "handled": true}, {"ctx": ["intros es ys plt.", "intro Hsorted.", "intro Hunique.", "intros Hindices_eq.", "intros HmaxIndex.", "intros Hes_pos.", "intros Hys_pos.", "assert (Hcontiguous : contiguous 0 0 es ys).", "split.", "-", "left; reflexivity.", "-", "qsimpl time: 1.", "+", "shelve.", "+", "shelve.", "-", "intros e e' Heq_index Heq_term Hine Hine'.", "qsimpl time: 1.", "assert (Hentries_match : entries_match es ys).", "intros e''' e'''' e'' Heq_index''' Heq_term' Hine'' Hine''' Heq_index''.", "split; auto.", "assert (Hprefix_within_term : prefix_within_term es ys).", "intros e''''' e'''''' Heq_term'' Heq_index' Hine'''' Hine'''''.", "assert (Hrachet : forall x x' : entry, eIndex x = eIndex x' -> In x es -> In x' ys -> In x' es)."], "tactic": "intros x x' Heq_index''' Hine Hine'.", "exn": "Heq_index''' is already used.", "type": "used_var", "handled": true}, {"ctx": ["intros es ys plt.", "intro Hsorted.", "intro Hunique.", "intros Hindices_eq.", "intros HmaxIndex.", "intros Hes_pos.", "intros Hys_pos.", "assert (Hcontiguous : contiguous 0 0 es ys).", "split.", "-", "left; reflexivity.", "-", "qsimpl time: 1.", "+", "shelve.", "+", "shelve.", "-", "intros e e' Heq_index Heq_term Hine Hine'.", "qsimpl time: 1.", "assert (Hentries_match : entries_match es ys).", "intros e''' e'''' e'' Heq_index''' Heq_term' Hine'' Hine''' Heq_index''.", "split; auto.", "assert (Hprefix_within_term : prefix_within_term es ys).", "intros e''''' e'''''' Heq_term'' Heq_index' Hine'''' Hine'''''.", "assert (Hrachet : forall x x' : entry, eIndex x = eIndex x' -> In x es -> In x' ys -> In x' es)."], "tactic": "intros x x' Heq_index'''' Hine Hine'.", "exn": "Hine is already used.", "type": "used_var", "handled": true}, {"ctx": ["intros es ys plt.", "intro Hsorted.", "intro Hunique.", "intros Hindices_eq.", "intros HmaxIndex.", "intros Hes_pos.", "intros Hys_pos.", "assert (Hcontiguous : contiguous 0 0 es ys).", "split.", "-", "left; reflexivity.", "-", "qsimpl time: 1.", "+", "shelve.", "+", "shelve.", "-", "intros e e' Heq_index Heq_term Hine Hine'.", "qsimpl time: 1.", "assert (Hentries_match : entries_match es ys).", "intros e''' e'''' e'' Heq_index''' Heq_term' Hine'' Hine''' Heq_index''.", "split; auto.", "assert (Hprefix_within_term : prefix_within_term es ys).", "intros e''''' e'''''' Heq_term'' Heq_index' Hine'''' Hine'''''.", "assert (Hrachet : forall x x' : entry, eIndex x = eIndex x' -> In x es -> In x' ys -> In x' es)."], "tactic": "intros x x' Heq_index'''' Hine'' Hine'.", "exn": "Hine'' is already used.", "type": "used_var", "handled": true}, {"ctx": ["intros es ys plt.", "intro Hsorted.", "intro Hunique.", "intros Hindices_eq.", "intros HmaxIndex.", "intros Hes_pos.", "intros Hys_pos.", "assert (Hcontiguous : contiguous 0 0 es ys).", "split.", "-", "left; reflexivity.", "-", "qsimpl time: 1.", "+", "shelve.", "+", "shelve.", "-", "intros e e' Heq_index Heq_term Hine Hine'.", "qsimpl time: 1.", "assert (Hentries_match : entries_match es ys).", "intros e''' e'''' e'' Heq_index''' Heq_term' Hine'' Hine''' Heq_index''.", "split; auto.", "assert (Hprefix_within_term : prefix_within_term es ys).", "intros e''''' e'''''' Heq_term'' Heq_index' Hine'''' Hine'''''.", "assert (Hrachet : forall x x' : entry, eIndex x = eIndex x' -> In x es -> In x' ys -> In x' es)."], "tactic": "intros x x' Heq_index'''' Hine''' Hine'.", "exn": "Hine''' is already used.", "type": "used_var", "handled": true}, {"ctx": ["intros es ys plt.", "intro Hsorted.", "intro Hunique.", "intros Hindices_eq.", "intros HmaxIndex.", "intros Hes_pos.", "intros Hys_pos.", "assert (Hcontiguous : contiguous 0 0 es ys).", "split.", "-", "left; reflexivity.", "-", "qsimpl time: 1.", "+", "shelve.", "+", "shelve.", "-", "intros e e' Heq_index Heq_term Hine Hine'.", "qsimpl time: 1.", "assert (Hentries_match : entries_match es ys).", "intros e''' e'''' e'' Heq_index''' Heq_term' Hine'' Hine''' Heq_index''.", "split; auto.", "assert (Hprefix_within_term : prefix_within_term es ys).", "intros e''''' e'''''' Heq_term'' Heq_index' Hine'''' Hine'''''.", "assert (Hrachet : forall x x' : entry, eIndex x = eIndex x' -> In x es -> In x' ys -> In x' es)."], "tactic": "intros x x' Heq_index'''' Hine'''' Hine'.", "exn": "Hine'''' is already used.", "type": "used_var", "handled": true}, {"ctx": ["intros es ys plt.", "intro Hsorted.", "intro Hunique.", "intros Hindices_eq.", "intros HmaxIndex.", "intros Hes_pos.", "intros Hys_pos.", "assert (Hcontiguous : contiguous 0 0 es ys).", "split.", "-", "left; reflexivity.", "-", "qsimpl time: 1.", "+", "shelve.", "+", "shelve.", "-", "intros e e' Heq_index Heq_term Hine Hine'.", "qsimpl time: 1.", "assert (Hentries_match : entries_match es ys).", "intros e''' e'''' e'' Heq_index''' Heq_term' Hine'' Hine''' Heq_index''.", "split; auto.", "assert (Hprefix_within_term : prefix_within_term es ys).", "intros e''''' e'''''' Heq_term'' Heq_index' Hine'''' Hine'''''.", "assert (Hrachet : forall x x' : entry, eIndex x = eIndex x' -> In x es -> In x' ys -> In x' es)."], "tactic": "intros x x' Heq_index'''' Hine''''' Hine'.", "exn": "Hine''''' is already used.", "type": "used_var", "handled": true}, {"ctx": ["intros es ys plt.", "intro Hsorted.", "intro Hunique.", "intros Hindices_eq.", "intros HmaxIndex.", "intros Hes_pos.", "intros Hys_pos.", "assert (Hcontiguous : contiguous 0 0 es ys).", "split.", "-", "left; reflexivity.", "-", "qsimpl time: 1.", "+", "shelve.", "+", "shelve.", "-", "intros e e' Heq_index Heq_term Hine Hine'.", "qsimpl time: 1.", "assert (Hentries_match : entries_match es ys).", "intros e''' e'''' e'' Heq_index''' Heq_term' Hine'' Hine''' Heq_index''.", "split; auto.", "assert (Hprefix_within_term : prefix_within_term es ys).", "intros e''''' e'''''' Heq_term'' Heq_index' Hine'''' Hine'''''.", "assert (Hrachet : forall x x' : entry, eIndex x = eIndex x' -> In x es -> In x' ys -> In x' es)."], "tactic": "intros x x' Heq_index'''' Hine'''''' Hine'.", "exn": "Hine' is already used.", "type": "used_var", "handled": true}, {"ctx": ["intros es ys plt.", "intro Hsorted.", "intro Hunique.", "intros Hindices_eq.", "intros HmaxIndex.", "intros Hes_pos.", "intros Hys_pos.", "assert (Hcontiguous : contiguous 0 0 es ys).", "split.", "-", "left; reflexivity.", "-", "qsimpl time: 1.", "+", "shelve.", "+", "shelve.", "-", "intros e e' Heq_index Heq_term Hine Hine'.", "qsimpl time: 1.", "assert (Hentries_match : entries_match es ys).", "intros e''' e'''' e'' Heq_index''' Heq_term' Hine'' Hine''' Heq_index''.", "split; auto.", "assert (Hprefix_within_term : prefix_within_term es ys).", "intros e''''' e'''''' Heq_term'' Heq_index' Hine'''' Hine'''''.", "assert (Hrachet : forall x x' : entry, eIndex x = eIndex x' -> In x es -> In x' ys -> In x' es).", "intros x x' Heq_index'''' Hine'''''' Hine'''''''."], "tactic": "apply Hindices_eq with (e1 := x) (e2 := x'); try auto.", "exn": "The reference Hindices_eq was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros es ys plt.", "intro Hsorted.", "intro Hunique.", "intros Hindices_eq.", "intros HmaxIndex.", "intros Hes_pos.", "intros Hys_pos.", "assert (Hcontiguous : contiguous 0 0 es ys).", "split.", "-", "left; reflexivity.", "-", "qsimpl time: 1.", "+", "shelve.", "+", "shelve.", "-", "intros e e' Heq_index Heq_term Hine Hine'.", "qsimpl time: 1.", "assert (Hentries_match : entries_match es ys).", "intros e''' e'''' e'' Heq_index''' Heq_term' Hine'' Hine''' Heq_index''.", "split; auto.", "assert (Hprefix_within_term : prefix_within_term es ys).", "intros e''''' e'''''' Heq_term'' Heq_index' Hine'''' Hine'''''.", "assert (Hrachet : forall x x' : entry, eIndex x = eIndex x' -> In x es -> In x' ys -> In x' es).", "intros x x' Heq_index'''' Hine'''''' Hine'''''''."], "tactic": "split; auto.", "exn": "Not an inductive product.", "type": "not_inductive_product", "handled": true}, {"ctx": ["intros es ys plt.", "intro Hsorted.", "intro Hunique.", "intros Hindices_eq.", "intros HmaxIndex.", "intros Hes_pos.", "intros Hys_pos.", "assert (Hcontiguous : contiguous 0 0 es ys).", "split.", "-", "left; reflexivity.", "-", "qsimpl time: 1.", "+", "shelve.", "+", "shelve.", "-", "intros e e' Heq_index Heq_term Hine Hine'.", "qsimpl time: 1.", "assert (Hentries_match : entries_match es ys).", "intros e''' e'''' e'' Heq_index''' Heq_term' Hine'' Hine''' Heq_index''.", "split; auto.", "assert (Hprefix_within_term : prefix_within_term es ys).", "intros e''''' e'''''' Heq_term'' Heq_index' Hine'''' Hine'''''.", "assert (Hrachet : forall x x' : entry, eIndex x = eIndex x' -> In x es -> In x' ys -> In x' es).", "intros x x' Heq_index'''' Hine'''''' Hine'''''''.", "assert (HmaxIndex_es : maxIndex es >= 1)."], "tactic": "apply maxIndex_non_empty.", "exn": "In environment orig_base_params : BaseParams raft_params : RaftParams orig_base_params es, ys : list entry plt : term Hsorted : sorted es Hunique : uniqueIndices ys Hes_pos : forall e : entry, In e es -> 0 < eIndex e Hys_pos : forall y : entry, In y ys -> 0 < eIndex y e, e', Heq_index : entry Heq_term : eIndex e = eIndex e' Hine : eTerm e = eTerm e' Hine' : In e es H : In e' ys H0 : eIndex Heq_index <= eIndex e H1 : forall i : nat, 0 < i -> i <= maxIndex es -> exists e : entry, eIndex e = i /\\\\ In e es H2 : forall e1 e2 : entry, eIndex e1 = eIndex e2 -> eTerm e1 = eTerm e2 -> In e1 es -> In e2 ys -> (0 = 0 -> False) -> exists e4 : entry, eIndex e4 = 0 /\\\\ eTerm e4 = plt /\\\\ In e4 ys H3 : forall e1 e2 : entry, eIndex e1 = eIndex e2 -> eTerm e1 = eTerm e2 -> In e1 es -> In e2 ys -> forall e3 : entry, eIndex e3 <= eIndex e1 -> In e3 es -> In e3 ys H4 : In Heq_index ys H7 : forall e : entry, In e es -> eIndex e > 0 -> eIndex e <= maxIndex ys -> In e ys H8 : forall e e' : entry, eIndex e = eIndex e' -> eTerm e = eTerm e' -> In e ys -> In e' es -> e = e' init : data handler : input -> data -> output * data e''', e'''', e'' : entry Heq_index''' : eIndex e''' = eIndex e'''' Heq_term' : eTerm e''' = eTerm e'''' Hine'' : In e''' es Hine''' : In e'''' ys Heq_index'' : eIndex e'' <= eIndex e''' e''''', e'''''' : entry Heq_term'' : eTerm e''''' = eTerm e'''''' Heq_index' : eIndex e''''' <= eIndex e'''''' Hine'''' : In e''''' es Hine''''' : In e'''''' ys x, x' : entry Heq_index'''' : eIndex x = eIndex x' Hine'''''' : In x es Hine''''''' : In x' ys Unable to unify \"exists e : entry, In e ?M9991 /\\\\ maxIndex ?M9991 = eIndex e /\\\\ maxTerm ?M9991 = eTerm e\" with \"1 <= maxIndex es\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros es ys plt.", "intro Hsorted.", "intro Hunique.", "intros Hindices_eq.", "intros HmaxIndex.", "intros Hes_pos.", "intros Hys_pos.", "assert (Hcontiguous : contiguous 0 0 es ys).", "split.", "-", "left; reflexivity.", "-", "qsimpl time: 1.", "+", "shelve.", "+", "shelve.", "-", "intros e e' Heq_index Heq_term Hine Hine'.", "qsimpl time: 1.", "assert (Hentries_match : entries_match es ys).", "intros e''' e'''' e'' Heq_index''' Heq_term' Hine'' Hine''' Heq_index''.", "split; auto.", "assert (Hprefix_within_term : prefix_within_term es ys).", "intros e''''' e'''''' Heq_term'' Heq_index' Hine'''' Hine'''''.", "assert (Hrachet : forall x x' : entry, eIndex x = eIndex x' -> In x es -> In x' ys -> In x' es).", "intros x x' Heq_index'''' Hine'''''' Hine'''''''.", "assert (HmaxIndex_es : maxIndex es >= 1).", "qsimpl time: 1 use: maxIndex_non_empty."], "tactic": "intro Hnil; discriminate.", "exn": "No product even after head-reduction.", "type": "no_product", "handled": true}, {"ctx": ["intros es ys plt.", "intro Hsorted.", "intro Hunique.", "intros Hindices_eq.", "intros HmaxIndex.", "intros Hes_pos.", "intros Hys_pos.", "assert (Hcontiguous : contiguous 0 0 es ys).", "split.", "-", "left; reflexivity.", "-", "qsimpl time: 1.", "+", "shelve.", "+", "shelve.", "-", "intros e e' Heq_index Heq_term Hine Hine'.", "qsimpl time: 1.", "assert (Hentries_match : entries_match es ys).", "intros e''' e'''' e'' Heq_index''' Heq_term' Hine'' Hine''' Heq_index''.", "split; auto.", "assert (Hprefix_within_term : prefix_within_term es ys).", "intros e''''' e'''''' Heq_term'' Heq_index' Hine'''' Hine'''''.", "assert (Hrachet : forall x x' : entry, eIndex x = eIndex x' -> In x es -> In x' ys -> In x' es).", "intros x x' Heq_index'''' Hine'''''' Hine'''''''.", "assert (HmaxIndex_es : maxIndex es >= 1).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (HmaxIndex_ys : maxIndex ys >= 1)."], "tactic": "apply maxIndex_non_empty.", "exn": "In environment orig_base_params : BaseParams raft_params : RaftParams orig_base_params H5 : forall l : list entry, (l = [] -> False) -> exists e : entry, In e l /\\\\ maxIndex l = eIndex e /\\\\ maxTerm l = eTerm e es, ys : list entry plt : term Hsorted : sorted es Hunique : uniqueIndices ys Hes_pos : forall e : entry, In e es -> 0 < eIndex e Hys_pos : forall y : entry, In y ys -> 0 < eIndex y e, e', Heq_index : entry Heq_term : eIndex e = eIndex e' Hine : eTerm e = eTerm e' Hine' : In e es H : In e' ys H0 : eIndex Heq_index <= eIndex e H1 : forall i : nat, 0 < i -> i <= maxIndex es -> exists e : entry, eIndex e = i /\\\\ In e es H2 : forall e1 e2 : entry, eIndex e1 = eIndex e2 -> eTerm e1 = eTerm e2 -> In e1 es -> In e2 ys -> (0 = 0 -> False) -> exists e4 : entry, eIndex e4 = 0 /\\\\ eTerm e4 = plt /\\\\ In e4 ys H3 : forall e1 e2 : entry, eIndex e1 = eIndex e2 -> eTerm e1 = eTerm e2 -> In e1 es -> In e2 ys -> forall e3 : entry, eIndex e3 <= eIndex e1 -> In e3 es -> In e3 ys H4 : In Heq_index ys H7 : forall e : entry, In e es -> eIndex e > 0 -> eIndex e <= maxIndex ys -> In e ys H8 : forall e e' : entry, eIndex e = eIndex e' -> eTerm e = eTerm e' -> In e ys -> In e' es -> e = e' init : data handler : input -> data -> output * data e''', e'''', e'' : entry Heq_index''' : eIndex e''' = eIndex e'''' Heq_term' : eTerm e''' = eTerm e'''' Hine'' : In e''' es Hine''' : In e'''' ys Heq_index'' : eIndex e'' <= eIndex e''' e''''', e'''''' : entry Heq_term'' : eTerm e''''' = eTerm e'''''' Heq_index' : eIndex e''''' <= eIndex e'''''' Hine'''' : In e''''' es Hine''''' : In e'''''' ys x, x' : entry Heq_index'''' : eIndex x = eIndex x' Hine'''''' : In x es Hine''''''' : In x' ys Unable to unify \"exists e : entry, In e ?M11519 /\\\\ maxIndex ?M11519 = eIndex e /\\\\ maxTerm ?M11519 = eTerm e\" with \"1 <= maxIndex ys\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros es ys plt.", "intro Hsorted.", "intro Hunique.", "intros Hindices_eq.", "intros HmaxIndex.", "intros Hes_pos.", "intros Hys_pos.", "assert (Hcontiguous : contiguous 0 0 es ys).", "split.", "-", "left; reflexivity.", "-", "qsimpl time: 1.", "+", "shelve.", "+", "shelve.", "-", "intros e e' Heq_index Heq_term Hine Hine'.", "qsimpl time: 1.", "assert (Hentries_match : entries_match es ys).", "intros e''' e'''' e'' Heq_index''' Heq_term' Hine'' Hine''' Heq_index''.", "split; auto.", "assert (Hprefix_within_term : prefix_within_term es ys).", "intros e''''' e'''''' Heq_term'' Heq_index' Hine'''' Hine'''''.", "assert (Hrachet : forall x x' : entry, eIndex x = eIndex x' -> In x es -> In x' ys -> In x' es).", "intros x x' Heq_index'''' Hine'''''' Hine'''''''.", "assert (HmaxIndex_es : maxIndex es >= 1).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (HmaxIndex_ys : maxIndex ys >= 1).", "qsimpl time: 1 use: maxIndex_non_empty."], "tactic": "intro Hnil; discriminate.", "exn": "No product even after head-reduction.", "type": "no_product", "handled": true}, {"ctx": ["intros es ys plt.", "intro Hsorted.", "intro Hunique.", "intros Hindices_eq.", "intros HmaxIndex.", "intros Hes_pos.", "intros Hys_pos.", "assert (Hcontiguous : contiguous 0 0 es ys).", "split.", "-", "left; reflexivity.", "-", "qsimpl time: 1.", "+", "shelve.", "+", "shelve.", "-", "intros e e' Heq_index Heq_term Hine Hine'.", "qsimpl time: 1.", "assert (Hentries_match : entries_match es ys).", "intros e''' e'''' e'' Heq_index''' Heq_term' Hine'' Hine''' Heq_index''.", "split; auto.", "assert (Hprefix_within_term : prefix_within_term es ys).", "intros e''''' e'''''' Heq_term'' Heq_index' Hine'''' Hine'''''.", "assert (Hrachet : forall x x' : entry, eIndex x = eIndex x' -> In x es -> In x' ys -> In x' es).", "intros x x' Heq_index'''' Hine'''''' Hine'''''''.", "assert (HmaxIndex_es : maxIndex es >= 1).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (HmaxIndex_ys : maxIndex ys >= 1).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (Hexists_es : exists x : entry, eIndex x = maxIndex es /\\ In x es).", "apply maxIndex_exists_in.", "assert (Hexists_ys : exists y : entry, eIndex y = maxIndex ys /\\ In y ys).", "apply maxIndex_exists_in."], "tactic": "destruct Hexists_es as [x Hexists_es].", "exn": "The reference Hexists_es was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros es ys plt.", "intro Hsorted.", "intro Hunique.", "intros Hindices_eq.", "intros HmaxIndex.", "intros Hes_pos.", "intros Hys_pos.", "assert (Hcontiguous : contiguous 0 0 es ys).", "split.", "-", "left; reflexivity.", "-", "qsimpl time: 1.", "+", "shelve.", "+", "shelve.", "-", "intros e e' Heq_index Heq_term Hine Hine'.", "qsimpl time: 1.", "assert (Hentries_match : entries_match es ys).", "intros e''' e'''' e'' Heq_index''' Heq_term' Hine'' Hine''' Heq_index''.", "split; auto.", "assert (Hprefix_within_term : prefix_within_term es ys).", "intros e''''' e'''''' Heq_term'' Heq_index' Hine'''' Hine'''''.", "assert (Hrachet : forall x x' : entry, eIndex x = eIndex x' -> In x es -> In x' ys -> In x' es).", "intros x x' Heq_index'''' Hine'''''' Hine'''''''.", "assert (HmaxIndex_es : maxIndex es >= 1).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (HmaxIndex_ys : maxIndex ys >= 1).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (Hexists_es : exists x : entry, eIndex x = maxIndex es /\\ In x es).", "apply maxIndex_exists_in.", "assert (Hexists_ys : exists y : entry, eIndex y = maxIndex ys /\\ In y ys).", "apply maxIndex_exists_in."], "tactic": "destruct Hexists_ys as [y Hexists_ys].", "exn": "The reference Hexists_ys was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros es ys plt.", "intro Hsorted.", "intro Hunique.", "intros Hindices_eq.", "intros HmaxIndex.", "intros Hes_pos.", "intros Hys_pos.", "assert (Hcontiguous : contiguous 0 0 es ys).", "split.", "-", "left; reflexivity.", "-", "qsimpl time: 1.", "+", "shelve.", "+", "shelve.", "-", "intros e e' Heq_index Heq_term Hine Hine'.", "qsimpl time: 1.", "assert (Hentries_match : entries_match es ys).", "intros e''' e'''' e'' Heq_index''' Heq_term' Hine'' Hine''' Heq_index''.", "split; auto.", "assert (Hprefix_within_term : prefix_within_term es ys).", "intros e''''' e'''''' Heq_term'' Heq_index' Hine'''' Hine'''''.", "assert (Hrachet : forall x x' : entry, eIndex x = eIndex x' -> In x es -> In x' ys -> In x' es).", "intros x x' Heq_index'''' Hine'''''' Hine'''''''.", "assert (HmaxIndex_es : maxIndex es >= 1).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (HmaxIndex_ys : maxIndex ys >= 1).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (Hexists_es : exists x : entry, eIndex x = maxIndex es /\\ In x es).", "apply maxIndex_exists_in.", "assert (Hexists_ys : exists y : entry, eIndex y = maxIndex ys /\\ In y ys).", "apply maxIndex_exists_in.", "destruct mkEntry as [y mkEntry].", "assert (Hx_in_ys : In x ys)."], "tactic": "apply Hprefix_within_term with (e := x) (e' := y); try auto.", "exn": "The reference y was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros es ys plt.", "intro Hsorted.", "intro Hunique.", "intros Hindices_eq.", "intros HmaxIndex.", "intros Hes_pos.", "intros Hys_pos.", "assert (Hcontiguous : contiguous 0 0 es ys).", "split.", "-", "left; reflexivity.", "-", "qsimpl time: 1.", "+", "shelve.", "+", "shelve.", "-", "intros e e' Heq_index Heq_term Hine Hine'.", "qsimpl time: 1.", "assert (Hentries_match : entries_match es ys).", "intros e''' e'''' e'' Heq_index''' Heq_term' Hine'' Hine''' Heq_index''.", "split; auto.", "assert (Hprefix_within_term : prefix_within_term es ys).", "intros e''''' e'''''' Heq_term'' Heq_index' Hine'''' Hine'''''.", "assert (Hrachet : forall x x' : entry, eIndex x = eIndex x' -> In x es -> In x' ys -> In x' es).", "intros x x' Heq_index'''' Hine'''''' Hine'''''''.", "assert (HmaxIndex_es : maxIndex es >= 1).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (HmaxIndex_ys : maxIndex ys >= 1).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (Hexists_es : exists x : entry, eIndex x = maxIndex es /\\ In x es).", "apply maxIndex_exists_in.", "assert (Hexists_ys : exists y : entry, eIndex y = maxIndex ys /\\ In y ys).", "apply maxIndex_exists_in.", "destruct mkEntry as [y mkEntry].", "assert (Hx_in_ys : In x ys)."], "tactic": "left; reflexivity.", "exn": "Not an inductive product.", "type": "not_inductive_product", "handled": true}, {"ctx": ["intros es ys plt.", "intro Hsorted.", "intro Hunique.", "intros Hindices_eq.", "intros HmaxIndex.", "intros Hes_pos.", "intros Hys_pos.", "assert (Hcontiguous : contiguous 0 0 es ys).", "split.", "-", "left; reflexivity.", "-", "qsimpl time: 1.", "+", "shelve.", "+", "shelve.", "-", "intros e e' Heq_index Heq_term Hine Hine'.", "qsimpl time: 1.", "assert (Hentries_match : entries_match es ys).", "intros e''' e'''' e'' Heq_index''' Heq_term' Hine'' Hine''' Heq_index''.", "split; auto.", "assert (Hprefix_within_term : prefix_within_term es ys).", "intros e''''' e'''''' Heq_term'' Heq_index' Hine'''' Hine'''''.", "assert (Hrachet : forall x x' : entry, eIndex x = eIndex x' -> In x es -> In x' ys -> In x' es).", "intros x x' Heq_index'''' Hine'''''' Hine'''''''.", "assert (HmaxIndex_es : maxIndex es >= 1).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (HmaxIndex_ys : maxIndex ys >= 1).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (Hexists_es : exists x : entry, eIndex x = maxIndex es /\\ In x es).", "apply maxIndex_exists_in.", "assert (Hexists_ys : exists y : entry, eIndex y = maxIndex ys /\\ In y ys).", "apply maxIndex_exists_in.", "destruct mkEntry as [y mkEntry].", "assert (Hx_in_ys : In x ys).", "qsimpl time: 1 use: maxIndex_non_empty."], "tactic": "assert (Hy_in_es : In y es).", "exn": "The reference y was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros es ys plt.", "intro Hsorted.", "intro Hunique.", "intros Hindices_eq.", "intros HmaxIndex.", "intros Hes_pos.", "intros Hys_pos.", "assert (Hcontiguous : contiguous 0 0 es ys).", "split.", "-", "left; reflexivity.", "-", "qsimpl time: 1.", "+", "shelve.", "+", "shelve.", "-", "intros e e' Heq_index Heq_term Hine Hine'.", "qsimpl time: 1.", "assert (Hentries_match : entries_match es ys).", "intros e''' e'''' e'' Heq_index''' Heq_term' Hine'' Hine''' Heq_index''.", "split; auto.", "assert (Hprefix_within_term : prefix_within_term es ys).", "intros e''''' e'''''' Heq_term'' Heq_index' Hine'''' Hine'''''.", "assert (Hrachet : forall x x' : entry, eIndex x = eIndex x' -> In x es -> In x' ys -> In x' es).", "intros x x' Heq_index'''' Hine'''''' Hine'''''''.", "assert (HmaxIndex_es : maxIndex es >= 1).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (HmaxIndex_ys : maxIndex ys >= 1).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (Hexists_es : exists x : entry, eIndex x = maxIndex es /\\ In x es).", "apply maxIndex_exists_in.", "assert (Hexists_ys : exists y : entry, eIndex y = maxIndex ys /\\ In y ys).", "apply maxIndex_exists_in.", "destruct mkEntry as [y mkEntry].", "assert (Hx_in_ys : In x ys).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (He''''''_in_es : In e'''''' es)."], "tactic": "apply Hrachet with (x := x) (x' := y); try auto.", "exn": "The reference y was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros es ys plt.", "intro Hsorted.", "intro Hunique.", "intros Hindices_eq.", "intros HmaxIndex.", "intros Hes_pos.", "intros Hys_pos.", "assert (Hcontiguous : contiguous 0 0 es ys).", "split.", "-", "left; reflexivity.", "-", "qsimpl time: 1.", "+", "shelve.", "+", "shelve.", "-", "intros e e' Heq_index Heq_term Hine Hine'.", "qsimpl time: 1.", "assert (Hentries_match : entries_match es ys).", "intros e''' e'''' e'' Heq_index''' Heq_term' Hine'' Hine''' Heq_index''.", "split; auto.", "assert (Hprefix_within_term : prefix_within_term es ys).", "intros e''''' e'''''' Heq_term'' Heq_index' Hine'''' Hine'''''.", "assert (Hrachet : forall x x' : entry, eIndex x = eIndex x' -> In x es -> In x' ys -> In x' es).", "intros x x' Heq_index'''' Hine'''''' Hine'''''''.", "assert (HmaxIndex_es : maxIndex es >= 1).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (HmaxIndex_ys : maxIndex ys >= 1).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (Hexists_es : exists x : entry, eIndex x = maxIndex es /\\ In x es).", "apply maxIndex_exists_in.", "assert (Hexists_ys : exists y : entry, eIndex y = maxIndex ys /\\ In y ys).", "apply maxIndex_exists_in.", "destruct mkEntry as [y mkEntry].", "assert (Hx_in_ys : In x ys).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (He''''''_in_es : In e'''''' es)."], "tactic": "split; auto.", "exn": "Not an inductive product.", "type": "not_inductive_product", "handled": true}, {"ctx": ["intros es ys plt.", "intro Hsorted.", "intro Hunique.", "intros Hindices_eq.", "intros HmaxIndex.", "intros Hes_pos.", "intros Hys_pos.", "assert (Hcontiguous : contiguous 0 0 es ys).", "split.", "-", "left; reflexivity.", "-", "qsimpl time: 1.", "+", "shelve.", "+", "shelve.", "-", "intros e e' Heq_index Heq_term Hine Hine'.", "qsimpl time: 1.", "assert (Hentries_match : entries_match es ys).", "intros e''' e'''' e'' Heq_index''' Heq_term' Hine'' Hine''' Heq_index''.", "split; auto.", "assert (Hprefix_within_term : prefix_within_term es ys).", "intros e''''' e'''''' Heq_term'' Heq_index' Hine'''' Hine'''''.", "assert (Hrachet : forall x x' : entry, eIndex x = eIndex x' -> In x es -> In x' ys -> In x' es).", "intros x x' Heq_index'''' Hine'''''' Hine'''''''.", "assert (HmaxIndex_es : maxIndex es >= 1).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (HmaxIndex_ys : maxIndex ys >= 1).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (Hexists_es : exists x : entry, eIndex x = maxIndex es /\\ In x es).", "apply maxIndex_exists_in.", "assert (Hexists_ys : exists y : entry, eIndex y = maxIndex ys /\\ In y ys).", "apply maxIndex_exists_in.", "destruct mkEntry as [y mkEntry].", "assert (Hx_in_ys : In x ys).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (He''''''_in_es : In e'''''' es).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (HmaxIndex_eq : maxIndex es = maxIndex ys)."], "tactic": "apply maxIndex_subset with (xs := es) (ys := ys); try auto.", "exn": "In environment orig_base_params : BaseParams raft_params : RaftParams orig_base_params H6 : forall l : list entry, (l = [] -> False) -> exists e : entry, In e l /\\\\ maxIndex l = eIndex e /\\\\ maxTerm l = eTerm e es, ys : list entry plt : term Hsorted : sorted es Hunique : uniqueIndices ys Hes_pos : forall e : entry, In e es -> 0 < eIndex e Hys_pos : forall y : entry, In y ys -> 0 < eIndex y e, e', Heq_index : entry Heq_term : eIndex e = eIndex e' Hine : eTerm e = eTerm e' Hine' : In e es H : In e' ys H0 : eIndex Heq_index <= eIndex e H1 : forall i : nat, 0 < i -> i <= maxIndex es -> exists e : entry, eIndex e = i /\\\\ In e es H2 : forall e1 e2 : entry, eIndex e1 = eIndex e2 -> eTerm e1 = eTerm e2 -> In e1 es -> In e2 ys -> (0 = 0 -> False) -> exists e4 : entry, eIndex e4 = 0 /\\\\ eTerm e4 = plt /\\\\ In e4 ys H3 : forall e1 e2 : entry, eIndex e1 = eIndex e2 -> eTerm e1 = eTerm e2 -> In e1 es -> In e2 ys -> forall e3 : entry, eIndex e3 <= eIndex e1 -> In e3 es -> In e3 ys H4 : In Heq_index ys H7 : forall e : entry, In e es -> eIndex e > 0 -> eIndex e <= maxIndex ys -> In e ys H8 : forall e e' : entry, eIndex e = eIndex e' -> eTerm e = eTerm e' -> In e ys -> In e' es -> e = e' init : data handler : input -> data -> output * data e''', e'''', e'' : entry Heq_index''' : eIndex e''' = eIndex e'''' Heq_term' : eTerm e''' = eTerm e'''' Hine'' : In e''' es Hine''' : In e'''' ys Heq_index'' : eIndex e'' <= eIndex e''' e''''', e'''''' : entry Heq_term'' : eTerm e''''' = eTerm e'''''' Heq_index' : eIndex e''''' <= eIndex e'''''' Hine'''' : In e''''' es Hine''''' : In e'''''' ys x, x' : entry Heq_index'''' : eIndex x = eIndex x' Hine'''''' : In x es Hine''''''' : In x' ys Unable to unify \"maxIndex es <= maxIndex ys\" with \"maxIndex es = maxIndex ys\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros es ys plt.", "intro Hsorted.", "intro Hunique.", "intros Hindices_eq.", "intros HmaxIndex.", "intros Hes_pos.", "intros Hys_pos.", "assert (Hcontiguous : contiguous 0 0 es ys).", "split.", "-", "left; reflexivity.", "-", "qsimpl time: 1.", "+", "shelve.", "+", "shelve.", "-", "intros e e' Heq_index Heq_term Hine Hine'.", "qsimpl time: 1.", "assert (Hentries_match : entries_match es ys).", "intros e''' e'''' e'' Heq_index''' Heq_term' Hine'' Hine''' Heq_index''.", "split; auto.", "assert (Hprefix_within_term : prefix_within_term es ys).", "intros e''''' e'''''' Heq_term'' Heq_index' Hine'''' Hine'''''.", "assert (Hrachet : forall x x' : entry, eIndex x = eIndex x' -> In x es -> In x' ys -> In x' es).", "intros x x' Heq_index'''' Hine'''''' Hine'''''''.", "assert (HmaxIndex_es : maxIndex es >= 1).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (HmaxIndex_ys : maxIndex ys >= 1).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (Hexists_es : exists x : entry, eIndex x = maxIndex es /\\ In x es).", "apply maxIndex_exists_in.", "assert (Hexists_ys : exists y : entry, eIndex y = maxIndex ys /\\ In y ys).", "apply maxIndex_exists_in.", "destruct mkEntry as [y mkEntry].", "assert (Hx_in_ys : In x ys).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (He''''''_in_es : In e'''''' es).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (HmaxIndex_eq : maxIndex es = maxIndex ys).", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset."], "tactic": "intros e Hine.", "exn": "e is already used.", "type": "used_var", "handled": true}, {"ctx": ["intros es ys plt.", "intro Hsorted.", "intro Hunique.", "intros Hindices_eq.", "intros HmaxIndex.", "intros Hes_pos.", "intros Hys_pos.", "assert (Hcontiguous : contiguous 0 0 es ys).", "split.", "-", "left; reflexivity.", "-", "qsimpl time: 1.", "+", "shelve.", "+", "shelve.", "-", "intros e e' Heq_index Heq_term Hine Hine'.", "qsimpl time: 1.", "assert (Hentries_match : entries_match es ys).", "intros e''' e'''' e'' Heq_index''' Heq_term' Hine'' Hine''' Heq_index''.", "split; auto.", "assert (Hprefix_within_term : prefix_within_term es ys).", "intros e''''' e'''''' Heq_term'' Heq_index' Hine'''' Hine'''''.", "assert (Hrachet : forall x x' : entry, eIndex x = eIndex x' -> In x es -> In x' ys -> In x' es).", "intros x x' Heq_index'''' Hine'''''' Hine'''''''.", "assert (HmaxIndex_es : maxIndex es >= 1).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (HmaxIndex_ys : maxIndex ys >= 1).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (Hexists_es : exists x : entry, eIndex x = maxIndex es /\\ In x es).", "apply maxIndex_exists_in.", "assert (Hexists_ys : exists y : entry, eIndex y = maxIndex ys /\\ In y ys).", "apply maxIndex_exists_in.", "destruct mkEntry as [y mkEntry].", "assert (Hx_in_ys : In x ys).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (He''''''_in_es : In e'''''' es).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (HmaxIndex_eq : maxIndex es = maxIndex ys).", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset."], "tactic": "intros e' Hine.", "exn": "e' is already used.", "type": "used_var", "handled": true}, {"ctx": ["intros es ys plt.", "intro Hsorted.", "intro Hunique.", "intros Hindices_eq.", "intros HmaxIndex.", "intros Hes_pos.", "intros Hys_pos.", "assert (Hcontiguous : contiguous 0 0 es ys).", "split.", "-", "left; reflexivity.", "-", "qsimpl time: 1.", "+", "shelve.", "+", "shelve.", "-", "intros e e' Heq_index Heq_term Hine Hine'.", "qsimpl time: 1.", "assert (Hentries_match : entries_match es ys).", "intros e''' e'''' e'' Heq_index''' Heq_term' Hine'' Hine''' Heq_index''.", "split; auto.", "assert (Hprefix_within_term : prefix_within_term es ys).", "intros e''''' e'''''' Heq_term'' Heq_index' Hine'''' Hine'''''.", "assert (Hrachet : forall x x' : entry, eIndex x = eIndex x' -> In x es -> In x' ys -> In x' es).", "intros x x' Heq_index'''' Hine'''''' Hine'''''''.", "assert (HmaxIndex_es : maxIndex es >= 1).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (HmaxIndex_ys : maxIndex ys >= 1).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (Hexists_es : exists x : entry, eIndex x = maxIndex es /\\ In x es).", "apply maxIndex_exists_in.", "assert (Hexists_ys : exists y : entry, eIndex y = maxIndex ys /\\ In y ys).", "apply maxIndex_exists_in.", "destruct mkEntry as [y mkEntry].", "assert (Hx_in_ys : In x ys).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (He''''''_in_es : In e'''''' es).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (HmaxIndex_eq : maxIndex es = maxIndex ys).", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset."], "tactic": "intros e'' Hine.", "exn": "e'' is already used.", "type": "used_var", "handled": true}, {"ctx": ["intros es ys plt.", "intro Hsorted.", "intro Hunique.", "intros Hindices_eq.", "intros HmaxIndex.", "intros Hes_pos.", "intros Hys_pos.", "assert (Hcontiguous : contiguous 0 0 es ys).", "split.", "-", "left; reflexivity.", "-", "qsimpl time: 1.", "+", "shelve.", "+", "shelve.", "-", "intros e e' Heq_index Heq_term Hine Hine'.", "qsimpl time: 1.", "assert (Hentries_match : entries_match es ys).", "intros e''' e'''' e'' Heq_index''' Heq_term' Hine'' Hine''' Heq_index''.", "split; auto.", "assert (Hprefix_within_term : prefix_within_term es ys).", "intros e''''' e'''''' Heq_term'' Heq_index' Hine'''' Hine'''''.", "assert (Hrachet : forall x x' : entry, eIndex x = eIndex x' -> In x es -> In x' ys -> In x' es).", "intros x x' Heq_index'''' Hine'''''' Hine'''''''.", "assert (HmaxIndex_es : maxIndex es >= 1).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (HmaxIndex_ys : maxIndex ys >= 1).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (Hexists_es : exists x : entry, eIndex x = maxIndex es /\\ In x es).", "apply maxIndex_exists_in.", "assert (Hexists_ys : exists y : entry, eIndex y = maxIndex ys /\\ In y ys).", "apply maxIndex_exists_in.", "destruct mkEntry as [y mkEntry].", "assert (Hx_in_ys : In x ys).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (He''''''_in_es : In e'''''' es).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (HmaxIndex_eq : maxIndex es = maxIndex ys).", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset."], "tactic": "intros e''' Hine.", "exn": "e''' is already used.", "type": "used_var", "handled": true}, {"ctx": ["intros es ys plt.", "intro Hsorted.", "intro Hunique.", "intros Hindices_eq.", "intros HmaxIndex.", "intros Hes_pos.", "intros Hys_pos.", "assert (Hcontiguous : contiguous 0 0 es ys).", "split.", "-", "left; reflexivity.", "-", "qsimpl time: 1.", "+", "shelve.", "+", "shelve.", "-", "intros e e' Heq_index Heq_term Hine Hine'.", "qsimpl time: 1.", "assert (Hentries_match : entries_match es ys).", "intros e''' e'''' e'' Heq_index''' Heq_term' Hine'' Hine''' Heq_index''.", "split; auto.", "assert (Hprefix_within_term : prefix_within_term es ys).", "intros e''''' e'''''' Heq_term'' Heq_index' Hine'''' Hine'''''.", "assert (Hrachet : forall x x' : entry, eIndex x = eIndex x' -> In x es -> In x' ys -> In x' es).", "intros x x' Heq_index'''' Hine'''''' Hine'''''''.", "assert (HmaxIndex_es : maxIndex es >= 1).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (HmaxIndex_ys : maxIndex ys >= 1).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (Hexists_es : exists x : entry, eIndex x = maxIndex es /\\ In x es).", "apply maxIndex_exists_in.", "assert (Hexists_ys : exists y : entry, eIndex y = maxIndex ys /\\ In y ys).", "apply maxIndex_exists_in.", "destruct mkEntry as [y mkEntry].", "assert (Hx_in_ys : In x ys).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (He''''''_in_es : In e'''''' es).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (HmaxIndex_eq : maxIndex es = maxIndex ys).", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset."], "tactic": "intros e'''' Hine.", "exn": "e'''' is already used.", "type": "used_var", "handled": true}, {"ctx": ["intros es ys plt.", "intro Hsorted.", "intro Hunique.", "intros Hindices_eq.", "intros HmaxIndex.", "intros Hes_pos.", "intros Hys_pos.", "assert (Hcontiguous : contiguous 0 0 es ys).", "split.", "-", "left; reflexivity.", "-", "qsimpl time: 1.", "+", "shelve.", "+", "shelve.", "-", "intros e e' Heq_index Heq_term Hine Hine'.", "qsimpl time: 1.", "assert (Hentries_match : entries_match es ys).", "intros e''' e'''' e'' Heq_index''' Heq_term' Hine'' Hine''' Heq_index''.", "split; auto.", "assert (Hprefix_within_term : prefix_within_term es ys).", "intros e''''' e'''''' Heq_term'' Heq_index' Hine'''' Hine'''''.", "assert (Hrachet : forall x x' : entry, eIndex x = eIndex x' -> In x es -> In x' ys -> In x' es).", "intros x x' Heq_index'''' Hine'''''' Hine'''''''.", "assert (HmaxIndex_es : maxIndex es >= 1).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (HmaxIndex_ys : maxIndex ys >= 1).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (Hexists_es : exists x : entry, eIndex x = maxIndex es /\\ In x es).", "apply maxIndex_exists_in.", "assert (Hexists_ys : exists y : entry, eIndex y = maxIndex ys /\\ In y ys).", "apply maxIndex_exists_in.", "destruct mkEntry as [y mkEntry].", "assert (Hx_in_ys : In x ys).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (He''''''_in_es : In e'''''' es).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (HmaxIndex_eq : maxIndex es = maxIndex ys).", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset."], "tactic": "intros e''''' Hine.", "exn": "e''''' is already used.", "type": "used_var", "handled": true}, {"ctx": ["intros es ys plt.", "intro Hsorted.", "intro Hunique.", "intros Hindices_eq.", "intros HmaxIndex.", "intros Hes_pos.", "intros Hys_pos.", "assert (Hcontiguous : contiguous 0 0 es ys).", "split.", "-", "left; reflexivity.", "-", "qsimpl time: 1.", "+", "shelve.", "+", "shelve.", "-", "intros e e' Heq_index Heq_term Hine Hine'.", "qsimpl time: 1.", "assert (Hentries_match : entries_match es ys).", "intros e''' e'''' e'' Heq_index''' Heq_term' Hine'' Hine''' Heq_index''.", "split; auto.", "assert (Hprefix_within_term : prefix_within_term es ys).", "intros e''''' e'''''' Heq_term'' Heq_index' Hine'''' Hine'''''.", "assert (Hrachet : forall x x' : entry, eIndex x = eIndex x' -> In x es -> In x' ys -> In x' es).", "intros x x' Heq_index'''' Hine'''''' Hine'''''''.", "assert (HmaxIndex_es : maxIndex es >= 1).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (HmaxIndex_ys : maxIndex ys >= 1).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (Hexists_es : exists x : entry, eIndex x = maxIndex es /\\ In x es).", "apply maxIndex_exists_in.", "assert (Hexists_ys : exists y : entry, eIndex y = maxIndex ys /\\ In y ys).", "apply maxIndex_exists_in.", "destruct mkEntry as [y mkEntry].", "assert (Hx_in_ys : In x ys).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (He''''''_in_es : In e'''''' es).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (HmaxIndex_eq : maxIndex es = maxIndex ys).", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset."], "tactic": "intros e'''''' Hine.", "exn": "e'''''' is already used.", "type": "used_var", "handled": true}, {"ctx": ["intros es ys plt.", "intro Hsorted.", "intro Hunique.", "intros Hindices_eq.", "intros HmaxIndex.", "intros Hes_pos.", "intros Hys_pos.", "assert (Hcontiguous : contiguous 0 0 es ys).", "split.", "-", "left; reflexivity.", "-", "qsimpl time: 1.", "+", "shelve.", "+", "shelve.", "-", "intros e e' Heq_index Heq_term Hine Hine'.", "qsimpl time: 1.", "assert (Hentries_match : entries_match es ys).", "intros e''' e'''' e'' Heq_index''' Heq_term' Hine'' Hine''' Heq_index''.", "split; auto.", "assert (Hprefix_within_term : prefix_within_term es ys).", "intros e''''' e'''''' Heq_term'' Heq_index' Hine'''' Hine'''''.", "assert (Hrachet : forall x x' : entry, eIndex x = eIndex x' -> In x es -> In x' ys -> In x' es).", "intros x x' Heq_index'''' Hine'''''' Hine'''''''.", "assert (HmaxIndex_es : maxIndex es >= 1).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (HmaxIndex_ys : maxIndex ys >= 1).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (Hexists_es : exists x : entry, eIndex x = maxIndex es /\\ In x es).", "apply maxIndex_exists_in.", "assert (Hexists_ys : exists y : entry, eIndex y = maxIndex ys /\\ In y ys).", "apply maxIndex_exists_in.", "destruct mkEntry as [y mkEntry].", "assert (Hx_in_ys : In x ys).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (He''''''_in_es : In e'''''' es).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (HmaxIndex_eq : maxIndex es = maxIndex ys).", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset."], "tactic": "intros e''''''' Hine.", "exn": "Hine is already used.", "type": "used_var", "handled": true}, {"ctx": ["intros es ys plt.", "intro Hsorted.", "intro Hunique.", "intros Hindices_eq.", "intros HmaxIndex.", "intros Hes_pos.", "intros Hys_pos.", "assert (Hcontiguous : contiguous 0 0 es ys).", "split.", "-", "left; reflexivity.", "-", "qsimpl time: 1.", "+", "shelve.", "+", "shelve.", "-", "intros e e' Heq_index Heq_term Hine Hine'.", "qsimpl time: 1.", "assert (Hentries_match : entries_match es ys).", "intros e''' e'''' e'' Heq_index''' Heq_term' Hine'' Hine''' Heq_index''.", "split; auto.", "assert (Hprefix_within_term : prefix_within_term es ys).", "intros e''''' e'''''' Heq_term'' Heq_index' Hine'''' Hine'''''.", "assert (Hrachet : forall x x' : entry, eIndex x = eIndex x' -> In x es -> In x' ys -> In x' es).", "intros x x' Heq_index'''' Hine'''''' Hine'''''''.", "assert (HmaxIndex_es : maxIndex es >= 1).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (HmaxIndex_ys : maxIndex ys >= 1).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (Hexists_es : exists x : entry, eIndex x = maxIndex es /\\ In x es).", "apply maxIndex_exists_in.", "assert (Hexists_ys : exists y : entry, eIndex y = maxIndex ys /\\ In y ys).", "apply maxIndex_exists_in.", "destruct mkEntry as [y mkEntry].", "assert (Hx_in_ys : In x ys).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (He''''''_in_es : In e'''''' es).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (HmaxIndex_eq : maxIndex es = maxIndex ys).", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset."], "tactic": "intros e''''''' Hine'.", "exn": "Hine' is already used.", "type": "used_var", "handled": true}, {"ctx": ["intros es ys plt.", "intro Hsorted.", "intro Hunique.", "intros Hindices_eq.", "intros HmaxIndex.", "intros Hes_pos.", "intros Hys_pos.", "assert (Hcontiguous : contiguous 0 0 es ys).", "split.", "-", "left; reflexivity.", "-", "qsimpl time: 1.", "+", "shelve.", "+", "shelve.", "-", "intros e e' Heq_index Heq_term Hine Hine'.", "qsimpl time: 1.", "assert (Hentries_match : entries_match es ys).", "intros e''' e'''' e'' Heq_index''' Heq_term' Hine'' Hine''' Heq_index''.", "split; auto.", "assert (Hprefix_within_term : prefix_within_term es ys).", "intros e''''' e'''''' Heq_term'' Heq_index' Hine'''' Hine'''''.", "assert (Hrachet : forall x x' : entry, eIndex x = eIndex x' -> In x es -> In x' ys -> In x' es).", "intros x x' Heq_index'''' Hine'''''' Hine'''''''.", "assert (HmaxIndex_es : maxIndex es >= 1).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (HmaxIndex_ys : maxIndex ys >= 1).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (Hexists_es : exists x : entry, eIndex x = maxIndex es /\\ In x es).", "apply maxIndex_exists_in.", "assert (Hexists_ys : exists y : entry, eIndex y = maxIndex ys /\\ In y ys).", "apply maxIndex_exists_in.", "destruct mkEntry as [y mkEntry].", "assert (Hx_in_ys : In x ys).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (He''''''_in_es : In e'''''' es).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (HmaxIndex_eq : maxIndex es = maxIndex ys).", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset."], "tactic": "intros e''''''' Hine''.", "exn": "Hine'' is already used.", "type": "used_var", "handled": true}, {"ctx": ["intros es ys plt.", "intro Hsorted.", "intro Hunique.", "intros Hindices_eq.", "intros HmaxIndex.", "intros Hes_pos.", "intros Hys_pos.", "assert (Hcontiguous : contiguous 0 0 es ys).", "split.", "-", "left; reflexivity.", "-", "qsimpl time: 1.", "+", "shelve.", "+", "shelve.", "-", "intros e e' Heq_index Heq_term Hine Hine'.", "qsimpl time: 1.", "assert (Hentries_match : entries_match es ys).", "intros e''' e'''' e'' Heq_index''' Heq_term' Hine'' Hine''' Heq_index''.", "split; auto.", "assert (Hprefix_within_term : prefix_within_term es ys).", "intros e''''' e'''''' Heq_term'' Heq_index' Hine'''' Hine'''''.", "assert (Hrachet : forall x x' : entry, eIndex x = eIndex x' -> In x es -> In x' ys -> In x' es).", "intros x x' Heq_index'''' Hine'''''' Hine'''''''.", "assert (HmaxIndex_es : maxIndex es >= 1).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (HmaxIndex_ys : maxIndex ys >= 1).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (Hexists_es : exists x : entry, eIndex x = maxIndex es /\\ In x es).", "apply maxIndex_exists_in.", "assert (Hexists_ys : exists y : entry, eIndex y = maxIndex ys /\\ In y ys).", "apply maxIndex_exists_in.", "destruct mkEntry as [y mkEntry].", "assert (Hx_in_ys : In x ys).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (He''''''_in_es : In e'''''' es).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (HmaxIndex_eq : maxIndex es = maxIndex ys).", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset."], "tactic": "intros e''''''' Hine'''.", "exn": "Hine''' is already used.", "type": "used_var", "handled": true}, {"ctx": ["intros es ys plt.", "intro Hsorted.", "intro Hunique.", "intros Hindices_eq.", "intros HmaxIndex.", "intros Hes_pos.", "intros Hys_pos.", "assert (Hcontiguous : contiguous 0 0 es ys).", "split.", "-", "left; reflexivity.", "-", "qsimpl time: 1.", "+", "shelve.", "+", "shelve.", "-", "intros e e' Heq_index Heq_term Hine Hine'.", "qsimpl time: 1.", "assert (Hentries_match : entries_match es ys).", "intros e''' e'''' e'' Heq_index''' Heq_term' Hine'' Hine''' Heq_index''.", "split; auto.", "assert (Hprefix_within_term : prefix_within_term es ys).", "intros e''''' e'''''' Heq_term'' Heq_index' Hine'''' Hine'''''.", "assert (Hrachet : forall x x' : entry, eIndex x = eIndex x' -> In x es -> In x' ys -> In x' es).", "intros x x' Heq_index'''' Hine'''''' Hine'''''''.", "assert (HmaxIndex_es : maxIndex es >= 1).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (HmaxIndex_ys : maxIndex ys >= 1).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (Hexists_es : exists x : entry, eIndex x = maxIndex es /\\ In x es).", "apply maxIndex_exists_in.", "assert (Hexists_ys : exists y : entry, eIndex y = maxIndex ys /\\ In y ys).", "apply maxIndex_exists_in.", "destruct mkEntry as [y mkEntry].", "assert (Hx_in_ys : In x ys).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (He''''''_in_es : In e'''''' es).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (HmaxIndex_eq : maxIndex es = maxIndex ys).", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset."], "tactic": "intros e''''''' Hine''''.", "exn": "Hine'''' is already used.", "type": "used_var", "handled": true}, {"ctx": ["intros es ys plt.", "intro Hsorted.", "intro Hunique.", "intros Hindices_eq.", "intros HmaxIndex.", "intros Hes_pos.", "intros Hys_pos.", "assert (Hcontiguous : contiguous 0 0 es ys).", "split.", "-", "left; reflexivity.", "-", "qsimpl time: 1.", "+", "shelve.", "+", "shelve.", "-", "intros e e' Heq_index Heq_term Hine Hine'.", "qsimpl time: 1.", "assert (Hentries_match : entries_match es ys).", "intros e''' e'''' e'' Heq_index''' Heq_term' Hine'' Hine''' Heq_index''.", "split; auto.", "assert (Hprefix_within_term : prefix_within_term es ys).", "intros e''''' e'''''' Heq_term'' Heq_index' Hine'''' Hine'''''.", "assert (Hrachet : forall x x' : entry, eIndex x = eIndex x' -> In x es -> In x' ys -> In x' es).", "intros x x' Heq_index'''' Hine'''''' Hine'''''''.", "assert (HmaxIndex_es : maxIndex es >= 1).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (HmaxIndex_ys : maxIndex ys >= 1).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (Hexists_es : exists x : entry, eIndex x = maxIndex es /\\ In x es).", "apply maxIndex_exists_in.", "assert (Hexists_ys : exists y : entry, eIndex y = maxIndex ys /\\ In y ys).", "apply maxIndex_exists_in.", "destruct mkEntry as [y mkEntry].", "assert (Hx_in_ys : In x ys).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (He''''''_in_es : In e'''''' es).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (HmaxIndex_eq : maxIndex es = maxIndex ys).", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset."], "tactic": "intros e''''''' Hine'''''.", "exn": "Hine''''' is already used.", "type": "used_var", "handled": true}, {"ctx": ["intros es ys plt.", "intro Hsorted.", "intro Hunique.", "intros Hindices_eq.", "intros HmaxIndex.", "intros Hes_pos.", "intros Hys_pos.", "assert (Hcontiguous : contiguous 0 0 es ys).", "split.", "-", "left; reflexivity.", "-", "qsimpl time: 1.", "+", "shelve.", "+", "shelve.", "-", "intros e e' Heq_index Heq_term Hine Hine'.", "qsimpl time: 1.", "assert (Hentries_match : entries_match es ys).", "intros e''' e'''' e'' Heq_index''' Heq_term' Hine'' Hine''' Heq_index''.", "split; auto.", "assert (Hprefix_within_term : prefix_within_term es ys).", "intros e''''' e'''''' Heq_term'' Heq_index' Hine'''' Hine'''''.", "assert (Hrachet : forall x x' : entry, eIndex x = eIndex x' -> In x es -> In x' ys -> In x' es).", "intros x x' Heq_index'''' Hine'''''' Hine'''''''.", "assert (HmaxIndex_es : maxIndex es >= 1).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (HmaxIndex_ys : maxIndex ys >= 1).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (Hexists_es : exists x : entry, eIndex x = maxIndex es /\\ In x es).", "apply maxIndex_exists_in.", "assert (Hexists_ys : exists y : entry, eIndex y = maxIndex ys /\\ In y ys).", "apply maxIndex_exists_in.", "destruct mkEntry as [y mkEntry].", "assert (Hx_in_ys : In x ys).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (He''''''_in_es : In e'''''' es).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (HmaxIndex_eq : maxIndex es = maxIndex ys).", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset."], "tactic": "intros e''''''' Hine''''''.", "exn": "Hine'''''' is already used.", "type": "used_var", "handled": true}, {"ctx": ["intros es ys plt.", "intro Hsorted.", "intro Hunique.", "intros Hindices_eq.", "intros HmaxIndex.", "intros Hes_pos.", "intros Hys_pos.", "assert (Hcontiguous : contiguous 0 0 es ys).", "split.", "-", "left; reflexivity.", "-", "qsimpl time: 1.", "+", "shelve.", "+", "shelve.", "-", "intros e e' Heq_index Heq_term Hine Hine'.", "qsimpl time: 1.", "assert (Hentries_match : entries_match es ys).", "intros e''' e'''' e'' Heq_index''' Heq_term' Hine'' Hine''' Heq_index''.", "split; auto.", "assert (Hprefix_within_term : prefix_within_term es ys).", "intros e''''' e'''''' Heq_term'' Heq_index' Hine'''' Hine'''''.", "assert (Hrachet : forall x x' : entry, eIndex x = eIndex x' -> In x es -> In x' ys -> In x' es).", "intros x x' Heq_index'''' Hine'''''' Hine'''''''.", "assert (HmaxIndex_es : maxIndex es >= 1).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (HmaxIndex_ys : maxIndex ys >= 1).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (Hexists_es : exists x : entry, eIndex x = maxIndex es /\\ In x es).", "apply maxIndex_exists_in.", "assert (Hexists_ys : exists y : entry, eIndex y = maxIndex ys /\\ In y ys).", "apply maxIndex_exists_in.", "destruct mkEntry as [y mkEntry].", "assert (Hx_in_ys : In x ys).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (He''''''_in_es : In e'''''' es).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (HmaxIndex_eq : maxIndex es = maxIndex ys).", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset."], "tactic": "intros e''''''' Hine'''''''.", "exn": "Hine''''''' is already used.", "type": "used_var", "handled": true}, {"ctx": ["intros es ys plt.", "intro Hsorted.", "intro Hunique.", "intros Hindices_eq.", "intros HmaxIndex.", "intros Hes_pos.", "intros Hys_pos.", "assert (Hcontiguous : contiguous 0 0 es ys).", "split.", "-", "left; reflexivity.", "-", "qsimpl time: 1.", "+", "shelve.", "+", "shelve.", "-", "intros e e' Heq_index Heq_term Hine Hine'.", "qsimpl time: 1.", "assert (Hentries_match : entries_match es ys).", "intros e''' e'''' e'' Heq_index''' Heq_term' Hine'' Hine''' Heq_index''.", "split; auto.", "assert (Hprefix_within_term : prefix_within_term es ys).", "intros e''''' e'''''' Heq_term'' Heq_index' Hine'''' Hine'''''.", "assert (Hrachet : forall x x' : entry, eIndex x = eIndex x' -> In x es -> In x' ys -> In x' es).", "intros x x' Heq_index'''' Hine'''''' Hine'''''''.", "assert (HmaxIndex_es : maxIndex es >= 1).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (HmaxIndex_ys : maxIndex ys >= 1).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (Hexists_es : exists x : entry, eIndex x = maxIndex es /\\ In x es).", "apply maxIndex_exists_in.", "assert (Hexists_ys : exists y : entry, eIndex y = maxIndex ys /\\ In y ys).", "apply maxIndex_exists_in.", "destruct mkEntry as [y mkEntry].", "assert (Hx_in_ys : In x ys).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (He''''''_in_es : In e'''''' es).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (HmaxIndex_eq : maxIndex es = maxIndex ys).", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset."], "tactic": "intros e''''''' Hine''''''''.", "exn": "No product even after head-reduction.", "type": "no_product", "handled": true}, {"ctx": ["intros es ys plt.", "intro Hsorted.", "intro Hunique.", "intros Hindices_eq.", "intros HmaxIndex.", "intros Hes_pos.", "intros Hys_pos.", "assert (Hcontiguous : contiguous 0 0 es ys).", "split.", "-", "left; reflexivity.", "-", "qsimpl time: 1.", "+", "shelve.", "+", "shelve.", "-", "intros e e' Heq_index Heq_term Hine Hine'.", "qsimpl time: 1.", "assert (Hentries_match : entries_match es ys).", "intros e''' e'''' e'' Heq_index''' Heq_term' Hine'' Hine''' Heq_index''.", "split; auto.", "assert (Hprefix_within_term : prefix_within_term es ys).", "intros e''''' e'''''' Heq_term'' Heq_index' Hine'''' Hine'''''.", "assert (Hrachet : forall x x' : entry, eIndex x = eIndex x' -> In x es -> In x' ys -> In x' es).", "intros x x' Heq_index'''' Hine'''''' Hine'''''''.", "assert (HmaxIndex_es : maxIndex es >= 1).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (HmaxIndex_ys : maxIndex ys >= 1).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (Hexists_es : exists x : entry, eIndex x = maxIndex es /\\ In x es).", "apply maxIndex_exists_in.", "assert (Hexists_ys : exists y : entry, eIndex y = maxIndex ys /\\ In y ys).", "apply maxIndex_exists_in.", "destruct mkEntry as [y mkEntry].", "assert (Hx_in_ys : In x ys).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (He''''''_in_es : In e'''''' es).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (HmaxIndex_eq : maxIndex es = maxIndex ys).", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset."], "tactic": "apply Hprefix_within_term with (e := e) (e' := y); try auto.", "exn": "The reference y was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros es ys plt.", "intro Hsorted.", "intro Hunique.", "intros Hindices_eq.", "intros HmaxIndex.", "intros Hes_pos.", "intros Hys_pos.", "assert (Hcontiguous : contiguous 0 0 es ys).", "split.", "-", "left; reflexivity.", "-", "qsimpl time: 1.", "+", "shelve.", "+", "shelve.", "-", "intros e e' Heq_index Heq_term Hine Hine'.", "qsimpl time: 1.", "assert (Hentries_match : entries_match es ys).", "intros e''' e'''' e'' Heq_index''' Heq_term' Hine'' Hine''' Heq_index''.", "split; auto.", "assert (Hprefix_within_term : prefix_within_term es ys).", "intros e''''' e'''''' Heq_term'' Heq_index' Hine'''' Hine'''''.", "assert (Hrachet : forall x x' : entry, eIndex x = eIndex x' -> In x es -> In x' ys -> In x' es).", "intros x x' Heq_index'''' Hine'''''' Hine'''''''.", "assert (HmaxIndex_es : maxIndex es >= 1).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (HmaxIndex_ys : maxIndex ys >= 1).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (Hexists_es : exists x : entry, eIndex x = maxIndex es /\\ In x es).", "apply maxIndex_exists_in.", "assert (Hexists_ys : exists y : entry, eIndex y = maxIndex ys /\\ In y ys).", "apply maxIndex_exists_in.", "destruct mkEntry as [y mkEntry].", "assert (Hx_in_ys : In x ys).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (He''''''_in_es : In e'''''' es).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (HmaxIndex_eq : maxIndex es = maxIndex ys).", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset."], "tactic": "left; reflexivity.", "exn": "Not an inductive goal with 2 constructors.", "type": "not_inductive_goal", "handled": true}, {"ctx": ["intros es ys plt.", "intro Hsorted.", "intro Hunique.", "intros Hindices_eq.", "intros HmaxIndex.", "intros Hes_pos.", "intros Hys_pos.", "assert (Hcontiguous : contiguous 0 0 es ys).", "split.", "-", "left; reflexivity.", "-", "qsimpl time: 1.", "+", "shelve.", "+", "shelve.", "-", "intros e e' Heq_index Heq_term Hine Hine'.", "qsimpl time: 1.", "assert (Hentries_match : entries_match es ys).", "intros e''' e'''' e'' Heq_index''' Heq_term' Hine'' Hine''' Heq_index''.", "split; auto.", "assert (Hprefix_within_term : prefix_within_term es ys).", "intros e''''' e'''''' Heq_term'' Heq_index' Hine'''' Hine'''''.", "assert (Hrachet : forall x x' : entry, eIndex x = eIndex x' -> In x es -> In x' ys -> In x' es).", "intros x x' Heq_index'''' Hine'''''' Hine'''''''.", "assert (HmaxIndex_es : maxIndex es >= 1).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (HmaxIndex_ys : maxIndex ys >= 1).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (Hexists_es : exists x : entry, eIndex x = maxIndex es /\\ In x es).", "apply maxIndex_exists_in.", "assert (Hexists_ys : exists y : entry, eIndex y = maxIndex ys /\\ In y ys).", "apply maxIndex_exists_in.", "destruct mkEntry as [y mkEntry].", "assert (Hx_in_ys : In x ys).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (He''''''_in_es : In e'''''' es).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (HmaxIndex_eq : maxIndex es = maxIndex ys).", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset.", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset."], "tactic": "rewrite <- HmaxIndex_eq in Hexists_es.", "exn": "No such hypothesis: Hexists_es", "type": "no_hypos", "handled": true}, {"ctx": ["intros es ys plt.", "intro Hsorted.", "intro Hunique.", "intros Hindices_eq.", "intros HmaxIndex.", "intros Hes_pos.", "intros Hys_pos.", "assert (Hcontiguous : contiguous 0 0 es ys).", "split.", "-", "left; reflexivity.", "-", "qsimpl time: 1.", "+", "shelve.", "+", "shelve.", "-", "intros e e' Heq_index Heq_term Hine Hine'.", "qsimpl time: 1.", "assert (Hentries_match : entries_match es ys).", "intros e''' e'''' e'' Heq_index''' Heq_term' Hine'' Hine''' Heq_index''.", "split; auto.", "assert (Hprefix_within_term : prefix_within_term es ys).", "intros e''''' e'''''' Heq_term'' Heq_index' Hine'''' Hine'''''.", "assert (Hrachet : forall x x' : entry, eIndex x = eIndex x' -> In x es -> In x' ys -> In x' es).", "intros x x' Heq_index'''' Hine'''''' Hine'''''''.", "assert (HmaxIndex_es : maxIndex es >= 1).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (HmaxIndex_ys : maxIndex ys >= 1).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (Hexists_es : exists x : entry, eIndex x = maxIndex es /\\ In x es).", "apply maxIndex_exists_in.", "assert (Hexists_ys : exists y : entry, eIndex y = maxIndex ys /\\ In y ys).", "apply maxIndex_exists_in.", "destruct mkEntry as [y mkEntry].", "assert (Hx_in_ys : In x ys).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (He''''''_in_es : In e'''''' es).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (HmaxIndex_eq : maxIndex es = maxIndex ys).", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset.", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset.", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset."], "tactic": "rewrite <- HmaxIndex_eq in Hexists_ys.", "exn": "No such hypothesis: Hexists_ys", "type": "no_hypos", "handled": true}, {"ctx": ["intros es ys plt.", "intro Hsorted.", "intro Hunique.", "intros Hindices_eq.", "intros HmaxIndex.", "intros Hes_pos.", "intros Hys_pos.", "assert (Hcontiguous : contiguous 0 0 es ys).", "split.", "-", "left; reflexivity.", "-", "qsimpl time: 1.", "+", "shelve.", "+", "shelve.", "-", "intros e e' Heq_index Heq_term Hine Hine'.", "qsimpl time: 1.", "assert (Hentries_match : entries_match es ys).", "intros e''' e'''' e'' Heq_index''' Heq_term' Hine'' Hine''' Heq_index''.", "split; auto.", "assert (Hprefix_within_term : prefix_within_term es ys).", "intros e''''' e'''''' Heq_term'' Heq_index' Hine'''' Hine'''''.", "assert (Hrachet : forall x x' : entry, eIndex x = eIndex x' -> In x es -> In x' ys -> In x' es).", "intros x x' Heq_index'''' Hine'''''' Hine'''''''.", "assert (HmaxIndex_es : maxIndex es >= 1).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (HmaxIndex_ys : maxIndex ys >= 1).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (Hexists_es : exists x : entry, eIndex x = maxIndex es /\\ In x es).", "apply maxIndex_exists_in.", "assert (Hexists_ys : exists y : entry, eIndex y = maxIndex ys /\\ In y ys).", "apply maxIndex_exists_in.", "destruct mkEntry as [y mkEntry].", "assert (Hx_in_ys : In x ys).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (He''''''_in_es : In e'''''' es).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (HmaxIndex_eq : maxIndex es = maxIndex ys).", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset.", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset.", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset.", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset."], "tactic": "assert (Hx_eq_y : x = y).", "exn": "The reference y was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros es ys plt.", "intro Hsorted.", "intro Hunique.", "intros Hindices_eq.", "intros HmaxIndex.", "intros Hes_pos.", "intros Hys_pos.", "assert (Hcontiguous : contiguous 0 0 es ys).", "split.", "-", "left; reflexivity.", "-", "qsimpl time: 1.", "+", "shelve.", "+", "shelve.", "-", "intros e e' Heq_index Heq_term Hine Hine'.", "qsimpl time: 1.", "assert (Hentries_match : entries_match es ys).", "intros e''' e'''' e'' Heq_index''' Heq_term' Hine'' Hine''' Heq_index''.", "split; auto.", "assert (Hprefix_within_term : prefix_within_term es ys).", "intros e''''' e'''''' Heq_term'' Heq_index' Hine'''' Hine'''''.", "assert (Hrachet : forall x x' : entry, eIndex x = eIndex x' -> In x es -> In x' ys -> In x' es).", "intros x x' Heq_index'''' Hine'''''' Hine'''''''.", "assert (HmaxIndex_es : maxIndex es >= 1).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (HmaxIndex_ys : maxIndex ys >= 1).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (Hexists_es : exists x : entry, eIndex x = maxIndex es /\\ In x es).", "apply maxIndex_exists_in.", "assert (Hexists_ys : exists y : entry, eIndex y = maxIndex ys /\\ In y ys).", "apply maxIndex_exists_in.", "destruct mkEntry as [y mkEntry].", "assert (Hx_in_ys : In x ys).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (He''''''_in_es : In e'''''' es).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (HmaxIndex_eq : maxIndex es = maxIndex ys).", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset.", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset.", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset.", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset.", "assert (Hx_eq_e'''''' : x = e'''''')."], "tactic": "apply uniqueIndices_elim_eq with (xs := ys) (x := x) (y := y); try auto.", "exn": "The reference y was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros es ys plt.", "intro Hsorted.", "intro Hunique.", "intros Hindices_eq.", "intros HmaxIndex.", "intros Hes_pos.", "intros Hys_pos.", "assert (Hcontiguous : contiguous 0 0 es ys).", "split.", "-", "left; reflexivity.", "-", "qsimpl time: 1.", "+", "shelve.", "+", "shelve.", "-", "intros e e' Heq_index Heq_term Hine Hine'.", "qsimpl time: 1.", "assert (Hentries_match : entries_match es ys).", "intros e''' e'''' e'' Heq_index''' Heq_term' Hine'' Hine''' Heq_index''.", "split; auto.", "assert (Hprefix_within_term : prefix_within_term es ys).", "intros e''''' e'''''' Heq_term'' Heq_index' Hine'''' Hine'''''.", "assert (Hrachet : forall x x' : entry, eIndex x = eIndex x' -> In x es -> In x' ys -> In x' es).", "intros x x' Heq_index'''' Hine'''''' Hine'''''''.", "assert (HmaxIndex_es : maxIndex es >= 1).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (HmaxIndex_ys : maxIndex ys >= 1).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (Hexists_es : exists x : entry, eIndex x = maxIndex es /\\ In x es).", "apply maxIndex_exists_in.", "assert (Hexists_ys : exists y : entry, eIndex y = maxIndex ys /\\ In y ys).", "apply maxIndex_exists_in.", "destruct mkEntry as [y mkEntry].", "assert (Hx_in_ys : In x ys).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (He''''''_in_es : In e'''''' es).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (HmaxIndex_eq : maxIndex es = maxIndex ys).", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset.", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset.", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset.", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset.", "assert (Hx_eq_e'''''' : x = e'''''')."], "tactic": "split; auto.", "exn": "In environment orig_base_params : BaseParams raft_params : RaftParams orig_base_params H10 : forall xs ys : list entry, sorted xs -> sorted ys -> (forall x : entry, In x xs -> In x ys) -> maxIndex xs <= maxIndex ys H6 : forall l : list entry, (l = [] -> False) -> exists e : entry, In e l /\\\\ maxIndex l = eIndex e /\\\\ maxTerm l = eTerm e es, ys : list entry plt : term Hsorted : sorted es Hunique : uniqueIndices ys Hes_pos : forall e : entry, In e es -> 0 < eIndex e Hys_pos : forall y : entry, In y ys -> 0 < eIndex y e, e', Heq_index : entry Heq_term : eIndex e = eIndex e' Hine : eTerm e = eTerm e' Hine' : In e es H : In e' ys H0 : eIndex Heq_index <= eIndex e H1 : forall i : nat, 0 < i -> i <= maxIndex es -> exists e : entry, eIndex e = i /\\\\ In e es H2 : forall e1 e2 : entry, eIndex e1 = eIndex e2 -> eTerm e1 = eTerm e2 -> In e1 es -> In e2 ys -> (0 = 0 -> False) -> exists e4 : entry, eIndex e4 = 0 /\\\\ eTerm e4 = plt /\\\\ In e4 ys H3 : forall e1 e2 : entry, eIndex e1 = eIndex e2 -> eTerm e1 = eTerm e2 -> In e1 es -> In e2 ys -> forall e3 : entry, eIndex e3 <= eIndex e1 -> In e3 es -> In e3 ys H4 : In Heq_index ys H7 : forall e : entry, In e es -> eIndex e > 0 -> eIndex e <= maxIndex ys -> In e ys H8 : forall e e' : entry, eIndex e = eIndex e' -> eTerm e = eTerm e' -> In e ys -> In e' es -> e = e' init : data handler : input -> data -> output * data e''', e'''', e'' : entry Heq_index''' : eIndex e''' = eIndex e'''' Heq_term' : eTerm e''' = eTerm e'''' Hine'' : In e''' es Hine''' : In e'''' ys Heq_index'' : eIndex e'' <= eIndex e''' e''''', e'''''' : entry Heq_term'' : eTerm e''''' = eTerm e'''''' Heq_index' : eIndex e''''' <= eIndex e'''''' Hine'''' : In e''''' es Hine''''' : In e'''''' ys x, x' : entry Heq_index'''' : eIndex x = eIndex x' Hine'''''' : In x es Hine''''''' : In x' ys Unable to unify \"e''''''\" with \"x\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros es ys plt.", "intro Hsorted.", "intro Hunique.", "intros Hindices_eq.", "intros HmaxIndex.", "intros Hes_pos.", "intros Hys_pos.", "assert (Hcontiguous : contiguous 0 0 es ys).", "split.", "-", "left; reflexivity.", "-", "qsimpl time: 1.", "+", "shelve.", "+", "shelve.", "-", "intros e e' Heq_index Heq_term Hine Hine'.", "qsimpl time: 1.", "assert (Hentries_match : entries_match es ys).", "intros e''' e'''' e'' Heq_index''' Heq_term' Hine'' Hine''' Heq_index''.", "split; auto.", "assert (Hprefix_within_term : prefix_within_term es ys).", "intros e''''' e'''''' Heq_term'' Heq_index' Hine'''' Hine'''''.", "assert (Hrachet : forall x x' : entry, eIndex x = eIndex x' -> In x es -> In x' ys -> In x' es).", "intros x x' Heq_index'''' Hine'''''' Hine'''''''.", "assert (HmaxIndex_es : maxIndex es >= 1).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (HmaxIndex_ys : maxIndex ys >= 1).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (Hexists_es : exists x : entry, eIndex x = maxIndex es /\\ In x es).", "apply maxIndex_exists_in.", "assert (Hexists_ys : exists y : entry, eIndex y = maxIndex ys /\\ In y ys).", "apply maxIndex_exists_in.", "destruct mkEntry as [y mkEntry].", "assert (Hx_in_ys : In x ys).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (He''''''_in_es : In e'''''' es).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (HmaxIndex_eq : maxIndex es = maxIndex ys).", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset.", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset.", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset.", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset.", "assert (Hx_eq_e'''''' : x = e'''''').", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset."], "tactic": "rewrite <- Hx_eq_y in *.", "exn": "The reference Hx_eq_y was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros es ys plt.", "intro Hsorted.", "intro Hunique.", "intros Hindices_eq.", "intros HmaxIndex.", "intros Hes_pos.", "intros Hys_pos.", "assert (Hcontiguous : contiguous 0 0 es ys).", "split.", "-", "left; reflexivity.", "-", "qsimpl time: 1.", "+", "shelve.", "+", "shelve.", "-", "intros e e' Heq_index Heq_term Hine Hine'.", "qsimpl time: 1.", "assert (Hentries_match : entries_match es ys).", "intros e''' e'''' e'' Heq_index''' Heq_term' Hine'' Hine''' Heq_index''.", "split; auto.", "assert (Hprefix_within_term : prefix_within_term es ys).", "intros e''''' e'''''' Heq_term'' Heq_index' Hine'''' Hine'''''.", "assert (Hrachet : forall x x' : entry, eIndex x = eIndex x' -> In x es -> In x' ys -> In x' es).", "intros x x' Heq_index'''' Hine'''''' Hine'''''''.", "assert (HmaxIndex_es : maxIndex es >= 1).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (HmaxIndex_ys : maxIndex ys >= 1).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (Hexists_es : exists x : entry, eIndex x = maxIndex es /\\ In x es).", "apply maxIndex_exists_in.", "assert (Hexists_ys : exists y : entry, eIndex y = maxIndex ys /\\ In y ys).", "apply maxIndex_exists_in.", "destruct mkEntry as [y mkEntry].", "assert (Hx_in_ys : In x ys).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (He''''''_in_es : In e'''''' es).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (HmaxIndex_eq : maxIndex es = maxIndex ys).", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset.", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset.", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset.", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset.", "assert (Hx_eq_e'''''' : x = e'''''').", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset.", "rewrite <- ltb_false_le in *."], "tactic": "clear Hexists_es Hexists_ys Hx_in_ys Hy_in_es HmaxIndex_eq.", "exn": "No such hypothesis: Hexists_es", "type": "no_hypos", "handled": true}, {"ctx": ["intros es ys plt.", "intro Hsorted.", "intro Hunique.", "intros Hindices_eq.", "intros HmaxIndex.", "intros Hes_pos.", "intros Hys_pos.", "assert (Hcontiguous : contiguous 0 0 es ys).", "split.", "-", "left; reflexivity.", "-", "qsimpl time: 1.", "+", "shelve.", "+", "shelve.", "-", "intros e e' Heq_index Heq_term Hine Hine'.", "qsimpl time: 1.", "assert (Hentries_match : entries_match es ys).", "intros e''' e'''' e'' Heq_index''' Heq_term' Hine'' Hine''' Heq_index''.", "split; auto.", "assert (Hprefix_within_term : prefix_within_term es ys).", "intros e''''' e'''''' Heq_term'' Heq_index' Hine'''' Hine'''''.", "assert (Hrachet : forall x x' : entry, eIndex x = eIndex x' -> In x es -> In x' ys -> In x' es).", "intros x x' Heq_index'''' Hine'''''' Hine'''''''.", "assert (HmaxIndex_es : maxIndex es >= 1).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (HmaxIndex_ys : maxIndex ys >= 1).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (Hexists_es : exists x : entry, eIndex x = maxIndex es /\\ In x es).", "apply maxIndex_exists_in.", "assert (Hexists_ys : exists y : entry, eIndex y = maxIndex ys /\\ In y ys).", "apply maxIndex_exists_in.", "destruct mkEntry as [y mkEntry].", "assert (Hx_in_ys : In x ys).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (He''''''_in_es : In e'''''' es).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (HmaxIndex_eq : maxIndex es = maxIndex ys).", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset.", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset.", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset.", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset.", "assert (Hx_eq_e'''''' : x = e'''''').", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset.", "rewrite <- ltb_false_le in *.", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset.", "assert (HfindGtIndex : forall i : nat, 0 < i <= maxIndex es -> exists e : entry, In e (findGtIndex es i) /\\ eIndex e = i).", "intros i Hi.", "apply findGtIndex_contiguous with (entries := es) (x := i); try auto."], "tactic": "apply HmaxIndex.", "exn": "The reference HmaxIndex was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros es ys plt.", "intro Hsorted.", "intro Hunique.", "intros Hindices_eq.", "intros HmaxIndex.", "intros Hes_pos.", "intros Hys_pos.", "assert (Hcontiguous : contiguous 0 0 es ys).", "split.", "-", "left; reflexivity.", "-", "qsimpl time: 1.", "+", "shelve.", "+", "shelve.", "-", "intros e e' Heq_index Heq_term Hine Hine'.", "qsimpl time: 1.", "assert (Hentries_match : entries_match es ys).", "intros e''' e'''' e'' Heq_index''' Heq_term' Hine'' Hine''' Heq_index''.", "split; auto.", "assert (Hprefix_within_term : prefix_within_term es ys).", "intros e''''' e'''''' Heq_term'' Heq_index' Hine'''' Hine'''''.", "assert (Hrachet : forall x x' : entry, eIndex x = eIndex x' -> In x es -> In x' ys -> In x' es).", "intros x x' Heq_index'''' Hine'''''' Hine'''''''.", "assert (HmaxIndex_es : maxIndex es >= 1).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (HmaxIndex_ys : maxIndex ys >= 1).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (Hexists_es : exists x : entry, eIndex x = maxIndex es /\\ In x es).", "apply maxIndex_exists_in.", "assert (Hexists_ys : exists y : entry, eIndex y = maxIndex ys /\\ In y ys).", "apply maxIndex_exists_in.", "destruct mkEntry as [y mkEntry].", "assert (Hx_in_ys : In x ys).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (He''''''_in_es : In e'''''' es).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (HmaxIndex_eq : maxIndex es = maxIndex ys).", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset.", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset.", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset.", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset.", "assert (Hx_eq_e'''''' : x = e'''''').", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset.", "rewrite <- ltb_false_le in *.", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset.", "assert (HfindGtIndex : forall i : nat, 0 < i <= maxIndex es -> exists e : entry, In e (findGtIndex es i) /\\ eIndex e = i).", "intros i Hi.", "apply findGtIndex_contiguous with (entries := es) (x := i); try auto.", "apply fast_Zred_factor0.", "assert (HfindGtIndex' : forall i : nat, 0 < i <= maxIndex es -> exists e : entry, In e es /\\ eIndex e = i)."], "tactic": "intros i Hi.", "exn": "i is already used.", "type": "used_var", "handled": true}, {"ctx": ["intros es ys plt.", "intro Hsorted.", "intro Hunique.", "intros Hindices_eq.", "intros HmaxIndex.", "intros Hes_pos.", "intros Hys_pos.", "assert (Hcontiguous : contiguous 0 0 es ys).", "split.", "-", "left; reflexivity.", "-", "qsimpl time: 1.", "+", "shelve.", "+", "shelve.", "-", "intros e e' Heq_index Heq_term Hine Hine'.", "qsimpl time: 1.", "assert (Hentries_match : entries_match es ys).", "intros e''' e'''' e'' Heq_index''' Heq_term' Hine'' Hine''' Heq_index''.", "split; auto.", "assert (Hprefix_within_term : prefix_within_term es ys).", "intros e''''' e'''''' Heq_term'' Heq_index' Hine'''' Hine'''''.", "assert (Hrachet : forall x x' : entry, eIndex x = eIndex x' -> In x es -> In x' ys -> In x' es).", "intros x x' Heq_index'''' Hine'''''' Hine'''''''.", "assert (HmaxIndex_es : maxIndex es >= 1).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (HmaxIndex_ys : maxIndex ys >= 1).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (Hexists_es : exists x : entry, eIndex x = maxIndex es /\\ In x es).", "apply maxIndex_exists_in.", "assert (Hexists_ys : exists y : entry, eIndex y = maxIndex ys /\\ In y ys).", "apply maxIndex_exists_in.", "destruct mkEntry as [y mkEntry].", "assert (Hx_in_ys : In x ys).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (He''''''_in_es : In e'''''' es).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (HmaxIndex_eq : maxIndex es = maxIndex ys).", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset.", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset.", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset.", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset.", "assert (Hx_eq_e'''''' : x = e'''''').", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset.", "rewrite <- ltb_false_le in *.", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset.", "assert (HfindGtIndex : forall i : nat, 0 < i <= maxIndex es -> exists e : entry, In e (findGtIndex es i) /\\ eIndex e = i).", "intros i Hi.", "apply findGtIndex_contiguous with (entries := es) (x := i); try auto.", "apply fast_Zred_factor0.", "assert (HfindGtIndex' : forall i : nat, 0 < i <= maxIndex es -> exists e : entry, In e es /\\ eIndex e = i)."], "tactic": "intros i' Hi.", "exn": "Hi is already used.", "type": "used_var", "handled": true}, {"ctx": ["intros es ys plt.", "intro Hsorted.", "intro Hunique.", "intros Hindices_eq.", "intros HmaxIndex.", "intros Hes_pos.", "intros Hys_pos.", "assert (Hcontiguous : contiguous 0 0 es ys).", "split.", "-", "left; reflexivity.", "-", "qsimpl time: 1.", "+", "shelve.", "+", "shelve.", "-", "intros e e' Heq_index Heq_term Hine Hine'.", "qsimpl time: 1.", "assert (Hentries_match : entries_match es ys).", "intros e''' e'''' e'' Heq_index''' Heq_term' Hine'' Hine''' Heq_index''.", "split; auto.", "assert (Hprefix_within_term : prefix_within_term es ys).", "intros e''''' e'''''' Heq_term'' Heq_index' Hine'''' Hine'''''.", "assert (Hrachet : forall x x' : entry, eIndex x = eIndex x' -> In x es -> In x' ys -> In x' es).", "intros x x' Heq_index'''' Hine'''''' Hine'''''''.", "assert (HmaxIndex_es : maxIndex es >= 1).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (HmaxIndex_ys : maxIndex ys >= 1).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (Hexists_es : exists x : entry, eIndex x = maxIndex es /\\ In x es).", "apply maxIndex_exists_in.", "assert (Hexists_ys : exists y : entry, eIndex y = maxIndex ys /\\ In y ys).", "apply maxIndex_exists_in.", "destruct mkEntry as [y mkEntry].", "assert (Hx_in_ys : In x ys).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (He''''''_in_es : In e'''''' es).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (HmaxIndex_eq : maxIndex es = maxIndex ys).", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset.", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset.", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset.", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset.", "assert (Hx_eq_e'''''' : x = e'''''').", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset.", "rewrite <- ltb_false_le in *.", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset.", "assert (HfindGtIndex : forall i : nat, 0 < i <= maxIndex es -> exists e : entry, In e (findGtIndex es i) /\\ eIndex e = i).", "intros i Hi.", "apply findGtIndex_contiguous with (entries := es) (x := i); try auto.", "apply fast_Zred_factor0.", "assert (HfindGtIndex' : forall i : nat, 0 < i <= maxIndex es -> exists e : entry, In e es /\\ eIndex e = i).", "intros i' Hi'."], "tactic": "apply HfindGtIndex with (i := i); try auto.", "exn": "The reference HfindGtIndex was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros es ys plt.", "intro Hsorted.", "intro Hunique.", "intros Hindices_eq.", "intros HmaxIndex.", "intros Hes_pos.", "intros Hys_pos.", "assert (Hcontiguous : contiguous 0 0 es ys).", "split.", "-", "left; reflexivity.", "-", "qsimpl time: 1.", "+", "shelve.", "+", "shelve.", "-", "intros e e' Heq_index Heq_term Hine Hine'.", "qsimpl time: 1.", "assert (Hentries_match : entries_match es ys).", "intros e''' e'''' e'' Heq_index''' Heq_term' Hine'' Hine''' Heq_index''.", "split; auto.", "assert (Hprefix_within_term : prefix_within_term es ys).", "intros e''''' e'''''' Heq_term'' Heq_index' Hine'''' Hine'''''.", "assert (Hrachet : forall x x' : entry, eIndex x = eIndex x' -> In x es -> In x' ys -> In x' es).", "intros x x' Heq_index'''' Hine'''''' Hine'''''''.", "assert (HmaxIndex_es : maxIndex es >= 1).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (HmaxIndex_ys : maxIndex ys >= 1).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (Hexists_es : exists x : entry, eIndex x = maxIndex es /\\ In x es).", "apply maxIndex_exists_in.", "assert (Hexists_ys : exists y : entry, eIndex y = maxIndex ys /\\ In y ys).", "apply maxIndex_exists_in.", "destruct mkEntry as [y mkEntry].", "assert (Hx_in_ys : In x ys).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (He''''''_in_es : In e'''''' es).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (HmaxIndex_eq : maxIndex es = maxIndex ys).", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset.", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset.", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset.", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset.", "assert (Hx_eq_e'''''' : x = e'''''').", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset.", "rewrite <- ltb_false_le in *.", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset.", "assert (HfindGtIndex : forall i : nat, 0 < i <= maxIndex es -> exists e : entry, In e (findGtIndex es i) /\\ eIndex e = i).", "intros i Hi.", "apply findGtIndex_contiguous with (entries := es) (x := i); try auto.", "apply fast_Zred_factor0.", "assert (HfindGtIndex' : forall i : nat, 0 < i <= maxIndex es -> exists e : entry, In e es /\\ eIndex e = i).", "intros i' Hi'."], "tactic": "intros e [Hine Heq_index].", "exn": "e is already used.", "type": "used_var", "handled": true}, {"ctx": ["intros es ys plt.", "intro Hsorted.", "intro Hunique.", "intros Hindices_eq.", "intros HmaxIndex.", "intros Hes_pos.", "intros Hys_pos.", "assert (Hcontiguous : contiguous 0 0 es ys).", "split.", "-", "left; reflexivity.", "-", "qsimpl time: 1.", "+", "shelve.", "+", "shelve.", "-", "intros e e' Heq_index Heq_term Hine Hine'.", "qsimpl time: 1.", "assert (Hentries_match : entries_match es ys).", "intros e''' e'''' e'' Heq_index''' Heq_term' Hine'' Hine''' Heq_index''.", "split; auto.", "assert (Hprefix_within_term : prefix_within_term es ys).", "intros e''''' e'''''' Heq_term'' Heq_index' Hine'''' Hine'''''.", "assert (Hrachet : forall x x' : entry, eIndex x = eIndex x' -> In x es -> In x' ys -> In x' es).", "intros x x' Heq_index'''' Hine'''''' Hine'''''''.", "assert (HmaxIndex_es : maxIndex es >= 1).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (HmaxIndex_ys : maxIndex ys >= 1).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (Hexists_es : exists x : entry, eIndex x = maxIndex es /\\ In x es).", "apply maxIndex_exists_in.", "assert (Hexists_ys : exists y : entry, eIndex y = maxIndex ys /\\ In y ys).", "apply maxIndex_exists_in.", "destruct mkEntry as [y mkEntry].", "assert (Hx_in_ys : In x ys).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (He''''''_in_es : In e'''''' es).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (HmaxIndex_eq : maxIndex es = maxIndex ys).", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset.", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset.", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset.", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset.", "assert (Hx_eq_e'''''' : x = e'''''').", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset.", "rewrite <- ltb_false_le in *.", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset.", "assert (HfindGtIndex : forall i : nat, 0 < i <= maxIndex es -> exists e : entry, In e (findGtIndex es i) /\\ eIndex e = i).", "intros i Hi.", "apply findGtIndex_contiguous with (entries := es) (x := i); try auto.", "apply fast_Zred_factor0.", "assert (HfindGtIndex' : forall i : nat, 0 < i <= maxIndex es -> exists e : entry, In e es /\\ eIndex e = i).", "intros i' Hi'."], "tactic": "intros e' [Hine Heq_index].", "exn": "e' is already used.", "type": "used_var", "handled": true}, {"ctx": ["intros es ys plt.", "intro Hsorted.", "intro Hunique.", "intros Hindices_eq.", "intros HmaxIndex.", "intros Hes_pos.", "intros Hys_pos.", "assert (Hcontiguous : contiguous 0 0 es ys).", "split.", "-", "left; reflexivity.", "-", "qsimpl time: 1.", "+", "shelve.", "+", "shelve.", "-", "intros e e' Heq_index Heq_term Hine Hine'.", "qsimpl time: 1.", "assert (Hentries_match : entries_match es ys).", "intros e''' e'''' e'' Heq_index''' Heq_term' Hine'' Hine''' Heq_index''.", "split; auto.", "assert (Hprefix_within_term : prefix_within_term es ys).", "intros e''''' e'''''' Heq_term'' Heq_index' Hine'''' Hine'''''.", "assert (Hrachet : forall x x' : entry, eIndex x = eIndex x' -> In x es -> In x' ys -> In x' es).", "intros x x' Heq_index'''' Hine'''''' Hine'''''''.", "assert (HmaxIndex_es : maxIndex es >= 1).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (HmaxIndex_ys : maxIndex ys >= 1).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (Hexists_es : exists x : entry, eIndex x = maxIndex es /\\ In x es).", "apply maxIndex_exists_in.", "assert (Hexists_ys : exists y : entry, eIndex y = maxIndex ys /\\ In y ys).", "apply maxIndex_exists_in.", "destruct mkEntry as [y mkEntry].", "assert (Hx_in_ys : In x ys).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (He''''''_in_es : In e'''''' es).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (HmaxIndex_eq : maxIndex es = maxIndex ys).", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset.", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset.", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset.", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset.", "assert (Hx_eq_e'''''' : x = e'''''').", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset.", "rewrite <- ltb_false_le in *.", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset.", "assert (HfindGtIndex : forall i : nat, 0 < i <= maxIndex es -> exists e : entry, In e (findGtIndex es i) /\\ eIndex e = i).", "intros i Hi.", "apply findGtIndex_contiguous with (entries := es) (x := i); try auto.", "apply fast_Zred_factor0.", "assert (HfindGtIndex' : forall i : nat, 0 < i <= maxIndex es -> exists e : entry, In e es /\\ eIndex e = i).", "intros i' Hi'."], "tactic": "intros e'' [Hine Heq_index].", "exn": "e'' is already used.", "type": "used_var", "handled": true}, {"ctx": ["intros es ys plt.", "intro Hsorted.", "intro Hunique.", "intros Hindices_eq.", "intros HmaxIndex.", "intros Hes_pos.", "intros Hys_pos.", "assert (Hcontiguous : contiguous 0 0 es ys).", "split.", "-", "left; reflexivity.", "-", "qsimpl time: 1.", "+", "shelve.", "+", "shelve.", "-", "intros e e' Heq_index Heq_term Hine Hine'.", "qsimpl time: 1.", "assert (Hentries_match : entries_match es ys).", "intros e''' e'''' e'' Heq_index''' Heq_term' Hine'' Hine''' Heq_index''.", "split; auto.", "assert (Hprefix_within_term : prefix_within_term es ys).", "intros e''''' e'''''' Heq_term'' Heq_index' Hine'''' Hine'''''.", "assert (Hrachet : forall x x' : entry, eIndex x = eIndex x' -> In x es -> In x' ys -> In x' es).", "intros x x' Heq_index'''' Hine'''''' Hine'''''''.", "assert (HmaxIndex_es : maxIndex es >= 1).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (HmaxIndex_ys : maxIndex ys >= 1).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (Hexists_es : exists x : entry, eIndex x = maxIndex es /\\ In x es).", "apply maxIndex_exists_in.", "assert (Hexists_ys : exists y : entry, eIndex y = maxIndex ys /\\ In y ys).", "apply maxIndex_exists_in.", "destruct mkEntry as [y mkEntry].", "assert (Hx_in_ys : In x ys).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (He''''''_in_es : In e'''''' es).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (HmaxIndex_eq : maxIndex es = maxIndex ys).", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset.", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset.", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset.", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset.", "assert (Hx_eq_e'''''' : x = e'''''').", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset.", "rewrite <- ltb_false_le in *.", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset.", "assert (HfindGtIndex : forall i : nat, 0 < i <= maxIndex es -> exists e : entry, In e (findGtIndex es i) /\\ eIndex e = i).", "intros i Hi.", "apply findGtIndex_contiguous with (entries := es) (x := i); try auto.", "apply fast_Zred_factor0.", "assert (HfindGtIndex' : forall i : nat, 0 < i <= maxIndex es -> exists e : entry, In e es /\\ eIndex e = i).", "intros i' Hi'."], "tactic": "intros e''' [Hine Heq_index].", "exn": "e''' is already used.", "type": "used_var", "handled": true}, {"ctx": ["intros es ys plt.", "intro Hsorted.", "intro Hunique.", "intros Hindices_eq.", "intros HmaxIndex.", "intros Hes_pos.", "intros Hys_pos.", "assert (Hcontiguous : contiguous 0 0 es ys).", "split.", "-", "left; reflexivity.", "-", "qsimpl time: 1.", "+", "shelve.", "+", "shelve.", "-", "intros e e' Heq_index Heq_term Hine Hine'.", "qsimpl time: 1.", "assert (Hentries_match : entries_match es ys).", "intros e''' e'''' e'' Heq_index''' Heq_term' Hine'' Hine''' Heq_index''.", "split; auto.", "assert (Hprefix_within_term : prefix_within_term es ys).", "intros e''''' e'''''' Heq_term'' Heq_index' Hine'''' Hine'''''.", "assert (Hrachet : forall x x' : entry, eIndex x = eIndex x' -> In x es -> In x' ys -> In x' es).", "intros x x' Heq_index'''' Hine'''''' Hine'''''''.", "assert (HmaxIndex_es : maxIndex es >= 1).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (HmaxIndex_ys : maxIndex ys >= 1).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (Hexists_es : exists x : entry, eIndex x = maxIndex es /\\ In x es).", "apply maxIndex_exists_in.", "assert (Hexists_ys : exists y : entry, eIndex y = maxIndex ys /\\ In y ys).", "apply maxIndex_exists_in.", "destruct mkEntry as [y mkEntry].", "assert (Hx_in_ys : In x ys).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (He''''''_in_es : In e'''''' es).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (HmaxIndex_eq : maxIndex es = maxIndex ys).", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset.", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset.", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset.", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset.", "assert (Hx_eq_e'''''' : x = e'''''').", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset.", "rewrite <- ltb_false_le in *.", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset.", "assert (HfindGtIndex : forall i : nat, 0 < i <= maxIndex es -> exists e : entry, In e (findGtIndex es i) /\\ eIndex e = i).", "intros i Hi.", "apply findGtIndex_contiguous with (entries := es) (x := i); try auto.", "apply fast_Zred_factor0.", "assert (HfindGtIndex' : forall i : nat, 0 < i <= maxIndex es -> exists e : entry, In e es /\\ eIndex e = i).", "intros i' Hi'."], "tactic": "intros e'''' [Hine Heq_index].", "exn": "e'''' is already used.", "type": "used_var", "handled": true}, {"ctx": ["intros es ys plt.", "intro Hsorted.", "intro Hunique.", "intros Hindices_eq.", "intros HmaxIndex.", "intros Hes_pos.", "intros Hys_pos.", "assert (Hcontiguous : contiguous 0 0 es ys).", "split.", "-", "left; reflexivity.", "-", "qsimpl time: 1.", "+", "shelve.", "+", "shelve.", "-", "intros e e' Heq_index Heq_term Hine Hine'.", "qsimpl time: 1.", "assert (Hentries_match : entries_match es ys).", "intros e''' e'''' e'' Heq_index''' Heq_term' Hine'' Hine''' Heq_index''.", "split; auto.", "assert (Hprefix_within_term : prefix_within_term es ys).", "intros e''''' e'''''' Heq_term'' Heq_index' Hine'''' Hine'''''.", "assert (Hrachet : forall x x' : entry, eIndex x = eIndex x' -> In x es -> In x' ys -> In x' es).", "intros x x' Heq_index'''' Hine'''''' Hine'''''''.", "assert (HmaxIndex_es : maxIndex es >= 1).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (HmaxIndex_ys : maxIndex ys >= 1).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (Hexists_es : exists x : entry, eIndex x = maxIndex es /\\ In x es).", "apply maxIndex_exists_in.", "assert (Hexists_ys : exists y : entry, eIndex y = maxIndex ys /\\ In y ys).", "apply maxIndex_exists_in.", "destruct mkEntry as [y mkEntry].", "assert (Hx_in_ys : In x ys).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (He''''''_in_es : In e'''''' es).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (HmaxIndex_eq : maxIndex es = maxIndex ys).", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset.", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset.", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset.", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset.", "assert (Hx_eq_e'''''' : x = e'''''').", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset.", "rewrite <- ltb_false_le in *.", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset.", "assert (HfindGtIndex : forall i : nat, 0 < i <= maxIndex es -> exists e : entry, In e (findGtIndex es i) /\\ eIndex e = i).", "intros i Hi.", "apply findGtIndex_contiguous with (entries := es) (x := i); try auto.", "apply fast_Zred_factor0.", "assert (HfindGtIndex' : forall i : nat, 0 < i <= maxIndex es -> exists e : entry, In e es /\\ eIndex e = i).", "intros i' Hi'."], "tactic": "intros e''''' [Hine Heq_index].", "exn": "e''''' is already used.", "type": "used_var", "handled": true}, {"ctx": ["intros es ys plt.", "intro Hsorted.", "intro Hunique.", "intros Hindices_eq.", "intros HmaxIndex.", "intros Hes_pos.", "intros Hys_pos.", "assert (Hcontiguous : contiguous 0 0 es ys).", "split.", "-", "left; reflexivity.", "-", "qsimpl time: 1.", "+", "shelve.", "+", "shelve.", "-", "intros e e' Heq_index Heq_term Hine Hine'.", "qsimpl time: 1.", "assert (Hentries_match : entries_match es ys).", "intros e''' e'''' e'' Heq_index''' Heq_term' Hine'' Hine''' Heq_index''.", "split; auto.", "assert (Hprefix_within_term : prefix_within_term es ys).", "intros e''''' e'''''' Heq_term'' Heq_index' Hine'''' Hine'''''.", "assert (Hrachet : forall x x' : entry, eIndex x = eIndex x' -> In x es -> In x' ys -> In x' es).", "intros x x' Heq_index'''' Hine'''''' Hine'''''''.", "assert (HmaxIndex_es : maxIndex es >= 1).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (HmaxIndex_ys : maxIndex ys >= 1).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (Hexists_es : exists x : entry, eIndex x = maxIndex es /\\ In x es).", "apply maxIndex_exists_in.", "assert (Hexists_ys : exists y : entry, eIndex y = maxIndex ys /\\ In y ys).", "apply maxIndex_exists_in.", "destruct mkEntry as [y mkEntry].", "assert (Hx_in_ys : In x ys).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (He''''''_in_es : In e'''''' es).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (HmaxIndex_eq : maxIndex es = maxIndex ys).", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset.", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset.", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset.", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset.", "assert (Hx_eq_e'''''' : x = e'''''').", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset.", "rewrite <- ltb_false_le in *.", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset.", "assert (HfindGtIndex : forall i : nat, 0 < i <= maxIndex es -> exists e : entry, In e (findGtIndex es i) /\\ eIndex e = i).", "intros i Hi.", "apply findGtIndex_contiguous with (entries := es) (x := i); try auto.", "apply fast_Zred_factor0.", "assert (HfindGtIndex' : forall i : nat, 0 < i <= maxIndex es -> exists e : entry, In e es /\\ eIndex e = i).", "intros i' Hi'."], "tactic": "intros e'''''' [Hine Heq_index].", "exn": "e'''''' is already used.", "type": "used_var", "handled": true}, {"ctx": ["intros es ys plt.", "intro Hsorted.", "intro Hunique.", "intros Hindices_eq.", "intros HmaxIndex.", "intros Hes_pos.", "intros Hys_pos.", "assert (Hcontiguous : contiguous 0 0 es ys).", "split.", "-", "left; reflexivity.", "-", "qsimpl time: 1.", "+", "shelve.", "+", "shelve.", "-", "intros e e' Heq_index Heq_term Hine Hine'.", "qsimpl time: 1.", "assert (Hentries_match : entries_match es ys).", "intros e''' e'''' e'' Heq_index''' Heq_term' Hine'' Hine''' Heq_index''.", "split; auto.", "assert (Hprefix_within_term : prefix_within_term es ys).", "intros e''''' e'''''' Heq_term'' Heq_index' Hine'''' Hine'''''.", "assert (Hrachet : forall x x' : entry, eIndex x = eIndex x' -> In x es -> In x' ys -> In x' es).", "intros x x' Heq_index'''' Hine'''''' Hine'''''''.", "assert (HmaxIndex_es : maxIndex es >= 1).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (HmaxIndex_ys : maxIndex ys >= 1).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (Hexists_es : exists x : entry, eIndex x = maxIndex es /\\ In x es).", "apply maxIndex_exists_in.", "assert (Hexists_ys : exists y : entry, eIndex y = maxIndex ys /\\ In y ys).", "apply maxIndex_exists_in.", "destruct mkEntry as [y mkEntry].", "assert (Hx_in_ys : In x ys).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (He''''''_in_es : In e'''''' es).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (HmaxIndex_eq : maxIndex es = maxIndex ys).", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset.", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset.", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset.", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset.", "assert (Hx_eq_e'''''' : x = e'''''').", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset.", "rewrite <- ltb_false_le in *.", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset.", "assert (HfindGtIndex : forall i : nat, 0 < i <= maxIndex es -> exists e : entry, In e (findGtIndex es i) /\\ eIndex e = i).", "intros i Hi.", "apply findGtIndex_contiguous with (entries := es) (x := i); try auto.", "apply fast_Zred_factor0.", "assert (HfindGtIndex' : forall i : nat, 0 < i <= maxIndex es -> exists e : entry, In e es /\\ eIndex e = i).", "intros i' Hi'."], "tactic": "intros e''''''' [Hine Heq_index].", "exn": "Hine is already used.", "type": "used_var", "handled": true}, {"ctx": ["intros es ys plt.", "intro Hsorted.", "intro Hunique.", "intros Hindices_eq.", "intros HmaxIndex.", "intros Hes_pos.", "intros Hys_pos.", "assert (Hcontiguous : contiguous 0 0 es ys).", "split.", "-", "left; reflexivity.", "-", "qsimpl time: 1.", "+", "shelve.", "+", "shelve.", "-", "intros e e' Heq_index Heq_term Hine Hine'.", "qsimpl time: 1.", "assert (Hentries_match : entries_match es ys).", "intros e''' e'''' e'' Heq_index''' Heq_term' Hine'' Hine''' Heq_index''.", "split; auto.", "assert (Hprefix_within_term : prefix_within_term es ys).", "intros e''''' e'''''' Heq_term'' Heq_index' Hine'''' Hine'''''.", "assert (Hrachet : forall x x' : entry, eIndex x = eIndex x' -> In x es -> In x' ys -> In x' es).", "intros x x' Heq_index'''' Hine'''''' Hine'''''''.", "assert (HmaxIndex_es : maxIndex es >= 1).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (HmaxIndex_ys : maxIndex ys >= 1).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (Hexists_es : exists x : entry, eIndex x = maxIndex es /\\ In x es).", "apply maxIndex_exists_in.", "assert (Hexists_ys : exists y : entry, eIndex y = maxIndex ys /\\ In y ys).", "apply maxIndex_exists_in.", "destruct mkEntry as [y mkEntry].", "assert (Hx_in_ys : In x ys).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (He''''''_in_es : In e'''''' es).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (HmaxIndex_eq : maxIndex es = maxIndex ys).", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset.", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset.", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset.", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset.", "assert (Hx_eq_e'''''' : x = e'''''').", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset.", "rewrite <- ltb_false_le in *.", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset.", "assert (HfindGtIndex : forall i : nat, 0 < i <= maxIndex es -> exists e : entry, In e (findGtIndex es i) /\\ eIndex e = i).", "intros i Hi.", "apply findGtIndex_contiguous with (entries := es) (x := i); try auto.", "apply fast_Zred_factor0.", "assert (HfindGtIndex' : forall i : nat, 0 < i <= maxIndex es -> exists e : entry, In e es /\\ eIndex e = i).", "intros i' Hi'."], "tactic": "intros e''''''' [Hine' Heq_index].", "exn": "Hine' is already used.", "type": "used_var", "handled": true}, {"ctx": ["intros es ys plt.", "intro Hsorted.", "intro Hunique.", "intros Hindices_eq.", "intros HmaxIndex.", "intros Hes_pos.", "intros Hys_pos.", "assert (Hcontiguous : contiguous 0 0 es ys).", "split.", "-", "left; reflexivity.", "-", "qsimpl time: 1.", "+", "shelve.", "+", "shelve.", "-", "intros e e' Heq_index Heq_term Hine Hine'.", "qsimpl time: 1.", "assert (Hentries_match : entries_match es ys).", "intros e''' e'''' e'' Heq_index''' Heq_term' Hine'' Hine''' Heq_index''.", "split; auto.", "assert (Hprefix_within_term : prefix_within_term es ys).", "intros e''''' e'''''' Heq_term'' Heq_index' Hine'''' Hine'''''.", "assert (Hrachet : forall x x' : entry, eIndex x = eIndex x' -> In x es -> In x' ys -> In x' es).", "intros x x' Heq_index'''' Hine'''''' Hine'''''''.", "assert (HmaxIndex_es : maxIndex es >= 1).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (HmaxIndex_ys : maxIndex ys >= 1).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (Hexists_es : exists x : entry, eIndex x = maxIndex es /\\ In x es).", "apply maxIndex_exists_in.", "assert (Hexists_ys : exists y : entry, eIndex y = maxIndex ys /\\ In y ys).", "apply maxIndex_exists_in.", "destruct mkEntry as [y mkEntry].", "assert (Hx_in_ys : In x ys).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (He''''''_in_es : In e'''''' es).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (HmaxIndex_eq : maxIndex es = maxIndex ys).", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset.", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset.", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset.", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset.", "assert (Hx_eq_e'''''' : x = e'''''').", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset.", "rewrite <- ltb_false_le in *.", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset.", "assert (HfindGtIndex : forall i : nat, 0 < i <= maxIndex es -> exists e : entry, In e (findGtIndex es i) /\\ eIndex e = i).", "intros i Hi.", "apply findGtIndex_contiguous with (entries := es) (x := i); try auto.", "apply fast_Zred_factor0.", "assert (HfindGtIndex' : forall i : nat, 0 < i <= maxIndex es -> exists e : entry, In e es /\\ eIndex e = i).", "intros i' Hi'."], "tactic": "intros e''''''' [Hine'' Heq_index].", "exn": "Hine'' is already used.", "type": "used_var", "handled": true}, {"ctx": ["intros es ys plt.", "intro Hsorted.", "intro Hunique.", "intros Hindices_eq.", "intros HmaxIndex.", "intros Hes_pos.", "intros Hys_pos.", "assert (Hcontiguous : contiguous 0 0 es ys).", "split.", "-", "left; reflexivity.", "-", "qsimpl time: 1.", "+", "shelve.", "+", "shelve.", "-", "intros e e' Heq_index Heq_term Hine Hine'.", "qsimpl time: 1.", "assert (Hentries_match : entries_match es ys).", "intros e''' e'''' e'' Heq_index''' Heq_term' Hine'' Hine''' Heq_index''.", "split; auto.", "assert (Hprefix_within_term : prefix_within_term es ys).", "intros e''''' e'''''' Heq_term'' Heq_index' Hine'''' Hine'''''.", "assert (Hrachet : forall x x' : entry, eIndex x = eIndex x' -> In x es -> In x' ys -> In x' es).", "intros x x' Heq_index'''' Hine'''''' Hine'''''''.", "assert (HmaxIndex_es : maxIndex es >= 1).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (HmaxIndex_ys : maxIndex ys >= 1).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (Hexists_es : exists x : entry, eIndex x = maxIndex es /\\ In x es).", "apply maxIndex_exists_in.", "assert (Hexists_ys : exists y : entry, eIndex y = maxIndex ys /\\ In y ys).", "apply maxIndex_exists_in.", "destruct mkEntry as [y mkEntry].", "assert (Hx_in_ys : In x ys).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (He''''''_in_es : In e'''''' es).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (HmaxIndex_eq : maxIndex es = maxIndex ys).", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset.", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset.", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset.", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset.", "assert (Hx_eq_e'''''' : x = e'''''').", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset.", "rewrite <- ltb_false_le in *.", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset.", "assert (HfindGtIndex : forall i : nat, 0 < i <= maxIndex es -> exists e : entry, In e (findGtIndex es i) /\\ eIndex e = i).", "intros i Hi.", "apply findGtIndex_contiguous with (entries := es) (x := i); try auto.", "apply fast_Zred_factor0.", "assert (HfindGtIndex' : forall i : nat, 0 < i <= maxIndex es -> exists e : entry, In e es /\\ eIndex e = i).", "intros i' Hi'."], "tactic": "intros e''''''' [Hine''' Heq_index].", "exn": "Hine''' is already used.", "type": "used_var", "handled": true}, {"ctx": ["intros es ys plt.", "intro Hsorted.", "intro Hunique.", "intros Hindices_eq.", "intros HmaxIndex.", "intros Hes_pos.", "intros Hys_pos.", "assert (Hcontiguous : contiguous 0 0 es ys).", "split.", "-", "left; reflexivity.", "-", "qsimpl time: 1.", "+", "shelve.", "+", "shelve.", "-", "intros e e' Heq_index Heq_term Hine Hine'.", "qsimpl time: 1.", "assert (Hentries_match : entries_match es ys).", "intros e''' e'''' e'' Heq_index''' Heq_term' Hine'' Hine''' Heq_index''.", "split; auto.", "assert (Hprefix_within_term : prefix_within_term es ys).", "intros e''''' e'''''' Heq_term'' Heq_index' Hine'''' Hine'''''.", "assert (Hrachet : forall x x' : entry, eIndex x = eIndex x' -> In x es -> In x' ys -> In x' es).", "intros x x' Heq_index'''' Hine'''''' Hine'''''''.", "assert (HmaxIndex_es : maxIndex es >= 1).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (HmaxIndex_ys : maxIndex ys >= 1).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (Hexists_es : exists x : entry, eIndex x = maxIndex es /\\ In x es).", "apply maxIndex_exists_in.", "assert (Hexists_ys : exists y : entry, eIndex y = maxIndex ys /\\ In y ys).", "apply maxIndex_exists_in.", "destruct mkEntry as [y mkEntry].", "assert (Hx_in_ys : In x ys).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (He''''''_in_es : In e'''''' es).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (HmaxIndex_eq : maxIndex es = maxIndex ys).", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset.", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset.", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset.", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset.", "assert (Hx_eq_e'''''' : x = e'''''').", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset.", "rewrite <- ltb_false_le in *.", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset.", "assert (HfindGtIndex : forall i : nat, 0 < i <= maxIndex es -> exists e : entry, In e (findGtIndex es i) /\\ eIndex e = i).", "intros i Hi.", "apply findGtIndex_contiguous with (entries := es) (x := i); try auto.", "apply fast_Zred_factor0.", "assert (HfindGtIndex' : forall i : nat, 0 < i <= maxIndex es -> exists e : entry, In e es /\\ eIndex e = i).", "intros i' Hi'."], "tactic": "intros e''''''' [Hine'''' Heq_index].", "exn": "Hine'''' is already used.", "type": "used_var", "handled": true}, {"ctx": ["intros es ys plt.", "intro Hsorted.", "intro Hunique.", "intros Hindices_eq.", "intros HmaxIndex.", "intros Hes_pos.", "intros Hys_pos.", "assert (Hcontiguous : contiguous 0 0 es ys).", "split.", "-", "left; reflexivity.", "-", "qsimpl time: 1.", "+", "shelve.", "+", "shelve.", "-", "intros e e' Heq_index Heq_term Hine Hine'.", "qsimpl time: 1.", "assert (Hentries_match : entries_match es ys).", "intros e''' e'''' e'' Heq_index''' Heq_term' Hine'' Hine''' Heq_index''.", "split; auto.", "assert (Hprefix_within_term : prefix_within_term es ys).", "intros e''''' e'''''' Heq_term'' Heq_index' Hine'''' Hine'''''.", "assert (Hrachet : forall x x' : entry, eIndex x = eIndex x' -> In x es -> In x' ys -> In x' es).", "intros x x' Heq_index'''' Hine'''''' Hine'''''''.", "assert (HmaxIndex_es : maxIndex es >= 1).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (HmaxIndex_ys : maxIndex ys >= 1).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (Hexists_es : exists x : entry, eIndex x = maxIndex es /\\ In x es).", "apply maxIndex_exists_in.", "assert (Hexists_ys : exists y : entry, eIndex y = maxIndex ys /\\ In y ys).", "apply maxIndex_exists_in.", "destruct mkEntry as [y mkEntry].", "assert (Hx_in_ys : In x ys).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (He''''''_in_es : In e'''''' es).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (HmaxIndex_eq : maxIndex es = maxIndex ys).", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset.", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset.", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset.", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset.", "assert (Hx_eq_e'''''' : x = e'''''').", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset.", "rewrite <- ltb_false_le in *.", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset.", "assert (HfindGtIndex : forall i : nat, 0 < i <= maxIndex es -> exists e : entry, In e (findGtIndex es i) /\\ eIndex e = i).", "intros i Hi.", "apply findGtIndex_contiguous with (entries := es) (x := i); try auto.", "apply fast_Zred_factor0.", "assert (HfindGtIndex' : forall i : nat, 0 < i <= maxIndex es -> exists e : entry, In e es /\\ eIndex e = i).", "intros i' Hi'."], "tactic": "intros e''''''' [Hine''''' Heq_index].", "exn": "Hine''''' is already used.", "type": "used_var", "handled": true}, {"ctx": ["intros es ys plt.", "intro Hsorted.", "intro Hunique.", "intros Hindices_eq.", "intros HmaxIndex.", "intros Hes_pos.", "intros Hys_pos.", "assert (Hcontiguous : contiguous 0 0 es ys).", "split.", "-", "left; reflexivity.", "-", "qsimpl time: 1.", "+", "shelve.", "+", "shelve.", "-", "intros e e' Heq_index Heq_term Hine Hine'.", "qsimpl time: 1.", "assert (Hentries_match : entries_match es ys).", "intros e''' e'''' e'' Heq_index''' Heq_term' Hine'' Hine''' Heq_index''.", "split; auto.", "assert (Hprefix_within_term : prefix_within_term es ys).", "intros e''''' e'''''' Heq_term'' Heq_index' Hine'''' Hine'''''.", "assert (Hrachet : forall x x' : entry, eIndex x = eIndex x' -> In x es -> In x' ys -> In x' es).", "intros x x' Heq_index'''' Hine'''''' Hine'''''''.", "assert (HmaxIndex_es : maxIndex es >= 1).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (HmaxIndex_ys : maxIndex ys >= 1).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (Hexists_es : exists x : entry, eIndex x = maxIndex es /\\ In x es).", "apply maxIndex_exists_in.", "assert (Hexists_ys : exists y : entry, eIndex y = maxIndex ys /\\ In y ys).", "apply maxIndex_exists_in.", "destruct mkEntry as [y mkEntry].", "assert (Hx_in_ys : In x ys).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (He''''''_in_es : In e'''''' es).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (HmaxIndex_eq : maxIndex es = maxIndex ys).", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset.", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset.", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset.", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset.", "assert (Hx_eq_e'''''' : x = e'''''').", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset.", "rewrite <- ltb_false_le in *.", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset.", "assert (HfindGtIndex : forall i : nat, 0 < i <= maxIndex es -> exists e : entry, In e (findGtIndex es i) /\\ eIndex e = i).", "intros i Hi.", "apply findGtIndex_contiguous with (entries := es) (x := i); try auto.", "apply fast_Zred_factor0.", "assert (HfindGtIndex' : forall i : nat, 0 < i <= maxIndex es -> exists e : entry, In e es /\\ eIndex e = i).", "intros i' Hi'."], "tactic": "intros e''''''' [Hine'''''' Heq_index].", "exn": "Hine'''''' is already used.", "type": "used_var", "handled": true}, {"ctx": ["intros es ys plt.", "intro Hsorted.", "intro Hunique.", "intros Hindices_eq.", "intros HmaxIndex.", "intros Hes_pos.", "intros Hys_pos.", "assert (Hcontiguous : contiguous 0 0 es ys).", "split.", "-", "left; reflexivity.", "-", "qsimpl time: 1.", "+", "shelve.", "+", "shelve.", "-", "intros e e' Heq_index Heq_term Hine Hine'.", "qsimpl time: 1.", "assert (Hentries_match : entries_match es ys).", "intros e''' e'''' e'' Heq_index''' Heq_term' Hine'' Hine''' Heq_index''.", "split; auto.", "assert (Hprefix_within_term : prefix_within_term es ys).", "intros e''''' e'''''' Heq_term'' Heq_index' Hine'''' Hine'''''.", "assert (Hrachet : forall x x' : entry, eIndex x = eIndex x' -> In x es -> In x' ys -> In x' es).", "intros x x' Heq_index'''' Hine'''''' Hine'''''''.", "assert (HmaxIndex_es : maxIndex es >= 1).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (HmaxIndex_ys : maxIndex ys >= 1).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (Hexists_es : exists x : entry, eIndex x = maxIndex es /\\ In x es).", "apply maxIndex_exists_in.", "assert (Hexists_ys : exists y : entry, eIndex y = maxIndex ys /\\ In y ys).", "apply maxIndex_exists_in.", "destruct mkEntry as [y mkEntry].", "assert (Hx_in_ys : In x ys).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (He''''''_in_es : In e'''''' es).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (HmaxIndex_eq : maxIndex es = maxIndex ys).", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset.", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset.", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset.", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset.", "assert (Hx_eq_e'''''' : x = e'''''').", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset.", "rewrite <- ltb_false_le in *.", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset.", "assert (HfindGtIndex : forall i : nat, 0 < i <= maxIndex es -> exists e : entry, In e (findGtIndex es i) /\\ eIndex e = i).", "intros i Hi.", "apply findGtIndex_contiguous with (entries := es) (x := i); try auto.", "apply fast_Zred_factor0.", "assert (HfindGtIndex' : forall i : nat, 0 < i <= maxIndex es -> exists e : entry, In e es /\\ eIndex e = i).", "intros i' Hi'."], "tactic": "intros e''''''' [Hine''''''' Heq_index].", "exn": "Hine''''''' is already used.", "type": "used_var", "handled": true}, {"ctx": ["intros es ys plt.", "intro Hsorted.", "intro Hunique.", "intros Hindices_eq.", "intros HmaxIndex.", "intros Hes_pos.", "intros Hys_pos.", "assert (Hcontiguous : contiguous 0 0 es ys).", "split.", "-", "left; reflexivity.", "-", "qsimpl time: 1.", "+", "shelve.", "+", "shelve.", "-", "intros e e' Heq_index Heq_term Hine Hine'.", "qsimpl time: 1.", "assert (Hentries_match : entries_match es ys).", "intros e''' e'''' e'' Heq_index''' Heq_term' Hine'' Hine''' Heq_index''.", "split; auto.", "assert (Hprefix_within_term : prefix_within_term es ys).", "intros e''''' e'''''' Heq_term'' Heq_index' Hine'''' Hine'''''.", "assert (Hrachet : forall x x' : entry, eIndex x = eIndex x' -> In x es -> In x' ys -> In x' es).", "intros x x' Heq_index'''' Hine'''''' Hine'''''''.", "assert (HmaxIndex_es : maxIndex es >= 1).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (HmaxIndex_ys : maxIndex ys >= 1).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (Hexists_es : exists x : entry, eIndex x = maxIndex es /\\ In x es).", "apply maxIndex_exists_in.", "assert (Hexists_ys : exists y : entry, eIndex y = maxIndex ys /\\ In y ys).", "apply maxIndex_exists_in.", "destruct mkEntry as [y mkEntry].", "assert (Hx_in_ys : In x ys).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (He''''''_in_es : In e'''''' es).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (HmaxIndex_eq : maxIndex es = maxIndex ys).", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset.", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset.", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset.", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset.", "assert (Hx_eq_e'''''' : x = e'''''').", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset.", "rewrite <- ltb_false_le in *.", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset.", "assert (HfindGtIndex : forall i : nat, 0 < i <= maxIndex es -> exists e : entry, In e (findGtIndex es i) /\\ eIndex e = i).", "intros i Hi.", "apply findGtIndex_contiguous with (entries := es) (x := i); try auto.", "apply fast_Zred_factor0.", "assert (HfindGtIndex' : forall i : nat, 0 < i <= maxIndex es -> exists e : entry, In e es /\\ eIndex e = i).", "intros i' Hi'."], "tactic": "intros e''''''' [Hine'''''''' Heq_index].", "exn": "Heq_index is already used.", "type": "used_var", "handled": true}, {"ctx": ["intros es ys plt.", "intro Hsorted.", "intro Hunique.", "intros Hindices_eq.", "intros HmaxIndex.", "intros Hes_pos.", "intros Hys_pos.", "assert (Hcontiguous : contiguous 0 0 es ys).", "split.", "-", "left; reflexivity.", "-", "qsimpl time: 1.", "+", "shelve.", "+", "shelve.", "-", "intros e e' Heq_index Heq_term Hine Hine'.", "qsimpl time: 1.", "assert (Hentries_match : entries_match es ys).", "intros e''' e'''' e'' Heq_index''' Heq_term' Hine'' Hine''' Heq_index''.", "split; auto.", "assert (Hprefix_within_term : prefix_within_term es ys).", "intros e''''' e'''''' Heq_term'' Heq_index' Hine'''' Hine'''''.", "assert (Hrachet : forall x x' : entry, eIndex x = eIndex x' -> In x es -> In x' ys -> In x' es).", "intros x x' Heq_index'''' Hine'''''' Hine'''''''.", "assert (HmaxIndex_es : maxIndex es >= 1).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (HmaxIndex_ys : maxIndex ys >= 1).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (Hexists_es : exists x : entry, eIndex x = maxIndex es /\\ In x es).", "apply maxIndex_exists_in.", "assert (Hexists_ys : exists y : entry, eIndex y = maxIndex ys /\\ In y ys).", "apply maxIndex_exists_in.", "destruct mkEntry as [y mkEntry].", "assert (Hx_in_ys : In x ys).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (He''''''_in_es : In e'''''' es).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (HmaxIndex_eq : maxIndex es = maxIndex ys).", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset.", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset.", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset.", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset.", "assert (Hx_eq_e'''''' : x = e'''''').", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset.", "rewrite <- ltb_false_le in *.", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset.", "assert (HfindGtIndex : forall i : nat, 0 < i <= maxIndex es -> exists e : entry, In e (findGtIndex es i) /\\ eIndex e = i).", "intros i Hi.", "apply findGtIndex_contiguous with (entries := es) (x := i); try auto.", "apply fast_Zred_factor0.", "assert (HfindGtIndex' : forall i : nat, 0 < i <= maxIndex es -> exists e : entry, In e es /\\ eIndex e = i).", "intros i' Hi'."], "tactic": "intros e''''''' [Hine'''''''' Heq_index'].", "exn": "Heq_index' is already used.", "type": "used_var", "handled": true}, {"ctx": ["intros es ys plt.", "intro Hsorted.", "intro Hunique.", "intros Hindices_eq.", "intros HmaxIndex.", "intros Hes_pos.", "intros Hys_pos.", "assert (Hcontiguous : contiguous 0 0 es ys).", "split.", "-", "left; reflexivity.", "-", "qsimpl time: 1.", "+", "shelve.", "+", "shelve.", "-", "intros e e' Heq_index Heq_term Hine Hine'.", "qsimpl time: 1.", "assert (Hentries_match : entries_match es ys).", "intros e''' e'''' e'' Heq_index''' Heq_term' Hine'' Hine''' Heq_index''.", "split; auto.", "assert (Hprefix_within_term : prefix_within_term es ys).", "intros e''''' e'''''' Heq_term'' Heq_index' Hine'''' Hine'''''.", "assert (Hrachet : forall x x' : entry, eIndex x = eIndex x' -> In x es -> In x' ys -> In x' es).", "intros x x' Heq_index'''' Hine'''''' Hine'''''''.", "assert (HmaxIndex_es : maxIndex es >= 1).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (HmaxIndex_ys : maxIndex ys >= 1).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (Hexists_es : exists x : entry, eIndex x = maxIndex es /\\ In x es).", "apply maxIndex_exists_in.", "assert (Hexists_ys : exists y : entry, eIndex y = maxIndex ys /\\ In y ys).", "apply maxIndex_exists_in.", "destruct mkEntry as [y mkEntry].", "assert (Hx_in_ys : In x ys).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (He''''''_in_es : In e'''''' es).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (HmaxIndex_eq : maxIndex es = maxIndex ys).", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset.", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset.", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset.", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset.", "assert (Hx_eq_e'''''' : x = e'''''').", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset.", "rewrite <- ltb_false_le in *.", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset.", "assert (HfindGtIndex : forall i : nat, 0 < i <= maxIndex es -> exists e : entry, In e (findGtIndex es i) /\\ eIndex e = i).", "intros i Hi.", "apply findGtIndex_contiguous with (entries := es) (x := i); try auto.", "apply fast_Zred_factor0.", "assert (HfindGtIndex' : forall i : nat, 0 < i <= maxIndex es -> exists e : entry, In e es /\\ eIndex e = i).", "intros i' Hi'."], "tactic": "intros e''''''' [Hine'''''''' Heq_index''].", "exn": "Heq_index'' is already used.", "type": "used_var", "handled": true}, {"ctx": ["intros es ys plt.", "intro Hsorted.", "intro Hunique.", "intros Hindices_eq.", "intros HmaxIndex.", "intros Hes_pos.", "intros Hys_pos.", "assert (Hcontiguous : contiguous 0 0 es ys).", "split.", "-", "left; reflexivity.", "-", "qsimpl time: 1.", "+", "shelve.", "+", "shelve.", "-", "intros e e' Heq_index Heq_term Hine Hine'.", "qsimpl time: 1.", "assert (Hentries_match : entries_match es ys).", "intros e''' e'''' e'' Heq_index''' Heq_term' Hine'' Hine''' Heq_index''.", "split; auto.", "assert (Hprefix_within_term : prefix_within_term es ys).", "intros e''''' e'''''' Heq_term'' Heq_index' Hine'''' Hine'''''.", "assert (Hrachet : forall x x' : entry, eIndex x = eIndex x' -> In x es -> In x' ys -> In x' es).", "intros x x' Heq_index'''' Hine'''''' Hine'''''''.", "assert (HmaxIndex_es : maxIndex es >= 1).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (HmaxIndex_ys : maxIndex ys >= 1).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (Hexists_es : exists x : entry, eIndex x = maxIndex es /\\ In x es).", "apply maxIndex_exists_in.", "assert (Hexists_ys : exists y : entry, eIndex y = maxIndex ys /\\ In y ys).", "apply maxIndex_exists_in.", "destruct mkEntry as [y mkEntry].", "assert (Hx_in_ys : In x ys).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (He''''''_in_es : In e'''''' es).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (HmaxIndex_eq : maxIndex es = maxIndex ys).", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset.", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset.", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset.", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset.", "assert (Hx_eq_e'''''' : x = e'''''').", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset.", "rewrite <- ltb_false_le in *.", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset.", "assert (HfindGtIndex : forall i : nat, 0 < i <= maxIndex es -> exists e : entry, In e (findGtIndex es i) /\\ eIndex e = i).", "intros i Hi.", "apply findGtIndex_contiguous with (entries := es) (x := i); try auto.", "apply fast_Zred_factor0.", "assert (HfindGtIndex' : forall i : nat, 0 < i <= maxIndex es -> exists e : entry, In e es /\\ eIndex e = i).", "intros i' Hi'."], "tactic": "intros e''''''' [Hine'''''''' Heq_index'''].", "exn": "Heq_index''' is already used.", "type": "used_var", "handled": true}, {"ctx": ["intros es ys plt.", "intro Hsorted.", "intro Hunique.", "intros Hindices_eq.", "intros HmaxIndex.", "intros Hes_pos.", "intros Hys_pos.", "assert (Hcontiguous : contiguous 0 0 es ys).", "split.", "-", "left; reflexivity.", "-", "qsimpl time: 1.", "+", "shelve.", "+", "shelve.", "-", "intros e e' Heq_index Heq_term Hine Hine'.", "qsimpl time: 1.", "assert (Hentries_match : entries_match es ys).", "intros e''' e'''' e'' Heq_index''' Heq_term' Hine'' Hine''' Heq_index''.", "split; auto.", "assert (Hprefix_within_term : prefix_within_term es ys).", "intros e''''' e'''''' Heq_term'' Heq_index' Hine'''' Hine'''''.", "assert (Hrachet : forall x x' : entry, eIndex x = eIndex x' -> In x es -> In x' ys -> In x' es).", "intros x x' Heq_index'''' Hine'''''' Hine'''''''.", "assert (HmaxIndex_es : maxIndex es >= 1).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (HmaxIndex_ys : maxIndex ys >= 1).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (Hexists_es : exists x : entry, eIndex x = maxIndex es /\\ In x es).", "apply maxIndex_exists_in.", "assert (Hexists_ys : exists y : entry, eIndex y = maxIndex ys /\\ In y ys).", "apply maxIndex_exists_in.", "destruct mkEntry as [y mkEntry].", "assert (Hx_in_ys : In x ys).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (He''''''_in_es : In e'''''' es).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (HmaxIndex_eq : maxIndex es = maxIndex ys).", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset.", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset.", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset.", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset.", "assert (Hx_eq_e'''''' : x = e'''''').", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset.", "rewrite <- ltb_false_le in *.", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset.", "assert (HfindGtIndex : forall i : nat, 0 < i <= maxIndex es -> exists e : entry, In e (findGtIndex es i) /\\ eIndex e = i).", "intros i Hi.", "apply findGtIndex_contiguous with (entries := es) (x := i); try auto.", "apply fast_Zred_factor0.", "assert (HfindGtIndex' : forall i : nat, 0 < i <= maxIndex es -> exists e : entry, In e es /\\ eIndex e = i).", "intros i' Hi'."], "tactic": "intros e''''''' [Hine'''''''' Heq_index''''].", "exn": "Heq_index'''' is already used.", "type": "used_var", "handled": true}, {"ctx": ["intros es ys plt.", "intro Hsorted.", "intro Hunique.", "intros Hindices_eq.", "intros HmaxIndex.", "intros Hes_pos.", "intros Hys_pos.", "assert (Hcontiguous : contiguous 0 0 es ys).", "split.", "-", "left; reflexivity.", "-", "qsimpl time: 1.", "+", "shelve.", "+", "shelve.", "-", "intros e e' Heq_index Heq_term Hine Hine'.", "qsimpl time: 1.", "assert (Hentries_match : entries_match es ys).", "intros e''' e'''' e'' Heq_index''' Heq_term' Hine'' Hine''' Heq_index''.", "split; auto.", "assert (Hprefix_within_term : prefix_within_term es ys).", "intros e''''' e'''''' Heq_term'' Heq_index' Hine'''' Hine'''''.", "assert (Hrachet : forall x x' : entry, eIndex x = eIndex x' -> In x es -> In x' ys -> In x' es).", "intros x x' Heq_index'''' Hine'''''' Hine'''''''.", "assert (HmaxIndex_es : maxIndex es >= 1).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (HmaxIndex_ys : maxIndex ys >= 1).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (Hexists_es : exists x : entry, eIndex x = maxIndex es /\\ In x es).", "apply maxIndex_exists_in.", "assert (Hexists_ys : exists y : entry, eIndex y = maxIndex ys /\\ In y ys).", "apply maxIndex_exists_in.", "destruct mkEntry as [y mkEntry].", "assert (Hx_in_ys : In x ys).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (He''''''_in_es : In e'''''' es).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (HmaxIndex_eq : maxIndex es = maxIndex ys).", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset.", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset.", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset.", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset.", "assert (Hx_eq_e'''''' : x = e'''''').", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset.", "rewrite <- ltb_false_le in *.", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset.", "assert (HfindGtIndex : forall i : nat, 0 < i <= maxIndex es -> exists e : entry, In e (findGtIndex es i) /\\ eIndex e = i).", "intros i Hi.", "apply findGtIndex_contiguous with (entries := es) (x := i); try auto.", "apply fast_Zred_factor0.", "assert (HfindGtIndex' : forall i : nat, 0 < i <= maxIndex es -> exists e : entry, In e es /\\ eIndex e = i).", "intros i' Hi'."], "tactic": "intros e''''''' [Hine'''''''' Heq_index'''''].", "exn": "No product even after head-reduction.", "type": "no_product", "handled": true}, {"ctx": ["intros es ys plt.", "intro Hsorted.", "intro Hunique.", "intros Hindices_eq.", "intros HmaxIndex.", "intros Hes_pos.", "intros Hys_pos.", "assert (Hcontiguous : contiguous 0 0 es ys).", "split.", "-", "left; reflexivity.", "-", "qsimpl time: 1.", "+", "shelve.", "+", "shelve.", "-", "intros e e' Heq_index Heq_term Hine Hine'.", "qsimpl time: 1.", "assert (Hentries_match : entries_match es ys).", "intros e''' e'''' e'' Heq_index''' Heq_term' Hine'' Hine''' Heq_index''.", "split; auto.", "assert (Hprefix_within_term : prefix_within_term es ys).", "intros e''''' e'''''' Heq_term'' Heq_index' Hine'''' Hine'''''.", "assert (Hrachet : forall x x' : entry, eIndex x = eIndex x' -> In x es -> In x' ys -> In x' es).", "intros x x' Heq_index'''' Hine'''''' Hine'''''''.", "assert (HmaxIndex_es : maxIndex es >= 1).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (HmaxIndex_ys : maxIndex ys >= 1).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (Hexists_es : exists x : entry, eIndex x = maxIndex es /\\ In x es).", "apply maxIndex_exists_in.", "assert (Hexists_ys : exists y : entry, eIndex y = maxIndex ys /\\ In y ys).", "apply maxIndex_exists_in.", "destruct mkEntry as [y mkEntry].", "assert (Hx_in_ys : In x ys).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (He''''''_in_es : In e'''''' es).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (HmaxIndex_eq : maxIndex es = maxIndex ys).", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset.", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset.", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset.", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset.", "assert (Hx_eq_e'''''' : x = e'''''').", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset.", "rewrite <- ltb_false_le in *.", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset.", "assert (HfindGtIndex : forall i : nat, 0 < i <= maxIndex es -> exists e : entry, In e (findGtIndex es i) /\\ eIndex e = i).", "intros i Hi.", "apply findGtIndex_contiguous with (entries := es) (x := i); try auto.", "apply fast_Zred_factor0.", "assert (HfindGtIndex' : forall i : nat, 0 < i <= maxIndex es -> exists e : entry, In e es /\\ eIndex e = i).", "intros i' Hi'.", "exists e; split; auto."], "tactic": "clear HfindGtIndex.", "exn": "No such hypothesis: HfindGtIndex", "type": "no_hypos", "handled": true}, {"ctx": ["intros es ys plt.", "intro Hsorted.", "intro Hunique.", "intros Hindices_eq.", "intros HmaxIndex.", "intros Hes_pos.", "intros Hys_pos.", "assert (Hcontiguous : contiguous 0 0 es ys).", "split.", "-", "left; reflexivity.", "-", "qsimpl time: 1.", "+", "shelve.", "+", "shelve.", "-", "intros e e' Heq_index Heq_term Hine Hine'.", "qsimpl time: 1.", "assert (Hentries_match : entries_match es ys).", "intros e''' e'''' e'' Heq_index''' Heq_term' Hine'' Hine''' Heq_index''.", "split; auto.", "assert (Hprefix_within_term : prefix_within_term es ys).", "intros e''''' e'''''' Heq_term'' Heq_index' Hine'''' Hine'''''.", "assert (Hrachet : forall x x' : entry, eIndex x = eIndex x' -> In x es -> In x' ys -> In x' es).", "intros x x' Heq_index'''' Hine'''''' Hine'''''''.", "assert (HmaxIndex_es : maxIndex es >= 1).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (HmaxIndex_ys : maxIndex ys >= 1).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (Hexists_es : exists x : entry, eIndex x = maxIndex es /\\ In x es).", "apply maxIndex_exists_in.", "assert (Hexists_ys : exists y : entry, eIndex y = maxIndex ys /\\ In y ys).", "apply maxIndex_exists_in.", "destruct mkEntry as [y mkEntry].", "assert (Hx_in_ys : In x ys).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (He''''''_in_es : In e'''''' es).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (HmaxIndex_eq : maxIndex es = maxIndex ys).", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset.", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset.", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset.", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset.", "assert (Hx_eq_e'''''' : x = e'''''').", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset.", "rewrite <- ltb_false_le in *.", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset.", "assert (HfindGtIndex : forall i : nat, 0 < i <= maxIndex es -> exists e : entry, In e (findGtIndex es i) /\\ eIndex e = i).", "intros i Hi.", "apply findGtIndex_contiguous with (entries := es) (x := i); try auto.", "apply fast_Zred_factor0.", "assert (HfindGtIndex' : forall i : nat, 0 < i <= maxIndex es -> exists e : entry, In e es /\\ eIndex e = i).", "intros i' Hi'.", "exists e; split; auto.", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset.", "assert (Hcontiguous_range_exact_lo : contiguous_range_exact_lo es 0).", "split."], "tactic": "-", "exn": "Wrong bullet -: Current bullet - is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["intros es ys plt.", "intro Hsorted.", "intro Hunique.", "intros Hindices_eq.", "intros HmaxIndex.", "intros Hes_pos.", "intros Hys_pos.", "assert (Hcontiguous : contiguous 0 0 es ys).", "split.", "-", "left; reflexivity.", "-", "qsimpl time: 1.", "+", "shelve.", "+", "shelve.", "-", "intros e e' Heq_index Heq_term Hine Hine'.", "qsimpl time: 1.", "assert (Hentries_match : entries_match es ys).", "intros e''' e'''' e'' Heq_index''' Heq_term' Hine'' Hine''' Heq_index''.", "split; auto.", "assert (Hprefix_within_term : prefix_within_term es ys).", "intros e''''' e'''''' Heq_term'' Heq_index' Hine'''' Hine'''''.", "assert (Hrachet : forall x x' : entry, eIndex x = eIndex x' -> In x es -> In x' ys -> In x' es).", "intros x x' Heq_index'''' Hine'''''' Hine'''''''.", "assert (HmaxIndex_es : maxIndex es >= 1).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (HmaxIndex_ys : maxIndex ys >= 1).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (Hexists_es : exists x : entry, eIndex x = maxIndex es /\\ In x es).", "apply maxIndex_exists_in.", "assert (Hexists_ys : exists y : entry, eIndex y = maxIndex ys /\\ In y ys).", "apply maxIndex_exists_in.", "destruct mkEntry as [y mkEntry].", "assert (Hx_in_ys : In x ys).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (He''''''_in_es : In e'''''' es).", "qsimpl time: 1 use: maxIndex_non_empty.", "assert (HmaxIndex_eq : maxIndex es = maxIndex ys).", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset.", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset.", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset.", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset.", "assert (Hx_eq_e'''''' : x = e'''''').", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset.", "rewrite <- ltb_false_le in *.", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset.", "assert (HfindGtIndex : forall i : nat, 0 < i <= maxIndex es -> exists e : entry, In e (findGtIndex es i) /\\ eIndex e = i).", "intros i Hi.", "apply findGtIndex_contiguous with (entries := es) (x := i); try auto.", "apply fast_Zred_factor0.", "assert (HfindGtIndex' : forall i : nat, 0 < i <= maxIndex es -> exists e : entry, In e es /\\ eIndex e = i).", "intros i' Hi'.", "exists e; split; auto.", "qsimpl time: 1 use: maxIndex_non_empty,maxIndex_subset.", "assert (Hcontiguous_range_exact_lo : contiguous_range_exact_lo es 0).", "split.", "+", "shelve.", "+", "shelve.", "+", "shelve.", "+", "shelve.", "+", "shelve.", "+", "shelve.", "+", "shelve.", "+", "shelve.", "+", "shelve.", "+", "shelve.", "+", "shelve.", "+", "shelve.", "+", "shelve.", "+", "shelve.", "+", "shelve.", "+", "shelve.", "+", "shelve.", "+", "shelve.", "+", "shelve.", "+", "shelve.", "+", "shelve.", "+", "shelve.", "+", "shelve.", "+", "shelve.", "+", "shelve.", "+", "shelve.", "+", "shelve.", "+", "shelve.", "+", "shelve."], "tactic": "-", "exn": "Wrong bullet -: No more subgoals.", "type": "no_more_subgoals", "handled": true}]}, "chat": [{"role": "user", "content": "I will give you a Coq proof state, including both hypotheses and a specific goal and your need to prove it. Your response should be a singular code block of Coq proof starting with \"```coq\n\", ending with \"Qed.```\", without any additional explanation or commentary. Follow to these guidelines:\nIntroduce variables using unique names to avoid any conflicts.\nKeep each command distinct and separated, avoid concatenations like ';' or '[cmd|cmd]'.\nOrganize your proof with bullets like '-', '+', and '*' instead of braces ({, }). Shift to their double symbols like '--' and '++', when necessary.\nEffectively use given premises, follow the syntax and structure demonstrated in the examples provided.\n\nExample 1:\n\nHypotheses:\nn, m: nat\nIHn: m + n = n + m\n\nGoal:\nm + S n = S n + m\n\nProof:\n```coq\nsimpl. rewrite <- IHn. auto.\nQed.```\n\nExample 2:\nHypotheses:\n\nGoal:\nforall n m : nat, m + n = n + m\n\n```coq\nintros n m. induction n.\n- simpl. auto.\n- simpl. rewrite <- IHn. auto.\nQed.```\n\nSolve This Proof State:\n\nHypotheses:\norig_base_params: BaseParams\none_node_params: OneNodeParams orig_base_params\nraft_params: RaftParams orig_base_params\n\nGoal:\nforall (es ys : list entry) (plt : term), sorted es -> uniqueIndices ys -> (forall e1 e2 : entry, eIndex e1 = eIndex e2 -> eTerm e1 = eTerm e2 -> In e1 es -> In e2 ys -> (forall e3 : entry, eIndex e3 <= eIndex e1 -> In e3 es -> In e3 ys) /\\ (0 <> 0 -> exists e4 : entry, eIndex e4 = 0 /\\ eTerm e4 = plt /\\ In e4 ys)) -> (forall i : nat, 0 < i <= maxIndex es -> exists e : entry, eIndex e = i /\\ In e es) -> (forall e : entry, In e es -> 0 < eIndex e) -> (forall y : entry, In y ys -> 0 < eIndex y) -> entries_match es ys\n\nPremises:\nRecord entry (orig_base_params : BaseParams) (raft_params : RaftParams orig_base_params) : Type := mkEntry { eAt : name; eClient : clientId; eId : nat; eIndex : logIndex; eTerm : term; eInput : input } Arguments entry {orig_base_params raft_params} Arguments mkEntry {orig_base_params raft_params} _ _ _%nat_scope\nIn : forall A : Type, A -> list A -> Prop\nterm = nat : Set\nInductive list (A : Type) : Type := nil : list A | cons : A -> list A -> list A Arguments list _%type_scope Arguments nil {A}%type_scope Arguments cons {A}%type_scope a l%list_scope : rename\nRecord OneNodeParams (P : BaseParams) : Type := Build_OneNodeParams { init : data; handler : input -> data -> output * data } Arguments Build_OneNodeParams _ _ _%function_scope\nentries_match = fun (orig_base_params : BaseParams) (raft_params : RaftParams orig_base_params) (entries entries' : list entry) => forall e e' e'' : entry, eIndex e = eIndex e' -> eTerm e = eTerm e' -> In e entries -> In e' entries' -> eIndex e'' <= eIndex e -> In e'' entries <-> In e'' entries' : forall (orig_base_params : BaseParams) (raft_params : RaftParams orig_base_params), list entry -> list entry -> Prop Arguments entries_match {orig_base_params raft_params} (_ _)%list_scope\neIndex = fun (orig_base_params : BaseParams) (raft_params : RaftParams orig_base_params) (e : entry) => let (_, _, _, eIndex, _, _) := e in eIndex : forall (orig_base_params : BaseParams) (raft_params : RaftParams orig_base_params), entry -> logIndex Arguments eIndex {orig_base_params raft_params}\neTerm = fun (orig_base_params : BaseParams) (raft_params : RaftParams orig_base_params) (e : entry) => let (_, _, _, _, eTerm, _) := e in eTerm : forall (orig_base_params : BaseParams) (raft_params : RaftParams orig_base_params), entry -> term Arguments eTerm {orig_base_params raft_params}\nInductive nat : Set := O : nat | S : nat -> nat Arguments S _%nat_scope\nmaxIndex = fun (orig_base_params : BaseParams) (raft_params : RaftParams orig_base_params) => fix maxIndex (entries : list entry) : logIndex := match entries with | [] => 0 | e :: _ => eIndex e end : forall (orig_base_params : BaseParams) (raft_params : RaftParams orig_base_params), list entry -> logIndex Arguments maxIndex {orig_base_params raft_params} _%list_scope\nsorted = fun (orig_base_params : BaseParams) (raft_params : RaftParams orig_base_params) => fix sorted (log : list entry) : Prop := match log with | [] => True | e :: es => (forall e' : entry, In e' es -> eIndex e > eIndex e' /\\ eTerm e >= eTerm e') /\\ sorted es end : forall (orig_base_params : BaseParams) (raft_params : RaftParams orig_base_params), list entry -> Prop Arguments sorted {orig_base_params raft_params} _%list_scope\nRecord RaftParams (orig_base_params : BaseParams) : Type := Build_RaftParams { N : nat; input_eq_dec : forall x y : input, {x = y} + {x <> y}; output_eq_dec : forall x y : output, {x = y} + {x <> y}; clientId : Type; clientId_eq_dec : forall x y : clientId, {x = y} + {x <> y} } Arguments Build_RaftParams _ _%nat_scope (_ _)%function_scope [clientId]%type_scope _%function_scope\nuniqueIndices = fun (orig_base_params : BaseParams) (raft_params : RaftParams orig_base_params) (xs : list entry) => NoDup (map eIndex xs) : forall (orig_base_params : BaseParams) (raft_params : RaftParams orig_base_params), list entry -> Prop Arguments uniqueIndices {orig_base_params raft_params} _%list_scope\nfindGtIndex_contiguous : forall (entries : list entry) (x : nat), sorted entries -> (forall i : nat, 0 < i <= maxIndex entries -> exists e : entry, In e entries /\\ eIndex e = i) -> forall i : nat, x < i <= maxIndex entries -> exists e : entry, In e (findGtIndex entries x) /\\ eIndex e = i\ncontiguous_range_exact_lo = fun (xs : list entry) (lo : nat) => (forall i : nat, lo < i <= maxIndex xs -> exists e : entry, eIndex e = i /\\ In e xs) /\\ (forall e : entry, In e xs -> lo < eIndex e) : list entry -> nat -> Prop Arguments contiguous_range_exact_lo _%list_scope _%nat_scope\nindex_in_bounds : forall (e : entry) (es : list entry) (i : nat), sorted es -> In e es -> i <> 0 -> i <= eIndex e -> 1 <= i <= maxIndex es\ncontiguous = fun (prevLogIndex : logIndex) (prevLogTerm : term) (leaderLog entries : list entry) => (prevLogIndex = 0 \\/ (exists e : entry, findAtIndex leaderLog prevLogIndex = Some e /\\ eTerm e = prevLogTerm)) /\\ (forall e : entry, In e leaderLog -> eIndex e > prevLogIndex -> eIndex e <= maxIndex entries -> In e entries) /\\ (forall e e' : entry, eIndex e = eIndex e' -> eTerm e = eTerm e' -> In e entries -> In e' leaderLog -> e = e') : logIndex -> term -> list entry -> list entry -> Prop Arguments contiguous _ _ (_ _)%list_scope\nincoming_entries_in_log : forall (es log : list entry) (x : entry) (i : logIndex), In x es -> uniqueIndices log -> exists y : entry, eIndex x = eIndex y /\\ eTerm x = eTerm y /\\ In y (es ++ removeAfterIndex log i)\nremoveIncorrect_new_contiguous : forall (new current : list entry) (prev : nat) (e : entry), sorted current -> uniqueIndices current -> (forall e0 e' : entry, eIndex e0 = eIndex e' -> eTerm e0 = eTerm e' -> In e0 new -> In e' current -> e0 = e') -> contiguous_range_exact_lo current 0 -> contiguous_range_exact_lo new prev -> In e current -> eIndex e = prev -> contiguous_range_exact_lo (new ++ removeAfterIndex current prev) 0\nmaxIndex_non_empty : forall l : list entry, l <> [] -> exists e : entry, In e l /\\ maxIndex l = eIndex e /\\ maxTerm l = eTerm e\nmaxIndex_subset : forall xs ys : list entry, sorted xs -> sorted ys -> (forall x : entry, In x xs -> In x ys) -> maxIndex xs <= maxIndex ys\nentries_match' = fun entries entries' : list entry => forall e e' e'' : entry, eIndex e = eIndex e' -> eTerm e = eTerm e' -> In e entries -> In e' entries' -> eIndex e'' <= eIndex e -> In e'' entries -> In e'' entries' : list entry -> list entry -> Prop Arguments entries_match' (_ _)%list_scope\nsorted_cons : forall (xs : list entry) (a : entry), sorted xs -> (forall a' : entry, In a' xs -> eIndex a > eIndex a' /\\ eTerm a >= eTerm a') -> sorted (a :: xs)\nfindAtIndex_uniq_equal : forall (e e' : entry) (es : list entry), findAtIndex es (eIndex e) = Some e' -> In e es -> uniqueIndices es -> e = e'\nprefix_within_term = fun (orig_base_params : BaseParams) (raft_params : RaftParams orig_base_params) (l1 l2 : list entry) => forall e e' : entry, eTerm e = eTerm e' -> eIndex e <= eIndex e' -> In e l1 -> In e' l2 -> In e l2 : forall (orig_base_params : BaseParams) (raft_params : RaftParams orig_base_params), list entry -> list entry -> Prop Arguments prefix_within_term {orig_base_params raft_params} (_ _)%list_scope\nremoveAfterIndex_covariant : forall (xs ys : list entry) (i : logIndex) (x : entry), sorted xs -> sorted ys -> In x (removeAfterIndex xs i) -> (forall x0 : entry, In x0 xs -> In x0 ys) -> In x (removeAfterIndex ys i)\nrachet : forall (x x' : entry) (xs ys : list entry), eIndex x = eIndex x' -> In x xs -> In x' ys -> In x' xs -> uniqueIndices xs -> In x ys\nmaxIndex_exists_in : forall xs : list entry, maxIndex xs >= 1 -> exists x : entry, eIndex x = maxIndex xs /\\ In x xs\nfindAtIndex_intro : forall (l : list entry) (i : logIndex) (e : entry), sorted l -> In e l -> eIndex e = i -> uniqueIndices l -> findAtIndex l i = Some e\nmaxIndex_removeAfterIndex : forall (l : list entry) (i : logIndex) (e : entry), sorted l -> In e l -> eIndex e = i -> maxIndex (removeAfterIndex l i) = i\nfindAtIndex_elim : forall (l : list entry) (i : logIndex) (e : entry), findAtIndex l i = Some e -> i = eIndex e /\\ In e l\nfindAtIndex_intro' : forall (l : list entry) (i : logIndex) (e : entry), sorted l -> In e l -> eIndex e = i -> findAtIndex l i = Some e\nterms_and_indices_from_one = fun (orig_base_params : BaseParams) (raft_params : RaftParams orig_base_params) (l : list entry) => forall e : entry, In e l -> eTerm e >= 1 /\\ eIndex e >= 1 : forall (orig_base_params : BaseParams) (raft_params : RaftParams orig_base_params), list entry -> Prop Arguments terms_and_indices_from_one {orig_base_params raft_params} _%list_scope\nuniqueIndices_elim_eq : forall (xs : list entry) (x y : entry), uniqueIndices xs -> In x xs -> In y xs -> eIndex x = eIndex y -> x = y\nfindGtIndex_necessary : forall (entries : list entry) (e : entry) (x : logIndex), In e (findGtIndex entries x) -> In e entries /\\ eIndex e > x\nfindGtIndex_sufficient : forall (e : entry) (entries : list entry) (x : nat), sorted entries -> In e entries -> eIndex e > x -> In e (findGtIndex entries x)\nS_maxIndex_not_in : forall (l : list entry) (e : entry), sorted l -> eIndex e = S (maxIndex l) -> ~ In e l\nfindAtIndex_None : forall (xs : list entry) (i : logIndex) (x : entry), sorted xs -> findAtIndex xs i = None -> In x xs -> eIndex x <> i"}, {"role": "assistant", "content": "```coq\nintros es ys plt.\nintro Hsorted.\nintro Hunique.\nintros Hindices_eq.\nintros HmaxIndex.\nintros Hes_pos.\nintros Hys_pos.\n\nassert (Hcontiguous : contiguous 0 0 es ys).\n{\n  split.\n  - left; reflexivity.\n  - intros e Hine Hindex_le_max.\n    apply HmaxIndex.\n    assumption.\n  - intros e e' Heq_index Heq_term Hine Hine'.\n    apply Hindices_eq with (e1 := e) (e2 := e'); try assumption.\n    split; assumption.\n}\n\nassert (Hentries_match : entries_match es ys).\n{\n  intros e e' e'' Heq_index Heq_term Hine Hine' Heq_index''.\n  apply Hindices_eq with (e1 := e) (e2 := e'); try assumption.\n  split; assumption.\n}\n\nassert (Hprefix_within_term : prefix_within_term es ys).\n{\n  intros e e' Heq_term Heq_index Hine Hine'.\n  apply Hentries_match with (e'' := e'); try assumption.\n  left; reflexivity.\n}\n\nassert (Hrachet : forall x x' : entry, eIndex x = eIndex x' -> In x es -> In x' ys -> In x' es).\n{\n  intros x x' Heq_index Hine Hine'.\n  apply Hindices_eq with (e1 := x) (e2 := x'); try assumption.\n  split; assumption.\n}\n\nassert (HmaxIndex_es : maxIndex es >= 1).\n{\n  apply maxIndex_non_empty.\n  intro Hnil; discriminate.\n}\n\nassert (HmaxIndex_ys : maxIndex ys >= 1).\n{\n  apply maxIndex_non_empty.\n  intro Hnil; discriminate.\n}\n\nassert (Hexists_es : exists x : entry, eIndex x = maxIndex es /\\ In x es).\n{\n  apply maxIndex_exists_in.\n  assumption.\n}\n\nassert (Hexists_ys : exists y : entry, eIndex y = maxIndex ys /\\ In y ys).\n{\n  apply maxIndex_exists_in.\n  assumption.\n}\n\ndestruct Hexists_es as [x Hexists_es].\ndestruct Hexists_ys as [y Hexists_ys].\n\nassert (Hx_in_ys : In x ys).\n{\n  apply Hprefix_within_term with (e := x) (e' := y); try assumption.\n  left; reflexivity.\n}\n\nassert (Hy_in_es : In y es).\n{\n  apply Hrachet with (x := x) (x' := y); try assumption.\n  split; assumption.\n}\n\nassert (HmaxIndex_eq : maxIndex es = maxIndex ys).\n{\n  apply maxIndex_subset with (xs := es) (ys := ys); try assumption.\n  intros e Hine.\n  apply Hprefix_within_term with (e := e) (e' := y); try assumption.\n  left; reflexivity.\n}\n\nrewrite <- HmaxIndex_eq in Hexists_es.\nrewrite <- HmaxIndex_eq in Hexists_ys.\n\nassert (Hx_eq_y : x = y).\n{\n  apply uniqueIndices_elim_eq with (xs := ys) (x := x) (y := y); try assumption.\n  split; assumption.\n}\n\nrewrite <- Hx_eq_y in *.\n\nclear Hexists_es Hexists_ys Hx_in_ys Hy_in_es HmaxIndex_eq.\n\nassert (HfindGtIndex : forall i : nat, 0 < i <= maxIndex es -> exists e : entry, In e (findGtIndex es i) /\\ eIndex e = i).\n{\n  intros i Hi.\n  apply findGtIndex_contiguous with (entries := es) (x := i); try assumption.\n  apply HmaxIndex.\n  assumption.\n}\n\nassert (HfindGtIndex' : forall i : nat, 0 < i <= maxIndex es -> exists e : entry, In e es /\\ eIndex e = i).\n{\n  intros i Hi.\n  apply HfindGtIndex with (i := i); try assumption.\n  intros e [Hine Heq_index].\n  exists e; split; assumption.\n}\n\nclear HfindGtIndex.\n\nassert (Hcontiguous_range_exact_lo : contiguous_range_exact_lo es 0).\n{\n  split.\n  - intros i Hi.\n    apply HfindGtIndex' with (i := i); try assumption.\n  - intros e Hine.\n    apply Hes_pos.\n    assumption.\n}\n\nassert (HremoveIncorrect_new_contiguous : contiguous_range_exact_lo (ys ++ removeAfterIndex es (maxIndex es)) 0).\n{\n  apply removeIncorrect_new_contiguous with (new := ys) (current := es) (prev := maxIndex es) (e :="}], "original": "intros es ys plt. intro Hsorted. intro Hunique. intros Hindices_eq. intros HmaxIndex. intros Hes_pos. intros Hys_pos. assert (Hcontiguous : contiguous 0 0 es ys). { split. - left; reflexivity. - intros e Hine Hindex_le_max. apply HmaxIndex. auto. - intros e e' Heq_index Heq_term Hine Hine'. apply Hindices_eq with (e1 := e) (e2 := e'); try auto. split; auto. } assert (Hentries_match : entries_match es ys). { intros e e' e'' Heq_index Heq_term Hine Hine' Heq_index''. apply Hindices_eq with (e1 := e) (e2 := e'); try auto. split; auto. } assert (Hprefix_within_term : prefix_within_term es ys). { intros e e' Heq_term Heq_index Hine Hine'. apply Hentries_match with (e'' := e'); try auto. left; reflexivity. } assert (Hrachet : forall x x' : entry, eIndex x = eIndex x' -> In x es -> In x' ys -> In x' es). { intros x x' Heq_index Hine Hine'. apply Hindices_eq with (e1 := x) (e2 := x'); try auto. split; auto. } assert (HmaxIndex_es : maxIndex es >= 1). { apply maxIndex_non_empty. intro Hnil; discriminate. } assert (HmaxIndex_ys : maxIndex ys >= 1). { apply maxIndex_non_empty. intro Hnil; discriminate. } assert (Hexists_es : exists x : entry, eIndex x = maxIndex es /\\ In x es). { apply maxIndex_exists_in. auto. } assert (Hexists_ys : exists y : entry, eIndex y = maxIndex ys /\\ In y ys). { apply maxIndex_exists_in. auto. } destruct Hexists_es as [x Hexists_es]. destruct Hexists_ys as [y Hexists_ys]. assert (Hx_in_ys : In x ys). { apply Hprefix_within_term with (e := x) (e' := y); try auto. left; reflexivity. } assert (Hy_in_es : In y es). { apply Hrachet with (x := x) (x' := y); try auto. split; auto. } assert (HmaxIndex_eq : maxIndex es = maxIndex ys). { apply maxIndex_subset with (xs := es) (ys := ys); try auto. intros e Hine. apply Hprefix_within_term with (e := e) (e' := y); try auto. left; reflexivity. } rewrite <- HmaxIndex_eq in Hexists_es. rewrite <- HmaxIndex_eq in Hexists_ys. assert (Hx_eq_y : x = y). { apply uniqueIndices_elim_eq with (xs := ys) (x := x) (y := y); try auto. split; auto. } rewrite <- Hx_eq_y in *. clear Hexists_es Hexists_ys Hx_in_ys Hy_in_es HmaxIndex_eq. assert (HfindGtIndex : forall i : nat, 0 < i <= maxIndex es -> exists e : entry, In e (findGtIndex es i) /\\ eIndex e = i). { intros i Hi. apply findGtIndex_contiguous with (entries := es) (x := i); try auto. apply HmaxIndex. auto. } assert (HfindGtIndex' : forall i : nat, 0 < i <= maxIndex es -> exists e : entry, In e es /\\ eIndex e = i). { intros i Hi. apply HfindGtIndex with (i := i); try auto. intros e [Hine Heq_index]. exists e; split; auto. } clear HfindGtIndex. assert (Hcontiguous_range_exact_lo : contiguous_range_exact_lo es 0). { split. - intros i Hi. apply HfindGtIndex' with (i := i); try auto. - intros e Hine. apply Hes_pos. auto. } assert (HremoveIncorrect_new_contiguous : contiguous_range_exact_lo (ys ++ removeAfterIndex es (maxIndex es)) 0). {", "succ": false}]