[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": ["intros net.", "apply raft_net_invariant with (P := candidate_term_gt_log).", "-"], "tactic": "apply raft_net_invariant_init.", "exn": "In environment orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params tsi : term_sanity_interface net : network Unable to unify \"Prop\" with \"raft_net_invariant_init candidate_term_gt_log\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros net.", "apply raft_net_invariant with (P := candidate_term_gt_log).", "-", "qsimpl time: 1 use: raft_net_invariant_init."], "tactic": "-", "exn": "Wrong bullet -: Current bullet - is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["intros net.", "apply raft_net_invariant with (P := candidate_term_gt_log).", "-", "qsimpl time: 1 use: raft_net_invariant_init.", "shelve.", "-"], "tactic": "apply raft_net_invariant_client_request.", "exn": "In environment orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params tsi : term_sanity_interface net : network Unable to unify \"Prop\" with \"raft_net_invariant_client_request candidate_term_gt_log\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros net.", "apply raft_net_invariant with (P := candidate_term_gt_log).", "-", "qsimpl time: 1 use: raft_net_invariant_init.", "shelve.", "-", "qsimpl time: 1 use: raft_net_invariant_init,raft_net_invariant_client_request."], "tactic": "-", "exn": "Wrong bullet -: Current bullet - is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["intros net.", "apply raft_net_invariant with (P := candidate_term_gt_log).", "-", "qsimpl time: 1 use: raft_net_invariant_init.", "shelve.", "-", "qsimpl time: 1 use: raft_net_invariant_init,raft_net_invariant_client_request.", "shelve.", "-"], "tactic": "apply raft_net_invariant_timeout.", "exn": "In environment orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params tsi : term_sanity_interface net : network Unable to unify \"Prop\" with \"raft_net_invariant_timeout candidate_term_gt_log\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros net.", "apply raft_net_invariant with (P := candidate_term_gt_log).", "-", "qsimpl time: 1 use: raft_net_invariant_init.", "shelve.", "-", "qsimpl time: 1 use: raft_net_invariant_init,raft_net_invariant_client_request.", "shelve.", "-", "qsimpl time: 1 use: raft_net_invariant_init,raft_net_invariant_client_request,raft_net_invariant_timeout."], "tactic": "-", "exn": "Wrong bullet -: Current bullet - is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["intros net.", "apply raft_net_invariant with (P := candidate_term_gt_log).", "-", "qsimpl time: 1 use: raft_net_invariant_init.", "shelve.", "-", "qsimpl time: 1 use: raft_net_invariant_init,raft_net_invariant_client_request.", "shelve.", "-", "qsimpl time: 1 use: raft_net_invariant_init,raft_net_invariant_client_request,raft_net_invariant_timeout.", "shelve.", "-"], "tactic": "apply raft_net_invariant_append_entries.", "exn": "In environment orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params tsi : term_sanity_interface net : network Unable to unify \"Prop\" with \"raft_net_invariant_append_entries candidate_term_gt_log\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros net.", "apply raft_net_invariant with (P := candidate_term_gt_log).", "-", "qsimpl time: 1 use: raft_net_invariant_init.", "shelve.", "-", "qsimpl time: 1 use: raft_net_invariant_init,raft_net_invariant_client_request.", "shelve.", "-", "qsimpl time: 1 use: raft_net_invariant_init,raft_net_invariant_client_request,raft_net_invariant_timeout.", "shelve.", "-", "qsimpl time: 1 use: raft_net_invariant_init,raft_net_invariant_client_request,raft_net_invariant_append_entries,raft_net_invariant_timeout."], "tactic": "-", "exn": "Wrong bullet -: Current bullet - is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["intros net.", "apply raft_net_invariant with (P := candidate_term_gt_log).", "-", "qsimpl time: 1 use: raft_net_invariant_init.", "shelve.", "-", "qsimpl time: 1 use: raft_net_invariant_init,raft_net_invariant_client_request.", "shelve.", "-", "qsimpl time: 1 use: raft_net_invariant_init,raft_net_invariant_client_request,raft_net_invariant_timeout.", "shelve.", "-", "qsimpl time: 1 use: raft_net_invariant_init,raft_net_invariant_client_request,raft_net_invariant_append_entries,raft_net_invariant_timeout.", "shelve.", "-"], "tactic": "apply raft_net_invariant_append_entries_reply.", "exn": "In environment orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params tsi : term_sanity_interface net : network Unable to unify \"Prop\" with \"raft_net_invariant_append_entries_reply candidate_term_gt_log\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros net.", "apply raft_net_invariant with (P := candidate_term_gt_log).", "-", "qsimpl time: 1 use: raft_net_invariant_init.", "shelve.", "-", "qsimpl time: 1 use: raft_net_invariant_init,raft_net_invariant_client_request.", "shelve.", "-", "qsimpl time: 1 use: raft_net_invariant_init,raft_net_invariant_client_request,raft_net_invariant_timeout.", "shelve.", "-", "qsimpl time: 1 use: raft_net_invariant_init,raft_net_invariant_client_request,raft_net_invariant_append_entries,raft_net_invariant_timeout.", "shelve.", "-", "qsimpl time: 1 use: raft_net_invariant_client_request,raft_net_invariant_append_entries,raft_net_invariant_append_entries_reply,raft_net_invariant_init,raft_net_invariant_timeout."], "tactic": "-", "exn": "Wrong bullet -: Current bullet - is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["intros net.", "apply raft_net_invariant with (P := candidate_term_gt_log).", "-", "qsimpl time: 1 use: raft_net_invariant_init.", "shelve.", "-", "qsimpl time: 1 use: raft_net_invariant_init,raft_net_invariant_client_request.", "shelve.", "-", "qsimpl time: 1 use: raft_net_invariant_init,raft_net_invariant_client_request,raft_net_invariant_timeout.", "shelve.", "-", "qsimpl time: 1 use: raft_net_invariant_init,raft_net_invariant_client_request,raft_net_invariant_append_entries,raft_net_invariant_timeout.", "shelve.", "-", "qsimpl time: 1 use: raft_net_invariant_client_request,raft_net_invariant_append_entries,raft_net_invariant_append_entries_reply,raft_net_invariant_init,raft_net_invariant_timeout.", "shelve.", "-"], "tactic": "apply raft_net_invariant_request_vote.", "exn": "In environment orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params tsi : term_sanity_interface net : network Unable to unify \"Prop\" with \"raft_net_invariant_request_vote candidate_term_gt_log\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros net.", "apply raft_net_invariant with (P := candidate_term_gt_log).", "-", "qsimpl time: 1 use: raft_net_invariant_init.", "shelve.", "-", "qsimpl time: 1 use: raft_net_invariant_init,raft_net_invariant_client_request.", "shelve.", "-", "qsimpl time: 1 use: raft_net_invariant_init,raft_net_invariant_client_request,raft_net_invariant_timeout.", "shelve.", "-", "qsimpl time: 1 use: raft_net_invariant_init,raft_net_invariant_client_request,raft_net_invariant_append_entries,raft_net_invariant_timeout.", "shelve.", "-", "qsimpl time: 1 use: raft_net_invariant_client_request,raft_net_invariant_append_entries,raft_net_invariant_append_entries_reply,raft_net_invariant_init,raft_net_invariant_timeout.", "shelve.", "-"], "tactic": "-", "exn": "Wrong bullet -: Current bullet - is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["intros net.", "apply raft_net_invariant with (P := candidate_term_gt_log).", "-", "qsimpl time: 1 use: raft_net_invariant_init.", "shelve.", "-", "qsimpl time: 1 use: raft_net_invariant_init,raft_net_invariant_client_request.", "shelve.", "-", "qsimpl time: 1 use: raft_net_invariant_init,raft_net_invariant_client_request,raft_net_invariant_timeout.", "shelve.", "-", "qsimpl time: 1 use: raft_net_invariant_init,raft_net_invariant_client_request,raft_net_invariant_append_entries,raft_net_invariant_timeout.", "shelve.", "-", "qsimpl time: 1 use: raft_net_invariant_client_request,raft_net_invariant_append_entries,raft_net_invariant_append_entries_reply,raft_net_invariant_init,raft_net_invariant_timeout.", "shelve.", "-", "shelve.", "-"], "tactic": "apply raft_net_invariant_request_vote_reply.", "exn": "In environment orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params tsi : term_sanity_interface net : network Unable to unify \"Prop\" with \"raft_net_invariant_request_vote_reply candidate_term_gt_log\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros net.", "apply raft_net_invariant with (P := candidate_term_gt_log).", "-", "qsimpl time: 1 use: raft_net_invariant_init.", "shelve.", "-", "qsimpl time: 1 use: raft_net_invariant_init,raft_net_invariant_client_request.", "shelve.", "-", "qsimpl time: 1 use: raft_net_invariant_init,raft_net_invariant_client_request,raft_net_invariant_timeout.", "shelve.", "-", "qsimpl time: 1 use: raft_net_invariant_init,raft_net_invariant_client_request,raft_net_invariant_append_entries,raft_net_invariant_timeout.", "shelve.", "-", "qsimpl time: 1 use: raft_net_invariant_client_request,raft_net_invariant_append_entries,raft_net_invariant_append_entries_reply,raft_net_invariant_init,raft_net_invariant_timeout.", "shelve.", "-", "shelve.", "-"], "tactic": "qsimpl time: 1 use: raft_net_invariant_request_vote_reply,raft_net_invariant_client_request,raft_net_invariant_append_entries,qsimpl,raft_net_invariant_append_entries_reply,raft_net_invariant_init,raft_net_invariant_timeout,raft_net_invariant_request_vote.", "exn": "The reference qsimpl was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros net.", "apply raft_net_invariant with (P := candidate_term_gt_log).", "-", "qsimpl time: 1 use: raft_net_invariant_init.", "shelve.", "-", "qsimpl time: 1 use: raft_net_invariant_init,raft_net_invariant_client_request.", "shelve.", "-", "qsimpl time: 1 use: raft_net_invariant_init,raft_net_invariant_client_request,raft_net_invariant_timeout.", "shelve.", "-", "qsimpl time: 1 use: raft_net_invariant_init,raft_net_invariant_client_request,raft_net_invariant_append_entries,raft_net_invariant_timeout.", "shelve.", "-", "qsimpl time: 1 use: raft_net_invariant_client_request,raft_net_invariant_append_entries,raft_net_invariant_append_entries_reply,raft_net_invariant_init,raft_net_invariant_timeout.", "shelve.", "-", "shelve.", "-"], "tactic": "-", "exn": "Wrong bullet -: Current bullet - is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["intros net.", "apply raft_net_invariant with (P := candidate_term_gt_log).", "-", "qsimpl time: 1 use: raft_net_invariant_init.", "shelve.", "-", "qsimpl time: 1 use: raft_net_invariant_init,raft_net_invariant_client_request.", "shelve.", "-", "qsimpl time: 1 use: raft_net_invariant_init,raft_net_invariant_client_request,raft_net_invariant_timeout.", "shelve.", "-", "qsimpl time: 1 use: raft_net_invariant_init,raft_net_invariant_client_request,raft_net_invariant_append_entries,raft_net_invariant_timeout.", "shelve.", "-", "qsimpl time: 1 use: raft_net_invariant_client_request,raft_net_invariant_append_entries,raft_net_invariant_append_entries_reply,raft_net_invariant_init,raft_net_invariant_timeout.", "shelve.", "-", "shelve.", "-", "shelve.", "-"], "tactic": "apply raft_net_invariant_do_leader.", "exn": "In environment orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params tsi : term_sanity_interface net : network Unable to unify \"Prop\" with \"raft_net_invariant_do_leader candidate_term_gt_log\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros net.", "apply raft_net_invariant with (P := candidate_term_gt_log).", "-", "qsimpl time: 1 use: raft_net_invariant_init.", "shelve.", "-", "qsimpl time: 1 use: raft_net_invariant_init,raft_net_invariant_client_request.", "shelve.", "-", "qsimpl time: 1 use: raft_net_invariant_init,raft_net_invariant_client_request,raft_net_invariant_timeout.", "shelve.", "-", "qsimpl time: 1 use: raft_net_invariant_init,raft_net_invariant_client_request,raft_net_invariant_append_entries,raft_net_invariant_timeout.", "shelve.", "-", "qsimpl time: 1 use: raft_net_invariant_client_request,raft_net_invariant_append_entries,raft_net_invariant_append_entries_reply,raft_net_invariant_init,raft_net_invariant_timeout.", "shelve.", "-", "shelve.", "-", "shelve.", "-"], "tactic": "qsimpl time: 1 use: raft_net_invariant_request_vote_reply,raft_net_invariant_client_request,raft_net_invariant_append_entries,qsimpl,raft_net_invariant_append_entries_reply,raft_net_invariant_init,raft_net_invariant_do_leader,raft_net_invariant_timeout,raft_net_invariant_request_vote.", "exn": "The reference qsimpl was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros net.", "apply raft_net_invariant with (P := candidate_term_gt_log).", "-", "qsimpl time: 1 use: raft_net_invariant_init.", "shelve.", "-", "qsimpl time: 1 use: raft_net_invariant_init,raft_net_invariant_client_request.", "shelve.", "-", "qsimpl time: 1 use: raft_net_invariant_init,raft_net_invariant_client_request,raft_net_invariant_timeout.", "shelve.", "-", "qsimpl time: 1 use: raft_net_invariant_init,raft_net_invariant_client_request,raft_net_invariant_append_entries,raft_net_invariant_timeout.", "shelve.", "-", "qsimpl time: 1 use: raft_net_invariant_client_request,raft_net_invariant_append_entries,raft_net_invariant_append_entries_reply,raft_net_invariant_init,raft_net_invariant_timeout.", "shelve.", "-", "shelve.", "-", "shelve.", "-"], "tactic": "-", "exn": "Wrong bullet -: Current bullet - is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["intros net.", "apply raft_net_invariant with (P := candidate_term_gt_log).", "-", "qsimpl time: 1 use: raft_net_invariant_init.", "shelve.", "-", "qsimpl time: 1 use: raft_net_invariant_init,raft_net_invariant_client_request.", "shelve.", "-", "qsimpl time: 1 use: raft_net_invariant_init,raft_net_invariant_client_request,raft_net_invariant_timeout.", "shelve.", "-", "qsimpl time: 1 use: raft_net_invariant_init,raft_net_invariant_client_request,raft_net_invariant_append_entries,raft_net_invariant_timeout.", "shelve.", "-", "qsimpl time: 1 use: raft_net_invariant_client_request,raft_net_invariant_append_entries,raft_net_invariant_append_entries_reply,raft_net_invariant_init,raft_net_invariant_timeout.", "shelve.", "-", "shelve.", "-", "shelve.", "-", "shelve.", "-"], "tactic": "apply raft_net_invariant_do_generic_server.", "exn": "In environment orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params tsi : term_sanity_interface net : network Unable to unify \"Prop\" with \"raft_net_invariant_do_generic_server candidate_term_gt_log\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros net.", "apply raft_net_invariant with (P := candidate_term_gt_log).", "-", "qsimpl time: 1 use: raft_net_invariant_init.", "shelve.", "-", "qsimpl time: 1 use: raft_net_invariant_init,raft_net_invariant_client_request.", "shelve.", "-", "qsimpl time: 1 use: raft_net_invariant_init,raft_net_invariant_client_request,raft_net_invariant_timeout.", "shelve.", "-", "qsimpl time: 1 use: raft_net_invariant_init,raft_net_invariant_client_request,raft_net_invariant_append_entries,raft_net_invariant_timeout.", "shelve.", "-", "qsimpl time: 1 use: raft_net_invariant_client_request,raft_net_invariant_append_entries,raft_net_invariant_append_entries_reply,raft_net_invariant_init,raft_net_invariant_timeout.", "shelve.", "-", "shelve.", "-", "shelve.", "-", "shelve.", "-"], "tactic": "qsimpl time: 1 use: raft_net_invariant_request_vote_reply,raft_net_invariant_client_request,raft_net_invariant_append_entries,qsimpl,raft_net_invariant_append_entries_reply,raft_net_invariant_init,raft_net_invariant_do_leader,raft_net_invariant_timeout,raft_net_invariant_do_generic_server,raft_net_invariant_request_vote.", "exn": "The reference qsimpl was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros net.", "apply raft_net_invariant with (P := candidate_term_gt_log).", "-", "qsimpl time: 1 use: raft_net_invariant_init.", "shelve.", "-", "qsimpl time: 1 use: raft_net_invariant_init,raft_net_invariant_client_request.", "shelve.", "-", "qsimpl time: 1 use: raft_net_invariant_init,raft_net_invariant_client_request,raft_net_invariant_timeout.", "shelve.", "-", "qsimpl time: 1 use: raft_net_invariant_init,raft_net_invariant_client_request,raft_net_invariant_append_entries,raft_net_invariant_timeout.", "shelve.", "-", "qsimpl time: 1 use: raft_net_invariant_client_request,raft_net_invariant_append_entries,raft_net_invariant_append_entries_reply,raft_net_invariant_init,raft_net_invariant_timeout.", "shelve.", "-", "shelve.", "-", "shelve.", "-", "shelve.", "-"], "tactic": "-", "exn": "Wrong bullet -: Current bullet - is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["intros net.", "apply raft_net_invariant with (P := candidate_term_gt_log).", "-", "qsimpl time: 1 use: raft_net_invariant_init.", "shelve.", "-", "qsimpl time: 1 use: raft_net_invariant_init,raft_net_invariant_client_request.", "shelve.", "-", "qsimpl time: 1 use: raft_net_invariant_init,raft_net_invariant_client_request,raft_net_invariant_timeout.", "shelve.", "-", "qsimpl time: 1 use: raft_net_invariant_init,raft_net_invariant_client_request,raft_net_invariant_append_entries,raft_net_invariant_timeout.", "shelve.", "-", "qsimpl time: 1 use: raft_net_invariant_client_request,raft_net_invariant_append_entries,raft_net_invariant_append_entries_reply,raft_net_invariant_init,raft_net_invariant_timeout.", "shelve.", "-", "shelve.", "-", "shelve.", "-", "shelve.", "-", "shelve.", "-"], "tactic": "apply raft_net_invariant_state_same_packet_subset.", "exn": "In environment orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params tsi : term_sanity_interface net : network Unable to unify \"Prop\" with \"raft_net_invariant_state_same_packet_subset candidate_term_gt_log\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros net.", "apply raft_net_invariant with (P := candidate_term_gt_log).", "-", "qsimpl time: 1 use: raft_net_invariant_init.", "shelve.", "-", "qsimpl time: 1 use: raft_net_invariant_init,raft_net_invariant_client_request.", "shelve.", "-", "qsimpl time: 1 use: raft_net_invariant_init,raft_net_invariant_client_request,raft_net_invariant_timeout.", "shelve.", "-", "qsimpl time: 1 use: raft_net_invariant_init,raft_net_invariant_client_request,raft_net_invariant_append_entries,raft_net_invariant_timeout.", "shelve.", "-", "qsimpl time: 1 use: raft_net_invariant_client_request,raft_net_invariant_append_entries,raft_net_invariant_append_entries_reply,raft_net_invariant_init,raft_net_invariant_timeout.", "shelve.", "-", "shelve.", "-", "shelve.", "-", "shelve.", "-", "shelve.", "-"], "tactic": "qsimpl time: 1 use: raft_net_invariant_request_vote_reply,raft_net_invariant_client_request,raft_net_invariant_append_entries,qsimpl,raft_net_invariant_append_entries_reply,raft_net_invariant_state_same_packet_subset,raft_net_invariant_init,raft_net_invariant_do_leader,raft_net_invariant_timeout,raft_net_invariant_do_generic_server,raft_net_invariant_request_vote.", "exn": "The reference qsimpl was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros net.", "apply raft_net_invariant with (P := candidate_term_gt_log).", "-", "qsimpl time: 1 use: raft_net_invariant_init.", "shelve.", "-", "qsimpl time: 1 use: raft_net_invariant_init,raft_net_invariant_client_request.", "shelve.", "-", "qsimpl time: 1 use: raft_net_invariant_init,raft_net_invariant_client_request,raft_net_invariant_timeout.", "shelve.", "-", "qsimpl time: 1 use: raft_net_invariant_init,raft_net_invariant_client_request,raft_net_invariant_append_entries,raft_net_invariant_timeout.", "shelve.", "-", "qsimpl time: 1 use: raft_net_invariant_client_request,raft_net_invariant_append_entries,raft_net_invariant_append_entries_reply,raft_net_invariant_init,raft_net_invariant_timeout.", "shelve.", "-", "shelve.", "-", "shelve.", "-", "shelve.", "-", "shelve.", "-"], "tactic": "-", "exn": "Wrong bullet -: Current bullet - is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["intros net.", "apply raft_net_invariant with (P := candidate_term_gt_log).", "-", "qsimpl time: 1 use: raft_net_invariant_init.", "shelve.", "-", "qsimpl time: 1 use: raft_net_invariant_init,raft_net_invariant_client_request.", "shelve.", "-", "qsimpl time: 1 use: raft_net_invariant_init,raft_net_invariant_client_request,raft_net_invariant_timeout.", "shelve.", "-", "qsimpl time: 1 use: raft_net_invariant_init,raft_net_invariant_client_request,raft_net_invariant_append_entries,raft_net_invariant_timeout.", "shelve.", "-", "qsimpl time: 1 use: raft_net_invariant_client_request,raft_net_invariant_append_entries,raft_net_invariant_append_entries_reply,raft_net_invariant_init,raft_net_invariant_timeout.", "shelve.", "-", "shelve.", "-", "shelve.", "-", "shelve.", "-", "shelve.", "-", "shelve.", "-"], "tactic": "apply raft_net_invariant_reboot.", "exn": "In environment orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params tsi : term_sanity_interface net : network Unable to unify \"Prop\" with \"raft_net_invariant_reboot candidate_term_gt_log\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros net.", "apply raft_net_invariant with (P := candidate_term_gt_log).", "-", "qsimpl time: 1 use: raft_net_invariant_init.", "shelve.", "-", "qsimpl time: 1 use: raft_net_invariant_init,raft_net_invariant_client_request.", "shelve.", "-", "qsimpl time: 1 use: raft_net_invariant_init,raft_net_invariant_client_request,raft_net_invariant_timeout.", "shelve.", "-", "qsimpl time: 1 use: raft_net_invariant_init,raft_net_invariant_client_request,raft_net_invariant_append_entries,raft_net_invariant_timeout.", "shelve.", "-", "qsimpl time: 1 use: raft_net_invariant_client_request,raft_net_invariant_append_entries,raft_net_invariant_append_entries_reply,raft_net_invariant_init,raft_net_invariant_timeout.", "shelve.", "-", "shelve.", "-", "shelve.", "-", "shelve.", "-", "shelve.", "-", "shelve.", "-"], "tactic": "qsimpl time: 1 use: raft_net_invariant_request_vote_reply,raft_net_invariant_client_request,raft_net_invariant_append_entries,qsimpl,raft_net_invariant_append_entries_reply,raft_net_invariant_state_same_packet_subset,raft_net_invariant_init,raft_net_invariant_do_leader,raft_net_invariant_timeout,raft_net_invariant_reboot,raft_net_invariant_do_generic_server,raft_net_invariant_request_vote.", "exn": "The reference qsimpl was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros net.", "apply raft_net_invariant with (P := candidate_term_gt_log).", "-", "qsimpl time: 1 use: raft_net_invariant_init.", "shelve.", "-", "qsimpl time: 1 use: raft_net_invariant_init,raft_net_invariant_client_request.", "shelve.", "-", "qsimpl time: 1 use: raft_net_invariant_init,raft_net_invariant_client_request,raft_net_invariant_timeout.", "shelve.", "-", "qsimpl time: 1 use: raft_net_invariant_init,raft_net_invariant_client_request,raft_net_invariant_append_entries,raft_net_invariant_timeout.", "shelve.", "-", "qsimpl time: 1 use: raft_net_invariant_client_request,raft_net_invariant_append_entries,raft_net_invariant_append_entries_reply,raft_net_invariant_init,raft_net_invariant_timeout.", "shelve.", "-", "shelve.", "-", "shelve.", "-", "shelve.", "-", "shelve.", "-", "shelve.", "-"], "tactic": "-", "exn": "Wrong bullet -: Current bullet - is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["intros net.", "apply raft_net_invariant with (P := candidate_term_gt_log).", "-", "qsimpl time: 1 use: raft_net_invariant_init.", "shelve.", "-", "qsimpl time: 1 use: raft_net_invariant_init,raft_net_invariant_client_request.", "shelve.", "-", "qsimpl time: 1 use: raft_net_invariant_init,raft_net_invariant_client_request,raft_net_invariant_timeout.", "shelve.", "-", "qsimpl time: 1 use: raft_net_invariant_init,raft_net_invariant_client_request,raft_net_invariant_append_entries,raft_net_invariant_timeout.", "shelve.", "-", "qsimpl time: 1 use: raft_net_invariant_client_request,raft_net_invariant_append_entries,raft_net_invariant_append_entries_reply,raft_net_invariant_init,raft_net_invariant_timeout.", "shelve.", "-", "shelve.", "-", "shelve.", "-", "shelve.", "-", "shelve.", "-", "shelve.", "-", "shelve."], "tactic": "-", "exn": "Wrong bullet -: No more subgoals.", "type": "no_more_subgoals", "handled": true}]}, "chat": [{"role": "user", "content": "I will give you a Coq proof state, including both hypotheses and a specific goal and your need to prove it. Your response should be a singular code block of Coq proof starting with \"```coq\n\", ending with \"Qed.```\", without any additional explanation or commentary. Follow to these guidelines:\nIntroduce variables using unique names to avoid any conflicts.\nKeep each command distinct and separated, avoid concatenations like ';' or '[cmd|cmd]'.\nOrganize your proof with bullets like '-', '+', and '*' instead of braces ({, }). Shift to their double symbols like '--' and '++', when necessary.\nEffectively use given premises, follow the syntax and structure demonstrated in the examples provided.\n\nExample 1:\n\nHypotheses:\nn, m: nat\nIHn: m + n = n + m\n\nGoal:\nm + S n = S n + m\n\nProof:\n```coq\nsimpl. rewrite <- IHn. auto.\nQed.```\n\nExample 2:\nHypotheses:\n\nGoal:\nforall n m : nat, m + n = n + m\n\n```coq\nintros n m. induction n.\n- simpl. auto.\n- simpl. rewrite <- IHn. auto.\nQed.```\n\nSolve This Proof State:\n\nHypotheses:\norig_base_params: BaseParams\none_node_params: OneNodeParams orig_base_params\nraft_params: RaftParams orig_base_params\ntsi: term_sanity_interface\n\nGoal:\nforall net : network, raft_intermediate_reachable net -> candidate_term_gt_log net\n\nPremises:\ncandidate_term_gt_log = fun (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params) (net : network) => forall h : name, type (nwState net h) = Candidate -> forall e : entry, In e (log (nwState net h)) -> currentTerm (nwState net h) > eTerm e : forall (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params), network -> Prop Arguments candidate_term_gt_log {orig_base_params one_node_params raft_params}\nRecord OneNodeParams (P : BaseParams) : Type := Build_OneNodeParams { init : data; handler : input -> data -> output * data } Arguments Build_OneNodeParams _ _ _%function_scope\nRecord RaftParams (orig_base_params : BaseParams) : Type := Build_RaftParams { N : nat; input_eq_dec : forall x y : input, {x = y} + {x <> y}; output_eq_dec : forall x y : output, {x = y} + {x <> y}; clientId : Type; clientId_eq_dec : forall x y : clientId, {x = y} + {x <> y} } Arguments Build_RaftParams _ _%nat_scope (_ _)%function_scope [clientId]%type_scope _%function_scope\nRecord network (P : BaseParams) (params : MultiParams P) : Type := mkNetwork { nwPackets : list packet; nwState : Net.name -> data } Arguments network {P params} Arguments mkNetwork {P params} _%list_scope _%function_scope\nInductive raft_intermediate_reachable (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params) : network -> Prop := RIR_init : raft_intermediate_reachable step_async_init | RIR_step_failure : forall (failed : list Net.name) (net : network) (failed' : list Net.name) (net' : network) (out : list (Net.name * (input + list output))), raft_intermediate_reachable net -> step_failure (failed, net) (failed', net') out -> raft_intermediate_reachable net' | RIR_handleInput : forall (net : network) (h : name) (inp : raft_input) (out : list raft_output) (d : raft_data) (l : list (name * msg)) (ps' : list packet) (st' : name -> data), raft_intermediate_re\ncandidate_term_gt_log_invariant : forall net : network, raft_intermediate_reachable net -> candidate_term_gt_log net where ?orig_base_params : [orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params tsi : term_sanity_interface |- BaseParams] ?one_node_params : [orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params tsi : term_sanity_interface |- OneNodeParams ?orig_base_params] ?raft_params : [orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params tsi : term_sanity_interface |- RaftParams ?orig_base_params] ?candidate_term_gt_log_interface : [orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params tsi : term_sanity_interface |- candidate_term_gt_log_interface]\nRecord term_sanity_interface (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params) : Prop := Build_term_sanity_interface { no_entries_past_current_term_invariant : forall net : network, raft_intermediate_reachable net -> no_entries_past_current_term net } Arguments term_sanity_interface {orig_base_params one_node_params raft_params} Arguments Build_term_sanity_interface {orig_base_params one_node_params raft_params} _%function_scope\nRecord candidate_term_gt_log_interface (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params) : Prop := Build_candidate_term_gt_log_interface { candidate_term_gt_log_invariant : forall net : network, raft_intermediate_reachable net -> candidate_term_gt_log net } Arguments candidate_term_gt_log_interface {orig_base_params one_node_params raft_params} Arguments Build_candidate_term_gt_log_interface {orig_base_params one_node_params raft_params} _%function_scope\nBuild_term_sanity_interface : (forall net : network, raft_intermediate_reachable net -> no_entries_past_current_term net) -> term_sanity_interface\nraft_net_invariant_state_same_packet_subset = fun (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params) (P : network -> Prop) => forall net net' : network, (forall h : Net.name, nwState net h = nwState net' h) -> (forall p : packet, In p (nwPackets net') -> In p (nwPackets net)) -> P net -> raft_intermediate_reachable net -> P net' : forall (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params), (network -> Prop) -> Prop Arguments raft_net_invariant_state_same_packet_subset {orig_base_params one_node_params raft_params} _%function_scope\nBuild_candidate_term_gt_log_interface : (forall net : network, raft_intermediate_reachable net -> candidate_term_gt_log net) -> candidate_term_gt_log_interface\nno_entries_past_current_term_invariant : forall net : network, raft_intermediate_reachable net -> no_entries_past_current_term net\nraft_net_invariant_reboot = fun (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params) (P : network -> Prop) => forall (net net' : network) (d : RaftState.raft_data term name entry logIndex serverType data clientId output) (h : Net.name) (d' : raft_data), reboot d = d' -> P net -> raft_intermediate_reachable net -> nwState net h = d -> (forall h' : Net.name, nwState net' h' = update name_eq_dec (nwState net) h d' h') -> nwPackets net = nwPackets net' ->...-> Prop Arguments raft_net_invariant_reboot {orig_base_params one_node_params raft_params} _%function_scope\nraft_net_invariant_timeout = fun (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params) (P : network -> Prop) => forall (net : network) (h : name) (st' : name -> data) (ps' : list packet) (out : list raft_output) (d : raft_data) (l : list (name * msg)), handleTimeout h (nwState net h) = (out, d, l) -> P net -> raft_intermediate_reachable net -> (forall h' : name, st' h' = update name_eq_dec (nwState net) h d h') -> (forall p' : packet, In p' ps' -> In p' (nwPackets net) \\/ In p' (send_packets h l)) ->...-> Prop Arguments raft_net_invariant_timeout {orig_base_params one_node_params raft_params} _%function_scope\nraft_net_invariant_request_vote_reply = fun (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params) (P : network -> Prop) => forall (xs : list packet) (p : packet) (ys : list packet) (net : network) (st' : name -> data) (ps' : list packet) (d : raft_data) (t : nat) (v : bool), handleRequestVoteReply (pDst p) (nwState net (pDst p)) (pSrc p) t v = d -> pBody p = RequestVoteReply t v -> P net -> raft_intermediate_reachable net -> nwPackets net = xs ++ p :: ys ->...-> Prop Arguments raft_net_invariant_request_vote_reply {orig_base_params one_node_params raft_params} _%function_scope\nraft_net_invariant_do_leader = fun (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params) (P : network -> Prop) => forall (net : network) (st' : name -> data) (ps' : list packet) (d : raft_data) (h : name) (os : list raft_output) (d' : raft_data) (ms : list (name * msg)), doLeader d h = (os, d', ms) -> P net -> raft_intermediate_reachable net -> nwState net h = d -> (forall h' : name, st' h' = update name_eq_dec (nwState net) h d' h') ->...-> Prop Arguments raft_net_invariant_do_leader {orig_base_params one_node_params raft_params} _%function_scope\nraft_net_invariant_do_generic_server = fun (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params) (P : network -> Prop) => forall (net : network) (st' : name -> data) (ps' : list packet) (d : raft_data) (os : list raft_output) (d' : raft_data) (ms : list (name * msg)) (h : name), doGenericServer h d = (os, d', ms) -> P net -> raft_intermediate_reachable net -> nwState net h = d -> (forall h' : name, st' h' = update name_eq_dec (nwState net) h d' h') ->...-> Prop Arguments raft_net_invariant_do_generic_server {orig_base_params one_node_params raft_params} _%function_scope\nraft_net_invariant_client_request = fun (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params) (P : network -> Prop) => forall (h : name) (net : network) (st' : name -> data) (ps' : list packet) (out : list raft_output) (d : raft_data) (l : list (name * msg)) (client : clientId) (id : nat) (c : input), handleClientRequest h (nwState net h) client id c = (out, d, l) -> P net -> raft_intermediate_reachable net -> (forall h' : name, st' h' = update name_eq_dec (nwState net) h d h') ->...-> Prop Arguments raft_net_invariant_client_request {orig_base_params one_node_params raft_params} _%function_scope\nraft_net_invariant_append_entries_reply = fun (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params) (P : network -> Prop) => forall (xs : list packet) (p : packet) (ys : list packet) (net : network) (st' : name -> data) (ps' : list packet) (d : raft_data) (m : list (name * msg)) (t : nat) (es : list entry) (res : bool), handleAppendEntriesReply (pDst p) (nwState net (pDst p)) (pSrc p) t es res = (d, m) -> pBody p = AppendEntriesReply t es res -> P net -> raft_intermediate_reachable net -> nwPackets net = xs ++ p :: ys ->...-> Prop Arguments raft_net_invariant_append_entries_reply {orig_base_params one_node_params raft_params} _%function_scope\nraft_net_invariant_request_vote = fun (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params) (P : network -> Prop) => forall (xs : list packet) (p : packet) (ys : list packet) (net : network) (st' : name -> data) (ps' : list packet) (d : raft_data) (m : msg) (t : nat) (cid : name) (lli llt : nat), handleRequestVote (pDst p) (nwState net (pDst p)) t (pSrc p) lli llt = (d, m) -> pBody p = RequestVote t cid lli llt -> P net -> raft_intermediate_reachable net -> nwPackets net = xs ++ p :: ys ->...-> Prop Arguments raft_net_invariant_request_vote {orig_base_params one_node_params raft_params} _%function_scope\nno_entries_past_current_term_host = fun (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params) (net : network) => forall (h : name) (e : entry), In e (log (nwState net h)) -> eTerm e <= currentTerm (nwState net h) : forall (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params), network -> Prop Arguments no_entries_past_current_term_host {orig_base_params one_node_params raft_params}\nCommonDefinitions.commit_recorded = fun (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params) (net : network) (h : Net.name) (e : entry) => In e (log (nwState net h)) /\\ (eIndex e <= lastApplied (nwState net h) \\/ eIndex e <= commitIndex (nwState net h)) : forall (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params), network -> Net.name -> entry -> Prop Arguments CommonDefinitions.commit_recorded {orig_base_params one_node_params raft_params}\nupdate : (forall x y : ?A, {x = y} + {x <> y}) -> (?A -> ?B) -> ?A -> ?B -> ?A -> ?B where ?A : [orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params tsi : term_sanity_interface |- Type] ?B : [orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params tsi : term_sanity_interface |- Type]\nraft_net_invariant_append_entries = fun (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params) (P : network -> Prop) => forall (xs : list packet) (p : packet) (ys : list packet) (net : network) (st' : name -> data) (ps' : list packet) (d : raft_data) (m : msg) (t : term) (n : name) (pli : logIndex) (plt : term) (es : list entry) (ci : logIndex), handleAppendEntries (pDst p) (nwState net (pDst p)) t n pli plt es ci = (d, m) -> pBody p = AppendEntries t n pli plt es ci -> P net -> raft_intermediate_reachable net ->...-> Prop Arguments raft_net_invariant_append_entries {orig_base_params one_node_params raft_params} _%function_scope\nno_entries_past_current_term = fun (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params) (net : network) => no_entries_past_current_term_host net /\\ no_entries_past_current_term_nw net : forall (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params), network -> Prop Arguments no_entries_past_current_term {orig_base_params one_node_params raft_params}\ncandidate_term_gt_log_state_same_packet_subset = fun (net net' : network) (H : forall h : name, nwState net h = nwState net' h) (_ : forall p : packet, In p (nwPackets net') -> In p (nwPackets net)) (H1 : forall h : name, type (nwState net h) = Candidate -> forall e : entry, In e (log (nwState net h)) -> currentTerm (nwState net h) > eTerm e) (_ : raft_intermediate_reachable net) (h : name) (H3 : type (nwState net' h) = Candidate) (e : entry) (H4 : In e (log (nwState net' h))) => let H5 : forall h0 : name, type (nwState net h0) = type (nwState net' h) -> forall e0 : entry, In e0 (log (nwState net h0)) -> current...\nraft_intermediate_reachable_sind : forall P : network -> SProp, P step_async_init -> (forall (failed : list Net.name) (net : network) (failed' : list Net.name) (net' : network) (out : list (Net.name * (input + list output))), raft_intermediate_reachable net -> P net -> step_failure (failed, net) (failed', net') out -> P net') ->...-> P n\nraft_intermediate_reachable_ind : forall P : network -> Prop, P step_async_init -> (forall (failed : list Net.name) (net : network) (failed' : list Net.name) (net' : network) (out : list (Net.name * (input + list output))), raft_intermediate_reachable net -> P net -> step_failure (failed, net) (failed', net') out -> P net') ->...-> P n\nInductive raft_intermediate_reachable (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params) : network -> Prop := RIR_init : raft_intermediate_reachable step_async_init | RIR_step_failure : forall (failed : list Net.name) (net : network) (failed' : list Net.name) (net' : network) (out : list (Net.name * (input + list output))), raft_intermediate_reachable net -> step_failure (failed, net) (failed', net') out -> raft_intermediate_reachable net' | RIR_handleInput : forall (net : network) (h : name) (inp : raft_input) (out : list raft_output) (d : raft_data) (l : list (name * msg)) (ps' : list packet) (st' : name -> data), raft_intermediate_reachable net -> handleInput h inp (nwState net h...\nraft_net_invariant : forall (P : network -> Prop) (net : network), raft_net_invariant_init P -> raft_net_invariant_client_request P -> raft_net_invariant_timeout P -> raft_net_invariant_append_entries P -> raft_net_invariant_append_entries_reply P -> raft_net_invariant_request_vote P -> raft_net_invariant_request_vote_reply P -> raft_net_invariant_do_leader P -> raft_net_invariant_do_generic_server P -> raft_net_invariant_state_same_packet_subset P -> raft_net_invariant_reboot P -> raft_intermediate_reachable net -> P net\nRIR_handleMessage : forall (p : packet) (net : network) (xs ys : list packet) (st' : name -> data) (ps' : list packet) (d : raft_data) (l : list (name * msg)), raft_intermediate_reachable net -> handleMessage (pSrc p) (pDst p) (pBody p) (nwState net (pDst p)) = (d, l) -> nwPackets net = xs ++ p :: ys -> (forall h : name, st' h = update name_eq_dec (nwState net) (pDst p) d h) -> (forall p' : packet, In p' ps' -> In p' (xs ++ ys) \\/ In p' (send_packets (pDst p) l)) -> raft_intermediate_reachable {| nwPackets := ps'; nwState := st' |}\nRIR_doLeader : forall (net : network) (st' : name -> data) (ps' : list packet) (h : Net.name) (os : list raft_output) (d' : raft_data) (ms : list (name * msg)), raft_intermediate_reachable net -> doLeader (nwState net h) h = (os, d', ms) -> (forall h' : name, st' h' = update name_eq_dec (nwState net) h d' h') -> (forall p : packet, In p ps' -> In p (nwPackets net) \\/ In p (send_packets h ms)) -> raft_intermediate_reachable {| nwPackets := ps'; nwState := st' |}\nRIR_doGenericServer : forall (net : network) (st' : name -> data) (ps' : list packet) (os : list raft_output) (d' : raft_data) (ms : list (name * msg)) (h : name), raft_intermediate_reachable net -> doGenericServer h (nwState net h) = (os, d', ms) -> (forall h' : name, st' h' = update name_eq_dec (nwState net) h d' h') -> (forall p : packet, In p ps' -> In p (nwPackets net) \\/ In p (send_packets h ms)) -> raft_intermediate_reachable {| nwPackets := ps'; nwState := st' |}\nstep_failure_star_raft_intermediate_reachable_extend : forall (f : list Net.name) (net : network) (f' : list Net.name) (net' : network) (tr : list (Net.name * (input + list output))), step_failure_star (f, net) (f', net') tr -> raft_intermediate_reachable net -> raft_intermediate_reachable net'\nRIR_step_failure : forall (failed : list Net.name) (net : network) (failed' : list Net.name) (net' : network) (out : list (Net.name * (input + list output))), raft_intermediate_reachable net -> step_failure (failed, net) (failed', net') out -> raft_intermediate_reachable net'"}, {"role": "assistant", "content": "```coq\nintros net.\napply raft_net_invariant with (P := candidate_term_gt_log).\n- apply raft_net_invariant_init.\n- apply raft_net_invariant_client_request.\n- apply raft_net_invariant_timeout.\n- apply raft_net_invariant_append_entries.\n- apply raft_net_invariant_append_entries_reply.\n- apply raft_net_invariant_request_vote.\n- apply raft_net_invariant_request_vote_reply.\n- apply raft_net_invariant_do_leader.\n- apply raft_net_invariant_do_generic_server.\n- apply raft_net_invariant_state_same_packet_subset.\n- apply raft_net_invariant_reboot.\n- assumption.\nQed."}], "original": "intros net. apply raft_net_invariant with (P := candidate_term_gt_log). - apply raft_net_invariant_init. - apply raft_net_invariant_client_request. - apply raft_net_invariant_timeout. - apply raft_net_invariant_append_entries. - apply raft_net_invariant_append_entries_reply. - apply raft_net_invariant_request_vote. - apply raft_net_invariant_request_vote_reply. - apply raft_net_invariant_do_leader. - apply raft_net_invariant_do_generic_server. - apply raft_net_invariant_state_same_packet_subset. - apply raft_net_invariant_reboot. - auto.", "succ": false}]