[{"history": {"proof": "", "repairs": [], "exceptions": []}, "chat": [{"role": "user", "content": "I will give you a Coq proof state, including both hypotheses and a specific goal and your need to prove it. Your response should be a singular code block of Coq proof starting with \"```coq\n\", ending with \"Qed.\", without any additional explanation or commentary. Follow to these guidelines:\nIntroduce variables using unique names to avoid any conflicts.\nKeep each command distinct and separated, avoid concatenations like ';' or '[cmd|cmd]'.\nOrganize your proof with bullets like '-', '+', and '*' instead of braces ({, }). Shift to their double symbols like '--' and '++', when necessary.\nEffectively use given premises, follow the syntax and structure demonstrated in the examples provided.\n\nExample 1:\n\nHypotheses:\nn, m: nat\nIHn: m + n = n + m\n\nGoal:\nm + S n = S n + m\n\nProof:\n```coq\nsimpl. rewrite <- IHn. auto.\nQed.```\n\nExample 2:\nHypotheses:\n\nGoal:\nforall n m : nat, m + n = n + m\n\n```coq\nintros n m. induction n.\n- simpl. auto.\n- simpl. rewrite <- IHn. auto.\nQed.```\n\nSolve This Proof State:\n\nHypotheses:\nL: Language\nminL: MinimumLanguage L\nGamma: Provable L\nminAX: MinimumAxiomatization L Gamma\nfuncp: expr -> expr -> expr\nprodp: expr -> expr -> expr\nAdj: Adjointness L Gamma prodp funcp\nMono: Monotonicity L Gamma prodp\n\nGoal:\nforall x1 y1 x2 y2 : expr, |-- x2 --> x1 -> |-- y1 --> y2 -> |-- funcp x1 y1 --> funcp x2 y2"}, {"role": "assistant", "content": "```coq\nintros x1 y1 x2 y2 H1 H2.\napply (Adj _ funcp). apply (Mono _ _ _ H1).\napply (Mono _ _ _ H2).\nQed.```"}], "original": "intros x1 y1 x2 y2 H1 H2. apply (Adj _ funcp). apply (Mono _ _ _ H1). apply (Mono _ _ _ H2).", "succ": false}]