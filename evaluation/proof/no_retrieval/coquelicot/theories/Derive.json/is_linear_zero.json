[{"history": {"proof": "split. - intros x y. rewrite plus_zero_l. reflexivity. - intros k x. rewrite scal_zero_r. reflexivity. - hauto lq: on use: Rmult_1_l, @norm_ge_0, @norm_zero, Rlt_0_1.", "repairs": ["", "", "", "ref_not_found", "", "", "", "ref_not_found", "", "", "hammer"], "exceptions": [{"ctx": [], "tactic": "unfold is_linear.", "exn": "Cannot coerce is_linear to an evaluable reference.", "type": "not_evaluable", "handled": true}, {"ctx": ["split.", "-", "intros x y."], "tactic": "rewrite zero_add.", "exn": "The reference zero_add was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["split.", "-", "intros x y.", "rewrite plus_zero_l.", "reflexivity.", "-", "intros k x."], "tactic": "rewrite zero_scale.", "exn": "The reference zero_scale was not found in the current environment.", "type": "ref_not_found", "handled": true}]}, "chat": [{"role": "user", "content": "I will give you a Coq proof state, including both hypotheses and a specific goal and your need to prove it. Your response should be a singular code block of Coq proof starting with \"```coq\n\", ending with \"Qed.\", without any additional explanation or commentary. Follow to these guidelines:\nIntroduce variables using unique names to avoid any conflicts.\nKeep each command distinct and separated, avoid concatenations like ';' or '[cmd|cmd]'.\nOrganize your proof with bullets like '-', '+', and '*' instead of braces ({, }). Shift to their double symbols like '--' and '++', when necessary.\nEffectively use given premises, follow the syntax and structure demonstrated in the examples provided.\n\nExample 1:\n\nHypotheses:\nn, m: nat\nIHn: m + n = n + m\n\nGoal:\nm + S n = S n + m\n\nProof:\n```coq\nsimpl. rewrite <- IHn. auto.\nQed.```\n\nExample 2:\nHypotheses:\n\nGoal:\nforall n m : nat, m + n = n + m\n\n```coq\nintros n m. induction n.\n- simpl. auto.\n- simpl. rewrite <- IHn. auto.\nQed.```\n\nSolve This Proof State:\n\nHypotheses:\nK: AbsRing\nV: NormedModule K\nU: NormedModule K\n\nGoal:\nis_linear (fun _ : U => zero)"}, {"role": "assistant", "content": "```coq\nunfold is_linear. split.\n- intros x y. simpl. rewrite zero_add. reflexivity.\n- intros k x. simpl. rewrite zero_scale. reflexivity.\nQed.```"}], "original": "unfold is_linear. split. - intros x y. simpl. rewrite zero_add. reflexivity. - intros k x. simpl. rewrite zero_scale. reflexivity.", "succ": true}]