[{"history": {"proof": "qsimpl time: 1 use: is_linear.", "repairs": ["not_evaluable"], "exceptions": [{"ctx": ["intros H_lin."], "tactic": "unfold is_linear in H_lin.", "exn": "Cannot coerce is_linear to an evaluable reference.", "type": "not_evaluable", "handled": true}, {"ctx": ["intros H_lin.", "qsimpl time: 1 use: is_linear."], "tactic": "destruct H_lin as [H_add H_mul].", "exn": "The reference H_lin was not found in the current environment.", "type": "ref_not_found", "handled": true}]}, "chat": [{"role": "user", "content": "I will give you a Coq proof state, including both hypotheses and a specific goal and your need to prove it. Your response should be a singular code block of Coq proof starting with \"```coq\n\", ending with \"Qed.\", without any additional explanation or commentary. Follow to these guidelines:\nIntroduce variables using unique names to avoid any conflicts.\nKeep each command distinct and separated, avoid concatenations like ';' or '[cmd|cmd]'.\nOrganize your proof with bullets like '-', '+', and '*' instead of braces ({, }). Shift to their double symbols like '--' and '++', when necessary.\nEffectively use given premises, follow the syntax and structure demonstrated in the examples provided.\n\nExample 1:\n\nHypotheses:\nn, m: nat\nIHn: m + n = n + m\n\nGoal:\nm + S n = S n + m\n\nProof:\n```coq\nsimpl. rewrite <- IHn. auto.\nQed.```\n\nExample 2:\nHypotheses:\n\nGoal:\nforall n m : nat, m + n = n + m\n\n```coq\nintros n m. induction n.\n- simpl. auto.\n- simpl. rewrite <- IHn. auto.\nQed.```\n\nSolve This Proof State:\n\nHypotheses:\nK: AbsRing\nV: NormedModule K\nU: NormedModule K\nl: U -> V\nx: NormedModule.sort K U\n\nGoal:\nis_linear l -> l (opp x) = opp (l x)"}, {"role": "assistant", "content": "```coq\nintros H_lin.\nunfold is_linear in H_lin.\ndestruct H_lin as [H_add H_mul].\nrewrite H_add, H_mul.\nreflexivity.\nQed.```"}], "original": "intros H_lin. unfold is_linear in H_lin. destruct H_lin as [H_add H_mul].", "succ": false}]