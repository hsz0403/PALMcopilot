[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": ["intros n st t c li lt st' ms.", "unfold handleRequestVote.", "destruct (t <? currentTerm st) eqn:H1.", "-", "intros.", "inversion H.", "reflexivity.", "-", "intros.", "destruct (leaderId (advanceCurrentTerm st t)) eqn:H2.", "--"], "tactic": "destruct (moreUpToDate lt li (maxTerm (log (advanceCurrentTerm st t))) (maxIndex (log (advanceCurrentTerm st t)))) eqn:H3; intros; inversion H; reflexivity.", "exn": "In environment orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params n : name st : RaftState.raft_data term name entry logIndex serverType data clientId output t : nat c : fin N li, lt : nat st' : raft_data ms : msg H1 : (t <? currentTerm st) = false n0 : name H2 : leaderId (advanceCurrentTerm st t) = Some n0 H3 : moreUpToDate lt li (maxTerm (log (advanceCurrentTerm st t))) (maxIndex (log (advanceCurrentTerm st t))) = true H : (if false && true then match votedFor (advanceCurrentTerm st t) with | Some candidateId' => (advanceCurrentTerm st t, RequestVoteReply (currentTerm (advanceCurrentTerm st t)) (if fin_eq_dec N c candidateId' then true else false)) | None => ({[advanceCurrentTerm st t with votedFor := Some c]}, RequestVoteReply (currentTerm (advanceCurrentTerm st t)) true) end else (advanceCurrentTerm st t, RequestVoteReply (currentTerm (advanceCurrentTerm st t)) false)) = (st', ms) H4 : advanceCurrentTerm st t = st' H5 : RequestVoteReply (currentTerm (advanceCurrentTerm st t)) false = ms Unable to unify \"commitIndex st\" with \"commitIndex (advanceCurrentTerm st t)\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros n st t c li lt st' ms.", "unfold handleRequestVote.", "destruct (t <? currentTerm st) eqn:H1.", "-", "intros.", "inversion H.", "reflexivity.", "-", "intros.", "destruct (leaderId (advanceCurrentTerm st t)) eqn:H2.", "--", "qsimpl time: 1 use: moreUpToDate,maxTerm,log,advanceCurrentTerm,maxIndex."], "tactic": "--", "exn": "Wrong bullet --: Current bullet -- is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["intros n st t c li lt st' ms.", "unfold handleRequestVote.", "destruct (t <? currentTerm st) eqn:H1.", "-", "intros.", "inversion H.", "reflexivity.", "-", "intros.", "destruct (leaderId (advanceCurrentTerm st t)) eqn:H2.", "--", "qsimpl time: 1 use: moreUpToDate,maxTerm,log,advanceCurrentTerm,maxIndex.", "shelve.", "--"], "tactic": "destruct (moreUpToDate lt li (maxTerm (log (advanceCurrentTerm st t))) (maxIndex (log (advanceCurrentTerm st t)))) eqn:H3; intros; inversion H; reflexivity.", "exn": "In environment orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params n : name st : RaftState.raft_data term name entry logIndex serverType data clientId output t : nat c : fin N li, lt : nat st' : raft_data ms : msg H1 : (t <? currentTerm st) = false H2 : leaderId (advanceCurrentTerm st t) = None H3 : moreUpToDate lt li (maxTerm (log (advanceCurrentTerm st t))) (maxIndex (log (advanceCurrentTerm st t))) = true H : (if true && true then match votedFor (advanceCurrentTerm st t) with | Some candidateId' => (advanceCurrentTerm st t, RequestVoteReply (currentTerm (advanceCurrentTerm st t)) (if fin_eq_dec N c candidateId' then true else false)) | None => ({[advanceCurrentTerm st t with votedFor := Some c]}, RequestVoteReply (currentTerm (advanceCurrentTerm st t)) true) end else (advanceCurrentTerm st t, RequestVoteReply (currentTerm (advanceCurrentTerm st t)) false)) = (st', ms) H4 : match votedFor (advanceCurrentTerm st t) with | Some candidateId' => (advanceCurrentTerm st t, RequestVoteReply (currentTerm (advanceCurrentTerm st t)) (if fin_eq_dec N c candidateId' then true else false)) | None => (mkRaft_data (currentTerm (advanceCurrentTerm st t)) (Some c) (leaderId (advanceCurrentTerm st t)) (log (advanceCurrentTerm st t)) (commitIndex (advanceCurrentTerm st t)) (lastApplied (advanceCurrentTerm st t)) (stateMachine (advanceCurrentTerm st t)) (nextIndex (advanceCurrentTerm st t)) (matchIndex (advanceCurrentTerm st t)) (shouldSend (advanceCurrentTerm st t)) (votesReceived (advanceCurrentTerm st t)) (type (advanceCurrentTerm st t)) (clientCache (advanceCurrentTerm st t)) (electoralVictories (advanceCurrentTerm st t)), RequestVoteReply (currentTerm (advanceCurrentTerm st t)) true) end = (st', ms) Unable to unify \"commitIndex st\" with \"commitIndex st'\".", "type": "cannot_unify", "handled": true}]}, "chat": [], "original": "intros n st t c li lt st' ms. unfold handleRequestVote. destruct (t <? currentTerm st) eqn:H1. - intros. inversion H. reflexivity. - intros. destruct (leaderId (advanceCurrentTerm st t)) eqn:H2. -- destruct (moreUpToDate lt li (maxTerm (log (advanceCurrentTerm st t))) (maxIndex (log (advanceCurrentTerm st t)))) eqn:H3; intros; inversion H; reflexivity. -- destruct (moreUpToDate lt li (maxTerm (log (advanceCurrentTerm st t))) (maxIndex (log (advanceCurrentTerm st t)))) eqn:H3; intros; inversion H; reflexivity.", "back_times": 0, "succ": false, "time": 253.11625719070435}]