[{"history": {"proof": "intros n st src t v. unfold handleRequestVoteReply. destruct (currentTerm st <? t). - apply advanceCurrentTerm_same_lastApplied. - destruct (t <? currentTerm st). + auto. + destruct (type st). * auto. * auto. * destruct (v && wonElection (dedup name_eq_dec (src :: votesReceived st))); auto.", "repairs": ["", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", ""], "exceptions": []}, "chat": [], "original": "intros n st src t v. unfold handleRequestVoteReply. destruct (currentTerm st <? t). - apply advanceCurrentTerm_same_lastApplied. - destruct (t <? currentTerm st). + auto. + destruct (type st). * auto. * auto. * simpl. destruct (v && wonElection (dedup name_eq_dec (src :: votesReceived st))); auto.", "back_times": 0, "succ": true, "time": 1.3214318752288818}]