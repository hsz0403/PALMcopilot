[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": ["intros xs x y Huniq Hinx Hiny Heq.", "unfold uniqueIndices in Huniq."], "tactic": "apply NoDup_cons_iff in Huniq as [Hnin Hnodup].", "exn": "Unable to apply lemma of type \"forall (A : Type) (a : A) (l : list A), NoDup (a :: l) <-> ~ In a l /\\\\ NoDup l\" on hypothesis of type \"NoDup (map eIndex xs)\".", "type": "cannot_apply_in", "handled": true}, {"ctx": ["intros xs x y Huniq Hinx Hiny Heq.", "unfold uniqueIndices in Huniq.", "qsimpl time: 1 use: NoDup_cons_iff."], "tactic": "apply in_map_iff in Hinx as [ex [Hexeq Hinx']].", "exn": "Unable to apply lemma of type \"forall (A B : Type) (f : A -> B) (l : list A) (y : B), In y (map f l) <-> (exists x : A, f x = y /\\\\ In x l)\" on hypothesis of type \"In x xs\".", "type": "cannot_apply_in", "handled": true}, {"ctx": ["intros xs x y Huniq Hinx Hiny Heq.", "unfold uniqueIndices in Huniq.", "qsimpl time: 1 use: NoDup_cons_iff.", "qsimpl time: 1 use: ex,NoDup_cons_iff,in_map_iff."], "tactic": "apply in_map_iff in Hiny as [ey [Heyeq Hiny']].", "exn": "Unable to apply lemma of type \"forall (A B : Type) (f : A -> B) (l : list A) (y : B), In y (map f l) <-> (exists x : A, f x = y /\\\\ In x l)\" on hypothesis of type \"In y xs\".", "type": "cannot_apply_in", "handled": true}, {"ctx": ["intros xs x y Huniq Hinx Hiny Heq.", "unfold uniqueIndices in Huniq.", "qsimpl time: 1 use: NoDup_cons_iff.", "qsimpl time: 1 use: ex,NoDup_cons_iff,in_map_iff."], "tactic": "destruct (eq_nat_dec (eIndex ex) (eIndex ey)).", "exn": "The reference ey was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros xs x y Huniq Hinx Hiny Heq.", "unfold uniqueIndices in Huniq.", "qsimpl time: 1 use: NoDup_cons_iff.", "qsimpl time: 1 use: ex,NoDup_cons_iff,in_map_iff."], "tactic": "apply NoDup_cons_iff in Hnodup as [_ Hnodup].", "exn": "No such hypothesis: Hnodup", "type": "no_hypos", "handled": true}, {"ctx": ["intros xs x y Huniq Hinx Hiny Heq.", "unfold uniqueIndices in Huniq.", "qsimpl time: 1 use: NoDup_cons_iff.", "qsimpl time: 1 use: ex,NoDup_cons_iff,in_map_iff."], "tactic": "specialize (Hnodup ex Hinx' ey Hiny' n).", "exn": "The reference Hnodup was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros xs x y Huniq Hinx Hiny Heq.", "unfold uniqueIndices in Huniq.", "qsimpl time: 1 use: NoDup_cons_iff.", "qsimpl time: 1 use: ex,NoDup_cons_iff,in_map_iff."], "tactic": "subst; rewrite <- Heq; reflexivity.", "exn": "Found no subterm matching \"eIndex y\" in the current goal.", "type": "no_subterm", "handled": true}]}, "chat": [], "original": "intros xs x y Huniq Hinx Hiny Heq. unfold uniqueIndices in Huniq. apply NoDup_cons_iff in Huniq as [Hnin Hnodup]. apply in_map_iff in Hinx as [ex [Hexeq Hinx']]. apply in_map_iff in Hiny as [ey [Heyeq Hiny']]. subst. destruct (eq_nat_dec (eIndex ex) (eIndex ey)). - apply NoDup_cons_iff in Hnodup as [_ Hnodup]. specialize (Hnodup ex Hinx' ey Hiny' n). subst; rewrite <- Heq; reflexivity. - congruence.", "back_times": 0, "succ": false, "time": 116.90744304656982}]