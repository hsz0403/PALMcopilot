[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": ["intros h st out st' ps Htimeout Hterm.", "assert (HhandleTimeout := handleTimeout_log_term_type h st out st' ps Htimeout).", "destruct HhandleTimeout as [[_ [_ HcurrentTerm]] | _].", "-"], "tactic": "rewrite HcurrentTerm in Hterm.", "exn": "Found no subterm matching \"type st'\" in Hterm.", "type": "no_subterm", "handled": true}, {"ctx": ["intros h st out st' ps Htimeout Hterm.", "assert (HhandleTimeout := handleTimeout_log_term_type h st out st' ps Htimeout).", "destruct HhandleTimeout as [[_ [_ HcurrentTerm]] | _].", "-", "qsimpl time: 1.", "clear HcurrentTerm.", "assert (HvotedFor := doGenericServer_log_type_term_votesReceived h st [] st' ps)."], "tactic": "specialize (HvotedFor Htimeout).", "exn": "In environment orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params h : name st : raft_data out : list raft_output st' : raft_data ps : list (name * msg) Htimeout : handleTimeout h st = (out, st', ps) Hterm : currentTerm st' = currentTerm st refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (GhostSimulations.deghost net) HvotedFor : doGenericServer h st = ([], st', ps) -> log st' = log st /\\\\ type st' = type st /\\\\ currentTerm st' = currentTerm st /\\\\ votesReceived st' = votesReceived st /\\\\ votedFor st' = votedFor st The term \"Htimeout\" has type \"handleTimeout h st = (out, st', ps)\" while it is expected to have type \"doGenericServer h st = ([], st', ps)\".", "type": "wrong_type", "handled": true}, {"ctx": ["intros h st out st' ps Htimeout Hterm.", "assert (HhandleTimeout := handleTimeout_log_term_type h st out st' ps Htimeout).", "destruct HhandleTimeout as [[_ [_ HcurrentTerm]] | _].", "-", "qsimpl time: 1.", "clear HcurrentTerm.", "assert (HvotedFor := doGenericServer_log_type_term_votesReceived h st [] st' ps).", "qsimpl time: 1."], "tactic": "destruct HvotedFor as [_ [_ [HcurrentTermVotesReceived HvotedFor]]].", "exn": "The reference HvotedFor was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros h st out st' ps Htimeout Hterm.", "assert (HhandleTimeout := handleTimeout_log_term_type h st out st' ps Htimeout).", "destruct HhandleTimeout as [[_ [_ HcurrentTerm]] | _].", "-", "qsimpl time: 1.", "clear HcurrentTerm.", "assert (HvotedFor := doGenericServer_log_type_term_votesReceived h st [] st' ps).", "qsimpl time: 1.", "destruct Htimeout as [_ [_ [HcurrentTermVotesReceived Htimeout]]]."], "tactic": "rewrite Hterm in HcurrentTermVotesReceived.", "exn": "No such hypothesis: HcurrentTermVotesReceived", "type": "no_hypos", "handled": true}, {"ctx": ["intros h st out st' ps Htimeout Hterm.", "assert (HhandleTimeout := handleTimeout_log_term_type h st out st' ps Htimeout).", "destruct HhandleTimeout as [[_ [_ HcurrentTerm]] | _].", "-", "qsimpl time: 1.", "clear HcurrentTerm.", "assert (HvotedFor := doGenericServer_log_type_term_votesReceived h st [] st' ps).", "qsimpl time: 1.", "destruct Htimeout as [_ [_ [HcurrentTermVotesReceived Htimeout]]]."], "tactic": "rewrite HcurrentTermVotesReceived.", "exn": "The reference HcurrentTermVotesReceived was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros h st out st' ps Htimeout Hterm.", "assert (HhandleTimeout := handleTimeout_log_term_type h st out st' ps Htimeout).", "destruct HhandleTimeout as [[_ [_ HcurrentTerm]] | _].", "-", "qsimpl time: 1.", "clear HcurrentTerm.", "assert (HvotedFor := doGenericServer_log_type_term_votesReceived h st [] st' ps).", "qsimpl time: 1.", "destruct Htimeout as [_ [_ [HcurrentTermVotesReceived Htimeout]]]."], "tactic": "-", "exn": "Wrong bullet -: Current bullet - is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["intros h st out st' ps Htimeout Hterm.", "assert (HhandleTimeout := handleTimeout_log_term_type h st out st' ps Htimeout).", "destruct HhandleTimeout as [[_ [_ HcurrentTerm]] | _].", "-", "qsimpl time: 1.", "clear HcurrentTerm.", "assert (HvotedFor := doGenericServer_log_type_term_votesReceived h st [] st' ps).", "qsimpl time: 1.", "destruct Htimeout as [_ [_ [HcurrentTermVotesReceived Htimeout]]].", "shelve.", "-"], "tactic": "rewrite Hterm in HcurrentTerm.", "exn": "No such hypothesis: HcurrentTerm", "type": "no_hypos", "handled": true}]}, "chat": [], "original": "intros h st out st' ps Htimeout Hterm. assert (HhandleTimeout := handleTimeout_log_term_type h st out st' ps Htimeout). destruct HhandleTimeout as [[_ [_ HcurrentTerm]] | _]. - rewrite HcurrentTerm in Hterm. clear HcurrentTerm. assert (HvotedFor := doGenericServer_log_type_term_votesReceived h st [] st' ps). specialize (HvotedFor Htimeout). destruct HvotedFor as [_ [_ [HcurrentTermVotesReceived HvotedFor]]]. rewrite Hterm in HcurrentTermVotesReceived. rewrite HcurrentTermVotesReceived. auto. - rewrite Hterm in HcurrentTerm. contradiction.", "back_times": 0, "succ": false, "time": 169.64067268371582}]