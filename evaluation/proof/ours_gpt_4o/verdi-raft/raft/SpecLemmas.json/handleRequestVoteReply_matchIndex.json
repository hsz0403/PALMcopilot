[{"history": {"proof": "qsimpl time: 1 use: handleRequestVoteReply_log.", "repairs": ["no_instance_var"], "exceptions": [{"ctx": ["intros n st src t v H.", "pose proof handleRequestVoteReply_spec as Hspec.", "pose proof handleRequestVoteReply_same_log as Hlog.", "pose proof handleRequestVoteReply_type as Htype.", "pose proof handleRequestVoteReply_same_commitIndex as Hcommit.", "pose proof handleRequestVoteReply_term_votedFor_cases as Hterm.", "pose proof handleClientRequest_matchIndex_maxIndex as Hmatch.", "pose proof handleRequestVoteReply_spec' as Hspec'.", "pose proof handleRequestVoteReply_log_rewrite as Hlog_rw.", "pose proof advanceCurrentTerm_term as Hadvance.", "pose proof handleRequestVoteReply_currentTerm_leaderId as Hcurr.", "pose proof handleRequestVoteReply_same_lastApplied as Hlast.", "pose proof handleRequestVoteReply_clientCache as Hcache.", "pose proof handleRequestVoteReply_stateMachine as Hstate.", "assert (Hlog_weq : log (handleRequestVoteReply n st src t v) = log st)."], "tactic": "apply handleRequestVoteReply_log.", "exn": "Unable to find an instance for the variables h, h', t, r.", "type": "no_instance_var", "handled": true}, {"ctx": ["intros n st src t v H.", "pose proof handleRequestVoteReply_spec as Hspec.", "pose proof handleRequestVoteReply_same_log as Hlog.", "pose proof handleRequestVoteReply_type as Htype.", "pose proof handleRequestVoteReply_same_commitIndex as Hcommit.", "pose proof handleRequestVoteReply_term_votedFor_cases as Hterm.", "pose proof handleClientRequest_matchIndex_maxIndex as Hmatch.", "pose proof handleRequestVoteReply_spec' as Hspec'.", "pose proof handleRequestVoteReply_log_rewrite as Hlog_rw.", "pose proof advanceCurrentTerm_term as Hadvance.", "pose proof handleRequestVoteReply_currentTerm_leaderId as Hcurr.", "pose proof handleRequestVoteReply_same_lastApplied as Hlast.", "pose proof handleRequestVoteReply_clientCache as Hcache.", "pose proof handleRequestVoteReply_stateMachine as Hstate.", "assert (Hlog_weq : log (handleRequestVoteReply n st src t v) = log st).", "qsimpl time: 1 use: handleRequestVoteReply_log.", "assert (Htype_st : type st = Candidate \\/ type st = Leader).", "left."], "tactic": "apply handleRequestVoteReply_type in H.", "exn": "Unable to apply lemma of type \"forall (h : name) (st : RaftState.raft_data term name entry logIndex serverType data clientId output) (h' : name) (t : nat) (r : bool) (st' : raft_data), handleRequestVoteReply h st h' t r = st' -> type st' = type st /\\\\ currentTerm st' = currentTerm st \\\\/ type st' = Follower /\\\\ currentTerm st' > currentTerm st \\\\/ type st = Candidate /\\\\ type st' = Leader /\\\\ currentTerm st' = currentTerm st\" on hypothesis of type \"type (handleRequestVoteReply n st src t v) = Leader\".", "type": "cannot_apply_in", "handled": true}, {"ctx": ["intros n st src t v H.", "pose proof handleRequestVoteReply_spec as Hspec.", "pose proof handleRequestVoteReply_same_log as Hlog.", "pose proof handleRequestVoteReply_type as Htype.", "pose proof handleRequestVoteReply_same_commitIndex as Hcommit.", "pose proof handleRequestVoteReply_term_votedFor_cases as Hterm.", "pose proof handleClientRequest_matchIndex_maxIndex as Hmatch.", "pose proof handleRequestVoteReply_spec' as Hspec'.", "pose proof handleRequestVoteReply_log_rewrite as Hlog_rw.", "pose proof advanceCurrentTerm_term as Hadvance.", "pose proof handleRequestVoteReply_currentTerm_leaderId as Hcurr.", "pose proof handleRequestVoteReply_same_lastApplied as Hlast.", "pose proof handleRequestVoteReply_clientCache as Hcache.", "pose proof handleRequestVoteReply_stateMachine as Hstate.", "assert (Hlog_weq : log (handleRequestVoteReply n st src t v) = log st).", "qsimpl time: 1 use: handleRequestVoteReply_log.", "assert (Htype_st : type st = Candidate \\/ type st = Leader).", "left.", "qsimpl time: 1 use: handleRequestVoteReply_log,handleRequestVoteReply_type."], "tactic": ["destruct H as [[? ?] | [? [? ?]]].", ""], "exn": "Expects a disjunctive pattern with 1 branch or a conjunctive pattern made of 0 patterns.", "type": "num_branch_both", "handled": false}]}, "chat": [], "original": "intros n st src t v H. pose proof handleRequestVoteReply_spec as Hspec. pose proof handleRequestVoteReply_same_log as Hlog. pose proof handleRequestVoteReply_type as Htype. pose proof handleRequestVoteReply_same_commitIndex as Hcommit. pose proof handleRequestVoteReply_term_votedFor_cases as Hterm. pose proof handleClientRequest_matchIndex_maxIndex as Hmatch. pose proof handleRequestVoteReply_spec' as Hspec'. pose proof handleRequestVoteReply_log_rewrite as Hlog_rw. pose proof advanceCurrentTerm_term as Hadvance. pose proof handleRequestVoteReply_currentTerm_leaderId as Hcurr. pose proof handleRequestVoteReply_same_lastApplied as Hlast. pose proof handleRequestVoteReply_clientCache as Hcache. pose proof handleRequestVoteReply_stateMachine as Hstate. assert (Hlog_weq : log (handleRequestVoteReply n st src t v) = log st). apply handleRequestVoteReply_log. assert (Htype_st : type st = Candidate \\/ type st = Leader). left. apply handleRequestVoteReply_type in H. destruct H as [[? ?] | [? [? ?]]]. auto. assert (Hnew : exists st', handleRequestVoteReply n st src t v = st'). exists (handleRequestVoteReply n st src t v). reflexivity. destruct Hnew as [st' Heqst']. apply handleRequestVoteReply_type in Heqst'. destruct Heqst' as [[? ?] | [[? ?] | [? [? [? ?]]]]]. - rewrite Hlog_weq in Hlog. rewrite <- H. auto. - rewrite Hlog_weq in Hlog. rewrite <- H. auto. - right. apply handleRequestVoteReply_log in Hlog_rw. rewrite <- Hlog_rw in Hlog. apply handleRequestVoteReply_spec'. apply Hcache. apply Hstate. rewrite H. left. split. + auto. + apply handleClientRequest_matchIndex. rewrite Hlog_rw. auto. apply matchIndex_preserved. auto. + apply matchIndex_preserved_except_at_host. rewrite Hlog_rw. rewrite H. auto.", "back_times": 0, "succ": false, "time": 796.0889956951141}]