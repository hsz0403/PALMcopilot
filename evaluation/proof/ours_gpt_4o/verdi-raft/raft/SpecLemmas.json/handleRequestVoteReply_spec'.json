[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": ["intros h st h' t r st' Heq.", "pose proof handleRequestVoteReply_spec as Hspec.", "specialize (Hspec h st h' t r st' Heq)."], "tactic": ["destruct Hspec as [Hlog [HvotesReceived [HcurrentTermType | HnotCandidate]]].", ""], "exn": "Expects a disjunctive pattern with 1 branch or a conjunctive pattern made of 2 patterns.", "type": "num_branch_both", "handled": false}]}, "chat": [], "original": "intros h st h' t r st' Heq. pose proof handleRequestVoteReply_spec as Hspec. specialize (Hspec h st h' t r st' Heq). destruct Hspec as [Hlog [HvotesReceived [HcurrentTermType | HnotCandidate]]]. - split. + auto. + split. * auto. * intro H. destruct H as [HtypeLeader HtypeLeader']. exfalso. rewrite HtypeLeader' in HcurrentTermType. tauto. - split. + auto. + split. * auto. * intros [HtypeLeader HtypeLeader']. split. -- tauto. -- pose proof handleRequestVoteReply_currentTerm_leaderId as HtermLeaderId. specialize (HtermLeaderId h st h' t r st' Heq). simpl. destruct HtermLeaderId as [HtermIncr | [HtermLeader _]]. ++ apply Nat.ltb_lt in HtermIncr. congruence. ++ auto.", "back_times": 0, "succ": false, "time": 150.50689673423767}]