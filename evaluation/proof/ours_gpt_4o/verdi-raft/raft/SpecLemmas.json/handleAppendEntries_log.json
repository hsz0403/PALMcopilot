[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": ["intros h st t n pli plt es ci st' ps H.", "unfold handleAppendEntries in H.", "destruct (t <? currentTerm st) eqn:Ht.", "-", "left.", "inversion H.", "reflexivity.", "-", "destruct (pli =? 0) eqn:Hpli.", "+", "right.", "left.", "split.", "*"], "tactic": "apply handleAppendEntries_currentTerm with (h := h) (st := st) (t := t) (n := n) (pli := 0) (plt := plt) (es := es) (ci := ci) (st' := st') (ps := ps) in H.", "exn": "Unable to apply lemma of type \"forall (h : name) (st : raft_data) (t : term) (n : name) (pli : logIndex) (plt : term) (es : list entry) (ci : logIndex) (st' : raft_data) (ps : msg), handleAppendEntries h st t n pli plt es ci = (st', ps) -> currentTerm st <= currentTerm st'\" on hypothesis of type \"(if haveNewEntries st es then ({[{[{[{[advanceCurrentTerm st t with log := es]} with commitIndex := Init.Nat.max (commitIndex st) (Init.Nat.min ci (maxIndex es))]} with type := Follower]} with leaderId := Some n]}, AppendEntriesReply t es true) else ({[{[advanceCurrentTerm st t with type := Follower]} with leaderId := Some n]}, AppendEntriesReply t es true)) = (st', ps)\".", "type": "cannot_apply_in", "handled": true}, {"ctx": ["intros h st t n pli plt es ci st' ps H.", "unfold handleAppendEntries in H.", "destruct (t <? currentTerm st) eqn:Ht.", "-", "left.", "inversion H.", "reflexivity.", "-", "destruct (pli =? 0) eqn:Hpli.", "+", "right.", "left.", "split.", "*", "qsimpl time: 1 use: handleAppendEntries_currentTerm."], "tactic": "lia.", "exn": "The reference lia was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros h st t n pli plt es ci st' ps H.", "unfold handleAppendEntries in H.", "destruct (t <? currentTerm st) eqn:Ht.", "-", "left.", "inversion H.", "reflexivity.", "-", "destruct (pli =? 0) eqn:Hpli.", "+", "right.", "left.", "split.", "*", "qsimpl time: 1 use: handleAppendEntries_currentTerm."], "tactic": "*", "exn": "Wrong bullet *: Current bullet * is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["intros h st t n pli plt es ci st' ps H.", "unfold handleAppendEntries in H.", "destruct (t <? currentTerm st) eqn:Ht.", "-", "left.", "inversion H.", "reflexivity.", "-", "destruct (pli =? 0) eqn:Hpli.", "+", "right.", "left.", "split.", "*", "qsimpl time: 1 use: handleAppendEntries_currentTerm.", "--", "shelve.", "--", "shelve.", "*", "split.", "intros Hcontra.", "subst."], "tactic": "+", "exn": "Wrong bullet +: Current bullet * is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["intros h st t n pli plt es ci st' ps H.", "unfold handleAppendEntries in H.", "destruct (t <? currentTerm st) eqn:Ht.", "-", "left.", "inversion H.", "reflexivity.", "-", "destruct (pli =? 0) eqn:Hpli.", "+", "right.", "left.", "split.", "*", "qsimpl time: 1 use: handleAppendEntries_currentTerm.", "--", "shelve.", "--", "shelve.", "*", "split.", "intros Hcontra.", "subst.", "--", "shelve.", "--", "shelve.", "+", "destruct (haveNewEntries st es) eqn:Hnew.", "*", "right.", "right.", "split.", "--"], "tactic": "apply handleAppendEntries_currentTerm with (h := h) (st := st) (t := t) (n := n) (pli := pli) (plt := plt) (es := es) (ci := ci) (st' := st') (ps := ps) in H.", "exn": "Unable to apply lemma of type \"forall (h : name) (st : raft_data) (t : term) (n : name) (pli : logIndex) (plt : term) (es : list entry) (ci : logIndex) (st' : raft_data) (ps : msg), handleAppendEntries h st t n pli plt es ci = (st', ps) -> currentTerm st <= currentTerm st'\" on hypothesis of type \"match findAtIndex (log st) pli with | Some e => if negb (plt =? eTerm e) then (st, AppendEntriesReply (currentTerm st) es false) else ({[{[{[{[advanceCurrentTerm st t with log := es ++ removeAfterIndex (log st) pli]} with commitIndex := Init.Nat.max (commitIndex st) (Init.Nat.min ci (maxIndex (es ++ removeAfterIndex (log st) pli)))]} with type := Follower]} with leaderId := Some n]}, AppendEntriesReply t es true) | None => (st, AppendEntriesReply (currentTerm st) es false) end = (st', ps)\".", "type": "cannot_apply_in", "handled": true}, {"ctx": ["intros h st t n pli plt es ci st' ps H.", "unfold handleAppendEntries in H.", "destruct (t <? currentTerm st) eqn:Ht.", "-", "left.", "inversion H.", "reflexivity.", "-", "destruct (pli =? 0) eqn:Hpli.", "+", "right.", "left.", "split.", "*", "qsimpl time: 1 use: handleAppendEntries_currentTerm.", "--", "shelve.", "--", "shelve.", "*", "split.", "intros Hcontra.", "subst.", "--", "shelve.", "--", "shelve.", "+", "destruct (haveNewEntries st es) eqn:Hnew.", "*", "right.", "right.", "split.", "--"], "tactic": "qsimpl time: 1 use: handleAppendEntries_currentTerm,discriminate.", "exn": "The reference discriminate was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros h st t n pli plt es ci st' ps H.", "unfold handleAppendEntries in H.", "destruct (t <? currentTerm st) eqn:Ht.", "-", "left.", "inversion H.", "reflexivity.", "-", "destruct (pli =? 0) eqn:Hpli.", "+", "right.", "left.", "split.", "*", "qsimpl time: 1 use: handleAppendEntries_currentTerm.", "--", "shelve.", "--", "shelve.", "*", "split.", "intros Hcontra.", "subst.", "--", "shelve.", "--", "shelve.", "+", "destruct (haveNewEntries st es) eqn:Hnew.", "*", "right.", "right.", "split.", "--", "qsimpl time: 1 use: handleAppendEntries_currentTerm."], "tactic": "lia.", "exn": "The reference lia was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros h st t n pli plt es ci st' ps H.", "unfold handleAppendEntries in H.", "destruct (t <? currentTerm st) eqn:Ht.", "-", "left.", "inversion H.", "reflexivity.", "-", "destruct (pli =? 0) eqn:Hpli.", "+", "right.", "left.", "split.", "*", "qsimpl time: 1 use: handleAppendEntries_currentTerm.", "--", "shelve.", "--", "shelve.", "*", "split.", "intros Hcontra.", "subst.", "--", "shelve.", "--", "shelve.", "+", "destruct (haveNewEntries st es) eqn:Hnew.", "*", "right.", "right.", "split.", "--", "qsimpl time: 1 use: handleAppendEntries_currentTerm."], "tactic": "--", "exn": "Wrong bullet --: Current bullet -- is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["intros h st t n pli plt es ci st' ps H.", "unfold handleAppendEntries in H.", "destruct (t <? currentTerm st) eqn:Ht.", "-", "left.", "inversion H.", "reflexivity.", "-", "destruct (pli =? 0) eqn:Hpli.", "+", "right.", "left.", "split.", "*", "qsimpl time: 1 use: handleAppendEntries_currentTerm.", "--", "shelve.", "--", "shelve.", "*", "split.", "intros Hcontra.", "subst.", "--", "shelve.", "--", "shelve.", "+", "destruct (haveNewEntries st es) eqn:Hnew.", "*", "right.", "right.", "split.", "--", "qsimpl time: 1 use: handleAppendEntries_currentTerm.", "++", "shelve.", "++", "shelve.", "++", "shelve.", "++", "shelve.", "++", "shelve.", "++", "shelve.", "--"], "tactic": "split.", "exn": "In environment orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params h : name st : raft_data t : term n : name pli : logIndex plt : term es : list entry ci : logIndex st' : raft_data ps : msg Ht : (t <? currentTerm st) = false Hpli : (pli =? 0) = false Hnew : haveNewEntries st es = true H : match findAtIndex (log st) pli with | Some e => if negb (plt =? eTerm e) then (st, AppendEntriesReply (currentTerm st) es false) else ({[{[{[{[advanceCurrentTerm st t with log := es ++ removeAfterIndex (log st) pli]} with commitIndex := Init.Nat.max (commitIndex st) (Init.Nat.min ci (maxIndex (es ++ removeAfterIndex (log st) pli)))]} with type := Follower]} with leaderId := Some n]}, AppendEntriesReply t es true) | None => (st, AppendEntriesReply (currentTerm st) es false) end = (st', ps) Unable to unify \"es ++ removeAfterIndex (log st) pli\" with \"log st'\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros h st t n pli plt es ci st' ps H.", "unfold handleAppendEntries in H.", "destruct (t <? currentTerm st) eqn:Ht.", "-", "left.", "inversion H.", "reflexivity.", "-", "destruct (pli =? 0) eqn:Hpli.", "+", "right.", "left.", "split.", "*", "qsimpl time: 1 use: handleAppendEntries_currentTerm.", "--", "shelve.", "--", "shelve.", "*", "split.", "intros Hcontra.", "subst.", "--", "shelve.", "--", "shelve.", "+", "destruct (haveNewEntries st es) eqn:Hnew.", "*", "right.", "right.", "split.", "--", "qsimpl time: 1 use: handleAppendEntries_currentTerm.", "++", "shelve.", "++", "shelve.", "++", "shelve.", "++", "shelve.", "++", "shelve.", "++", "shelve.", "--"], "tactic": "qsimpl time: 1 use: handleAppendEntries_currentTerm,discriminate.", "exn": "The reference discriminate was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros h st t n pli plt es ci st' ps H.", "unfold handleAppendEntries in H.", "destruct (t <? currentTerm st) eqn:Ht.", "-", "left.", "inversion H.", "reflexivity.", "-", "destruct (pli =? 0) eqn:Hpli.", "+", "right.", "left.", "split.", "*", "qsimpl time: 1 use: handleAppendEntries_currentTerm.", "--", "shelve.", "--", "shelve.", "*", "split.", "intros Hcontra.", "subst.", "--", "shelve.", "--", "shelve.", "+", "destruct (haveNewEntries st es) eqn:Hnew.", "*", "right.", "right.", "split.", "--", "qsimpl time: 1 use: handleAppendEntries_currentTerm.", "++", "shelve.", "++", "shelve.", "++", "shelve.", "++", "shelve.", "++", "shelve.", "++", "shelve.", "--", "qsimpl time: 1 use: handleAppendEntries_currentTerm.", "++"], "tactic": "intros Hcontra.", "exn": "No product even after head-reduction.", "type": "no_product", "handled": true}, {"ctx": ["intros h st t n pli plt es ci st' ps H.", "unfold handleAppendEntries in H.", "destruct (t <? currentTerm st) eqn:Ht.", "-", "left.", "inversion H.", "reflexivity.", "-", "destruct (pli =? 0) eqn:Hpli.", "+", "right.", "left.", "split.", "*", "qsimpl time: 1 use: handleAppendEntries_currentTerm.", "--", "shelve.", "--", "shelve.", "*", "split.", "intros Hcontra.", "subst.", "--", "shelve.", "--", "shelve.", "+", "destruct (haveNewEntries st es) eqn:Hnew.", "*", "right.", "right.", "split.", "--", "qsimpl time: 1 use: handleAppendEntries_currentTerm.", "++", "shelve.", "++", "shelve.", "++", "shelve.", "++", "shelve.", "++", "shelve.", "++", "shelve.", "--", "qsimpl time: 1 use: handleAppendEntries_currentTerm.", "++"], "tactic": "++", "exn": "Wrong bullet ++: Current bullet ++ is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["intros h st t n pli plt es ci st' ps H.", "unfold handleAppendEntries in H.", "destruct (t <? currentTerm st) eqn:Ht.", "-", "left.", "inversion H.", "reflexivity.", "-", "destruct (pli =? 0) eqn:Hpli.", "+", "right.", "left.", "split.", "*", "qsimpl time: 1 use: handleAppendEntries_currentTerm.", "--", "shelve.", "--", "shelve.", "*", "split.", "intros Hcontra.", "subst.", "--", "shelve.", "--", "shelve.", "+", "destruct (haveNewEntries st es) eqn:Hnew.", "*", "right.", "right.", "split.", "--", "qsimpl time: 1 use: handleAppendEntries_currentTerm.", "++", "shelve.", "++", "shelve.", "++", "shelve.", "++", "shelve.", "++", "shelve.", "++", "shelve.", "--", "qsimpl time: 1 use: handleAppendEntries_currentTerm.", "++", "shelve.", "++"], "tactic": "split.", "exn": "In environment orig_base_params : BaseParams raft_params : RaftParams orig_base_params H0 : forall (h : name) (st : raft_data) (t : term) (n : name) (pli : logIndex) (plt : term) (es : list entry) (ci : logIndex) (st' : raft_data) (ps : msg), handleAppendEntries h st t n pli plt es ci = (st', ps) -> currentTerm st <= currentTerm st' h : name t : term n : name pli : logIndex plt : term es : list entry ci : logIndex st' : raft_data Ht : (t <? currentTerm st') = false Hpli : (pli =? 0) = false Heqo : findAtIndex (log st') pli = None Hnew : haveNewEntries st' es = true init : data handler : input -> data -> output * data Unable to unify \"es ++ removeAfterIndex (log st') pli\" with \"log st'\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros h st t n pli plt es ci st' ps H.", "unfold handleAppendEntries in H.", "destruct (t <? currentTerm st) eqn:Ht.", "-", "left.", "inversion H.", "reflexivity.", "-", "destruct (pli =? 0) eqn:Hpli.", "+", "right.", "left.", "split.", "*", "qsimpl time: 1 use: handleAppendEntries_currentTerm.", "--", "shelve.", "--", "shelve.", "*", "split.", "intros Hcontra.", "subst.", "--", "shelve.", "--", "shelve.", "+", "destruct (haveNewEntries st es) eqn:Hnew.", "*", "right.", "right.", "split.", "--", "qsimpl time: 1 use: handleAppendEntries_currentTerm.", "++", "shelve.", "++", "shelve.", "++", "shelve.", "++", "shelve.", "++", "shelve.", "++", "shelve.", "--", "qsimpl time: 1 use: handleAppendEntries_currentTerm.", "++", "shelve.", "++"], "tactic": "qsimpl time: 1 use: handleAppendEntries_currentTerm,congruence,discriminate.", "exn": "The reference congruence was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros h st t n pli plt es ci st' ps H.", "unfold handleAppendEntries in H.", "destruct (t <? currentTerm st) eqn:Ht.", "-", "left.", "inversion H.", "reflexivity.", "-", "destruct (pli =? 0) eqn:Hpli.", "+", "right.", "left.", "split.", "*", "qsimpl time: 1 use: handleAppendEntries_currentTerm.", "--", "shelve.", "--", "shelve.", "*", "split.", "intros Hcontra.", "subst.", "--", "shelve.", "--", "shelve.", "+", "destruct (haveNewEntries st es) eqn:Hnew.", "*", "right.", "right.", "split.", "--", "qsimpl time: 1 use: handleAppendEntries_currentTerm.", "++", "shelve.", "++", "shelve.", "++", "shelve.", "++", "shelve.", "++", "shelve.", "++", "shelve.", "--", "qsimpl time: 1 use: handleAppendEntries_currentTerm.", "++", "shelve.", "++"], "tactic": "qsimpl time: 1 use: handleAppendEntries_currentTerm,discriminate.", "exn": "The reference discriminate was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros h st t n pli plt es ci st' ps H.", "unfold handleAppendEntries in H.", "destruct (t <? currentTerm st) eqn:Ht.", "-", "left.", "inversion H.", "reflexivity.", "-", "destruct (pli =? 0) eqn:Hpli.", "+", "right.", "left.", "split.", "*", "qsimpl time: 1 use: handleAppendEntries_currentTerm.", "--", "shelve.", "--", "shelve.", "*", "split.", "intros Hcontra.", "subst.", "--", "shelve.", "--", "shelve.", "+", "destruct (haveNewEntries st es) eqn:Hnew.", "*", "right.", "right.", "split.", "--", "qsimpl time: 1 use: handleAppendEntries_currentTerm.", "++", "shelve.", "++", "shelve.", "++", "shelve.", "++", "shelve.", "++", "shelve.", "++", "shelve.", "--", "qsimpl time: 1 use: handleAppendEntries_currentTerm.", "++", "shelve.", "++", "qsimpl time: 1 use: handleAppendEntries_currentTerm."], "tactic": "intros Hcontra.", "exn": "No product even after head-reduction.", "type": "no_product", "handled": true}, {"ctx": ["intros h st t n pli plt es ci st' ps H.", "unfold handleAppendEntries in H.", "destruct (t <? currentTerm st) eqn:Ht.", "-", "left.", "inversion H.", "reflexivity.", "-", "destruct (pli =? 0) eqn:Hpli.", "+", "right.", "left.", "split.", "*", "qsimpl time: 1 use: handleAppendEntries_currentTerm.", "--", "shelve.", "--", "shelve.", "*", "split.", "intros Hcontra.", "subst.", "--", "shelve.", "--", "shelve.", "+", "destruct (haveNewEntries st es) eqn:Hnew.", "*", "right.", "right.", "split.", "--", "qsimpl time: 1 use: handleAppendEntries_currentTerm.", "++", "shelve.", "++", "shelve.", "++", "shelve.", "++", "shelve.", "++", "shelve.", "++", "shelve.", "--", "qsimpl time: 1 use: handleAppendEntries_currentTerm.", "++", "shelve.", "++", "qsimpl time: 1 use: handleAppendEntries_currentTerm.", "apply beq_nat_false in Hpli."], "tactic": "-", "exn": "Wrong bullet -: Current bullet ++ is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["intros h st t n pli plt es ci st' ps H.", "unfold handleAppendEntries in H.", "destruct (t <? currentTerm st) eqn:Ht.", "-", "left.", "inversion H.", "reflexivity.", "-", "destruct (pli =? 0) eqn:Hpli.", "+", "right.", "left.", "split.", "*", "qsimpl time: 1 use: handleAppendEntries_currentTerm.", "--", "shelve.", "--", "shelve.", "*", "split.", "intros Hcontra.", "subst.", "--", "shelve.", "--", "shelve.", "+", "destruct (haveNewEntries st es) eqn:Hnew.", "*", "right.", "right.", "split.", "--", "qsimpl time: 1 use: handleAppendEntries_currentTerm.", "++", "shelve.", "++", "shelve.", "++", "shelve.", "++", "shelve.", "++", "shelve.", "++", "shelve.", "--", "qsimpl time: 1 use: handleAppendEntries_currentTerm.", "++", "shelve.", "++", "qsimpl time: 1 use: handleAppendEntries_currentTerm.", "apply beq_nat_false in Hpli.", "shelve."], "tactic": "-", "exn": "Wrong bullet -: Expecting *.", "type": "wrong_bullet", "handled": true}, {"ctx": ["intros h st t n pli plt es ci st' ps H.", "unfold handleAppendEntries in H.", "destruct (t <? currentTerm st) eqn:Ht.", "-", "left.", "inversion H.", "reflexivity.", "-", "destruct (pli =? 0) eqn:Hpli.", "+", "right.", "left.", "split.", "*", "qsimpl time: 1 use: handleAppendEntries_currentTerm.", "--", "shelve.", "--", "shelve.", "*", "split.", "intros Hcontra.", "subst.", "--", "shelve.", "--", "shelve.", "+", "destruct (haveNewEntries st es) eqn:Hnew.", "*", "right.", "right.", "split.", "--", "qsimpl time: 1 use: handleAppendEntries_currentTerm.", "++", "shelve.", "++", "shelve.", "++", "shelve.", "++", "shelve.", "++", "shelve.", "++", "shelve.", "--", "qsimpl time: 1 use: handleAppendEntries_currentTerm.", "++", "shelve.", "++", "qsimpl time: 1 use: handleAppendEntries_currentTerm.", "apply beq_nat_false in Hpli.", "shelve.", "*", "unfold eIndex."], "tactic": "destruct e.", "exn": "The reference e was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros h st t n pli plt es ci st' ps H.", "unfold handleAppendEntries in H.", "destruct (t <? currentTerm st) eqn:Ht.", "-", "left.", "inversion H.", "reflexivity.", "-", "destruct (pli =? 0) eqn:Hpli.", "+", "right.", "left.", "split.", "*", "qsimpl time: 1 use: handleAppendEntries_currentTerm.", "--", "shelve.", "--", "shelve.", "*", "split.", "intros Hcontra.", "subst.", "--", "shelve.", "--", "shelve.", "+", "destruct (haveNewEntries st es) eqn:Hnew.", "*", "right.", "right.", "split.", "--", "qsimpl time: 1 use: handleAppendEntries_currentTerm.", "++", "shelve.", "++", "shelve.", "++", "shelve.", "++", "shelve.", "++", "shelve.", "++", "shelve.", "--", "qsimpl time: 1 use: handleAppendEntries_currentTerm.", "++", "shelve.", "++", "qsimpl time: 1 use: handleAppendEntries_currentTerm.", "apply beq_nat_false in Hpli.", "shelve.", "*", "unfold eIndex."], "tactic": "apply He.", "exn": "The reference He was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros h st t n pli plt es ci st' ps H.", "unfold handleAppendEntries in H.", "destruct (t <? currentTerm st) eqn:Ht.", "-", "left.", "inversion H.", "reflexivity.", "-", "destruct (pli =? 0) eqn:Hpli.", "+", "right.", "left.", "split.", "*", "qsimpl time: 1 use: handleAppendEntries_currentTerm.", "--", "shelve.", "--", "shelve.", "*", "split.", "intros Hcontra.", "subst.", "--", "shelve.", "--", "shelve.", "+", "destruct (haveNewEntries st es) eqn:Hnew.", "*", "right.", "right.", "split.", "--", "qsimpl time: 1 use: handleAppendEntries_currentTerm.", "++", "shelve.", "++", "shelve.", "++", "shelve.", "++", "shelve.", "++", "shelve.", "++", "shelve.", "--", "qsimpl time: 1 use: handleAppendEntries_currentTerm.", "++", "shelve.", "++", "qsimpl time: 1 use: handleAppendEntries_currentTerm.", "apply beq_nat_false in Hpli.", "shelve.", "*", "unfold eIndex.", "apply msg_ind."], "tactic": "-", "exn": "Wrong bullet -: Current bullet * is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["intros h st t n pli plt es ci st' ps H.", "unfold handleAppendEntries in H.", "destruct (t <? currentTerm st) eqn:Ht.", "-", "left.", "inversion H.", "reflexivity.", "-", "destruct (pli =? 0) eqn:Hpli.", "+", "right.", "left.", "split.", "*", "qsimpl time: 1 use: handleAppendEntries_currentTerm.", "--", "shelve.", "--", "shelve.", "*", "split.", "intros Hcontra.", "subst.", "--", "shelve.", "--", "shelve.", "+", "destruct (haveNewEntries st es) eqn:Hnew.", "*", "right.", "right.", "split.", "--", "qsimpl time: 1 use: handleAppendEntries_currentTerm.", "++", "shelve.", "++", "shelve.", "++", "shelve.", "++", "shelve.", "++", "shelve.", "++", "shelve.", "--", "qsimpl time: 1 use: handleAppendEntries_currentTerm.", "++", "shelve.", "++", "qsimpl time: 1 use: handleAppendEntries_currentTerm.", "apply beq_nat_false in Hpli.", "shelve.", "*", "unfold eIndex.", "apply msg_ind.", "--", "shelve.", "--", "shelve.", "--", "shelve.", "--", "shelve.", "--", "shelve."], "tactic": "-", "exn": "Wrong bullet -: No more subgoals.", "type": "no_more_subgoals", "handled": true}]}, "chat": [], "original": "intros h st t n pli plt es ci st' ps H. unfold handleAppendEntries in H. destruct (t <? currentTerm st) eqn:Ht. - left. inversion H. reflexivity. - destruct (pli =? 0) eqn:Hpli. + right. left. split. * apply handleAppendEntries_currentTerm with (h := h) (st := st) (t := t) (n := n) (pli := 0) (plt := plt) (es := es) (ci := ci) (st' := st') (ps := ps) in H. lia. * split. { intros Hcontra. subst. simpl in Hpli. discriminate. } split. { reflexivity. } inversion H. reflexivity. + destruct (haveNewEntries st es) eqn:Hnew. * right. right. split. -- apply handleAppendEntries_currentTerm with (h := h) (st := st) (t := t) (n := n) (pli := pli) (plt := plt) (es := es) (ci := ci) (st' := st') (ps := ps) in H. lia. -- split. ++ intros Hcontra. subst. simpl in Hnew. congruence. ++ split. { intros Hcontra. apply beq_nat_false in Hpli. congruence. } split. { apply incoming_entries_in_log with (i := pli) (es := es) (log := log st) in Hnew. destruct Hnew as [e [He HIn]]. exists e. repeat split. - unfold eIndex. destruct e. simpl. apply He. - unfold eTerm. destruct e. simpl. eapply He. - apply HIn. } inversion H. reflexivity. * left. inversion H. eapply entries_match_scratch in H. -- apply H. -- apply sorted_nil.", "back_times": 1, "succ": false, "time": 315.71126317977905}]