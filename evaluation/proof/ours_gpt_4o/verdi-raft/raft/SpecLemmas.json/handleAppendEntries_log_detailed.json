[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": ["intros h st t n pli plt es ci st' ps H.", "pose proof handleAppendEntries_currentTerm _ _ _ _ _ _ _ _ _ _ H as Ht.", "pose proof handleAppendEntries_log _ _ _ _ _ _ _ _ _ _ H as Hlog.", "destruct (Nat.ltb t (currentTerm st)) eqn:Hlt.", "-", "apply Nat.ltb_lt in Hlt.", "left.", "split.", "+"], "tactic": ["apply handleAppendEntriesReply_same_commitIndex with (n := h) (st := st) (src := n) (t := t) (es := es) (b := false) (l := ps); auto.", ""], "exn": "No such bound variable n (possible names are: n0, st0, src, t0, es0, b, st'0 and l).", "type": "no_such_bound", "handled": false}, {"ctx": ["intros h st t n pli plt es ci st' ps H.", "pose proof handleAppendEntries_currentTerm _ _ _ _ _ _ _ _ _ _ H as Ht.", "pose proof handleAppendEntries_log _ _ _ _ _ _ _ _ _ _ H as Hlog.", "destruct (Nat.ltb t (currentTerm st)) eqn:Hlt.", "-", "apply Nat.ltb_lt in Hlt.", "left.", "split.", "+"], "tactic": "+", "exn": "Wrong bullet +: Current bullet + is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["intros h st t n pli plt es ci st' ps H.", "pose proof handleAppendEntries_currentTerm _ _ _ _ _ _ _ _ _ _ H as Ht.", "pose proof handleAppendEntries_log _ _ _ _ _ _ _ _ _ _ H as Hlog.", "destruct (Nat.ltb t (currentTerm st)) eqn:Hlt.", "-", "apply Nat.ltb_lt in Hlt.", "left.", "split.", "+", "shelve.", "+"], "tactic": ["apply handleAppendEntriesReply_same_log with (n := h) (st := st) (src := n) (t := t) (es := es) (b := false) (l := ps); auto.", ""], "exn": "No such bound variable n (possible names are: n0, st0, src, t0, es0, b, st'0 and l).", "type": "no_such_bound", "handled": false}, {"ctx": ["intros h st t n pli plt es ci st' ps H.", "pose proof handleAppendEntries_currentTerm _ _ _ _ _ _ _ _ _ _ H as Ht.", "pose proof handleAppendEntries_log _ _ _ _ _ _ _ _ _ _ H as Hlog.", "destruct (Nat.ltb t (currentTerm st)) eqn:Hlt.", "-", "apply Nat.ltb_lt in Hlt.", "left.", "split.", "+", "shelve.", "+"], "tactic": "-", "exn": "Wrong bullet -: Current bullet + is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["intros h st t n pli plt es ci st' ps H.", "pose proof handleAppendEntries_currentTerm _ _ _ _ _ _ _ _ _ _ H as Ht.", "pose proof handleAppendEntries_log _ _ _ _ _ _ _ _ _ _ H as Hlog.", "destruct (Nat.ltb t (currentTerm st)) eqn:Hlt.", "-", "apply Nat.ltb_lt in Hlt.", "left.", "split.", "+", "shelve.", "+", "shelve.", "-", "apply Nat.ltb_ge in Hlt.", "destruct (Nat.eqb pli 0) eqn:Hpli.", "+", "apply Nat.eqb_eq in Hpli.", "assert (es <> [] /\\ (findAtIndex (log st) (maxIndex es) = None \\/ (exists e : entry, findAtIndex (log st) (maxIndex es) = Some e /\\ eTerm e <> maxTerm es))) as Hes.", "apply haveNewEntries_true with (st := st); auto."], "tactic": "destruct Hes as [Hes1 Hes2].", "exn": "The reference Hes was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros h st t n pli plt es ci st' ps H.", "pose proof handleAppendEntries_currentTerm _ _ _ _ _ _ _ _ _ _ H as Ht.", "pose proof handleAppendEntries_log _ _ _ _ _ _ _ _ _ _ H as Hlog.", "destruct (Nat.ltb t (currentTerm st)) eqn:Hlt.", "-", "apply Nat.ltb_lt in Hlt.", "left.", "split.", "+", "shelve.", "+", "shelve.", "-", "apply Nat.ltb_ge in Hlt.", "destruct (Nat.eqb pli 0) eqn:Hpli.", "+", "apply Nat.eqb_eq in Hpli.", "assert (es <> [] /\\ (findAtIndex (log st) (maxIndex es) = None \\/ (exists e : entry, findAtIndex (log st) (maxIndex es) = Some e /\\ eTerm e <> maxTerm es))) as Hes.", "apply haveNewEntries_true with (st := st); auto.", "destruct handleRequestVote as [handleRequestVote1 handleRequestVote2]."], "tactic": "right.", "exn": "Not an inductive product.", "type": "not_inductive_product", "handled": true}, {"ctx": ["intros h st t n pli plt es ci st' ps H.", "pose proof handleAppendEntries_currentTerm _ _ _ _ _ _ _ _ _ _ H as Ht.", "pose proof handleAppendEntries_log _ _ _ _ _ _ _ _ _ _ H as Hlog.", "destruct (Nat.ltb t (currentTerm st)) eqn:Hlt.", "-", "apply Nat.ltb_lt in Hlt.", "left.", "split.", "+", "shelve.", "+", "shelve.", "-", "apply Nat.ltb_ge in Hlt.", "destruct (Nat.eqb pli 0) eqn:Hpli.", "+", "apply Nat.eqb_eq in Hpli.", "assert (es <> [] /\\ (findAtIndex (log st) (maxIndex es) = None \\/ (exists e : entry, findAtIndex (log st) (maxIndex es) = Some e /\\ eTerm e <> maxTerm es))) as Hes.", "apply haveNewEntries_true with (st := st); auto.", "destruct handleRequestVote as [handleRequestVote1 handleRequestVote2]."], "tactic": "qsimpl time: 1 use: handleAppendEntriesReply_same_log,false,auto,handleAppendEntriesReply_same_commitIndex.", "exn": "The reference auto was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros h st t n pli plt es ci st' ps H.", "pose proof handleAppendEntries_currentTerm _ _ _ _ _ _ _ _ _ _ H as Ht.", "pose proof handleAppendEntries_log _ _ _ _ _ _ _ _ _ _ H as Hlog.", "destruct (Nat.ltb t (currentTerm st)) eqn:Hlt.", "-", "apply Nat.ltb_lt in Hlt.", "left.", "split.", "+", "shelve.", "+", "shelve.", "-", "apply Nat.ltb_ge in Hlt.", "destruct (Nat.eqb pli 0) eqn:Hpli.", "+", "apply Nat.eqb_eq in Hpli.", "assert (es <> [] /\\ (findAtIndex (log st) (maxIndex es) = None \\/ (exists e : entry, findAtIndex (log st) (maxIndex es) = Some e /\\ eTerm e <> maxTerm es))) as Hes.", "apply haveNewEntries_true with (st := st); auto.", "destruct handleRequestVote as [handleRequestVote1 handleRequestVote2].", "qsimpl time: 1 use: handleAppendEntriesReply_same_log,false,handleAppendEntriesReply_same_commitIndex."], "tactic": "left.", "exn": "Not an inductive goal with 2 constructors.", "type": "not_inductive_goal", "handled": true}, {"ctx": ["intros h st t n pli plt es ci st' ps H.", "pose proof handleAppendEntries_currentTerm _ _ _ _ _ _ _ _ _ _ H as Ht.", "pose proof handleAppendEntries_log _ _ _ _ _ _ _ _ _ _ H as Hlog.", "destruct (Nat.ltb t (currentTerm st)) eqn:Hlt.", "-", "apply Nat.ltb_lt in Hlt.", "left.", "split.", "+", "shelve.", "+", "shelve.", "-", "apply Nat.ltb_ge in Hlt.", "destruct (Nat.eqb pli 0) eqn:Hpli.", "+", "apply Nat.eqb_eq in Hpli.", "assert (es <> [] /\\ (findAtIndex (log st) (maxIndex es) = None \\/ (exists e : entry, findAtIndex (log st) (maxIndex es) = Some e /\\ eTerm e <> maxTerm es))) as Hes.", "apply haveNewEntries_true with (st := st); auto.", "destruct handleRequestVote as [handleRequestVote1 handleRequestVote2].", "qsimpl time: 1 use: handleAppendEntriesReply_same_log,false,handleAppendEntriesReply_same_commitIndex."], "tactic": "qsimpl time: 1 use: handleAppendEntriesReply_same_log,false,auto,handleAppendEntriesReply_same_commitIndex.", "exn": "The reference auto was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros h st t n pli plt es ci st' ps H.", "pose proof handleAppendEntries_currentTerm _ _ _ _ _ _ _ _ _ _ H as Ht.", "pose proof handleAppendEntries_log _ _ _ _ _ _ _ _ _ _ H as Hlog.", "destruct (Nat.ltb t (currentTerm st)) eqn:Hlt.", "-", "apply Nat.ltb_lt in Hlt.", "left.", "split.", "+", "shelve.", "+", "shelve.", "-", "apply Nat.ltb_ge in Hlt.", "destruct (Nat.eqb pli 0) eqn:Hpli.", "+", "apply Nat.eqb_eq in Hpli.", "assert (es <> [] /\\ (findAtIndex (log st) (maxIndex es) = None \\/ (exists e : entry, findAtIndex (log st) (maxIndex es) = Some e /\\ eTerm e <> maxTerm es))) as Hes.", "apply haveNewEntries_true with (st := st); auto.", "destruct handleRequestVote as [handleRequestVote1 handleRequestVote2].", "qsimpl time: 1 use: handleAppendEntriesReply_same_log,false,handleAppendEntriesReply_same_commitIndex.", "qsimpl time: 1 use: handleAppendEntriesReply_same_log,false,handleAppendEntriesReply_same_commitIndex."], "tactic": "split.", "exn": "Not an inductive goal with 1 constructor.", "type": "not_inductive_goal", "handled": true}, {"ctx": ["intros h st t n pli plt es ci st' ps H.", "pose proof handleAppendEntries_currentTerm _ _ _ _ _ _ _ _ _ _ H as Ht.", "pose proof handleAppendEntries_log _ _ _ _ _ _ _ _ _ _ H as Hlog.", "destruct (Nat.ltb t (currentTerm st)) eqn:Hlt.", "-", "apply Nat.ltb_lt in Hlt.", "left.", "split.", "+", "shelve.", "+", "shelve.", "-", "apply Nat.ltb_ge in Hlt.", "destruct (Nat.eqb pli 0) eqn:Hpli.", "+", "apply Nat.eqb_eq in Hpli.", "assert (es <> [] /\\ (findAtIndex (log st) (maxIndex es) = None \\/ (exists e : entry, findAtIndex (log st) (maxIndex es) = Some e /\\ eTerm e <> maxTerm es))) as Hes.", "apply haveNewEntries_true with (st := st); auto.", "destruct handleRequestVote as [handleRequestVote1 handleRequestVote2].", "qsimpl time: 1 use: handleAppendEntriesReply_same_log,false,handleAppendEntriesReply_same_commitIndex.", "qsimpl time: 1 use: handleAppendEntriesReply_same_log,false,handleAppendEntriesReply_same_commitIndex."], "tactic": "qsimpl time: 1 use: handleAppendEntriesReply_same_log,false,auto,handleAppendEntriesReply_same_commitIndex.", "exn": "The reference auto was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros h st t n pli plt es ci st' ps H.", "pose proof handleAppendEntries_currentTerm _ _ _ _ _ _ _ _ _ _ H as Ht.", "pose proof handleAppendEntries_log _ _ _ _ _ _ _ _ _ _ H as Hlog.", "destruct (Nat.ltb t (currentTerm st)) eqn:Hlt.", "-", "apply Nat.ltb_lt in Hlt.", "left.", "split.", "+", "shelve.", "+", "shelve.", "-", "apply Nat.ltb_ge in Hlt.", "destruct (Nat.eqb pli 0) eqn:Hpli.", "+", "apply Nat.eqb_eq in Hpli.", "assert (es <> [] /\\ (findAtIndex (log st) (maxIndex es) = None \\/ (exists e : entry, findAtIndex (log st) (maxIndex es) = Some e /\\ eTerm e <> maxTerm es))) as Hes.", "apply haveNewEntries_true with (st := st); auto.", "destruct handleRequestVote as [handleRequestVote1 handleRequestVote2].", "qsimpl time: 1 use: handleAppendEntriesReply_same_log,false,handleAppendEntriesReply_same_commitIndex.", "qsimpl time: 1 use: handleAppendEntriesReply_same_log,false,handleAppendEntriesReply_same_commitIndex.", "qsimpl time: 1 use: handleAppendEntriesReply_same_log,false,handleAppendEntriesReply_same_commitIndex.", "*"], "tactic": "*", "exn": "Wrong bullet *: Current bullet * is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["intros h st t n pli plt es ci st' ps H.", "pose proof handleAppendEntries_currentTerm _ _ _ _ _ _ _ _ _ _ H as Ht.", "pose proof handleAppendEntries_log _ _ _ _ _ _ _ _ _ _ H as Hlog.", "destruct (Nat.ltb t (currentTerm st)) eqn:Hlt.", "-", "apply Nat.ltb_lt in Hlt.", "left.", "split.", "+", "shelve.", "+", "shelve.", "-", "apply Nat.ltb_ge in Hlt.", "destruct (Nat.eqb pli 0) eqn:Hpli.", "+", "apply Nat.eqb_eq in Hpli.", "assert (es <> [] /\\ (findAtIndex (log st) (maxIndex es) = None \\/ (exists e : entry, findAtIndex (log st) (maxIndex es) = Some e /\\ eTerm e <> maxTerm es))) as Hes.", "apply haveNewEntries_true with (st := st); auto.", "destruct handleRequestVote as [handleRequestVote1 handleRequestVote2].", "qsimpl time: 1 use: handleAppendEntriesReply_same_log,false,handleAppendEntriesReply_same_commitIndex.", "qsimpl time: 1 use: handleAppendEntriesReply_same_log,false,handleAppendEntriesReply_same_commitIndex.", "qsimpl time: 1 use: handleAppendEntriesReply_same_log,false,handleAppendEntriesReply_same_commitIndex.", "*", "shelve.", "*"], "tactic": "exists (mkEntry n (eClient e) (eId e) (eIndex e) (eTerm e) (eInput e)); split; [assumption |].", "exn": "The reference e was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros h st t n pli plt es ci st' ps H.", "pose proof handleAppendEntries_currentTerm _ _ _ _ _ _ _ _ _ _ H as Ht.", "pose proof handleAppendEntries_log _ _ _ _ _ _ _ _ _ _ H as Hlog.", "destruct (Nat.ltb t (currentTerm st)) eqn:Hlt.", "-", "apply Nat.ltb_lt in Hlt.", "left.", "split.", "+", "shelve.", "+", "shelve.", "-", "apply Nat.ltb_ge in Hlt.", "destruct (Nat.eqb pli 0) eqn:Hpli.", "+", "apply Nat.eqb_eq in Hpli.", "assert (es <> [] /\\ (findAtIndex (log st) (maxIndex es) = None \\/ (exists e : entry, findAtIndex (log st) (maxIndex es) = Some e /\\ eTerm e <> maxTerm es))) as Hes.", "apply haveNewEntries_true with (st := st); auto.", "destruct handleRequestVote as [handleRequestVote1 handleRequestVote2].", "qsimpl time: 1 use: handleAppendEntriesReply_same_log,false,handleAppendEntriesReply_same_commitIndex.", "qsimpl time: 1 use: handleAppendEntriesReply_same_log,false,handleAppendEntriesReply_same_commitIndex.", "qsimpl time: 1 use: handleAppendEntriesReply_same_log,false,handleAppendEntriesReply_same_commitIndex.", "*", "shelve.", "*"], "tactic": "split; [apply Hlog3 | destruct H as [_ [Hexist ?]]; eapply findAtIndex_elim; eauto].", "exn": "Not an inductive goal with 1 constructor.", "type": "not_inductive_goal", "handled": true}, {"ctx": ["intros h st t n pli plt es ci st' ps H.", "pose proof handleAppendEntries_currentTerm _ _ _ _ _ _ _ _ _ _ H as Ht.", "pose proof handleAppendEntries_log _ _ _ _ _ _ _ _ _ _ H as Hlog.", "destruct (Nat.ltb t (currentTerm st)) eqn:Hlt.", "-", "apply Nat.ltb_lt in Hlt.", "left.", "split.", "+", "shelve.", "+", "shelve.", "-", "apply Nat.ltb_ge in Hlt.", "destruct (Nat.eqb pli 0) eqn:Hpli.", "+", "apply Nat.eqb_eq in Hpli.", "assert (es <> [] /\\ (findAtIndex (log st) (maxIndex es) = None \\/ (exists e : entry, findAtIndex (log st) (maxIndex es) = Some e /\\ eTerm e <> maxTerm es))) as Hes.", "apply haveNewEntries_true with (st := st); auto.", "destruct handleRequestVote as [handleRequestVote1 handleRequestVote2].", "qsimpl time: 1 use: handleAppendEntriesReply_same_log,false,handleAppendEntriesReply_same_commitIndex.", "qsimpl time: 1 use: handleAppendEntriesReply_same_log,false,handleAppendEntriesReply_same_commitIndex.", "qsimpl time: 1 use: handleAppendEntriesReply_same_log,false,handleAppendEntriesReply_same_commitIndex.", "*", "shelve.", "*"], "tactic": "qsimpl time: 1 use: auto,maxIndex_non_empty,findAtIndex_elim,Nat,maxIndex,contradiction,handleAppendEntriesReply_same_log,handleAppendEntriesReply_same_commitIndex,Init,eTerm,max_r,max,false.", "exn": "The reference auto was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros h st t n pli plt es ci st' ps H.", "pose proof handleAppendEntries_currentTerm _ _ _ _ _ _ _ _ _ _ H as Ht.", "pose proof handleAppendEntries_log _ _ _ _ _ _ _ _ _ _ H as Hlog.", "destruct (Nat.ltb t (currentTerm st)) eqn:Hlt.", "-", "apply Nat.ltb_lt in Hlt.", "left.", "split.", "+", "shelve.", "+", "shelve.", "-", "apply Nat.ltb_ge in Hlt.", "destruct (Nat.eqb pli 0) eqn:Hpli.", "+", "apply Nat.eqb_eq in Hpli.", "assert (es <> [] /\\ (findAtIndex (log st) (maxIndex es) = None \\/ (exists e : entry, findAtIndex (log st) (maxIndex es) = Some e /\\ eTerm e <> maxTerm es))) as Hes.", "apply haveNewEntries_true with (st := st); auto.", "destruct handleRequestVote as [handleRequestVote1 handleRequestVote2].", "qsimpl time: 1 use: handleAppendEntriesReply_same_log,false,handleAppendEntriesReply_same_commitIndex.", "qsimpl time: 1 use: handleAppendEntriesReply_same_log,false,handleAppendEntriesReply_same_commitIndex.", "qsimpl time: 1 use: handleAppendEntriesReply_same_log,false,handleAppendEntriesReply_same_commitIndex.", "*", "shelve.", "*"], "tactic": "qsimpl time: 1 use: maxIndex_non_empty,findAtIndex_elim,Nat,maxIndex,contradiction,handleAppendEntriesReply_same_log,handleAppendEntriesReply_same_commitIndex,Init,eTerm,max_r,max,false.", "exn": "The reference Nat was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros h st t n pli plt es ci st' ps H.", "pose proof handleAppendEntries_currentTerm _ _ _ _ _ _ _ _ _ _ H as Ht.", "pose proof handleAppendEntries_log _ _ _ _ _ _ _ _ _ _ H as Hlog.", "destruct (Nat.ltb t (currentTerm st)) eqn:Hlt.", "-", "apply Nat.ltb_lt in Hlt.", "left.", "split.", "+", "shelve.", "+", "shelve.", "-", "apply Nat.ltb_ge in Hlt.", "destruct (Nat.eqb pli 0) eqn:Hpli.", "+", "apply Nat.eqb_eq in Hpli.", "assert (es <> [] /\\ (findAtIndex (log st) (maxIndex es) = None \\/ (exists e : entry, findAtIndex (log st) (maxIndex es) = Some e /\\ eTerm e <> maxTerm es))) as Hes.", "apply haveNewEntries_true with (st := st); auto.", "destruct handleRequestVote as [handleRequestVote1 handleRequestVote2].", "qsimpl time: 1 use: handleAppendEntriesReply_same_log,false,handleAppendEntriesReply_same_commitIndex.", "qsimpl time: 1 use: handleAppendEntriesReply_same_log,false,handleAppendEntriesReply_same_commitIndex.", "qsimpl time: 1 use: handleAppendEntriesReply_same_log,false,handleAppendEntriesReply_same_commitIndex.", "*", "shelve.", "*"], "tactic": "qsimpl time: 1 use: maxIndex_non_empty,findAtIndex_elim,maxIndex,contradiction,handleAppendEntriesReply_same_log,handleAppendEntriesReply_same_commitIndex,Init,eTerm,max_r,max,false.", "exn": "The reference contradiction was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros h st t n pli plt es ci st' ps H.", "pose proof handleAppendEntries_currentTerm _ _ _ _ _ _ _ _ _ _ H as Ht.", "pose proof handleAppendEntries_log _ _ _ _ _ _ _ _ _ _ H as Hlog.", "destruct (Nat.ltb t (currentTerm st)) eqn:Hlt.", "-", "apply Nat.ltb_lt in Hlt.", "left.", "split.", "+", "shelve.", "+", "shelve.", "-", "apply Nat.ltb_ge in Hlt.", "destruct (Nat.eqb pli 0) eqn:Hpli.", "+", "apply Nat.eqb_eq in Hpli.", "assert (es <> [] /\\ (findAtIndex (log st) (maxIndex es) = None \\/ (exists e : entry, findAtIndex (log st) (maxIndex es) = Some e /\\ eTerm e <> maxTerm es))) as Hes.", "apply haveNewEntries_true with (st := st); auto.", "destruct handleRequestVote as [handleRequestVote1 handleRequestVote2].", "qsimpl time: 1 use: handleAppendEntriesReply_same_log,false,handleAppendEntriesReply_same_commitIndex.", "qsimpl time: 1 use: handleAppendEntriesReply_same_log,false,handleAppendEntriesReply_same_commitIndex.", "qsimpl time: 1 use: handleAppendEntriesReply_same_log,false,handleAppendEntriesReply_same_commitIndex.", "*", "shelve.", "*"], "tactic": "qsimpl time: 1 use: maxIndex_non_empty,findAtIndex_elim,maxIndex,handleAppendEntriesReply_same_log,handleAppendEntriesReply_same_commitIndex,Init,eTerm,max_r,max,false.", "exn": "The reference Init was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros h st t n pli plt es ci st' ps H.", "pose proof handleAppendEntries_currentTerm _ _ _ _ _ _ _ _ _ _ H as Ht.", "pose proof handleAppendEntries_log _ _ _ _ _ _ _ _ _ _ H as Hlog.", "destruct (Nat.ltb t (currentTerm st)) eqn:Hlt.", "-", "apply Nat.ltb_lt in Hlt.", "left.", "split.", "+", "shelve.", "+", "shelve.", "-", "apply Nat.ltb_ge in Hlt.", "destruct (Nat.eqb pli 0) eqn:Hpli.", "+", "apply Nat.eqb_eq in Hpli.", "assert (es <> [] /\\ (findAtIndex (log st) (maxIndex es) = None \\/ (exists e : entry, findAtIndex (log st) (maxIndex es) = Some e /\\ eTerm e <> maxTerm es))) as Hes.", "apply haveNewEntries_true with (st := st); auto.", "destruct handleRequestVote as [handleRequestVote1 handleRequestVote2].", "qsimpl time: 1 use: handleAppendEntriesReply_same_log,false,handleAppendEntriesReply_same_commitIndex.", "qsimpl time: 1 use: handleAppendEntriesReply_same_log,false,handleAppendEntriesReply_same_commitIndex.", "qsimpl time: 1 use: handleAppendEntriesReply_same_log,false,handleAppendEntriesReply_same_commitIndex.", "*", "shelve.", "*", "qsimpl time: 1 use: maxIndex_non_empty,findAtIndex_elim,maxIndex,handleAppendEntriesReply_same_log,handleAppendEntriesReply_same_commitIndex,eTerm,max_r,max,false."], "tactic": "+", "exn": "Wrong bullet +: Expecting *.", "type": "wrong_bullet", "handled": true}, {"ctx": ["intros h st t n pli plt es ci st' ps H.", "pose proof handleAppendEntries_currentTerm _ _ _ _ _ _ _ _ _ _ H as Ht.", "pose proof handleAppendEntries_log _ _ _ _ _ _ _ _ _ _ H as Hlog.", "destruct (Nat.ltb t (currentTerm st)) eqn:Hlt.", "-", "apply Nat.ltb_lt in Hlt.", "left.", "split.", "+", "shelve.", "+", "shelve.", "-", "apply Nat.ltb_ge in Hlt.", "destruct (Nat.eqb pli 0) eqn:Hpli.", "+", "apply Nat.eqb_eq in Hpli.", "assert (es <> [] /\\ (findAtIndex (log st) (maxIndex es) = None \\/ (exists e : entry, findAtIndex (log st) (maxIndex es) = Some e /\\ eTerm e <> maxTerm es))) as Hes.", "apply haveNewEntries_true with (st := st); auto.", "destruct handleRequestVote as [handleRequestVote1 handleRequestVote2].", "qsimpl time: 1 use: handleAppendEntriesReply_same_log,false,handleAppendEntriesReply_same_commitIndex.", "qsimpl time: 1 use: handleAppendEntriesReply_same_log,false,handleAppendEntriesReply_same_commitIndex.", "qsimpl time: 1 use: handleAppendEntriesReply_same_log,false,handleAppendEntriesReply_same_commitIndex.", "*", "shelve.", "*", "qsimpl time: 1 use: maxIndex_non_empty,findAtIndex_elim,maxIndex,handleAppendEntriesReply_same_log,handleAppendEntriesReply_same_commitIndex,eTerm,max_r,max,false.", "*", "repeat split; try auto.", "*"], "tactic": "*", "exn": "Wrong bullet *: Current bullet * is not finished.", "type": "unfinished_bullet", "handled": true}]}, "chat": [], "original": "intros h st t n pli plt es ci st' ps H. pose proof handleAppendEntries_currentTerm _ _ _ _ _ _ _ _ _ _ H as Ht. pose proof handleAppendEntries_log _ _ _ _ _ _ _ _ _ _ H as Hlog. destruct (Nat.ltb t (currentTerm st)) eqn:Hlt. - apply Nat.ltb_lt in Hlt. left. split. + apply handleAppendEntriesReply_same_commitIndex with (n := h) (st := st) (src := n) (t := t) (es := es) (b := false) (l := ps); auto. + apply handleAppendEntriesReply_same_log with (n := h) (st := st) (src := n) (t := t) (es := es) (b := false) (l := ps); auto. - apply Nat.ltb_ge in Hlt. destruct (Nat.eqb pli 0) eqn:Hpli. + apply Nat.eqb_eq in Hpli. assert (es <> [] /\\ (findAtIndex (log st) (maxIndex es) = None \\/ (exists e : entry, findAtIndex (log st) (maxIndex es) = Some e /\\ eTerm e <> maxTerm es))) as Hes. { apply haveNewEntries_true with (st := st); auto. } destruct Hes as [Hes1 Hes2]. right. left. split. * destruct Hlog as [Hlog1 | [[Hlog2 ?] | [? [Hlog3 ?]]]]; try contradiction. -- apply Hlog2. -- repeat split; try auto. ++ apply maxIndex_non_empty; auto. ++ unfold max. apply Init.Nat.max_r with (b := maxIndex es). unfold eTerm in Hes2. destruct es; intros; simpl in *; try contradiction. * exists (mkEntry n (eClient e) (eId e) (eIndex e) (eTerm e) (eInput e)); split; [assumption |]. split; [apply Hlog3 | destruct H as [_ [Hexist ?]]; eapply findAtIndex_elim; eauto]. + right. right. repeat split; try auto. * destruct Hlog as [Hlog1 | [[Hlog2 ?] | [? [Hlog3 ?]]]]; try contradiction. -- apply entries_match_append with (ple := mkEntry n (eClient e) (eId e) (eIndex e) (eTerm e) (eInput e)). ++ auto. ++ apply Nat.eqb_neq in Hpli. intro. exfalso. apply Hpli. auto. ++ auto. * eapply handleAppendEntries_log in H; [apply H | assumption]. destruct Hlog as [Hlog1 | [[Hlog2 ?]]]; try contradiction. auto.", "back_times": 0, "succ": false, "time": 286.15579748153687}]