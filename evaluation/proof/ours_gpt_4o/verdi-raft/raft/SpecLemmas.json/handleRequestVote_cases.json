[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": ["intros h h' t lli llt st st' m H.", "unfold handleRequestVote in H.", "destruct (t <? currentTerm st) eqn:HcurrentTerm.", "-", "inversion H.", "left.", "reflexivity.", "-", "pose (advanceCurrentTerm st t) as st0."], "tactic": "destruct ((if leaderId st0 then false else true) && moreUpToDate llt lli (maxTerm (log st0)) (logIndex st0)) eqn:HupToDate.", "exn": "Illegal application (Non-functional construction): The expression \"logIndex\" of type \"Set\" cannot be applied to the term \"st0\" : \"RaftState.raft_data term name entry logIndex serverType data clientId output\"", "type": "exp_cannot_apply", "handled": true}, {"ctx": ["intros h h' t lli llt st st' m H.", "unfold handleRequestVote in H.", "destruct (t <? currentTerm st) eqn:HcurrentTerm.", "-", "inversion H.", "left.", "reflexivity.", "-", "pose (advanceCurrentTerm st t) as st0.", "qsimpl time: 1 use: true,leaderId,maxTerm,log,logIndex,moreUpToDate,false."], "tactic": ["inversion H.", ""], "exn": "Illegal application: The term \"RaftState.currentTerm\" of type \"forall term name entry logIndex serverType stateMachineData clientId output : Type, RaftState.raft_data term name entry logIndex serverType stateMachineData clientId output -> term\" cannot be applied to the terms \"term\" : \"Set\" \"name\" : \"Type\" \"entry\" : \"Type\" \"S\" : \"Set\" \"serverType\" : \"Set\" \"data\" : \"Type\" \"clientId\" : \"Type\" \"output\" : \"Type\" \"advanceCurrentTerm st t\" : \"RaftState.raft_data term name entry logIndex serverType data clientId output\" The 9th term has type \"RaftState.raft_data term name entry logIndex serverType data clientId output\" which should be coercible to \"RaftState.raft_data term name entry S serverType data clientId output\".", "type": "term_cannot_apply", "handled": false}]}, "chat": [], "original": "intros h h' t lli llt st st' m H. unfold handleRequestVote in H. destruct (t <? currentTerm st) eqn:HcurrentTerm. - simpl in H. inversion H. left. reflexivity. - pose (advanceCurrentTerm st t) as st0. destruct ((if leaderId st0 then false else true) && moreUpToDate llt lli (maxTerm (log st0)) (logIndex st0)) eqn:HupToDate. + inversion H. right. right. split. reflexivity. left. split. * apply advanceCurrentTerm_same_log. * apply Nat.ltb_ge in HcurrentTerm. apply HcurrentTerm. + inversion H. left. reflexivity.", "back_times": 0, "succ": false, "time": 185.2650592327118}]