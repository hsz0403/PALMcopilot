[{"history": {"proof": "qsimpl time: 1.", "repairs": ["cannot_unify"], "exceptions": [{"ctx": ["intros net e h one_vote cronies_votes votes_received candidate_entries_term current_term won_election.", "unfold candidateEntries in *.", "destruct candidate_entries_term as [h' [won_election_cronies term_not_candidate]]."], "tactic": "apply term_not_candidate.", "exn": "In environment orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params cci : cronies_correct_interface vci : votes_correct_interface net : network e : entry h : Net.name one_vote : one_vote_per_term net cronies_votes : CroniesCorrectInterface.cronies_votes net votes_received : votes_received_cronies net h' : name won_election_cronies : wonElection (dedup name_eq_dec (cronies (fst (nwState net h')) (eTerm e))) = true term_not_candidate : currentTerm (snd (nwState net h')) = eTerm e -> type (snd (nwState net h')) <> Candidate current_term : currentTerm (snd (nwState net h)) = eTerm e won_election : wonElection (dedup name_eq_dec (votesReceived (snd (nwState net h)))) = true Unable to unify \"type (snd (nwState net h')) <> Candidate\" with \"type (snd (nwState net h)) <> Candidate\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros net e h one_vote cronies_votes votes_received candidate_entries_term current_term won_election.", "unfold candidateEntries in *.", "destruct candidate_entries_term as [h' [won_election_cronies term_not_candidate]].", "qsimpl time: 1."], "tactic": "intro is_candidate.", "exn": "No product even after head-reduction.", "type": "no_product", "handled": true}, {"ctx": ["intros net e h one_vote cronies_votes votes_received candidate_entries_term current_term won_election.", "unfold candidateEntries in *.", "destruct candidate_entries_term as [h' [won_election_cronies term_not_candidate]].", "qsimpl time: 1.", "assert (In (eTerm e, h) (votes (fst (nwState net h)))).", "-"], "tactic": ["apply votes_currentTerm_votedFor_correct with (n := h).", ""], "exn": "No such bound variable n (no bound variables at all in the expression).", "type": "no_such_bound", "handled": false}, {"ctx": ["intros net e h one_vote cronies_votes votes_received candidate_entries_term current_term won_election.", "unfold candidateEntries in *.", "destruct candidate_entries_term as [h' [won_election_cronies term_not_candidate]].", "qsimpl time: 1.", "assert (In (eTerm e, h) (votes (fst (nwState net h)))).", "-"], "tactic": "-", "exn": "Wrong bullet -: Current bullet - is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["intros net e h one_vote cronies_votes votes_received candidate_entries_term current_term won_election.", "unfold candidateEntries in *.", "destruct candidate_entries_term as [h' [won_election_cronies term_not_candidate]].", "qsimpl time: 1.", "assert (In (eTerm e, h) (votes (fst (nwState net h)))).", "-", "shelve.", "-", "assert (In h (cronies (fst (nwState net h)) (eTerm e))).", "+"], "tactic": ["apply votes_received_cronies with (h0 := h).", ""], "exn": "No such bound variable h0 (no bound variables at all in the expression).", "type": "no_such_bound", "handled": false}, {"ctx": ["intros net e h one_vote cronies_votes votes_received candidate_entries_term current_term won_election.", "unfold candidateEntries in *.", "destruct candidate_entries_term as [h' [won_election_cronies term_not_candidate]].", "qsimpl time: 1.", "assert (In (eTerm e, h) (votes (fst (nwState net h)))).", "-", "shelve.", "-", "assert (In h (cronies (fst (nwState net h)) (eTerm e))).", "+"], "tactic": "+", "exn": "Wrong bullet +: Current bullet + is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["intros net e h one_vote cronies_votes votes_received candidate_entries_term current_term won_election.", "unfold candidateEntries in *.", "destruct candidate_entries_term as [h' [won_election_cronies term_not_candidate]].", "qsimpl time: 1.", "assert (In (eTerm e, h) (votes (fst (nwState net h)))).", "-", "shelve.", "-", "assert (In h (cronies (fst (nwState net h)) (eTerm e))).", "+", "shelve.", "+"], "tactic": "rewrite won_election in won_election_cronies.", "exn": "Found no subterm matching \"wonElection (dedup name_eq_dec (votesReceived (snd (nwState net h))))\" in won_election_cronies.", "type": "no_subterm", "handled": true}, {"ctx": ["intros net e h one_vote cronies_votes votes_received candidate_entries_term current_term won_election.", "unfold candidateEntries in *.", "destruct candidate_entries_term as [h' [won_election_cronies term_not_candidate]].", "qsimpl time: 1.", "assert (In (eTerm e, h) (votes (fst (nwState net h)))).", "-", "shelve.", "-", "assert (In h (cronies (fst (nwState net h)) (eTerm e))).", "+", "shelve.", "+"], "tactic": "qsimpl time: 1 use: votes_received_cronies,votes_currentTerm_votedFor_correct,auto.", "exn": "The reference auto was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros net e h one_vote cronies_votes votes_received candidate_entries_term current_term won_election.", "unfold candidateEntries in *.", "destruct candidate_entries_term as [h' [won_election_cronies term_not_candidate]].", "qsimpl time: 1.", "assert (In (eTerm e, h) (votes (fst (nwState net h)))).", "-", "shelve.", "-", "assert (In h (cronies (fst (nwState net h)) (eTerm e))).", "+", "shelve.", "+", "qsimpl time: 1 use: votes_received_cronies,votes_currentTerm_votedFor_correct."], "tactic": "rewrite Bool.andb_true_iff in won_election_cronies.", "exn": "Found no subterm matching \"?b && ?b0 = true\" in the current goal.", "type": "no_subterm", "handled": true}, {"ctx": ["intros net e h one_vote cronies_votes votes_received candidate_entries_term current_term won_election.", "unfold candidateEntries in *.", "destruct candidate_entries_term as [h' [won_election_cronies term_not_candidate]].", "qsimpl time: 1.", "assert (In (eTerm e, h) (votes (fst (nwState net h)))).", "-", "shelve.", "-", "assert (In h (cronies (fst (nwState net h)) (eTerm e))).", "+", "shelve.", "+", "qsimpl time: 1 use: votes_received_cronies,votes_currentTerm_votedFor_correct."], "tactic": "qsimpl time: 1 use: votes_received_cronies,votes_currentTerm_votedFor_correct,auto.", "exn": "The reference auto was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros net e h one_vote cronies_votes votes_received candidate_entries_term current_term won_election.", "unfold candidateEntries in *.", "destruct candidate_entries_term as [h' [won_election_cronies term_not_candidate]].", "qsimpl time: 1.", "assert (In (eTerm e, h) (votes (fst (nwState net h)))).", "-", "shelve.", "-", "assert (In h (cronies (fst (nwState net h)) (eTerm e))).", "+", "shelve.", "+", "qsimpl time: 1 use: votes_received_cronies,votes_currentTerm_votedFor_correct.", "qsimpl time: 1 use: votes_received_cronies,votes_currentTerm_votedFor_correct.", "destruct won_election_cronies as [_ won_election_cronies]."], "tactic": "rewrite PeanoNat.Nat.leb_le in won_election_cronies.", "exn": "No such hypothesis: won_election_cronies", "type": "no_hypos", "handled": true}, {"ctx": ["intros net e h one_vote cronies_votes votes_received candidate_entries_term current_term won_election.", "unfold candidateEntries in *.", "destruct candidate_entries_term as [h' [won_election_cronies term_not_candidate]].", "qsimpl time: 1.", "assert (In (eTerm e, h) (votes (fst (nwState net h)))).", "-", "shelve.", "-", "assert (In h (cronies (fst (nwState net h)) (eTerm e))).", "+", "shelve.", "+", "qsimpl time: 1 use: votes_received_cronies,votes_currentTerm_votedFor_correct.", "qsimpl time: 1 use: votes_received_cronies,votes_currentTerm_votedFor_correct.", "destruct won_election_cronies as [_ won_election_cronies]."], "tactic": "qsimpl time: 1 use: votes_received_cronies,votes_currentTerm_votedFor_correct,auto.", "exn": "The reference auto was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros net e h one_vote cronies_votes votes_received candidate_entries_term current_term won_election.", "unfold candidateEntries in *.", "destruct candidate_entries_term as [h' [won_election_cronies term_not_candidate]].", "qsimpl time: 1.", "assert (In (eTerm e, h) (votes (fst (nwState net h)))).", "-", "shelve.", "-", "assert (In h (cronies (fst (nwState net h)) (eTerm e))).", "+", "shelve.", "+", "qsimpl time: 1 use: votes_received_cronies,votes_currentTerm_votedFor_correct.", "qsimpl time: 1 use: votes_received_cronies,votes_currentTerm_votedFor_correct.", "destruct won_election_cronies as [_ won_election_cronies].", "qsimpl time: 1 use: votes_received_cronies,votes_currentTerm_votedFor_correct.", "assert (h = h').", "*"], "tactic": "apply one_vote_per_term_cronies with (net := net) (t := eTerm e).", "exn": "The reference one_vote_per_term_cronies was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros net e h one_vote cronies_votes votes_received candidate_entries_term current_term won_election.", "unfold candidateEntries in *.", "destruct candidate_entries_term as [h' [won_election_cronies term_not_candidate]].", "qsimpl time: 1.", "assert (In (eTerm e, h) (votes (fst (nwState net h)))).", "-", "shelve.", "-", "assert (In h (cronies (fst (nwState net h)) (eTerm e))).", "+", "shelve.", "+", "qsimpl time: 1 use: votes_received_cronies,votes_currentTerm_votedFor_correct.", "qsimpl time: 1 use: votes_received_cronies,votes_currentTerm_votedFor_correct.", "destruct won_election_cronies as [_ won_election_cronies].", "qsimpl time: 1 use: votes_received_cronies,votes_currentTerm_votedFor_correct.", "assert (h = h').", "*"], "tactic": "right.", "exn": "Not an inductive goal with 2 constructors.", "type": "not_inductive_goal", "handled": true}, {"ctx": ["intros net e h one_vote cronies_votes votes_received candidate_entries_term current_term won_election.", "unfold candidateEntries in *.", "destruct candidate_entries_term as [h' [won_election_cronies term_not_candidate]].", "qsimpl time: 1.", "assert (In (eTerm e, h) (votes (fst (nwState net h)))).", "-", "shelve.", "-", "assert (In h (cronies (fst (nwState net h)) (eTerm e))).", "+", "shelve.", "+", "qsimpl time: 1 use: votes_received_cronies,votes_currentTerm_votedFor_correct.", "qsimpl time: 1 use: votes_received_cronies,votes_currentTerm_votedFor_correct.", "destruct won_election_cronies as [_ won_election_cronies].", "qsimpl time: 1 use: votes_received_cronies,votes_currentTerm_votedFor_correct.", "assert (h = h').", "*"], "tactic": "qsimpl time: 1 use: votes_received_cronies,votes_currentTerm_votedFor_correct,auto.", "exn": "The reference auto was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros net e h one_vote cronies_votes votes_received candidate_entries_term current_term won_election.", "unfold candidateEntries in *.", "destruct candidate_entries_term as [h' [won_election_cronies term_not_candidate]].", "qsimpl time: 1.", "assert (In (eTerm e, h) (votes (fst (nwState net h)))).", "-", "shelve.", "-", "assert (In h (cronies (fst (nwState net h)) (eTerm e))).", "+", "shelve.", "+", "qsimpl time: 1 use: votes_received_cronies,votes_currentTerm_votedFor_correct.", "qsimpl time: 1 use: votes_received_cronies,votes_currentTerm_votedFor_correct.", "destruct won_election_cronies as [_ won_election_cronies].", "qsimpl time: 1 use: votes_received_cronies,votes_currentTerm_votedFor_correct.", "assert (h = h').", "*", "qsimpl time: 1 use: votes_received_cronies,votes_currentTerm_votedFor_correct."], "tactic": "right.", "exn": "Not an inductive goal with 2 constructors.", "type": "not_inductive_goal", "handled": true}, {"ctx": ["intros net e h one_vote cronies_votes votes_received candidate_entries_term current_term won_election.", "unfold candidateEntries in *.", "destruct candidate_entries_term as [h' [won_election_cronies term_not_candidate]].", "qsimpl time: 1.", "assert (In (eTerm e, h) (votes (fst (nwState net h)))).", "-", "shelve.", "-", "assert (In h (cronies (fst (nwState net h)) (eTerm e))).", "+", "shelve.", "+", "qsimpl time: 1 use: votes_received_cronies,votes_currentTerm_votedFor_correct.", "qsimpl time: 1 use: votes_received_cronies,votes_currentTerm_votedFor_correct.", "destruct won_election_cronies as [_ won_election_cronies].", "qsimpl time: 1 use: votes_received_cronies,votes_currentTerm_votedFor_correct.", "assert (h = h').", "*", "qsimpl time: 1 use: votes_received_cronies,votes_currentTerm_votedFor_correct."], "tactic": "qsimpl time: 1 use: votes_received_cronies,votes_currentTerm_votedFor_correct,auto.", "exn": "The reference auto was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros net e h one_vote cronies_votes votes_received candidate_entries_term current_term won_election.", "unfold candidateEntries in *.", "destruct candidate_entries_term as [h' [won_election_cronies term_not_candidate]].", "qsimpl time: 1.", "assert (In (eTerm e, h) (votes (fst (nwState net h)))).", "-", "shelve.", "-", "assert (In h (cronies (fst (nwState net h)) (eTerm e))).", "+", "shelve.", "+", "qsimpl time: 1 use: votes_received_cronies,votes_currentTerm_votedFor_correct.", "qsimpl time: 1 use: votes_received_cronies,votes_currentTerm_votedFor_correct.", "destruct won_election_cronies as [_ won_election_cronies].", "qsimpl time: 1 use: votes_received_cronies,votes_currentTerm_votedFor_correct.", "assert (h = h').", "*", "qsimpl time: 1 use: votes_received_cronies,votes_currentTerm_votedFor_correct.", "qsimpl time: 1 use: votes_received_cronies,votes_currentTerm_votedFor_correct."], "tactic": "*", "exn": "Wrong bullet *: Current bullet * is not finished.", "type": "unfinished_bullet", "handled": true}]}, "chat": [], "original": "intros net e h one_vote cronies_votes votes_received candidate_entries_term current_term won_election. unfold candidateEntries in *. destruct candidate_entries_term as [h' [won_election_cronies term_not_candidate]]. apply term_not_candidate. intro is_candidate. assert (In (eTerm e, h) (votes (fst (nwState net h)))). - apply votes_currentTerm_votedFor_correct with (n := h). + auto. + auto. - assert (In h (cronies (fst (nwState net h)) (eTerm e))). + apply votes_received_cronies with (h0 := h). * apply votesReceived_in. auto. * left. auto. + rewrite won_election in won_election_cronies. rewrite Bool.andb_true_iff in won_election_cronies. destruct won_election_cronies as [_ won_election_cronies]. rewrite PeanoNat.Nat.leb_le in won_election_cronies. assert (h = h'). * apply one_vote_per_term_cronies with (net := net) (t := eTerm e). -- auto. -- right. auto. -- right. auto. -- auto. * subst. contradiction.", "back_times": 1, "succ": false, "time": 408.0795786380768}]