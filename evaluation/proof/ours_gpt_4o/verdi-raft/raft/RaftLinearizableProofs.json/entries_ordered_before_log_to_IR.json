[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": ["intros * Hstep HIn HOneq HOrdered.", "apply step_failure_star_raft_intermediate_reachable in Hstep."], "tactic": "eapply before_import_output_before_input.", "exn": "In environment orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params oiai : output_implies_applied_interface aiii : applied_implies_input_interface copi : causal_order_preserved_interface iboi : input_before_output_interface oci : output_correct_interface ogii : output_greatest_id_interface k, k' : key net : network failed : list Net.name tr : list (Net.name * (input + list output)) Hstep : raft_intermediate_reachable net HIn : In (O k) (import tr) HOneq : k <> k' HOrdered : entries_ordered (fst k) (snd k) (fst k') (snd k') net Unable to unify \"(fix before_func (A : Type) (f g : A -> bool) (l : list A) {struct l} : Prop := match l with | [] => False | a :: l' => f a = true \\\\/ g a = false /\\\\ before_func A f g l' end) (name * (raft_input + list raft_output))%type (is_output_with_key (fst ?M1639) (snd ?M1639)) (is_input_with_key (fst ?M1640) (snd ?M1640)) ?M1641\" with \"(fix before (A : Type) (x y : A) (l : list A) {struct l} : Prop := match l with | [] => False | a :: l' => a = x \\\\/ a <> y /\\\\ before A x y l' end) (IR key) (IRO k) (IRI k') (log_to_IR (get_output tr) (deduplicate_log (applied_entries (nwState net))))\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros * Hstep HIn HOneq HOrdered.", "apply step_failure_star_raft_intermediate_reachable in Hstep.", "qsimpl time: 1 use: before_import_output_before_input."], "tactic": "apply HIn.", "exn": "In environment orig_base_params : BaseParams raft_params : RaftParams orig_base_params H : forall (k k' : key) (tr : list (name * (raft_input + list raft_output))), before (O k) (I k') (import tr) -> output_before_input (fst k) (snd k) (fst k') (snd k') tr one_node_params : OneNodeParams orig_base_params k, k' : key net : network failed : list name tr : list (name * (raft_input + list raft_output)) Hstep : raft_intermediate_reachable net HIn : In (O k) (import tr) HOneq : k = k' -> False HOrdered : entries_ordered (fst k) (snd k) (fst k') (snd k') net output_greatest_id : forall (client : clientId) (id : nat) (failed : list name) (net : network) (tr : list (name * (raft_input + list raft_output))), step_failure_star step_failure_init (failed, net) tr -> key_in_output_trace client id tr -> greatest_id_for_client client id net output_correct_invariant : forall (client : clientId) (id : nat) (out : output) (failed : list name) (net : network) (tr : list (name * (raft_input + list raft_output))), step_failure_star step_failure_init (failed, net) tr -> in_output_trace client id out tr -> output_correct client id out (applied_entries (nwState net)) output_implies_input_before_output : forall (client : clientId) (id : nat) (failed : list name) (net : network) (tr : list (name * (raft_input + list raft_output))), step_failure_star step_failure_init (failed, net) tr -> key_in_output_trace client id tr -> input_before_output client id tr causal_order_preserved : forall (client : clientId) (id : nat) (client' : clientId) (id' : nat) (failed : list name) (net : network) (tr : list (name * (raft_input + list raft_output))), step_failure_star step_failure_init (failed, net) tr -> output_before_input client id client' id' tr -> entries_ordered client id client' id' net applied_implies_input : forall (client : clientId) (id : nat) (failed : list name) (net : network) (tr : list (name * (raft_input + list raft_output))) (e : entry), step_failure_star step_failure_init (failed, net) tr -> eClient e = client -> eId e = id -> applied_implies_input_state client id (eInput e) net -> in_input_trace client id (eInput e) tr output_implies_applied : forall (client : clientId) (id : nat) (failed : list name) (net : network) (tr : list (name * (raft_input + list raft_output))), step_failure_star step_failure_init (failed, net) tr -> key_in_output_trace client id tr -> in_applied_entries client id net Unable to unify \"In (O k) (import tr)\" with \"before (IRO k) (IRI k') (log_to_IR (get_output tr) (deduplicate_log (applied_entries (nwState net))))\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros * Hstep HIn HOneq HOrdered.", "apply step_failure_star_raft_intermediate_reachable in Hstep.", "qsimpl time: 1 use: before_import_output_before_input.", "qsimpl time: 1 use: before_import_output_before_input.", "red."], "tactic": "apply output_implies_input_before_output.", "exn": "In environment orig_base_params : BaseParams raft_params : RaftParams orig_base_params H0 : forall (k k' : key) (tr : list (name * (raft_input + list raft_output))), before (O k) (I k') (import tr) -> output_before_input (fst k) (snd k) (fst k') (snd k') tr one_node_params : OneNodeParams orig_base_params k, k' : key net : network failed : list name tr : list (name * (raft_input + list raft_output)) Hstep : raft_intermediate_reachable net HIn : In (O k) (import tr) HOneq : k = k' -> False HOrdered : entries_ordered (fst k) (snd k) (fst k') (snd k') net output_greatest_id : forall (client : clientId) (id : nat) (failed : list name) (net : network) (tr : list (name * (raft_input + list raft_output))), step_failure_star step_failure_init (failed, net) tr -> key_in_output_trace client id tr -> greatest_id_for_client client id net output_correct_invariant : forall (client : clientId) (id : nat) (out : output) (failed : list name) (net : network) (tr : list (name * (raft_input + list raft_output))), step_failure_star step_failure_init (failed, net) tr -> in_output_trace client id out tr -> output_correct client id out (applied_entries (nwState net)) output_implies_input_before_output : forall (client : clientId) (id : nat) (failed : list name) (net : network) (tr : list (name * (raft_input + list raft_output))), step_failure_star step_failure_init (failed, net) tr -> key_in_output_trace client id tr -> input_before_output client id tr causal_order_preserved : forall (client : clientId) (id : nat) (client' : clientId) (id' : nat) (failed : list name) (net : network) (tr : list (name * (raft_input + list raft_output))), step_failure_star step_failure_init (failed, net) tr -> output_before_input client id client' id' tr -> entries_ordered client id client' id' net applied_implies_input : forall (client : clientId) (id : nat) (failed : list name) (net : network) (tr : list (name * (raft_input + list raft_output))) (e : entry), step_failure_star step_failure_init (failed, net) tr -> eClient e = client -> eId e = id -> applied_implies_input_state client id (eInput e) net -> in_input_trace client id (eInput e) tr output_implies_applied : forall (client : clientId) (id : nat) (failed : list name) (net : network) (tr : list (name * (raft_input + list raft_output))), step_failure_star step_failure_init (failed, net) tr -> key_in_output_trace client id tr -> in_applied_entries client id net Unable to unify \"(fix before_func (A : Type) (f g : A -> bool) (l : list A) {struct l} : Prop := match l with | [] => False | a :: l' => f a = true \\\\/ g a = false /\\\\ before_func A f g l' end) (name * (raft_input + list raft_output))%type (is_input_with_key ?M5299 ?M5300) (is_output_with_key ?M5299 ?M5300) ?M5303\" with \"(fix before (A : Type) (x y : A) (l : list A) {struct l} : Prop := match l with | [] => False | a :: l' => a = x \\\\/ a <> y /\\\\ before A x y l' end) (IR key) (IRO k) (IRI k') (log_to_IR (get_output tr) (deduplicate_log (applied_entries (nwState net))))\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros * Hstep HIn HOneq HOrdered.", "apply step_failure_star_raft_intermediate_reachable in Hstep.", "qsimpl time: 1 use: before_import_output_before_input.", "qsimpl time: 1 use: before_import_output_before_input.", "red.", "qsimpl time: 1 use: before_import_output_before_input."], "tactic": "apply Hstep.", "exn": "In environment orig_base_params : BaseParams raft_params : RaftParams orig_base_params H : forall (k k' : key) (tr : list (name * (raft_input + list raft_output))), before (O k) (I k') (import tr) -> output_before_input (fst k) (snd k) (fst k') (snd k') tr one_node_params : OneNodeParams orig_base_params k, k' : key net : network failed : list name tr : list (name * (raft_input + list raft_output)) Hstep : raft_intermediate_reachable net HIn : In (O k) (import tr) HOneq : k = k' -> False HOrdered : entries_ordered (fst k) (snd k) (fst k') (snd k') net output_greatest_id : forall (client : clientId) (id : nat) (failed : list name) (net : network) (tr : list (name * (raft_input + list raft_output))), step_failure_star step_failure_init (failed, net) tr -> key_in_output_trace client id tr -> greatest_id_for_client client id net output_correct_invariant : forall (client : clientId) (id : nat) (out : output) (failed : list name) (net : network) (tr : list (name * (raft_input + list raft_output))), step_failure_star step_failure_init (failed, net) tr -> in_output_trace client id out tr -> output_correct client id out (applied_entries (nwState net)) output_implies_input_before_output : forall (client : clientId) (id : nat) (failed : list name) (net : network) (tr : list (name * (raft_input + list raft_output))), step_failure_star step_failure_init (failed, net) tr -> key_in_output_trace client id tr -> input_before_output client id tr causal_order_preserved : forall (client : clientId) (id : nat) (client' : clientId) (id' : nat) (failed : list name) (net : network) (tr : list (name * (raft_input + list raft_output))), step_failure_star step_failure_init (failed, net) tr -> output_before_input client id client' id' tr -> entries_ordered client id client' id' net applied_implies_input : forall (client : clientId) (id : nat) (failed : list name) (net : network) (tr : list (name * (raft_input + list raft_output))) (e : entry), step_failure_star step_failure_init (failed, net) tr -> eClient e = client -> eId e = id -> applied_implies_input_state client id (eInput e) net -> in_input_trace client id (eInput e) tr output_implies_applied : forall (client : clientId) (id : nat) (failed : list name) (net : network) (tr : list (name * (raft_input + list raft_output))), step_failure_star step_failure_init (failed, net) tr -> key_in_output_trace client id tr -> in_applied_entries client id net Unable to unify \"raft_intermediate_reachable net\" with \"(fix before (A : Type) (x y : A) (l : list A) {struct l} : Prop := match l with | [] => False | a :: l' => a = x \\\\/ (a = y -> False) /\\\\ before A x y l' end) (IR key) (IRO k) (IRI k') (log_to_IR (get_output tr) (deduplicate_log (applied_entries (nwState net))))\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros * Hstep HIn HOneq HOrdered.", "apply step_failure_star_raft_intermediate_reachable in Hstep.", "qsimpl time: 1 use: before_import_output_before_input.", "qsimpl time: 1 use: before_import_output_before_input.", "red.", "qsimpl time: 1 use: before_import_output_before_input.", "qsimpl time: 1 use: before_import_output_before_input."], "tactic": "eapply importa_get_output, HIn.", "exn": "The reference importa_get_output was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros * Hstep HIn HOneq HOrdered.", "apply step_failure_star_raft_intermediate_reachable in Hstep.", "qsimpl time: 1 use: before_import_output_before_input.", "qsimpl time: 1 use: before_import_output_before_input.", "red.", "qsimpl time: 1 use: before_import_output_before_input.", "qsimpl time: 1 use: before_import_output_before_input.", "eapply update, HIn.", "-"], "tactic": "eapply get_output_import_O in HIn as [out Hout].", "exn": "Unable to apply lemma of type \"forall (tr : list (name * (raft_input + list raft_output))) (k : key) (out : output), get_output tr k = Some out -> In (O k) (import tr)\" on hypothesis of type \"In (O k) (import tr)\".", "type": "cannot_apply_in", "handled": true}, {"ctx": ["intros * Hstep HIn HOneq HOrdered.", "apply step_failure_star_raft_intermediate_reachable in Hstep.", "qsimpl time: 1 use: before_import_output_before_input.", "qsimpl time: 1 use: before_import_output_before_input.", "red.", "qsimpl time: 1 use: before_import_output_before_input.", "qsimpl time: 1 use: before_import_output_before_input.", "eapply update, HIn.", "-", "qsimpl time: 1 use: get_output_import_O,before_import_output_before_input."], "tactic": "eapply in_import_in_trace_O in Hout as (os & h & Hin & Hino).", "exn": "No such hypothesis: Hout", "type": "no_hypos", "handled": true}, {"ctx": ["intros * Hstep HIn HOneq HOrdered.", "apply step_failure_star_raft_intermediate_reachable in Hstep.", "qsimpl time: 1 use: before_import_output_before_input.", "qsimpl time: 1 use: before_import_output_before_input.", "red.", "qsimpl time: 1 use: before_import_output_before_input.", "qsimpl time: 1 use: before_import_output_before_input.", "eapply update, HIn.", "-", "qsimpl time: 1 use: get_output_import_O,before_import_output_before_input.", "qsimpl time: 1 use: get_output_import_O,before_import_output_before_input,in_import_in_trace_O."], "tactic": "-", "exn": "Wrong bullet -: Current bullet - is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["intros * Hstep HIn HOneq HOrdered.", "apply step_failure_star_raft_intermediate_reachable in Hstep.", "qsimpl time: 1 use: before_import_output_before_input.", "qsimpl time: 1 use: before_import_output_before_input.", "red.", "qsimpl time: 1 use: before_import_output_before_input.", "qsimpl time: 1 use: before_import_output_before_input.", "eapply update, HIn.", "-", "qsimpl time: 1 use: get_output_import_O,before_import_output_before_input.", "qsimpl time: 1 use: get_output_import_O,before_import_output_before_input,in_import_in_trace_O.", "shelve.", "-"], "tactic": "do 2 eexists.", "exn": "Not an inductive product.", "type": "not_inductive_product", "handled": true}, {"ctx": ["intros * Hstep HIn HOneq HOrdered.", "apply step_failure_star_raft_intermediate_reachable in Hstep.", "qsimpl time: 1 use: before_import_output_before_input.", "qsimpl time: 1 use: before_import_output_before_input.", "red.", "qsimpl time: 1 use: before_import_output_before_input.", "qsimpl time: 1 use: before_import_output_before_input.", "eapply update, HIn.", "-", "qsimpl time: 1 use: get_output_import_O,before_import_output_before_input.", "qsimpl time: 1 use: get_output_import_O,before_import_output_before_input,in_import_in_trace_O.", "shelve.", "-"], "tactic": "qsimpl time: 1 use: eexists,get_output_import_O,before_import_output_before_input,in_import_in_trace_O.", "exn": "The reference eexists was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros * Hstep HIn HOneq HOrdered.", "apply step_failure_star_raft_intermediate_reachable in Hstep.", "qsimpl time: 1 use: before_import_output_before_input.", "qsimpl time: 1 use: before_import_output_before_input.", "red.", "qsimpl time: 1 use: before_import_output_before_input.", "qsimpl time: 1 use: before_import_output_before_input.", "eapply update, HIn.", "-", "qsimpl time: 1 use: get_output_import_O,before_import_output_before_input.", "qsimpl time: 1 use: get_output_import_O,before_import_output_before_input,in_import_in_trace_O.", "shelve.", "-", "qsimpl time: 1 use: get_output_import_O,before_import_output_before_input,in_import_in_trace_O."], "tactic": "split; [apply Hstep|].", "exn": "Not an inductive product.", "type": "not_inductive_product", "handled": true}, {"ctx": ["intros * Hstep HIn HOneq HOrdered.", "apply step_failure_star_raft_intermediate_reachable in Hstep.", "qsimpl time: 1 use: before_import_output_before_input.", "qsimpl time: 1 use: before_import_output_before_input.", "red.", "qsimpl time: 1 use: before_import_output_before_input.", "qsimpl time: 1 use: before_import_output_before_input.", "eapply update, HIn.", "-", "qsimpl time: 1 use: get_output_import_O,before_import_output_before_input.", "qsimpl time: 1 use: get_output_import_O,before_import_output_before_input,in_import_in_trace_O.", "shelve.", "-", "qsimpl time: 1 use: get_output_import_O,before_import_output_before_input,in_import_in_trace_O."], "tactic": "qsimpl time: 1 use: eexists,get_output_import_O,before_import_output_before_input,in_import_in_trace_O.", "exn": "The reference eexists was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros * Hstep HIn HOneq HOrdered.", "apply step_failure_star_raft_intermediate_reachable in Hstep.", "qsimpl time: 1 use: before_import_output_before_input.", "qsimpl time: 1 use: before_import_output_before_input.", "red.", "qsimpl time: 1 use: before_import_output_before_input.", "qsimpl time: 1 use: before_import_output_before_input.", "eapply update, HIn.", "-", "qsimpl time: 1 use: get_output_import_O,before_import_output_before_input.", "qsimpl time: 1 use: get_output_import_O,before_import_output_before_input,in_import_in_trace_O.", "shelve.", "-", "qsimpl time: 1 use: get_output_import_O,before_import_output_before_input,in_import_in_trace_O.", "qsimpl time: 1 use: get_output_import_O,before_import_output_before_input,in_import_in_trace_O."], "tactic": "apply get_output'_In with (net := net) in Hino as Hino'.", "exn": "No such hypothesis: Hino", "type": "no_hypos", "handled": true}, {"ctx": ["intros * Hstep HIn HOneq HOrdered.", "apply step_failure_star_raft_intermediate_reachable in Hstep.", "qsimpl time: 1 use: before_import_output_before_input.", "qsimpl time: 1 use: before_import_output_before_input.", "red.", "qsimpl time: 1 use: before_import_output_before_input.", "qsimpl time: 1 use: before_import_output_before_input.", "eapply update, HIn.", "-", "qsimpl time: 1 use: get_output_import_O,before_import_output_before_input.", "qsimpl time: 1 use: get_output_import_O,before_import_output_before_input,in_import_in_trace_O.", "shelve.", "-", "qsimpl time: 1 use: get_output_import_O,before_import_output_before_input,in_import_in_trace_O.", "qsimpl time: 1 use: get_output_import_O,before_import_output_before_input,in_import_in_trace_O."], "tactic": "qsimpl time: 1 use: get_output_import_O,get_output'_In,eexists,before_import_output_before_input,in_import_in_trace_O.", "exn": "The reference eexists was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros * Hstep HIn HOneq HOrdered.", "apply step_failure_star_raft_intermediate_reachable in Hstep.", "qsimpl time: 1 use: before_import_output_before_input.", "qsimpl time: 1 use: before_import_output_before_input.", "red.", "qsimpl time: 1 use: before_import_output_before_input.", "qsimpl time: 1 use: before_import_output_before_input.", "eapply update, HIn.", "-", "qsimpl time: 1 use: get_output_import_O,before_import_output_before_input.", "qsimpl time: 1 use: get_output_import_O,before_import_output_before_input,in_import_in_trace_O.", "shelve.", "-", "qsimpl time: 1 use: get_output_import_O,before_import_output_before_input,in_import_in_trace_O.", "qsimpl time: 1 use: get_output_import_O,before_import_output_before_input,in_import_in_trace_O.", "qsimpl time: 1 use: get_output_import_O,get_output'_In,before_import_output_before_input,in_import_in_trace_O."], "tactic": "unfold in_applied_entries in Hino', HIn |- *.", "exn": "No such hypothesis: Hino'", "type": "no_hypos", "handled": true}, {"ctx": ["intros * Hstep HIn HOneq HOrdered.", "apply step_failure_star_raft_intermediate_reachable in Hstep.", "qsimpl time: 1 use: before_import_output_before_input.", "qsimpl time: 1 use: before_import_output_before_input.", "red.", "qsimpl time: 1 use: before_import_output_before_input.", "qsimpl time: 1 use: before_import_output_before_input.", "eapply update, HIn.", "-", "qsimpl time: 1 use: get_output_import_O,before_import_output_before_input.", "qsimpl time: 1 use: get_output_import_O,before_import_output_before_input,in_import_in_trace_O.", "shelve.", "-", "qsimpl time: 1 use: get_output_import_O,before_import_output_before_input,in_import_in_trace_O.", "qsimpl time: 1 use: get_output_import_O,before_import_output_before_input,in_import_in_trace_O.", "qsimpl time: 1 use: get_output_import_O,get_output'_In,before_import_output_before_input,in_import_in_trace_O."], "tactic": "qsimpl time: 1 use: get_output_import_O,get_output'_In,eexists,in_applied_entries,before_import_output_before_input,in_import_in_trace_O.", "exn": "The reference eexists was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros * Hstep HIn HOneq HOrdered.", "apply step_failure_star_raft_intermediate_reachable in Hstep.", "qsimpl time: 1 use: before_import_output_before_input.", "qsimpl time: 1 use: before_import_output_before_input.", "red.", "qsimpl time: 1 use: before_import_output_before_input.", "qsimpl time: 1 use: before_import_output_before_input.", "eapply update, HIn.", "-", "qsimpl time: 1 use: get_output_import_O,before_import_output_before_input.", "qsimpl time: 1 use: get_output_import_O,before_import_output_before_input,in_import_in_trace_O.", "shelve.", "-", "qsimpl time: 1 use: get_output_import_O,before_import_output_before_input,in_import_in_trace_O.", "qsimpl time: 1 use: get_output_import_O,before_import_output_before_input,in_import_in_trace_O.", "qsimpl time: 1 use: get_output_import_O,get_output'_In,before_import_output_before_input,in_import_in_trace_O.", "qsimpl time: 1 use: get_output_import_O,get_output'_In,in_applied_entries,before_import_output_before_input,in_import_in_trace_O."], "tactic": "destruct in_applied_entries; eauto using output_greatest_id.", "exn": "Not an inductive product.", "type": "not_inductive_product", "handled": true}, {"ctx": ["intros * Hstep HIn HOneq HOrdered.", "apply step_failure_star_raft_intermediate_reachable in Hstep.", "qsimpl time: 1 use: before_import_output_before_input.", "qsimpl time: 1 use: before_import_output_before_input.", "red.", "qsimpl time: 1 use: before_import_output_before_input.", "qsimpl time: 1 use: before_import_output_before_input.", "eapply update, HIn.", "-", "qsimpl time: 1 use: get_output_import_O,before_import_output_before_input.", "qsimpl time: 1 use: get_output_import_O,before_import_output_before_input,in_import_in_trace_O.", "shelve.", "-", "qsimpl time: 1 use: get_output_import_O,before_import_output_before_input,in_import_in_trace_O.", "qsimpl time: 1 use: get_output_import_O,before_import_output_before_input,in_import_in_trace_O.", "qsimpl time: 1 use: get_output_import_O,get_output'_In,before_import_output_before_input,in_import_in_trace_O.", "qsimpl time: 1 use: get_output_import_O,get_output'_In,in_applied_entries,before_import_output_before_input,in_import_in_trace_O."], "tactic": "qsimpl time: 1 use: get_output_import_O,get_output'_In,eexists,in_applied_entries,before_import_output_before_input,in_import_in_trace_O.", "exn": "The reference eexists was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros * Hstep HIn HOneq HOrdered.", "apply step_failure_star_raft_intermediate_reachable in Hstep.", "qsimpl time: 1 use: before_import_output_before_input.", "qsimpl time: 1 use: before_import_output_before_input.", "red.", "qsimpl time: 1 use: before_import_output_before_input.", "qsimpl time: 1 use: before_import_output_before_input.", "eapply update, HIn.", "-", "qsimpl time: 1 use: get_output_import_O,before_import_output_before_input.", "qsimpl time: 1 use: get_output_import_O,before_import_output_before_input,in_import_in_trace_O.", "shelve.", "-", "qsimpl time: 1 use: get_output_import_O,before_import_output_before_input,in_import_in_trace_O.", "qsimpl time: 1 use: get_output_import_O,before_import_output_before_input,in_import_in_trace_O.", "qsimpl time: 1 use: get_output_import_O,get_output'_In,before_import_output_before_input,in_import_in_trace_O.", "qsimpl time: 1 use: get_output_import_O,get_output'_In,in_applied_entries,before_import_output_before_input,in_import_in_trace_O.", "qsimpl time: 1 use: get_output_import_O,get_output'_In,in_applied_entries,before_import_output_before_input,in_import_in_trace_O."], "tactic": "eapply output_greatest_id_interface.", "exn": "In environment orig_base_params : BaseParams raft_params : RaftParams orig_base_params H5 : forall (tr : list (name * (raft_input + list raft_output))) (k : key), In (O k) (import tr) -> exists (os : list raft_output) (h : name), In (h, inr os) tr /\\\\ (exists o : output, In (ClientResponse (fst k) (snd k) o) os) H2 : forall (k k' : key) (tr : list (name * (raft_input + list raft_output))), before (O k) (I k') (import tr) -> output_before_input (fst k) (snd k) (fst k') (snd k') tr one_node_params : OneNodeParams orig_base_params X0 : clientId -> nat -> network -> Prop H1 : forall (l : list raft_output) (k : key) (out : output), get_output' l k = Some out -> In (ClientResponse (fst k) (snd k) out) l H : forall (tr : list (name * (raft_input + list raft_output))) (k : key) (out : output), get_output tr k = Some out -> In (O k) (import tr) X : clientId -> nat -> network -> Prop k, k' : key net : network failed : list name tr : list (name * (raft_input + list raft_output)) Hstep : raft_intermediate_reachable net HIn : In (O k) (import tr) HOneq : k = k' -> False HOrdered : entries_ordered (fst k) (snd k) (fst k') (snd k') net output_greatest_id : forall (client : clientId) (id : nat) (failed : list name) (net : network) (tr : list (name * (raft_input + list raft_output))), step_failure_star step_failure_init (failed, net) tr -> key_in_output_trace client id tr -> greatest_id_for_client client id net output_correct_invariant : forall (client : clientId) (id : nat) (out : output) (failed : list name) (net : network) (tr : list (name * (raft_input + list raft_output))), step_failure_star step_failure_init (failed, net) tr -> in_output_trace client id out tr -> output_correct client id out (applied_entries (nwState net)) output_implies_input_before_output : forall (client : clientId) (id : nat) (failed : list name) (net : network) (tr : list (name * (raft_input + list raft_output))), step_failure_star step_failure_init (failed, net) tr -> key_in_output_trace client id tr -> input_before_output client id tr causal_order_preserved : forall (client : clientId) (id : nat) (client' : clientId) (id' : nat) (failed : list name) (net : network) (tr : list (name * (raft_input + list raft_output))), step_failure_star step_failure_init (failed, net) tr -> output_before_input client id client' id' tr -> entries_ordered client id client' id' net applied_implies_input : forall (client : clientId) (id : nat) (failed : list name) (net : network) (tr : list (name * (raft_input + list raft_output))) (e : entry), step_failure_star step_failure_init (failed, net) tr -> eClient e = client -> eId e = id -> applied_implies_input_state client id (eInput e) net -> in_input_trace client id (eInput e) tr output_implies_applied : forall (client : clientId) (id : nat) (failed : list name) (net : network) (tr : list (name * (raft_input + list raft_output))), step_failure_star step_failure_init (failed, net) tr -> key_in_output_trace client id tr -> in_applied_entries client id net Unable to unify \"Prop\" with \"(fix before (A : Type) (x y : A) (l : list A) {struct l} : Prop := match l with | [] => False | a :: l' => a = x \\\\/ (a = y -> False) /\\\\ before A x y l' end) (IR key) (IRO k) (IRI k') (log_to_IR (get_output tr) (deduplicate_log (applied_entries (nwState net))))\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros * Hstep HIn HOneq HOrdered.", "apply step_failure_star_raft_intermediate_reachable in Hstep.", "qsimpl time: 1 use: before_import_output_before_input.", "qsimpl time: 1 use: before_import_output_before_input.", "red.", "qsimpl time: 1 use: before_import_output_before_input.", "qsimpl time: 1 use: before_import_output_before_input.", "eapply update, HIn.", "-", "qsimpl time: 1 use: get_output_import_O,before_import_output_before_input.", "qsimpl time: 1 use: get_output_import_O,before_import_output_before_input,in_import_in_trace_O.", "shelve.", "-", "qsimpl time: 1 use: get_output_import_O,before_import_output_before_input,in_import_in_trace_O.", "qsimpl time: 1 use: get_output_import_O,before_import_output_before_input,in_import_in_trace_O.", "qsimpl time: 1 use: get_output_import_O,get_output'_In,before_import_output_before_input,in_import_in_trace_O.", "qsimpl time: 1 use: get_output_import_O,get_output'_In,in_applied_entries,before_import_output_before_input,in_import_in_trace_O.", "qsimpl time: 1 use: get_output_import_O,get_output'_In,in_applied_entries,before_import_output_before_input,in_import_in_trace_O."], "tactic": "qsimpl time: 1 use: get_output_import_O,get_output'_In,eexists,in_applied_entries,output_greatest_id_interface,before_import_output_before_input,in_import_in_trace_O.", "exn": "The reference eexists was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros * Hstep HIn HOneq HOrdered.", "apply step_failure_star_raft_intermediate_reachable in Hstep.", "qsimpl time: 1 use: before_import_output_before_input.", "qsimpl time: 1 use: before_import_output_before_input.", "red.", "qsimpl time: 1 use: before_import_output_before_input.", "qsimpl time: 1 use: before_import_output_before_input.", "eapply update, HIn.", "-", "qsimpl time: 1 use: get_output_import_O,before_import_output_before_input.", "qsimpl time: 1 use: get_output_import_O,before_import_output_before_input,in_import_in_trace_O.", "shelve.", "-", "qsimpl time: 1 use: get_output_import_O,before_import_output_before_input,in_import_in_trace_O.", "qsimpl time: 1 use: get_output_import_O,before_import_output_before_input,in_import_in_trace_O.", "qsimpl time: 1 use: get_output_import_O,get_output'_In,before_import_output_before_input,in_import_in_trace_O.", "qsimpl time: 1 use: get_output_import_O,get_output'_In,in_applied_entries,before_import_output_before_input,in_import_in_trace_O.", "qsimpl time: 1 use: get_output_import_O,get_output'_In,in_applied_entries,before_import_output_before_input,in_import_in_trace_O.", "qsimpl time: 1 use: get_output_import_O,get_output'_In,in_applied_entries,output_greatest_id_interface,before_import_output_before_input,in_import_in_trace_O."], "tactic": "apply Hstep.", "exn": "In environment orig_base_params : BaseParams raft_params : RaftParams orig_base_params H6 : forall (tr : list (name * (raft_input + list raft_output))) (k : key), In (O k) (import tr) -> exists (os : list raft_output) (h : name), In (h, inr os) tr /\\\\ (exists o : output, In (ClientResponse (fst k) (snd k) o) os) H4 : forall (k k' : key) (tr : list (name * (raft_input + list raft_output))), before (O k) (I k') (import tr) -> output_before_input (fst k) (snd k) (fst k') (snd k') tr X2 : Prop one_node_params : OneNodeParams orig_base_params X1 : clientId -> nat -> network -> Prop H3 : forall (l : list raft_output) (k : key) (out : output), get_output' l k = Some out -> In (ClientResponse (fst k) (snd k) out) l H0 : forall (tr : list (name * (raft_input + list raft_output))) (k : key) (out : output), get_output tr k = Some out -> In (O k) (import tr) X0, X : clientId -> nat -> network -> Prop k, k' : key net : network failed : list name tr : list (name * (raft_input + list raft_output)) Hstep : raft_intermediate_reachable net HIn : In (O k) (import tr) HOneq : k = k' -> False HOrdered : entries_ordered (fst k) (snd k) (fst k') (snd k') net output_greatest_id : forall (client : clientId) (id : nat) (failed : list name) (net : network) (tr : list (name * (raft_input + list raft_output))), step_failure_star step_failure_init (failed, net) tr -> key_in_output_trace client id tr -> greatest_id_for_client client id net output_correct_invariant : forall (client : clientId) (id : nat) (out : output) (failed : list name) (net : network) (tr : list (name * (raft_input + list raft_output))), step_failure_star step_failure_init (failed, net) tr -> in_output_trace client id out tr -> output_correct client id out (applied_entries (nwState net)) output_implies_input_before_output : forall (client : clientId) (id : nat) (failed : list name) (net : network) (tr : list (name * (raft_input + list raft_output))), step_failure_star step_failure_init (failed, net) tr -> key_in_output_trace client id tr -> input_before_output client id tr causal_order_preserved : forall (client : clientId) (id : nat) (client' : clientId) (id' : nat) (failed : list name) (net : network) (tr : list (name * (raft_input + list raft_output))), step_failure_star step_failure_init (failed, net) tr -> output_before_input client id client' id' tr -> entries_ordered client id client' id' net applied_implies_input : forall (client : clientId) (id : nat) (failed : list name) (net : network) (tr : list (name * (raft_input + list raft_output))) (e : entry), step_failure_star step_failure_init (failed, net) tr -> eClient e = client -> eId e = id -> applied_implies_input_state client id (eInput e) net -> in_input_trace client id (eInput e) tr output_implies_applied : forall (client : clientId) (id : nat) (failed : list name) (net : network) (tr : list (name * (raft_input + list raft_output))), step_failure_star step_failure_init (failed, net) tr -> key_in_output_trace client id tr -> in_applied_entries client id net Unable to unify \"raft_intermediate_reachable net\" with \"(fix before (A : Type) (x y : A) (l : list A) {struct l} : Prop := match l with | [] => False | a :: l' => a = x \\\\/ (a = y -> False) /\\\\ before A x y l' end) (IR key) (IRO k) (IRI k') (log_to_IR (get_output tr) (deduplicate_log (applied_entries (nwState net))))\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros * Hstep HIn HOneq HOrdered.", "apply step_failure_star_raft_intermediate_reachable in Hstep.", "qsimpl time: 1 use: before_import_output_before_input.", "qsimpl time: 1 use: before_import_output_before_input.", "red.", "qsimpl time: 1 use: before_import_output_before_input.", "qsimpl time: 1 use: before_import_output_before_input.", "eapply update, HIn.", "-", "qsimpl time: 1 use: get_output_import_O,before_import_output_before_input.", "qsimpl time: 1 use: get_output_import_O,before_import_output_before_input,in_import_in_trace_O.", "shelve.", "-", "qsimpl time: 1 use: get_output_import_O,before_import_output_before_input,in_import_in_trace_O.", "qsimpl time: 1 use: get_output_import_O,before_import_output_before_input,in_import_in_trace_O.", "qsimpl time: 1 use: get_output_import_O,get_output'_In,before_import_output_before_input,in_import_in_trace_O.", "qsimpl time: 1 use: get_output_import_O,get_output'_In,in_applied_entries,before_import_output_before_input,in_import_in_trace_O.", "qsimpl time: 1 use: get_output_import_O,get_output'_In,in_applied_entries,before_import_output_before_input,in_import_in_trace_O.", "qsimpl time: 1 use: get_output_import_O,get_output'_In,in_applied_entries,output_greatest_id_interface,before_import_output_before_input,in_import_in_trace_O."], "tactic": "qsimpl time: 1 use: get_output_import_O,get_output'_In,eexists,in_applied_entries,output_greatest_id_interface,before_import_output_before_input,in_import_in_trace_O.", "exn": "The reference eexists was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros * Hstep HIn HOneq HOrdered.", "apply step_failure_star_raft_intermediate_reachable in Hstep.", "qsimpl time: 1 use: before_import_output_before_input.", "qsimpl time: 1 use: before_import_output_before_input.", "red.", "qsimpl time: 1 use: before_import_output_before_input.", "qsimpl time: 1 use: before_import_output_before_input.", "eapply update, HIn.", "-", "qsimpl time: 1 use: get_output_import_O,before_import_output_before_input.", "qsimpl time: 1 use: get_output_import_O,before_import_output_before_input,in_import_in_trace_O.", "shelve.", "-", "qsimpl time: 1 use: get_output_import_O,before_import_output_before_input,in_import_in_trace_O.", "qsimpl time: 1 use: get_output_import_O,before_import_output_before_input,in_import_in_trace_O.", "qsimpl time: 1 use: get_output_import_O,get_output'_In,before_import_output_before_input,in_import_in_trace_O.", "qsimpl time: 1 use: get_output_import_O,get_output'_In,in_applied_entries,before_import_output_before_input,in_import_in_trace_O.", "qsimpl time: 1 use: get_output_import_O,get_output'_In,in_applied_entries,before_import_output_before_input,in_import_in_trace_O.", "qsimpl time: 1 use: get_output_import_O,get_output'_In,in_applied_entries,output_greatest_id_interface,before_import_output_before_input,in_import_in_trace_O.", "qsimpl time: 1 use: get_output_import_O,get_output'_In,in_applied_entries,output_greatest_id_interface,before_import_output_before_input,in_import_in_trace_O."], "tactic": "eexists; split; eauto.", "exn": "Not an inductive product.", "type": "not_inductive_product", "handled": true}, {"ctx": ["intros * Hstep HIn HOneq HOrdered.", "apply step_failure_star_raft_intermediate_reachable in Hstep.", "qsimpl time: 1 use: before_import_output_before_input.", "qsimpl time: 1 use: before_import_output_before_input.", "red.", "qsimpl time: 1 use: before_import_output_before_input.", "qsimpl time: 1 use: before_import_output_before_input.", "eapply update, HIn.", "-", "qsimpl time: 1 use: get_output_import_O,before_import_output_before_input.", "qsimpl time: 1 use: get_output_import_O,before_import_output_before_input,in_import_in_trace_O.", "shelve.", "-", "qsimpl time: 1 use: get_output_import_O,before_import_output_before_input,in_import_in_trace_O.", "qsimpl time: 1 use: get_output_import_O,before_import_output_before_input,in_import_in_trace_O.", "qsimpl time: 1 use: get_output_import_O,get_output'_In,before_import_output_before_input,in_import_in_trace_O.", "qsimpl time: 1 use: get_output_import_O,get_output'_In,in_applied_entries,before_import_output_before_input,in_import_in_trace_O.", "qsimpl time: 1 use: get_output_import_O,get_output'_In,in_applied_entries,before_import_output_before_input,in_import_in_trace_O.", "qsimpl time: 1 use: get_output_import_O,get_output'_In,in_applied_entries,output_greatest_id_interface,before_import_output_before_input,in_import_in_trace_O.", "qsimpl time: 1 use: get_output_import_O,get_output'_In,in_applied_entries,output_greatest_id_interface,before_import_output_before_input,in_import_in_trace_O."], "tactic": "qsimpl time: 1 use: get_output_import_O,get_output'_In,eexists,in_applied_entries,output_greatest_id_interface,before_import_output_before_input,in_import_in_trace_O.", "exn": "The reference eexists was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros * Hstep HIn HOneq HOrdered.", "apply step_failure_star_raft_intermediate_reachable in Hstep.", "qsimpl time: 1 use: before_import_output_before_input.", "qsimpl time: 1 use: before_import_output_before_input.", "red.", "qsimpl time: 1 use: before_import_output_before_input.", "qsimpl time: 1 use: before_import_output_before_input.", "eapply update, HIn.", "-", "qsimpl time: 1 use: get_output_import_O,before_import_output_before_input.", "qsimpl time: 1 use: get_output_import_O,before_import_output_before_input,in_import_in_trace_O.", "shelve.", "-", "qsimpl time: 1 use: get_output_import_O,before_import_output_before_input,in_import_in_trace_O.", "qsimpl time: 1 use: get_output_import_O,before_import_output_before_input,in_import_in_trace_O.", "qsimpl time: 1 use: get_output_import_O,get_output'_In,before_import_output_before_input,in_import_in_trace_O.", "qsimpl time: 1 use: get_output_import_O,get_output'_In,in_applied_entries,before_import_output_before_input,in_import_in_trace_O.", "qsimpl time: 1 use: get_output_import_O,get_output'_In,in_applied_entries,before_import_output_before_input,in_import_in_trace_O.", "qsimpl time: 1 use: get_output_import_O,get_output'_In,in_applied_entries,output_greatest_id_interface,before_import_output_before_input,in_import_in_trace_O.", "qsimpl time: 1 use: get_output_import_O,get_output'_In,in_applied_entries,output_greatest_id_interface,before_import_output_before_input,in_import_in_trace_O.", "qsimpl time: 1 use: get_output_import_O,get_output'_In,in_applied_entries,output_greatest_id_interface,before_import_output_before_input,in_import_in_trace_O."], "tactic": "eapply causal_order_preserved_interface.", "exn": "In environment orig_base_params : BaseParams raft_params : RaftParams orig_base_params H6 : forall (tr : list (name * (raft_input + list raft_output))) (k : key), In (O k) (import tr) -> exists (os : list raft_output) (h : name), In (h, inr os) tr /\\\\ (exists o : output, In (ClientResponse (fst k) (snd k) o) os) H4 : forall (k k' : key) (tr : list (name * (raft_input + list raft_output))), before (O k) (I k') (import tr) -> output_before_input (fst k) (snd k) (fst k') (snd k') tr X6 : Prop one_node_params : OneNodeParams orig_base_params X5 : clientId -> nat -> network -> Prop H3 : forall (l : list raft_output) (k : key) (out : output), get_output' l k = Some out -> In (ClientResponse (fst k) (snd k) out) l H0 : forall (tr : list (name * (raft_input + list raft_output))) (k : key) (out : output), get_output tr k = Some out -> In (O k) (import tr) X4 : Prop X3 : clientId -> nat -> network -> Prop X2 : Prop X1, X0, X : clientId -> nat -> network -> Prop k, k' : key net : network failed : list name tr : list (name * (raft_input + list raft_output)) Hstep : raft_intermediate_reachable net HIn : In (O k) (import tr) HOneq : k = k' -> False HOrdered : entries_ordered (fst k) (snd k) (fst k') (snd k') net output_greatest_id : forall (client : clientId) (id : nat) (failed : list name) (net : network) (tr : list (name * (raft_input + list raft_output))), step_failure_star step_failure_init (failed, net) tr -> key_in_output_trace client id tr -> greatest_id_for_client client id net output_correct_invariant : forall (client : clientId) (id : nat) (out : output) (failed : list name) (net : network) (tr : list (name * (raft_input + list raft_output))), step_failure_star step_failure_init (failed, net) tr -> in_output_trace client id out tr -> output_correct client id out (applied_entries (nwState net)) output_implies_input_before_output : forall (client : clientId) (id : nat) (failed : list name) (net : network) (tr : list (name * (raft_input + list raft_output))), step_failure_star step_failure_init (failed, net) tr -> key_in_output_trace client id tr -> input_before_output client id tr causal_order_preserved : forall (client : clientId) (id : nat) (client' : clientId) (id' : nat) (failed : list name) (net : network) (tr : list (name * (raft_input + list raft_output))), step_failure_star step_failure_init (failed, net) tr -> output_before_input client id client' id' tr -> entries_ordered client id client' id' net applied_implies_input : forall (client : clientId) (id : nat) (failed : list name) (net : network) (tr : list (name * (raft_input + list raft_output))) (e : entry), step_failure_star step_failure_init (failed, net) tr -> eClient e = client -> eId e = id -> applied_implies_input_state client id (eInput e) net -> in_input_trace client id (eInput e) tr output_implies_applied : forall (client : clientId) (id : nat) (failed : list name) (net : network) (tr : list (name * (raft_input + list raft_output))), step_failure_star step_failure_init (failed, net) tr -> key_in_output_trace client id tr -> in_applied_entries client id net Unable to unify \"Prop\" with \"(fix before (A : Type) (x y : A) (l : list A) {struct l} : Prop := match l with | [] => False | a :: l' => a = x \\\\/ (a = y -> False) /\\\\ before A x y l' end) (IR key) (IRO k) (IRI k') (log_to_IR (get_output tr) (deduplicate_log (applied_entries (nwState net))))\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros * Hstep HIn HOneq HOrdered.", "apply step_failure_star_raft_intermediate_reachable in Hstep.", "qsimpl time: 1 use: before_import_output_before_input.", "qsimpl time: 1 use: before_import_output_before_input.", "red.", "qsimpl time: 1 use: before_import_output_before_input.", "qsimpl time: 1 use: before_import_output_before_input.", "eapply update, HIn.", "-", "qsimpl time: 1 use: get_output_import_O,before_import_output_before_input.", "qsimpl time: 1 use: get_output_import_O,before_import_output_before_input,in_import_in_trace_O.", "shelve.", "-", "qsimpl time: 1 use: get_output_import_O,before_import_output_before_input,in_import_in_trace_O.", "qsimpl time: 1 use: get_output_import_O,before_import_output_before_input,in_import_in_trace_O.", "qsimpl time: 1 use: get_output_import_O,get_output'_In,before_import_output_before_input,in_import_in_trace_O.", "qsimpl time: 1 use: get_output_import_O,get_output'_In,in_applied_entries,before_import_output_before_input,in_import_in_trace_O.", "qsimpl time: 1 use: get_output_import_O,get_output'_In,in_applied_entries,before_import_output_before_input,in_import_in_trace_O.", "qsimpl time: 1 use: get_output_import_O,get_output'_In,in_applied_entries,output_greatest_id_interface,before_import_output_before_input,in_import_in_trace_O.", "qsimpl time: 1 use: get_output_import_O,get_output'_In,in_applied_entries,output_greatest_id_interface,before_import_output_before_input,in_import_in_trace_O.", "qsimpl time: 1 use: get_output_import_O,get_output'_In,in_applied_entries,output_greatest_id_interface,before_import_output_before_input,in_import_in_trace_O."], "tactic": "qsimpl time: 1 use: get_output_import_O,causal_order_preserved_interface,get_output'_In,eexists,in_applied_entries,output_greatest_id_interface,before_import_output_before_input,in_import_in_trace_O.", "exn": "The reference eexists was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros * Hstep HIn HOneq HOrdered.", "apply step_failure_star_raft_intermediate_reachable in Hstep.", "qsimpl time: 1 use: before_import_output_before_input.", "qsimpl time: 1 use: before_import_output_before_input.", "red.", "qsimpl time: 1 use: before_import_output_before_input.", "qsimpl time: 1 use: before_import_output_before_input.", "eapply update, HIn.", "-", "qsimpl time: 1 use: get_output_import_O,before_import_output_before_input.", "qsimpl time: 1 use: get_output_import_O,before_import_output_before_input,in_import_in_trace_O.", "shelve.", "-", "qsimpl time: 1 use: get_output_import_O,before_import_output_before_input,in_import_in_trace_O.", "qsimpl time: 1 use: get_output_import_O,before_import_output_before_input,in_import_in_trace_O.", "qsimpl time: 1 use: get_output_import_O,get_output'_In,before_import_output_before_input,in_import_in_trace_O.", "qsimpl time: 1 use: get_output_import_O,get_output'_In,in_applied_entries,before_import_output_before_input,in_import_in_trace_O.", "qsimpl time: 1 use: get_output_import_O,get_output'_In,in_applied_entries,before_import_output_before_input,in_import_in_trace_O.", "qsimpl time: 1 use: get_output_import_O,get_output'_In,in_applied_entries,output_greatest_id_interface,before_import_output_before_input,in_import_in_trace_O.", "qsimpl time: 1 use: get_output_import_O,get_output'_In,in_applied_entries,output_greatest_id_interface,before_import_output_before_input,in_import_in_trace_O.", "qsimpl time: 1 use: get_output_import_O,get_output'_In,in_applied_entries,output_greatest_id_interface,before_import_output_before_input,in_import_in_trace_O.", "qsimpl time: 1 use: get_output_import_O,causal_order_preserved_interface,get_output'_In,in_applied_entries,output_greatest_id_interface,before_import_output_before_input,in_import_in_trace_O."], "tactic": "apply Hstep.", "exn": "In environment orig_base_params : BaseParams raft_params : RaftParams orig_base_params H5 : forall (tr : list (name * (raft_input + list raft_output))) (k : key), In (O k) (import tr) -> exists (os : list raft_output) (h : name), In (h, inr os) tr /\\\\ (exists o : output, In (ClientResponse (fst k) (snd k) o) os) H2 : forall (k k' : key) (tr : list (name * (raft_input + list raft_output))), before (O k) (I k') (import tr) -> output_before_input (fst k) (snd k) (fst k') (snd k') tr X9 : Prop one_node_params : OneNodeParams orig_base_params X8 : clientId -> nat -> network -> Prop H1 : forall (l : list raft_output) (k : key) (out : output), get_output' l k = Some out -> In (ClientResponse (fst k) (snd k) out) l X7 : Prop H : forall (tr : list (name * (raft_input + list raft_output))) (k : key) (out : output), get_output tr k = Some out -> In (O k) (import tr) X6 : Prop X5 : clientId -> nat -> network -> Prop X4 : Prop X3 : clientId -> nat -> network -> Prop X2 : Prop X1, X0, X : clientId -> nat -> network -> Prop k, k' : key net : network failed : list name tr : list (name * (raft_input + list raft_output)) Hstep : raft_intermediate_reachable net HIn : In (O k) (import tr) HOneq : k = k' -> False HOrdered : entries_ordered (fst k) (snd k) (fst k') (snd k') net output_greatest_id : forall (client : clientId) (id : nat) (failed : list name) (net : network) (tr : list (name * (raft_input + list raft_output))), step_failure_star step_failure_init (failed, net) tr -> key_in_output_trace client id tr -> greatest_id_for_client client id net output_correct_invariant : forall (client : clientId) (id : nat) (out : output) (failed : list name) (net : network) (tr : list (name * (raft_input + list raft_output))), step_failure_star step_failure_init (failed, net) tr -> in_output_trace client id out tr -> output_correct client id out (applied_entries (nwState net)) output_implies_input_before_output : forall (client : clientId) (id : nat) (failed : list name) (net : network) (tr : list (name * (raft_input + list raft_output))), step_failure_star step_failure_init (failed, net) tr -> key_in_output_trace client id tr -> input_before_output client id tr causal_order_preserved : forall (client : clientId) (id : nat) (client' : clientId) (id' : nat) (failed : list name) (net : network) (tr : list (name * (raft_input + list raft_output))), step_failure_star step_failure_init (failed, net) tr -> output_before_input client id client' id' tr -> entries_ordered client id client' id' net applied_implies_input : forall (client : clientId) (id : nat) (failed : list name) (net : network) (tr : list (name * (raft_input + list raft_output))) (e : entry), step_failure_star step_failure_init (failed, net) tr -> eClient e = client -> eId e = id -> applied_implies_input_state client id (eInput e) net -> in_input_trace client id (eInput e) tr output_implies_applied : forall (client : clientId) (id : nat) (failed : list name) (net : network) (tr : list (name * (raft_input + list raft_output))), step_failure_star step_failure_init (failed, net) tr -> key_in_output_trace client id tr -> in_applied_entries client id net Unable to unify \"raft_intermediate_reachable net\" with \"(fix before (A : Type) (x y : A) (l : list A) {struct l} : Prop := match l with | [] => False | a :: l' => a = x \\\\/ (a = y -> False) /\\\\ before A x y l' end) (IR key) (IRO k) (IRI k') (log_to_IR (get_output tr) (deduplicate_log (applied_entries (nwState net))))\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros * Hstep HIn HOneq HOrdered.", "apply step_failure_star_raft_intermediate_reachable in Hstep.", "qsimpl time: 1 use: before_import_output_before_input.", "qsimpl time: 1 use: before_import_output_before_input.", "red.", "qsimpl time: 1 use: before_import_output_before_input.", "qsimpl time: 1 use: before_import_output_before_input.", "eapply update, HIn.", "-", "qsimpl time: 1 use: get_output_import_O,before_import_output_before_input.", "qsimpl time: 1 use: get_output_import_O,before_import_output_before_input,in_import_in_trace_O.", "shelve.", "-", "qsimpl time: 1 use: get_output_import_O,before_import_output_before_input,in_import_in_trace_O.", "qsimpl time: 1 use: get_output_import_O,before_import_output_before_input,in_import_in_trace_O.", "qsimpl time: 1 use: get_output_import_O,get_output'_In,before_import_output_before_input,in_import_in_trace_O.", "qsimpl time: 1 use: get_output_import_O,get_output'_In,in_applied_entries,before_import_output_before_input,in_import_in_trace_O.", "qsimpl time: 1 use: get_output_import_O,get_output'_In,in_applied_entries,before_import_output_before_input,in_import_in_trace_O.", "qsimpl time: 1 use: get_output_import_O,get_output'_In,in_applied_entries,output_greatest_id_interface,before_import_output_before_input,in_import_in_trace_O.", "qsimpl time: 1 use: get_output_import_O,get_output'_In,in_applied_entries,output_greatest_id_interface,before_import_output_before_input,in_import_in_trace_O.", "qsimpl time: 1 use: get_output_import_O,get_output'_In,in_applied_entries,output_greatest_id_interface,before_import_output_before_input,in_import_in_trace_O.", "qsimpl time: 1 use: get_output_import_O,causal_order_preserved_interface,get_output'_In,in_applied_entries,output_greatest_id_interface,before_import_output_before_input,in_import_in_trace_O."], "tactic": "qsimpl time: 1 use: get_output_import_O,causal_order_preserved_interface,get_output'_In,eexists,in_applied_entries,output_greatest_id_interface,before_import_output_before_input,in_import_in_trace_O.", "exn": "The reference eexists was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros * Hstep HIn HOneq HOrdered.", "apply step_failure_star_raft_intermediate_reachable in Hstep.", "qsimpl time: 1 use: before_import_output_before_input.", "qsimpl time: 1 use: before_import_output_before_input.", "red.", "qsimpl time: 1 use: before_import_output_before_input.", "qsimpl time: 1 use: before_import_output_before_input.", "eapply update, HIn.", "-", "qsimpl time: 1 use: get_output_import_O,before_import_output_before_input.", "qsimpl time: 1 use: get_output_import_O,before_import_output_before_input,in_import_in_trace_O.", "shelve.", "-", "qsimpl time: 1 use: get_output_import_O,before_import_output_before_input,in_import_in_trace_O.", "qsimpl time: 1 use: get_output_import_O,before_import_output_before_input,in_import_in_trace_O.", "qsimpl time: 1 use: get_output_import_O,get_output'_In,before_import_output_before_input,in_import_in_trace_O.", "qsimpl time: 1 use: get_output_import_O,get_output'_In,in_applied_entries,before_import_output_before_input,in_import_in_trace_O.", "qsimpl time: 1 use: get_output_import_O,get_output'_In,in_applied_entries,before_import_output_before_input,in_import_in_trace_O.", "qsimpl time: 1 use: get_output_import_O,get_output'_In,in_applied_entries,output_greatest_id_interface,before_import_output_before_input,in_import_in_trace_O.", "qsimpl time: 1 use: get_output_import_O,get_output'_In,in_applied_entries,output_greatest_id_interface,before_import_output_before_input,in_import_in_trace_O.", "qsimpl time: 1 use: get_output_import_O,get_output'_In,in_applied_entries,output_greatest_id_interface,before_import_output_before_input,in_import_in_trace_O.", "qsimpl time: 1 use: get_output_import_O,causal_order_preserved_interface,get_output'_In,in_applied_entries,output_greatest_id_interface,before_import_output_before_input,in_import_in_trace_O.", "qsimpl time: 1 use: get_output_import_O,causal_order_preserved_interface,get_output'_In,in_applied_entries,output_greatest_id_interface,before_import_output_before_input,in_import_in_trace_O."], "tactic": "apply output_before_input_interface.", "exn": "The reference output_before_input_interface was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros * Hstep HIn HOneq HOrdered.", "apply step_failure_star_raft_intermediate_reachable in Hstep.", "qsimpl time: 1 use: before_import_output_before_input.", "qsimpl time: 1 use: before_import_output_before_input.", "red.", "qsimpl time: 1 use: before_import_output_before_input.", "qsimpl time: 1 use: before_import_output_before_input.", "eapply update, HIn.", "-", "qsimpl time: 1 use: get_output_import_O,before_import_output_before_input.", "qsimpl time: 1 use: get_output_import_O,before_import_output_before_input,in_import_in_trace_O.", "shelve.", "-", "qsimpl time: 1 use: get_output_import_O,before_import_output_before_input,in_import_in_trace_O.", "qsimpl time: 1 use: get_output_import_O,before_import_output_before_input,in_import_in_trace_O.", "qsimpl time: 1 use: get_output_import_O,get_output'_In,before_import_output_before_input,in_import_in_trace_O.", "qsimpl time: 1 use: get_output_import_O,get_output'_In,in_applied_entries,before_import_output_before_input,in_import_in_trace_O.", "qsimpl time: 1 use: get_output_import_O,get_output'_In,in_applied_entries,before_import_output_before_input,in_import_in_trace_O.", "qsimpl time: 1 use: get_output_import_O,get_output'_In,in_applied_entries,output_greatest_id_interface,before_import_output_before_input,in_import_in_trace_O.", "qsimpl time: 1 use: get_output_import_O,get_output'_In,in_applied_entries,output_greatest_id_interface,before_import_output_before_input,in_import_in_trace_O.", "qsimpl time: 1 use: get_output_import_O,get_output'_In,in_applied_entries,output_greatest_id_interface,before_import_output_before_input,in_import_in_trace_O.", "qsimpl time: 1 use: get_output_import_O,causal_order_preserved_interface,get_output'_In,in_applied_entries,output_greatest_id_interface,before_import_output_before_input,in_import_in_trace_O.", "qsimpl time: 1 use: get_output_import_O,causal_order_preserved_interface,get_output'_In,in_applied_entries,output_greatest_id_interface,before_import_output_before_input,in_import_in_trace_O.", "apply Decidable.dec_not_not."], "tactic": "apply Hstep.", "exn": "In environment orig_base_params : BaseParams raft_params : RaftParams orig_base_params H6 : forall (tr : list (name * (raft_input + list raft_output))) (k : key), In (O k) (import tr) -> exists (os : list raft_output) (h : name), In (h, inr os) tr /\\\\ (exists o : output, In (ClientResponse (fst k) (snd k) o) os) H4 : forall (k k' : key) (tr : list (name * (raft_input + list raft_output))), before (O k) (I k') (import tr) -> output_before_input (fst k) (snd k) (fst k') (snd k') tr X12 : Prop one_node_params : OneNodeParams orig_base_params X11 : clientId -> nat -> network -> Prop H3 : forall (l : list raft_output) (k : key) (out : output), get_output' l k = Some out -> In (ClientResponse (fst k) (snd k) out) l X10 : Prop H0 : forall (tr : list (name * (raft_input + list raft_output))) (k : key) (out : output), get_output tr k = Some out -> In (O k) (import tr) X9 : Prop X8 : clientId -> nat -> network -> Prop X7, X6 : Prop X5 : clientId -> nat -> network -> Prop X4 : Prop X3 : clientId -> nat -> network -> Prop X2 : Prop X1, X0, X : clientId -> nat -> network -> Prop k, k' : key net : network failed : list name tr : list (name * (raft_input + list raft_output)) Hstep : raft_intermediate_reachable net HIn : In (O k) (import tr) HOneq : k = k' -> False HOrdered : entries_ordered (fst k) (snd k) (fst k') (snd k') net output_greatest_id : forall (client : clientId) (id : nat) (failed : list name) (net : network) (tr : list (name * (raft_input + list raft_output))), step_failure_star step_failure_init (failed, net) tr -> key_in_output_trace client id tr -> greatest_id_for_client client id net output_correct_invariant : forall (client : clientId) (id : nat) (out : output) (failed : list name) (net : network) (tr : list (name * (raft_input + list raft_output))), step_failure_star step_failure_init (failed, net) tr -> in_output_trace client id out tr -> output_correct client id out (applied_entries (nwState net)) output_implies_input_before_output : forall (client : clientId) (id : nat) (failed : list name) (net : network) (tr : list (name * (raft_input + list raft_output))), step_failure_star step_failure_init (failed, net) tr -> key_in_output_trace client id tr -> input_before_output client id tr causal_order_preserved : forall (client : clientId) (id : nat) (client' : clientId) (id' : nat) (failed : list name) (net : network) (tr : list (name * (raft_input + list raft_output))), step_failure_star step_failure_init (failed, net) tr -> output_before_input client id client' id' tr -> entries_ordered client id client' id' net applied_implies_input : forall (client : clientId) (id : nat) (failed : list name) (net : network) (tr : list (name * (raft_input + list raft_output))) (e : entry), step_failure_star step_failure_init (failed, net) tr -> eClient e = client -> eId e = id -> applied_implies_input_state client id (eInput e) net -> in_input_trace client id (eInput e) tr output_implies_applied : forall (client : clientId) (id : nat) (failed : list name) (net : network) (tr : list (name * (raft_input + list raft_output))), step_failure_star step_failure_init (failed, net) tr -> key_in_output_trace client id tr -> in_applied_entries client id net Unable to unify \"raft_intermediate_reachable net\" with \"Decidable.decidable ((fix before (A : Type) (x y : A) (l : list A) {struct l} : Prop := match l with | [] => False | a :: l' => a = x \\\\/ (a = y -> False) /\\\\ before A x y l' end) (IR key) (IRO k) (IRI k') (log_to_IR (get_output tr) (deduplicate_log (applied_entries (nwState net)))))\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros * Hstep HIn HOneq HOrdered.", "apply step_failure_star_raft_intermediate_reachable in Hstep.", "qsimpl time: 1 use: before_import_output_before_input.", "qsimpl time: 1 use: before_import_output_before_input.", "red.", "qsimpl time: 1 use: before_import_output_before_input.", "qsimpl time: 1 use: before_import_output_before_input.", "eapply update, HIn.", "-", "qsimpl time: 1 use: get_output_import_O,before_import_output_before_input.", "qsimpl time: 1 use: get_output_import_O,before_import_output_before_input,in_import_in_trace_O.", "shelve.", "-", "qsimpl time: 1 use: get_output_import_O,before_import_output_before_input,in_import_in_trace_O.", "qsimpl time: 1 use: get_output_import_O,before_import_output_before_input,in_import_in_trace_O.", "qsimpl time: 1 use: get_output_import_O,get_output'_In,before_import_output_before_input,in_import_in_trace_O.", "qsimpl time: 1 use: get_output_import_O,get_output'_In,in_applied_entries,before_import_output_before_input,in_import_in_trace_O.", "qsimpl time: 1 use: get_output_import_O,get_output'_In,in_applied_entries,before_import_output_before_input,in_import_in_trace_O.", "qsimpl time: 1 use: get_output_import_O,get_output'_In,in_applied_entries,output_greatest_id_interface,before_import_output_before_input,in_import_in_trace_O.", "qsimpl time: 1 use: get_output_import_O,get_output'_In,in_applied_entries,output_greatest_id_interface,before_import_output_before_input,in_import_in_trace_O.", "qsimpl time: 1 use: get_output_import_O,get_output'_In,in_applied_entries,output_greatest_id_interface,before_import_output_before_input,in_import_in_trace_O.", "qsimpl time: 1 use: get_output_import_O,causal_order_preserved_interface,get_output'_In,in_applied_entries,output_greatest_id_interface,before_import_output_before_input,in_import_in_trace_O.", "qsimpl time: 1 use: get_output_import_O,causal_order_preserved_interface,get_output'_In,in_applied_entries,output_greatest_id_interface,before_import_output_before_input,in_import_in_trace_O.", "apply Decidable.dec_not_not."], "tactic": "qsimpl time: 1 use: get_output_import_O,causal_order_preserved_interface,get_output'_In,eexists,in_applied_entries,output_greatest_id_interface,before_import_output_before_input,in_import_in_trace_O.", "exn": "The reference eexists was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros * Hstep HIn HOneq HOrdered.", "apply step_failure_star_raft_intermediate_reachable in Hstep.", "qsimpl time: 1 use: before_import_output_before_input.", "qsimpl time: 1 use: before_import_output_before_input.", "red.", "qsimpl time: 1 use: before_import_output_before_input.", "qsimpl time: 1 use: before_import_output_before_input.", "eapply update, HIn.", "-", "qsimpl time: 1 use: get_output_import_O,before_import_output_before_input.", "qsimpl time: 1 use: get_output_import_O,before_import_output_before_input,in_import_in_trace_O.", "shelve.", "-", "qsimpl time: 1 use: get_output_import_O,before_import_output_before_input,in_import_in_trace_O.", "qsimpl time: 1 use: get_output_import_O,before_import_output_before_input,in_import_in_trace_O.", "qsimpl time: 1 use: get_output_import_O,get_output'_In,before_import_output_before_input,in_import_in_trace_O.", "qsimpl time: 1 use: get_output_import_O,get_output'_In,in_applied_entries,before_import_output_before_input,in_import_in_trace_O.", "qsimpl time: 1 use: get_output_import_O,get_output'_In,in_applied_entries,before_import_output_before_input,in_import_in_trace_O.", "qsimpl time: 1 use: get_output_import_O,get_output'_In,in_applied_entries,output_greatest_id_interface,before_import_output_before_input,in_import_in_trace_O.", "qsimpl time: 1 use: get_output_import_O,get_output'_In,in_applied_entries,output_greatest_id_interface,before_import_output_before_input,in_import_in_trace_O.", "qsimpl time: 1 use: get_output_import_O,get_output'_In,in_applied_entries,output_greatest_id_interface,before_import_output_before_input,in_import_in_trace_O.", "qsimpl time: 1 use: get_output_import_O,causal_order_preserved_interface,get_output'_In,in_applied_entries,output_greatest_id_interface,before_import_output_before_input,in_import_in_trace_O.", "qsimpl time: 1 use: get_output_import_O,causal_order_preserved_interface,get_output'_In,in_applied_entries,output_greatest_id_interface,before_import_output_before_input,in_import_in_trace_O.", "apply Decidable.dec_not_not.", "qsimpl time: 1 use: get_output_import_O,causal_order_preserved_interface,get_output'_In,in_applied_entries,output_greatest_id_interface,before_import_output_before_input,in_import_in_trace_O.", "red."], "tactic": "apply in_import_in_trace_I in HIn as [h [i Hin]].", "exn": "Unable to apply lemma of type \"forall (tr : list (name * (raft_input + list raft_output))) (k : key), In (I k) (import tr) -> exists (h : name) (i : input), In (h, inl (ClientRequest (fst k) (snd k) i)) tr\" on hypothesis of type \"In (O k) (import tr)\".", "type": "cannot_apply_in", "handled": true}, {"ctx": ["intros * Hstep HIn HOneq HOrdered.", "apply step_failure_star_raft_intermediate_reachable in Hstep.", "qsimpl time: 1 use: before_import_output_before_input.", "qsimpl time: 1 use: before_import_output_before_input.", "red.", "qsimpl time: 1 use: before_import_output_before_input.", "qsimpl time: 1 use: before_import_output_before_input.", "eapply update, HIn.", "-", "qsimpl time: 1 use: get_output_import_O,before_import_output_before_input.", "qsimpl time: 1 use: get_output_import_O,before_import_output_before_input,in_import_in_trace_O.", "shelve.", "-", "qsimpl time: 1 use: get_output_import_O,before_import_output_before_input,in_import_in_trace_O.", "qsimpl time: 1 use: get_output_import_O,before_import_output_before_input,in_import_in_trace_O.", "qsimpl time: 1 use: get_output_import_O,get_output'_In,before_import_output_before_input,in_import_in_trace_O.", "qsimpl time: 1 use: get_output_import_O,get_output'_In,in_applied_entries,before_import_output_before_input,in_import_in_trace_O.", "qsimpl time: 1 use: get_output_import_O,get_output'_In,in_applied_entries,before_import_output_before_input,in_import_in_trace_O.", "qsimpl time: 1 use: get_output_import_O,get_output'_In,in_applied_entries,output_greatest_id_interface,before_import_output_before_input,in_import_in_trace_O.", "qsimpl time: 1 use: get_output_import_O,get_output'_In,in_applied_entries,output_greatest_id_interface,before_import_output_before_input,in_import_in_trace_O.", "qsimpl time: 1 use: get_output_import_O,get_output'_In,in_applied_entries,output_greatest_id_interface,before_import_output_before_input,in_import_in_trace_O.", "qsimpl time: 1 use: get_output_import_O,causal_order_preserved_interface,get_output'_In,in_applied_entries,output_greatest_id_interface,before_import_output_before_input,in_import_in_trace_O.", "qsimpl time: 1 use: get_output_import_O,causal_order_preserved_interface,get_output'_In,in_applied_entries,output_greatest_id_interface,before_import_output_before_input,in_import_in_trace_O.", "apply Decidable.dec_not_not.", "qsimpl time: 1 use: get_output_import_O,causal_order_preserved_interface,get_output'_In,in_applied_entries,output_greatest_id_interface,before_import_output_before_input,in_import_in_trace_O.", "red."], "tactic": "qsimpl time: 1 use: get_output_import_O,causal_order_preserved_interface,in_import_in_trace_I,get_output'_In,eexists,in_applied_entries,output_greatest_id_interface,before_import_output_before_input,in_import_in_trace_O.", "exn": "The reference eexists was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros * Hstep HIn HOneq HOrdered.", "apply step_failure_star_raft_intermediate_reachable in Hstep.", "qsimpl time: 1 use: before_import_output_before_input.", "qsimpl time: 1 use: before_import_output_before_input.", "red.", "qsimpl time: 1 use: before_import_output_before_input.", "qsimpl time: 1 use: before_import_output_before_input.", "eapply update, HIn.", "-", "qsimpl time: 1 use: get_output_import_O,before_import_output_before_input.", "qsimpl time: 1 use: get_output_import_O,before_import_output_before_input,in_import_in_trace_O.", "shelve.", "-", "qsimpl time: 1 use: get_output_import_O,before_import_output_before_input,in_import_in_trace_O.", "qsimpl time: 1 use: get_output_import_O,before_import_output_before_input,in_import_in_trace_O.", "qsimpl time: 1 use: get_output_import_O,get_output'_In,before_import_output_before_input,in_import_in_trace_O.", "qsimpl time: 1 use: get_output_import_O,get_output'_In,in_applied_entries,before_import_output_before_input,in_import_in_trace_O.", "qsimpl time: 1 use: get_output_import_O,get_output'_In,in_applied_entries,before_import_output_before_input,in_import_in_trace_O.", "qsimpl time: 1 use: get_output_import_O,get_output'_In,in_applied_entries,output_greatest_id_interface,before_import_output_before_input,in_import_in_trace_O.", "qsimpl time: 1 use: get_output_import_O,get_output'_In,in_applied_entries,output_greatest_id_interface,before_import_output_before_input,in_import_in_trace_O.", "qsimpl time: 1 use: get_output_import_O,get_output'_In,in_applied_entries,output_greatest_id_interface,before_import_output_before_input,in_import_in_trace_O.", "qsimpl time: 1 use: get_output_import_O,causal_order_preserved_interface,get_output'_In,in_applied_entries,output_greatest_id_interface,before_import_output_before_input,in_import_in_trace_O.", "qsimpl time: 1 use: get_output_import_O,causal_order_preserved_interface,get_output'_In,in_applied_entries,output_greatest_id_interface,before_import_output_before_input,in_import_in_trace_O.", "apply Decidable.dec_not_not.", "qsimpl time: 1 use: get_output_import_O,causal_order_preserved_interface,get_output'_In,in_applied_entries,output_greatest_id_interface,before_import_output_before_input,in_import_in_trace_O.", "red.", "qsimpl time: 1 use: get_output_import_O,causal_order_preserved_interface,in_import_in_trace_I,get_output'_In,in_applied_entries,output_greatest_id_interface,before_import_output_before_input,in_import_in_trace_O."], "tactic": "do 2 eexists; repeat split; eauto.", "exn": "Not an inductive goal with 1 constructor.", "type": "not_inductive_goal", "handled": true}, {"ctx": ["intros * Hstep HIn HOneq HOrdered.", "apply step_failure_star_raft_intermediate_reachable in Hstep.", "qsimpl time: 1 use: before_import_output_before_input.", "qsimpl time: 1 use: before_import_output_before_input.", "red.", "qsimpl time: 1 use: before_import_output_before_input.", "qsimpl time: 1 use: before_import_output_before_input.", "eapply update, HIn.", "-", "qsimpl time: 1 use: get_output_import_O,before_import_output_before_input.", "qsimpl time: 1 use: get_output_import_O,before_import_output_before_input,in_import_in_trace_O.", "shelve.", "-", "qsimpl time: 1 use: get_output_import_O,before_import_output_before_input,in_import_in_trace_O.", "qsimpl time: 1 use: get_output_import_O,before_import_output_before_input,in_import_in_trace_O.", "qsimpl time: 1 use: get_output_import_O,get_output'_In,before_import_output_before_input,in_import_in_trace_O.", "qsimpl time: 1 use: get_output_import_O,get_output'_In,in_applied_entries,before_import_output_before_input,in_import_in_trace_O.", "qsimpl time: 1 use: get_output_import_O,get_output'_In,in_applied_entries,before_import_output_before_input,in_import_in_trace_O.", "qsimpl time: 1 use: get_output_import_O,get_output'_In,in_applied_entries,output_greatest_id_interface,before_import_output_before_input,in_import_in_trace_O.", "qsimpl time: 1 use: get_output_import_O,get_output'_In,in_applied_entries,output_greatest_id_interface,before_import_output_before_input,in_import_in_trace_O.", "qsimpl time: 1 use: get_output_import_O,get_output'_In,in_applied_entries,output_greatest_id_interface,before_import_output_before_input,in_import_in_trace_O.", "qsimpl time: 1 use: get_output_import_O,causal_order_preserved_interface,get_output'_In,in_applied_entries,output_greatest_id_interface,before_import_output_before_input,in_import_in_trace_O.", "qsimpl time: 1 use: get_output_import_O,causal_order_preserved_interface,get_output'_In,in_applied_entries,output_greatest_id_interface,before_import_output_before_input,in_import_in_trace_O.", "apply Decidable.dec_not_not.", "qsimpl time: 1 use: get_output_import_O,causal_order_preserved_interface,get_output'_In,in_applied_entries,output_greatest_id_interface,before_import_output_before_input,in_import_in_trace_O.", "red.", "qsimpl time: 1 use: get_output_import_O,causal_order_preserved_interface,in_import_in_trace_I,get_output'_In,in_applied_entries,output_greatest_id_interface,before_import_output_before_input,in_import_in_trace_O."], "tactic": "qsimpl time: 1 use: get_output_import_O,causal_order_preserved_interface,in_import_in_trace_I,get_output'_In,eexists,in_applied_entries,output_greatest_id_interface,before_import_output_before_input,in_import_in_trace_O.", "exn": "The reference eexists was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros * Hstep HIn HOneq HOrdered.", "apply step_failure_star_raft_intermediate_reachable in Hstep.", "qsimpl time: 1 use: before_import_output_before_input.", "qsimpl time: 1 use: before_import_output_before_input.", "red.", "qsimpl time: 1 use: before_import_output_before_input.", "qsimpl time: 1 use: before_import_output_before_input.", "eapply update, HIn.", "-", "qsimpl time: 1 use: get_output_import_O,before_import_output_before_input.", "qsimpl time: 1 use: get_output_import_O,before_import_output_before_input,in_import_in_trace_O.", "shelve.", "-", "qsimpl time: 1 use: get_output_import_O,before_import_output_before_input,in_import_in_trace_O.", "qsimpl time: 1 use: get_output_import_O,before_import_output_before_input,in_import_in_trace_O.", "qsimpl time: 1 use: get_output_import_O,get_output'_In,before_import_output_before_input,in_import_in_trace_O.", "qsimpl time: 1 use: get_output_import_O,get_output'_In,in_applied_entries,before_import_output_before_input,in_import_in_trace_O.", "qsimpl time: 1 use: get_output_import_O,get_output'_In,in_applied_entries,before_import_output_before_input,in_import_in_trace_O.", "qsimpl time: 1 use: get_output_import_O,get_output'_In,in_applied_entries,output_greatest_id_interface,before_import_output_before_input,in_import_in_trace_O.", "qsimpl time: 1 use: get_output_import_O,get_output'_In,in_applied_entries,output_greatest_id_interface,before_import_output_before_input,in_import_in_trace_O.", "qsimpl time: 1 use: get_output_import_O,get_output'_In,in_applied_entries,output_greatest_id_interface,before_import_output_before_input,in_import_in_trace_O.", "qsimpl time: 1 use: get_output_import_O,causal_order_preserved_interface,get_output'_In,in_applied_entries,output_greatest_id_interface,before_import_output_before_input,in_import_in_trace_O.", "qsimpl time: 1 use: get_output_import_O,causal_order_preserved_interface,get_output'_In,in_applied_entries,output_greatest_id_interface,before_import_output_before_input,in_import_in_trace_O.", "apply Decidable.dec_not_not.", "qsimpl time: 1 use: get_output_import_O,causal_order_preserved_interface,get_output'_In,in_applied_entries,output_greatest_id_interface,before_import_output_before_input,in_import_in_trace_O.", "red.", "qsimpl time: 1 use: get_output_import_O,causal_order_preserved_interface,in_import_in_trace_I,get_output'_In,in_applied_entries,output_greatest_id_interface,before_import_output_before_input,in_import_in_trace_O.", "qsimpl time: 1 use: get_output_import_O,causal_order_preserved_interface,in_import_in_trace_I,get_output'_In,in_applied_entries,output_greatest_id_interface,before_import_output_before_input,in_import_in_trace_O."], "tactic": "apply output_implies_applied_interface.", "exn": "In environment orig_base_params : BaseParams raft_params : RaftParams orig_base_params H8 : forall (tr : list (name * (raft_input + list raft_output))) (k : key), In (O k) (import tr) -> exists (os : list raft_output) (h : name), In (h, inr os) tr /\\\\ (exists o : output, In (ClientResponse (fst k) (snd k) o) os) H5 : forall (k k' : key) (tr : list (name * (raft_input + list raft_output))), before (O k) (I k') (import tr) -> output_before_input (fst k) (snd k) (fst k') (snd k') tr X21 : Prop one_node_params : OneNodeParams orig_base_params X20 : clientId -> nat -> network -> Prop H2 : forall (l : list raft_output) (k : key) (out : output), get_output' l k = Some out -> In (ClientResponse (fst k) (snd k) out) l H1 : forall (tr : list (name * (raft_input + list raft_output))) (k : key), In (I k) (import tr) -> exists (h : name) (i : input), In (h, inl (ClientRequest (fst k) (snd k) i)) tr X19 : Prop H : forall (tr : list (name * (raft_input + list raft_output))) (k : key) (out : output), get_output tr k = Some out -> In (O k) (import tr) X18 : Prop X17 : clientId -> nat -> network -> Prop X16, X15 : Prop X14 : clientId -> nat -> network -> Prop X13, X12 : Prop X11 : clientId -> nat -> network -> Prop X10, X9 : Prop X8 : clientId -> nat -> network -> Prop X7, X6 : Prop X5 : clientId -> nat -> network -> Prop X4 : Prop X3 : clientId -> nat -> network -> Prop X2 : Prop X1, X0, X : clientId -> nat -> network -> Prop k, k' : key net : network failed : list name tr : list (name * (raft_input + list raft_output)) Hstep : raft_intermediate_reachable net HIn : In (O k) (import tr) HOneq : k = k' -> False HOrdered : entries_ordered (fst k) (snd k) (fst k') (snd k') net output_greatest_id : forall (client : clientId) (id : nat) (failed : list name) (net : network) (tr : list (name * (raft_input + list raft_output))), step_failure_star step_failure_init (failed, net) tr -> key_in_output_trace client id tr -> greatest_id_for_client client id net output_correct_invariant : forall (client : clientId) (id : nat) (out : output) (failed : list name) (net : network) (tr : list (name * (raft_input + list raft_output))), step_failure_star step_failure_init (failed, net) tr -> in_output_trace client id out tr -> output_correct client id out (applied_entries (nwState net)) output_implies_input_before_output : forall (client : clientId) (id : nat) (failed : list name) (net : network) (tr : list (name * (raft_input + list raft_output))), step_failure_star step_failure_init (failed, net) tr -> key_in_output_trace client id tr -> input_before_output client id tr causal_order_preserved : forall (client : clientId) (id : nat) (client' : clientId) (id' : nat) (failed : list name) (net : network) (tr : list (name * (raft_input + list raft_output))), step_failure_star step_failure_init (failed, net) tr -> output_before_input client id client' id' tr -> entries_ordered client id client' id' net applied_implies_input : forall (client : clientId) (id : nat) (failed : list name) (net : network) (tr : list (name * (raft_input + list raft_output))) (e : entry), step_failure_star step_failure_init (failed, net) tr -> eClient e = client -> eId e = id -> applied_implies_input_state client id (eInput e) net -> in_input_trace client id (eInput e) tr output_implies_applied : forall (client : clientId) (id : nat) (failed : list name) (net : network) (tr : list (name * (raft_input + list raft_output))), step_failure_star step_failure_init (failed, net) tr -> key_in_output_trace client id tr -> in_applied_entries client id net Unable to unify \"Prop\" with \"(fix before (A : Type) (x y : A) (l : list A) {struct l} : Prop := match l with | [] => False | a :: l' => a = x \\\\/ (a = y -> False) /\\\\ before A x y l' end) (IR key) (IRO k) (IRI k') (log_to_IR (get_output tr) (deduplicate_log (applied_entries (nwState net)))) \\\\/ ((fix before (A : Type) (x y : A) (l : list A) {struct l} : Prop := match l with | [] => False | a :: l' => a = x \\\\/ (a = y -> False) /\\\\ before A x y l' end) (IR key) (IRO k) (IRI k') (log_to_IR (get_output tr) (deduplicate_log (applied_entries (nwState net)))) -> False)\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros * Hstep HIn HOneq HOrdered.", "apply step_failure_star_raft_intermediate_reachable in Hstep.", "qsimpl time: 1 use: before_import_output_before_input.", "qsimpl time: 1 use: before_import_output_before_input.", "red.", "qsimpl time: 1 use: before_import_output_before_input.", "qsimpl time: 1 use: before_import_output_before_input.", "eapply update, HIn.", "-", "qsimpl time: 1 use: get_output_import_O,before_import_output_before_input.", "qsimpl time: 1 use: get_output_import_O,before_import_output_before_input,in_import_in_trace_O.", "shelve.", "-", "qsimpl time: 1 use: get_output_import_O,before_import_output_before_input,in_import_in_trace_O.", "qsimpl time: 1 use: get_output_import_O,before_import_output_before_input,in_import_in_trace_O.", "qsimpl time: 1 use: get_output_import_O,get_output'_In,before_import_output_before_input,in_import_in_trace_O.", "qsimpl time: 1 use: get_output_import_O,get_output'_In,in_applied_entries,before_import_output_before_input,in_import_in_trace_O.", "qsimpl time: 1 use: get_output_import_O,get_output'_In,in_applied_entries,before_import_output_before_input,in_import_in_trace_O.", "qsimpl time: 1 use: get_output_import_O,get_output'_In,in_applied_entries,output_greatest_id_interface,before_import_output_before_input,in_import_in_trace_O.", "qsimpl time: 1 use: get_output_import_O,get_output'_In,in_applied_entries,output_greatest_id_interface,before_import_output_before_input,in_import_in_trace_O.", "qsimpl time: 1 use: get_output_import_O,get_output'_In,in_applied_entries,output_greatest_id_interface,before_import_output_before_input,in_import_in_trace_O.", "qsimpl time: 1 use: get_output_import_O,causal_order_preserved_interface,get_output'_In,in_applied_entries,output_greatest_id_interface,before_import_output_before_input,in_import_in_trace_O.", "qsimpl time: 1 use: get_output_import_O,causal_order_preserved_interface,get_output'_In,in_applied_entries,output_greatest_id_interface,before_import_output_before_input,in_import_in_trace_O.", "apply Decidable.dec_not_not.", "qsimpl time: 1 use: get_output_import_O,causal_order_preserved_interface,get_output'_In,in_applied_entries,output_greatest_id_interface,before_import_output_before_input,in_import_in_trace_O.", "red.", "qsimpl time: 1 use: get_output_import_O,causal_order_preserved_interface,in_import_in_trace_I,get_output'_In,in_applied_entries,output_greatest_id_interface,before_import_output_before_input,in_import_in_trace_O.", "qsimpl time: 1 use: get_output_import_O,causal_order_preserved_interface,in_import_in_trace_I,get_output'_In,in_applied_entries,output_greatest_id_interface,before_import_output_before_input,in_import_in_trace_O."], "tactic": "qsimpl time: 1 use: get_output_import_O,causal_order_preserved_interface,in_import_in_trace_I,output_implies_applied_interface,get_output'_In,eexists,in_applied_entries,output_greatest_id_interface,before_import_output_before_input,in_import_in_trace_O.", "exn": "The reference eexists was not found in the current environment.", "type": "ref_not_found", "handled": true}]}, "chat": [], "original": "intros * Hstep HIn HOneq HOrdered. apply step_failure_star_raft_intermediate_reachable in Hstep. eapply before_import_output_before_input. - apply HIn. - red. intros. apply output_implies_input_before_output. apply Hstep. eapply importa_get_output, HIn. - eapply get_output_import_O in HIn as [out Hout]. eapply in_import_in_trace_O in Hout as (os & h & Hin & Hino). eapply output_correct_invariant. apply Hstep. eexists; eexists; eauto. - do 2 eexists. repeat split. + split; [apply Hstep|]. apply get_output'_In with (net := net) in Hino as Hino'. unfold in_applied_entries in Hino', HIn |- *. destruct in_applied_entries; eauto using output_greatest_id. + intros. eapply output_greatest_id_interface. apply Hstep. eexists; split; eauto. + intros. eapply causal_order_preserved_interface. apply Hstep. apply output_before_input_interface. apply Hstep. red. apply in_import_in_trace_I in HIn as [h [i Hin]]. do 2 eexists; repeat split; eauto. apply output_implies_applied_interface. apply Hstep. apply in_import_in_trace_O in Hout as (os & h & Hin & [out Hino]). eapply in_applied_entries. eauto.", "back_times": 0, "succ": false, "time": 214.77118802070618}]