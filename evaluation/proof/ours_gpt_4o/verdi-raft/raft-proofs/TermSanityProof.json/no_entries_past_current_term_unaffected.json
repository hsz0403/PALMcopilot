[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": ["intros h d os d' ms H."], "tactic": "destruct (applyEntries h d (rev (filter (fun x : entry => (lastApplied d <? eIndex x) && (eIndex x <=? commitIndex d)) (findGtIndex (log d) (lastApplied d))))) eqn:Happly.", "exn": "In environment orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params h : network d : Net.name -> data os, d' : list packet ms : packet H : list packet The term \"h\" has type \"network\" while it is expected to have type \"name\".", "type": "wrong_type", "handled": true}]}, "chat": [], "original": "intros h d os d' ms H. unfold doGenericServer in H. destruct (applyEntries h d (rev (filter (fun x : entry => (lastApplied d <? eIndex x) && (eIndex x <=? commitIndex d)) (findGtIndex (log d) (lastApplied d))))) eqn:Happly. injection H as <- <- <-. split. - reflexivity. - split. + reflexivity. + intros m Hin. intros Hcontra. unfold is_append_entries in Hcontra. destruct Hcontra as [t [n [prevT [prevI [entries [c Heq]]]]]]. subst. contradiction.", "back_times": 0, "succ": false, "time": 105.62051820755005}]