[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": ["intros net st' ps' gd d h os d' ms Hdl Hp Hrr Hnst Hst' Hps'."], "tactic": "eapply refined_raft_net_invariant in Hp.", "exn": "Unable to apply lemma of type \"forall (P : network -> Prop) (net0 : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net0 -> P net0\" on hypothesis of type \"name\".", "type": "cannot_apply_in", "handled": true}, {"ctx": ["intros net st' ps' gd d h os d' ms Hdl Hp Hrr Hnst Hst' Hps'.", "qsimpl time: 1 use: refined_raft_net_invariant."], "tactic": "apply Hp.", "exn": "In environment orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params H : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net net : list packet st' : packet ps' : list packet gd : network d : name -> electionsData * raft_data h : list packet d' : raft_data ms : msg Hdl : term Hp : name Hrr : logIndex Hnst : term Hst' : list entry Hps' : logIndex H0 : handleAppendEntries (pDst st') (snd (nwState gd (pDst st'))) Hdl Hp Hrr Hnst Hst' Hps' = (d', ms) H2 : pBody st' = AppendEntries Hdl Hp Hrr Hnst Hst' Hps' H3 : leaderLogs_sorted gd H4 : refined_raft_intermediate_reachable gd H5 : nwPackets gd = net ++ st' :: ps' H6 : forall h : name, d h = update name_eq_dec (nwState gd) (pDst st') (update_elections_data_appendEntries (pDst st') (nwState gd (pDst st')) Hdl Hp Hrr Hnst Hst' Hps', d') h H7 : forall p' : packet, In p' h -> In p' (net ++ ps') \\\\/ p' = {| pSrc := pDst st'; pDst := pSrc st'; pBody := ms |} handleAppendEntries_logs_sorted : forall (net : network) (p : packet) (t : term) (n : name) (pli : logIndex) (plt : term) (es : list entry) (ci : logIndex) (st' : raft_data) (m : msg), raft_intermediate_reachable net -> logs_sorted net -> handleAppendEntries (pDst p) (nwState net (pDst p)) t n pli plt es ci = (st', m) -> pBody p = AppendEntries t n pli plt es ci -> In p (nwPackets net) -> sorted (log st') handleClientRequest_logs_sorted : forall (h : name) (client : clientId) (id : nat) (c : input) (out : list raft_output) (st : raft_data) (l : list (name * msg)) (net : network), handleClientRequest h (nwState net h) client id c = (out, st, l) -> raft_intermediate_reachable net -> logs_sorted_host net -> sorted (log st) logs_sorted_invariant : forall net : network, raft_intermediate_reachable net -> logs_sorted net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (deghost net) Unable to unify \"name\" with \"leaderLogs_sorted {| nwPackets := h; nwState := d |}\".", "type": "cannot_unify", "handled": true}]}, "chat": [], "original": "intros net st' ps' gd d h os d' ms Hdl Hp Hrr Hnst Hst' Hps'. eapply refined_raft_net_invariant in Hp. - apply Hp. - apply leaderLogs_sorted_invariant. auto.", "back_times": 0, "succ": false, "time": 97.50364446640015}]