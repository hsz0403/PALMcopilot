[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": ["intros l1 l2 e e' Hsorted Hin_e'lin Hin_el2 HeIndex.", "assert (Hsorted' : sorted (l1 ++ (e :: l2))).", "-"], "tactic": "rewrite <- app_comm_cons.", "exn": "Found no subterm matching \"(?M2162 :: ?M2160) ++ ?M2161\" in the current goal.", "type": "no_subterm", "handled": true}, {"ctx": ["intros l1 l2 e e' Hsorted Hin_e'lin Hin_el2 HeIndex.", "assert (Hsorted' : sorted (l1 ++ (e :: l2))).", "-", "qsimpl time: 1 use: app_comm_cons."], "tactic": "apply Hsorted.", "exn": "In environment H : forall (A : Type) (x y : list A) (a : A), a :: x ++ y = a :: x ++ y orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params l1, l2 : list entry e, e' : entry Hsorted : sorted (l1 ++ l2) Hin_e'lin : In e' (l1 ++ l2) Hin_el2 : In e l2 HeIndex : eIndex e' = eIndex e allEntries_term_sanity_invariant : forall net : network, refined_raft_intermediate_reachable net -> allEntries_term_sanity net refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (deghost net) no_entries_past_current_term_invariant : forall net : network, raft_intermediate_reachable net -> no_entries_past_current_term net leaderLogs_sorted_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaderLogs_sorted net one_leaderLog_per_term_invariant : forall net : network, refined_raft_intermediate_reachable net -> one_leaderLog_per_term net one_leaderLog_per_term_log_invariant : forall net : network, refined_raft_intermediate_reachable net -> one_leaderLog_per_term_log net one_leaderLog_per_term_host_invariant : forall net : network, refined_raft_intermediate_reachable net -> one_leaderLog_per_term_host net leaderLogs_contiguous_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaderLogs_contiguous net allEntries_leaderLogs_term_invariant : forall net : network, refined_raft_intermediate_reachable net -> allEntries_leaderLogs_term net entries_contiguous_nw_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_contiguous_nw net entries_gt_0_nw_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_gt_0_nw net entries_sorted_nw_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_sorted_nw net entries_gt_0_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_gt_0 net entries_contiguous_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_contiguous net entries_sorted_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_sorted net entries_match_invariant : forall (net : network) (h h' : name), refined_raft_intermediate_reachable net -> entries_match (log (snd (nwState net h))) (log (snd (nwState net h'))) entries_match_nw_1_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_match_nw_1 net entries_match_nw_host_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_match_nw_host net allEntries_gt_0_invariant : forall (net : network) (h : name) (e : entry), refined_raft_intermediate_reachable net -> In e (map snd (allEntries (fst (nwState net h)))) -> eIndex e > 0 append_entries_leaderLogs_invariant : forall net : network, refined_raft_intermediate_reachable net -> append_entries_leaderLogs net logs_leaderLogs_invariant : forall net : network, refined_raft_intermediate_reachable net -> logs_leaderLogs net logs_leaderLogs_nw_invariant : forall net : network, refined_raft_intermediate_reachable net -> logs_leaderLogs_nw net Unable to unify \"sorted (l1 ++ l2)\" with \"sorted (l1 ++ e :: l2)\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros l1 l2 e e' Hsorted Hin_e'lin Hin_el2 HeIndex.", "assert (Hsorted' : sorted (l1 ++ (e :: l2))).", "-", "qsimpl time: 1 use: app_comm_cons.", "qsimpl time: 1 use: app_comm_cons."], "tactic": "apply (sorted_app_in_in l1 (e :: l2) e e' Hsorted').", "exn": "The reference Hsorted' was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros l1 l2 e e' Hsorted Hin_e'lin Hin_el2 HeIndex.", "assert (Hsorted' : sorted (l1 ++ (e :: l2))).", "-", "qsimpl time: 1 use: app_comm_cons.", "qsimpl time: 1 use: app_comm_cons."], "tactic": "-", "exn": "Wrong bullet -: Current bullet - is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["intros l1 l2 e e' Hsorted Hin_e'lin Hin_el2 HeIndex.", "assert (Hsorted' : sorted (l1 ++ (e :: l2))).", "-", "qsimpl time: 1 use: app_comm_cons.", "qsimpl time: 1 use: app_comm_cons.", "shelve.", "-"], "tactic": "apply Hin_e'lin.", "exn": "In environment orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params llli : logs_leaderLogs_interface aerlli : append_entries_leaderLogs_interface rlmli : refined_log_matching_lemmas_interface aellti : allEntries_leaderLogs_term_interface llci : leaderLogs_contiguous_interface ollpti : one_leaderLog_per_term_interface llsi : leaderLogs_sorted_interface tsi : term_sanity_interface rri : raft_refinement_interface aetsi : allEntries_term_sanity_interface l1, l2 : list entry e, e' : entry Hsorted : sorted (l1 ++ l2) Hin_e'lin : In e' (l1 ++ l2) Hin_el2 : In e l2 HeIndex : eIndex e' = eIndex e Hsorted' : sorted (l1 ++ e :: l2) Unable to unify \"In e' (l1 ++ l2)\" with \"In e' l2\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros l1 l2 e e' Hsorted Hin_e'lin Hin_el2 HeIndex.", "assert (Hsorted' : sorted (l1 ++ (e :: l2))).", "-", "qsimpl time: 1 use: app_comm_cons.", "qsimpl time: 1 use: app_comm_cons.", "shelve.", "-", "qsimpl time: 1 use: app_comm_cons."], "tactic": "-", "exn": "Wrong bullet -: Current bullet - is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["intros l1 l2 e e' Hsorted Hin_e'lin Hin_el2 HeIndex.", "assert (Hsorted' : sorted (l1 ++ (e :: l2))).", "-", "qsimpl time: 1 use: app_comm_cons.", "qsimpl time: 1 use: app_comm_cons.", "shelve.", "-", "qsimpl time: 1 use: app_comm_cons.", "shelve."], "tactic": "-", "exn": "Wrong bullet -: No more subgoals.", "type": "no_more_subgoals", "handled": true}]}, "chat": [], "original": "intros l1 l2 e e' Hsorted Hin_e'lin Hin_el2 HeIndex. assert (Hsorted' : sorted (l1 ++ (e :: l2))). - rewrite <- app_comm_cons. apply Hsorted. apply (sorted_app_in_in l1 (e :: l2) e e' Hsorted'). - apply Hin_e'lin. - apply in_or_app. right. simpl. right. apply Hin_el2. - rewrite HeIndex. auto.", "back_times": 0, "succ": false, "time": 158.8100869655609}]