[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": ["intros h st h' t es res st' m H.", "apply handleAppendEntriesReply_type_term in H."], "tactic": "apply handleAppendEntriesReply_currentTerm in H.", "exn": "Unable to apply lemma of type \"forall (h0 : name) (st0 : RaftState.raft_data term name entry logIndex serverType data clientId output) (h'0 : name) (t0 : nat) (es0 : list entry) (r : bool) (st'0 : raft_data) (ms : list (name * msg)), handleAppendEntriesReply h0 st0 h'0 t0 es0 r = (st'0, ms) -> currentTerm st0 <= currentTerm st'0\" on hypothesis of type \"type st' = type st /\\\\ currentTerm st' = currentTerm st \\\\/ type st' = Follower /\\\\ currentTerm st' >= currentTerm st\".", "type": "cannot_apply_in", "handled": true}]}, "chat": [], "original": "intros h st h' t es res st' m H. apply handleAppendEntriesReply_type_term in H. apply handleAppendEntriesReply_currentTerm in H. destruct H as [[_ Ht] | [Ht _]]. - right. split; [apply Nat.le_antisymm|]; auto. - apply Nat.le_gt_cases in Ht as [Hlt | Hgt]. ++ left. auto. ++ right. split; [reflexivity|]. apply handleAppendEntriesReply_type in H. destruct H as [[_ Ht'] | [_ _]]; [assumption|]. apply handleAppendEntriesReply_term_votedFor_cases in H. destruct H as [[_ Hvf] | [Hlt _]]; auto.", "back_times": 0, "succ": false, "time": 126.21542882919312}]