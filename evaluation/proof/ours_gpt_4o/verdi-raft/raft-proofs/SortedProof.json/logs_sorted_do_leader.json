[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": ["intros net h st' ps' out d l.", "intros handleTimeout_pre P_pre reachable st'_update ps'_in."], "tactic": "apply logs_sorted_invariant.", "exn": "In environment orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params tsi : term_sanity_interface net : network h : name -> data st' : list packet ps' : raft_data out : name d : list raft_output l : raft_data handleTimeout_pre : list (name * msg) P_pre : doLeader ps' out = (d, l, handleTimeout_pre) reachable : logs_sorted net st'_update : raft_intermediate_reachable net ps'_in : nwState net out = ps' Unable to unify \"network\" with \"forall h' : name, h h' = update name_eq_dec (nwState net) out l h'\".", "type": "cannot_unify", "handled": true}]}, "chat": [], "original": "unfold raft_net_invariant_timeout. intros net h st' ps' out d l. intros handleTimeout_pre P_pre reachable st'_update ps'_in. apply logs_sorted_invariant. - auto. - intros h'. rewrite st'_update. apply update_eq_dec. reflexivity. - intros ps'_packet. pose proof ps'_in as ps'_in_copy. specialize (ps'_in ps'_packet). destruct ps'_in as [ps'_in_net | ps'_in_send]. + apply logs_sorted_invariant; auto. + unfold logs_sorted. intros p t n prevT prevI entries c. intros p_in_packets p_append_entries. destruct (ps'_in_copy p_in_send) as [p_net | p_send]. * apply logs_sorted_nw. -- apply reachable. -- apply ps'_in_net. -- auto. * destruct (In_split _ _ _ p_send) as [l1 [l2 split_l]]. rewrite <- split_l. pose proof handleTimeout_pre as handle_pre_copy. specialize (handleTimeout_pre _ _ _ eq_refl _ _ (eq_refl _)). apply SortedInterface.handleClientRequest_logs_sorted with (client := name_eq_dec) in handleTimeout_pre. rewrite split_l in handleTimeout_pre. * simpl in handleTimeout_pre. apply handleTimeout_pre. -- apply reachable. -- apply handle_client_request. ++ unfold logs_sorted_invariant in handleTimeout_pre. intros h0. rewrite <- update_eq_dec. rewrite eq_sym. apply SortedInterface.handleClientRequest_logs_sorted with (client := name_eq_dec) in handleTimeout_pre. apply handleTimeout_pre. ++ rewrite split_l in handleTimeout_pre. intros _ _ _. apply SortedInterface.handleClientRequest_logs_sorted with (client := name_eq_dec) in handleTimeout_pre. apply handleTimeout_pre. * rewrite split_l. rewrite split_l. rewrite rake_equiv_list. instantiate. intuition. * unfold SortedInterface.net. fold raft_intermediate_reachable in *. apply SortedInterface.handleClientRequest_logs_sorted with (client := name_eq_dec) in handleTimeout_pre. rewrite split_l in handleTimeout_pre. apply handleTimeout_pre.", "back_times": 0, "succ": false, "time": 101.09497261047363}]