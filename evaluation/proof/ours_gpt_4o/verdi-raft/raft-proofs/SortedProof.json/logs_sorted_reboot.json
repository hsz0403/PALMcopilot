[{"history": {"proof": "split. - intros h'. subst. apply Decidable.dec_not_not. + qsimpl time: 1. hauto q: on depth: 3. + hauto drew: off depth: 3. - split. + sauto depth: 3. + split. * sauto depth: 3. * sauto depth: 3.", "repairs": ["", "", "", "", "ref_not_found", "", "cannot_unify", "hammer", "", "hammer", "", "", "", "hammer", "", "", "", "hammer", "", "hammer"], "exceptions": [{"ctx": [], "tactic": "intros h net st' ps' out d l client id c H H0 H1 H2 H3.", "exn": "No product even after head-reduction.", "type": "no_product", "handled": true}, {"ctx": ["split.", "-", "intros h'.", "subst."], "tactic": "apply SortedInterface.handleClientRequest_logs_sorted with (client := client) (id := id) (c := c) (net := net).", "exn": "The reference client was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["split.", "-", "intros h'.", "subst."], "tactic": "apply H.", "exn": "The reference H was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["split.", "-", "intros h'.", "subst.", "apply Decidable.dec_not_not.", "+"], "tactic": "apply H1.", "exn": "In environment orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params tsi : term_sanity_interface net, net' : network h : Net.name H0 : logs_sorted net H1 : raft_intermediate_reachable net H3 : forall h' : Net.name, nwState net' h' = update name_eq_dec (nwState net) h (reboot (nwState net h)) h' H4 : nwPackets net = nwPackets net' h' : Net.name Unable to unify \"raft_intermediate_reachable net\" with \"Decidable.decidable (sorted (log (nwState net' h')))\".", "type": "cannot_unify", "handled": true}, {"ctx": ["split.", "-", "intros h'.", "subst.", "apply Decidable.dec_not_not.", "+", "qsimpl time: 1."], "tactic": "+", "exn": "Wrong bullet +: Current bullet + is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["split.", "-", "intros h'.", "subst.", "apply Decidable.dec_not_not.", "+", "qsimpl time: 1.", "shelve.", "+"], "tactic": "-", "exn": "Wrong bullet -: Current bullet + is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["split.", "-", "intros h'.", "subst.", "apply Decidable.dec_not_not.", "+", "qsimpl time: 1.", "shelve.", "+", "shelve.", "-", "split.", "+", "intros p t n prevT prevI es c' Hin Heq."], "tactic": "+", "exn": "Wrong bullet +: Current bullet + is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["split.", "-", "intros h'.", "subst.", "apply Decidable.dec_not_not.", "+", "qsimpl time: 1.", "shelve.", "+", "shelve.", "-", "split.", "+", "intros p t n prevT prevI es c' Hin Heq.", "shelve.", "+", "split.", "*", "intros p t n lt pt es ci Hin Hin2."], "tactic": "*", "exn": "Wrong bullet *: Current bullet * is not finished.", "type": "unfinished_bullet", "handled": true}]}, "chat": [], "original": "intros. unfold raft_net_invariant_client_request. intros h net st' ps' out d l client id c H H0 H1 H2 H3. split. - intros h'. subst. apply SortedInterface.handleClientRequest_logs_sorted with (client := client) (id := id) (c := c) (net := net). + apply H. + apply H1. + specialize (logs_sorted_invariant _ H1). destruct logs_sorted_invariant. unfold logs_sorted_host in *. apply H4. - split. + intros p t n prevT prevI es c' Hin Heq. specialize (H0 _ Hin). destruct H0 as [H0 | H0]. * apply logs_sorted_invariant in H1. destruct H1 as [_ [H1 _]]. eapply H1; eauto. * right. unfold send_packets in H0. apply in_map_iff in H0. destruct H0 as [p' [Heq' Hin']]. subst. inversion Heq as [Heq1]. subst. inversion Heq' as [Heq2]. subst. apply SortedInterface.handleClientRequest_logs_sorted with (client := client) (id := id) (c := c) (net := net). -- apply H. -- apply H1. -- specialize (logs_sorted_invariant _ H1). destruct logs_sorted_invariant as [H5 _]. apply H5. + split. * intros p t n lt pt es ci Hin Hin2. specialize (H0 _ Hin). destruct H0 as [H0 | H0]. -- apply logs_sorted_invariant in H1. destruct H1 as [_ [_ H1]]. eapply H1; eauto. -- exfalso. unfold send_packets in H0. apply in_map_iff in H0. destruct H0 as [p' [Heq' Hin']]. inversion Heq as [Heq1]. subst. inversion Heq' as [Heq2]. subst. congruence. * intros p t n lt pt es ci Hin Hin2. specialize (H0 _ Hin). destruct H0 as [H0 | H0]. -- apply logs_sorted_invariant in H1. destruct H1 as [_ [_ [_ H1]]]. eapply H1; eauto. -- exfalso. unfold send_packets in H0. apply in_map_iff in H0. destruct H0 as [p' [Heq' Hin']]. inversion Heq as [Heq1]. subst. inversion Heq' as [Heq2]. subst. congruence.", "back_times": 5, "succ": true, "time": 121.08450412750244}]