[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": [], "tactic": "apply raft_net_invariant'.", "exn": "Unable to find an instance for the variable net.", "type": "no_instance_var", "handled": true}, {"ctx": ["qsimpl time: 1 use: raft_net_invariant'."], "tactic": "apply state_machine_safety.", "exn": "In environment orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params H : forall (P : network -> Prop) (net : network), raft_net_invariant_init P -> raft_net_invariant_client_request' P -> raft_net_invariant_timeout' P -> raft_net_invariant_append_entries' P -> raft_net_invariant_append_entries_reply' P -> raft_net_invariant_request_vote' P -> raft_net_invariant_request_vote_reply' P -> raft_net_invariant_do_leader' P -> raft_net_invariant_do_generic_server' P -> raft_net_invariant_state_same_packet_subset P -> raft_net_invariant_reboot' P -> raft_intermediate_reachable net -> P net log_matching_invariant : forall net : network, raft_intermediate_reachable net -> log_matching net state_machine_safety_invariant : forall net : network, raft_intermediate_reachable net -> state_machine_safety net max_index_sanity_invariant : forall net : network, raft_intermediate_reachable net -> maxIndex_sanity net handleAppendEntries_logs_sorted : forall (net : network) (p : packet) (t : term) (n : name) (pli : logIndex) (plt : term) (es : list entry) (ci : logIndex) (st' : raft_data) (m : msg), raft_intermediate_reachable net -> logs_sorted net -> handleAppendEntries (pDst p) (nwState net (pDst p)) t n pli plt es ci = (st', m) -> pBody p = AppendEntries t n pli plt es ci -> In p (nwPackets net) -> sorted (log st') handleClientRequest_logs_sorted : forall (h : name) (client : clientId) (id : nat) (c : input) (out : list raft_output) (st : raft_data) (l : list (name * msg)) (net : network), handleClientRequest h (nwState net h) client id c = (out, st, l) -> raft_intermediate_reachable net -> logs_sorted_host net -> sorted (log st) logs_sorted_invariant : forall net : network, raft_intermediate_reachable net -> logs_sorted net Unable to unify \"Prop\" with \"raft_net_invariant_request_vote_reply' state_machine_log\".", "type": "cannot_unify", "handled": true}, {"ctx": ["qsimpl time: 1 use: raft_net_invariant'.", "qsimpl time: 1 use: raft_net_invariant',state_machine_safety."], "tactic": "apply state_machine_correct.", "exn": "In environment orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params X : network -> Prop H0 : forall (P : network -> Prop) (net : network), raft_net_invariant_init P -> raft_net_invariant_client_request' P -> raft_net_invariant_timeout' P -> raft_net_invariant_append_entries' P -> raft_net_invariant_append_entries_reply' P -> raft_net_invariant_request_vote' P -> raft_net_invariant_request_vote_reply' P -> raft_net_invariant_do_leader' P -> raft_net_invariant_do_generic_server' P -> raft_net_invariant_state_same_packet_subset P -> raft_net_invariant_reboot' P -> raft_intermediate_reachable net -> P net log_matching_invariant : forall net : network, raft_intermediate_reachable net -> log_matching net state_machine_safety_invariant : forall net : network, raft_intermediate_reachable net -> state_machine_safety net max_index_sanity_invariant : forall net : network, raft_intermediate_reachable net -> maxIndex_sanity net handleAppendEntries_logs_sorted : forall (net : network) (p : packet) (t : term) (n : name) (pli : logIndex) (plt : term) (es : list entry) (ci : logIndex) (st' : raft_data) (m : msg), raft_intermediate_reachable net -> logs_sorted net -> handleAppendEntries (pDst p) (nwState net (pDst p)) t n pli plt es ci = (st', m) -> pBody p = AppendEntries t n pli plt es ci -> In p (nwPackets net) -> sorted (log st') handleClientRequest_logs_sorted : forall (h : name) (client : clientId) (id : nat) (c : input) (out : list raft_output) (st : raft_data) (l : list (name * msg)) (net : network), handleClientRequest h (nwState net h) client id c = (out, st, l) -> raft_intermediate_reachable net -> logs_sorted_host net -> sorted (log st) logs_sorted_invariant : forall net : network, raft_intermediate_reachable net -> logs_sorted net Unable to unify \"Prop\" with \"raft_net_invariant_request_vote_reply' state_machine_log\".", "type": "cannot_unify", "handled": true}, {"ctx": ["qsimpl time: 1 use: raft_net_invariant'.", "qsimpl time: 1 use: raft_net_invariant',state_machine_safety.", "qsimpl time: 1 use: raft_net_invariant',state_machine_correct,state_machine_safety."], "tactic": "apply logs_sorted.", "exn": "In environment orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params X1, X0 : network -> Prop H : forall (P : network -> Prop) (net : network), raft_net_invariant_init P -> raft_net_invariant_client_request' P -> raft_net_invariant_timeout' P -> raft_net_invariant_append_entries' P -> raft_net_invariant_append_entries_reply' P -> raft_net_invariant_request_vote' P -> raft_net_invariant_request_vote_reply' P -> raft_net_invariant_do_leader' P -> raft_net_invariant_do_generic_server' P -> raft_net_invariant_state_same_packet_subset P -> raft_net_invariant_reboot' P -> raft_intermediate_reachable net -> P net X : network -> Prop log_matching_invariant : forall net : network, raft_intermediate_reachable net -> log_matching net state_machine_safety_invariant : forall net : network, raft_intermediate_reachable net -> state_machine_safety net max_index_sanity_invariant : forall net : network, raft_intermediate_reachable net -> maxIndex_sanity net handleAppendEntries_logs_sorted : forall (net : network) (p : packet) (t : term) (n : name) (pli : logIndex) (plt : term) (es : list entry) (ci : logIndex) (st' : raft_data) (m : msg), raft_intermediate_reachable net -> logs_sorted net -> handleAppendEntries (pDst p) (nwState net (pDst p)) t n pli plt es ci = (st', m) -> pBody p = AppendEntries t n pli plt es ci -> In p (nwPackets net) -> sorted (log st') handleClientRequest_logs_sorted : forall (h : name) (client : clientId) (id : nat) (c : input) (out : list raft_output) (st : raft_data) (l : list (name * msg)) (net : network), handleClientRequest h (nwState net h) client id c = (out, st, l) -> raft_intermediate_reachable net -> logs_sorted_host net -> sorted (log st) logs_sorted_invariant : forall net : network, raft_intermediate_reachable net -> logs_sorted net Unable to unify \"Prop\" with \"raft_net_invariant_request_vote_reply' state_machine_log\".", "type": "cannot_unify", "handled": true}, {"ctx": ["qsimpl time: 1 use: raft_net_invariant'.", "qsimpl time: 1 use: raft_net_invariant',state_machine_safety.", "qsimpl time: 1 use: raft_net_invariant',state_machine_correct,state_machine_safety.", "qsimpl time: 1 use: raft_net_invariant',logs_sorted,state_machine_correct,state_machine_safety."], "tactic": "apply smsi.", "exn": "The reference smsi was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["qsimpl time: 1 use: raft_net_invariant'.", "qsimpl time: 1 use: raft_net_invariant',state_machine_safety.", "qsimpl time: 1 use: raft_net_invariant',state_machine_correct,state_machine_safety.", "qsimpl time: 1 use: raft_net_invariant',logs_sorted,state_machine_correct,state_machine_safety.", "apply fast_Zred_factor6.", "-"], "tactic": "apply lmi.", "exn": "The reference lmi was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["qsimpl time: 1 use: raft_net_invariant'.", "qsimpl time: 1 use: raft_net_invariant',state_machine_safety.", "qsimpl time: 1 use: raft_net_invariant',state_machine_correct,state_machine_safety.", "qsimpl time: 1 use: raft_net_invariant',logs_sorted,state_machine_correct,state_machine_safety.", "apply fast_Zred_factor6.", "-", "apply BinIntDef.Z.of_nat."], "tactic": "-", "exn": "Wrong bullet -: Current bullet - is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["qsimpl time: 1 use: raft_net_invariant'.", "qsimpl time: 1 use: raft_net_invariant',state_machine_safety.", "qsimpl time: 1 use: raft_net_invariant',state_machine_correct,state_machine_safety.", "qsimpl time: 1 use: raft_net_invariant',logs_sorted,state_machine_correct,state_machine_safety.", "apply fast_Zred_factor6.", "-", "apply BinIntDef.Z.of_nat.", "shelve.", "-"], "tactic": "split.", "exn": "In environment orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params X4, X3, X2 : network -> Prop H0 : forall (P : network -> Prop) (net : network), raft_net_invariant_init P -> raft_net_invariant_client_request' P -> raft_net_invariant_timeout' P -> raft_net_invariant_append_entries' P -> raft_net_invariant_append_entries_reply' P -> raft_net_invariant_request_vote' P -> raft_net_invariant_request_vote_reply' P -> raft_net_invariant_do_leader' P -> raft_net_invariant_do_generic_server' P -> raft_net_invariant_state_same_packet_subset P -> raft_net_invariant_reboot' P -> raft_intermediate_reachable net -> P net X1, X0, X : network -> Prop log_matching_invariant : forall net : network, raft_intermediate_reachable net -> log_matching net state_machine_safety_invariant : forall net : network, raft_intermediate_reachable net -> state_machine_safety net max_index_sanity_invariant : forall net : network, raft_intermediate_reachable net -> maxIndex_sanity net handleAppendEntries_logs_sorted : forall (net : network) (p : packet) (t : term) (n : name) (pli : logIndex) (plt : term) (es : list entry) (ci : logIndex) (st' : raft_data) (m : msg), raft_intermediate_reachable net -> logs_sorted net -> handleAppendEntries (pDst p) (nwState net (pDst p)) t n pli plt es ci = (st', m) -> pBody p = AppendEntries t n pli plt es ci -> In p (nwPackets net) -> sorted (log st') handleClientRequest_logs_sorted : forall (h : name) (client : clientId) (id : nat) (c : input) (out : list raft_output) (st : raft_data) (l : list (name * msg)) (net : network), handleClientRequest h (nwState net h) client id c = (out, st, l) -> raft_intermediate_reachable net -> logs_sorted_host net -> sorted (log st) logs_sorted_invariant : forall net : network, raft_intermediate_reachable net -> logs_sorted net xs : list packet p : packet ys : list packet net : network st' : Net.name -> data ps' : list packet d : raft_data t : nat v : bool H : handleRequestVoteReply (pDst p) (nwState net (pDst p)) (pSrc p) t v = d H1 : pBody p = RequestVoteReply t v H2 : state_machine_log net H3 : raft_intermediate_reachable net H4 : raft_intermediate_reachable {| nwPackets := ps'; nwState := st' |} H5 : nwPackets net = xs ++ p :: ys H6 : forall h : Net.name, st' h = update name_eq_dec (nwState net) (pDst p) d h H7 : forall p' : packet, In p' ps' -> In p' (xs ++ ys) h : Net.name Unable to unify \"snd (execute_log (deduplicate_log (rev (removeAfterIndex (log (nwState {| nwPackets := ps'; nwState := st' |} h)) (lastApplied (nwState {| nwPackets := ps'; nwState := st' |} h))))))\" with \"stateMachine (nwState {| nwPackets := ps'; nwState := st' |} h)\".", "type": "cannot_unify", "handled": true}, {"ctx": ["qsimpl time: 1 use: raft_net_invariant'.", "qsimpl time: 1 use: raft_net_invariant',state_machine_safety.", "qsimpl time: 1 use: raft_net_invariant',state_machine_correct,state_machine_safety.", "qsimpl time: 1 use: raft_net_invariant',logs_sorted,state_machine_correct,state_machine_safety.", "apply fast_Zred_factor6.", "-", "apply BinIntDef.Z.of_nat.", "shelve.", "-", "qsimpl time: 1 use: raft_net_invariant',logs_sorted,state_machine_correct,state_machine_safety."], "tactic": "apply logs_sorted.", "exn": "In environment orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params X7, X6, X5 : network -> Prop H : forall (P : network -> Prop) (net : network), raft_net_invariant_init P -> raft_net_invariant_client_request' P -> raft_net_invariant_timeout' P -> raft_net_invariant_append_entries' P -> raft_net_invariant_append_entries_reply' P -> raft_net_invariant_request_vote' P -> raft_net_invariant_request_vote_reply' P -> raft_net_invariant_do_leader' P -> raft_net_invariant_do_generic_server' P -> raft_net_invariant_state_same_packet_subset P -> raft_net_invariant_reboot' P -> raft_intermediate_reachable net -> P net X4, X3, X2, X1, X0, X : network -> Prop log_matching_invariant : forall net : network, raft_intermediate_reachable net -> log_matching net state_machine_safety_invariant : forall net : network, raft_intermediate_reachable net -> state_machine_safety net max_index_sanity_invariant : forall net : network, raft_intermediate_reachable net -> maxIndex_sanity net handleAppendEntries_logs_sorted : forall (net : network) (p : packet) (t : term) (n : name) (pli : logIndex) (plt : term) (es : list entry) (ci : logIndex) (st' : raft_data) (m : msg), raft_intermediate_reachable net -> logs_sorted net -> handleAppendEntries (pDst p) (nwState net (pDst p)) t n pli plt es ci = (st', m) -> pBody p = AppendEntries t n pli plt es ci -> In p (nwPackets net) -> sorted (log st') handleClientRequest_logs_sorted : forall (h : name) (client : clientId) (id : nat) (c : input) (out : list raft_output) (st : raft_data) (l : list (name * msg)) (net : network), handleClientRequest h (nwState net h) client id c = (out, st, l) -> raft_intermediate_reachable net -> logs_sorted_host net -> sorted (log st) logs_sorted_invariant : forall net : network, raft_intermediate_reachable net -> logs_sorted net Unable to unify \"Prop\" with \"raft_net_invariant_request_vote_reply' state_machine_log\".", "type": "cannot_unify", "handled": true}, {"ctx": ["qsimpl time: 1 use: raft_net_invariant'.", "qsimpl time: 1 use: raft_net_invariant',state_machine_safety.", "qsimpl time: 1 use: raft_net_invariant',state_machine_correct,state_machine_safety.", "qsimpl time: 1 use: raft_net_invariant',logs_sorted,state_machine_correct,state_machine_safety.", "apply fast_Zred_factor6.", "-", "apply BinIntDef.Z.of_nat.", "shelve.", "-", "qsimpl time: 1 use: raft_net_invariant',logs_sorted,state_machine_correct,state_machine_safety.", "qsimpl time: 1 use: raft_net_invariant',logs_sorted,state_machine_correct,state_machine_safety."], "tactic": "apply maxIndex_sanity.", "exn": "In environment orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params X10, X9, X8 : network -> Prop H0 : forall (P : network -> Prop) (net : network), raft_net_invariant_init P -> raft_net_invariant_client_request' P -> raft_net_invariant_timeout' P -> raft_net_invariant_append_entries' P -> raft_net_invariant_append_entries_reply' P -> raft_net_invariant_request_vote' P -> raft_net_invariant_request_vote_reply' P -> raft_net_invariant_do_leader' P -> raft_net_invariant_do_generic_server' P -> raft_net_invariant_state_same_packet_subset P -> raft_net_invariant_reboot' P -> raft_intermediate_reachable net -> P net X7, X6, X5, X4, X3, X2, X1, X0, X : network -> Prop log_matching_invariant : forall net : network, raft_intermediate_reachable net -> log_matching net state_machine_safety_invariant : forall net : network, raft_intermediate_reachable net -> state_machine_safety net max_index_sanity_invariant : forall net : network, raft_intermediate_reachable net -> maxIndex_sanity net handleAppendEntries_logs_sorted : forall (net : network) (p : packet) (t : term) (n : name) (pli : logIndex) (plt : term) (es : list entry) (ci : logIndex) (st' : raft_data) (m : msg), raft_intermediate_reachable net -> logs_sorted net -> handleAppendEntries (pDst p) (nwState net (pDst p)) t n pli plt es ci = (st', m) -> pBody p = AppendEntries t n pli plt es ci -> In p (nwPackets net) -> sorted (log st') handleClientRequest_logs_sorted : forall (h : name) (client : clientId) (id : nat) (c : input) (out : list raft_output) (st : raft_data) (l : list (name * msg)) (net : network), handleClientRequest h (nwState net h) client id c = (out, st, l) -> raft_intermediate_reachable net -> logs_sorted_host net -> sorted (log st) logs_sorted_invariant : forall net : network, raft_intermediate_reachable net -> logs_sorted net Unable to unify \"Prop\" with \"raft_net_invariant_request_vote_reply' state_machine_log\".", "type": "cannot_unify", "handled": true}, {"ctx": ["qsimpl time: 1 use: raft_net_invariant'.", "qsimpl time: 1 use: raft_net_invariant',state_machine_safety.", "qsimpl time: 1 use: raft_net_invariant',state_machine_correct,state_machine_safety.", "qsimpl time: 1 use: raft_net_invariant',logs_sorted,state_machine_correct,state_machine_safety.", "apply fast_Zred_factor6.", "-", "apply BinIntDef.Z.of_nat.", "shelve.", "-", "qsimpl time: 1 use: raft_net_invariant',logs_sorted,state_machine_correct,state_machine_safety.", "qsimpl time: 1 use: raft_net_invariant',logs_sorted,state_machine_correct,state_machine_safety.", "qsimpl time: 1 use: logs_sorted,state_machine_correct,state_machine_safety,raft_net_invariant',maxIndex_sanity."], "tactic": "-", "exn": "Wrong bullet -: Current bullet - is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["qsimpl time: 1 use: raft_net_invariant'.", "qsimpl time: 1 use: raft_net_invariant',state_machine_safety.", "qsimpl time: 1 use: raft_net_invariant',state_machine_correct,state_machine_safety.", "qsimpl time: 1 use: raft_net_invariant',logs_sorted,state_machine_correct,state_machine_safety.", "apply fast_Zred_factor6.", "-", "apply BinIntDef.Z.of_nat.", "shelve.", "-", "qsimpl time: 1 use: raft_net_invariant',logs_sorted,state_machine_correct,state_machine_safety.", "qsimpl time: 1 use: raft_net_invariant',logs_sorted,state_machine_correct,state_machine_safety.", "qsimpl time: 1 use: logs_sorted,state_machine_correct,state_machine_safety,raft_net_invariant',maxIndex_sanity.", "shelve."], "tactic": "-", "exn": "Wrong bullet -: No more subgoals.", "type": "no_more_subgoals", "handled": true}]}, "chat": [], "original": "apply raft_net_invariant'. - intros. apply state_machine_safety. auto. - intros. apply state_machine_correct. auto. - intros. apply logs_sorted. auto. - apply smsi. - apply lmi. - intros. split. -- apply logs_sorted. auto. -- apply maxIndex_sanity. auto. - intros. split. -- apply maxIndex_sanity. auto. -- apply state_machine_safety. auto. - intros. apply raft_net_invariant_state_same_packet_subset with (net := net). -- intros. apply FunctionalExtensionality.functional_extensionality. intros. repeat match goal with | [ H : _ |- _ ] => solve [rewrite H; auto] end. -- auto. -- auto. -- apply Build_log_matching_interface. intros. apply maxIndex_sanity. - intros. apply handleRequestVoteReply. auto.", "back_times": 0, "succ": false, "time": 83.8883924484253}]