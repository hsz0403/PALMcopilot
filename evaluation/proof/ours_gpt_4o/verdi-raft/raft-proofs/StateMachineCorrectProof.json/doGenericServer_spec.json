[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": ["intros.", "unfold doGenericServer in *.", "destruct (applyEntries h st (rev (filter (fun x : entry => Nat.ltb (lastApplied st) (eIndex x) && Nat.leb (eIndex x) (commitIndex st)) (findGtIndex (log st) (lastApplied st)))))."], "tactic": "destruct (RaftState.set_raft_data_lastApplied _ _ _ _ _ st' l) eqn:Hst'.", "exn": "In environment orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params si : sorted_interface misi : max_index_sanity_interface smsi : state_machine_safety_interface lmi : log_matching_interface orig_base_params0 : BaseParams one_node_params0 : OneNodeParams orig_base_params0 raft_params0 : RaftParams orig_base_params0 h : name st : raft_data os : list raft_output st' : raft_data ps : list (name * msg) l : list raft_output r : raft_data H : (l, RaftState.set_raft_data_lastApplied term name entry logIndex serverType data clientId output r (if lastApplied r <? commitIndex r then commitIndex r else lastApplied r), []) = (os, st', ps) The term \"st'\" has type \"raft_data\" while it is expected to have type \"Type\".", "type": "wrong_type", "handled": true}]}, "chat": [], "original": "intros. unfold doGenericServer in *. destruct (applyEntries h st (rev (filter (fun x : entry => Nat.ltb (lastApplied st) (eIndex x) && Nat.leb (eIndex x) (commitIndex st)) (findGtIndex (log st) (lastApplied st))))). destruct (RaftState.set_raft_data_lastApplied _ _ _ _ _ st' l) eqn:Hst'. right. split. - apply applyEntries_lastApplied_commitIndex_log with (os := l0) in Heqp. destruct Heqp as [_ [_ ?]]. congruence. - split. + apply applyEntries_lastApplied_commitIndex_log with (os := l0) in Heqp. destruct Heqp as [Heq _]. apply doGenericServer_commitIndex with (ms := ps) in H. rewrite H in Heq. apply Nat.lt_succ_r. congruence. + exists l0, r. rewrite Heqp. split; [reflexivity|]. split. * apply applyEntries_execute_log'_cache. auto. * intros. apply applyEntries_app with (os' := l0) (d := r) (l' := []) in Heqp. destruct Heqp as [? [? [H1 [? [? _]]]]]. eapply cacheApplyEntry_cache_no_apply; eauto. * auto. * congruence. * intros. apply applyEntries_execute_log'_cache in Heqp. destruct Heqp as [_ [_ [? ?]]]. congruence.", "back_times": 0, "succ": false, "time": 145.6007490158081}]