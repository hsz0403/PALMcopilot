[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": [], "tactic": "apply raft_net_invariant'.", "exn": "Unable to find an instance for the variable net.", "type": "no_instance_var", "handled": true}, {"ctx": ["qsimpl time: 1 use: raft_net_invariant'."], "tactic": "apply state_machine_correct_invariant.", "exn": "In environment orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params H : forall (P : network -> Prop) (net : network), raft_net_invariant_init P -> raft_net_invariant_client_request' P -> raft_net_invariant_timeout' P -> raft_net_invariant_append_entries' P -> raft_net_invariant_append_entries_reply' P -> raft_net_invariant_request_vote' P -> raft_net_invariant_request_vote_reply' P -> raft_net_invariant_do_leader' P -> raft_net_invariant_do_generic_server' P -> raft_net_invariant_state_same_packet_subset P -> raft_net_invariant_reboot' P -> raft_intermediate_reachable net -> P net log_matching_invariant : forall net : network, raft_intermediate_reachable net -> log_matching net state_machine_safety_invariant : forall net : network, raft_intermediate_reachable net -> state_machine_safety net max_index_sanity_invariant : forall net : network, raft_intermediate_reachable net -> maxIndex_sanity net handleAppendEntries_logs_sorted : forall (net : network) (p : packet) (t : term) (n : name) (pli : logIndex) (plt : term) (es : list entry) (ci : logIndex) (st' : raft_data) (m : msg), raft_intermediate_reachable net -> logs_sorted net -> handleAppendEntries (pDst p) (nwState net (pDst p)) t n pli plt es ci = (st', m) -> pBody p = AppendEntries t n pli plt es ci -> In p (nwPackets net) -> sorted (log st') handleClientRequest_logs_sorted : forall (h : name) (client : clientId) (id : nat) (c : input) (out : list raft_output) (st : raft_data) (l : list (name * msg)) (net : network), handleClientRequest h (nwState net h) client id c = (out, st, l) -> raft_intermediate_reachable net -> logs_sorted_host net -> sorted (log st) logs_sorted_invariant : forall net : network, raft_intermediate_reachable net -> logs_sorted net Unable to unify \"state_machine_log ?M8905 /\\\\ client_cache_correct ?M8905 /\\\\ client_cache_complete ?M8905\" with \"forall (xs : list packet) (p : packet) (ys : list packet) (net : network) (st' : Net.name -> data) (ps' : list packet) (d : raft_data) (m : msg) (t : term) (n : name) (pli : logIndex) (plt : term) (es : list entry) (ci : logIndex), handleAppendEntries (pDst p) (nwState net (pDst p)) t n pli plt es ci = (d, m) -> pBody p = AppendEntries t n pli plt es ci -> state_machine_log net -> raft_intermediate_reachable net -> raft_intermediate_reachable {| nwPackets := ps'; nwState := st' |} -> nwPackets net = xs ++ p :: ys -> (forall h : Net.name, st' h = update name_eq_dec (nwState net) (pDst p) d h) -> (forall p' : packet, In p' ps' -> In p' (xs ++ ys) \\\\/ p' = {| pSrc := pDst p; pDst := pSrc p; pBody := m |}) -> state_machine_log {| nwPackets := ps'; nwState := st' |}\".", "type": "cannot_unify", "handled": true}, {"ctx": ["qsimpl time: 1 use: raft_net_invariant'.", "qsimpl time: 1 use: raft_net_invariant',state_machine_correct_invariant.", "-"], "tactic": "eapply raft_invariant_handle_message'.", "exn": "Found no subterm matching \"{| nwPackets := ?M15682; nwState := ?M15681 |}\" in the current goal.", "type": "no_subterm", "handled": true}, {"ctx": ["qsimpl time: 1 use: raft_net_invariant'.", "qsimpl time: 1 use: raft_net_invariant',state_machine_correct_invariant.", "-", "qsimpl time: 1 use: raft_net_invariant',state_machine_correct_invariant,raft_invariant_handle_message'."], "tactic": "apply log_matching_invariant.", "exn": "In environment orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params H3 : forall (P : network -> Prop) (xs : list packet) (p : packet) (ys : list packet) (net : network) (st' : name -> raft_data) (ps' : list packet) (d : raft_data) (l : list (name * msg)), raft_net_invariant_append_entries' P -> raft_net_invariant_append_entries_reply' P -> raft_net_invariant_request_vote' P -> raft_net_invariant_request_vote_reply' P -> handleMessage (pSrc p) (pDst p) (pBody p) (nwState net (pDst p)) = (d, l) -> P net -> raft_intermediate_reachable net -> raft_intermediate_reachable {| nwPackets := ps'; nwState := st' |} -> nwPackets net = xs ++ p :: ys -> (forall h : name, st' h = update name_eq_dec (nwState net) (pDst p) d h) -> (forall p' : packet, In p' ps' -> In p' (xs ++ ys) \\\\/ In p' (map (fun m : name * msg => {| pSrc := pDst p; pDst := fst m; pBody := snd m |}) l)) -> P {| nwPackets := ps'; nwState := st' |} H : forall (P : network -> Prop) (net : network), raft_net_invariant_init P -> raft_net_invariant_client_request' P -> raft_net_invariant_timeout' P -> raft_net_invariant_append_entries' P -> raft_net_invariant_append_entries_reply' P -> raft_net_invariant_request_vote' P -> raft_net_invariant_request_vote_reply' P -> raft_net_invariant_do_leader' P -> raft_net_invariant_do_generic_server' P -> raft_net_invariant_state_same_packet_subset P -> raft_net_invariant_reboot' P -> raft_intermediate_reachable net -> P net log_matching_invariant : forall net : network, raft_intermediate_reachable net -> log_matching net state_machine_safety_invariant : forall net : network, raft_intermediate_reachable net -> state_machine_safety net max_index_sanity_invariant : forall net : network, raft_intermediate_reachable net -> maxIndex_sanity net handleAppendEntries_logs_sorted : forall (net : network) (p : packet) (t : term) (n : name) (pli : logIndex) (plt : term) (es : list entry) (ci : logIndex) (st' : raft_data) (m : msg), raft_intermediate_reachable net -> logs_sorted net -> handleAppendEntries (pDst p) (nwState net (pDst p)) t n pli plt es ci = (st', m) -> pBody p = AppendEntries t n pli plt es ci -> In p (nwPackets net) -> sorted (log st') handleClientRequest_logs_sorted : forall (h : name) (client : clientId) (id : nat) (c : input) (out : list raft_output) (st : raft_data) (l : list (name * msg)) (net : network), handleClientRequest h (nwState net h) client id c = (out, st, l) -> raft_intermediate_reachable net -> logs_sorted_host net -> sorted (log st) logs_sorted_invariant : forall net : network, raft_intermediate_reachable net -> logs_sorted net H1 : forall net : network, raft_intermediate_reachable net -> state_machine_correct net H2 : forall net : network, raft_intermediate_reachable net -> state_machine_correct net Unable to unify \"log_matching_hosts ?M23228 /\\\\ log_matching_nw ?M23228\" with \"forall (xs : list packet) (p : packet) (ys : list packet) (net : network) (st' : Net.name -> data) (ps' : list packet) (d : raft_data) (m : msg) (t : term) (n : name) (pli : logIndex) (plt : term) (es : list entry) (ci : logIndex), handleAppendEntries (pDst p) (nwState net (pDst p)) t n pli plt es ci = (d, m) -> pBody p = AppendEntries t n pli plt es ci -> state_machine_log net -> raft_intermediate_reachable net -> raft_intermediate_reachable {| nwPackets := ps'; nwState := st' |} -> nwPackets net = xs ++ p :: ys -> (forall h : Net.name, st' h = update name_eq_dec (nwState net) (pDst p) d h) -> (forall p' : packet, In p' ps' -> In p' (xs ++ ys) \\\\/ p' = {| pSrc := pDst p; pDst := pSrc p; pBody := m |}) -> state_machine_log {| nwPackets := ps'; nwState := st' |}\".", "type": "cannot_unify", "handled": true}, {"ctx": ["qsimpl time: 1 use: raft_net_invariant'.", "qsimpl time: 1 use: raft_net_invariant',state_machine_correct_invariant.", "-", "qsimpl time: 1 use: raft_net_invariant',state_machine_correct_invariant,raft_invariant_handle_message'.", "qsimpl time: 1 use: raft_net_invariant',state_machine_correct_invariant,raft_invariant_handle_message'."], "tactic": "apply log_matching_invariant.", "exn": "In environment orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params H5 : forall (P : network -> Prop) (xs : list packet) (p : packet) (ys : list packet) (net : network) (st' : name -> raft_data) (ps' : list packet) (d : raft_data) (l : list (name * msg)), raft_net_invariant_append_entries' P -> raft_net_invariant_append_entries_reply' P -> raft_net_invariant_request_vote' P -> raft_net_invariant_request_vote_reply' P -> handleMessage (pSrc p) (pDst p) (pBody p) (nwState net (pDst p)) = (d, l) -> P net -> raft_intermediate_reachable net -> raft_intermediate_reachable {| nwPackets := ps'; nwState := st' |} -> nwPackets net = xs ++ p :: ys -> (forall h : name, st' h = update name_eq_dec (nwState net) (pDst p) d h) -> (forall p' : packet, In p' ps' -> In p' (xs ++ ys) \\\\/ In p' (map (fun m : name * msg => {| pSrc := pDst p; pDst := fst m; pBody := snd m |}) l)) -> P {| nwPackets := ps'; nwState := st' |} H : forall (P : network -> Prop) (net : network), raft_net_invariant_init P -> raft_net_invariant_client_request' P -> raft_net_invariant_timeout' P -> raft_net_invariant_append_entries' P -> raft_net_invariant_append_entries_reply' P -> raft_net_invariant_request_vote' P -> raft_net_invariant_request_vote_reply' P -> raft_net_invariant_do_leader' P -> raft_net_invariant_do_generic_server' P -> raft_net_invariant_state_same_packet_subset P -> raft_net_invariant_reboot' P -> raft_intermediate_reachable net -> P net log_matching_invariant : forall net : network, raft_intermediate_reachable net -> log_matching net state_machine_safety_invariant : forall net : network, raft_intermediate_reachable net -> state_machine_safety net max_index_sanity_invariant : forall net : network, raft_intermediate_reachable net -> maxIndex_sanity net handleAppendEntries_logs_sorted : forall (net : network) (p : packet) (t : term) (n : name) (pli : logIndex) (plt : term) (es : list entry) (ci : logIndex) (st' : raft_data) (m : msg), raft_intermediate_reachable net -> logs_sorted net -> handleAppendEntries (pDst p) (nwState net (pDst p)) t n pli plt es ci = (st', m) -> pBody p = AppendEntries t n pli plt es ci -> In p (nwPackets net) -> sorted (log st') handleClientRequest_logs_sorted : forall (h : name) (client : clientId) (id : nat) (c : input) (out : list raft_output) (st : raft_data) (l : list (name * msg)) (net : network), handleClientRequest h (nwState net h) client id c = (out, st, l) -> raft_intermediate_reachable net -> logs_sorted_host net -> sorted (log st) logs_sorted_invariant : forall net : network, raft_intermediate_reachable net -> logs_sorted net H1 : forall net : network, raft_intermediate_reachable net -> state_machine_correct net H4 : forall net : network, raft_intermediate_reachable net -> state_machine_correct net Unable to unify \"log_matching_hosts ?M30876 /\\\\ log_matching_nw ?M30876\" with \"forall (xs : list packet) (p : packet) (ys : list packet) (net : network) (st' : Net.name -> data) (ps' : list packet) (d : raft_data) (m : msg) (t : term) (n : name) (pli : logIndex) (plt : term) (es : list entry) (ci : logIndex), handleAppendEntries (pDst p) (nwState net (pDst p)) t n pli plt es ci = (d, m) -> pBody p = AppendEntries t n pli plt es ci -> state_machine_log net -> raft_intermediate_reachable net -> raft_intermediate_reachable {| nwPackets := ps'; nwState := st' |} -> nwPackets net = xs ++ p :: ys -> (forall h : Net.name, st' h = update name_eq_dec (nwState net) (pDst p) d h) -> (forall p' : packet, In p' ps' -> In p' (xs ++ ys) \\\\/ p' = {| pSrc := pDst p; pDst := pSrc p; pBody := m |}) -> state_machine_log {| nwPackets := ps'; nwState := st' |}\".", "type": "cannot_unify", "handled": true}, {"ctx": ["qsimpl time: 1 use: raft_net_invariant'.", "qsimpl time: 1 use: raft_net_invariant',state_machine_correct_invariant.", "-", "qsimpl time: 1 use: raft_net_invariant',state_machine_correct_invariant,raft_invariant_handle_message'.", "qsimpl time: 1 use: raft_net_invariant',state_machine_correct_invariant,raft_invariant_handle_message'.", "qsimpl time: 1 use: raft_net_invariant',state_machine_correct_invariant,raft_invariant_handle_message'."], "tactic": "eapply state_machine_safety_invariant.", "exn": "In environment orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params H3 : forall (P : network -> Prop) (xs : list packet) (p : packet) (ys : list packet) (net : network) (st' : name -> raft_data) (ps' : list packet) (d : raft_data) (l : list (name * msg)), raft_net_invariant_append_entries' P -> raft_net_invariant_append_entries_reply' P -> raft_net_invariant_request_vote' P -> raft_net_invariant_request_vote_reply' P -> handleMessage (pSrc p) (pDst p) (pBody p) (nwState net (pDst p)) = (d, l) -> P net -> raft_intermediate_reachable net -> raft_intermediate_reachable {| nwPackets := ps'; nwState := st' |} -> nwPackets net = xs ++ p :: ys -> (forall h : name, st' h = update name_eq_dec (nwState net) (pDst p) d h) -> (forall p' : packet, In p' ps' -> In p' (xs ++ ys) \\\\/ In p' (map (fun m : name * msg => {| pSrc := pDst p; pDst := fst m; pBody := snd m |}) l)) -> P {| nwPackets := ps'; nwState := st' |} H : forall (P : network -> Prop) (net : network), raft_net_invariant_init P -> raft_net_invariant_client_request' P -> raft_net_invariant_timeout' P -> raft_net_invariant_append_entries' P -> raft_net_invariant_append_entries_reply' P -> raft_net_invariant_request_vote' P -> raft_net_invariant_request_vote_reply' P -> raft_net_invariant_do_leader' P -> raft_net_invariant_do_generic_server' P -> raft_net_invariant_state_same_packet_subset P -> raft_net_invariant_reboot' P -> raft_intermediate_reachable net -> P net log_matching_invariant : forall net : network, raft_intermediate_reachable net -> log_matching net state_machine_safety_invariant : forall net : network, raft_intermediate_reachable net -> state_machine_safety net max_index_sanity_invariant : forall net : network, raft_intermediate_reachable net -> maxIndex_sanity net handleAppendEntries_logs_sorted : forall (net : network) (p : packet) (t : term) (n : name) (pli : logIndex) (plt : term) (es : list entry) (ci : logIndex) (st' : raft_data) (m : msg), raft_intermediate_reachable net -> logs_sorted net -> handleAppendEntries (pDst p) (nwState net (pDst p)) t n pli plt es ci = (st', m) -> pBody p = AppendEntries t n pli plt es ci -> In p (nwPackets net) -> sorted (log st') handleClientRequest_logs_sorted : forall (h : name) (client : clientId) (id : nat) (c : input) (out : list raft_output) (st : raft_data) (l : list (name * msg)) (net : network), handleClientRequest h (nwState net h) client id c = (out, st, l) -> raft_intermediate_reachable net -> logs_sorted_host net -> sorted (log st) logs_sorted_invariant : forall net : network, raft_intermediate_reachable net -> logs_sorted net H1 : forall net : network, raft_intermediate_reachable net -> state_machine_correct net H2 : forall net : network, raft_intermediate_reachable net -> state_machine_correct net Unable to unify \"state_machine_safety_host ?M38524 /\\\\ state_machine_safety_nw ?M38524\" with \"forall (xs : list packet) (p : packet) (ys : list packet) (net : network) (st' : Net.name -> data) (ps' : list packet) (d : raft_data) (m : msg) (t : term) (n : name) (pli : logIndex) (plt : term) (es : list entry) (ci : logIndex), handleAppendEntries (pDst p) (nwState net (pDst p)) t n pli plt es ci = (d, m) -> pBody p = AppendEntries t n pli plt es ci -> state_machine_log net -> raft_intermediate_reachable net -> raft_intermediate_reachable {| nwPackets := ps'; nwState := st' |} -> nwPackets net = xs ++ p :: ys -> (forall h : Net.name, st' h = update name_eq_dec (nwState net) (pDst p) d h) -> (forall p' : packet, In p' ps' -> In p' (xs ++ ys) \\\\/ p' = {| pSrc := pDst p; pDst := pSrc p; pBody := m |}) -> state_machine_log {| nwPackets := ps'; nwState := st' |}\".", "type": "cannot_unify", "handled": true}, {"ctx": ["qsimpl time: 1 use: raft_net_invariant'.", "qsimpl time: 1 use: raft_net_invariant',state_machine_correct_invariant.", "-", "qsimpl time: 1 use: raft_net_invariant',state_machine_correct_invariant,raft_invariant_handle_message'.", "qsimpl time: 1 use: raft_net_invariant',state_machine_correct_invariant,raft_invariant_handle_message'.", "qsimpl time: 1 use: raft_net_invariant',state_machine_correct_invariant,raft_invariant_handle_message'.", "qsimpl time: 1 use: raft_net_invariant',state_machine_correct_invariant,raft_invariant_handle_message'."], "tactic": "apply smsi.", "exn": "The reference smsi was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["qsimpl time: 1 use: raft_net_invariant'.", "qsimpl time: 1 use: raft_net_invariant',state_machine_correct_invariant.", "-", "qsimpl time: 1 use: raft_net_invariant',state_machine_correct_invariant,raft_invariant_handle_message'.", "qsimpl time: 1 use: raft_net_invariant',state_machine_correct_invariant,raft_invariant_handle_message'.", "qsimpl time: 1 use: raft_net_invariant',state_machine_correct_invariant,raft_invariant_handle_message'.", "qsimpl time: 1 use: raft_net_invariant',state_machine_correct_invariant,raft_invariant_handle_message'.", "apply Decidable.dec_not_not.", "+"], "tactic": "eapply state_machine_safety_invariant.", "exn": "In environment orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params H5 : forall (P : network -> Prop) (xs : list packet) (p : packet) (ys : list packet) (net : network) (st' : name -> raft_data) (ps' : list packet) (d : raft_data) (l : list (name * msg)), raft_net_invariant_append_entries' P -> raft_net_invariant_append_entries_reply' P -> raft_net_invariant_request_vote' P -> raft_net_invariant_request_vote_reply' P -> handleMessage (pSrc p) (pDst p) (pBody p) (nwState net (pDst p)) = (d, l) -> P net -> raft_intermediate_reachable net -> raft_intermediate_reachable {| nwPackets := ps'; nwState := st' |} -> nwPackets net = xs ++ p :: ys -> (forall h : name, st' h = update name_eq_dec (nwState net) (pDst p) d h) -> (forall p' : packet, In p' ps' -> In p' (xs ++ ys) \\\\/ In p' (map (fun m : name * msg => {| pSrc := pDst p; pDst := fst m; pBody := snd m |}) l)) -> P {| nwPackets := ps'; nwState := st' |} H : forall (P : network -> Prop) (net : network), raft_net_invariant_init P -> raft_net_invariant_client_request' P -> raft_net_invariant_timeout' P -> raft_net_invariant_append_entries' P -> raft_net_invariant_append_entries_reply' P -> raft_net_invariant_request_vote' P -> raft_net_invariant_request_vote_reply' P -> raft_net_invariant_do_leader' P -> raft_net_invariant_do_generic_server' P -> raft_net_invariant_state_same_packet_subset P -> raft_net_invariant_reboot' P -> raft_intermediate_reachable net -> P net log_matching_invariant : forall net : network, raft_intermediate_reachable net -> log_matching net state_machine_safety_invariant : forall net : network, raft_intermediate_reachable net -> state_machine_safety net max_index_sanity_invariant : forall net : network, raft_intermediate_reachable net -> maxIndex_sanity net handleAppendEntries_logs_sorted : forall (net : network) (p : packet) (t : term) (n : name) (pli : logIndex) (plt : term) (es : list entry) (ci : logIndex) (st' : raft_data) (m : msg), raft_intermediate_reachable net -> logs_sorted net -> handleAppendEntries (pDst p) (nwState net (pDst p)) t n pli plt es ci = (st', m) -> pBody p = AppendEntries t n pli plt es ci -> In p (nwPackets net) -> sorted (log st') handleClientRequest_logs_sorted : forall (h : name) (client : clientId) (id : nat) (c : input) (out : list raft_output) (st : raft_data) (l : list (name * msg)) (net : network), handleClientRequest h (nwState net h) client id c = (out, st, l) -> raft_intermediate_reachable net -> logs_sorted_host net -> sorted (log st) logs_sorted_invariant : forall net : network, raft_intermediate_reachable net -> logs_sorted net H1 : forall net : network, raft_intermediate_reachable net -> state_machine_correct net H4 : forall net : network, raft_intermediate_reachable net -> state_machine_correct net Unable to unify \"state_machine_safety_host ?M46175 /\\\\ state_machine_safety_nw ?M46175\" with \"raft_net_invariant_append_entries' state_machine_log \\\\/ ~ raft_net_invariant_append_entries' state_machine_log\".", "type": "cannot_unify", "handled": true}, {"ctx": ["qsimpl time: 1 use: raft_net_invariant'.", "qsimpl time: 1 use: raft_net_invariant',state_machine_correct_invariant.", "-", "qsimpl time: 1 use: raft_net_invariant',state_machine_correct_invariant,raft_invariant_handle_message'.", "qsimpl time: 1 use: raft_net_invariant',state_machine_correct_invariant,raft_invariant_handle_message'.", "qsimpl time: 1 use: raft_net_invariant',state_machine_correct_invariant,raft_invariant_handle_message'.", "qsimpl time: 1 use: raft_net_invariant',state_machine_correct_invariant,raft_invariant_handle_message'.", "apply Decidable.dec_not_not.", "+", "qsimpl time: 1 use: raft_net_invariant',state_machine_correct_invariant,raft_invariant_handle_message'."], "tactic": "apply smsi.", "exn": "The reference smsi was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["qsimpl time: 1 use: raft_net_invariant'.", "qsimpl time: 1 use: raft_net_invariant',state_machine_correct_invariant.", "-", "qsimpl time: 1 use: raft_net_invariant',state_machine_correct_invariant,raft_invariant_handle_message'.", "qsimpl time: 1 use: raft_net_invariant',state_machine_correct_invariant,raft_invariant_handle_message'.", "qsimpl time: 1 use: raft_net_invariant',state_machine_correct_invariant,raft_invariant_handle_message'.", "qsimpl time: 1 use: raft_net_invariant',state_machine_correct_invariant,raft_invariant_handle_message'.", "apply Decidable.dec_not_not.", "+", "qsimpl time: 1 use: raft_net_invariant',state_machine_correct_invariant,raft_invariant_handle_message'.", "apply Decidable.dec_not_not."], "tactic": "+", "exn": "Wrong bullet +: Current bullet + is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["qsimpl time: 1 use: raft_net_invariant'.", "qsimpl time: 1 use: raft_net_invariant',state_machine_correct_invariant.", "-", "qsimpl time: 1 use: raft_net_invariant',state_machine_correct_invariant,raft_invariant_handle_message'.", "qsimpl time: 1 use: raft_net_invariant',state_machine_correct_invariant,raft_invariant_handle_message'.", "qsimpl time: 1 use: raft_net_invariant',state_machine_correct_invariant,raft_invariant_handle_message'.", "qsimpl time: 1 use: raft_net_invariant',state_machine_correct_invariant,raft_invariant_handle_message'.", "apply Decidable.dec_not_not.", "+", "qsimpl time: 1 use: raft_net_invariant',state_machine_correct_invariant,raft_invariant_handle_message'.", "apply Decidable.dec_not_not.", "*", "shelve.", "*", "shelve.", "+"], "tactic": "+", "exn": "Wrong bullet +: Current bullet + is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["qsimpl time: 1 use: raft_net_invariant'.", "qsimpl time: 1 use: raft_net_invariant',state_machine_correct_invariant.", "-", "qsimpl time: 1 use: raft_net_invariant',state_machine_correct_invariant,raft_invariant_handle_message'.", "qsimpl time: 1 use: raft_net_invariant',state_machine_correct_invariant,raft_invariant_handle_message'.", "qsimpl time: 1 use: raft_net_invariant',state_machine_correct_invariant,raft_invariant_handle_message'.", "qsimpl time: 1 use: raft_net_invariant',state_machine_correct_invariant,raft_invariant_handle_message'.", "apply Decidable.dec_not_not.", "+", "qsimpl time: 1 use: raft_net_invariant',state_machine_correct_invariant,raft_invariant_handle_message'.", "apply Decidable.dec_not_not.", "*", "shelve.", "*", "shelve.", "+", "shelve."], "tactic": "+", "exn": "Wrong bullet +: Expecting -.", "type": "wrong_bullet", "handled": true}, {"ctx": ["qsimpl time: 1 use: raft_net_invariant'.", "qsimpl time: 1 use: raft_net_invariant',state_machine_correct_invariant.", "-", "qsimpl time: 1 use: raft_net_invariant',state_machine_correct_invariant,raft_invariant_handle_message'.", "qsimpl time: 1 use: raft_net_invariant',state_machine_correct_invariant,raft_invariant_handle_message'.", "qsimpl time: 1 use: raft_net_invariant',state_machine_correct_invariant,raft_invariant_handle_message'.", "qsimpl time: 1 use: raft_net_invariant',state_machine_correct_invariant,raft_invariant_handle_message'.", "apply Decidable.dec_not_not.", "+", "qsimpl time: 1 use: raft_net_invariant',state_machine_correct_invariant,raft_invariant_handle_message'.", "apply Decidable.dec_not_not.", "*", "shelve.", "*", "shelve.", "+", "shelve.", "-"], "tactic": "eapply Build_log_matching_interface.", "exn": "In environment orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params H : forall (P : network -> Prop) (net : network), raft_net_invariant_init P -> raft_net_invariant_client_request' P -> raft_net_invariant_timeout' P -> raft_net_invariant_append_entries' P -> raft_net_invariant_append_entries_reply' P -> raft_net_invariant_request_vote' P -> raft_net_invariant_request_vote_reply' P -> raft_net_invariant_do_leader' P -> raft_net_invariant_do_generic_server' P -> raft_net_invariant_state_same_packet_subset P -> raft_net_invariant_reboot' P -> raft_intermediate_reachable net -> P net log_matching_invariant : forall net : network, raft_intermediate_reachable net -> log_matching net state_machine_safety_invariant : forall net : network, raft_intermediate_reachable net -> state_machine_safety net max_index_sanity_invariant : forall net : network, raft_intermediate_reachable net -> maxIndex_sanity net handleAppendEntries_logs_sorted : forall (net : network) (p : packet) (t : term) (n : name) (pli : logIndex) (plt : term) (es : list entry) (ci : logIndex) (st' : raft_data) (m : msg), raft_intermediate_reachable net -> logs_sorted net -> handleAppendEntries (pDst p) (nwState net (pDst p)) t n pli plt es ci = (st', m) -> pBody p = AppendEntries t n pli plt es ci -> In p (nwPackets net) -> sorted (log st') handleClientRequest_logs_sorted : forall (h : name) (client : clientId) (id : nat) (c : input) (out : list raft_output) (st : raft_data) (l : list (name * msg)) (net : network), handleClientRequest h (nwState net h) client id c = (out, st, l) -> raft_intermediate_reachable net -> logs_sorted_host net -> sorted (log st) logs_sorted_invariant : forall net : network, raft_intermediate_reachable net -> logs_sorted net Unable to unify \"log_matching_interface\" with \"state_machine_correct_interface\".", "type": "cannot_unify", "handled": true}, {"ctx": ["qsimpl time: 1 use: raft_net_invariant'.", "qsimpl time: 1 use: raft_net_invariant',state_machine_correct_invariant.", "-", "qsimpl time: 1 use: raft_net_invariant',state_machine_correct_invariant,raft_invariant_handle_message'.", "qsimpl time: 1 use: raft_net_invariant',state_machine_correct_invariant,raft_invariant_handle_message'.", "qsimpl time: 1 use: raft_net_invariant',state_machine_correct_invariant,raft_invariant_handle_message'.", "qsimpl time: 1 use: raft_net_invariant',state_machine_correct_invariant,raft_invariant_handle_message'.", "apply Decidable.dec_not_not.", "+", "qsimpl time: 1 use: raft_net_invariant',state_machine_correct_invariant,raft_invariant_handle_message'.", "apply Decidable.dec_not_not.", "*", "shelve.", "*", "shelve.", "+", "shelve.", "-"], "tactic": "apply log_matching_invariant.", "exn": "In environment orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params H : forall (P : network -> Prop) (net : network), raft_net_invariant_init P -> raft_net_invariant_client_request' P -> raft_net_invariant_timeout' P -> raft_net_invariant_append_entries' P -> raft_net_invariant_append_entries_reply' P -> raft_net_invariant_request_vote' P -> raft_net_invariant_request_vote_reply' P -> raft_net_invariant_do_leader' P -> raft_net_invariant_do_generic_server' P -> raft_net_invariant_state_same_packet_subset P -> raft_net_invariant_reboot' P -> raft_intermediate_reachable net -> P net log_matching_invariant : forall net : network, raft_intermediate_reachable net -> log_matching net state_machine_safety_invariant : forall net : network, raft_intermediate_reachable net -> state_machine_safety net max_index_sanity_invariant : forall net : network, raft_intermediate_reachable net -> maxIndex_sanity net handleAppendEntries_logs_sorted : forall (net : network) (p : packet) (t : term) (n : name) (pli : logIndex) (plt : term) (es : list entry) (ci : logIndex) (st' : raft_data) (m : msg), raft_intermediate_reachable net -> logs_sorted net -> handleAppendEntries (pDst p) (nwState net (pDst p)) t n pli plt es ci = (st', m) -> pBody p = AppendEntries t n pli plt es ci -> In p (nwPackets net) -> sorted (log st') handleClientRequest_logs_sorted : forall (h : name) (client : clientId) (id : nat) (c : input) (out : list raft_output) (st : raft_data) (l : list (name * msg)) (net : network), handleClientRequest h (nwState net h) client id c = (out, st, l) -> raft_intermediate_reachable net -> logs_sorted_host net -> sorted (log st) logs_sorted_invariant : forall net : network, raft_intermediate_reachable net -> logs_sorted net Unable to unify \"log_matching_hosts ?M48109 /\\\\ log_matching_nw ?M48109\" with \"state_machine_correct_interface\".", "type": "cannot_unify", "handled": true}, {"ctx": ["qsimpl time: 1 use: raft_net_invariant'.", "qsimpl time: 1 use: raft_net_invariant',state_machine_correct_invariant.", "-", "qsimpl time: 1 use: raft_net_invariant',state_machine_correct_invariant,raft_invariant_handle_message'.", "qsimpl time: 1 use: raft_net_invariant',state_machine_correct_invariant,raft_invariant_handle_message'.", "qsimpl time: 1 use: raft_net_invariant',state_machine_correct_invariant,raft_invariant_handle_message'.", "qsimpl time: 1 use: raft_net_invariant',state_machine_correct_invariant,raft_invariant_handle_message'.", "apply Decidable.dec_not_not.", "+", "qsimpl time: 1 use: raft_net_invariant',state_machine_correct_invariant,raft_invariant_handle_message'.", "apply Decidable.dec_not_not.", "*", "shelve.", "*", "shelve.", "+", "shelve.", "-"], "tactic": "-", "exn": "Wrong bullet -: Current bullet - is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["qsimpl time: 1 use: raft_net_invariant'.", "qsimpl time: 1 use: raft_net_invariant',state_machine_correct_invariant.", "-", "qsimpl time: 1 use: raft_net_invariant',state_machine_correct_invariant,raft_invariant_handle_message'.", "qsimpl time: 1 use: raft_net_invariant',state_machine_correct_invariant,raft_invariant_handle_message'.", "qsimpl time: 1 use: raft_net_invariant',state_machine_correct_invariant,raft_invariant_handle_message'.", "qsimpl time: 1 use: raft_net_invariant',state_machine_correct_invariant,raft_invariant_handle_message'.", "apply Decidable.dec_not_not.", "+", "qsimpl time: 1 use: raft_net_invariant',state_machine_correct_invariant,raft_invariant_handle_message'.", "apply Decidable.dec_not_not.", "*", "shelve.", "*", "shelve.", "+", "shelve.", "-", "shelve."], "tactic": "-", "exn": "Wrong bullet -: No more subgoals.", "type": "no_more_subgoals", "handled": true}]}, "chat": [], "original": "apply raft_net_invariant'. - intros. apply state_machine_correct_invariant. auto. - intros. eapply raft_invariant_handle_message'. + apply log_matching_invariant. + apply log_matching_invariant. + eapply state_machine_safety_invariant. apply smsi. + eapply state_machine_safety_invariant. apply smsi. + eauto. + eauto. + auto. + auto. + auto. + auto. + eapply Build_log_matching_interface. intros. apply log_matching_invariant. auto. - intros. simpl in *. destruct m. + eapply raft_invariant_handle_message'. * apply log_matching_invariant. * apply log_matching_invariant. * eapply state_machine_safety_invariant. apply smsi. * eapply state_machine_safety_invariant. apply smsi. * eauto. * eauto. * auto. * auto. * auto. * auto. * eapply Build_log_matching_interface. intros. apply log_matching_invariant. auto. + eapply raft_invariant_handle_message'. * apply log_matching_invariant. * apply log_matching_invariant. * eapply state_machine_safety_invariant. apply smsi. * eapply state_machine_safety_invariant. apply smsi. * eauto. * eauto. * auto. * auto. * auto. * auto. * eapply Build_log_matching_interface. intros. apply log_matching_invariant. auto. + eapply raft_invariant_handle_message'. * apply log_matching_invariant. * apply log_matching_invariant. * eapply state_machine_safety_invariant. apply smsi. * eapply state_machine_safety_invariant. apply smsi. * eauto. * eauto. * auto. * auto. * auto. * auto. * eapply Build_log_matching_interface. intros. apply log_matching_invariant. auto.", "back_times": 0, "succ": false, "time": 93.76304841041565}]