[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": ["intros e l Hsorted Hin."], "tactic": "apply removeAfterIndex_in in Hin.", "exn": "Unable to apply lemma of type \"forall (l0 : list entry) (i : logIndex) (a : entry), In a (removeAfterIndex l0 i) -> In a l0\" on hypothesis of type \"In e l\".", "type": "cannot_apply_in", "handled": true}, {"ctx": ["intros e l Hsorted Hin.", "qsimpl time: 1 use: removeAfterIndex_in.", "apply maxTerm_is_max in Hin.", "-"], "tactic": "apply maxIndex_non_empty in Hin.", "exn": "Unable to apply lemma of type \"forall l0 : list entry, l0 <> [] -> exists e0 : entry, In e0 l0 /\\\\ maxIndex l0 = eIndex e0 /\\\\ maxTerm l0 = eTerm e0\" on hypothesis of type \"maxTerm l >= eTerm e\".", "type": "cannot_apply_in", "handled": true}, {"ctx": ["intros e l Hsorted Hin.", "qsimpl time: 1 use: removeAfterIndex_in.", "apply maxTerm_is_max in Hin.", "-", "qsimpl time: 1 use: removeAfterIndex_in,maxIndex_non_empty."], "tactic": ["destruct Hin as [e0 [Hin0 [HmaxIndex HmaxTerm]]].", ""], "exn": "Expects a disjunctive pattern with 2 branches.", "type": "num_branch", "handled": false}, {"ctx": ["intros e l Hsorted Hin.", "qsimpl time: 1 use: removeAfterIndex_in.", "apply maxTerm_is_max in Hin.", "-", "qsimpl time: 1 use: removeAfterIndex_in,maxIndex_non_empty."], "tactic": "-", "exn": "Wrong bullet -: Current bullet - is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["intros e l Hsorted Hin.", "qsimpl time: 1 use: removeAfterIndex_in.", "apply maxTerm_is_max in Hin.", "-", "qsimpl time: 1 use: removeAfterIndex_in,maxIndex_non_empty.", "shelve.", "-", "apply Hsorted."], "tactic": "-", "exn": "Wrong bullet -: No more subgoals.", "type": "no_more_subgoals", "handled": true}]}, "chat": [], "original": "intros e l Hsorted Hin. apply removeAfterIndex_in in Hin. apply maxTerm_is_max in Hin. - apply maxIndex_non_empty in Hin. destruct Hin as [e0 [Hin0 [HmaxIndex HmaxTerm]]]. unfold removeAfterIndex. destruct (eIndex e0 <=? eIndex e) eqn:Heq. + rewrite HmaxTerm. subst. reflexivity. + assert (Hcontra: eIndex e0 <= eIndex e) by (apply leb_complete; auto). rewrite Nat.leb_gt in Heq. lia. - apply Hsorted. - auto.", "back_times": 0, "succ": false, "time": 132.1722059249878}]