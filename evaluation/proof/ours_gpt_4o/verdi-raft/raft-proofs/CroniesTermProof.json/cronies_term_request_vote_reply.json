[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": ["intros st h os st' ms H."], "tactic": "destruct (type st) eqn:Htype.", "exn": "In environment orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params rri : raft_refinement_interface st : list packet h : packet os : list packet st' : network ms : name -> data H : list packet The term \"st\" has type \"list packet\" while it is expected to have type \"RaftState.raft_data term name entry logIndex serverType data clientId output\".", "type": "wrong_type", "handled": true}, {"ctx": ["intros st h os st' ms H.", "qsimpl time: 1 use: type."], "tactic": "destruct (shouldSend (advanceCommitIndex st h)) eqn:Hsend.", "exn": "In environment orig_base_params : BaseParams raft_params : RaftParams orig_base_params one_node_params : OneNodeParams orig_base_params st : list packet h : packet os : list packet st' : network ms : name -> electionsData * raft_data H : list packet t : nat v : bool H2 : pBody h = RequestVoteReply t v H3 : cronies_term st' H4 : refined_raft_intermediate_reachable st' H5 : nwPackets st' = st ++ h :: os H6 : forall h0 : name, ms h0 = update name_eq_dec (nwState st') (pDst h) (update_elections_data_requestVoteReply (pDst h) (pSrc h) t v (nwState st' (pDst h)), handleRequestVoteReply (pDst h) (snd (nwState st' (pDst h))) (pSrc h) t v) h0 H7 : forall p' : packet, In p' H -> In p' (st ++ os) H8 : serverType refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (GhostSimulations.deghost net) The term \"st\" has type \"list packet\" while it is expected to have type \"raft_data\".", "type": "wrong_type", "handled": true}]}, "chat": [], "original": "intros st h os st' ms H. unfold doLeader in H. destruct (type st) eqn:Htype. - destruct (shouldSend (advanceCommitIndex st h)) eqn:Hsend. -- injection H as _ Hst' _. now rewrite Hst'. -- injection H as _ Hst' _. now rewrite Hst'. - injection H as _ Hst' _. now rewrite Hst'.", "back_times": 0, "succ": false, "time": 85.16529846191406}]