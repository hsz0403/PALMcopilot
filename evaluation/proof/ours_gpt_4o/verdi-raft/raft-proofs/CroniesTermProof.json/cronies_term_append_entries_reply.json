[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": ["intros h st t h' pli plt st' t' e s Heq Hin."], "tactic": "destruct (handleRequestVote h (snd st) t h' pli plt) eqn:Hreq.", "exn": "In environment orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params rri : raft_refinement_interface h : list packet st : packet t : list packet h' : network pli : name -> data plt : list packet st' : GhostSimulations.ghost_data t' : raft_data e : list (name * msg) s : nat Heq : list entry Hin : bool The term \"h\" has type \"list packet\" while it is expected to have type \"name\".", "type": "wrong_type", "handled": true}, {"ctx": ["intros h st t h' pli plt st' t' e s Heq Hin.", "qsimpl time: 1 use: handleRequestVote,snd."], "tactic": "destruct p.", "exn": "The reference p was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros h st t h' pli plt st' t' e s Heq Hin.", "qsimpl time: 1 use: handleRequestVote,snd.", "destruct mkPacket."], "tactic": "destruct (votedFor (snd st)) eqn:Hvf.", "exn": "In environment orig_base_params : BaseParams raft_params : RaftParams orig_base_params one_node_params : OneNodeParams orig_base_params h : list packet st : packet t : list packet h' : network pli : name -> electionsData * raft_data plt : list packet t' : raft_data e : list (name * msg) s : nat Heq : list entry Hin : bool X : name -> RaftState.raft_data term name entry logIndex serverType data clientId output -> nat -> fin N -> nat -> nat -> raft_data * msg H : handleAppendEntriesReply (pDst st) (snd (nwState h' (pDst st))) (pSrc st) s Heq Hin = (t', e) H1 : pBody st = AppendEntriesReply s Heq Hin H2 : cronies_term h' H3 : refined_raft_intermediate_reachable h' H4 : nwPackets h' = h ++ st :: t H5 : forall h : name, pli h = update name_eq_dec (nwState h') (pDst st) (fst (nwState h' (pDst st)), t') h H6 : forall p' : packet, In p' plt -> In p' (h ++ t) \\\\/ In p' (map (fun m : name * msg => {| pSrc := pDst st; pDst := fst m; pBody := snd m |}) e) refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (GhostSimulations.deghost net) The term \"st\" has type \"packet\" while it is expected to have type \"(?A * ?B0)%type\".", "type": "wrong_type", "handled": true}, {"ctx": ["intros h st t h' pli plt st' t' e s Heq Hin.", "qsimpl time: 1 use: handleRequestVote,snd.", "destruct mkPacket.", "qsimpl time: 1 use: handleRequestVote,votedFor,snd.", "-"], "tactic": "subst st'.", "exn": "No such hypothesis: st'", "type": "no_hypos", "handled": true}, {"ctx": ["intros h st t h' pli plt st' t' e s Heq Hin.", "qsimpl time: 1 use: handleRequestVote,snd.", "destruct mkPacket.", "qsimpl time: 1 use: handleRequestVote,votedFor,snd.", "-", "qsimpl time: 1 use: handleRequestVote,votedFor,snd."], "tactic": "-", "exn": "Wrong bullet -: Current bullet - is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["intros h st t h' pli plt st' t' e s Heq Hin.", "qsimpl time: 1 use: handleRequestVote,snd.", "destruct mkPacket.", "qsimpl time: 1 use: handleRequestVote,votedFor,snd.", "-", "qsimpl time: 1 use: handleRequestVote,votedFor,snd.", "+", "shelve.", "+", "shelve.", "+", "shelve.", "-"], "tactic": "subst st'.", "exn": "No such hypothesis: st'", "type": "no_hypos", "handled": true}, {"ctx": ["intros h st t h' pli plt st' t' e s Heq Hin.", "qsimpl time: 1 use: handleRequestVote,snd.", "destruct mkPacket.", "qsimpl time: 1 use: handleRequestVote,votedFor,snd.", "-", "qsimpl time: 1 use: handleRequestVote,votedFor,snd.", "+", "shelve.", "+", "shelve.", "+", "shelve.", "-"], "tactic": "qsimpl time: 1 use: handleRequestVote,contradiction,votedFor,snd.", "exn": "The reference contradiction was not found in the current environment.", "type": "ref_not_found", "handled": true}]}, "chat": [], "original": "intros h st t h' pli plt st' t' e s Heq Hin. unfold update_elections_data_requestVote in Heq. destruct (handleRequestVote h (snd st) t h' pli plt) eqn:Hreq. destruct p. destruct (votedFor (snd st)) eqn:Hvf. - simpl in Heq. subst st'. simpl in Hin. contradiction. - simpl in Heq. subst st'. auto.", "back_times": 1, "succ": false, "time": 192.21756672859192}]