[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": ["intros net st' ps' d os d' ms h H_doGenericServer H_P H_reachable H_nwState H_st' H_ps'.", "unfold prevLog_leader_sublog.", "intros leader p t leaderId prevLogIndex prevLogTerm entries leaderCommit H_type H_in H_pBody."], "tactic": "assert (prevLog_leader_sublog net).", "exn": "In environment orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params rri : raft_refinement_interface vci : votes_correct_interface cci : cronies_correct_interface lsi : leader_sublog_interface plceti : prevLog_candidateEntriesTerm_interface net : list packet st' : packet ps' : list packet d : network os : name -> data d' : list packet ms : raft_data h : msg H_doGenericServer : term H_P : name H_reachable : logIndex H_nwState : term H_st' : list entry H_ps' : logIndex leader : handleAppendEntries (pDst st') (nwState d (pDst st')) H_doGenericServer H_P H_reachable H_nwState H_st' H_ps' = (ms, h) p : pBody st' = AppendEntries H_doGenericServer H_P H_reachable H_nwState H_st' H_ps' t : forall (leader : Net.name) (p : packet) (t : term) (leaderId : name) (prevLogIndex : logIndex) (prevLogTerm : term) (entries : list entry) (leaderCommit : logIndex), type (nwState d leader) = Leader -> In p (nwPackets d) -> pBody p = AppendEntries t leaderId prevLogIndex prevLogTerm entries leaderCommit -> currentTerm (nwState d leader) = prevLogTerm -> 0 < prevLogIndex -> 0 < prevLogTerm -> exists ple : entry, eIndex ple = prevLogIndex /\\\\ eTerm ple = prevLogTerm /\\\\ In ple (log (nwState d leader)) leaderId : raft_intermediate_reachable d prevLogIndex : nwPackets d = net ++ st' :: ps' prevLogTerm : forall h : name, os h = update name_eq_dec (nwState d) (pDst st') ms h entries : forall p' : packet, In p' d' -> In p' (net ++ ps') \\\\/ p' = {| pSrc := pDst st'; pDst := pSrc st'; pBody := h |} leaderCommit : Net.name H_type : packet H_in : term H_pBody : name The term \"net\" has type \"list packet\" while it is expected to have type \"network\".", "type": "wrong_type", "handled": true}, {"ctx": ["intros net st' ps' d os d' ms h H_doGenericServer H_P H_reachable H_nwState H_st' H_ps'.", "unfold prevLog_leader_sublog.", "intros leader p t leaderId prevLogIndex prevLogTerm entries leaderCommit H_type H_in H_pBody.", "qsimpl time: 1 use: prevLog_leader_sublog."], "tactic": "apply prevLog_leader_sublog_invariant.", "exn": "In environment orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params net : list packet st' : packet ps' : list packet d : network os : name -> raft_data d' : list packet ms : raft_data h : msg H_doGenericServer : term H_P : name H_reachable : logIndex H_nwState : term H_st' : list entry H_ps' : logIndex leader : handleAppendEntries (pDst st') (nwState d (pDst st')) H_doGenericServer H_P H_reachable H_nwState H_st' H_ps' = (ms, h) p : pBody st' = AppendEntries H_doGenericServer H_P H_reachable H_nwState H_st' H_ps' t : forall (leader : name) (p : packet) (t : term) (leaderId : name) (prevLogIndex : logIndex) (prevLogTerm : term) (entries : list entry) (leaderCommit : logIndex), type (nwState d leader) = Leader -> In p (nwPackets d) -> pBody p = AppendEntries t leaderId prevLogIndex prevLogTerm entries leaderCommit -> currentTerm (nwState d leader) = prevLogTerm -> 0 < prevLogIndex -> 0 < prevLogTerm -> exists ple : entry, eIndex ple = prevLogIndex /\\\\ eTerm ple = prevLogTerm /\\\\ In ple (log (nwState d leader)) leaderId : raft_intermediate_reachable d prevLogIndex : nwPackets d = net ++ st' :: ps' prevLogTerm : forall h : name, os h = (if name_eq_dec h (pDst st') then ms else nwState d h) entries : forall p' : packet, In p' d' -> In p' (net ++ ps') \\\\/ p' = {| pSrc := pDst st'; pDst := pSrc st'; pBody := h |} leaderCommit : name H_type : packet H_in : term H_pBody : name prevLogIndex0 : logIndex entries0 : list entry leaderCommit0 : logIndex H : type (os leaderCommit) = Leader H0 : In H_type d' H1 : pBody H_type = AppendEntries H_in H_pBody prevLogIndex0 (currentTerm (os leaderCommit)) entries0 leaderCommit0 H3 : 0 < prevLogIndex0 H4 : 0 < currentTerm (os leaderCommit) X0 : Prop prevLog_candidateEntriesTerm_invariant : forall net : network, refined_raft_intermediate_reachable net -> prevLog_candidateEntriesTerm net leader_sublog_invariant_invariant : forall net : network, raft_intermediate_reachable net -> leader_sublog_invariant net cronies_correct_invariant : forall net : network, refined_raft_intermediate_reachable net -> cronies_correct net votes_correct_invariant : forall net : network, refined_raft_intermediate_reachable net -> votes_correct net refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (deghost net) Unable to unify \"forall (leader0 : Net.name) (p0 : packet) (t0 : term) (leaderId0 : name) (prevLogIndex1 : logIndex) (prevLogTerm0 : term) (entries1 : list entry) (leaderCommit1 : logIndex), type (nwState ?M7536 leader0) = Leader -> In p0 (nwPackets ?M7536) -> pBody p0 = AppendEntries t0 leaderId0 prevLogIndex1 prevLogTerm0 entries1 leaderCommit1 -> currentTerm (nwState ?M7536 leader0) = prevLogTerm0 -> 0 < prevLogIndex1 -> 0 < prevLogTerm0 -> exists ple : entry, eIndex ple = prevLogIndex1 /\\\\ eTerm ple = prevLogTerm0 /\\\\ In ple (log (nwState ?M7536 leader0))\" with \"exists ple : entry, eIndex ple = prevLogIndex0 /\\\\ eTerm ple = currentTerm (os leaderCommit) /\\\\ In ple (log (os leaderCommit))\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros net st' ps' d os d' ms h H_doGenericServer H_P H_reachable H_nwState H_st' H_ps'.", "unfold prevLog_leader_sublog.", "intros leader p t leaderId prevLogIndex prevLogTerm entries leaderCommit H_type H_in H_pBody.", "qsimpl time: 1 use: prevLog_leader_sublog.", "qsimpl time: 1 use: prevLog_leader_sublog,prevLog_leader_sublog_invariant."], "tactic": "apply prevLog_leader_sublog_invariant in H_reachable.", "exn": "Unable to apply lemma of type \"forall net0 : network, raft_intermediate_reachable net0 -> prevLog_leader_sublog net0\" on hypothesis of type \"logIndex\".", "type": "cannot_apply_in", "handled": true}, {"ctx": ["intros net st' ps' d os d' ms h H_doGenericServer H_P H_reachable H_nwState H_st' H_ps'.", "unfold prevLog_leader_sublog.", "intros leader p t leaderId prevLogIndex prevLogTerm entries leaderCommit H_type H_in H_pBody.", "qsimpl time: 1 use: prevLog_leader_sublog.", "qsimpl time: 1 use: prevLog_leader_sublog,prevLog_leader_sublog_invariant.", "qsimpl time: 1 use: prevLog_leader_sublog,prevLog_leader_sublog_invariant."], "tactic": "apply H_reachable.", "exn": "In environment orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params net : list packet st' : packet ps' : list packet d : network os : name -> raft_data d' : list packet ms : raft_data h : msg H_doGenericServer : term H_P : name H_reachable : logIndex H_nwState : term H_st' : list entry H_ps' : logIndex leader : handleAppendEntries (pDst st') (nwState d (pDst st')) H_doGenericServer H_P H_reachable H_nwState H_st' H_ps' = (ms, h) p : pBody st' = AppendEntries H_doGenericServer H_P H_reachable H_nwState H_st' H_ps' t : forall (leader : name) (p : packet) (t : term) (leaderId : name) (prevLogIndex : logIndex) (prevLogTerm : term) (entries : list entry) (leaderCommit : logIndex), type (nwState d leader) = Leader -> In p (nwPackets d) -> pBody p = AppendEntries t leaderId prevLogIndex prevLogTerm entries leaderCommit -> currentTerm (nwState d leader) = prevLogTerm -> 0 < prevLogIndex -> 0 < prevLogTerm -> exists ple : entry, eIndex ple = prevLogIndex /\\\\ eTerm ple = prevLogTerm /\\\\ In ple (log (nwState d leader)) leaderId : raft_intermediate_reachable d prevLogIndex : nwPackets d = net ++ st' :: ps' prevLogTerm : forall h : name, os h = (if name_eq_dec h (pDst st') then ms else nwState d h) entries : forall p' : packet, In p' d' -> In p' (net ++ ps') \\\\/ p' = {| pSrc := pDst st'; pDst := pSrc st'; pBody := h |} leaderCommit : name H_type : packet H_in : term H_pBody : name prevLogIndex0 : logIndex entries0 : list entry leaderCommit0 : logIndex H : type (os leaderCommit) = Leader H0 : In H_type d' H1 : pBody H_type = AppendEntries H_in H_pBody prevLogIndex0 (currentTerm (os leaderCommit)) entries0 leaderCommit0 H3 : 0 < prevLogIndex0 H4 : 0 < currentTerm (os leaderCommit) X0 : Prop prevLog_candidateEntriesTerm_invariant : forall net : network, refined_raft_intermediate_reachable net -> prevLog_candidateEntriesTerm net leader_sublog_invariant_invariant : forall net : network, raft_intermediate_reachable net -> leader_sublog_invariant net cronies_correct_invariant : forall net : network, refined_raft_intermediate_reachable net -> cronies_correct net votes_correct_invariant : forall net : network, refined_raft_intermediate_reachable net -> votes_correct net refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (deghost net) H2 : forall net : network, raft_intermediate_reachable net -> prevLog_leader_sublog net X1 : Prop H5 : forall net : network, raft_intermediate_reachable net -> prevLog_leader_sublog net X2 : Prop Unable to unify \"logIndex\" with \"exists ple : entry, eIndex ple = prevLogIndex0 /\\\\ eTerm ple = currentTerm (os leaderCommit) /\\\\ In ple (log (os leaderCommit))\".", "type": "cannot_unify", "handled": true}]}, "chat": [], "original": "intros net st' ps' d os d' ms h H_doGenericServer H_P H_reachable H_nwState H_st' H_ps'. unfold prevLog_leader_sublog. intros leader p t leaderId prevLogIndex prevLogTerm entries leaderCommit H_type H_in H_pBody. assert (prevLog_leader_sublog net). - apply prevLog_leader_sublog_invariant. auto. apply prevLog_leader_sublog_invariant in H_reachable. apply H_reachable. auto.", "back_times": 0, "succ": false, "time": 246.44902229309082}]