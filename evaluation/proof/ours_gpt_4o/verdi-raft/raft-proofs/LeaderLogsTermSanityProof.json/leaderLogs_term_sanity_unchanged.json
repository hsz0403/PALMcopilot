[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": [], "tactic": ["apply Build_leaderLogs_term_sanity_interface.", ""], "exn": "Applied theorem does not have enough premises.", "type": "no_enough_premises", "handled": false}]}, "chat": [], "original": "apply Build_leaderLogs_term_sanity_interface. intros net H. apply LeaderLogsTermSanityInterface.leaderLogs_term_sanity_invariant. apply refined_raft_net_invariant_init. intros net' H_net'. apply refined_raft_net_invariant_state_same_packet_subset with (P := leaderLogs_term_sanity). - intros h. now rewrite H_net'. - intros p Hp. now apply H_net'. - apply H. - apply LeaderLogsTermSanityInterface.leaderLogs_term_sanity_invariant in H as H_inv. apply refined_raft_net_invariant_state_same_packet_subset with (P := leaderLogs_term_sanity_candidate). * intros h. now rewrite H_net'. * intros p Hp. now apply H_net'. * apply H_inv. * apply H. - intros. apply LeaderLogsTermSanityInterface.leaderLogs_currentTerm_sanity_candidate_invariant. apply raft_net_invariant_reboot. intros net'' H_reboot H_inv_reboot. apply refined_raft_net_invariant_state_same_packet_subset with (P := leaderLogs_currentTerm_sanity). * intros h. now rewrite H_reboot. * intros p Hp. now apply H_reboot. * apply H_inv_reboot. * apply H.", "back_times": 0, "succ": false, "time": 59.031346797943115}]