[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": ["intros h st src t v st' crony Hreq Hin."], "tactic": "destruct (currentTerm st <? t) eqn:Hctt.", "exn": "In environment orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params rri : raft_refinement_interface vci : votes_correct_interface cvfsi : candidates_vote_for_selves_interface h : name st : network src : name -> data t : list packet v : electionsData st' : list raft_output crony : raft_data Hreq : list (name * msg) Hin : clientId The term \"st\" has type \"network\" while it is expected to have type \"RaftState.raft_data term name entry logIndex serverType data clientId output\".", "type": "wrong_type", "handled": true}]}, "chat": [], "original": "intros h st src t v st' crony Hreq Hin. unfold handleRequestVoteReply in Hreq. destruct (currentTerm st <? t) eqn:Hctt. - inv Hreq. simpl in Hin. contradiction. - destruct (t <? currentTerm st) eqn:Htct. + inv Hreq. simpl in Hin. auto. + remember (v && wonElection (dedup name_eq_dec (src :: votesReceived st))) as won. destruct (type st) eqn:Htype; inv Hreq; simpl in Hin; try (right; assumption). all: destruct won; simpl in Hin; auto; destruct (name_eq_dec crony src) as [Hcs | Hcs]. * subst. left. repeat split; auto. symmetry in Heqwon. apply andb_prop in Heqwon. destruct Heqwon as [_ Hwon]. auto. * exfalso. simpl in Hin. contradiction.", "back_times": 0, "succ": false, "time": 85.37347507476807}]