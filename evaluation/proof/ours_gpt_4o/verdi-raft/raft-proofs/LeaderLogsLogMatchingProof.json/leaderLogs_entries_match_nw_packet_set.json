[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": [], "tactic": "apply refined_raft_net_invariant.", "exn": "In environment orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params rri : raft_refinement_interface lmi : log_matching_interface lltsi : leaderLogs_term_sanity_interface llsi : leaderLogs_sorted_interface si : sorted_interface llsli : leaderLogs_sublog_interface llci : leaderLogs_contiguous_interface taifoi : terms_and_indices_from_one_interface Unable to unify \"forall (net : network) (st' : name -> data) (ps' : list packet) (gd : ghost_data) (d : raft_data) (h : name) (os : list raft_output) (d' : raft_data) (ms : list (name * msg)), doLeader d h = (os, d', ms) -> ?M3207 net -> refined_raft_intermediate_reachable net -> nwState net h = (gd, d) -> (forall h' : name, st' h' = update name_eq_dec (nwState net) h (gd, d') h') -> (forall p : packet, In p ps' -> In p (nwPackets net) \\\\/ In p (send_packets h ms)) -> ?M3207 {| nwPackets := ps'; nwState := st' |}\" with \"network\".", "type": "cannot_unify", "handled": true}, {"ctx": ["qsimpl time: 1 use: refined_raft_net_invariant."], "tactic": "apply leaderLogs_entries_match_init.", "exn": "In environment orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params H : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net net, net' : network H0 : leaderLogs_entries_match_nw net H1 : forall p : packet, In p (nwPackets net') -> is_append_entries (pBody p) -> In p (nwPackets net) H2 : forall h : name, leaderLogs (fst (nwState net' h)) = leaderLogs (fst (nwState net h)) leaderLogs_contiguous_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaderLogs_contiguous net leaderLogs_sublog_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaderLogs_sublog net handleAppendEntries_logs_sorted : forall (net : network) (p : packet) (t : term) (n : name) (pli : logIndex) (plt : term) (es : list entry) (ci : logIndex) (st' : raft_data) (m : msg), raft_intermediate_reachable net -> logs_sorted net -> handleAppendEntries (pDst p) (nwState net (pDst p)) t n pli plt es ci = (st', m) -> pBody p = AppendEntries t n pli plt es ci -> In p (nwPackets net) -> sorted (log st') handleClientRequest_logs_sorted : forall (h : name) (client : clientId) (id : nat) (c : input) (out : list raft_output) (st : raft_data) (l : list (name * msg)) (net : network), handleClientRequest h (nwState net h) client id c = (out, st, l) -> raft_intermediate_reachable net -> logs_sorted_host net -> sorted (log st) logs_sorted_invariant : forall net : network, raft_intermediate_reachable net -> logs_sorted net leaderLogs_sorted_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaderLogs_sorted net leaderLogs_term_sanity_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaderLogs_term_sanity net leaderLogs_currentTerm_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaderLogs_currentTerm_sanity net leaderLogs_currentTerm_sanity_candidate_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaderLogs_currentTerm_sanity_candidate net log_matching_invariant : forall net : network, raft_intermediate_reachable net -> log_matching net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (deghost net) H3 : forall net : network, refined_raft_intermediate_reachable net -> terms_and_indices_from_one_ll net H4 : forall net : network, refined_raft_intermediate_reachable net -> terms_and_indices_from_one_vwl net Unable to unify \"refined_raft_net_invariant_init leaderLogs_entries_match\" with \"leaderLogs_entries_match_nw net'\".", "type": "cannot_unify", "handled": true}, {"ctx": ["qsimpl time: 1 use: refined_raft_net_invariant.", "qsimpl time: 1 use: refined_raft_net_invariant,leaderLogs_entries_match_init."], "tactic": "eapply refined_raft_net_invariant_request_vote_reply'_weak.", "exn": "In environment orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params H6 : refined_raft_net_invariant_init leaderLogs_entries_match H : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net net, net' : network H0 : leaderLogs_entries_match_nw net H1 : forall p : packet, In p (nwPackets net') -> is_append_entries (pBody p) -> In p (nwPackets net) H2 : forall h : name, leaderLogs (fst (nwState net' h)) = leaderLogs (fst (nwState net h)) leaderLogs_contiguous_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaderLogs_contiguous net leaderLogs_sublog_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaderLogs_sublog net handleAppendEntries_logs_sorted : forall (net : network) (p : packet) (t : term) (n : name) (pli : logIndex) (plt : term) (es : list entry) (ci : logIndex) (st' : raft_data) (m : msg), raft_intermediate_reachable net -> logs_sorted net -> handleAppendEntries (pDst p) (nwState net (pDst p)) t n pli plt es ci = (st', m) -> pBody p = AppendEntries t n pli plt es ci -> In p (nwPackets net) -> sorted (log st') handleClientRequest_logs_sorted : forall (h : name) (client : clientId) (id : nat) (c : input) (out : list raft_output) (st : raft_data) (l : list (name * msg)) (net : network), handleClientRequest h (nwState net h) client id c = (out, st, l) -> raft_intermediate_reachable net -> logs_sorted_host net -> sorted (log st) logs_sorted_invariant : forall net : network, raft_intermediate_reachable net -> logs_sorted net leaderLogs_sorted_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaderLogs_sorted net leaderLogs_term_sanity_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaderLogs_term_sanity net leaderLogs_currentTerm_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaderLogs_currentTerm_sanity net leaderLogs_currentTerm_sanity_candidate_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaderLogs_currentTerm_sanity_candidate net log_matching_invariant : forall net : network, raft_intermediate_reachable net -> log_matching net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (deghost net) H3 : forall net : network, refined_raft_intermediate_reachable net -> terms_and_indices_from_one_ll net H4 : forall net : network, refined_raft_intermediate_reachable net -> terms_and_indices_from_one_vwl net H5 : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net Unable to unify \"list packet\" with \"let (name, msg, _, _, nodes, _, _, _, _, _) := raft_refined_multi_params in name\".", "type": "cannot_unify", "handled": true}, {"ctx": ["qsimpl time: 1 use: refined_raft_net_invariant.", "qsimpl time: 1 use: refined_raft_net_invariant,leaderLogs_entries_match_init.", "qsimpl time: 1 use: refined_raft_net_invariant,refined_raft_net_invariant_request_vote_reply'_weak,leaderLogs_entries_match_init."], "tactic": "destruct H1.", "exn": "Unable to find an instance for the variable p.", "type": "no_instance_var", "handled": true}, {"ctx": ["qsimpl time: 1 use: refined_raft_net_invariant.", "qsimpl time: 1 use: refined_raft_net_invariant,leaderLogs_entries_match_init.", "qsimpl time: 1 use: refined_raft_net_invariant,refined_raft_net_invariant_request_vote_reply'_weak,leaderLogs_entries_match_init.", "qsimpl time: 1 use: refined_raft_net_invariant,refined_raft_net_invariant_request_vote_reply'_weak,leaderLogs_entries_match_init.", "split.", "--", "intros."], "tactic": "specialize (H3 _ _ _ _ H4).", "exn": "In environment orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params H10 : refined_raft_net_invariant_init leaderLogs_entries_match H6 : forall net : network -> Prop, refined_raft_net_invariant_request_vote_reply net -> refined_raft_net_invariant_request_vote_reply' net H : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net net, net' : network H0 : leaderLogs_entries_match_nw net H1 : forall p : packet, In p (nwPackets net') -> is_append_entries (pBody p) -> In p (nwPackets net) H2 : forall h : name, leaderLogs (fst (nwState net' h)) = leaderLogs (fst (nwState net h)) leaderLogs_contiguous_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaderLogs_contiguous net leaderLogs_sublog_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaderLogs_sublog net handleAppendEntries_logs_sorted : forall (net : network) (p : packet) (t : term) (n : name) (pli : logIndex) (plt : term) (es : list entry) (ci : logIndex) (st' : raft_data) (m : msg), raft_intermediate_reachable net -> logs_sorted net -> handleAppendEntries (pDst p) (nwState net (pDst p)) t n pli plt es ci = (st', m) -> pBody p = AppendEntries t n pli plt es ci -> In p (nwPackets net) -> sorted (log st') handleClientRequest_logs_sorted : forall (h : name) (client : clientId) (id : nat) (c : input) (out : list raft_output) (st : raft_data) (l : list (name * msg)) (net : network), handleClientRequest h (nwState net h) client id c = (out, st, l) -> raft_intermediate_reachable net -> logs_sorted_host net -> sorted (log st) logs_sorted_invariant : forall net : network, raft_intermediate_reachable net -> logs_sorted net leaderLogs_sorted_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaderLogs_sorted net leaderLogs_term_sanity_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaderLogs_term_sanity net leaderLogs_currentTerm_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaderLogs_currentTerm_sanity net leaderLogs_currentTerm_sanity_candidate_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaderLogs_currentTerm_sanity_candidate net log_matching_invariant : forall net : network, raft_intermediate_reachable net -> log_matching net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (deghost net) H3 : forall net : network, refined_raft_intermediate_reachable net -> terms_and_indices_from_one_ll net H4 : forall net : network, refined_raft_intermediate_reachable net -> terms_and_indices_from_one_vwl net H5 : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net h : Net.name llt : term ll : list entry p : packet t : term src : name pli : logIndex plt : term es : list entry ci : logIndex H7 : In (llt, ll) (leaderLogs (fst (nwState net' h))) H8 : In p (nwPackets net') H9 : pBody p = AppendEntries t src pli plt es ci e1, e2 : entry H11 : eIndex e1 = eIndex e2 H12 : eTerm e1 = eTerm e2 H13 : In e1 es H14 : In e2 ll e3 : entry H15 : eIndex e3 <= eIndex e1 H16 : In e3 es The term \"H4\" has type \"forall net : network, refined_raft_intermediate_reachable net -> terms_and_indices_from_one_vwl net\" while it is expected to have type \"list entry\".", "type": "wrong_type", "handled": true}, {"ctx": ["qsimpl time: 1 use: refined_raft_net_invariant.", "qsimpl time: 1 use: refined_raft_net_invariant,leaderLogs_entries_match_init.", "qsimpl time: 1 use: refined_raft_net_invariant,refined_raft_net_invariant_request_vote_reply'_weak,leaderLogs_entries_match_init.", "qsimpl time: 1 use: refined_raft_net_invariant,refined_raft_net_invariant_request_vote_reply'_weak,leaderLogs_entries_match_init.", "split.", "--", "intros.", "qsimpl time: 1 use: refined_raft_net_invariant,refined_raft_net_invariant_request_vote_reply'_weak,leaderLogs_entries_match_init."], "tactic": "assert (H9: In e1 (log (snd (nwState net h)))) by (apply H3; auto).", "exn": "H9 is already used.", "type": "used_var", "handled": true}, {"ctx": ["qsimpl time: 1 use: refined_raft_net_invariant.", "qsimpl time: 1 use: refined_raft_net_invariant,leaderLogs_entries_match_init.", "qsimpl time: 1 use: refined_raft_net_invariant,refined_raft_net_invariant_request_vote_reply'_weak,leaderLogs_entries_match_init.", "qsimpl time: 1 use: refined_raft_net_invariant,refined_raft_net_invariant_request_vote_reply'_weak,leaderLogs_entries_match_init.", "split.", "--", "intros.", "qsimpl time: 1 use: refined_raft_net_invariant,refined_raft_net_invariant_request_vote_reply'_weak,leaderLogs_entries_match_init."], "tactic": "assert (H9': In e1 (log (snd (nwState net h)))) by (apply H3; auto).", "exn": "In environment orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params H19 : refined_raft_net_invariant_init leaderLogs_entries_match H18 : forall net : network -> Prop, refined_raft_net_invariant_request_vote_reply net -> refined_raft_net_invariant_request_vote_reply' net H : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net net, net' : network H0 : leaderLogs_entries_match_nw net H1 : forall p : packet, In p (nwPackets net') -> is_append_entries (pBody p) -> In p (nwPackets net) H2 : forall h : name, leaderLogs (fst (nwState net' h)) = leaderLogs (fst (nwState net h)) leaderLogs_contiguous_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaderLogs_contiguous net leaderLogs_sublog_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaderLogs_sublog net handleAppendEntries_logs_sorted : forall (net : network) (p : packet) (t : term) (n : name) (pli : logIndex) (plt : term) (es : list entry) (ci : logIndex) (st' : raft_data) (m : msg), raft_intermediate_reachable net -> logs_sorted net -> handleAppendEntries (pDst p) (nwState net (pDst p)) t n pli plt es ci = (st', m) -> pBody p = AppendEntries t n pli plt es ci -> In p (nwPackets net) -> sorted (log st') handleClientRequest_logs_sorted : forall (h : name) (client : clientId) (id : nat) (c : input) (out : list raft_output) (st : raft_data) (l : list (name * msg)) (net : network), handleClientRequest h (nwState net h) client id c = (out, st, l) -> raft_intermediate_reachable net -> logs_sorted_host net -> sorted (log st) logs_sorted_invariant : forall net : network, raft_intermediate_reachable net -> logs_sorted net leaderLogs_sorted_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaderLogs_sorted net leaderLogs_term_sanity_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaderLogs_term_sanity net leaderLogs_currentTerm_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaderLogs_currentTerm_sanity net leaderLogs_currentTerm_sanity_candidate_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaderLogs_currentTerm_sanity_candidate net log_matching_invariant : forall net : network, raft_intermediate_reachable net -> log_matching net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (deghost net) H3 : forall net : network, refined_raft_intermediate_reachable net -> terms_and_indices_from_one_ll net H4 : forall net : network, refined_raft_intermediate_reachable net -> terms_and_indices_from_one_vwl net h : name llt : term ll : list entry p : packet t : term src : name pli : logIndex plt : term es : list entry ci : logIndex H7 : In (llt, ll) (leaderLogs (fst (nwState net' h))) H8 : In p (nwPackets net') H9 : pBody p = AppendEntries t src pli plt es ci e1, e2 : entry H11 : eIndex e1 = eIndex e2 H12 : eTerm e1 = eTerm e2 H13 : In e1 es H14 : In e2 ll e3 : entry H15 : eIndex e3 <= eIndex e1 H16 : In e3 es H17 : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net Unable to unify \"forall (h : Net.name) (t : term) (ll : list entry), In (t, ll) (leaderLogs (fst (nwState ?M61724 h))) -> terms_and_indices_from_one ll\" with \"(fix In (a : entry) (l : list entry) {struct l} : Prop := match l with | [] => False | b :: m => b = a \\\\/ In a m end) e1 (log (snd (nwState net h)))\".", "type": "cannot_unify", "handled": true}, {"ctx": ["qsimpl time: 1 use: refined_raft_net_invariant.", "qsimpl time: 1 use: refined_raft_net_invariant,leaderLogs_entries_match_init.", "qsimpl time: 1 use: refined_raft_net_invariant,refined_raft_net_invariant_request_vote_reply'_weak,leaderLogs_entries_match_init.", "qsimpl time: 1 use: refined_raft_net_invariant,refined_raft_net_invariant_request_vote_reply'_weak,leaderLogs_entries_match_init.", "split.", "--", "intros.", "qsimpl time: 1 use: refined_raft_net_invariant,refined_raft_net_invariant_request_vote_reply'_weak,leaderLogs_entries_match_init.", "qsimpl time: 1 use: log,snd,In,refined_raft_net_invariant_request_vote_reply'_weak,leaderLogs_entries_match_init,nwState,refined_raft_net_invariant."], "tactic": "assert (H10: In e2 (log (snd (nwState net h)))) by (apply H3; auto).", "exn": "H10 is already used.", "type": "used_var", "handled": true}, {"ctx": ["qsimpl time: 1 use: refined_raft_net_invariant.", "qsimpl time: 1 use: refined_raft_net_invariant,leaderLogs_entries_match_init.", "qsimpl time: 1 use: refined_raft_net_invariant,refined_raft_net_invariant_request_vote_reply'_weak,leaderLogs_entries_match_init.", "qsimpl time: 1 use: refined_raft_net_invariant,refined_raft_net_invariant_request_vote_reply'_weak,leaderLogs_entries_match_init.", "split.", "--", "intros.", "qsimpl time: 1 use: refined_raft_net_invariant,refined_raft_net_invariant_request_vote_reply'_weak,leaderLogs_entries_match_init.", "qsimpl time: 1 use: log,snd,In,refined_raft_net_invariant_request_vote_reply'_weak,leaderLogs_entries_match_init,nwState,refined_raft_net_invariant."], "tactic": "assert (H10': In e2 (log (snd (nwState net h)))) by (apply H3; auto).", "exn": "In environment orig_base_params : BaseParams raft_params : RaftParams orig_base_params one_node_params : OneNodeParams orig_base_params H19 : refined_raft_net_invariant_init leaderLogs_entries_match H18 : forall net : network -> Prop, refined_raft_net_invariant_request_vote_reply net -> refined_raft_net_invariant_request_vote_reply' net H : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net net, net' : network H0 : leaderLogs_entries_match_nw net H1 : forall p : packet, In p (nwPackets net') -> is_append_entries (pBody p) -> In p (nwPackets net) H2 : forall h : name, leaderLogs (fst (nwState net' h)) = leaderLogs (fst (nwState net h)) leaderLogs_contiguous_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaderLogs_contiguous net leaderLogs_sublog_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaderLogs_sublog net handleAppendEntries_logs_sorted : forall (net : network) (p : packet) (t : term) (n : name) (pli : logIndex) (plt : term) (es : list entry) (ci : logIndex) (st' : raft_data) (m : msg), raft_intermediate_reachable net -> logs_sorted net -> handleAppendEntries (pDst p) (nwState net (pDst p)) t n pli plt es ci = (st', m) -> pBody p = AppendEntries t n pli plt es ci -> In p (nwPackets net) -> sorted (log st') handleClientRequest_logs_sorted : forall (h : name) (client : clientId) (id : nat) (c : input) (out : list raft_output) (st : raft_data) (l : list (name * msg)) (net : network), handleClientRequest h (nwState net h) client id c = (out, st, l) -> raft_intermediate_reachable net -> logs_sorted_host net -> sorted (log st) logs_sorted_invariant : forall net : network, raft_intermediate_reachable net -> logs_sorted net leaderLogs_sorted_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaderLogs_sorted net leaderLogs_term_sanity_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaderLogs_term_sanity net leaderLogs_currentTerm_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaderLogs_currentTerm_sanity net leaderLogs_currentTerm_sanity_candidate_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaderLogs_currentTerm_sanity_candidate net log_matching_invariant : forall net : network, raft_intermediate_reachable net -> log_matching net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (deghost net) H3 : forall net : network, refined_raft_intermediate_reachable net -> terms_and_indices_from_one_ll net H4 : forall net : network, refined_raft_intermediate_reachable net -> terms_and_indices_from_one_vwl net h : name llt : term ll : list entry p : packet t : term src : name pli : logIndex plt : term es : list entry ci : logIndex H7 : In (llt, ll) (leaderLogs (fst (nwState net' h))) H8 : In p (nwPackets net') H9 : pBody p = AppendEntries t src pli plt es ci e1, e2 : entry H11 : eIndex e1 = eIndex e2 H12 : eTerm e1 = eTerm e2 H13 : In e1 es H14 : In e2 ll e3 : entry H15 : eIndex e3 <= eIndex e1 H16 : In e3 es H10 : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net P : forall A : Type, A -> list A -> Prop X0 : ?A * ?B -> ?B X : RaftState.raft_data term name entry logIndex serverType data clientId output -> list entry X1 : electionsData * raft_data Unable to unify \"forall (h : Net.name) (t : term) (ll : list entry), In (t, ll) (leaderLogs (fst (nwState ?M68974 h))) -> terms_and_indices_from_one ll\" with \"(fix In (a : entry) (l : list entry) {struct l} : Prop := match l with | [] => False | b :: m => b = a \\\\/ In a m end) e2 (log (snd (nwState net h)))\".", "type": "cannot_unify", "handled": true}, {"ctx": ["qsimpl time: 1 use: refined_raft_net_invariant.", "qsimpl time: 1 use: refined_raft_net_invariant,leaderLogs_entries_match_init.", "qsimpl time: 1 use: refined_raft_net_invariant,refined_raft_net_invariant_request_vote_reply'_weak,leaderLogs_entries_match_init.", "qsimpl time: 1 use: refined_raft_net_invariant,refined_raft_net_invariant_request_vote_reply'_weak,leaderLogs_entries_match_init.", "split.", "--", "intros.", "qsimpl time: 1 use: refined_raft_net_invariant,refined_raft_net_invariant_request_vote_reply'_weak,leaderLogs_entries_match_init.", "qsimpl time: 1 use: log,snd,In,refined_raft_net_invariant_request_vote_reply'_weak,leaderLogs_entries_match_init,nwState,refined_raft_net_invariant.", "qsimpl time: 1 use: log,snd,In,refined_raft_net_invariant_request_vote_reply'_weak,leaderLogs_entries_match_init,nwState,refined_raft_net_invariant."], "tactic": "split; intros.", "exn": "Not an inductive product.", "type": "not_inductive_product", "handled": true}, {"ctx": ["qsimpl time: 1 use: refined_raft_net_invariant.", "qsimpl time: 1 use: refined_raft_net_invariant,leaderLogs_entries_match_init.", "qsimpl time: 1 use: refined_raft_net_invariant,refined_raft_net_invariant_request_vote_reply'_weak,leaderLogs_entries_match_init.", "qsimpl time: 1 use: refined_raft_net_invariant,refined_raft_net_invariant_request_vote_reply'_weak,leaderLogs_entries_match_init.", "split.", "--", "intros.", "qsimpl time: 1 use: refined_raft_net_invariant,refined_raft_net_invariant_request_vote_reply'_weak,leaderLogs_entries_match_init.", "qsimpl time: 1 use: log,snd,In,refined_raft_net_invariant_request_vote_reply'_weak,leaderLogs_entries_match_init,nwState,refined_raft_net_invariant.", "qsimpl time: 1 use: log,snd,In,refined_raft_net_invariant_request_vote_reply'_weak,leaderLogs_entries_match_init,nwState,refined_raft_net_invariant.", "qsimpl time: 1 use: log,snd,In,refined_raft_net_invariant_request_vote_reply'_weak,leaderLogs_entries_match_init,nwState,refined_raft_net_invariant.", "++"], "tactic": "apply H6; auto.", "exn": "The reference H6 was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["qsimpl time: 1 use: refined_raft_net_invariant.", "qsimpl time: 1 use: refined_raft_net_invariant,leaderLogs_entries_match_init.", "qsimpl time: 1 use: refined_raft_net_invariant,refined_raft_net_invariant_request_vote_reply'_weak,leaderLogs_entries_match_init.", "qsimpl time: 1 use: refined_raft_net_invariant,refined_raft_net_invariant_request_vote_reply'_weak,leaderLogs_entries_match_init.", "split.", "--", "intros.", "qsimpl time: 1 use: refined_raft_net_invariant,refined_raft_net_invariant_request_vote_reply'_weak,leaderLogs_entries_match_init.", "qsimpl time: 1 use: log,snd,In,refined_raft_net_invariant_request_vote_reply'_weak,leaderLogs_entries_match_init,nwState,refined_raft_net_invariant.", "qsimpl time: 1 use: log,snd,In,refined_raft_net_invariant_request_vote_reply'_weak,leaderLogs_entries_match_init,nwState,refined_raft_net_invariant.", "qsimpl time: 1 use: log,snd,In,refined_raft_net_invariant_request_vote_reply'_weak,leaderLogs_entries_match_init,nwState,refined_raft_net_invariant.", "++"], "tactic": "++", "exn": "Wrong bullet ++: Current bullet ++ is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["qsimpl time: 1 use: refined_raft_net_invariant.", "qsimpl time: 1 use: refined_raft_net_invariant,leaderLogs_entries_match_init.", "qsimpl time: 1 use: refined_raft_net_invariant,refined_raft_net_invariant_request_vote_reply'_weak,leaderLogs_entries_match_init.", "qsimpl time: 1 use: refined_raft_net_invariant,refined_raft_net_invariant_request_vote_reply'_weak,leaderLogs_entries_match_init.", "split.", "--", "intros.", "qsimpl time: 1 use: refined_raft_net_invariant,refined_raft_net_invariant_request_vote_reply'_weak,leaderLogs_entries_match_init.", "qsimpl time: 1 use: log,snd,In,refined_raft_net_invariant_request_vote_reply'_weak,leaderLogs_entries_match_init,nwState,refined_raft_net_invariant.", "qsimpl time: 1 use: log,snd,In,refined_raft_net_invariant_request_vote_reply'_weak,leaderLogs_entries_match_init,nwState,refined_raft_net_invariant.", "qsimpl time: 1 use: log,snd,In,refined_raft_net_invariant_request_vote_reply'_weak,leaderLogs_entries_match_init,nwState,refined_raft_net_invariant.", "++", "shelve.", "++"], "tactic": "exists e1; split; auto.", "exn": "Not an inductive product.", "type": "not_inductive_product", "handled": true}, {"ctx": ["qsimpl time: 1 use: refined_raft_net_invariant.", "qsimpl time: 1 use: refined_raft_net_invariant,leaderLogs_entries_match_init.", "qsimpl time: 1 use: refined_raft_net_invariant,refined_raft_net_invariant_request_vote_reply'_weak,leaderLogs_entries_match_init.", "qsimpl time: 1 use: refined_raft_net_invariant,refined_raft_net_invariant_request_vote_reply'_weak,leaderLogs_entries_match_init.", "split.", "--", "intros.", "qsimpl time: 1 use: refined_raft_net_invariant,refined_raft_net_invariant_request_vote_reply'_weak,leaderLogs_entries_match_init.", "qsimpl time: 1 use: log,snd,In,refined_raft_net_invariant_request_vote_reply'_weak,leaderLogs_entries_match_init,nwState,refined_raft_net_invariant.", "qsimpl time: 1 use: log,snd,In,refined_raft_net_invariant_request_vote_reply'_weak,leaderLogs_entries_match_init,nwState,refined_raft_net_invariant.", "qsimpl time: 1 use: log,snd,In,refined_raft_net_invariant_request_vote_reply'_weak,leaderLogs_entries_match_init,nwState,refined_raft_net_invariant.", "++", "shelve.", "++", "qsimpl time: 1 use: log,snd,In,refined_raft_net_invariant_request_vote_reply'_weak,leaderLogs_entries_match_init,nwState,refined_raft_net_invariant."], "tactic": "apply H9.", "exn": "In environment orig_base_params : BaseParams raft_params : RaftParams orig_base_params one_node_params : OneNodeParams orig_base_params H19 : refined_raft_net_invariant_init leaderLogs_entries_match H18 : forall net : network -> Prop, refined_raft_net_invariant_request_vote_reply net -> refined_raft_net_invariant_request_vote_reply' net H : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net net, net' : network H0 : leaderLogs_entries_match_nw net H1 : forall p : packet, In p (nwPackets net') -> is_append_entries (pBody p) -> In p (nwPackets net) H2 : forall h : name, leaderLogs (fst (nwState net' h)) = leaderLogs (fst (nwState net h)) leaderLogs_contiguous_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaderLogs_contiguous net leaderLogs_sublog_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaderLogs_sublog net handleAppendEntries_logs_sorted : forall (net : network) (p : packet) (t : term) (n : name) (pli : logIndex) (plt : term) (es : list entry) (ci : logIndex) (st' : raft_data) (m : msg), raft_intermediate_reachable net -> logs_sorted net -> handleAppendEntries (pDst p) (nwState net (pDst p)) t n pli plt es ci = (st', m) -> pBody p = AppendEntries t n pli plt es ci -> In p (nwPackets net) -> sorted (log st') handleClientRequest_logs_sorted : forall (h : name) (client : clientId) (id : nat) (c : input) (out : list raft_output) (st : raft_data) (l : list (name * msg)) (net : network), handleClientRequest h (nwState net h) client id c = (out, st, l) -> raft_intermediate_reachable net -> logs_sorted_host net -> sorted (log st) logs_sorted_invariant : forall net : network, raft_intermediate_reachable net -> logs_sorted net leaderLogs_sorted_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaderLogs_sorted net leaderLogs_term_sanity_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaderLogs_term_sanity net leaderLogs_currentTerm_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaderLogs_currentTerm_sanity net leaderLogs_currentTerm_sanity_candidate_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaderLogs_currentTerm_sanity_candidate net log_matching_invariant : forall net : network, raft_intermediate_reachable net -> log_matching net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (deghost net) H3 : forall net : network, refined_raft_intermediate_reachable net -> terms_and_indices_from_one_ll net H4 : forall net : network, refined_raft_intermediate_reachable net -> terms_and_indices_from_one_vwl net h : name llt : term ll : list entry p : packet t : term src : name pli : logIndex plt : term es : list entry ci : logIndex H7 : In (llt, ll) (leaderLogs (fst (nwState net' h))) H8 : In p (nwPackets net') H9 : pBody p = AppendEntries t src pli plt es ci e1, e2 : entry H11 : eIndex e1 = eIndex e2 H12 : eTerm e1 = eTerm e2 H13 : In e1 es H14 : In e2 ll e3 : entry H15 : eIndex e3 <= eIndex e1 H16 : In e3 es P : forall A : Type, A -> list A -> Prop X0 : ?A * ?B -> ?B X : RaftState.raft_data term name entry logIndex serverType data clientId output -> list entry X1 : electionsData * raft_data X4 : forall A : Type, A -> list A -> Prop X3 : ?A1 * ?B0 -> ?B0 X2 : RaftState.raft_data term name entry logIndex serverType data clientId output -> list entry X5 : electionsData * raft_data H10 : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net X8 : forall A : Type, A -> list A -> Prop X7 : ?A2 * ?B1 -> ?B1 X6 : RaftState.raft_data term name entry logIndex serverType data clientId output -> list entry X9 : electionsData * raft_data Unable to unify \"pBody p = AppendEntries t src pli plt es ci\" with \"Type\".", "type": "cannot_unify", "handled": true}, {"ctx": ["qsimpl time: 1 use: refined_raft_net_invariant.", "qsimpl time: 1 use: refined_raft_net_invariant,leaderLogs_entries_match_init.", "qsimpl time: 1 use: refined_raft_net_invariant,refined_raft_net_invariant_request_vote_reply'_weak,leaderLogs_entries_match_init.", "qsimpl time: 1 use: refined_raft_net_invariant,refined_raft_net_invariant_request_vote_reply'_weak,leaderLogs_entries_match_init.", "split.", "--", "intros.", "qsimpl time: 1 use: refined_raft_net_invariant,refined_raft_net_invariant_request_vote_reply'_weak,leaderLogs_entries_match_init.", "qsimpl time: 1 use: log,snd,In,refined_raft_net_invariant_request_vote_reply'_weak,leaderLogs_entries_match_init,nwState,refined_raft_net_invariant.", "qsimpl time: 1 use: log,snd,In,refined_raft_net_invariant_request_vote_reply'_weak,leaderLogs_entries_match_init,nwState,refined_raft_net_invariant.", "qsimpl time: 1 use: log,snd,In,refined_raft_net_invariant_request_vote_reply'_weak,leaderLogs_entries_match_init,nwState,refined_raft_net_invariant.", "++", "shelve.", "++", "qsimpl time: 1 use: log,snd,In,refined_raft_net_invariant_request_vote_reply'_weak,leaderLogs_entries_match_init,nwState,refined_raft_net_invariant.", "qsimpl time: 1 use: log,snd,In,refined_raft_net_invariant_request_vote_reply'_weak,leaderLogs_entries_match_init,nwState,refined_raft_net_invariant."], "tactic": "--", "exn": "Wrong bullet --: Current bullet ++ is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["qsimpl time: 1 use: refined_raft_net_invariant.", "qsimpl time: 1 use: refined_raft_net_invariant,leaderLogs_entries_match_init.", "qsimpl time: 1 use: refined_raft_net_invariant,refined_raft_net_invariant_request_vote_reply'_weak,leaderLogs_entries_match_init.", "qsimpl time: 1 use: refined_raft_net_invariant,refined_raft_net_invariant_request_vote_reply'_weak,leaderLogs_entries_match_init.", "split.", "--", "intros.", "qsimpl time: 1 use: refined_raft_net_invariant,refined_raft_net_invariant_request_vote_reply'_weak,leaderLogs_entries_match_init.", "qsimpl time: 1 use: log,snd,In,refined_raft_net_invariant_request_vote_reply'_weak,leaderLogs_entries_match_init,nwState,refined_raft_net_invariant.", "qsimpl time: 1 use: log,snd,In,refined_raft_net_invariant_request_vote_reply'_weak,leaderLogs_entries_match_init,nwState,refined_raft_net_invariant.", "qsimpl time: 1 use: log,snd,In,refined_raft_net_invariant_request_vote_reply'_weak,leaderLogs_entries_match_init,nwState,refined_raft_net_invariant.", "++", "shelve.", "++", "qsimpl time: 1 use: log,snd,In,refined_raft_net_invariant_request_vote_reply'_weak,leaderLogs_entries_match_init,nwState,refined_raft_net_invariant.", "qsimpl time: 1 use: log,snd,In,refined_raft_net_invariant_request_vote_reply'_weak,leaderLogs_entries_match_init,nwState,refined_raft_net_invariant.", "**", "shelve.", "**", "shelve.", "**", "shelve.", "**", "shelve.", "**", "shelve."], "tactic": "--", "exn": "Wrong bullet --: Expecting ++.", "type": "wrong_bullet", "handled": true}, {"ctx": ["qsimpl time: 1 use: refined_raft_net_invariant.", "qsimpl time: 1 use: refined_raft_net_invariant,leaderLogs_entries_match_init.", "qsimpl time: 1 use: refined_raft_net_invariant,refined_raft_net_invariant_request_vote_reply'_weak,leaderLogs_entries_match_init.", "qsimpl time: 1 use: refined_raft_net_invariant,refined_raft_net_invariant_request_vote_reply'_weak,leaderLogs_entries_match_init.", "split.", "--", "intros.", "qsimpl time: 1 use: refined_raft_net_invariant,refined_raft_net_invariant_request_vote_reply'_weak,leaderLogs_entries_match_init.", "qsimpl time: 1 use: log,snd,In,refined_raft_net_invariant_request_vote_reply'_weak,leaderLogs_entries_match_init,nwState,refined_raft_net_invariant.", "qsimpl time: 1 use: log,snd,In,refined_raft_net_invariant_request_vote_reply'_weak,leaderLogs_entries_match_init,nwState,refined_raft_net_invariant.", "qsimpl time: 1 use: log,snd,In,refined_raft_net_invariant_request_vote_reply'_weak,leaderLogs_entries_match_init,nwState,refined_raft_net_invariant.", "++", "shelve.", "++", "qsimpl time: 1 use: log,snd,In,refined_raft_net_invariant_request_vote_reply'_weak,leaderLogs_entries_match_init,nwState,refined_raft_net_invariant.", "qsimpl time: 1 use: log,snd,In,refined_raft_net_invariant_request_vote_reply'_weak,leaderLogs_entries_match_init,nwState,refined_raft_net_invariant.", "**", "shelve.", "**", "shelve.", "**", "shelve.", "**", "shelve.", "**", "shelve.", "++", "unfold leaderLogs_entries_match_nw in *."], "tactic": "specialize (H3 _ _ _ _ _ H5 H7).", "exn": "The reference H5 was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["qsimpl time: 1 use: refined_raft_net_invariant.", "qsimpl time: 1 use: refined_raft_net_invariant,leaderLogs_entries_match_init.", "qsimpl time: 1 use: refined_raft_net_invariant,refined_raft_net_invariant_request_vote_reply'_weak,leaderLogs_entries_match_init.", "qsimpl time: 1 use: refined_raft_net_invariant,refined_raft_net_invariant_request_vote_reply'_weak,leaderLogs_entries_match_init.", "split.", "--", "intros.", "qsimpl time: 1 use: refined_raft_net_invariant,refined_raft_net_invariant_request_vote_reply'_weak,leaderLogs_entries_match_init.", "qsimpl time: 1 use: log,snd,In,refined_raft_net_invariant_request_vote_reply'_weak,leaderLogs_entries_match_init,nwState,refined_raft_net_invariant.", "qsimpl time: 1 use: log,snd,In,refined_raft_net_invariant_request_vote_reply'_weak,leaderLogs_entries_match_init,nwState,refined_raft_net_invariant.", "qsimpl time: 1 use: log,snd,In,refined_raft_net_invariant_request_vote_reply'_weak,leaderLogs_entries_match_init,nwState,refined_raft_net_invariant.", "++", "shelve.", "++", "qsimpl time: 1 use: log,snd,In,refined_raft_net_invariant_request_vote_reply'_weak,leaderLogs_entries_match_init,nwState,refined_raft_net_invariant.", "qsimpl time: 1 use: log,snd,In,refined_raft_net_invariant_request_vote_reply'_weak,leaderLogs_entries_match_init,nwState,refined_raft_net_invariant.", "**", "shelve.", "**", "shelve.", "**", "shelve.", "**", "shelve.", "**", "shelve.", "++", "unfold leaderLogs_entries_match_nw in *."], "tactic": "eapply H3; eauto.", "exn": "In environment orig_base_params : BaseParams raft_params : RaftParams orig_base_params one_node_params : OneNodeParams orig_base_params H19 : refined_raft_net_invariant_init leaderLogs_entries_match H18 : forall net : network -> Prop, refined_raft_net_invariant_request_vote_reply net -> refined_raft_net_invariant_request_vote_reply' net H : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net net, net' : network H0 : forall (h : Net.name) (llt : term) (ll : list entry) (p : packet) (t : term) (src : name) (pli : logIndex) (plt : term) (es : list entry) (ci : logIndex), In (llt, ll) (leaderLogs (fst (nwState net h))) -> In p (nwPackets net) -> pBody p = AppendEntries t src pli plt es ci -> forall e1 e2 : entry, eIndex e1 = eIndex e2 -> eTerm e1 = eTerm e2 -> In e1 es -> In e2 ll -> (forall e3 : entry, eIndex e3 <= eIndex e1 -> In e3 es -> In e3 ll) /\\\\ (pli <> 0 -> exists e4 : entry, eIndex e4 = pli /\\\\ eTerm e4 = plt /\\\\ In e4 ll) H1 : forall p : packet, In p (nwPackets net') -> is_append_entries (pBody p) -> In p (nwPackets net) H2 : forall h : name, leaderLogs (fst (nwState net' h)) = leaderLogs (fst (nwState net h)) leaderLogs_contiguous_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaderLogs_contiguous net leaderLogs_sublog_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaderLogs_sublog net handleAppendEntries_logs_sorted : forall (net : network) (p : packet) (t : term) (n : name) (pli : logIndex) (plt : term) (es : list entry) (ci : logIndex) (st' : raft_data) (m : msg), raft_intermediate_reachable net -> logs_sorted net -> handleAppendEntries (pDst p) (nwState net (pDst p)) t n pli plt es ci = (st', m) -> pBody p = AppendEntries t n pli plt es ci -> In p (nwPackets net) -> sorted (log st') handleClientRequest_logs_sorted : forall (h : name) (client : clientId) (id : nat) (c : input) (out : list raft_output) (st : raft_data) (l : list (name * msg)) (net : network), handleClientRequest h (nwState net h) client id c = (out, st, l) -> raft_intermediate_reachable net -> logs_sorted_host net -> sorted (log st) logs_sorted_invariant : forall net : network, raft_intermediate_reachable net -> logs_sorted net leaderLogs_sorted_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaderLogs_sorted net leaderLogs_term_sanity_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaderLogs_term_sanity net leaderLogs_currentTerm_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaderLogs_currentTerm_sanity net leaderLogs_currentTerm_sanity_candidate_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaderLogs_currentTerm_sanity_candidate net log_matching_invariant : forall net : network, raft_intermediate_reachable net -> log_matching net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (deghost net) H3 : forall net : network, refined_raft_intermediate_reachable net -> terms_and_indices_from_one_ll net H4 : forall net : network, refined_raft_intermediate_reachable net -> terms_and_indices_from_one_vwl net h : name llt : term ll : list entry p : packet t : term src : name pli : logIndex plt : term es : list entry ci : logIndex H7 : In (llt, ll) (leaderLogs (fst (nwState net' h))) H8 : In p (nwPackets net') H9 : pBody p = AppendEntries t src pli plt es ci e1, e2 : entry H11 : eIndex e1 = eIndex e2 H12 : eTerm e1 = eTerm e2 H13 : In e1 es H14 : In e2 ll e3 : entry H15 : eIndex e3 <= eIndex e1 H16 : In e3 es P : forall A : Type, A -> list A -> Prop X0 : ?A * ?B -> ?B X : RaftState.raft_data term name entry logIndex serverType data clientId output -> list entry X1 : electionsData * raft_data X4 : forall A : Type, A -> list A -> Prop X3 : ?A0 * ?B0 -> ?B0 X2 : RaftState.raft_data term name entry logIndex serverType data clientId output -> list entry X5 : electionsData * raft_data Unable to unify \"forall (h : Net.name) (t : term) (ll : list entry), In (t, ll) (leaderLogs (fst (nwState ?M100474 h))) -> terms_and_indices_from_one ll\" with \"Type\".", "type": "cannot_unify", "handled": true}]}, "chat": [], "original": "apply refined_raft_net_invariant. - apply leaderLogs_entries_match_init. - intros. eapply refined_raft_net_invariant_request_vote_reply'_weak. intros. destruct H1. split. -- unfold leaderLogs_entries_match_host in *. intros. specialize (H3 _ _ _ _ H4). unfold entries_match in *. intros. assert (H9: In e1 (log (snd (nwState net h)))) by (apply H3; auto). assert (H10: In e2 (log (snd (nwState net h)))) by (apply H3; auto). split; intros. ++ apply H6; auto. ++ exists e1; split; auto. apply H9. -- unfold leaderLogs_entries_match_nw in *. intros. specialize (H3 _ _ _ _ _ H5 H7). eapply H3; eauto.", "back_times": 0, "succ": false, "time": 170.4072768688202}]