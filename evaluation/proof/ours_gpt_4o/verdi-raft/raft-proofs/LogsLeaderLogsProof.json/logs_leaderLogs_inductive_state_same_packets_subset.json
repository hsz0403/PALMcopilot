[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": [], "tactic": "intros st h os st' ms m t n pli plt es ci H H0 H1.", "exn": "No product even after head-reduction.", "type": "no_product", "handled": true}, {"ctx": [], "tactic": "assert (H2: t = currentTerm st /\\ log st' = log st /\\ type st = Leader /\\ (plt = 0 \\/ (exists e : entry, findAtIndex (log st) pli = Some e /\\ eTerm e = plt))) by (eapply doLeader_messages; eauto).", "exn": "The reference t was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": [], "tactic": "destruct H2 as [Ht [Hl [Ht' [Hplt | [He]]]]].", "exn": "The reference H2 was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["destruct Build_leaderLogs_contiguous_interface as [Ht [Hl [Ht' [Hplt | [He]]]]].", "-", "split."], "tactic": "-", "exn": "Wrong bullet -: Current bullet - is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["destruct Build_leaderLogs_contiguous_interface as [Ht [Hl [Ht' [Hplt | [He]]]]].", "-", "split.", "+", "shelve.", "+", "shelve.", "-"], "tactic": "destruct He as [e [Hfi Heterm]].", "exn": "The reference He was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["destruct Build_leaderLogs_contiguous_interface as [Ht [Hl [Ht' [Hplt | [He]]]]].", "-", "split.", "+", "shelve.", "+", "shelve.", "-", "destruct Build_leaderLogs_contiguous_interface as [e [Hfi Build_leaderLogs_contiguous_interfaceterm]].", "split.", "+"], "tactic": "+", "exn": "Wrong bullet +: Current bullet + is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["destruct Build_leaderLogs_contiguous_interface as [Ht [Hl [Ht' [Hplt | [He]]]]].", "-", "split.", "+", "shelve.", "+", "shelve.", "-", "destruct Build_leaderLogs_contiguous_interface as [e [Hfi Build_leaderLogs_contiguous_interfaceterm]].", "split.", "+", "shelve.", "+"], "tactic": "right.", "exn": "In environment orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params rri : raft_refinement_interface llsi : leaderLogs_sorted_interface rlmli : refined_log_matching_lemmas_interface llci : leaderLogs_contiguous_interface lllmi : leaderLogs_entries_match_interface lhllsi : leaders_have_leaderLogs_strong_interface nisi : nextIndex_safety_interface si : sorted_interface lpholli : log_properties_hold_on_leader_logs_interface Ht : forall net : network, refined_raft_intermediate_reachable net -> LeaderLogsContiguousInterface.leaderLogs_contiguous net net : network H : refined_raft_intermediate_reachable net h : Net.name t : term ll : list entry H0 : In (t, ll) (leaderLogs (fst (nwState net h))) e : entry H1 : In e ll Unable to unify \"?M2183 <= S ?M2184\" with \"1 <= eIndex e\".", "type": "cannot_unify", "handled": true}, {"ctx": ["destruct Build_leaderLogs_contiguous_interface as [Ht [Hl [Ht' [Hplt | [He]]]]].", "-", "split.", "+", "shelve.", "+", "shelve.", "-", "destruct Build_leaderLogs_contiguous_interface as [e [Hfi Build_leaderLogs_contiguous_interfaceterm]].", "split.", "+", "shelve.", "+", "qsimpl time: 1."], "tactic": "split.", "exn": "Not an inductive goal with 1 constructor.", "type": "not_inductive_goal", "handled": true}, {"ctx": ["destruct Build_leaderLogs_contiguous_interface as [Ht [Hl [Ht' [Hplt | [He]]]]].", "-", "split.", "+", "shelve.", "+", "shelve.", "-", "destruct Build_leaderLogs_contiguous_interface as [e [Hfi Build_leaderLogs_contiguous_interfaceterm]].", "split.", "+", "shelve.", "+", "qsimpl time: 1."], "tactic": "exists e.", "exn": "Not an inductive goal with 1 constructor.", "type": "not_inductive_goal", "handled": true}, {"ctx": ["destruct Build_leaderLogs_contiguous_interface as [Ht [Hl [Ht' [Hplt | [He]]]]].", "-", "split.", "+", "shelve.", "+", "shelve.", "-", "destruct Build_leaderLogs_contiguous_interface as [e [Hfi Build_leaderLogs_contiguous_interfaceterm]].", "split.", "+", "shelve.", "+", "qsimpl time: 1."], "tactic": "split; auto.", "exn": "Not an inductive goal with 1 constructor.", "type": "not_inductive_goal", "handled": true}, {"ctx": ["destruct Build_leaderLogs_contiguous_interface as [Ht [Hl [Ht' [Hplt | [He]]]]].", "-", "split.", "+", "shelve.", "+", "shelve.", "-", "destruct Build_leaderLogs_contiguous_interface as [e [Hfi Build_leaderLogs_contiguous_interfaceterm]].", "split.", "+", "shelve.", "+", "qsimpl time: 1."], "tactic": "eapply doLeader_message_entries; eauto.", "exn": "In environment orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params Ht : forall net : network, refined_raft_intermediate_reachable net -> LeaderLogsContiguousInterface.leaderLogs_contiguous net net : network H : refined_raft_intermediate_reachable net h : name t : term ll : list entry H0 : In (t, ll) (leaderLogs (fst (nwState net h))) e : entry H1 : In e ll log_properties_hold_on_leader_logs_invariant : forall net : network, refined_raft_intermediate_reachable net -> log_properties_hold_on_leader_logs net handleAppendEntries_logs_sorted : forall (net : network) (p : packet) (t : term) (n : name) (pli : logIndex) (plt : term) (es : list entry) (ci : logIndex) (st' : raft_data) (m : msg), raft_intermediate_reachable net -> logs_sorted net -> handleAppendEntries (pDst p) (nwState net (pDst p)) t n pli plt es ci = (st', m) -> pBody p = AppendEntries t n pli plt es ci -> In p (nwPackets net) -> sorted (log st') handleClientRequest_logs_sorted : forall (h : name) (client : clientId) (id : nat) (c : input) (out : list raft_output) (st : raft_data) (l : list (name * msg)) (net : network), handleClientRequest h (nwState net h) client id c = (out, st, l) -> raft_intermediate_reachable net -> logs_sorted_host net -> sorted (log st) logs_sorted_invariant : forall net : network, raft_intermediate_reachable net -> logs_sorted net nextIndex_safety_invariant : forall net : network, raft_intermediate_reachable net -> nextIndex_safety net leaders_have_leaderLogs_strong_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaders_have_leaderLogs_strong net leaderLogs_entries_match_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaderLogs_entries_match_host net entries_contiguous_nw_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_contiguous_nw net entries_gt_0_nw_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_gt_0_nw net entries_sorted_nw_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_sorted_nw net entries_gt_0_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_gt_0 net entries_contiguous_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_contiguous net entries_sorted_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_sorted net entries_match_invariant : forall (net : network) (h h' : name), refined_raft_intermediate_reachable net -> entries_match (log (snd (nwState net h))) (log (snd (nwState net h'))) entries_match_nw_1_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_match_nw_1 net entries_match_nw_host_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_match_nw_host net allEntries_gt_0_invariant : forall (net : network) (h : name) (e : entry), refined_raft_intermediate_reachable net -> In e (map snd (allEntries (fst (nwState net h)))) -> eIndex e > 0 leaderLogs_sorted_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaderLogs_sorted net refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (deghost net) Unable to unify \"(fix In (a : entry) (l : list entry) {struct l} : Prop := match l with | [] => False | b :: m => b = a \\\\/ In a m end) ?M5557 (log ?M5545)\" with \"1 <= eIndex e\".", "type": "cannot_unify", "handled": true}, {"ctx": ["destruct Build_leaderLogs_contiguous_interface as [Ht [Hl [Ht' [Hplt | [He]]]]].", "-", "split.", "+", "shelve.", "+", "shelve.", "-", "destruct Build_leaderLogs_contiguous_interface as [e [Hfi Build_leaderLogs_contiguous_interfaceterm]].", "split.", "+", "shelve.", "+", "qsimpl time: 1.", "qsimpl time: 1 use: doLeader_message_entries."], "tactic": "eapply neq_nil; eauto.", "exn": "The reference neq_nil was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["destruct Build_leaderLogs_contiguous_interface as [Ht [Hl [Ht' [Hplt | [He]]]]].", "-", "split.", "+", "shelve.", "+", "shelve.", "-", "destruct Build_leaderLogs_contiguous_interface as [e [Hfi Build_leaderLogs_contiguous_interfaceterm]].", "split.", "+", "shelve.", "+", "qsimpl time: 1.", "qsimpl time: 1 use: doLeader_message_entries.", "eapply refined_raft_net_invariant; eauto."], "tactic": "-", "exn": "Wrong bullet -: Current bullet + is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["destruct Build_leaderLogs_contiguous_interface as [Ht [Hl [Ht' [Hplt | [He]]]]].", "-", "split.", "+", "shelve.", "+", "shelve.", "-", "destruct Build_leaderLogs_contiguous_interface as [e [Hfi Build_leaderLogs_contiguous_interfaceterm]].", "split.", "+", "shelve.", "+", "qsimpl time: 1.", "qsimpl time: 1 use: doLeader_message_entries.", "eapply refined_raft_net_invariant; eauto.", "*", "shelve.", "*", "shelve.", "*", "shelve.", "*", "shelve.", "*", "shelve.", "*", "shelve.", "*", "shelve.", "*", "shelve.", "*", "shelve.", "*", "shelve.", "*", "shelve."], "tactic": "-", "exn": "Wrong bullet -: Expecting +.", "type": "wrong_bullet", "handled": true}, {"ctx": ["destruct Build_leaderLogs_contiguous_interface as [Ht [Hl [Ht' [Hplt | [He]]]]].", "-", "split.", "+", "shelve.", "+", "shelve.", "-", "destruct Build_leaderLogs_contiguous_interface as [e [Hfi Build_leaderLogs_contiguous_interfaceterm]].", "split.", "+", "shelve.", "+", "qsimpl time: 1.", "qsimpl time: 1 use: doLeader_message_entries.", "eapply refined_raft_net_invariant; eauto.", "*", "shelve.", "*", "shelve.", "*", "shelve.", "*", "shelve.", "*", "shelve.", "*", "shelve.", "*", "shelve.", "*", "shelve.", "*", "shelve.", "*", "shelve.", "*", "shelve.", "+"], "tactic": "right.", "exn": "Not an inductive goal with 2 constructors.", "type": "not_inductive_goal", "handled": true}, {"ctx": ["destruct Build_leaderLogs_contiguous_interface as [Ht [Hl [Ht' [Hplt | [He]]]]].", "-", "split.", "+", "shelve.", "+", "shelve.", "-", "destruct Build_leaderLogs_contiguous_interface as [e [Hfi Build_leaderLogs_contiguous_interfaceterm]].", "split.", "+", "shelve.", "+", "qsimpl time: 1.", "qsimpl time: 1 use: doLeader_message_entries.", "eapply refined_raft_net_invariant; eauto.", "*", "shelve.", "*", "shelve.", "*", "shelve.", "*", "shelve.", "*", "shelve.", "*", "shelve.", "*", "shelve.", "*", "shelve.", "*", "shelve.", "*", "shelve.", "*", "shelve.", "+", "qsimpl time: 1 use: doLeader_message_entries."], "tactic": "destruct Hplt as [Hpli [Hplt [es' [Hli Hes]]]].", "exn": "The reference Hplt was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["destruct Build_leaderLogs_contiguous_interface as [Ht [Hl [Ht' [Hplt | [He]]]]].", "-", "split.", "+", "shelve.", "+", "shelve.", "-", "destruct Build_leaderLogs_contiguous_interface as [e [Hfi Build_leaderLogs_contiguous_interfaceterm]].", "split.", "+", "shelve.", "+", "qsimpl time: 1.", "qsimpl time: 1 use: doLeader_message_entries.", "eapply refined_raft_net_invariant; eauto.", "*", "shelve.", "*", "shelve.", "*", "shelve.", "*", "shelve.", "*", "shelve.", "*", "shelve.", "*", "shelve.", "*", "shelve.", "*", "shelve.", "*", "shelve.", "*", "shelve.", "+", "qsimpl time: 1 use: doLeader_message_entries.", "destruct Build_leaderLogs_contiguous_interface as [Hpli [Build_leaderLogs_contiguous_interface [es' [Hli Hes]]]]."], "tactic": "assert (Hin : In (maxterm_entry (findGtIndex (log st) pli)) (findGtIndex (log st) pli)) by (eapply findGtIndex_spec; eauto).", "exn": "The reference pli was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["destruct Build_leaderLogs_contiguous_interface as [Ht [Hl [Ht' [Hplt | [He]]]]].", "-", "split.", "+", "shelve.", "+", "shelve.", "-", "destruct Build_leaderLogs_contiguous_interface as [e [Hfi Build_leaderLogs_contiguous_interfaceterm]].", "split.", "+", "shelve.", "+", "qsimpl time: 1.", "qsimpl time: 1 use: doLeader_message_entries.", "eapply refined_raft_net_invariant; eauto.", "*", "shelve.", "*", "shelve.", "*", "shelve.", "*", "shelve.", "*", "shelve.", "*", "shelve.", "*", "shelve.", "*", "shelve.", "*", "shelve.", "*", "shelve.", "*", "shelve.", "+", "qsimpl time: 1 use: doLeader_message_entries.", "destruct Build_leaderLogs_contiguous_interface as [Hpli [Build_leaderLogs_contiguous_interface [es' [Hli Hes]]]]."], "tactic": "assert (Hnew := haveNewEntries_true st (findGtIndex (log st) pli) Hes Hin).", "exn": "The reference Hin was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["destruct Build_leaderLogs_contiguous_interface as [Ht [Hl [Ht' [Hplt | [He]]]]].", "-", "split.", "+", "shelve.", "+", "shelve.", "-", "destruct Build_leaderLogs_contiguous_interface as [e [Hfi Build_leaderLogs_contiguous_interfaceterm]].", "split.", "+", "shelve.", "+", "qsimpl time: 1.", "qsimpl time: 1 use: doLeader_message_entries.", "eapply refined_raft_net_invariant; eauto.", "*", "shelve.", "*", "shelve.", "*", "shelve.", "*", "shelve.", "*", "shelve.", "*", "shelve.", "*", "shelve.", "*", "shelve.", "*", "shelve.", "*", "shelve.", "*", "shelve.", "+", "qsimpl time: 1 use: doLeader_message_entries.", "destruct Build_leaderLogs_contiguous_interface as [Hpli [Build_leaderLogs_contiguous_interface [es' [Hli Hes]]]]."], "tactic": "destruct Hnew as [He [Hfa | Hne]].", "exn": "The reference Hnew was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["destruct Build_leaderLogs_contiguous_interface as [Ht [Hl [Ht' [Hplt | [He]]]]].", "-", "split.", "+", "shelve.", "+", "shelve.", "-", "destruct Build_leaderLogs_contiguous_interface as [e [Hfi Build_leaderLogs_contiguous_interfaceterm]].", "split.", "+", "shelve.", "+", "qsimpl time: 1.", "qsimpl time: 1 use: doLeader_message_entries.", "eapply refined_raft_net_invariant; eauto.", "*", "shelve.", "*", "shelve.", "*", "shelve.", "*", "shelve.", "*", "shelve.", "*", "shelve.", "*", "shelve.", "*", "shelve.", "*", "shelve.", "*", "shelve.", "*", "shelve.", "+", "qsimpl time: 1 use: doLeader_message_entries.", "destruct Build_leaderLogs_contiguous_interface as [Hpli [Build_leaderLogs_contiguous_interface [es' [Hli Hes]]]].", "destruct Build_leaderLogs_contiguous_interface as [He [Hfa | Hne]]."], "tactic": "+", "exn": "Wrong bullet +: Current bullet + is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["destruct Build_leaderLogs_contiguous_interface as [Ht [Hl [Ht' [Hplt | [He]]]]].", "-", "split.", "+", "shelve.", "+", "shelve.", "-", "destruct Build_leaderLogs_contiguous_interface as [e [Hfi Build_leaderLogs_contiguous_interfaceterm]].", "split.", "+", "shelve.", "+", "qsimpl time: 1.", "qsimpl time: 1 use: doLeader_message_entries.", "eapply refined_raft_net_invariant; eauto.", "*", "shelve.", "*", "shelve.", "*", "shelve.", "*", "shelve.", "*", "shelve.", "*", "shelve.", "*", "shelve.", "*", "shelve.", "*", "shelve.", "*", "shelve.", "*", "shelve.", "+", "qsimpl time: 1 use: doLeader_message_entries.", "destruct Build_leaderLogs_contiguous_interface as [Hpli [Build_leaderLogs_contiguous_interface [es' [Hli Hes]]]].", "destruct Build_leaderLogs_contiguous_interface as [He [Hfa | Hne]].", "*", "shelve.", "*", "shelve.", "*", "shelve."], "tactic": "+", "exn": "Wrong bullet +: No more subgoals.", "type": "no_more_subgoals", "handled": true}]}, "chat": [], "original": "intros st h os st' ms m t n pli plt es ci H H0 H1. assert (H2: t = currentTerm st /\\ log st' = log st /\\ type st = Leader /\\ (plt = 0 \\/ (exists e : entry, findAtIndex (log st) pli = Some e /\\ eTerm e = plt))) by (eapply doLeader_messages; eauto). destruct H2 as [Ht [Hl [Ht' [Hplt | [He]]]]]. - split. auto. repeat split; auto. - destruct He as [e [Hfi Heterm]]. split. auto. repeat split. + auto. + right. split. * exists e. split; auto. * eapply doLeader_message_entries; eauto. eapply neq_nil; eauto. - right. destruct Hplt as [Hpli [Hplt [es' [Hli Hes]]]]. assert (Hin : In (maxterm_entry (findGtIndex (log st) pli)) (findGtIndex (log st) pli)) by (eapply findGtIndex_spec; eauto). assert (Hnew := haveNewEntries_true st (findGtIndex (log st) pli) Hes Hin). destruct Hnew as [He [Hfa | Hne]]. + exfalso; congruence. + destruct Hne as [e0 [Hfae0 He0]]. right. right. exists (eAt e0). split. * intro Hpred. unfold pred in Hfae0. rewrite Hfae0 in Hfi. discriminate. * eapply not_find_le_fast. eapply He0. eapply nex0.", "back_times": 0, "succ": false, "time": 261.5283489227295}]