[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": ["intros net t e t' h l H."], "tactic": "apply in_contradicting_leader_logs_complete with (nodes := nodes) in H.", "exn": "The reference in_contradicting_leader_logs_complete was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros net t e t' h l H."], "tactic": ["destruct H as [H_in H_min].", ""], "exn": "Expects a disjunctive pattern with 2 branches.", "type": "num_branch", "handled": false}]}, "chat": [], "original": "intros net t e t' h l H. unfold minimal_contradicting_leader_log in H. unfold argmin in H. apply in_contradicting_leader_logs_complete with (nodes := nodes) in H. destruct H as [H_in H_min]. apply In_contradicting_logs_on_leader_elim in H_in as [H_in_leader [H_lt H_not_in_e]]. split. - apply H_lt. - split. + apply in_contradicting_leader_logs_on_leader_in_leaderLog with (ll := leaderLogs (fst (nwState net h))) in H_in_leader. auto. + split. * apply H_not_in_e. * intros h' t'' l' H_leaderlogs. destruct (lt_eq_lt_dec t'' t') as [[H_lt' | H_eq'] | H_gt']. -- left. apply H_lt'. -- right. left. subst. constructor. -- right. right. intros H_in_e_l'. eapply minimal_contradicting_leader_log_None with (t := t'') (log := l') (h := h'). ++ apply (contradicting_leader_logs_empty net nodes t e). ** apply contradicting_leader_logs_on_leader_empty. intros t log' H_in_t H_t_gt. exfalso. eapply minimal_contradicting_leader_log_None with (t := t). --- apply H_in_t. --- apply H_t_gt. ** apply H. ++ apply H_leaderlogs. ++ apply H_gt'.", "back_times": 0, "succ": false, "time": 86.8143675327301}]