[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": ["intros l1 l2 e Hsorted Hin Heq."], "tactic": "apply findGtIndex_app_in_2 in Hin as [l' [HgtIndex Hprefix]]; eauto.", "exn": "Unable to apply lemma of type \"forall (l1 l2 : list entry) (e : entry), sorted (l1 ++ l2) -> In e l2 -> exists l' : list entry, findGtIndex (l1 ++ l2) (eIndex e) = l1 ++ l' /\\\\ Prefix l' l2\" on hypothesis of type \"name\".", "type": "cannot_apply_in", "handled": true}, {"ctx": ["intros l1 l2 e Hsorted Hin Heq.", "qsimpl time: 1 use: findGtIndex_app_in_2."], "tactic": "assert (Hmax: eIndex e <= maxIndex l2).", "exn": "In environment orig_base_params : BaseParams raft_params : RaftParams orig_base_params H : forall (l1 l2 : list entry) (e : entry), sorted (l1 ++ l2) -> In e l2 -> exists l' : list entry, findGtIndex (l1 ++ l2) (eIndex e) = l1 ++ l' /\\\\ Prefix l' l2 one_node_params : OneNodeParams orig_base_params l1 : network l2 : refined_raft_intermediate_reachable l1 e : packet Hsorted : term Hin : name Heq : logIndex plt : term es : list entry ci : logIndex H0 : In e (nwPackets l1) H1 : pBody e = AppendEntries Hsorted Hin Heq plt es ci nextIndex_safety_invariant : forall net : network, raft_intermediate_reachable net -> nextIndex_safety net log_matching_invariant : forall net : network, raft_intermediate_reachable net -> log_matching net handleAppendEntries_logs_sorted : forall (net : network) (p : packet) (t : term) (n : name) (pli : logIndex) (plt : term) (es : list entry) (ci : logIndex) (st' : raft_data) (m : msg), raft_intermediate_reachable net -> logs_sorted net -> handleAppendEntries (pDst p) (nwState net (pDst p)) t n pli plt es ci = (st', m) -> pBody p = AppendEntries t n pli plt es ci -> In p (nwPackets net) -> sorted (log st') handleClientRequest_logs_sorted : forall (h : name) (client : clientId) (id : nat) (c : input) (out : list raft_output) (st : raft_data) (l : list (name * msg)) (net : network), handleClientRequest h (nwState net h) client id c = (out, st, l) -> raft_intermediate_reachable net -> logs_sorted_host net -> sorted (log st) logs_sorted_invariant : forall net : network, raft_intermediate_reachable net -> logs_sorted net refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (deghost net) leaders_have_leaderLogs_strong_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaders_have_leaderLogs_strong net The term \"e\" has type \"packet\" while it is expected to have type \"entry\".", "type": "wrong_type", "handled": true}, {"ctx": ["intros l1 l2 e Hsorted Hin Heq.", "qsimpl time: 1 use: findGtIndex_app_in_2.", "qsimpl time: 1 use: findGtIndex_app_in_2,eIndex,maxIndex."], "tactic": "apply maxIndex_is_max; eauto.", "exn": "In environment orig_base_params : BaseParams raft_params : RaftParams orig_base_params l0 : list entry -> logIndex l : entry -> logIndex H2 : forall (l1 l2 : list entry) (e : entry), sorted (l1 ++ l2) -> In e l2 -> exists l' : list entry, findGtIndex (l1 ++ l2) (eIndex e) = l1 ++ l' /\\\\ Prefix l' l2 one_node_params : OneNodeParams orig_base_params l1 : network l2 : refined_raft_intermediate_reachable l1 e : packet Hsorted : term Hin : name Heq : logIndex plt : term es : list entry ci : logIndex H0 : In e (nwPackets l1) H1 : pBody e = AppendEntries Hsorted Hin Heq plt es ci nextIndex_safety_invariant : forall net : network, raft_intermediate_reachable net -> nextIndex_safety net log_matching_invariant : forall net : network, raft_intermediate_reachable net -> log_matching net handleAppendEntries_logs_sorted : forall (net : network) (p : packet) (t : term) (n : name) (pli : logIndex) (plt : term) (es : list entry) (ci : logIndex) (st' : raft_data) (m : msg), raft_intermediate_reachable net -> logs_sorted net -> handleAppendEntries (pDst p) (nwState net (pDst p)) t n pli plt es ci = (st', m) -> pBody p = AppendEntries t n pli plt es ci -> In p (nwPackets net) -> sorted (log st') handleClientRequest_logs_sorted : forall (h : name) (client : clientId) (id : nat) (c : input) (out : list raft_output) (st : raft_data) (l : list (name * msg)) (net : network), handleClientRequest h (nwState net h) client id c = (out, st, l) -> raft_intermediate_reachable net -> logs_sorted_host net -> sorted (log st) logs_sorted_invariant : forall net : network, raft_intermediate_reachable net -> logs_sorted net refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (deghost net) leaders_have_leaderLogs_strong_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaders_have_leaderLogs_strong net Unable to unify \"eIndex ?M8925 <= maxIndex ?M8924\" with \"exists (h : name) (ll es' ll' : list entry), es = es' ++ ll' /\\\\ (forall e : entry, In e es' -> eTerm e = Hsorted) /\\\\ In (Hsorted, ll) (leaderLogs (fst (nwState l1 h))) /\\\\ Prefix ll' ll /\\\\ (plt = Hsorted /\\\\ Heq > l0 ll \\\\/ (exists e : entry, In e ll /\\\\ l e = Heq /\\\\ eTerm e = plt /\\\\ Prefix_sane ll' ll Heq) \\\\/ plt = 0 /\\\\ Heq = 0 /\\\\ ll' = ll)\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros l1 l2 e Hsorted Hin Heq.", "qsimpl time: 1 use: findGtIndex_app_in_2.", "qsimpl time: 1 use: findGtIndex_app_in_2,eIndex,maxIndex.", "qsimpl time: 1 use: maxIndex_is_max,findGtIndex_app_in_2,eIndex,maxIndex."], "tactic": "rewrite Heq in HgtIndex.", "exn": "No such hypothesis: HgtIndex", "type": "no_hypos", "handled": true}, {"ctx": ["intros l1 l2 e Hsorted Hin Heq.", "qsimpl time: 1 use: findGtIndex_app_in_2.", "qsimpl time: 1 use: findGtIndex_app_in_2,eIndex,maxIndex.", "qsimpl time: 1 use: maxIndex_is_max,findGtIndex_app_in_2,eIndex,maxIndex.", "qsimpl time: 1 use: maxIndex_is_max,findGtIndex_app_in_2,eIndex,maxIndex."], "tactic": "rewrite <- app_nil_l in HgtIndex at 1.", "exn": "No such hypothesis: HgtIndex", "type": "no_hypos", "handled": true}, {"ctx": ["intros l1 l2 e Hsorted Hin Heq.", "qsimpl time: 1 use: findGtIndex_app_in_2.", "qsimpl time: 1 use: findGtIndex_app_in_2,eIndex,maxIndex.", "qsimpl time: 1 use: maxIndex_is_max,findGtIndex_app_in_2,eIndex,maxIndex.", "qsimpl time: 1 use: maxIndex_is_max,findGtIndex_app_in_2,eIndex,maxIndex.", "qsimpl time: 1 use: findGtIndex_app_in_2,eIndex,maxIndex_is_max,maxIndex,app_nil_l."], "tactic": "apply Prefix_maxIndex in Hprefix; eauto.", "exn": "No such hypothesis: Hprefix", "type": "no_hypos", "handled": true}, {"ctx": ["intros l1 l2 e Hsorted Hin Heq.", "qsimpl time: 1 use: findGtIndex_app_in_2.", "qsimpl time: 1 use: findGtIndex_app_in_2,eIndex,maxIndex.", "qsimpl time: 1 use: maxIndex_is_max,findGtIndex_app_in_2,eIndex,maxIndex.", "qsimpl time: 1 use: maxIndex_is_max,findGtIndex_app_in_2,eIndex,maxIndex.", "qsimpl time: 1 use: findGtIndex_app_in_2,eIndex,maxIndex_is_max,maxIndex,app_nil_l.", "qsimpl time: 1 use: findGtIndex_app_in_2,eIndex,maxIndex_is_max,maxIndex,Prefix_maxIndex,app_nil_l."], "tactic": "apply app_maxIndex_In_l in Hmax; eauto.", "exn": "No such hypothesis: Hmax", "type": "no_hypos", "handled": true}, {"ctx": ["intros l1 l2 e Hsorted Hin Heq.", "qsimpl time: 1 use: findGtIndex_app_in_2.", "qsimpl time: 1 use: findGtIndex_app_in_2,eIndex,maxIndex.", "qsimpl time: 1 use: maxIndex_is_max,findGtIndex_app_in_2,eIndex,maxIndex.", "qsimpl time: 1 use: maxIndex_is_max,findGtIndex_app_in_2,eIndex,maxIndex.", "qsimpl time: 1 use: findGtIndex_app_in_2,eIndex,maxIndex_is_max,maxIndex,app_nil_l.", "qsimpl time: 1 use: findGtIndex_app_in_2,eIndex,maxIndex_is_max,maxIndex,Prefix_maxIndex,app_nil_l.", "qsimpl time: 1 use: findGtIndex_app_in_2,app_maxIndex_In_l,eIndex,maxIndex_is_max,maxIndex,Prefix_maxIndex,app_nil_l."], "tactic": "all: rewrite app_nil_r; auto.", "exn": "Found no subterm matching \"?M26829 ++ []\" in the current goal.", "type": "no_subterm", "handled": true}, {"ctx": ["intros l1 l2 e Hsorted Hin Heq.", "qsimpl time: 1 use: findGtIndex_app_in_2.", "qsimpl time: 1 use: findGtIndex_app_in_2,eIndex,maxIndex.", "qsimpl time: 1 use: maxIndex_is_max,findGtIndex_app_in_2,eIndex,maxIndex.", "qsimpl time: 1 use: maxIndex_is_max,findGtIndex_app_in_2,eIndex,maxIndex.", "qsimpl time: 1 use: findGtIndex_app_in_2,eIndex,maxIndex_is_max,maxIndex,app_nil_l.", "qsimpl time: 1 use: findGtIndex_app_in_2,eIndex,maxIndex_is_max,maxIndex,Prefix_maxIndex,app_nil_l.", "qsimpl time: 1 use: findGtIndex_app_in_2,app_maxIndex_In_l,eIndex,maxIndex_is_max,maxIndex,Prefix_maxIndex,app_nil_l.", "qsimpl time: 1 use: findGtIndex_app_in_2,app_maxIndex_In_l,eIndex,app_nil_r,maxIndex_is_max,maxIndex,all,Prefix_maxIndex,app_nil_l."], "tactic": "apply eq_iff_eq_true in Hprefix.", "exn": "No such hypothesis: Hprefix", "type": "no_hypos", "handled": true}, {"ctx": ["intros l1 l2 e Hsorted Hin Heq.", "qsimpl time: 1 use: findGtIndex_app_in_2.", "qsimpl time: 1 use: findGtIndex_app_in_2,eIndex,maxIndex.", "qsimpl time: 1 use: maxIndex_is_max,findGtIndex_app_in_2,eIndex,maxIndex.", "qsimpl time: 1 use: maxIndex_is_max,findGtIndex_app_in_2,eIndex,maxIndex.", "qsimpl time: 1 use: findGtIndex_app_in_2,eIndex,maxIndex_is_max,maxIndex,app_nil_l.", "qsimpl time: 1 use: findGtIndex_app_in_2,eIndex,maxIndex_is_max,maxIndex,Prefix_maxIndex,app_nil_l.", "qsimpl time: 1 use: findGtIndex_app_in_2,app_maxIndex_In_l,eIndex,maxIndex_is_max,maxIndex,Prefix_maxIndex,app_nil_l.", "qsimpl time: 1 use: findGtIndex_app_in_2,app_maxIndex_In_l,eIndex,app_nil_r,maxIndex_is_max,maxIndex,all,Prefix_maxIndex,app_nil_l.", "qsimpl time: 1 use: findGtIndex_app_in_2,app_maxIndex_In_l,eIndex,app_nil_r,maxIndex_is_max,maxIndex,all,Prefix_maxIndex,app_nil_l."], "tactic": "simpl in Hprefix.", "exn": "No such hypothesis: Hprefix", "type": "no_hypos", "handled": true}, {"ctx": ["intros l1 l2 e Hsorted Hin Heq.", "qsimpl time: 1 use: findGtIndex_app_in_2.", "qsimpl time: 1 use: findGtIndex_app_in_2,eIndex,maxIndex.", "qsimpl time: 1 use: maxIndex_is_max,findGtIndex_app_in_2,eIndex,maxIndex.", "qsimpl time: 1 use: maxIndex_is_max,findGtIndex_app_in_2,eIndex,maxIndex.", "qsimpl time: 1 use: findGtIndex_app_in_2,eIndex,maxIndex_is_max,maxIndex,app_nil_l.", "qsimpl time: 1 use: findGtIndex_app_in_2,eIndex,maxIndex_is_max,maxIndex,Prefix_maxIndex,app_nil_l.", "qsimpl time: 1 use: findGtIndex_app_in_2,app_maxIndex_In_l,eIndex,maxIndex_is_max,maxIndex,Prefix_maxIndex,app_nil_l.", "qsimpl time: 1 use: findGtIndex_app_in_2,app_maxIndex_In_l,eIndex,app_nil_r,maxIndex_is_max,maxIndex,all,Prefix_maxIndex,app_nil_l.", "qsimpl time: 1 use: findGtIndex_app_in_2,app_maxIndex_In_l,eIndex,app_nil_r,maxIndex_is_max,maxIndex,all,Prefix_maxIndex,app_nil_l.", "qsimpl time: 1 use: findGtIndex_app_in_2,app_maxIndex_In_l,eIndex,app_nil_r,maxIndex_is_max,maxIndex,all,Prefix_maxIndex,app_nil_l."], "tactic": "rewrite Heq, app_nil_l, Heq.", "exn": "Cannot find a relation to rewrite.", "type": "no_rewrite_relation", "handled": true}, {"ctx": ["intros l1 l2 e Hsorted Hin Heq.", "qsimpl time: 1 use: findGtIndex_app_in_2.", "qsimpl time: 1 use: findGtIndex_app_in_2,eIndex,maxIndex.", "qsimpl time: 1 use: maxIndex_is_max,findGtIndex_app_in_2,eIndex,maxIndex.", "qsimpl time: 1 use: maxIndex_is_max,findGtIndex_app_in_2,eIndex,maxIndex.", "qsimpl time: 1 use: findGtIndex_app_in_2,eIndex,maxIndex_is_max,maxIndex,app_nil_l.", "qsimpl time: 1 use: findGtIndex_app_in_2,eIndex,maxIndex_is_max,maxIndex,Prefix_maxIndex,app_nil_l.", "qsimpl time: 1 use: findGtIndex_app_in_2,app_maxIndex_In_l,eIndex,maxIndex_is_max,maxIndex,Prefix_maxIndex,app_nil_l.", "qsimpl time: 1 use: findGtIndex_app_in_2,app_maxIndex_In_l,eIndex,app_nil_r,maxIndex_is_max,maxIndex,all,Prefix_maxIndex,app_nil_l.", "qsimpl time: 1 use: findGtIndex_app_in_2,app_maxIndex_In_l,eIndex,app_nil_r,maxIndex_is_max,maxIndex,all,Prefix_maxIndex,app_nil_l.", "qsimpl time: 1 use: findGtIndex_app_in_2,app_maxIndex_In_l,eIndex,app_nil_r,maxIndex_is_max,maxIndex,all,Prefix_maxIndex,app_nil_l.", "qsimpl time: 1 use: findGtIndex_app_in_2,app_maxIndex_In_l,eIndex,app_nil_r,maxIndex_is_max,maxIndex,all,Prefix_maxIndex,app_nil_l."], "tactic": "apply thing3; eauto.", "exn": "In environment H25 : forall (A : Type) (l : list A), l = l orig_base_params : BaseParams raft_params : RaftParams orig_base_params l15 : list entry -> logIndex l14 : entry -> logIndex H24 : forall (l l' : list entry) (e : entry), sorted l' -> Prefix l l' -> In e l -> l14 e <= l15 l' X4 : forall A : Type, (A -> Prop) -> Prop H21 : forall (l : list entry) (e : entry), sorted l -> In e l -> maxIndex l >= l14 e H14 : forall (A : Type) (l : list A), l ++ [] = l H7 : forall (l l' : list entry) (e : entry), sorted (l ++ l') -> In e (l ++ l') -> maxIndex l' < eIndex e -> In e l H : forall (l1 l2 : list entry) (e : entry), sorted (l1 ++ l2) -> In e l2 -> exists l' : list entry, findGtIndex (l1 ++ l2) (eIndex e) = l1 ++ l' /\\\\ Prefix l' l2 l13 : list entry -> logIndex l12 : entry -> logIndex H22 : forall (l l' : list entry) (e : entry), sorted l' -> Prefix l l' -> In e l -> l12 e <= l13 l' X3 : forall A : Type, (A -> Prop) -> Prop H18 : forall (l : list entry) (e : entry), sorted l -> In e l -> maxIndex l >= l12 e l11 : list entry -> logIndex l10 : entry -> logIndex H20 : forall (l l' : list entry) (e : entry), sorted l' -> Prefix l l' -> In e l -> l10 e <= l11 l' X2 : forall A : Type, (A -> Prop) -> Prop H19 : forall (l : list entry) (e : entry), sorted l -> In e l -> maxIndex l >= l10 e l9 : list entry -> logIndex l8 : entry -> logIndex H17 : forall (l l' : list entry) (e : entry), sorted l' -> Prefix l l' -> In e l -> l8 e <= l9 l' X1 : forall A : Type, (A -> Prop) -> Prop H16 : forall (l : list entry) (e : entry), sorted l -> In e l -> maxIndex l >= l8 e l7 : list entry -> logIndex l6 : entry -> logIndex H13 : forall (l l' : list entry) (e : entry), sorted l' -> Prefix l l' -> In e l -> l6 e <= l7 l' H12 : forall (l : list entry) (e : entry), sorted l -> In e l -> maxIndex l >= l6 e l5 : list entry -> logIndex l4 : entry -> logIndex H10 : forall (l l' : list entry) (e : entry), sorted l' -> Prefix l l' -> In e l -> l4 e <= l5 l' H9 : forall (l : list entry) (e : entry), sorted l -> In e l -> maxIndex l >= l4 e l3 : entry -> logIndex H3 : forall (l : list entry) (e : entry), sorted l -> In e l -> maxIndex l >= l3 e X0 : entry -> logIndex H2 : forall (l : list entry) (e : entry), sorted l -> In e l -> maxIndex l >= eIndex e X : entry -> logIndex l0 : list entry -> logIndex l : entry -> logIndex one_node_params : OneNodeParams orig_base_params l1 : network l2 : refined_raft_intermediate_reachable l1 e : packet Hsorted : term Hin : name Heq : logIndex plt : term es : list entry ci : logIndex H0 : In e (nwPackets l1) H1 : pBody e = AppendEntries Hsorted Hin Heq plt es ci nextIndex_safety_invariant : forall net : network, raft_intermediate_reachable net -> nextIndex_safety net log_matching_invariant : forall net : network, raft_intermediate_reachable net -> log_matching net handleAppendEntries_logs_sorted : forall (net : network) (p : packet) (t : term) (n : name) (pli : logIndex) (plt : term) (es : list entry) (ci : logIndex) (st' : raft_data) (m : msg), raft_intermediate_reachable net -> logs_sorted net -> handleAppendEntries (pDst p) (nwState net (pDst p)) t n pli plt es ci = (st', m) -> pBody p = AppendEntries t n pli plt es ci -> In p (nwPackets net) -> sorted (log st') handleClientRequest_logs_sorted : forall (h : name) (client : clientId) (id : nat) (c : input) (out : list raft_output) (st : raft_data) (l : list (name * msg)) (net : network), handleClientRequest h (nwState net h) client id c = (out, st, l) -> raft_intermediate_reachable net -> logs_sorted_host net -> sorted (log st) logs_sorted_invariant : forall net : network, raft_intermediate_reachable net -> logs_sorted net refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (deghost net) leaders_have_leaderLogs_strong_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaders_have_leaderLogs_strong net H4, H6, H8 : logIndex Unable to unify \"(fix In (a : entry) (l : list entry) {struct l} : Prop := match l with | [] => False | b :: m => b = a \\\\/ In a m end) ?M54836 ?M54835\" with \"exists (h : name) (ll es' ll' : list entry), es = es' ++ ll' /\\\\ (forall e : entry, In e es' -> eTerm e = Hsorted) /\\\\ In (Hsorted, ll) (leaderLogs (fst (nwState l1 h))) /\\\\ Prefix ll' ll /\\\\ (plt = Hsorted /\\\\ Heq > l0 ll \\\\/ (exists e : entry, In e ll /\\\\ l e = Heq /\\\\ eTerm e = plt /\\\\ Prefix_sane ll' ll Heq) \\\\/ plt = 0 /\\\\ Heq = 0 /\\\\ ll' = ll)\".", "type": "cannot_unify", "handled": true}]}, "chat": [], "original": "intros l1 l2 e Hsorted Hin Heq. apply findGtIndex_app_in_2 in Hin as [l' [HgtIndex Hprefix]]; eauto. assert (Hmax: eIndex e <= maxIndex l2). { apply maxIndex_is_max; eauto. } rewrite Heq in HgtIndex. rewrite <- app_nil_l in HgtIndex at 1. apply Prefix_maxIndex in Hprefix; eauto. apply app_maxIndex_In_l in Hmax; eauto. all: rewrite app_nil_r; auto. apply eq_iff_eq_true in Hprefix. simpl in Hprefix. rewrite Heq, app_nil_l, Heq. apply thing3; eauto.", "back_times": 0, "succ": false, "time": 94.16900539398193}]