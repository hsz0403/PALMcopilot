[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": [], "tactic": "intros net net' gd d h d' Hreboot Hp Hreach Hstate Hupdate Hpackets.", "exn": "No product even after head-reduction.", "type": "no_product", "handled": true}, {"ctx": ["intros."], "tactic": "apply refined_raft_net_invariant with (P := append_entries_leaderLogs).", "exn": "In environment orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params lhllsi : leaders_have_leaderLogs_strong_interface rri : raft_refinement_interface si : sorted_interface lmi : log_matching_interface nisi : nextIndex_safety_interface l1, l2 : list entry e : entry H : sorted (l1 ++ l2) H0 : In e l2 H1 : findGtIndex (l1 ++ l2) (eIndex e) = l1 Unable to unify \"forall (p : packet) (t : term) (n : name) (pli : logIndex) (plt : term) (es : list entry) (ci : logIndex), In p (nwPackets ?M1636) -> pBody p = AppendEntries t n pli plt es ci -> exists (h : Net.name) (ll es' ll' : list entry), es = es' ++ ll' /\\\\ (forall e0 : entry, In e0 es' -> eTerm e0 = t) /\\\\ In (t, ll) (leaderLogs (fst (nwState ?M1636 h))) /\\\\ Prefix ll' ll /\\\\ (plt = t /\\\\ pli > maxIndex ll \\\\/ (exists e0 : entry, In e0 ll /\\\\ eIndex e0 = pli /\\\\ eTerm e0 = plt /\\\\ Prefix_sane ll' ll pli) \\\\/ plt = 0 /\\\\ pli = 0 /\\\\ ll' = ll)\" with \"eIndex e = maxIndex l2\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros.", "qsimpl time: 1 use: append_entries_leaderLogs,refined_raft_net_invariant."], "tactic": "apply Hp.", "exn": "The reference Hp was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros.", "qsimpl time: 1 use: append_entries_leaderLogs,refined_raft_net_invariant.", "apply Decidable.dec_not_not.", "-"], "tactic": "intros net0 net1 gd0 d0 h0 d0' Hreboot0 Hp0 Hreach0 Hstate0 Hupdate0 Hpackets0.", "exn": "No product even after head-reduction.", "type": "no_product", "handled": true}, {"ctx": ["intros.", "qsimpl time: 1 use: append_entries_leaderLogs,refined_raft_net_invariant.", "apply Decidable.dec_not_not.", "-"], "tactic": "eapply refined_raft_net_invariant_state_same_packet_subset with (net := net0); eauto.", "exn": "The reference net0 was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros.", "qsimpl time: 1 use: append_entries_leaderLogs,refined_raft_net_invariant.", "apply Decidable.dec_not_not.", "-"], "tactic": "simplify_eqs.", "exn": "The reference simplify_eqs was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros.", "qsimpl time: 1 use: append_entries_leaderLogs,refined_raft_net_invariant.", "apply Decidable.dec_not_not.", "-"], "tactic": "apply Hstate.", "exn": "The reference Hstate was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros.", "qsimpl time: 1 use: append_entries_leaderLogs,refined_raft_net_invariant.", "apply Decidable.dec_not_not.", "-", "apply Decidable.dec_not_not.", "+"], "tactic": "apply Hpackets.", "exn": "The reference Hpackets was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros.", "qsimpl time: 1 use: append_entries_leaderLogs,refined_raft_net_invariant.", "apply Decidable.dec_not_not.", "-", "apply Decidable.dec_not_not.", "+", "apply Decidable.dec_not_not."], "tactic": "+", "exn": "Wrong bullet +: Current bullet + is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["intros.", "qsimpl time: 1 use: append_entries_leaderLogs,refined_raft_net_invariant.", "apply Decidable.dec_not_not.", "-", "apply Decidable.dec_not_not.", "+", "apply Decidable.dec_not_not.", "*", "shelve.", "*", "shelve.", "+"], "tactic": "eapply refined_raft_net_invariant with (P := append_entries_leaderLogs); eauto.", "exn": "In environment orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params H2 : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net X : network -> Prop l1, l2 : list entry e : entry H : sorted (l1 ++ l2) H0 : In e l2 H1 : findGtIndex (l1 ++ l2) (eIndex e) = l1 nextIndex_safety_invariant : forall net : network, raft_intermediate_reachable net -> nextIndex_safety net log_matching_invariant : forall net : network, raft_intermediate_reachable net -> log_matching net handleAppendEntries_logs_sorted : forall (net : network) (p : packet) (t : term) (n : name) (pli : logIndex) (plt : term) (es : list entry) (ci : logIndex) (st' : raft_data) (m : msg), raft_intermediate_reachable net -> logs_sorted net -> handleAppendEntries (pDst p) (nwState net (pDst p)) t n pli plt es ci = (st', m) -> pBody p = AppendEntries t n pli plt es ci -> In p (nwPackets net) -> sorted (log st') handleClientRequest_logs_sorted : forall (h : name) (client : clientId) (id : nat) (c : input) (out : list raft_output) (st : raft_data) (l : list (name * msg)) (net : network), handleClientRequest h (nwState net h) client id c = (out, st, l) -> raft_intermediate_reachable net -> logs_sorted_host net -> sorted (log st) logs_sorted_invariant : forall net : network, raft_intermediate_reachable net -> logs_sorted net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (deghost net) leaders_have_leaderLogs_strong_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaders_have_leaderLogs_strong net Unable to unify \"refined_raft_intermediate_reachable ?M3806\" with \"Decidable.decidable (eIndex e = maxIndex l2) -> False\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros.", "qsimpl time: 1 use: append_entries_leaderLogs,refined_raft_net_invariant.", "apply Decidable.dec_not_not.", "-", "apply Decidable.dec_not_not.", "+", "apply Decidable.dec_not_not.", "*", "shelve.", "*", "shelve.", "+", "qsimpl time: 1 use: append_entries_leaderLogs,refined_raft_net_invariant."], "tactic": "apply Hp0.", "exn": "The reference Hp0 was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros.", "qsimpl time: 1 use: append_entries_leaderLogs,refined_raft_net_invariant.", "apply Decidable.dec_not_not.", "-", "apply Decidable.dec_not_not.", "+", "apply Decidable.dec_not_not.", "*", "shelve.", "*", "shelve.", "+", "qsimpl time: 1 use: append_entries_leaderLogs,refined_raft_net_invariant.", "apply Decidable.dec_not_not.", "*"], "tactic": "eapply append_entries_leaderLogs_invariant; eauto.", "exn": "In environment orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params H2 : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net X : network -> Prop l1, l2 : list entry e : entry H : sorted (l1 ++ l2) H0 : In e l2 H1 : findGtIndex (l1 ++ l2) (eIndex e) = l1 nextIndex_safety_invariant : forall net : network, raft_intermediate_reachable net -> nextIndex_safety net log_matching_invariant : forall net : network, raft_intermediate_reachable net -> log_matching net handleAppendEntries_logs_sorted : forall (net : network) (p : packet) (t : term) (n : name) (pli : logIndex) (plt : term) (es : list entry) (ci : logIndex) (st' : raft_data) (m : msg), raft_intermediate_reachable net -> logs_sorted net -> handleAppendEntries (pDst p) (nwState net (pDst p)) t n pli plt es ci = (st', m) -> pBody p = AppendEntries t n pli plt es ci -> In p (nwPackets net) -> sorted (log st') handleClientRequest_logs_sorted : forall (h : name) (client : clientId) (id : nat) (c : input) (out : list raft_output) (st : raft_data) (l : list (name * msg)) (net : network), handleClientRequest h (nwState net h) client id c = (out, st, l) -> raft_intermediate_reachable net -> logs_sorted_host net -> sorted (log st) logs_sorted_invariant : forall net : network, raft_intermediate_reachable net -> logs_sorted net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (deghost net) leaders_have_leaderLogs_strong_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaders_have_leaderLogs_strong net H3 : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net X0 : network -> Prop H4 : Decidable.decidable (eIndex e = maxIndex l2) -> False Unable to unify \"forall (p : packet) (t : term) (n : name) (pli : logIndex) (plt : term) (es : list entry) (ci : logIndex), In p (nwPackets ?M6385) -> pBody p = AppendEntries t n pli plt es ci -> exists (h : Net.name) (ll es' ll' : list entry), es = es' ++ ll' /\\\\ (forall e0 : entry, In e0 es' -> eTerm e0 = t) /\\\\ In (t, ll) (leaderLogs (fst (nwState ?M6385 h))) /\\\\ Prefix ll' ll /\\\\ (plt = t /\\\\ pli > maxIndex ll \\\\/ (exists e0 : entry, In e0 ll /\\\\ eIndex e0 = pli /\\\\ eTerm e0 = plt /\\\\ Prefix_sane ll' ll pli) \\\\/ plt = 0 /\\\\ pli = 0 /\\\\ ll' = ll)\" with \"False \\\\/ ~ False\".", "type": "cannot_unify", "handled": true}]}, "chat": [], "original": "intros net net' gd d h d' Hreboot Hp Hreach Hstate Hupdate Hpackets. apply refined_raft_net_invariant with (P := append_entries_leaderLogs). - apply Hp. - unfold refined_raft_net_invariant_reboot. intros net0 net1 gd0 d0 h0 d0' Hreboot0 Hp0 Hreach0 Hstate0 Hupdate0 Hpackets0. eapply refined_raft_net_invariant_state_same_packet_subset with (net := net0); eauto. + simplify_eqs. apply Hstate. + apply Hpackets. + eapply refined_raft_net_invariant with (P := append_entries_leaderLogs); eauto. * apply Hp0. * unfold append_entries_leaderLogs_invariant. intros. eapply append_entries_leaderLogs_invariant; eauto.", "back_times": 0, "succ": false, "time": 166.44715213775635}]