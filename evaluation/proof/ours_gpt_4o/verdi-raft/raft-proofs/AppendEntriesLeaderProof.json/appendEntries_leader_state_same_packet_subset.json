[{"history": {"proof": "intros h st out st' l H. intros Ht. qsimpl time: 1 use: handleTimeout_type. hauto lq: on depth: 3.", "repairs": ["", "", "cannot_apply_in", "hammer"], "exceptions": [{"ctx": ["intros h st out st' l H.", "intros Ht."], "tactic": "apply handleTimeout_type in H.", "exn": "Unable to apply lemma of type \"forall (h0 : name) (st0 : raft_data) (out0 : list raft_output) (st'0 : raft_data) (l0 : list (name * msg)), handleTimeout h0 st0 = (out0, st'0, l0) -> type st'0 = type st0 /\\\\ currentTerm st'0 = currentTerm st0 \\\\/ type st'0 = Candidate\" on hypothesis of type \"refined_raft_intermediate_reachable h\".", "type": "cannot_apply_in", "handled": true}, {"ctx": ["intros h st out st' l H.", "intros Ht.", "qsimpl time: 1 use: handleTimeout_type."], "tactic": ["destruct H as [ [Htype Hterm] | Hcandidate].", ""], "exn": "Expects a disjunctive pattern with 6 branches.", "type": "num_branch", "handled": false}]}, "chat": [], "original": "intros h st out st' l H. unfold type_term_log_monotonic. intros Ht. apply handleTimeout_type in H. destruct H as [ [Htype Hterm] | Hcandidate]. - split; auto. split; auto. intros e Hein. assert (Hl := handleTimeout_log_same _ _ _ _ _ H). rewrite <- Hl. auto. - exfalso. rewrite Hcandidate in Ht; discriminate.", "back_times": 0, "succ": true, "time": 4.465860366821289}]