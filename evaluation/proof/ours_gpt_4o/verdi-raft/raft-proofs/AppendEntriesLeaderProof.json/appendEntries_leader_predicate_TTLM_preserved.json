[{"history": {"proof": "", "repairs": [], "exceptions": []}, "chat": [{"role": "user", "content": "Help me to prove a theorem in Coq, based on provided proof states including hypotheses and goals. Give a complete proof in only one single code block without explanations, extra definitions. Give a complete proof in one response, only give the proof body, without repeating the definition and \"Proof.\". Avoid existing names when using intros. Write the commands separately, without \";\" and \"[cmd|cmd]\". Use bullets for structure, NEVER use \"{\" and \"}\". When -, + and * are used out, proceed to double versions like --, ++, etc. For example, given proof state:\nn, m: nat\nIHn: m + n = n + m\n============================\nm + S n = S n + m\nThe hypotheses n, m: nat and IHn: m + n = n + m are given first, then the goal, m + S n = S n + m, separated by =. Expect a response like: \n```coq\nsimpl. rewrite <- IHn. auto.``` \nYou do not intros any terms because all terms have already been introduced.\n\nWhen I give:\nforall n m : nat, m + n = n + m\n============================\nn, m: nat\nyour answer should be like:\n```coq\nintros n m. induction n.\n- simpl. auto.\n- simpl. rewrite <- IHn. auto.\nQed.```\nDefinitions and lemmas related to the proof will be provided, use them accordingly.\n\n\nSolve This Proof State:\n\nHypotheses:\norig_base_params: BaseParams\none_node_params: OneNodeParams orig_base_params\nraft_params: RaftParams orig_base_params\nrri: raft_refinement_interface\naecfli: append_entries_came_from_leaders_interface\nollpti: one_leaderLog_per_term_interface\nlltsi: leaderLogs_term_sanity_interface\nolpti: one_leader_per_term_interface\n\nGoal:\nforall (ps : list packet) (st st' : RaftState.raft_data term name entry logIndex serverType data clientId output), appendEntries_leader_predicate ps st -> type_term_log_monotonic st st' -> appendEntries_leader_predicate ps st'\n\nPremises:\nRecord OneNodeParams (P : BaseParams) : Type := Build_OneNodeParams { init : data; handler : input -> data -> output * data } Arguments Build_OneNodeParams _ _ _%function_scope\nNotation appendEntries_leader_predicate ps st := (forall p t lid pli plt es lci e, In p ps -> pBody p = AppendEntries t lid pli plt es lci -> In e es -> currentTerm st = t -> type st = Leader -> In e (log st))\nInductive serverType : Set := Follower : serverType | Candidate : serverType | Leader : serverType\nclientId = fun (orig_base_params : BaseParams) (RaftParams0 : RaftParams orig_base_params) => let (_, _, _, clientId, _) := RaftParams0 in clientId : forall orig_base_params : BaseParams, RaftParams orig_base_params -> Type Arguments clientId {orig_base_params RaftParams}\noutput = fun BaseParams0 : BaseParams => let (_, _, output) := BaseParams0 in output : BaseParams -> Type Arguments output {BaseParams}\ndata = fun BaseParams0 : BaseParams => let (data, _, _) := BaseParams0 in data : BaseParams -> Type Arguments data {BaseParams}\nterm = nat : Set\nraft_data = fun (orig_base_params : BaseParams) (raft_params : RaftParams orig_base_params) => RaftState.raft_data term name entry logIndex serverType data clientId output : forall orig_base_params : BaseParams, RaftParams orig_base_params -> Type Arguments raft_data {orig_base_params raft_params}\nname = fun (orig_base_params : BaseParams) (raft_params : RaftParams orig_base_params) => fin N : forall orig_base_params : BaseParams, RaftParams orig_base_params -> Type Arguments name {orig_base_params raft_params}\nRecord packet (P : BaseParams) (params : MultiParams P) : Type := mkPacket { pSrc : Net.name; pDst : Net.name; pBody : Net.msg } Arguments packet {P params} Arguments mkPacket {P params}\nRecord entry (orig_base_params : BaseParams) (raft_params : RaftParams orig_base_params) : Type := mkEntry { eAt : name; eClient : clientId; eId : nat; eIndex : logIndex; eTerm : term; eInput : input } Arguments entry {orig_base_params raft_params} Arguments mkEntry {orig_base_params raft_params} _ _ _%nat_scope\nModule RaftState := Struct Record raft_data (term name entry logIndex serverType stateMachineData clientId output : Type) : Type := mkRaft_data { currentTerm : term; votedFor : option name; leaderId : option name; log : list entry; commitIndex : logIndex; lastApplied : logIndex; stateMachine : stateMachineData; nextIndex : list (name * logIndex); matchIndex : list (name * logIndex); shouldSend : bool; votesReceived : list name; type : serverType; clientCache : list (clientId * (nat * output)); electoralVictories : list (term * list name * list entry) } Definition currentTerm : forall term name entry\nInductive list (A : Type) : Type := nil : list A | cons : A -> list A -> list A Arguments list _%type_scope Arguments nil {A}%type_scope Arguments cons {A}%type_scope a l%list_scope : rename\nlogIndex = nat : Set\nRecord RaftParams (orig_base_params : BaseParams) : Type := Build_RaftParams { N : nat; input_eq_dec : forall x y : input, {x = y} + {x <> y}; output_eq_dec : forall x y : output, {x = y} + {x <> y}; clientId : Type; clientId_eq_dec : forall x y : clientId, {x = y} + {x <> y} } Arguments Build_RaftParams _ _%nat_scope (_ _)%function_scope [clientId]%type_scope _%function_scope\ntype_term_log_monotonic = fun st st' : RaftState.raft_data term name entry logIndex serverType data clientId output => type st' = Leader -> type st = Leader /\\ currentTerm st' = currentTerm st /\\ (forall e : entry, In e (log st) -> In e (log st')) : RaftState.raft_data term name entry logIndex serverType data clientId output -> RaftState.raft_data term name entry logIndex serverType data clientId output -> Prop\nhandleRequestVoteReply_log_term_type : forall (h : name) (st : RaftState.raft_data term name entry logIndex serverType data clientId output) (t : nat) (h' : name) (r : bool) (st' : RaftState.raft_data term name entry logIndex serverType data clientId output), type st' = Candidate -> handleRequestVoteReply h st h' t r = st' -> log st' = log st /\\ currentTerm st' = currentTerm st /\\ type st' = type st\nmatchIndex_preserved = fun (orig_base_params : BaseParams) (raft_params : RaftParams orig_base_params) (st st' : RaftState.raft_data term name entry logIndex serverType data clientId output) => type st' = Leader -> type st = Leader /\\ matchIndex st' = matchIndex st /\\ log st' = log st : forall (orig_base_params : BaseParams) (raft_params : RaftParams orig_base_params), RaftState.raft_data term name entry logIndex serverType data clientId output -> RaftState.raft_data term name entry logIndex serverType data clientId output -> Prop Arguments matchIndex_preserved {orig_base_params raft_params}\napplied_entries_log_lastApplied_update_same : forall (sigma : name -> RaftState.raft_data term name entry logIndex serverType data clientId output) (h : name) (st : RaftState.raft_data term name entry logIndex serverType data clientId output), log st = log (sigma h) -> lastApplied st = lastApplied (sigma h) -> applied_entries (update name_eq_dec sigma h st) = applied_entries sigma\nhandleAppendEntriesReply_log_term_type : forall (h : name) (st : RaftState.raft_data term name entry logIndex serverType data clientId output) (n : name) (t : nat) (es : list entry) (r : bool) (st' : raft_data) (ps : list (name * msg)), handleAppendEntriesReply h st n t es r = (st', ps) -> log st' = log st /\\ currentTerm st' = currentTerm st /\\ type st' = type st \\/ type st' = Follower\nmatchIndex_preserved_except_at_host = fun (orig_base_params : BaseParams) (raft_params : RaftParams orig_base_params) (h : name) (st st' : RaftState.raft_data term name entry logIndex serverType data clientId output) => type st' = Leader -> type st = Leader /\\ (forall h' : name, h <> h' -> assoc_default name_eq_dec (matchIndex st') h' 0 = assoc_default name_eq_dec (matchIndex st) h' 0) : forall (orig_base_params : BaseParams) (raft_params : RaftParams orig_base_params), name -> RaftState.raft_data term name entry logIndex serverType data clientId output -> RaftState.raft_data term name entry logIndex serverType data clientId output -> Prop Arguments matchIndex_preserved_except_at_host {orig_base_params raft_params}\napplied_entries_safe_update : forall (sigma : name -> RaftState.raft_data term name entry logIndex serverType data clientId output) (h : name) (st : RaftState.raft_data term name entry logIndex serverType data clientId output), lastApplied st = lastApplied (sigma h) -> removeAfterIndex (log st) (lastApplied (sigma h)) = removeAfterIndex (log (sigma h)) (lastApplied (sigma h)) -> applied_entries (update name_eq_dec sigma h st) = applied_entries sigma\nhandleAppendEntriesReply_same_term_votedFor_preserved : forall (h : name) (st : RaftState.raft_data term name entry logIndex serverType data clientId output) (h' : name) (t : nat) (es : list entry) (r : bool) (st' : raft_data) (ms : list (name * msg)), handleAppendEntriesReply h st h' t es r = (st', ms) -> currentTerm st' = currentTerm st -> votedFor st' = votedFor st\nhandleRequestVote_type_term : forall (st : RaftState.raft_data term name entry logIndex serverType data clientId output) (h : name) (h' : fin N) (t lli llt : nat) (st' : raft_data) (m : msg), handleRequestVote h st t h' lli llt = (st', m) -> type st' = type st /\\ currentTerm st' = currentTerm st \\/ type st' = Follower /\\ currentTerm st' >= currentTerm st\nhandleRequestVoteReply_type : forall (h : name) (st : RaftState.raft_data term name entry logIndex serverType data clientId output) (h' : name) (t : nat) (r : bool) (st' : raft_data), handleRequestVoteReply h st h' t r = st' -> type st' = type st /\\ currentTerm st' = currentTerm st \\/ type st' = Follower /\\ currentTerm st' > currentTerm st \\/ type st = Candidate /\\ type st' = Leader /\\ currentTerm st' = currentTerm st\nhandleRequestVote_type : forall (st : RaftState.raft_data term name entry logIndex serverType data clientId output) (h : name) (h' : fin N) (t lli llt : nat) (st' : raft_data) (m : msg), handleRequestVote h st t h' lli llt = (st', m) -> type st' = type st /\\ currentTerm st' = currentTerm st \\/ type st' = Follower\nhandleAppendEntriesReply_type_term : forall (h : name) (st : RaftState.raft_data term name entry logIndex serverType data clientId output) (h' : name) (t : nat) (es : list entry) (r : bool) (st' : raft_data) (ms : list (name * msg)), handleAppendEntriesReply h st h' t es r = (st', ms) -> type st' = type st /\\ currentTerm st' = currentTerm st \\/ type st' = Follower /\\ currentTerm st' >= currentTerm st\nhandleRequestVote_log_term_type : forall (h : name) (st : RaftState.raft_data term name entry logIndex serverType data clientId output) (t : nat) (c : fin N) (li lt : nat) (st' : raft_data) (m : msg), handleRequestVote h st t c li lt = (st', m) -> log st' = log st /\\ currentTerm st' = currentTerm st /\\ type st' = type st \\/ type st' = Follower\nhandleAppendEntriesReply_type : forall (h : name) (st : RaftState.raft_data term name entry logIndex serverType data clientId output) (h' : name) (t : nat) (es : list entry) (r : bool) (st' : raft_data) (ms : list (name * msg)), handleAppendEntriesReply h st h' t es r = (st', ms) -> type st' = type st /\\ currentTerm st' = currentTerm st \\/ type st' = Follower\nhandleClientRequest_log : forall (h : name) (st : raft_data) (client : clientId) (id : nat) (c : input) (out : list raft_output) (st' : raft_data) (ps : list (name * msg)), handleClientRequest h st client id c = (out, st', ps) -> ps = [] /\\ (log st' = log st \\/ (exists e : entry, log st' = e :: log st /\\ eIndex e = S (maxIndex (log st)) /\\ eTerm e = currentTerm st /\\ eClient e = client /\\ eInput e = c /\\ eId e = id /\\ type st = Leader))\napplyEntries_spec : forall (es : list entry) (h : name) (st : raft_data) (os : list raft_output) (st' : raft_data), applyEntries h st es = (os, st') -> exists (d : data) (cc : list (clientId * (nat * output))), st' = RaftState.set_raft_data_clientCache term name entry logIndex serverType data clientId output (RaftState.set_raft_data_stateMachine term name entry logIndex serverType data clientId output st d) cc\nhandleRequestVoteReply_spec : forall (h : name) (st : RaftState.raft_data term name entry logIndex serverType data clientId output) (h' : name) (t : nat) (r : bool) (st' : raft_data), st' = handleRequestVoteReply h st h' t r -> log st' = log st /\\ (forall v : name, In v (votesReceived st) -> In v (votesReceived st')) /\\ (currentTerm st' = currentTerm st /\\ type st' = type st \\/ type st' <> Candidate) /\\ (type st <> Leader /\\ type st' = Leader -> type st = Candidate /\\ wonElection (dedup name_eq_dec (votesReceived st')) = true)\nadvanceCurrentTerm_term : forall (st : RaftState.raft_data term name entry logIndex serverType data clientId output) (t : nat), currentTerm st <= t -> currentTerm (advanceCurrentTerm st t) = t\nhandleRequestVoteReply_spec' : forall (h : name) (st : RaftState.raft_data term name entry logIndex serverType data clientId output) (h' : name) (t : nat) (r : bool) (st' : raft_data), st' = handleRequestVoteReply h st h' t r -> log st' = log st /\\ (forall v : name, In v (votesReceived st) -> In v (votesReceived st')) /\\ (type st <> Leader /\\ type st' = Leader -> (type st = Candidate /\\ wonElection (dedup name_eq_dec (votesReceived st')) = true) /\\ r = true /\\ currentTerm st' = currentTerm st /\\ currentTerm st = t /\\ votesReceived st' = h' :: votesReceived st)\ndoGenericServer_log_type_term_votesReceived : forall (h : name) (st : raft_data) (os : list raft_output) (st' : raft_data) (ps : list (name * msg)), doGenericServer h st = (os, st', ps) -> log st' = log st /\\ type st' = type st /\\ currentTerm st' = currentTerm st /\\ votesReceived st' = votesReceived st /\\ votedFor st' = votedFor st\nhandleTimeout_log_term_type : forall (h : name) (st : raft_data) (out : list raft_output) (st' : raft_data) (ps : list (name * msg)), handleTimeout h st = (out, st', ps) -> log st' = log st /\\ currentTerm st' = currentTerm st /\\ type st' = type st \\/ currentTerm st' = S (currentTerm st)\nadvanceCurrentTerm_commitIndex : forall (st : RaftState.raft_data term name entry logIndex serverType data clientId output) (t : nat), commitIndex (advanceCurrentTerm st t) = commitIndex st\nhandleRequestVoteReply_currentTerm : forall (h : name) (st : RaftState.raft_data term name entry logIndex serverType data clientId output) (h' : name) (t : nat) (r : bool) (x : nat), x <= currentTerm st -> x <= currentTerm (handleRequestVoteReply h st h' t r)\nupdate_elections_data_net = fun (orig_base_params : BaseParams) (raft_params : RaftParams orig_base_params) (me src : name) (m : msg) (st : electionsData * RaftState.raft_data term name entry logIndex serverType data clientId output) => match m with | RequestVote t _ lastLogIndex lastLogTerm => update_elections_data_requestVote me src t src lastLogIndex lastLogTerm st | RequestVoteReply t voteGranted => update_elections_data_requestVoteReply me src t voteGranted st | AppendEntries t lid prevLogIndex prevLogTerm entries leaderCommit => update_elections_data_appendEntries me st t lid prevLogIndex prevLogTerm entries leaderCommit | AppendEntriesReply _ _ _ => fst st end : forall (orig_base_params : BaseParams) (raft_params : RaftParams orig_base_params), name -> name -> msg -> electionsData *...\nhandleAppendEntries_same_term_votedFor_preserved : forall (h : name) (st : raft_data) (t : term) (n : name) (pli : logIndex) (plt : term) (es : list entry) (ci : logIndex) (st' : raft_data) (ps : msg), handleAppendEntries h st t n pli plt es ci = (st', ps) -> currentTerm st' = currentTerm st -> votedFor st' = votedFor st\nhandleAppendEntries_log_term_type : forall (h : name) (st : raft_data) (t : term) (n : name) (pli : logIndex) (plt : term) (es : list entry) (ci : logIndex) (st' : raft_data) (ps : msg), handleAppendEntries h st t n pli plt es ci = (st', ps) -> log st' = log st /\\ currentTerm st' = currentTerm st /\\ type st' = type st \\/ type st' = Follower\nhandleAppendEntries_type_term : forall (h : name) (st : raft_data) (t : term) (n : name) (pli : logIndex) (plt : term) (es : list entry) (ci : logIndex) (st' : raft_data) (ps : msg), handleAppendEntries h st t n pli plt es ci = (st', ps) -> type st' = type st /\\ currentTerm st' = currentTerm st \\/ type st' = Follower /\\ currentTerm st' >= currentTerm st\nadvanceCurrentTerm = fun (orig_base_params : BaseParams) (raft_params : RaftParams orig_base_params) (state : RaftState.raft_data term name entry logIndex serverType data clientId output) (newTerm : nat) => if currentTerm state <? newTerm then RaftState.set_raft_data_leaderId term name entry logIndex serverType data clientId output (RaftState.set_raft_data_type term name entry logIndex serverType data clientId output (RaftState.set_raft_data_votedFor term name entry logIndex serverType data clientId output (RaftState.set_raft_data_currentTerm term name entry logIndex serverType data clientId output state newTerm) None) Follower) None else state : forall (orig_base_params : BaseParams) (raft_params : RaftParams orig_base_params), RaftState.raft_data term name entry logIndex serverType data clientId output -> nat...\nhandleAppendEntries_type : forall (h : name) (st : raft_data) (t : term) (n : name) (pli : logIndex) (plt : term) (es : list entry) (ci : logIndex) (st' : raft_data) (ps : msg), handleAppendEntries h st t n pli plt es ci = (st', ps) -> type st' = type st /\\ currentTerm st' = currentTerm st \\/ type st' = Follower\nhandleRequestVoteReply_matchIndex : forall (n : name) (st : RaftState.raft_data term name entry logIndex serverType data clientId output) (src : name) (t : nat) (v : bool), type (handleRequestVoteReply n st src t v) = Leader -> type st = Leader /\\ matchIndex (handleRequestVoteReply n st src t v) = matchIndex st \\/ assoc_default name_eq_dec (matchIndex (handleRequestVoteReply n st src t v)) n 0 = maxIndex (log (handleRequestVoteReply n st src t v))\ngetNextIndex = fun (orig_base_params : BaseParams) (raft_params : RaftParams orig_base_params) (state : RaftState.raft_data term name entry logIndex serverType data clientId output) (h : name) => assoc_default name_eq_dec (nextIndex state) h (maxIndex (log state)) : forall (orig_base_params : BaseParams) (raft_params : RaftParams orig_base_params), RaftState.raft_data term name entry logIndex serverType data clientId output -> name -> logIndex Arguments getNextIndex {orig_base_params raft_params}"}, {"role": "assistant", "content": "```coq\nintros ps st st' H H0.\nunfold appendEntries_leader_predicate in *.\nintros p t lid pli plt es lci e HIn HBody HInE HT TL.\napply H in HIn as He.\n2: { assumption. }\n2: { assumption. }\n2: { assumption. }\ndestruct H0 as [TL' [TermEq HLog]].\ncongruence.\n```"}], "original": "intros ps st st' H H0. unfold appendEntries_leader_predicate in *. intros p t lid pli plt es lci e HIn HBody HInE HT TL. apply H in HIn as He. 2: { auto. } 2: { auto. } 2: { auto. } destruct H0 as [TL' [TermEq HLog]]. congruence.", "back_times": 0, "succ": false, "time": 123.40823006629944}]