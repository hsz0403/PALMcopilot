[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": ["intros h src t1 v st H1 H2."], "tactic": ["destruct st as [ed rd].", ""], "exn": "Expects a disjunctive pattern with 2 branches.", "type": "num_branch", "handled": false}]}, "chat": [], "original": "intros h src t1 v st H1 H2. destruct st as [ed rd]. simpl in *. remember (handleRequestVoteReply h rd src t1 v) as st'. assert (H3: currentTerm st' = currentTerm rd /\\ type st' = Candidate). { rewrite <- Heqst'. apply handleRequestVoteReply_log_term_type; auto. } destruct H3 as [Hct Ht]. apply handleRequestVoteReply_spec' in Heqst'. destruct Heqst' as [Hspec | [Hspec | [Hspec | Hspec]]]. - destruct Hspec as [_ [Hct' Hspec]]. exfalso. congruence. - destruct Hspec as [Hneq Hspec]. exfalso. congruence. - destruct Hspec as [Hspec [Hvotet [Hterm [Hr1 [Hr2 [Hr3 He]]]]]]. subst. simpl. destruct (leaderLogs_currentTerm_sanity_candidate orig_base_params one_node_params raft_params) as [Hsafe]. specialize (Hsafe h t1 (log rd)). assert (Htlt: t1 < currentTerm rd). { apply Nat.lt_neq. intro Heq. rewrite Heq in Hr2. auto. } eapply handleRequestVoteReply_term_votedFor_cases in Heqst'; eauto. destruct Heqst' as [[Hterm' Heqvf] | [Hct' Hvf]]. + exfalso. congruence. + exists (log st'). rewrite <- update_elections_data_requestVoteReply. right. left. simpl. eauto.", "back_times": 0, "succ": false, "time": 87.64613366127014}]