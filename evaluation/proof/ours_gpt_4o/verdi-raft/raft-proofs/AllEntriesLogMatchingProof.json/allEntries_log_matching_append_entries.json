[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": [], "tactic": "apply refined_raft_net_invariant.", "exn": "Unable to find an instance for the variable net.", "type": "no_instance_var", "handled": true}, {"ctx": ["qsimpl time: 1 use: refined_raft_net_invariant."], "tactic": "apply allEntries_log_matching_init.", "exn": "In environment orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params H : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net entries_contiguous_nw_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_contiguous_nw net entries_gt_0_nw_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_gt_0_nw net entries_sorted_nw_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_sorted_nw net entries_gt_0_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_gt_0 net entries_contiguous_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_contiguous net entries_sorted_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_sorted net entries_match_invariant : forall (net : network) (h h' : name), refined_raft_intermediate_reachable net -> entries_match (log (snd (nwState net h))) (log (snd (nwState net h'))) entries_match_nw_1_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_match_nw_1 net entries_match_nw_host_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_match_nw_host net allEntries_gt_0_invariant : forall (net : network) (h : name) (e : entry), refined_raft_intermediate_reachable net -> In e (map snd (allEntries (fst (nwState net h)))) -> eIndex e > 0 leader_sublog_invariant_invariant : forall net : network, raft_intermediate_reachable net -> leader_sublog_invariant net allEntries_leader_sublog_invariant : forall net : network, refined_raft_intermediate_reachable net -> allEntries_leader_sublog net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (GhostSimulations.deghost net) Unable to unify \"refined_raft_net_invariant_init allEntries_log_matching_inductive\" with \"refined_raft_net_invariant_append_entries allEntries_log_matching_inductive\".", "type": "cannot_unify", "handled": true}, {"ctx": ["qsimpl time: 1 use: refined_raft_net_invariant.", "qsimpl time: 1 use: allEntries_log_matching_init,refined_raft_net_invariant.", "destruct H0 as [H0a H0b].", "split.", "+"], "tactic": "apply (proj1 (aelsi h e e' H2 H3 H4 H5)).", "exn": "The reference aelsi was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["qsimpl time: 1 use: refined_raft_net_invariant.", "qsimpl time: 1 use: allEntries_log_matching_init,refined_raft_net_invariant.", "destruct H0 as [H0a H0b].", "split.", "+"], "tactic": "+", "exn": "Wrong bullet +: Current bullet + is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["qsimpl time: 1 use: refined_raft_net_invariant.", "qsimpl time: 1 use: allEntries_log_matching_init,refined_raft_net_invariant.", "destruct H0 as [H0a H0b].", "split.", "+", "shelve.", "+"], "tactic": "apply (proj2 (aelsi h e e' H2 H3 H4 H5)).", "exn": "The reference aelsi was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["qsimpl time: 1 use: refined_raft_net_invariant.", "qsimpl time: 1 use: allEntries_log_matching_init,refined_raft_net_invariant.", "destruct H0 as [H0a H0b].", "split.", "+", "shelve.", "+"], "tactic": "destruct H0 as [H0a H0b].", "exn": "H0a is already used.", "type": "used_var", "handled": true}, {"ctx": ["qsimpl time: 1 use: refined_raft_net_invariant.", "qsimpl time: 1 use: allEntries_log_matching_init,refined_raft_net_invariant.", "destruct H0 as [H0a H0b].", "split.", "+", "shelve.", "+"], "tactic": "destruct H0 as [H0a' H0b].", "exn": "H0b is already used.", "type": "used_var", "handled": true}, {"ctx": ["qsimpl time: 1 use: refined_raft_net_invariant.", "qsimpl time: 1 use: allEntries_log_matching_init,refined_raft_net_invariant.", "destruct H0 as [H0a H0b].", "split.", "+", "shelve.", "+", "destruct H0 as [H0a' H0b']."], "tactic": "split.", "exn": "In environment orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params H : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net entries_contiguous_nw_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_contiguous_nw net entries_gt_0_nw_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_gt_0_nw net entries_sorted_nw_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_sorted_nw net entries_gt_0_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_gt_0 net entries_contiguous_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_contiguous net entries_sorted_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_sorted net entries_match_invariant : forall (net : network) (h h' : name), refined_raft_intermediate_reachable net -> entries_match (log (snd (nwState net h))) (log (snd (nwState net h'))) entries_match_nw_1_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_match_nw_1 net entries_match_nw_host_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_match_nw_host net allEntries_gt_0_invariant : forall (net : network) (h : name) (e : entry), refined_raft_intermediate_reachable net -> In e (map snd (allEntries (fst (nwState net h)))) -> eIndex e > 0 leader_sublog_invariant_invariant : forall net : network, raft_intermediate_reachable net -> leader_sublog_invariant net allEntries_leader_sublog_invariant : forall net : network, refined_raft_intermediate_reachable net -> allEntries_leader_sublog net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (GhostSimulations.deghost net) H1 : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net H0a : allEntries_log_matching step_async_init H0b : allEntries_log_matching_nw step_async_init xs : list packet p : packet ys : list packet net : network st' : name -> data ps' : list packet gd : electionsData d : raft_data m : msg t : term n : name pli : logIndex plt : term es : list entry ci : logIndex H2 : gd = update_elections_data_appendEntries (pDst p) (nwState net (pDst p)) t n pli plt es ci H3 : pBody p = AppendEntries t n pli plt es ci H4 : allEntries_log_matching_inductive net H5 : refined_raft_intermediate_reachable net H6 : nwPackets net = xs ++ p :: ys H7 : forall h : name, st' h = update name_eq_dec (nwState net) (pDst p) (gd, d) h H8 : forall p' : packet, In p' ps' -> In p' (xs ++ ys) \\\\/ p' = {| pSrc := pDst p; pDst := pSrc p; pBody := m |} e, e' : entry h : name p0 : packet t0 : term leaderId : name prevLogIndex : logIndex prevLogTerm : term entries : list entry leaderCommit : logIndex H0 : In p0 (nwPackets {| nwPackets := ps'; nwState := st' |}) H9 : pBody p0 = AppendEntries t0 leaderId prevLogIndex prevLogTerm entries leaderCommit H10 : In e entries H11 : In e' (map snd (allEntries (fst (nwState {| nwPackets := ps'; nwState := st' |} h)))) H12 : eTerm e = eTerm e' H13 : eIndex e = eIndex e' Unable to unify \"e'\" with \"e\".", "type": "cannot_unify", "handled": true}, {"ctx": ["qsimpl time: 1 use: refined_raft_net_invariant.", "qsimpl time: 1 use: allEntries_log_matching_init,refined_raft_net_invariant.", "destruct H0 as [H0a H0b].", "split.", "+", "shelve.", "+", "destruct H0 as [H0a' H0b'].", "qsimpl time: 1 use: allEntries_log_matching_init,refined_raft_net_invariant."], "tactic": "apply (proj1 (rlmli h e e' H2 H3 H4 H5)).", "exn": "The reference rlmli was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["qsimpl time: 1 use: refined_raft_net_invariant.", "qsimpl time: 1 use: allEntries_log_matching_init,refined_raft_net_invariant.", "destruct H0 as [H0a H0b].", "split.", "+", "shelve.", "+", "destruct H0 as [H0a' H0b'].", "qsimpl time: 1 use: allEntries_log_matching_init,refined_raft_net_invariant."], "tactic": "apply (proj2 (rlmli h e e' H2 H3 H4 H5)).", "exn": "The reference rlmli was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["qsimpl time: 1 use: refined_raft_net_invariant.", "qsimpl time: 1 use: allEntries_log_matching_init,refined_raft_net_invariant.", "destruct H0 as [H0a H0b].", "split.", "+", "shelve.", "+", "destruct H0 as [H0a' H0b'].", "qsimpl time: 1 use: allEntries_log_matching_init,refined_raft_net_invariant."], "tactic": "destruct H0 as [H0a H0b].", "exn": "H0a is already used.", "type": "used_var", "handled": true}, {"ctx": ["qsimpl time: 1 use: refined_raft_net_invariant.", "qsimpl time: 1 use: allEntries_log_matching_init,refined_raft_net_invariant.", "destruct H0 as [H0a H0b].", "split.", "+", "shelve.", "+", "destruct H0 as [H0a' H0b'].", "qsimpl time: 1 use: allEntries_log_matching_init,refined_raft_net_invariant."], "tactic": "destruct H0 as [H0a' H0b].", "exn": "H0b is already used.", "type": "used_var", "handled": true}, {"ctx": ["qsimpl time: 1 use: refined_raft_net_invariant.", "qsimpl time: 1 use: allEntries_log_matching_init,refined_raft_net_invariant.", "destruct H0 as [H0a H0b].", "split.", "+", "shelve.", "+", "destruct H0 as [H0a' H0b'].", "qsimpl time: 1 use: allEntries_log_matching_init,refined_raft_net_invariant.", "destruct H0 as [H0a' H0b']."], "tactic": "split.", "exn": "In environment orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params H : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net entries_contiguous_nw_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_contiguous_nw net entries_gt_0_nw_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_gt_0_nw net entries_sorted_nw_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_sorted_nw net entries_gt_0_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_gt_0 net entries_contiguous_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_contiguous net entries_sorted_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_sorted net entries_match_invariant : forall (net : network) (h h' : name), refined_raft_intermediate_reachable net -> entries_match (log (snd (nwState net h))) (log (snd (nwState net h'))) entries_match_nw_1_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_match_nw_1 net entries_match_nw_host_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_match_nw_host net allEntries_gt_0_invariant : forall (net : network) (h : name) (e : entry), refined_raft_intermediate_reachable net -> In e (map snd (allEntries (fst (nwState net h)))) -> eIndex e > 0 leader_sublog_invariant_invariant : forall net : network, raft_intermediate_reachable net -> leader_sublog_invariant net allEntries_leader_sublog_invariant : forall net : network, refined_raft_intermediate_reachable net -> allEntries_leader_sublog net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (GhostSimulations.deghost net) H0a : allEntries_log_matching step_async_init H0b : allEntries_log_matching_nw step_async_init xs : list packet p : packet ys : list packet net : network st' : name -> electionsData * raft_data ps' : list packet gd : electionsData d : raft_data m : msg t : term n : name pli : logIndex plt : term es : list entry ci : logIndex H2 : gd = update_elections_data_appendEntries (pDst p) (nwState net (pDst p)) t n pli plt es ci H3 : pBody p = AppendEntries t n pli plt es ci H4 : allEntries_log_matching_inductive net H5 : refined_raft_intermediate_reachable net H6 : nwPackets net = xs ++ p :: ys H7 : forall h : name, st' h = update name_eq_dec (nwState net) (pDst p) (gd, d) h H8 : forall p' : packet, In p' ps' -> In p' (xs ++ ys) \\\\/ p' = {| pSrc := pDst p; pDst := pSrc p; pBody := m |} H9 : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net H0a' : allEntries_log_matching step_async_init H0b' : allEntries_log_matching_nw step_async_init e, e' : entry h : name p0 : packet t0 : term leaderId : name prevLogIndex : logIndex prevLogTerm : term entries : list entry leaderCommit : logIndex H0 : In p0 (nwPackets {| nwPackets := ps'; nwState := st' |}) H1 : pBody p0 = AppendEntries t0 leaderId prevLogIndex prevLogTerm entries leaderCommit H10 : In e entries H11 : In e' (map snd (allEntries (fst (nwState {| nwPackets := ps'; nwState := st' |} h)))) H12 : eTerm e = eTerm e' H13 : eIndex e = eIndex e' Unable to unify \"e'\" with \"e\".", "type": "cannot_unify", "handled": true}, {"ctx": ["qsimpl time: 1 use: refined_raft_net_invariant.", "qsimpl time: 1 use: allEntries_log_matching_init,refined_raft_net_invariant.", "destruct H0 as [H0a H0b].", "split.", "+", "shelve.", "+", "destruct H0 as [H0a' H0b'].", "qsimpl time: 1 use: allEntries_log_matching_init,refined_raft_net_invariant.", "destruct H0 as [H0a' H0b'].", "qsimpl time: 1 use: allEntries_log_matching_init,refined_raft_net_invariant."], "tactic": "apply (proj1 (lsi h e e' H2 H3 H4 H5)).", "exn": "The reference lsi was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["qsimpl time: 1 use: refined_raft_net_invariant.", "qsimpl time: 1 use: allEntries_log_matching_init,refined_raft_net_invariant.", "destruct H0 as [H0a H0b].", "split.", "+", "shelve.", "+", "destruct H0 as [H0a' H0b'].", "qsimpl time: 1 use: allEntries_log_matching_init,refined_raft_net_invariant.", "destruct H0 as [H0a' H0b'].", "qsimpl time: 1 use: allEntries_log_matching_init,refined_raft_net_invariant."], "tactic": "apply (proj2 (lsi h e e' H2 H3 H4 H5)).", "exn": "The reference lsi was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["qsimpl time: 1 use: refined_raft_net_invariant.", "qsimpl time: 1 use: allEntries_log_matching_init,refined_raft_net_invariant.", "destruct H0 as [H0a H0b].", "split.", "+", "shelve.", "+", "destruct H0 as [H0a' H0b'].", "qsimpl time: 1 use: allEntries_log_matching_init,refined_raft_net_invariant.", "destruct H0 as [H0a' H0b'].", "qsimpl time: 1 use: allEntries_log_matching_init,refined_raft_net_invariant."], "tactic": "destruct H0 as [H0a H0b].", "exn": "H0a is already used.", "type": "used_var", "handled": true}, {"ctx": ["qsimpl time: 1 use: refined_raft_net_invariant.", "qsimpl time: 1 use: allEntries_log_matching_init,refined_raft_net_invariant.", "destruct H0 as [H0a H0b].", "split.", "+", "shelve.", "+", "destruct H0 as [H0a' H0b'].", "qsimpl time: 1 use: allEntries_log_matching_init,refined_raft_net_invariant.", "destruct H0 as [H0a' H0b'].", "qsimpl time: 1 use: allEntries_log_matching_init,refined_raft_net_invariant."], "tactic": "destruct H0 as [H0a' H0b].", "exn": "H0b is already used.", "type": "used_var", "handled": true}, {"ctx": ["qsimpl time: 1 use: refined_raft_net_invariant.", "qsimpl time: 1 use: allEntries_log_matching_init,refined_raft_net_invariant.", "destruct H0 as [H0a H0b].", "split.", "+", "shelve.", "+", "destruct H0 as [H0a' H0b'].", "qsimpl time: 1 use: allEntries_log_matching_init,refined_raft_net_invariant.", "destruct H0 as [H0a' H0b'].", "qsimpl time: 1 use: allEntries_log_matching_init,refined_raft_net_invariant.", "destruct H0 as [H0a' H0b']."], "tactic": "split.", "exn": "In environment orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params H : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net entries_contiguous_nw_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_contiguous_nw net entries_gt_0_nw_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_gt_0_nw net entries_sorted_nw_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_sorted_nw net entries_gt_0_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_gt_0 net entries_contiguous_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_contiguous net entries_sorted_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_sorted net entries_match_invariant : forall (net : network) (h h' : name), refined_raft_intermediate_reachable net -> entries_match (log (snd (nwState net h))) (log (snd (nwState net h'))) entries_match_nw_1_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_match_nw_1 net entries_match_nw_host_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_match_nw_host net allEntries_gt_0_invariant : forall (net : network) (h : name) (e : entry), refined_raft_intermediate_reachable net -> In e (map snd (allEntries (fst (nwState net h)))) -> eIndex e > 0 leader_sublog_invariant_invariant : forall net : network, raft_intermediate_reachable net -> leader_sublog_invariant net allEntries_leader_sublog_invariant : forall net : network, refined_raft_intermediate_reachable net -> allEntries_leader_sublog net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (GhostSimulations.deghost net) H0a : allEntries_log_matching step_async_init H0b : allEntries_log_matching_nw step_async_init xs : list packet p : packet ys : list packet net : network st' : name -> electionsData * raft_data ps' : list packet gd : electionsData d : raft_data m : msg t : term n : name pli : logIndex plt : term es : list entry ci : logIndex H2 : gd = update_elections_data_appendEntries (pDst p) (nwState net (pDst p)) t n pli plt es ci H3 : pBody p = AppendEntries t n pli plt es ci H4 : allEntries_log_matching_inductive net H5 : refined_raft_intermediate_reachable net H6 : nwPackets net = xs ++ p :: ys H7 : forall h : name, st' h = update name_eq_dec (nwState net) (pDst p) (gd, d) h H8 : forall p' : packet, In p' ps' -> In p' (xs ++ ys) \\\\/ p' = {| pSrc := pDst p; pDst := pSrc p; pBody := m |} H1 : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net H0a' : allEntries_log_matching step_async_init H0b' : allEntries_log_matching_nw step_async_init e, e' : entry h : name p0 : packet t0 : term leaderId : name prevLogIndex : logIndex prevLogTerm : term entries : list entry leaderCommit : logIndex H0 : In p0 (nwPackets {| nwPackets := ps'; nwState := st' |}) H9 : pBody p0 = AppendEntries t0 leaderId prevLogIndex prevLogTerm entries leaderCommit H10 : In e entries H11 : In e' (map snd (allEntries (fst (nwState {| nwPackets := ps'; nwState := st' |} h)))) H12 : eTerm e = eTerm e' H13 : eIndex e = eIndex e' Unable to unify \"e'\" with \"e\".", "type": "cannot_unify", "handled": true}, {"ctx": ["qsimpl time: 1 use: refined_raft_net_invariant.", "qsimpl time: 1 use: allEntries_log_matching_init,refined_raft_net_invariant.", "destruct H0 as [H0a H0b].", "split.", "+", "shelve.", "+", "destruct H0 as [H0a' H0b'].", "qsimpl time: 1 use: allEntries_log_matching_init,refined_raft_net_invariant.", "destruct H0 as [H0a' H0b'].", "qsimpl time: 1 use: allEntries_log_matching_init,refined_raft_net_invariant.", "destruct H0 as [H0a' H0b'].", "qsimpl time: 1 use: allEntries_log_matching_init,refined_raft_net_invariant."], "tactic": "apply (proj1 (allEntries_log_matching h e e' H2 H3 H4 H5)).", "exn": "The reference e' was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["qsimpl time: 1 use: refined_raft_net_invariant.", "qsimpl time: 1 use: allEntries_log_matching_init,refined_raft_net_invariant.", "destruct H0 as [H0a H0b].", "split.", "+", "shelve.", "+", "destruct H0 as [H0a' H0b'].", "qsimpl time: 1 use: allEntries_log_matching_init,refined_raft_net_invariant.", "destruct H0 as [H0a' H0b'].", "qsimpl time: 1 use: allEntries_log_matching_init,refined_raft_net_invariant.", "destruct H0 as [H0a' H0b'].", "qsimpl time: 1 use: allEntries_log_matching_init,refined_raft_net_invariant."], "tactic": "apply (proj2 (allEntries_log_matching h e e' H2 H3 H4 H5)).", "exn": "The reference e' was not found in the current environment.", "type": "ref_not_found", "handled": true}]}, "chat": [], "original": "apply refined_raft_net_invariant. - apply allEntries_log_matching_init. - intros. destruct H0 as [H0a H0b]. split. + apply (proj1 (aelsi h e e' H2 H3 H4 H5)). auto. + apply (proj2 (aelsi h e e' H2 H3 H4 H5)). auto. - intros. destruct H0 as [H0a H0b]. split. ++ apply (proj1 (rlmli h e e' H2 H3 H4 H5)). auto. ++ apply (proj2 (rlmli h e e' H2 H3 H4 H5)). auto. - intros. destruct H0 as [H0a H0b]. split. +++ apply (proj1 (lsi h e e' H2 H3 H4 H5)). auto. +++ apply (proj2 (lsi h e e' H2 H3 H4 H5)). auto. - intros. destruct H0 as [H0a H0b]. split. * apply (proj1 (allEntries_log_matching h e e' H2 H3 H4 H5)). auto. * apply (proj2 (allEntries_log_matching h e e' H2 H3 H4 H5)). auto.", "back_times": 0, "succ": false, "time": 286.2654628753662}]