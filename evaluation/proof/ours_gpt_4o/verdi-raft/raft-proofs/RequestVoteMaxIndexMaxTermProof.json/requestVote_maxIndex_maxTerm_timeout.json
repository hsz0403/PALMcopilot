[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": ["constructor."], "tactic": "intros net H.", "exn": "net is already used.", "type": "used_var", "handled": true}, {"ctx": ["constructor."], "tactic": "intros net' H.", "exn": "H is already used.", "type": "used_var", "handled": true}, {"ctx": ["constructor."], "tactic": "intros net' H'.", "exn": "No product even after head-reduction.", "type": "no_product", "handled": true}, {"ctx": ["constructor."], "tactic": "intros t h p n mi mt Ht Htype Hp Hbody Hsrc.", "exn": "t is already used.", "type": "used_var", "handled": true}, {"ctx": ["constructor."], "tactic": "intros t' h p n mi mt Ht Htype Hp Hbody Hsrc.", "exn": "h is already used.", "type": "used_var", "handled": true}, {"ctx": ["constructor."], "tactic": "intros t' h' p n mi mt Ht Htype Hp Hbody Hsrc.", "exn": "p is already used.", "type": "used_var", "handled": true}, {"ctx": ["constructor."], "tactic": "intros t' h' p' n mi mt Ht Htype Hp Hbody Hsrc.", "exn": "n is already used.", "type": "used_var", "handled": true}, {"ctx": ["constructor."], "tactic": "intros t' h' p' n' mi mt Ht Htype Hp Hbody Hsrc.", "exn": "mi is already used.", "type": "used_var", "handled": true}, {"ctx": ["constructor."], "tactic": "intros t' h' p' n' mi' mt Ht Htype Hp Hbody Hsrc.", "exn": "mt is already used.", "type": "used_var", "handled": true}, {"ctx": ["constructor."], "tactic": "intros t' h' p' n' mi' mt' Ht Htype Hp Hbody Hsrc.", "exn": "No product even after head-reduction.", "type": "no_product", "handled": true}, {"ctx": ["constructor.", "pose proof (requestVote_term_sanity_invariant net) as Hsanity."], "tactic": "apply Hsanity in H.", "exn": "Unable to apply lemma of type \"refined_raft_intermediate_reachable net -> requestVote_term_sanity net\" on hypothesis of type \"handleTimeout h (snd (nwState net h)) = (out, d, l)\".", "type": "cannot_apply_in", "handled": true}, {"ctx": ["constructor.", "pose proof (requestVote_term_sanity_invariant net) as Hsanity.", "qsimpl time: 1."], "tactic": "specialize (H t h mi mt p Hp Hbody).", "exn": "The reference Hbody was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["constructor.", "pose proof (requestVote_term_sanity_invariant net) as Hsanity.", "qsimpl time: 1."], "tactic": "split; auto.", "exn": "In environment orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params net : network h : name st' : name -> electionsData * raft_data ps' : list packet out : list raft_output d : raft_data l : list (name * msg) H : handleTimeout h (snd (nwState net h)) = (out, d, l) H1 : requestVote_maxIndex_maxTerm net H2 : refined_raft_intermediate_reachable net H3 : forall h' : name, st' h' = update name_eq_dec (nwState net) h (update_elections_data_timeout h (nwState net h), d) h' H4 : forall p' : packet, In p' ps' -> In p' (nwPackets net) \\\\/ In p' (map (fun m : name * msg => {| pSrc := h; pDst := fst m; pBody := snd m |}) l) p : packet n : name mi : logIndex mt : term H6 : type (snd (st' (pSrc p))) = Candidate H7 : In p ps' H8 : pBody p = RequestVote (currentTerm (snd (st' (pSrc p)))) n mi mt H10 : requestVote_term_sanity net requestVote_term_sanity_invariant : forall net : network, refined_raft_intermediate_reachable net -> requestVote_term_sanity net refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (GhostSimulations.deghost net) Unable to unify \"mi\" with \"maxIndex (log (snd (st' (pSrc p))))\".", "type": "cannot_unify", "handled": true}]}, "chat": [], "original": "constructor. intros net H. unfold requestVote_maxIndex_maxTerm. intros t h p n mi mt Ht Htype Hp Hbody Hsrc. pose proof (requestVote_term_sanity_invariant net) as Hsanity. apply Hsanity in H. unfold requestVote_term_sanity in H. specialize (H t h mi mt p Hp Hbody). split; auto.", "back_times": 0, "succ": false, "time": 210.6224000453949}]