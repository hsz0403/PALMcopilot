[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": [], "tactic": "intros h st t n pli plt es ci st' m H H0.", "exn": "No product even after head-reduction.", "type": "no_product", "handled": true}, {"ctx": ["intros."], "tactic": "apply handleAppendEntries_type_term in H.", "exn": "Unable to apply lemma of type \"forall (h0 : name) (st : raft_data) (t0 : term) (n : name) (pli : logIndex) (plt : term) (es : list entry) (ci : logIndex) (st' : raft_data) (ps : msg), handleAppendEntries h0 st t0 n pli plt es ci = (st', ps) -> type st' = type st /\\\\ currentTerm st' = currentTerm st \\\\/ type st' = Follower /\\\\ currentTerm st' >= currentTerm st\" on hypothesis of type \"refined_raft_intermediate_reachable net\".", "type": "cannot_apply_in", "handled": true}, {"ctx": ["intros.", "qsimpl time: 1 use: handleAppendEntries_type_term."], "tactic": ["destruct H as [[H1 _] | [H1 _]].", ""], "exn": "Expects a disjunctive pattern with 6 branches.", "type": "num_branch", "handled": false}]}, "chat": [], "original": "intros h st t n pli plt es ci st' m H H0. apply handleAppendEntries_type_term in H. destruct H as [[H1 _] | [H1 _]]. - congruence. - rewrite H0 in H1. discriminate H1.", "back_times": 0, "succ": false, "time": 101.31477808952332}]