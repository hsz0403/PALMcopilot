[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": ["intros net net' d h d' H_reboot H_prop H_reachable H_state H_update H_packets."], "tactic": ["apply log_matching_invariant.", ""], "exn": "Applied theorem does not have enough premises.", "type": "no_enough_premises", "handled": false}]}, "chat": [], "original": "intros net net' d h d' H_reboot H_prop H_reachable H_state H_update H_packets. apply log_matching_invariant. - apply H_reachable. - intros h' e He. unfold log_matching. split. -- unfold log_matching_hosts. split. ++ intros h1 h2. specialize (He h1 h2). unfold entries_match in *. intros i e1 e2 He1 He2. specialize (He i e1 e2). apply He. ** rewrite H_update. auto. ** rewrite H_update. auto. ++ unfold log_matching_hosts in H_prop. destruct H_prop as [_ H_ex]. intros h1 i H_i. specialize (He h1 i). unfold entries_match in He. specialize (He (log (nwState net' h1))). destruct He as [e [He1 He2]]. exists e. split. ** auto. ** rewrite H_update. auto. -- intros h' e He. unfold log_matching_hosts in H_prop. destruct H_prop as [_ [_ H_gt]]. rewrite H_update. apply H_gt. auto. - intros h' p t leaderId prevLogIndex prevLogTerm entries' leaderCommit Hp Heq. unfold log_matching_nw in H_prop. intros e He. specialize (H_prop p t leaderId prevLogIndex prevLogTerm entries' leaderCommit Hp Heq). rewrite H_update. apply H_prop. auto.", "back_times": 0, "succ": false, "time": 78.23607969284058}]