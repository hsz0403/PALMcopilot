[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": ["intros h h' t st t' ll' r H.", "destruct st as [ed rd]."], "tactic": "destruct (type (snd (ed, rd))) eqn:TypeEq.", "exn": "In environment orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params rri : raft_refinement_interface llli : logs_leaderLogs_interface lltsi : leaderLogs_term_sanity_interface llcei : leaderLogs_candidate_entries_interface ollpti : one_leaderLog_per_term_interface vci : votes_correct_interface cci : cronies_correct_interface h : list packet h' : packet t, ed : list packet rd : Net.name -> data t' : name -> data ll' : list packet r : GhostSimulations.ghost_data H : raft_data The term \"snd (ed, rd)\" has type \"Net.name -> data\" while it is expected to have type \"RaftState.raft_data term name entry logIndex serverType data clientId output\".", "type": "wrong_type", "handled": true}]}, "chat": [], "original": "intros h h' t st t' ll' r H. destruct st as [ed rd]. simpl in H. unfold update_elections_data_requestVoteReply in H. destruct (type (snd (ed, rd))) eqn:TypeEq. - left. auto. - simpl in *. destruct (eq_nat_dec t (currentTerm rd)). + destruct r eqn:Req. * right. split. reflexivity. split. auto. split. apply update_elections_data_requestVoteReply_leaderLogs with (h := h) (r := true); auto. split. auto. assert (H0: type (snd (ed, rd)) = Candidate /\\ wonElection (dedup name_eq_dec (votesReceived rd)) = true) by (apply SpecLemmas.handleRequestVoteReply_spec' with (h := h) (st := rd) (h' := h') (t := t') (r := true); auto). destruct H0 as [_ H0]. apply H0. * left. apply update_elections_data_requestVoteReply_leaderLogs; auto. + apply update_elections_data_requestVoteReply_leaderLogs with (h := h) in H. left. auto. - left. auto.", "back_times": 0, "succ": false, "time": 153.13414359092712}]