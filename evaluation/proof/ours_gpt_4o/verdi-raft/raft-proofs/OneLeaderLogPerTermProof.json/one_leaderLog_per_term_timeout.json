[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": ["intros q1 q2 H_noDup_q1 H_noDup_q2 H_length_q1 H_length_q2."], "tactic": "apply div2_correct in H_length_q1.", "exn": "Unable to apply lemma of type \"forall c a b : nat, a > div2 c -> b > div2 c -> a + b > c\" on hypothesis of type \"electionsData\".", "type": "cannot_apply_in", "handled": true}, {"ctx": ["intros q1 q2 H_noDup_q1 H_noDup_q2 H_length_q1 H_length_q2.", "qsimpl time: 1 use: div2_correct."], "tactic": "apply div2_correct in H_length_q2.", "exn": "Unable to apply lemma of type \"forall c a b : nat, a > div2 c -> b > div2 c -> a + b > c\" on hypothesis of type \"list raft_output\".", "type": "cannot_apply_in", "handled": true}, {"ctx": ["intros q1 q2 H_noDup_q1 H_noDup_q2 H_length_q1 H_length_q2.", "qsimpl time: 1 use: div2_correct.", "qsimpl time: 1 use: div2_correct."], "tactic": "apply pigeon with (l := nodes) in H_length_q1; auto.", "exn": "No such hypothesis: H_length_q1", "type": "no_hypos", "handled": true}, {"ctx": ["intros q1 q2 H_noDup_q1 H_noDup_q2 H_length_q1 H_length_q2.", "qsimpl time: 1 use: div2_correct.", "qsimpl time: 1 use: div2_correct.", "qsimpl time: 1 use: div2_correct,pigeon,nodes."], "tactic": "exists a.", "exn": "The reference a was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros q1 q2 H_noDup_q1 H_noDup_q2 H_length_q1 H_length_q2.", "qsimpl time: 1 use: div2_correct.", "qsimpl time: 1 use: div2_correct.", "qsimpl time: 1 use: div2_correct,pigeon,nodes."], "tactic": "destruct H_length_q1 as [H_in_q1 H_in_q2].", "exn": "The reference H_length_q1 was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros q1 q2 H_noDup_q1 H_noDup_q2 H_length_q1 H_length_q2.", "qsimpl time: 1 use: div2_correct.", "qsimpl time: 1 use: div2_correct.", "qsimpl time: 1 use: div2_correct,pigeon,nodes.", "destruct H_noDup_q1 as [H_in_q1 H_in_q2]."], "tactic": "split; auto.", "exn": "Not an inductive product.", "type": "not_inductive_product", "handled": true}, {"ctx": ["intros q1 q2 H_noDup_q1 H_noDup_q2 H_length_q1 H_length_q2.", "qsimpl time: 1 use: div2_correct.", "qsimpl time: 1 use: div2_correct.", "qsimpl time: 1 use: div2_correct,pigeon,nodes.", "destruct H_noDup_q1 as [H_in_q1 H_in_q2].", "qsimpl time: 1 use: div2_correct,pigeon,nodes."], "tactic": "apply no_dup_nodes.", "exn": "In environment orig_base_params : BaseParams raft_params : RaftParams orig_base_params X : list name H6 : forall A : Type, (forall x y : A, {x = y} + {x = y -> False}) -> forall l sub1 sub2 : list A, (forall a : A, In a sub1 -> In a l) -> (forall a : A, In a sub2 -> In a l) -> NoDup l -> NoDup sub1 -> NoDup sub2 -> length sub1 + length sub2 > length l -> exists a : A, In a sub1 /\\\\ In a sub2 H : forall c a b : nat, a > div2 c -> b > div2 c -> a + b > c one_node_params : OneNodeParams orig_base_params q1 : network q2 : name H_noDup_q1 : name -> electionsData * raft_data H_noDup_q2 : list packet H_length_q2 : list raft_output d : raft_data l : list (name * msg) H0 : handleTimeout q2 (snd (nwState q1 q2)) = (H_length_q2, d, l) H2 : one_leaderLog_per_term q1 H3 : refined_raft_intermediate_reachable q1 H4 : forall h' : name, H_noDup_q1 h' = update name_eq_dec (nwState q1) q2 (update_elections_data_timeout q2 (nwState q1 q2), d) h' H5 : forall p' : packet, In p' H_noDup_q2 -> In p' (nwPackets q1) \\\\/ In p' (map (fun m : name * msg => {| pSrc := q2; pDst := fst m; pBody := snd m |}) l) leaderLogs_term_sanity_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaderLogs_term_sanity net leaderLogs_currentTerm_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaderLogs_currentTerm_sanity net leaderLogs_currentTerm_sanity_candidate_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaderLogs_currentTerm_sanity_candidate net votes_votesWithLog_correspond_invariant : forall net : network, refined_raft_intermediate_reachable net -> votes_votesWithLog_correspond net cronies_correct_invariant : forall net : network, refined_raft_intermediate_reachable net -> cronies_correct net votes_correct_invariant : forall net : network, refined_raft_intermediate_reachable net -> votes_correct net leaderLogs_votesWithLog_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaderLogs_votesWithLog net refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (deghost net) H_in_q1 : electionsData H_in_q2 : raft_data Unable to unify \"NoDup Net.nodes\" with \"forall (h h' : Net.name) (t : term) (ll ll' : list entry), In (t, ll) (leaderLogs (fst (nwState {| nwPackets := H_noDup_q2; nwState := H_noDup_q1 |} h))) -> In (t, ll') (leaderLogs (fst (nwState {| nwPackets := H_noDup_q2; nwState := H_noDup_q1 |} h'))) -> h = h' /\\\\ ll = ll'\".", "type": "cannot_unify", "handled": true}]}, "chat": [], "original": "intros q1 q2 H_noDup_q1 H_noDup_q2 H_length_q1 H_length_q2. apply div2_correct in H_length_q1. apply div2_correct in H_length_q2. apply pigeon with (l := nodes) in H_length_q1; auto. exists a. destruct H_length_q1 as [H_in_q1 H_in_q2]. split; auto. apply no_dup_nodes.", "back_times": 0, "succ": false, "time": 153.35947060585022}]