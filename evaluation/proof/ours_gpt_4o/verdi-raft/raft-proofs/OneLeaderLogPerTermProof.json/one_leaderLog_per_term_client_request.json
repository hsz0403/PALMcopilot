[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": ["intros net net' Hstate Hpackets Hinv Hreach."], "tactic": "apply one_leaderLog_per_term_invariant in Hreach.", "exn": "Unable to apply lemma of type \"forall net0 : network, refined_raft_intermediate_reachable net0 -> one_leaderLog_per_term net0\" on hypothesis of type \"list raft_output\".", "type": "cannot_apply_in", "handled": true}, {"ctx": ["intros net net' Hstate Hpackets Hinv Hreach.", "qsimpl time: 1 use: one_leaderLog_per_term_invariant.", "unfold one_leaderLog_per_term in *.", "intros h h' t ll ll' Hin1 Hin2."], "tactic": "specialize (Hreach h h' t ll ll' Hin1 Hin2) as [Hhost Hlog].", "exn": "Illegal application (Non-functional construction): The expression \"Hreach\" of type \"list raft_output\" cannot be applied to the term \"h\" : \"Net.name\"", "type": "exp_cannot_apply", "handled": true}]}, "chat": [], "original": "intros net net' Hstate Hpackets Hinv Hreach. apply one_leaderLog_per_term_invariant in Hreach. unfold one_leaderLog_per_term in *. intros h h' t ll ll' Hin1 Hin2. specialize (Hreach h h' t ll ll' Hin1 Hin2) as [Hhost Hlog]. split. - apply (Hstate h). now apply Hhost. - apply Hlog. now apply (Hpackets (existT (fun nh : Net.name => (t, ll) = (t, ll')) h eq_refl)).", "back_times": 0, "succ": false, "time": 198.9881649017334}]