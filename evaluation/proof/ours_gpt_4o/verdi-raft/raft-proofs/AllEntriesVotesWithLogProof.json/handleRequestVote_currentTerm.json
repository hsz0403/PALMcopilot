[{"history": {"proof": "intros h st t src lli llt st' m H. pose proof handleRequestVote_currentTerm as HcurrentTerm. apply HcurrentTerm with (h := h) (h' := src) (st := st) (t := t) (lli := lli) (llt := llt) (st' := st') (m := m). apply H.", "repairs": ["", "", "", ""], "exceptions": []}, "chat": [{"role": "user", "content": "Help me to prove a theorem in Coq, based on provided proof states including hypotheses and goals. Give a complete proof in only one single code block without explanations, extra definitions. Give a complete proof in one response, only give the proof body, without repeating the definition and \"Proof.\". Avoid existing names when using intros. Write the commands separately, without \";\" and \"[cmd|cmd]\". Use bullets for structure, NEVER use \"{\" and \"}\". When -, + and * are used out, proceed to double versions like --, ++, etc. For example, given proof state:\nn, m: nat\nIHn: m + n = n + m\n============================\nm + S n = S n + m\nThe hypotheses n, m: nat and IHn: m + n = n + m are given first, then the goal, m + S n = S n + m, separated by =. Expect a response like: \n```coq\nsimpl. rewrite <- IHn. auto.``` \nYou do not intros any terms because all terms have already been introduced.\n\nWhen I give:\nforall n m : nat, m + n = n + m\n============================\nn, m: nat\nyour answer should be like:\n```coq\nintros n m. induction n.\n- simpl. auto.\n- simpl. rewrite <- IHn. auto.\nQed.```\nDefinitions and lemmas related to the proof will be provided, use them accordingly.\n\n\nSolve This Proof State:\n\nHypotheses:\norig_base_params: BaseParams\none_node_params: OneNodeParams orig_base_params\nraft_params: RaftParams orig_base_params\nrri: raft_refinement_interface\naeli: allEntries_log_interface\nvwltsi: votesWithLog_term_sanity_interface\nvvwlci: votes_votesWithLog_correspond_interface\nvci: votes_correct_interface\n\nGoal:\nforall (h : name) (st : RaftState.raft_data term name entry logIndex serverType data clientId output) (t : nat) (src : fin N) (lli llt : nat) (st' : raft_data) (m : msg), handleRequestVote h st t src lli llt = (st', m) -> currentTerm st <= currentTerm st'\n\nPremises:\nRecord RaftParams (orig_base_params : BaseParams) : Type := Build_RaftParams { N : nat; input_eq_dec : forall x y : input, {x = y} + {x <> y}; output_eq_dec : forall x y : output, {x = y} + {x <> y}; clientId : Type; clientId_eq_dec : forall x y : clientId, {x = y} + {x <> y} } Arguments Build_RaftParams _ _%nat_scope (_ _)%function_scope [clientId]%type_scope _%function_scope\ndata = fun BaseParams0 : BaseParams => let (data, _, _) := BaseParams0 in data : BaseParams -> Type Arguments data {BaseParams}\nhandleRequestVote = fun (orig_base_params : BaseParams) (raft_params : RaftParams orig_base_params) (_ : name) (state : RaftState.raft_data term name entry logIndex serverType data clientId output) (t : nat) (candidateId : fin N) (lastLogIndex lastLogTerm : nat) => if t <? currentTerm state then (state, RequestVoteReply (currentTerm state) false) else let state0 := advanceCurrentTerm state t in if (if leaderId state0 then false else true) && moreUpToDate lastLogTerm lastLogIndex (maxTerm (log state0)) (maxIndex (log\nModule RaftState := Struct Record raft_data (term name entry logIndex serverType stateMachineData clientId output : Type) : Type := mkRaft_data { currentTerm : term; votedFor : option name; leaderId : option name; log : list entry; commitIndex : logIndex; lastApplied : logIndex; stateMachine : stateMachineData; nextIndex : list (name * logIndex); matchIndex : list (name * logIndex); shouldSend : bool; votesReceived : list name; type : serverType; clientCache : list (clientId * (nat * output)); electoralVictories : list (term * list name * list entry)\noutput = fun BaseParams0 : BaseParams => let (_, _, output) := BaseParams0 in output : BaseParams -> Type Arguments output {BaseParams}\nname = fun (orig_base_params : BaseParams) (raft_params : RaftParams orig_base_params) => fin N : forall orig_base_params : BaseParams, RaftParams orig_base_params -> Type Arguments name {orig_base_params raft_params}\nNotation currentTerm := (RaftState.currentTerm term name entry logIndex serverType data clientId output)\n*** [ Core.ByteListReader.t : Type -> Type ] Arguments Core.ByteListReader.t _%type_scope\nfin = fix fin (n : nat) : Type := match n with | 0 => False | S n' => option (fin n') end : nat -> Type Arguments fin _%nat_scope\nRecord OneNodeParams (P : BaseParams) : Type := Build_OneNodeParams { init : data; handler : input -> data -> output * data } Arguments Build_OneNodeParams _ _ _%function_scope\nN = fun (orig_base_params : BaseParams) (RaftParams0 : RaftParams orig_base_params) => let (N, _, _, clientId, _) := RaftParams0 in N : forall orig_base_params : BaseParams, RaftParams orig_base_params -> nat Arguments N {orig_base_params RaftParams}\nInductive nat : Set := O : nat | S : nat -> nat Arguments S _%nat_scope\nInductive msg (orig_base_params : BaseParams) (raft_params : RaftParams orig_base_params) : Type := RequestVote : term -> name -> logIndex -> term -> msg | RequestVoteReply : term -> bool -> msg | AppendEntries : term -> name -> logIndex -> term -> list entry -> logIndex -> msg | AppendEntriesReply : term -> list entry -> bool -> msg Arguments msg {orig_base_params raft_params} Arguments RequestVote {orig_base_params raft_params} Arguments RequestVoteReply {orig_base_params raft_params} _ _%bool_scope Arguments AppendEntries {orig_base_params raft_params} _ _ _ _ _%list_scope Arguments Append\nInductive serverType : Set := Follower : serverType | Candidate : serverType | Leader : serverType\nclientId = fun (orig_base_params : BaseParams) (RaftParams0 : RaftParams orig_base_params) => let (_, _, _, clientId, _) := RaftParams0 in clientId : forall orig_base_params : BaseParams, RaftParams orig_base_params -> Type Arguments clientId {orig_base_params RaftParams}\nraft_data = fun (orig_base_params : BaseParams) (raft_params : RaftParams orig_base_params) => RaftState.raft_data term name entry logIndex serverType data clientId output : forall orig_base_params : BaseParams, RaftParams orig_base_params -> Type Arguments raft_data {orig_base_params raft_params}\nRecord entry (orig_base_params : BaseParams) (raft_params : RaftParams orig_base_params) : Type := mkEntry { eAt : name; eClient : clientId; eId : nat; eIndex : logIndex; eTerm : term; eInput : input } Arguments entry {orig_base_params raft_params} Arguments mkEntry {orig_base_params raft_params} _ _ _%nat_scope\nlogIndex = nat : Set\nterm = nat : Set\nhandleRequestVote_currentTerm : forall (st : RaftState.raft_data term name entry logIndex serverType data clientId output) (h : name) (h' : fin N) (t lli llt : nat) (st' : raft_data) (m : msg), handleRequestVote h st t h' lli llt = (st', m) -> currentTerm st <= currentTerm st'\nhandleRequestVote_log : forall (h : name) (st : RaftState.raft_data term name entry logIndex serverType data clientId output) (t : nat) (candidate : fin N) (lli llt : nat) (st' : raft_data) (m : msg), handleRequestVote h st t candidate lli llt = (st', m) -> log st' = log st\nhandleRequestVote_type : forall (st : RaftState.raft_data term name entry logIndex serverType data clientId output) (h : name) (h' : fin N) (t lli llt : nat) (st' : raft_data) (m : msg), handleRequestVote h st t h' lli llt = (st', m) -> type st' = type st /\\ currentTerm st' = currentTerm st \\/ type st' = Follower\nhandleRequestVote_type_term : forall (st : RaftState.raft_data term name entry logIndex serverType data clientId output) (h : name) (h' : fin N) (t lli llt : nat) (st' : raft_data) (m : msg), handleRequestVote h st t h' lli llt = (st', m) -> type st' = type st /\\ currentTerm st' = currentTerm st \\/ type st' = Follower /\\ currentTerm st' >= currentTerm st\nvotes_update_elections_data_request_vote_intro : forall (h : name) (st : electionsData * RaftState.raft_data term name entry logIndex serverType data clientId output) (t : nat) (src : fin N) (lli llt : nat) (st' : raft_data) (m : msg) (h' : name), handleRequestVote h (snd st) t src lli llt = (st', m) -> votedFor st' = Some h' -> currentTerm (snd st) < currentTerm st' \\/ votedFor (snd st) = None -> In (currentTerm st', h') (votes (update_elections_data_requestVote h src t src lli llt st))\nvotes_update_elections_data_request_vote_intro_old : forall (h : name) (st : electionsData * RaftState.raft_data term name entry logIndex serverType data clientId output) (t : nat) (src : fin N) (lli llt : nat) (st' : raft_data) (m : msg) (t' : term) (h' : name), handleRequestVote h (snd st) t src lli llt = (st', m) -> In (t', h') (votes (fst st)) -> In (t', h') (votes (update_elections_data_requestVote h src t src lli llt st))\nvotes_update_elections_data_request_vote : forall (h : name) (st : electionsData * RaftState.raft_data term name entry logIndex serverType data clientId output) (t : nat) (src : fin N) (lli llt : nat) (st' : raft_data) (m : msg) (t' : term) (h' : name), handleRequestVote h (snd st) t src lli llt = (st', m) -> In (t', h') (votes (update_elections_data_requestVote h src t src lli llt st)) -> In (t', h') (votes (fst st)) \\/ t' = currentTerm st' /\\ votedFor st' = Some h'\nvotesWithLog_update_elections_data_request_vote : forall (h : name) (st : electionsData * RaftState.raft_data term name entry logIndex serverType data clientId output) (t : nat) (src : fin N) (lli llt : nat) (st' : raft_data) (m : msg) (t' : term) (h' : name) (l' : list entry), handleRequestVote h (snd st) t src lli llt = (st', m) -> In (t', h', l') (votesWithLog (update_elections_data_requestVote h src t src lli llt st)) -> In (t', h', l') (votesWithLog (fst st)) \\/ t' = currentTerm st' /\\ l' = log st'\nhandleRequestVote_currentTerm_monotonic : forall (pDst : name) (t : nat) (cid : fin N) (lli llt : nat) (d : RaftState.raft_data term name entry logIndex serverType data clientId output) (d' : raft_data) (m : msg), handleRequestVote pDst d t cid lli llt = (d', m) -> currentTerm d <= currentTerm d'\nhandleRequestVote_cases : forall (h : name) (h' : fin N) (t lli llt : nat) (st : RaftState.raft_data term name entry logIndex serverType data clientId output) (st' : raft_data) (m : msg), handleRequestVote h st t h' lli llt = (st', m) -> st' = st \\/ st' = advanceCurrentTerm st t \\/ st' = RaftState.set_raft_data_votedFor term name entry logIndex serverType data clientId output (advanceCurrentTerm st t) (Some h') /\\ (votedFor st = None /\\ currentTerm st = t \\/ currentTerm st < t)\nhandleRequestVote_reply_true' : forall (h : name) (h' : fin N) (st : RaftState.raft_data term name entry logIndex serverType data clientId output) (t lli llt : nat) (st' : raft_data) (t' : term), handleRequestVote h st t h' lli llt = (st', RequestVoteReply t' true) -> t' = t /\\ currentTerm st' = t\nhandleRequestVote_currentTerm_leaderId : forall (h : name) (st : RaftState.raft_data term name entry logIndex serverType data clientId output) (t : nat) (c : fin N) (li lt0 : nat) (st' : raft_data) (m : msg), handleRequestVote h st t c li lt0 = (st', m) -> currentTerm st < currentTerm st' \\/ currentTerm st = currentTerm st' /\\ leaderId st' = leaderId st\nhandleRequestVote_reply_true : forall (h : name) (h' : fin N) (st : RaftState.raft_data term name entry logIndex serverType data clientId output) (t lli llt : nat) (st' : raft_data) (t' : term), handleRequestVote h st t h' lli llt = (st', RequestVoteReply t' true) -> votedFor st' = Some h' /\\ currentTerm st' = t'\nhandleRequestVote_currentTerm_leaderId' : forall (h : name) (st : RaftState.raft_data term name entry logIndex serverType data clientId output) (t : nat) (c : fin N) (li lt0 : nat) (st' : raft_data) (m : msg), handleRequestVote h st t c li lt0 = (st', m) -> votedFor st' <> votedFor st -> currentTerm st < currentTerm st' \\/ leaderId st = None\nhandleRequestVote_votedFor : forall (pDst : name) (t : nat) (cid : fin N) (lli llt : nat) (d : RaftState.raft_data term name entry logIndex serverType data clientId output) (d' : raft_data) (m : msg), handleRequestVote pDst d t cid lli llt = (d', m) -> currentTerm d = currentTerm d' -> votedFor d = None \\/ votedFor d = votedFor d'\nhandleRequestVote_no_append_entries : forall (st : RaftState.raft_data term name entry logIndex serverType data clientId output) (h : name) (h' : fin N) (t lli llt : nat) (st' : raft_data) (m : msg), handleRequestVote h st t h' lli llt = (st', m) -> ~ (exists (t0 : term) (n : name) (prevT : logIndex) (prevI : term) (entries : list entry) (c : logIndex), m = AppendEntries t0 n prevT prevI entries c)\nhandleRequestVote_log_term_type : forall (h : name) (st : RaftState.raft_data term name entry logIndex serverType data clientId output) (t : nat) (c : fin N) (li lt : nat) (st' : raft_data) (m : msg), handleRequestVote h st t c li lt = (st', m) -> log st' = log st /\\ currentTerm st' = currentTerm st /\\ type st' = type st \\/ type st' = Follower\nhandleRequestVote_votesReceived : forall (h : name) (st : RaftState.raft_data term name entry logIndex serverType data clientId output) (t : nat) (c : fin N) (li lt : nat) (st' : raft_data) (m : msg), handleRequestVote h st t c li lt = (st', m) -> votesReceived st' = votesReceived st\nhandleRequestVote_currentTerm_votedFor : forall (pDst : name) (t : nat) (cid : fin N) (lli llt : nat) (d : RaftState.raft_data term name entry logIndex serverType data clientId output) (d' : raft_data) (m : msg), handleRequestVote pDst d t cid lli llt = (d', m) -> currentTerm d < currentTerm d' \\/ currentTerm d = currentTerm d' /\\ votedFor d = None \\/ currentTerm d = currentTerm d' /\\ votedFor d = votedFor d'\nupdate_elections_data_request_vote_votesWithLog_old : forall (h : name) (st : electionsData * RaftState.raft_data term name entry logIndex serverType data clientId output) (t : nat) (src : fin N) (lli llt : nat) (t' : term) (h' : name) (l' : list entry), In (t', h', l') (votesWithLog (fst st)) -> In (t', h', l') (votesWithLog (update_elections_data_requestVote h src t src lli llt st))\nupdate_elections_data_request_vote_votedFor : forall (h : name) (h' : fin N) (cid : name) (t lli llt : nat) (st : electionsData * RaftState.raft_data term name entry logIndex serverType data clientId output) (st' : raft_data) (m : msg), handleRequestVote h (snd st) t h' lli llt = (st', m) -> votedFor st' = Some cid -> votedFor (snd st) = Some cid /\\ currentTerm st' = currentTerm (snd st) \\/ cid = h' /\\ currentTerm st' = t /\\ votesWithLog (update_elections_data_requestVote h h' t h' lli llt st) = (currentTerm st', cid, log st') :: votesWithLog (fst st) /\\ moreUpToDate llt...\nleaderLogs_update_elections_data_requestVote : forall (h src : name) (t : nat) (ci : fin N) (lli llt : nat) (st : electionsData * RaftState.raft_data term name entry logIndex serverType data clientId output), leaderLogs (update_elections_data_requestVote h src t ci lli llt st) = leaderLogs (fst st)\nhandleRequestVote_matchIndex_preserved : forall (n : name) (st : RaftState.raft_data term name entry logIndex serverType data clientId output) (t : nat) (c : fin N) (li lt : nat) (st' : raft_data) (ms : msg), handleRequestVote n st t c li lt = (st', ms) -> matchIndex_preserved st st'\nhandleRequestVote_stateMachine : forall (n : name) (st : RaftState.raft_data term name entry logIndex serverType data clientId output) (t : nat) (c : fin N) (li lt : nat) (st' : raft_data) (ms : msg), handleRequestVote n st t c li lt = (st', ms) -> stateMachine st' = stateMachine st\nhandleRequestVote_clientCache : forall (n : name) (st : RaftState.raft_data term name entry logIndex serverType data clientId output) (t : nat) (c : fin N) (li lt : nat) (st' : raft_data) (ms : msg), handleRequestVote n st t c li lt = (st', ms) -> clientCache st' = clientCache st\nCommonTheorems.handleRequestVote_same_lastApplied : forall (n : name) (st : RaftState.raft_data term name entry logIndex serverType data clientId output) (t : nat) (c : fin N) (li lt : nat) (st' : raft_data) (ms : msg), handleRequestVote n st t c li lt = (st', ms) -> lastApplied st' = lastApplied st\nCommonTheorems.handleRequestVote_same_log : forall (n : name) (st : RaftState.raft_data term name entry logIndex serverType data clientId output) (t : nat) (c : fin N) (li lt : nat) (st' : raft_data) (ms : msg), handleRequestVote n st t c li lt = (st', ms) -> log st' = log st\nCommonTheorems.handleRequestVote_same_commitIndex : forall (n : name) (st : RaftState.raft_data term name entry logIndex serverType data clientId output) (t : nat) (c : fin N) (li lt : nat) (st' : raft_data) (ms : msg), handleRequestVote n st t c li lt = (st', ms) -> commitIndex st' = commitIndex st\nhandleAppendEntriesReply_currentTerm : forall (h : name) (st : RaftState.raft_data term name entry logIndex serverType data clientId output) (h' : name) (t : nat) (es : list entry) (r : bool) (st' : raft_data) (ms : list (name * msg)), handleAppendEntriesReply h st h' t es r = (st', ms) -> currentTerm st <= currentTerm st'\nhandleRequestVoteReply_currentTerm' : forall (h : name) (st : RaftState.raft_data term name entry logIndex serverType data clientId output) (h' : name) (t : nat) (r : bool) (st' : raft_data), handleRequestVoteReply h st h' t r = st' -> currentTerm st <= currentTerm st'"}, {"role": "assistant", "content": "```coq\nintros h st t src lli llt st' m H.\npose proof handleRequestVote_currentTerm as HcurrentTerm.\napply HcurrentTerm with (h := h) (h' := src) (st := st) (t := t) (lli := lli) (llt := llt) (st' := st') (m := m).\nexact H.\nQed.\n```"}], "original": "intros h st t src lli llt st' m H. pose proof handleRequestVote_currentTerm as HcurrentTerm. apply HcurrentTerm with (h := h) (h' := src) (st := st) (t := t) (lli := lli) (llt := llt) (st' := st') (m := m). apply H.", "back_times": 0, "succ": true, "time": 5.794241428375244}]