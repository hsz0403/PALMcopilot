[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": ["hnf."], "tactic": "intros net st' ps' gd d os d' ms h H0 H1 H2 H3 H4.", "exn": "No product even after head-reduction.", "type": "no_product", "handled": true}, {"ctx": ["hnf.", "intros."], "tactic": "assert (msg_refined_raft_intermediate_reachable (deghost net)) as RR.", "exn": "In environment orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params rmri : raft_msg_refinement_interface rlmli : refined_log_matching_lemmas_interface glci : ghost_log_correct_interface lphogli : log_properties_hold_on_ghost_logs_interface tsi : term_sanity_interface aelsi : allEntries_leader_sublog_interface glaei : ghost_log_allEntries_interface net, net' : network gd : ghost_data d : RaftState.raft_data term name entry logIndex serverType data clientId output h : Net.name d' : raft_data H : reboot d = d' H0 : ghost_log_entries_match net H1 : msg_refined_raft_intermediate_reachable net H2 : nwState net h = (gd, d) H3 : forall h' : Net.name, nwState net' h' = update name_eq_dec (nwState net) h (gd, d') h' H4 : nwPackets net = nwPackets net' The term \"net\" has type \"@network (@raft_refined_base_params orig_base_params one_node_params raft_params) (@raft_msg_refined_multi_params orig_base_params one_node_params raft_params)\" while it is expected to have type \"@network (@refined_base_params (@base_params orig_base_params raft_params) (@multi_params orig_base_params one_node_params raft_params) (@elections_ghost_params orig_base_params one_node_params raft_params)) (@refined_multi_params (@base_params orig_base_params raft_params) (@multi_params orig_base_params one_node_params raft_params) (@elections_ghost_params orig_base_params one_node_params raft_params))\" (cannot unify \"raft_msg_refined_multi_params\" and \"refined_multi_params\").", "type": "wrong_type", "handled": true}]}, "chat": [], "original": "hnf. intros net st' ps' gd d os d' ms h H0 H1 H2 H3 H4. assert (msg_refined_raft_intermediate_reachable (deghost net)) as RR. - eapply deghost_spec; eauto. eapply glci in RR. unfold ghost_log_entries_match. intros h' p HIn. destruct H3 with (h':=h') as [gd' eq]. unfold msg_log_property. eapply lphogli. + eauto. + rewrite eq. apply write_ghost_log. + apply H3. ++ apply write_ghost_log.", "back_times": 0, "succ": false, "time": 133.93702292442322}]