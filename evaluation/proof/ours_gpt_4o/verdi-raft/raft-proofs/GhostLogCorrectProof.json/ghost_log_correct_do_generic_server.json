[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": ["intros h st os st' ms m Hdl Hin."], "tactic": "apply doLeader_messages with (t := currentTerm st) (n := fst m) (pli := 0) (plt := 0) (es := []) (ci := 0) in Hdl as Hdl'.", "exn": "In environment orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params rmri : raft_msg_refinement_interface nisi : nextIndex_safety_interface rlmli : refined_log_matching_lemmas_interface h : network st : name -> data os : list packet st' : ghost_data ms : raft_data m : list raft_output Hdl : raft_data Hin : list (name * msg) The term \"st\" has type \"name -> data\" while it is expected to have type \"RaftState.raft_data term name entry logIndex serverType data clientId output\".", "type": "wrong_type", "handled": true}]}, "chat": [], "original": "intros h st os st' ms m Hdl Hin. apply doLeader_messages with (t := currentTerm st) (n := fst m) (pli := 0) (plt := 0) (es := []) (ci := 0) in Hdl as Hdl'. - destruct Hdl' as [Hcurr [Hlog [Htype Hplt]]]. split. + apply Htype. + exists (fst m). unfold replicaMessage. replace (getNextIndex st' (fst m)) with 1. rewrite Nat.pred_0. cbn. destruct (findAtIndex (log st) 0) eqn:Hfind. * destruct Hplt as [Hplt | [e Hplt]]. -- exfalso. auto. -- destruct Hplt as [e' [Hfind' Heq]]. congruence. * destruct Hplt as [Hplt | [e [Hfind' Heq]]]. -- injection Hplt. intros. subst m. auto. -- congruence. - apply Hin. - destruct Hin as [Hin | Hin]. + congruence. + exfalso. apply Hin. auto.", "back_times": 0, "succ": false, "time": 84.99685096740723}]