[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": ["intros net Hreach."], "tactic": "pose proof (msg_refined_raft_net_invariant ghost_log_correct_invariant ghost_log_correct_invariant ghost_log_correct_invariant ghost_log_correct_invariant ghost_log_correct_invariant ghost_log_correct_invariant ghost_log_correct_invariant ghost_log_correct_invariant ghost_log_correct_invariant ghost_log_correct_invariant ghost_log_correct_invariant ghost_log_correct_invariant Hreach) as Hinv.", "exn": "In environment orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params rri : raft_refinement_interface si : sorted_interface lmi : log_matching_interface smspi : state_machine_safety'interface rlmli : refined_log_matching_lemmas_interface pllsi : prevLog_leader_sublog_interface ctgt0 : current_term_gt_zero_interface lalcii : lastApplied_le_commitIndex_interface miaei : match_index_all_entries_interface lhlli : leaders_have_leaderLogs_interface lci : leader_completeness_interface lsi : leader_sublog_interface taifoli : terms_and_indices_from_one_log_interface glci : ghost_log_correct_interface lphogli : log_properties_hold_on_ghost_logs_interface glemi : ghost_log_entries_match_interface tci : transitive_commit_interface tsi : term_sanity_interface lhllsi : leaders_have_leaderLogs_strong_interface ollpti : one_leaderLog_per_term_interface rmri : raft_msg_refinement_interface net, Hreach : list entry The term \"ghost_log_correct_invariant\" has type \"forall net0 : network, msg_refined_raft_intermediate_reachable net0 -> ghost_log_correct net0\" while it is expected to have type \"network -> Prop\".", "type": "wrong_type", "handled": true}, {"ctx": ["intros net Hreach.", "qsimpl time: 1 use: msg_refined_raft_net_invariant,ghost_log_correct_invariant."], "tactic": "apply msg_simulation_1 in Hreach.", "exn": "Unable to apply lemma of type \"forall net : network, msg_refined_raft_intermediate_reachable net -> refined_raft_intermediate_reachable (mgv_deghost net)\" on hypothesis of type \"list entry\".", "type": "cannot_apply_in", "handled": true}, {"ctx": ["intros net Hreach.", "qsimpl time: 1 use: msg_refined_raft_net_invariant,ghost_log_correct_invariant.", "qsimpl time: 1 use: msg_refined_raft_net_invariant,ghost_log_correct_invariant."], "tactic": "apply ghost_log_correct_invariant in Hreach.", "exn": "Unable to apply lemma of type \"forall net0 : network, msg_refined_raft_intermediate_reachable net0 -> ghost_log_correct net0\" on hypothesis of type \"list entry\".", "type": "cannot_apply_in", "handled": true}, {"ctx": ["intros net Hreach.", "qsimpl time: 1 use: msg_refined_raft_net_invariant,ghost_log_correct_invariant.", "qsimpl time: 1 use: msg_refined_raft_net_invariant,ghost_log_correct_invariant.", "qsimpl time: 1 use: msg_refined_raft_net_invariant,ghost_log_correct_invariant."], "tactic": "apply ghost_log_correct_invariant in Hreach.", "exn": "Unable to apply lemma of type \"forall net0 : network, msg_refined_raft_intermediate_reachable net0 -> ghost_log_correct net0\" on hypothesis of type \"list entry\".", "type": "cannot_apply_in", "handled": true}, {"ctx": ["intros net Hreach.", "qsimpl time: 1 use: msg_refined_raft_net_invariant,ghost_log_correct_invariant.", "qsimpl time: 1 use: msg_refined_raft_net_invariant,ghost_log_correct_invariant.", "qsimpl time: 1 use: msg_refined_raft_net_invariant,ghost_log_correct_invariant.", "qsimpl time: 1 use: msg_refined_raft_net_invariant,ghost_log_correct_invariant."], "tactic": "pose proof (msg_refined_raft_net_invariant log_properties_hold_on_ghost_logs_invariant log_properties_hold_on_ghost_logs_invariant log_properties_hold_on_ghost_logs_invariant log_properties_hold_on_ghost_logs_invariant log_properties_hold_on_ghost_logs_invariant log_properties_hold_on_ghost_logs_invariant log_properties_hold_on_ghost_logs_invariant log_properties_hold_on_ghost_logs_invariant log_properties_hold_on_ghost_logs_invariant log_properties_hold_on_ghost_logs_invariant log_properties_hold_on_ghost_logs_invariant log_properties_hold_on_ghost_logs_invariant Hreach) as Hlog.", "exn": "In environment orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params H0 : forall net : network, msg_refined_raft_intermediate_reachable net -> ghost_log_correct net H : forall (P : network -> Prop) (net : network), msg_refined_raft_net_invariant_init P -> msg_refined_raft_net_invariant_client_request P -> msg_refined_raft_net_invariant_timeout P -> msg_refined_raft_net_invariant_append_entries P -> msg_refined_raft_net_invariant_append_entries_reply P -> msg_refined_raft_net_invariant_request_vote P -> msg_refined_raft_net_invariant_request_vote_reply P -> msg_refined_raft_net_invariant_do_leader P -> msg_refined_raft_net_invariant_do_generic_server P -> msg_refined_raft_net_invariant_state_same_packet_subset P -> msg_refined_raft_net_invariant_reboot P -> msg_refined_raft_intermediate_reachable net -> P net net, Hreach : list entry H1 : sorted (net ++ Hreach) msg_refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), msg_refined_raft_net_invariant_init P -> msg_refined_raft_net_invariant_client_request' P -> msg_refined_raft_net_invariant_timeout' P -> msg_refined_raft_net_invariant_append_entries' P -> msg_refined_raft_net_invariant_append_entries_reply' P -> msg_refined_raft_net_invariant_request_vote' P -> msg_refined_raft_net_invariant_request_vote_reply' P -> msg_refined_raft_net_invariant_do_leader' P -> msg_refined_raft_net_invariant_do_generic_server' P -> msg_refined_raft_net_invariant_state_same_packet_subset' P -> msg_refined_raft_net_invariant_reboot' P -> msg_refined_raft_intermediate_reachable net -> P net msg_lift_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P net) -> forall net : network, msg_refined_raft_intermediate_reachable net -> P (mgv_deghost net) msg_lift_prop_all_the_way : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, msg_refined_raft_intermediate_reachable net -> P (deghost (mgv_deghost net)) msg_lower_prop : forall P : network -> Prop, (forall net : network, msg_refined_raft_intermediate_reachable net -> P (mgv_deghost net)) -> forall net : network, refined_raft_intermediate_reachable net -> P net msg_lower_prop_all_the_way : forall P : network -> Prop, (forall net : network, msg_refined_raft_intermediate_reachable net -> P (deghost (mgv_deghost net))) -> forall net : network, raft_intermediate_reachable net -> P net msg_deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => nwState h end = nwState net h msg_simulation_1 : forall net : network, msg_refined_raft_intermediate_reachable net -> refined_raft_intermediate_reachable (mgv_deghost net) one_leaderLog_per_term_invariant : forall net : network, refined_raft_intermediate_reachable net -> one_leaderLog_per_term net one_leaderLog_per_term_log_invariant : forall net : network, refined_raft_intermediate_reachable net -> one_leaderLog_per_term_log net one_leaderLog_per_term_host_invariant : forall net : network, refined_raft_intermediate_reachable net -> one_leaderLog_per_term_host net leaders_have_leaderLogs_strong_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaders_have_leaderLogs_strong net no_entries_past_current_term_invariant : forall net : network, raft_intermediate_reachable net -> no_entries_past_current_term net transitive_commit_invariant : forall net : network, refined_raft_intermediate_reachable net -> transitive_commit net ghost_log_entries_match_invariant : forall net : network, msg_refined_raft_intermediate_reachable net -> ghost_log_entries_match_host net log_properties_hold_on_ghost_logs_invariant : forall net : network, msg_refined_raft_intermediate_reachable net -> log_properties_hold_on_ghost_logs net terms_and_indices_from_one_log_invariant : forall net : network, raft_intermediate_reachable net -> terms_and_indices_from_one_log net terms_and_indices_from_one_log_nw_invariant : forall net : network, raft_intermediate_reachable net -> terms_and_indices_from_one_log_nw net leader_sublog_invariant_invariant : forall net : network, raft_intermediate_reachable net -> leader_sublog_invariant net leader_completeness_invariant : forall net : network, refined_raft_intermediate_reachable net -> leader_completeness net leaders_have_leaderLogs_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaders_have_leaderLogs net match_index_all_entries_invariant : forall net : network, refined_raft_intermediate_reachable net -> match_index_all_entries net lastApplied_le_commitIndex_invariant : forall net : network, raft_intermediate_reachable net -> lastApplied_le_commitIndex net current_term_gt_zero_invariant : forall net : network, raft_intermediate_reachable net -> current_term_gt_zero net prevLog_leader_sublog_invariant : forall net : network, raft_intermediate_reachable net -> prevLog_leader_sublog net entries_contiguous_nw_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_contiguous_nw net entries_gt_0_nw_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_gt_0_nw net entries_sorted_nw_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_sorted_nw net entries_gt_0_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_gt_0 net entries_contiguous_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_contiguous net entries_sorted_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_sorted net entries_match_invariant : forall (net : network) (h h' : name), refined_raft_intermediate_reachable net -> entries_match (log (snd (nwState net h))) (log (snd (nwState net h'))) entries_match_nw_1_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_match_nw_1 net entries_match_nw_host_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_match_nw_host net allEntries_gt_0_invariant : forall (net : network) (h : name) (e : entry), refined_raft_intermediate_reachable net -> In e (map snd (allEntries (fst (nwState net h)))) -> eIndex e > 0 state_machine_safety'_invariant : forall net : network, refined_raft_intermediate_reachable net -> state_machine_safety' net log_matching_invariant : forall net : network, raft_intermediate_reachable net -> log_matching net handleAppendEntries_logs_sorted : forall (net : network) (p : packet) (t : term) (n : name) (pli : logIndex) (plt : term) (es : list entry) (ci : logIndex) (st' : raft_data) (m : msg), raft_intermediate_reachable net -> logs_sorted net -> handleAppendEntries (pDst p) (nwState net (pDst p)) t n pli plt es ci = (st', m) -> pBody p = AppendEntries t n pli plt es ci -> In p (nwPackets net) -> sorted (log st') handleClientRequest_logs_sorted : forall (h : name) (client : clientId) (id : nat) (c : input) (out : list raft_output) (st : raft_data) (l : list (name * msg)) (net : network), handleClientRequest h (nwState net h) client id c = (out, st, l) -> raft_intermediate_reachable net -> logs_sorted_host net -> sorted (log st) logs_sorted_invariant : forall net : network, raft_intermediate_reachable net -> logs_sorted net refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (deghost net) H3 : forall net : network, msg_refined_raft_intermediate_reachable net -> ghost_log_correct net H2 : forall (P : network -> Prop) (net : network), msg_refined_raft_net_invariant_init P -> msg_refined_raft_net_invariant_client_request P -> msg_refined_raft_net_invariant_timeout P -> msg_refined_raft_net_invariant_append_entries P -> msg_refined_raft_net_invariant_append_entries_reply P -> msg_refined_raft_net_invariant_request_vote P -> msg_refined_raft_net_invariant_request_vote_reply P -> msg_refined_raft_net_invariant_do_leader P -> msg_refined_raft_net_invariant_do_generic_server P -> msg_refined_raft_net_invariant_state_same_packet_subset P -> msg_refined_raft_net_invariant_reboot P -> msg_refined_raft_intermediate_reachable net -> P net The term \"log_properties_hold_on_ghost_logs_invariant\" has type \"forall net : network, msg_refined_raft_intermediate_reachable net -> log_properties_hold_on_ghost_logs net\" while it is expected to have type \"network -> Prop\" (cannot unify \"msg_refined_raft_intermediate_reachable net0 -> log_properties_hold_on_ghost_logs net0\" and \"Prop\").", "type": "wrong_type", "handled": true}, {"ctx": ["intros net Hreach.", "qsimpl time: 1 use: msg_refined_raft_net_invariant,ghost_log_correct_invariant.", "qsimpl time: 1 use: msg_refined_raft_net_invariant,ghost_log_correct_invariant.", "qsimpl time: 1 use: msg_refined_raft_net_invariant,ghost_log_correct_invariant.", "qsimpl time: 1 use: msg_refined_raft_net_invariant,ghost_log_correct_invariant.", "qsimpl time: 1 use: msg_refined_raft_net_invariant,ghost_log_correct_invariant."], "tactic": "pose proof (msg_refined_raft_net_invariant ghost_log_entries_match_invariant ghost_log_entries_match_invariant ghost_log_entries_match_invariant ghost_log_entries_match_invariant ghost_log_entries_match_invariant ghost_log_entries_match_invariant ghost_log_entries_match_invariant ghost_log_entries_match_invariant ghost_log_entries_match_invariant ghost_log_entries_match_invariant ghost_log_entries_match_invariant ghost_log_entries_match_invariant Hreach) as Hen.", "exn": "In environment orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params H0 : forall net : network, msg_refined_raft_intermediate_reachable net -> ghost_log_correct net H : forall (P : network -> Prop) (net : network), msg_refined_raft_net_invariant_init P -> msg_refined_raft_net_invariant_client_request P -> msg_refined_raft_net_invariant_timeout P -> msg_refined_raft_net_invariant_append_entries P -> msg_refined_raft_net_invariant_append_entries_reply P -> msg_refined_raft_net_invariant_request_vote P -> msg_refined_raft_net_invariant_request_vote_reply P -> msg_refined_raft_net_invariant_do_leader P -> msg_refined_raft_net_invariant_do_generic_server P -> msg_refined_raft_net_invariant_state_same_packet_subset P -> msg_refined_raft_net_invariant_reboot P -> msg_refined_raft_intermediate_reachable net -> P net net, Hreach : list entry H1 : sorted (net ++ Hreach) msg_refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), msg_refined_raft_net_invariant_init P -> msg_refined_raft_net_invariant_client_request' P -> msg_refined_raft_net_invariant_timeout' P -> msg_refined_raft_net_invariant_append_entries' P -> msg_refined_raft_net_invariant_append_entries_reply' P -> msg_refined_raft_net_invariant_request_vote' P -> msg_refined_raft_net_invariant_request_vote_reply' P -> msg_refined_raft_net_invariant_do_leader' P -> msg_refined_raft_net_invariant_do_generic_server' P -> msg_refined_raft_net_invariant_state_same_packet_subset' P -> msg_refined_raft_net_invariant_reboot' P -> msg_refined_raft_intermediate_reachable net -> P net msg_lift_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P net) -> forall net : network, msg_refined_raft_intermediate_reachable net -> P (mgv_deghost net) msg_lift_prop_all_the_way : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, msg_refined_raft_intermediate_reachable net -> P (deghost (mgv_deghost net)) msg_lower_prop : forall P : network -> Prop, (forall net : network, msg_refined_raft_intermediate_reachable net -> P (mgv_deghost net)) -> forall net : network, refined_raft_intermediate_reachable net -> P net msg_lower_prop_all_the_way : forall P : network -> Prop, (forall net : network, msg_refined_raft_intermediate_reachable net -> P (deghost (mgv_deghost net))) -> forall net : network, raft_intermediate_reachable net -> P net msg_deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => nwState h end = nwState net h msg_simulation_1 : forall net : network, msg_refined_raft_intermediate_reachable net -> refined_raft_intermediate_reachable (mgv_deghost net) one_leaderLog_per_term_invariant : forall net : network, refined_raft_intermediate_reachable net -> one_leaderLog_per_term net one_leaderLog_per_term_log_invariant : forall net : network, refined_raft_intermediate_reachable net -> one_leaderLog_per_term_log net one_leaderLog_per_term_host_invariant : forall net : network, refined_raft_intermediate_reachable net -> one_leaderLog_per_term_host net leaders_have_leaderLogs_strong_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaders_have_leaderLogs_strong net no_entries_past_current_term_invariant : forall net : network, raft_intermediate_reachable net -> no_entries_past_current_term net transitive_commit_invariant : forall net : network, refined_raft_intermediate_reachable net -> transitive_commit net ghost_log_entries_match_invariant : forall net : network, msg_refined_raft_intermediate_reachable net -> ghost_log_entries_match_host net log_properties_hold_on_ghost_logs_invariant : forall net : network, msg_refined_raft_intermediate_reachable net -> log_properties_hold_on_ghost_logs net terms_and_indices_from_one_log_invariant : forall net : network, raft_intermediate_reachable net -> terms_and_indices_from_one_log net terms_and_indices_from_one_log_nw_invariant : forall net : network, raft_intermediate_reachable net -> terms_and_indices_from_one_log_nw net leader_sublog_invariant_invariant : forall net : network, raft_intermediate_reachable net -> leader_sublog_invariant net leader_completeness_invariant : forall net : network, refined_raft_intermediate_reachable net -> leader_completeness net leaders_have_leaderLogs_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaders_have_leaderLogs net match_index_all_entries_invariant : forall net : network, refined_raft_intermediate_reachable net -> match_index_all_entries net lastApplied_le_commitIndex_invariant : forall net : network, raft_intermediate_reachable net -> lastApplied_le_commitIndex net current_term_gt_zero_invariant : forall net : network, raft_intermediate_reachable net -> current_term_gt_zero net prevLog_leader_sublog_invariant : forall net : network, raft_intermediate_reachable net -> prevLog_leader_sublog net entries_contiguous_nw_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_contiguous_nw net entries_gt_0_nw_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_gt_0_nw net entries_sorted_nw_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_sorted_nw net entries_gt_0_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_gt_0 net entries_contiguous_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_contiguous net entries_sorted_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_sorted net entries_match_invariant : forall (net : network) (h h' : name), refined_raft_intermediate_reachable net -> entries_match (log (snd (nwState net h))) (log (snd (nwState net h'))) entries_match_nw_1_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_match_nw_1 net entries_match_nw_host_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_match_nw_host net allEntries_gt_0_invariant : forall (net : network) (h : name) (e : entry), refined_raft_intermediate_reachable net -> In e (map snd (allEntries (fst (nwState net h)))) -> eIndex e > 0 state_machine_safety'_invariant : forall net : network, refined_raft_intermediate_reachable net -> state_machine_safety' net log_matching_invariant : forall net : network, raft_intermediate_reachable net -> log_matching net handleAppendEntries_logs_sorted : forall (net : network) (p : packet) (t : term) (n : name) (pli : logIndex) (plt : term) (es : list entry) (ci : logIndex) (st' : raft_data) (m : msg), raft_intermediate_reachable net -> logs_sorted net -> handleAppendEntries (pDst p) (nwState net (pDst p)) t n pli plt es ci = (st', m) -> pBody p = AppendEntries t n pli plt es ci -> In p (nwPackets net) -> sorted (log st') handleClientRequest_logs_sorted : forall (h : name) (client : clientId) (id : nat) (c : input) (out : list raft_output) (st : raft_data) (l : list (name * msg)) (net : network), handleClientRequest h (nwState net h) client id c = (out, st, l) -> raft_intermediate_reachable net -> logs_sorted_host net -> sorted (log st) logs_sorted_invariant : forall net : network, raft_intermediate_reachable net -> logs_sorted net refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (deghost net) H5 : forall net : network, msg_refined_raft_intermediate_reachable net -> ghost_log_correct net H4 : forall (P : network -> Prop) (net : network), msg_refined_raft_net_invariant_init P -> msg_refined_raft_net_invariant_client_request P -> msg_refined_raft_net_invariant_timeout P -> msg_refined_raft_net_invariant_append_entries P -> msg_refined_raft_net_invariant_append_entries_reply P -> msg_refined_raft_net_invariant_request_vote P -> msg_refined_raft_net_invariant_request_vote_reply P -> msg_refined_raft_net_invariant_do_leader P -> msg_refined_raft_net_invariant_do_generic_server P -> msg_refined_raft_net_invariant_state_same_packet_subset P -> msg_refined_raft_net_invariant_reboot P -> msg_refined_raft_intermediate_reachable net -> P net The term \"ghost_log_entries_match_invariant\" has type \"forall net : network, msg_refined_raft_intermediate_reachable net -> ghost_log_entries_match_host net\" while it is expected to have type \"network -> Prop\" (cannot unify \"msg_refined_raft_intermediate_reachable net0 -> ghost_log_entries_match_host net0\" and \"Prop\").", "type": "wrong_type", "handled": true}]}, "chat": [], "original": "intros net Hreach. pose proof (msg_refined_raft_net_invariant ghost_log_correct_invariant ghost_log_correct_invariant ghost_log_correct_invariant ghost_log_correct_invariant ghost_log_correct_invariant ghost_log_correct_invariant ghost_log_correct_invariant ghost_log_correct_invariant ghost_log_correct_invariant ghost_log_correct_invariant ghost_log_correct_invariant ghost_log_correct_invariant Hreach) as Hinv. apply msg_simulation_1 in Hreach. apply ghost_log_correct_invariant in Hreach. intros. apply ghost_log_correct_invariant in Hreach. pose proof (msg_refined_raft_net_invariant log_properties_hold_on_ghost_logs_invariant log_properties_hold_on_ghost_logs_invariant log_properties_hold_on_ghost_logs_invariant log_properties_hold_on_ghost_logs_invariant log_properties_hold_on_ghost_logs_invariant log_properties_hold_on_ghost_logs_invariant log_properties_hold_on_ghost_logs_invariant log_properties_hold_on_ghost_logs_invariant log_properties_hold_on_ghost_logs_invariant log_properties_hold_on_ghost_logs_invariant log_properties_hold_on_ghost_logs_invariant log_properties_hold_on_ghost_logs_invariant Hreach) as Hlog. pose proof (msg_refined_raft_net_invariant ghost_log_entries_match_invariant ghost_log_entries_match_invariant ghost_log_entries_match_invariant ghost_log_entries_match_invariant ghost_log_entries_match_invariant ghost_log_entries_match_invariant ghost_log_entries_match_invariant ghost_log_entries_match_invariant ghost_log_entries_match_invariant ghost_log_entries_match_invariant ghost_log_entries_match_invariant ghost_log_entries_match_invariant Hreach) as Hen. pose proof (msg_refined_raft_net_invariant lifted_no_entries_past_current_term_host_invariant lifted_no_entries_past_current_term_host_invariant lifted_no_entries_past_current_term_host_invariant lifted_no_entries_past_current_term_host_invariant lifted_no_entries_past_current_term_host_invariant lifted_no_entries_past_current_term_host_invariant lifted_no_entries_past_current_term_host_invariant lifted_no_entries_past_current_term_host_invariant lifted_no_entries_past_current_term_host_invariant lifted_no_entries_past_current_term_host_invariant lifted_no_entries_past_current_term_host_invariant lifted_no_entries_past_current_term_host_invariant Hreach) as Hlift. apply lifted_no_entries_past_current_term_host_invariant in Hreach. apply ghost_log_correct_invariant in Hreach. apply log_properties_hold_on_ghost_logs_invariant in Hreach. apply ghost_log_entries_match_invariant in Hreach. assert (Ht := refined_raft_net_invariant ghost_log_correct_invariant ghost_log_correct_invariant ghost_log_correct_invariant ghost_log_correct_invariant ghost_log_correct_invariant ghost_log_correct_invariant ghost_log_correct_invariant ghost_log_correct_invariant ghost_log_correct_invariant ghost_log_correct_invariant ghost_log_correct_invariant ghost_log_correct_invariant Hreach). intuition.", "back_times": 0, "succ": false, "time": 112.59949254989624}]