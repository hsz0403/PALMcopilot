[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": [], "tactic": "apply Build_leaderLogs_sublog_interface.", "exn": "In environment orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params rri : raft_refinement_interface lsi : leader_sublog_interface lltsi : leaderLogs_term_sanity_interface eewci : every_entry_was_created_interface llcei : leaderLogs_candidate_entries_interface cci : cronies_correct_interface vci : votes_correct_interface Unable to unify \"leaderLogs_sublog_interface\" with \"forall (xs : list packet) (p : packet) (ys : list packet) (net : network) (st' : name -> data) (ps' : list packet) (gd : electionsData) (d : raft_data) (m : msg) (t : term) (n : name) (pli : logIndex) (plt : term) (es : list entry) (ci : logIndex), handleAppendEntries (pDst p) (snd (nwState net (pDst p))) t n pli plt es ci = (d, m) -> gd = update_elections_data_appendEntries (pDst p) (nwState net (pDst p)) t n pli plt es ci -> pBody p = AppendEntries t n pli plt es ci -> leaderLogs_sublog net -> refined_raft_intermediate_reachable net -> nwPackets net = xs ++ p :: ys -> (forall h : name, st' h = update name_eq_dec (nwState net) (pDst p) (gd, d) h) -> (forall p' : packet, In p' ps' -> In p' (xs ++ ys) \\\\/ p' = {| pSrc := pDst p; pDst := pSrc p; pBody := m |}) -> leaderLogs_sublog {| nwPackets := ps'; nwState := st' |}\".", "type": "cannot_unify", "handled": true}, {"ctx": ["qsimpl time: 1 use: Build_leaderLogs_sublog_interface.", "intros net Hreachable."], "tactic": ["apply LeaderLogsSublogInterface.leaderLogs_sublog_invariant.", ""], "exn": "Applied theorem does not have enough premises.", "type": "no_enough_premises", "handled": false}]}, "chat": [], "original": "apply Build_leaderLogs_sublog_interface. intros net Hreachable. apply LeaderLogsSublogInterface.leaderLogs_sublog_invariant. auto.", "back_times": 0, "succ": false, "time": 104.47548031806946}]