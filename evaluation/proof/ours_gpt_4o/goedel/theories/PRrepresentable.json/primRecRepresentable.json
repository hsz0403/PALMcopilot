[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": ["intros n f p."], "tactic": ["induction p as [n a | a | n m l | n m g IHg h IHh | n g IHg h IHh | n | n g IHg | n m g IHg h IHh | n m g IHg h IHh | n m f IHf g IHg].", ""], "exn": "Expects a disjunctive pattern with 1 branch or a conjunctive pattern made of 2 patterns.", "type": "num_branch_both", "handled": false}]}, "chat": [], "original": "intros n f p. induction p as [n a | a | n m l | n m g IHg h IHh | n g IHg h IHh | n | n g IHg | n m g IHg h IHh | n m g IHg h IHh | n m f IHf g IHg]. - apply RepresentableAlternate with (A := succFormula). + apply tautoPrf. + apply Representable_ext with (g := succFunc). * apply extEqualRefl. * apply ChooseRepresentable with (R := succBP). apply succRepresentable. - apply RepresentableAlternate with (A := zeroFormula). + apply tautoPrf. + apply Representable_ext with (g := zeroFunc). * apply extEqualRefl. * apply ChooseRepresentable with (R := zeroBP). apply zeroRepresentable. - apply RepresentableAlternate with (A := projFormula m). + apply tautoPrf. + apply Representable_ext with (g := projFunc n m l). * apply extEqualRefl. * apply ChooseRepresentable with (R := projBP n m l). apply projRepresentable. - apply composeSigmaRepresentable with (m := VectorDef.length (primRecsFormula n m g)) (A := primRecsFormula n m g). + apply le_n. + apply VrectComp_help. apply IHg. + apply IHh. - apply Representable_ext with (g := (composeFunc n m (extractFuncs (primRecsFormula n m g)) h)). + apply extEqualCompose. * apply extEqualRefl. * apply extEqualRefl. + apply composeSigmaRepresentable with (m := VectorDef.length (primRecsFormula n m g)) (A := primRecsFormula n m g). * apply le_n. * apply VrectComp_help. apply IHg. * apply IHh. - apply primRecSigmaRepresentable. + apply IHg. + apply IHh. - apply Representable_ext with (g := (primRecFunc n (vector_to_list (primRecsFormula n m g) ++ vector_to_list (primRecsFormula n (S (S m)) h)))). + apply extEqualRefl. + apply primRecSigmaRepresentable. * apply IHg. * apply IHh. - apply RepresentableAlternate with (A := primRecSigmaFormula n g h). + apply tautoPrf. + apply reprPrimRecSigma with (g := vector_to_list (primRecsFormula n m g) ++ vector_to_list (primRecsFormula n (S (S m)) h)). * apply vector_to_list_correct. * apply vector_to_list_correct. - apply RepresentableAlternate with (A := primRecPiFormulaHelp n g h). + apply tautoPrf. + apply reprPrimRec with (g := vector_to_list (primRecsFormula n m g) ++ vector_to_list (primRecsFormula n (S (S m)) h)). * apply vector_to_list_correct. * apply vector_to_list_correct.", "back_times": 0, "succ": false, "time": 73.95067501068115}]