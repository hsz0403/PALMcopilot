[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": ["intros T f ts ss H."], "tactic": ["induction (arity L (inr f)) as [|n IH].", ""], "exn": "Abstracting over the term \"n\" leads to a term fun n0 : nat => forall ts0 ss0 : fol.Terms L n0, PairwiseEqual T n0 ts0 ss0 -> SysPrf T (equal (apply f ts0) (apply f ss0)) which is ill-typed. Reason is: Illegal application: The term \"apply\" of type \"forall f : Functions L, fol.Terms L (arity L (inr f)) -> fol.Term L\" cannot be applied to the terms \"f\" : \"Functions L\" \"ts0\" : \"fol.Terms L n0\" The 2nd term has type \"fol.Terms L n0\" which should be coercible to \"fol.Terms L (arity L (inr f))\".", "type": "term_cannot_apply", "handled": false}]}, "chat": [], "original": "intros T f ts ss H. induction (arity L (inr f)) as [|n IH]. - simpl. apply SysPrf. - destruct ts as [|? ts_tail], ss as [|? ss_tail]. ++ simpl.", "back_times": 0, "succ": false, "time": 65.30617094039917}]