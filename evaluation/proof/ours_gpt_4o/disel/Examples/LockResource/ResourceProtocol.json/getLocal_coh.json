[{"history": {"proof": "", "repairs": [], "exceptions": []}, "chat": [], "original": "rewrite /nodes. move=> HninN. have: n == server \\/ n \\in clients. rewrite -cat1s mem_cat HninN /=. by case: eqP => // ->; rewrite Hnin. move=> [|]. - move/eqP=> ->. move: C. rewrite /ResourceCoh /state_coh => H. move: (H server). rewrite mem_cat mem_seq1 eq_refl /=. move=> /(_ is_true_true). rewrite /local_coh. move=> []. case: ifP. + move/eqP=> Hss. eexists; eauto. + move=> /negP. by rewrite eq_refl. - move=> HnInC. move: C. rewrite /ResourceCoh /state_coh => H. move: (H n). apply: (@eq_all (dom (dstate d)) nodes C). move=> x; have : nodes x -> x = server \\/ x \\in clients by rewrite mem_cat. move=> /=; case: eqP => [-> // | _]. move=> _. apply/idomP. by rewrite HnInC. move=> /client_nodes HnInN. rewrite HnInN /local_coh. move: H => [val H']. split. - exact: val. - rewrite (client_not_server HnInC) /=. split=> // H. case: H => ss /eqP H. move: (H server ss). move=> /(_ is_true_true). move: (H (eq_refl server)). rewrite /local_coh /= eq_refl. move=> []. + move=> _. rewrite H /getLocal /=. by case: (find _ _). + move: H => [x H]. rewrite H. move: ss n H Hnin Huniq HnInC. case: H. move=> current_epoch current_value outstanding. case=> [current_epoch0 [current_value0 []]] H. move: H => /eqP [] /= -> H1 _. by rewrite H /getLocal /=.", "back_times": 0, "succ": false, "time": 152.55132412910461}]