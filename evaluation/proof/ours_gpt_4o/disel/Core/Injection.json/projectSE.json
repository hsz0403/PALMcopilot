[{"history": {"proof": "qsimpl time: 1 use: projectS_cohL.", "repairs": ["wrong_type"], "exceptions": [{"ctx": ["intros H."], "tactic": "pose proof (projectS_cohL W1 W2 s H) as HL.", "exn": "In environment W1, W2 : prodPCM (union_mapPCM Label protocol) (union_mapPCM hook_domain hook_type) s : state H : s \\\\In Coh (W1 \\\\+ W2) The term \"W1\" has type \"PCM.sort (prodPCM (union_mapPCM Label protocol) (union_mapPCM hook_domain hook_type))\" while it is expected to have type \"?s \\\\In Coh (?W1 \\\\+ ?W2)\".", "type": "wrong_type", "handled": true}, {"ctx": ["intros H.", "qsimpl time: 1 use: projectS_cohL."], "tactic": "pose proof (projectS_cohR W1 W2 s H) as HR.", "exn": "The reference H was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros H.", "qsimpl time: 1 use: projectS_cohL."], "tactic": "move: H.", "exn": "The reference H was not found in the current environment.", "type": "ref_not_found", "handled": true}]}, "chat": [], "original": "intros H. pose proof (projectS_cohL W1 W2 s H) as HL. pose proof (projectS_cohR W1 W2 s H) as HR. move: H. case/cohE => s1 [s2] [-> H1 H2]. rewrite (coh_s (W1 \\+ W2) _ H1). rewrite (coh_s (W1 \\+ W2) _ H2). apply: f_equal2. apply: functional_extensionality => x. case E: (x \\in dom (projectS W1 s)). - move/getsE: E => EQ. rewrite EQ. apply: f_equal. by rewrite (getsE x) //. - move: (H x); rewrite in_fnd //E. by case: (fnd x s). apply: f_equal2. apply: functional_extensionality => x. case E: (x \\in dom (projectS W2 s)). - move/getsE: E => EQ. rewrite EQ. apply: f_equal. by rewrite (getsE x) //. - move: (H x); rewrite in_fnd //E. by case: (fnd x s). by apply/eqP; rewrite eq_sym dom_um_proj eqE /= eq_refl.", "back_times": 0, "succ": false, "time": 95.49937510490417}]