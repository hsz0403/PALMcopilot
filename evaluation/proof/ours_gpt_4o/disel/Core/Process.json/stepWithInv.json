[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": ["split.", "-", "intros H."], "tactic": ["inversion H as [H1 | H2].", ""], "exn": "Expects a disjunctive pattern with 1 branch or a conjunctive pattern made of 3 patterns.", "type": "num_branch_both", "handled": false}, {"ctx": ["split.", "-", "intros H."], "tactic": "-", "exn": "Wrong bullet -: Current bullet - is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["split.", "-", "intros H.", "shelve.", "-", "intros H.", "destruct H as [H1 | H2].", "+"], "tactic": "+", "exn": "Wrong bullet +: Current bullet + is not finished.", "type": "unfinished_bullet", "handled": true}]}, "chat": [], "original": "split. - intros H. inversion H as [H1 | H2]. + left. destruct H1 as [v [Hsc [Ht [Hq [Hs2 [Hs1 HCoh]]]]]]. subst. repeat eexists; eauto. + destruct H2 as [sc' [t' [Hsc [Hq [HW [HCoh H']]]]]]. subst. right. repeat eexists; eauto. - intros H. destruct H as [H1 | H2]. + destruct H1 as [v [Hsc [Ht [Hq [Hs2 [Hs1 HCoh]]]]]]. subst. apply pstep_safe with (sc := WithInvRet) in HCoh. left. repeat eexists; eauto. + destruct H2 as [sc' [t' [Hsc [Hq [HW [HCoh H']]]]]]. subst. apply pstep_safe with (sc := WithInvStep sc') in HCoh. right. repeat eexists; eauto.", "back_times": 2, "succ": false, "time": 84.00869035720825}]