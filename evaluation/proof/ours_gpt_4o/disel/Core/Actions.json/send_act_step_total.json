[{"history": {"proof": "qsimpl time: 1 use: step_total,SendMsg. qsimpl time: 1 use: step_total,SendMsg.", "repairs": ["wrong_type", "cannot_unify"], "exceptions": [{"ctx": [], "tactic": "apply step_total with (a:=SendMsg W this s l st pf' to msg).", "exn": "In environment W : world p : protocol this : nid l : Label pf : getP l = p st : send_trans (coh p) pf' : st \\\\In snd_trans p msg : seq nat to : nid s : state S : send_act_safe s The term \"W\" has type \"world\" while it is expected to have type \"?st \\\\In get_st ?w ?l\".", "type": "wrong_type", "handled": true}, {"ctx": ["qsimpl time: 1 use: step_total,SendMsg."], "tactic": "apply S.", "exn": "In environment H0 : forall (w : world) (this : nid) (s1 s2 : state) (l : nat) (st : send_trans (Protocols.coh (getProtocol w l))), st \\\\In get_st w l -> forall (to : nid) (msg : seq nat) (b : heap), this \\\\in nodes (getProtocol w l) (getS s1 l) -> l \\\\in dom s1 -> Coh w s1 -> forall S : send_safe st this to (getS s1 l) msg, all_hooks_fire w l (t_snd st) s1 this msg to -> Some b = send_step S -> s2 = upd l {| dstate := upd this b (dstate (getS s1 l)); dsoup := dsoup (getS s1 l) \\\\+ fresh (dsoup (getS s1 l)) \\\\\\\\-> {| content := {| tag := t_snd st; tms_cont := msg |}; from := this; State.to := to; active := true |} |} s1 -> network_step w this s1 s2 H : forall (W : world) (V : Type) (this : nid) (a : action W V this) (s : state) (pf : a_safe a s), exists (s' : state) (r : V), a_step pf s' r W : world p : protocol this : nid l : nat pf : getP l = p st : send_trans (coh p) pf' : st \\\\In snd_trans p msg : seq nat to : nid s : state S : send_act_safe s Unable to unify \"send_act_safe s\" with \"exists (s' : union_map Label dstatelet) (r : seq nat), send_act_step S s' r\".", "type": "cannot_unify", "handled": true}]}, "chat": [], "original": "apply step_total with (a:=SendMsg W this s l st pf' to msg). apply S. exists (getS s l) msg. apply safe_safe. auto. auto. auto. exists (getS s l) msg. apply all_hooks_fire. apply S. ++ exists (getS s l). exists msg. apply safe_safe. auto. auto. +++ exists (getS s l). exists msg. apply safe_safe. auto. auto.", "back_times": 0, "succ": false, "time": 2.860438346862793}]