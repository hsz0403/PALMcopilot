[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": ["split.", "-"], "tactic": "intros H.", "exn": "H is already used.", "type": "used_var", "handled": true}, {"ctx": ["split.", "-", "intros H'."], "tactic": "-", "exn": "Wrong bullet -: Current bullet - is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["split.", "-", "intros H'.", "shelve.", "-"], "tactic": "intros H.", "exn": "H is already used.", "type": "used_var", "handled": true}]}, "chat": [], "original": "split. - intros H. assert (dom w.1 =i dom s) as Hdom by (apply cohD with s). apply prod_join0E. apply join0E. apply empbE. intros l. specialize (coh_coh w s l H) as Hcoh. unfold getProtocol in Hcoh. unfold getStatelet in Hcoh. destruct (find l w) eqn:Hfindw. + destruct (find l s) eqn:Hfinds. * rewrite <- fmapE, Hfindw in Hdom. exfalso. apply (f_equal (fun f => find l f) Hdom) in Hfinds. rewrite Hfindw in Hfinds. inversion Hfinds. * exfalso. apply (f_equal (fun f => find l f) Hdom) in Hfindw. rewrite Hfinds in Hfindw. discriminate. + destruct (find l s) eqn:Hfinds. * exfalso. apply (f_equal (fun f => find l f) Hdom) in Hfinds. rewrite Hfindw in Hfinds. discriminate. * reflexivity. - intros H. rewrite H. apply cohW in H. apply cohS in H. apply valid_unit. apply valid_unit. apply hook_complete. apply UMC.eqE. symmetry. apply UMC.eqE. apply valid_unit. apply valid_unit.", "back_times": 0, "succ": false, "time": 90.87139511108398}]