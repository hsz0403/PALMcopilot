[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": ["assert (Hpq : p <> 0) by auto."], "tactic": "rewrite binomial_thm.", "exn": "Unable to find an instance for the variable p.", "type": "no_instance_var", "handled": true}]}, "chat": [], "original": "assert (Hpq : p <> 0) by auto. rewrite binomial_thm. 2: auto. rewrite mprod_factorial_euclid. rewrite mprod_factorial_mult. rewrite phi_Zp_eq. assert (Hanc : n0 = 0 \\/ n0 <> 0) by omega. destruct Hanc as [Hn0eq | Hn0neq]. - rewrite Hn0eq. simpl. rewrite phi_Zp_eq. rewrite Psi_Zp_eq. rewrite expoZp. rewrite <- Hn0eq in *. replace (n - k) with (N - K) by omega. replace (S (N - (K + 1))) with (N - K) by omega. rewrite binomial_le. rewrite mprod_factorial_mult. assert (Hk : \u301a fact K \u301b <> 0). { apply phi_Zp_invertible; auto. omega. } assert (HnK : \u301a fact (N - K) \u301b <> 0). { apply phi_Zp_invertible; auto. omega. } rewrite div_prop with (n := N) (r := n0). simpl. rewrite phi_Zp_eq. rewrite Psi_Zp_eq. rewrite expoZp. rewrite binomial_wo_p with (n := n) (k := k); auto. replace (n0 - k0) with 0 by omega. simpl. rewrite mul_assoc. rewrite expo_p_cancel with (a := \u301a fact N \u301b) (b := \u301a fact N \u301b); auto. replace \u301a expoZp N \u301b with (expo N p) by auto. rewrite div_prop; auto. simpl. rewrite phi_Zp_eq. rewrite Psi_Zp_eq. rewrite expoZp. rewrite phi_Zp_eq. rewrite Psi_Zp_eq. rewrite expoZp. rewrite phi_Zp_eq. rewrite Psi_Zp_eq. rewrite expoZp. rewrite phi_Zp_invertible. rewrite phi_Zp_invertible. apply expo_p_cancel. rewrite expo_p_cancel. rewrite <- Hnk. rewrite <- expo_p_cancel. rewrite <- expo_p_cancel. reflexivity. - assert (Hpq : p <> 0) by auto. rewrite mul_assoc. assert (Hk : \u301a fact K \u301b <> 0). { apply phi_Zp_invertible; auto. omega. } assert (HN1 : \u301a fact (N - K) \u301b <> 0). { apply phi_Zp_invertible; auto. omega. } assert (Hanc : k0 = 0 \\/ k0 <> 0) by omega. destruct Hanc as [Hk0eq | Hk0neq]. + rewrite Hk0eq in *. simpl in *. rewrite phi_Zp_eq. rewrite Psi_Zp_eq. rewrite expoZp. rewrite <- Hk0eq in *. replace (n0 - k0) with 0 by omega. simpl. rewrite -> expo_p_cancel. replace (p - (k0 - n0)) with p by omega. rewrite phi_Zp_eq. rewrite Psi_Zp_eq. rewrite expoZp. + assert (Hkq : \u301a \u03a8 0 \u301b = \u301a fact (p - 1) \u301b). { apply phi_Zp_eq; auto. omega. } rewrite Hkq. rewrite mul_assoc. rewrite phi_Zp_eq. rewrite expoZp. rewrite Psi_Zp_eq. rewrite expoZp.", "back_times": 0, "succ": false, "time": 63.36297941207886}]