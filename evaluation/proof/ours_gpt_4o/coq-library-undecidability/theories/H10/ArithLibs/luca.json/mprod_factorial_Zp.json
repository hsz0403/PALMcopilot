[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": ["induction n.", "-", "simpl.", "auto.", "-"], "tactic": "rewrite (binomial_thm (S n) n) at 1.", "exn": "In environment factorial_cancel : forall n a b : nat, fact n * a = fact n * b -> a = b p : nat Hp : p <> 0 expo_p_cancel : forall n a b : nat, expo n p * a = expo n p * b -> a = b i, n : nat IHn : \u301a \u03a0 n (fun i0 : nat => i0 + (i * p + 1)) \u301b = \u301a fact n \u301b The term \"S n\" has type \"nat\" while it is expected to have type \"?p <= ?n\".", "type": "wrong_type", "handled": true}, {"ctx": ["induction n.", "-", "simpl.", "auto.", "-", "qsimpl time: 1 use: binomial_thm,S.", "remember (S n) as sn.", "assert (expo i p * mprod_an (i * p + 1) n = expo i p * mprod_an (i * p + 1) n).", "reflexivity."], "tactic": "apply expo_p_cancel in H.", "exn": "Unable to apply lemma of type \"forall n a b : nat, expo n p * a = expo n p * b -> a = b\" on hypothesis of type \"forall n p : nat, p <= n -> fact n = binomial n p * fact p * fact (n - p)\".", "type": "cannot_apply_in", "handled": true}, {"ctx": ["induction n.", "-", "simpl.", "auto.", "-", "qsimpl time: 1 use: binomial_thm,S.", "remember (S n) as sn.", "assert (expo i p * mprod_an (i * p + 1) n = expo i p * mprod_an (i * p + 1) n).", "reflexivity.", "qsimpl time: 1 use: binomial_thm,S."], "tactic": "apply factorial_cancel.", "exn": "In environment H2 : forall n p : nat, p <= n -> fact n = binomial n p * fact p * fact (n - p) n0 : nat -> nat factorial_cancel : forall n a b : nat, fact n * a = fact n * b -> a = b p : nat Hp : p = 0 -> False expo_p_cancel : forall n a b : nat, expo n p * a = expo n p * b -> a = b i, n : nat H0 : rem (\u03a0 n (fun i0 : nat => i0 + (i * p + 1))) p = rem (fact n) p H4 : nat Unable to unify \"?M2459 = ?M2460\" with \"\u301a msum mul (n0 0) (n0 n) (fun i0 : nat => i0 + (i * p + n0 0)) \u301b = \u301a fact (n0 n) \u301b\".", "type": "cannot_unify", "handled": true}, {"ctx": ["induction n.", "-", "simpl.", "auto.", "-", "qsimpl time: 1 use: binomial_thm,S.", "remember (S n) as sn.", "assert (expo i p * mprod_an (i * p + 1) n = expo i p * mprod_an (i * p + 1) n).", "reflexivity.", "qsimpl time: 1 use: binomial_thm,S.", "qsimpl time: 1 use: binomial_thm,S."], "tactic": "rewrite <- Heqsn.", "exn": "The reference Heqsn was not found in the current environment.", "type": "ref_not_found", "handled": true}]}, "chat": [], "original": "induction n. - simpl. auto. - rewrite (binomial_thm (S n) n) at 1. remember (S n) as sn. assert (expo i p * mprod_an (i * p + 1) n = expo i p * mprod_an (i * p + 1) n). { reflexivity. } apply expo_p_cancel in H. apply factorial_cancel. rewrite <- Heqsn. ring.", "back_times": 0, "succ": false, "time": 144.0621485710144}]