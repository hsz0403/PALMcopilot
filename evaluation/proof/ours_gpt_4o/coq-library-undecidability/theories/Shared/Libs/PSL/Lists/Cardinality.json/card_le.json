[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": ["induction A as [|a A' IHA].", "--", "intros _.", "simpl.", "apply le_0_n.", "--", "intros H."], "tactic": "specialize (list_exists_not_incl X (a :: A') B) as [H1 _].", "exn": "In environment X : eqType a : X A', B : list X IHA : A' <<= B -> card A' <= card B H : a :: A' <<= B The term \"X\" has type \"eqType\" while it is expected to have type \"~ ?A <<= ?B\".", "type": "wrong_type", "handled": true}]}, "chat": [], "original": "induction A as [|a A' IHA]. -- intros _. simpl. apply le_0_n. -- intros H. specialize (list_exists_not_incl X (a :: A') B) as [H1 _]. destruct (classic (a el A')) as [H2|H2]. ++ rewrite card_cons. apply IHA. apply incl_lrcons with a. apply H. apply H2. ++ rewrite card_cons' with (x := a); auto. destruct (H1 H) as [x [Hx1 Hx2]]. assert (~ x el a :: A') as H3. { intro H4. destruct H4 as [H4|H4]. - subst. contradiction. - apply H2. apply H4. } specialize (rem_inclr X (a :: A') B x H H3) as H4. specialize (IHA H4). apply le_n_S. rewrite <- (card_cons x A'). apply card_in_rem. apply Hx1.", "back_times": 0, "succ": false, "time": 105.8018057346344}]