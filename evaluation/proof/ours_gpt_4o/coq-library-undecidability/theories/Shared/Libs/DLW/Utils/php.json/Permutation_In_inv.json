[{"history": {"proof": "intros Hperm x Hin. srun best use: in_split, Permutation_in.", "repairs": ["", "hammer"], "exceptions": [{"ctx": ["intros Hperm x Hin."], "tactic": ["induction Hperm as [| a l1 l2 IH Hperm' | x y l1 l2 IH] in x, Hin |- *.", ""], "exn": "Expects a disjunctive pattern with 4 branches.", "type": "num_branch", "handled": false}]}, "chat": [], "original": "intros Hperm x Hin. induction Hperm as [| a l1 l2 IH Hperm' | x y l1 l2 IH] in x, Hin |- *. -- inversion Hin. -- simpl in Hin. destruct Hin as [Hx | Hin']. ++ subst. apply In_perm with (x := a) in Hperm'. destruct Hperm' as [m Hm]. exists nil, m. simpl. auto. ++ apply IH in Hin' as [l [r Hr]]. exists (a :: l), r. simpl. auto. -- apply in_elt_inv in Hin. destruct Hin as [Hx | Hin']. ++ subst. exists nil, (x :: l1). simpl. auto. ++ apply IH in Hin' as [l [r Hr]]. exists l, r. auto.", "back_times": 0, "succ": true, "time": 10.305835247039795}]