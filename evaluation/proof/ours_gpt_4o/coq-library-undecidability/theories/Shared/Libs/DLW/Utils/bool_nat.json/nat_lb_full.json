[{"history": {"proof": "", "repairs": [], "exceptions": []}, "chat": [], "original": "induction n using nat_ind. - exists nil. constructor. - remember (rem (S n) 2 =? 0) as r0 eqn:Hr0. destruct r0. + exists (\u27d8 :: proj1_sig IHn). constructor. * intros H. apply Hr0. rewrite H. reflexivity. * rewrite Heqr0. reflexivity. * apply IHn. + exists (\u27d9 :: proj1_sig IHn). constructor. * intros H. apply Hr0. rewrite H. reflexivity. * apply Nat.neq_0_lt_0. apply Nat.lt_0_succ. * apply IHn.", "back_times": 0, "succ": false, "time": 23.246212244033813}]