[{"history": {"proof": "intros Hper Hincl. srun best use: perm_incl_left unfold: incl.", "repairs": ["", "hammer"], "exceptions": [{"ctx": ["intros Hper Hincl.", "induction m as [|x m'].", "-"], "tactic": "apply incl_nil.", "exn": "The reference incl_nil was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros Hper Hincl.", "induction m as [|x m'].", "-", "apply incl_nil_l.", "-"], "tactic": "apply incl_right_cons_choose in Hincl.", "exn": "Unable to apply lemma of type \"forall (x : X) (l m : list X), incl m (x :: l) -> In x m \\\\/ incl m l\" on hypothesis of type \"incl (x :: m') l1\".", "type": "cannot_apply_in", "handled": true}, {"ctx": ["intros Hper Hincl.", "induction m as [|x m'].", "-", "apply incl_nil_l.", "-", "qsimpl time: 1 use: incl_right_cons_choose."], "tactic": "destruct Hincl as [Hin | Hinl].", "exn": "Unable to find an instance for the variable a.", "type": "no_instance_var", "handled": true}]}, "chat": [], "original": "intros Hper Hincl. induction m as [|x m']. - apply incl_nil. - apply incl_right_cons_choose in Hincl. destruct Hincl as [Hin | Hinl]. + assert (In x l2) by (apply Permutation_in with (l := l1); auto). apply incl_cons; auto. + apply incl_tl. apply IHm'; auto.", "back_times": 0, "succ": true, "time": 46.833516359329224}]