[{"history": {"proof": "simpl. reflexivity.", "repairs": ["", ""], "exceptions": []}, "chat": [{"role": "user", "content": "Help me to prove a theorem in Coq, based on provided proof states including hypotheses and goals. Give a complete proof in only one single code block without explanations, extra definitions. Give a complete proof in one response, only give the proof body, without repeating the definition and \"Proof.\". Avoid existing names when using intros. Write the commands separately, without \";\" and \"[cmd|cmd]\". Use bullets for structure, NEVER use \"{\" and \"}\". When -, + and * are used out, proceed to double versions like --, ++, etc. For example, given proof state:\nn, m: nat\nIHn: m + n = n + m\n============================\nm + S n = S n + m\nThe hypotheses n, m: nat and IHn: m + n = n + m are given first, then the goal, m + S n = S n + m, separated by =. Expect a response like: \n```coq\nsimpl. rewrite <- IHn. auto.``` \nYou do not intros any terms because all terms have already been introduced.\n\nWhen I give:\nforall n m : nat, m + n = n + m\n============================\nn, m: nat\nyour answer should be like:\n```coq\nintros n m. induction n.\n- simpl. auto.\n- simpl. rewrite <- IHn. auto.\nQed.```\nDefinitions and lemmas related to the proof will be provided, use them accordingly.\n\n\nSolve This Proof State:\n\nHypotheses:\nn: nat\ny: pos n\nx: pos n\nHxy: x <> y\ni: nat\ny': pos n\n\nGoal:\nlength move_rev_stack = 7\n\nPremises:\nlength : forall A : Type, list A -> nat\nNotation pos := Fin.t\nmove_rev_stack = POP x (4 + i) (7 + i) :: PUSH y One :: PUSH y' Zero :: POP y' i i :: PUSH y Zero :: PUSH x Zero :: POP x i i :: nil : list (bsm_instr n)\nFin.eq_dec : forall x0 y0 : pos ?n, {x0 = y0} + {x0 <> y0} where ?n : [n : nat x : pos n y : pos n Hxy : x <> y i : nat y' := y : pos n |- nat]\nFin.of_nat_ext : forall h h' : ?p < ?n, Fin.of_nat_lt h = Fin.of_nat_lt h' where ?p : [n : nat x : pos n y : pos n Hxy : x <> y i : nat y' := y : pos n |- nat] ?n : [n : nat x : pos n y : pos n Hxy : x <> y i : nat y' := y : pos n |- nat]\nFin.FS_inj : forall x0 y0 : pos ?n, pos_nxt x0 = pos_nxt y0 -> x0 = y0 where ?n : [n : nat x : pos n y : pos n Hxy : x <> y i : nat y' := y : pos n |- nat]\nempty_stack_length : forall (x : pos n) (i : nat), length (empty_stack x i) = 3\nVectorSpec.nth_map2 : forall (f : ?A -> ?B -> ?C) (n0 : nat) (v : vec ?A n0) (w : vec ?B n0) (p1 p2 p3 : pos n0), p1 = p2 -> p2 = p3 -> VectorDef.nth (VectorDef.map2 f v w) p1 = f (VectorDef.nth v p2) (VectorDef.nth w p3) where ?A : [n : nat x : pos n y : pos n Hxy : x <> y i : nat y' := y : pos n |- Type] ?B : [n : nat x : pos n y : pos n Hxy : x <> y i : nat y' := y : pos n |- Type] ?C : [n : nat x : pos n y : pos n Hxy : x <> y i : nat y' := y : pos n |- Type]\nFin.to_nat_inj : forall p q : pos ?n, proj1_sig (Fin.to_nat p) = proj1_sig (Fin.to_nat q) -> p = q where ?n : [n : nat x : pos n y : pos n Hxy : x <> y i : nat y' := y : pos n |- nat]\npos_S_inv : forall p : pos (S ?n), (p = pos0) + {q : pos ?n | p = pos_nxt q} where ?n : [n : nat x : pos n y : pos n Hxy : x <> y i : nat y' := y : pos n |- nat]\nVectorSpec.nth_map : forall (f : ?A -> ?B) (n0 : nat) (v : vec ?A n0) (p1 p2 : pos n0), p1 = p2 -> VectorDef.nth (VectorDef.map f v) p1 = f (VectorDef.nth v p2) where ?A : [n : nat x : pos n y : pos n Hxy : x <> y i : nat y' := y : pos n |- Type] ?B : [n : nat x : pos n y : pos n Hxy : x <> y i : nat y' := y : pos n |- Type]\nFin.of_nat_to_nat_inv : forall p : pos ?m, Fin.of_nat_lt (proj2_sig (Fin.to_nat p)) = p where ?m : [n : nat x : pos n y : pos n Hxy : x <> y i : nat y' := y : pos n |- nat]\nBinInt.Z.le = fun x y : BinNums.Z => BinInt.Z.compare x y <> Gt : BinNums.Z -> BinNums.Z -> Prop Arguments BinInt.Z.le (_ _)%Z_scope\nVectorDef.map2 : (?A -> ?B -> ?C) -> forall n0 : nat, vec ?A n0 -> vec ?B n0 -> vec ?C n0 where ?A : [n : nat x : pos n y : pos n Hxy : x <> y i : nat y' := y : pos n |- Type] ?B : [n : nat x : pos n y : pos n Hxy : x <> y i : nat y' := y : pos n |- Type] ?C : [n : nat x : pos n y : pos n Hxy : x <> y i : nat y' := y : pos n |- Type]\nVectorDef.map : (?A -> ?B) -> forall n0 : nat, vec ?A n0 -> vec ?B n0 where ?A : [n : nat x : pos n y : pos n Hxy : x <> y i : nat y' := y : pos n |- Type] ?B : [n : nat x : pos n y : pos n Hxy : x <> y i : nat y' := y : pos n |- Type]\nlist_repeat_length : forall (X : Type) (x : X) (n : nat), length (list_repeat x n) = n\nrepeat_length : forall (A : Type) (x : A) (n : nat), length (repeat x n) = n\nPermutation.Permutation_nth : forall (A : Type) (l l' : list A) (d : A), l ~p l' < -> (let n := length l in length l' = n /\\ (exists f : nat -> nat, FinFun.bFun n f /\\ FinFun.bInjective n f /\\ (forall x : nat, x < n -> nth x l' d = nth (f x) l d)))\npos_eq_dec : forall (n : nat) (x y : pos n), {x = y} + {x <> y}\nFin.L_R : forall n0 : nat, pos ?m -> pos (n0 + ?m) where ?m : [n : nat x : pos n y : pos n Hxy : x <> y i : nat y' := y : pos n |- nat]\nVectorDef.caseS' : forall (v : vec ?A (S ?n)) (P : vec ?A (S ?n) -> Type), (forall (h : ?A) (t : vec ?A ?n), P (h ## t)) -> P v where ?A : [n : nat x : pos n y : pos n Hxy : x <> y i : nat y' := y : pos n |- Type] ?n : [n : nat x : pos n y : pos n Hxy : x <> y i : nat y' := y : pos n |- nat]\nvec_one_spec_neq : forall (n : nat) (p q : pos n), p <> q -> vec_one p#>q = 0\nnth_error_Some : forall (A : Type) (l : list A) (n : nat), nth_error l n <> None < -> n < length l\nlist_pick : forall (X : Type) (ll : list X) (k : nat), k < length ll -> {x : X & {l : list X & {r : list X | ll = l ++ x :: r /\\ length l = k}}}\nnth_ext : forall (A : Type) (l l' : list A) (d d' : A), length l = length l' -> (forall n : nat, n < length l -> nth n l d = nth n l' d') -> l = l'\npartition_length : forall (A : Type) (f : A -> bool) (l l1 l2 : list A), partition f l = (l1, l2) -> length l = length l1 + length l2\nFinFun.Fin2Restrict.f2n_inj : forall (n : nat) (x y : pos n), FinFun.Fin2Restrict.f2n x = FinFun.Fin2Restrict.f2n y -> x = y\napp_length : forall (A : Type) (l l' : list A), length (l ++ l') = length l + length l'\nrev_length : forall (A : Type) (l : list A), length (rev l) = length l\nskipn_length : forall (A : Type) (n : nat) (l : list A), length (skipn n l) = length l - n\nprod_length : forall (A B : Type) (l : list A) (l' : list B), length (list_prod l l') = length l * length l'\npos_list_length : forall n : nat, length (pos_list n) = n\nvec_change_neq : forall (X : Type) (n : nat) (v : vec X n) (p q : pos n) (x : X), p <> q -> v[x/p]#>q = v#>q"}, {"role": "assistant", "content": "```coq\nsimpl.\nreflexivity.\nQed.\n```"}], "original": "simpl. reflexivity.", "back_times": 0, "succ": true, "time": 3.8473763465881348}]