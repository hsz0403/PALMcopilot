[{"history": {"proof": "hauto use: mm_div2_progress inv: prod, bool.", "repairs": [], "exceptions": [{"ctx": ["intros Hquo Hrem Hdiv2 Hst.", "destruct (v#>src) eqn:Esrc.", "-", "discriminate Hdiv2.", "-"], "tactic": "-", "exn": "[Focus] Wrong bullet -: Current bullet - is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["intros Hquo Hrem Hdiv2 Hst.", "destruct (v#>src) eqn:Esrc.", "-", "discriminate Hdiv2.", "-", "shelve."], "tactic": "-", "exn": "[Focus] Wrong bullet -: No more subgoals.", "type": "no_more_subgoals", "handled": true}]}, "chat": [], "original": "intros Hquo Hrem Hdiv2 Hst. destruct (v#>src) eqn:Esrc. - discriminate Hdiv2. - inversion Hdiv2 as [Hk Hone]. assert (v#>src = 1 + 2 * 0) as H1. { simpl. rewrite Esrc. simpl. reflexivity. } rewrite H1 in Esrc. apply mm_div2_spec_1 with (k:=0) in H1 as Hspec. + apply Hspec; auto. + auto. + rewrite Hk, Esrc. simpl. reflexivity. - destruct (div2 (S (S n0))) eqn:Ediv2. assert (div2 (S (S n0)) = (S n1, b)) as Ediv2H. { rewrite Ediv2. reflexivity. } assert (v#>src = S (S n0)) as Hss. { rewrite <- Esrc. reflexivity. } destruct b. + inversion Hdiv2 as [Hk Hone]. subst k. subst Hone. assert (v#>src = 1 + 2 * S n1) as Hss2. { rewrite <- Ediv2H. simpl in Ediv2. rewrite Ediv2. simpl. reflexivity. } apply mm_div2_spec_1 with (k:=S n1) in Hss2 as Hspec1. * apply Hspec1; auto. * auto. * rewrite Ediv2H. simpl. reflexivity. + discriminate Hdiv2.", "back_times": 0, "succ": true, "time": 108.02781343460083}]