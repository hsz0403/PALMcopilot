[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": ["intros Hnil Hx Hf.", "split.", "-", "intro H.", "unfold FRACTRAN_HALTING in *."], "tactic": ["destruct H as [Hstep | Heval].", ""], "exn": "Expects a disjunctive pattern with 1 branch or a conjunctive pattern made of 2 patterns.", "type": "num_branch_both", "handled": false}, {"ctx": ["intros Hnil Hx Hf.", "split.", "-", "intro H.", "unfold FRACTRAN_HALTING in *."], "tactic": "-", "exn": "[Focus] Wrong bullet -: Current bullet - is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["intros Hnil Hx Hf.", "split.", "-", "intro H.", "unfold FRACTRAN_HALTING in *.", "shelve.", "-", "intro H.", "unfold FRACTRAN_HALTING in *."], "tactic": ["destruct H as [Hstep | Heval].", ""], "exn": "Expects a disjunctive pattern with 1 branch or a conjunctive pattern made of 2 patterns.", "type": "num_branch_both", "handled": false}]}, "chat": [], "original": "intros Hnil Hx Hf. split. - intro H. unfold FRACTRAN_HALTING in *. destruct H as [Hstep | Heval]. + left. now apply fractran_step_zero. + right. destruct Heval as [n [y [Hsteps Hhalt]]]. exists n, y. split. * now apply fractran_step_zero. * apply fractran_rt_no_zero_num in Hhalt. -- subst y; auto. -- apply Forall_forall. intros. apply filter_In in H0 as [Hin Hdec]. apply Nat.eq_dec_neq in Hdec. apply Hf in Hin. contradiction. - intro H. unfold FRACTRAN_HALTING in *. destruct H as [Hstep | Heval]. + left. now apply fractran_step_zero. + right. destruct Heval as [n [y [Hsteps Hhalt]]]. exists n, y. split. * now apply fractran_step_zero. * apply fractran_rt_no_zero_num in Hhalt. -- subst y; auto. -- apply Forall_forall. intros. apply filter_In in H0 as [Hin Hdec]. apply Nat.eq_dec_neq in Hdec. apply Hf in Hin. contradiction.", "back_times": 0, "succ": false, "time": 152.42228245735168}]