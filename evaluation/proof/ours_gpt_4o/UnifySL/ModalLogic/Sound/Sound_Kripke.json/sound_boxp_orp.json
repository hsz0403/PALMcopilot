[{"history": {"proof": "qsimpl time: 1. qsimpl time: 1 use: sat_orp. qsimpl time: 1 use: sat_orp.", "repairs": ["not_inductive_product", "cannot_apply_in", "no_instance_var"], "exceptions": [{"ctx": ["intros x y m."], "tactic": "split.", "exn": "Not an inductive product.", "type": "not_inductive_product", "handled": true}, {"ctx": ["intros x y m.", "qsimpl time: 1."], "tactic": "intros H.", "exn": "H is already used.", "type": "used_var", "handled": true}, {"ctx": ["intros x y m.", "qsimpl time: 1."], "tactic": "intros H'.", "exn": "No product even after head-reduction.", "type": "no_product", "handled": true}, {"ctx": ["intros x y m.", "qsimpl time: 1."], "tactic": "apply sat_orp in H.", "exn": "Unable to apply lemma of type \"forall (m0 : model) (x0 y0 : expr), m0 |= x0 || y0 <-> m0 |= x0 \\\\/ m0 |= y0\" on hypothesis of type \"Included model (denotation FF) Semantics.falsep\".", "type": "cannot_apply_in", "handled": true}, {"ctx": ["intros x y m.", "qsimpl time: 1.", "qsimpl time: 1 use: sat_orp."], "tactic": "destruct H as [H1 | H2].", "exn": "Unable to find an instance for the variable x.", "type": "no_instance_var", "handled": true}]}, "chat": [], "original": "intros x y m. split. - intros H. apply sat_orp in H. destruct H as [H1 | H2]. + apply sound_rule_N. intros m' Hr. apply sat_boxp. intros n Hr'. apply sound_axiom_K with (x := x) (y := y). * apply sat_boxp. intros n' Hr''. apply H1. apply KM_relation_up with (n' := n'). -- apply Hr. -- apply Hr'. * apply sat_boxp. intros n' Hr''. apply H1. apply KM_relation_up with (n' := n'). -- apply Hr. -- apply Hr'. + apply sound_rule_N. intros m' Hr. apply sat_boxp. intros n Hr'. apply sound_axiom_K with (x := y) (y := x). * apply sat_boxp. intros n' Hr''. apply H2. apply KM_relation_up with (n' := n'). -- apply Hr. -- apply Hr'. * apply sat_boxp. intros n' Hr''. apply H2. apply KM_relation_up with (n' := n'). -- apply Hr. -- apply Hr'. - intros H. apply sat_boxp. intros n Hr. apply sat_orp. destruct (seriality m) as [n' Hr']. assert (n' = n). { apply (pf_R m n n' Hr Hr'). } subst n. destruct (functionality m) as [n' Hfn]. specialize (Hfn n). assert (n' = n). { apply Hfn; auto. } subst n. apply H.", "back_times": 0, "succ": false, "time": 52.806363105773926}]