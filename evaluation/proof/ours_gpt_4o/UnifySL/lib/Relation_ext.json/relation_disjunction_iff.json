[{"history": {"proof": "intros A R R' x y. split. - intros H. unfold relation_disjunction in H. unfold predicate_union in H. qsimpl time: 1. - sfirstorder depth: 3. qsimpl time: 1.", "repairs": ["", "", "", "", "", "", "cannot_apply_in", "wrong_bullet", "hammer", "not_inductive_product"], "exceptions": [{"ctx": ["intros A R R' x y.", "split.", "-", "intros H.", "unfold relation_disjunction in H.", "unfold predicate_union in H."], "tactic": "apply List.Exists_cons in H as [H | H].", "exn": "Unable to apply lemma of type \"forall (A : Type) (P : A -> Prop) (x : A) (l : list A), List.Exists P (x :: l) <-> P x \\\\/ List.Exists P l\" on hypothesis of type \"pointwise_extension or (Tcons A (Tcons A Tnil)) R R' x y\".", "type": "cannot_apply_in", "handled": true}, {"ctx": ["intros A R R' x y.", "split.", "-", "intros H.", "unfold relation_disjunction in H.", "unfold predicate_union in H.", "qsimpl time: 1."], "tactic": "+", "exn": "Wrong bullet +: Expecting -.", "type": "wrong_bullet", "handled": true}, {"ctx": ["intros A R R' x y.", "split.", "-", "intros H.", "unfold relation_disjunction in H.", "unfold predicate_union in H.", "qsimpl time: 1.", "-", "left."], "tactic": "right.", "exn": "Not an inductive product.", "type": "not_inductive_product", "handled": true}, {"ctx": ["intros A R R' x y.", "split.", "-", "intros H.", "unfold relation_disjunction in H.", "unfold predicate_union in H.", "qsimpl time: 1.", "-", "left.", "qsimpl time: 1."], "tactic": "-", "exn": "Wrong bullet -: Current bullet - is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["intros A R R' x y.", "split.", "-", "intros H.", "unfold relation_disjunction in H.", "unfold predicate_union in H.", "qsimpl time: 1.", "-", "left.", "qsimpl time: 1.", "shelve."], "tactic": "-", "exn": "Wrong bullet -: No more subgoals.", "type": "no_more_subgoals", "handled": true}]}, "chat": [], "original": "intros A R R' x y. split. - intros H. unfold relation_disjunction in H. unfold predicate_union in H. apply List.Exists_cons in H as [H | H]. + left. auto. + right. auto. - intros [H | H]. + unfold relation_disjunction. unfold predicate_union. apply List.Exists_cons_hd. auto. + unfold relation_disjunction. unfold predicate_union. apply List.Exists_cons_tl. auto.", "back_times": 0, "succ": true, "time": 27.122448205947876}]