[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": ["intros Phi x y."], "tactic": "pose proof (@aux_minimun_theorem04 x (~~ x --> y)).", "exn": "In environment L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Derivable L bSC : BasicSequentCalculus L Gamma minSC : MinimumSequentCalculus L Gamma ipSC : IntuitionisticPropositionalSequentCalculus L Gamma Phi : context x, y : expr The term \"x\" has type \"expr\" while it is expected to have type \"Language\".", "type": "wrong_type", "handled": true}, {"ctx": ["intros Phi x y.", "qsimpl time: 1 use: aux_minimun_theorem04."], "tactic": ["apply deduction_weaken0 with (Phi:=Phi) in H.", ""], "exn": "No such bound variable Phi (possible names are: Phi0 and y0).", "type": "no_such_bound", "handled": false}]}, "chat": [], "original": "intros Phi x y. pose proof (@aux_minimun_theorem04 x (~~ x --> y)). apply deduction_weaken0 with (Phi:=Phi) in H. apply TestInSequentCalculus.Unnamed_thm with (y1:=x --> x --> y) (y2:=x --> y) in H. - apply TestInSequentCalculus.Unnamed_thm with (y1:=x --> ~~ x --> y) (y2:=~~ x --> y) in H. -- unfold MinimumSequentCalculus in minSC. destruct minSC as [msc1 _]. assert (H0: Phi |-- x --> x) by (apply deduction_weaken0; apply provable_impp_refl). apply msc1 with (x:=x) in H0. apply TestInSequentCalculus.Unnamed_thm with (y1:=~~ x --> y) (y2:=y) in H0. ++ apply msc1 with (x:=~~ x) in H0. auto. ++ apply deduction_weaken0. apply aux_minimun_theorem02. - apply deduction_weaken0. apply provable_impp_refl.", "back_times": 0, "succ": false, "time": 93.81827187538147}]