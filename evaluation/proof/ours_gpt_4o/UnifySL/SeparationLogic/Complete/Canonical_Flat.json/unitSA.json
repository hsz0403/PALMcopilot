[{"history": {"proof": "qsimpl time: 1 use: IncreasingSeparationAlgebra,UnitalSeparationAlgebra.", "repairs": ["not_evaluable"], "exceptions": [{"ctx": [], "tactic": "unfold UnitalSeparationAlgebra, IncreasingSeparationAlgebra.", "exn": "Cannot coerce UnitalSeparationAlgebra to an evaluable reference.", "type": "not_evaluable", "handled": true}, {"ctx": ["qsimpl time: 1 use: IncreasingSeparationAlgebra,UnitalSeparationAlgebra.", "split.", "intros m.", "exists m.", "split.", "+"], "tactic": "intros m1 m2 H1 H2 H3.", "exn": "H1 is already used.", "type": "used_var", "handled": true}, {"ctx": ["qsimpl time: 1 use: IncreasingSeparationAlgebra,UnitalSeparationAlgebra.", "split.", "intros m.", "exists m.", "split.", "+"], "tactic": "intros m1 m2 H1' H2 H3.", "exn": "H2 is already used.", "type": "used_var", "handled": true}, {"ctx": ["qsimpl time: 1 use: IncreasingSeparationAlgebra,UnitalSeparationAlgebra.", "split.", "intros m.", "exists m.", "split.", "+"], "tactic": "intros m1 m2 H1' H2' H3.", "exn": "H3 is already used.", "type": "used_var", "handled": true}, {"ctx": ["qsimpl time: 1 use: IncreasingSeparationAlgebra,UnitalSeparationAlgebra.", "split.", "intros m.", "exists m.", "split.", "+"], "tactic": "intros m1 m2 H1' H2' H3'.", "exn": "No product even after head-reduction.", "type": "no_product", "handled": true}, {"ctx": ["qsimpl time: 1 use: IncreasingSeparationAlgebra,UnitalSeparationAlgebra.", "split.", "intros m.", "exists m.", "split.", "+"], "tactic": "destruct (H_J m1 m2 m m1 cP0 cP0 cP0 H1 H2 H3) as [_ H4].", "exn": "The reference cP0 was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["qsimpl time: 1 use: IncreasingSeparationAlgebra,UnitalSeparationAlgebra.", "split.", "intros m.", "exists m.", "split.", "+"], "tactic": "apply H4.", "exn": "In environment L : Language minL : MinimumLanguage L pL : PropositionalLanguage L sepconL : SepconLanguage L wandL : WandLanguage L GammaP : Provable L GammaD : Derivable L MD : Model kMD : KripkeModel MD M : Kmodel R : Relation (Kworlds M) J : Join (Kworlds M) SM : Semantics L MD fsepconSM : SepconSemantics L MD M SM fwandSM : WandSemantics L MD M SM cP : context -> Prop rel : bijection (Kworlds M) {x : context | cP x} H_J : forall (m1 m2 m : Kworlds M) (Phi1 Phi2 Phi : {x : context | cP x}), rel m1 Phi1 -> rel m2 Phi2 -> rel m Phi -> (join m1 m2 m -> Included expr (context_sepcon (proj1_sig Phi1) (proj1_sig Phi2)) (proj1_sig Phi)) /\\\\ (Included expr (context_sepcon (proj1_sig Phi1) (proj1_sig Phi2)) (proj1_sig Phi) -> join m1 m2 m) empL : EmpLanguage L AL_DC : at_least derivable_closed cP LIN_SR : forall (Phi : context) (Psi : {x : context | cP x}), Lindenbaum_constructable (context_sepcon_included_r Phi (proj1_sig Psi)) cP H : forall (x : expr) (m : Kworlds M) (Phi : {x : context | cP x}), rel m Phi -> proj1_sig Phi x -> KRIPKE: M, m |= x H0 : forall (x : expr) (m : Kworlds M) (Phi : {x : context | cP x}), rel m Phi -> KRIPKE: M, m |= x -> proj1_sig Phi x H1 : forall (m n : Kworlds M) (Phi Psi : {x : context | cP x}), rel m Phi -> rel n Psi -> Included expr (proj1_sig Phi) (proj1_sig Psi) -> m <= n H2 : forall (m n : Kworlds M) (Phi Psi : {x : context | cP x}), rel m Phi -> rel n Psi -> m <= n -> Included expr (proj1_sig Phi) (proj1_sig Psi) H3 : Included (Kworlds M) (Kdenotation M emp) WeakSemantics.WeakSemantics.emp H4 : Included (Kworlds M) WeakSemantics.WeakSemantics.emp (Kdenotation M emp) sepcon_emp1 : forall x : expr, |-- x * emp --> x sepcon_emp2 : forall x : expr, |-- x --> x * emp sepcon_comm_impp : forall x y : expr, |-- x * y --> y * x sepcon_assoc1 : forall x y z : expr, |-- x * (y * z) --> x * y * z sepcon_mono : forall x1 x2 y1 y2 : expr, |-- x1 --> x2 -> |-- y1 --> y2 -> |-- x1 * y1 --> x2 * y2 andp_intros : forall x y : expr, |-- x --> y --> x && y andp_elim1 : forall x y : expr, |-- x && y --> x andp_elim2 : forall x y : expr, |-- x && y --> y orp_intros1 : forall x y : expr, |-- x --> x || y orp_intros2 : forall x y : expr, |-- y --> x || y orp_elim : forall x y z : expr, |-- (x --> z) --> (y --> z) --> x || y --> z falsep_elim : forall x : expr, |-- FF --> x modus_ponens : forall x y : expr, |-- x --> y -> |-- x -> |-- y axiom1 : forall x y : expr, |-- x --> y --> x axiom2 : forall x y z : expr, |-- (x --> y --> z) --> (x --> y) --> x --> z deduction_andp_intros : forall (Phi : context) (x y : expr), Phi |-- x -> Phi |-- y -> Phi |-- x && y deduction_andp_elim1 : forall (Phi : context) (x y : expr), Phi |-- x && y -> Phi |-- x deduction_andp_elim2 : forall (Phi : context) (x y : expr), Phi |-- x && y -> Phi |-- y deduction_orp_intros1 : forall (Phi : context) (x y : expr), Phi |-- x -> Phi |-- x || y deduction_orp_intros2 : forall (Phi : context) (x y : expr), Phi |-- y -> Phi |-- x || y deduction_orp_elim : forall (Phi : Ensemble expr) (x y z : expr), Phi;; x |-- z -> Phi;; y |-- z -> Phi;; x || y |-- z deduction_falsep_elim : forall (Phi : context) (x : expr), Phi |-- FF -> Phi |-- x deduction_modus_ponens : forall (Phi : context) (x y : expr), Phi |-- x -> Phi |-- x --> y -> Phi |-- y deduction_impp_intros : forall (Phi : Ensemble expr) (x y : expr), Phi;; x |-- y -> Phi |-- x --> y deduction_weaken : forall (Phi Psi : Ensemble expr) (x : expr), Included expr Phi Psi -> Phi |-- x -> Psi |-- x derivable_assum : forall (Phi : Ensemble expr) (x : expr), Ensembles.In expr Phi x -> Phi |-- x deduction_subst : forall (Phi Psi : context) (y : expr), (forall x : expr, Psi x -> Phi |-- x) -> Union expr Phi Psi |-- y -> Phi |-- y H5 : forall x : expr, empty_context |-- x -> |-- x H6 : forall x : expr, |-- x -> empty_context |-- x H7 : forall (Phi : context) (y : expr), (exists xs : list expr, Forall (fun x : expr => Phi x) xs /\\\\ |-- multi_imp xs y) -> Phi |-- y H8 : forall (Phi : context) (y : expr), Phi |-- y -> exists xs : list expr, Forall (fun x : expr => Phi x) xs /\\\\ |-- multi_imp xs y H9 : forall x y z : expr, |-- x --> y -* z -> |-- x * y --> z H10 : forall x y z : expr, |-- x * y --> z -> |-- x --> y -* z m : Kworlds M Unable to unify \"Included (Kworlds M) WeakSemantics.WeakSemantics.emp (Kdenotation M emp)\" with \"residue m m\".", "type": "cannot_unify", "handled": true}, {"ctx": ["qsimpl time: 1 use: IncreasingSeparationAlgebra,UnitalSeparationAlgebra.", "split.", "intros m.", "exists m.", "split.", "+"], "tactic": "+", "exn": "Wrong bullet +: Current bullet + is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["qsimpl time: 1 use: IncreasingSeparationAlgebra,UnitalSeparationAlgebra.", "split.", "intros m.", "exists m.", "split.", "+", "shelve.", "+", "intros m'.", "intro."], "tactic": "exists m'.", "exn": "Not an inductive product.", "type": "not_inductive_product", "handled": true}, {"ctx": ["qsimpl time: 1 use: IncreasingSeparationAlgebra,UnitalSeparationAlgebra.", "split.", "intros m.", "exists m.", "split.", "+", "shelve.", "+", "intros m'.", "intro.", "qsimpl time: 1 use: IncreasingSeparationAlgebra,UnitalSeparationAlgebra."], "tactic": "split.", "exn": "Not an inductive product.", "type": "not_inductive_product", "handled": true}, {"ctx": ["qsimpl time: 1 use: IncreasingSeparationAlgebra,UnitalSeparationAlgebra.", "split.", "intros m.", "exists m.", "split.", "+", "shelve.", "+", "intros m'.", "intro.", "qsimpl time: 1 use: IncreasingSeparationAlgebra,UnitalSeparationAlgebra."], "tactic": "intros _.", "exn": "No product even after head-reduction.", "type": "no_product", "handled": true}, {"ctx": ["qsimpl time: 1 use: IncreasingSeparationAlgebra,UnitalSeparationAlgebra.", "split.", "intros m.", "exists m.", "split.", "+", "shelve.", "+", "intros m'.", "intro.", "qsimpl time: 1 use: IncreasingSeparationAlgebra,UnitalSeparationAlgebra."], "tactic": "+", "exn": "Wrong bullet +: Current bullet + is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["qsimpl time: 1 use: IncreasingSeparationAlgebra,UnitalSeparationAlgebra.", "split.", "intros m.", "exists m.", "split.", "+", "shelve.", "+", "intros m'.", "intro.", "qsimpl time: 1 use: IncreasingSeparationAlgebra,UnitalSeparationAlgebra.", "shelve."], "tactic": "+", "exn": "Wrong bullet +: No more subgoals.", "type": "no_more_subgoals", "handled": true}]}, "chat": [], "original": "intros. unfold UnitalSeparationAlgebra, IncreasingSeparationAlgebra. split. - intros m. exists m. split. + intros m1 m2 H1 H2 H3. destruct (H_J m1 m2 m m1 cP0 cP0 cP0 H1 H2 H3) as [_ H4]. apply H4. + intros m'. intro. exists m'. split. * intros _. reflexivity. * intros _ _. reflexivity. - intros m. exists m. split. + intros m1 m2 H1 H2. apply H_J with (Phi1:=cP0) (Phi2:=cP0) (Phi:=cP0); auto. + intros m1 m2. apply H_J with (Phi1:=cP0) (Phi2:=cP0) (Phi:=cP0); auto.", "back_times": 0, "succ": false, "time": 235.47887635231018}]