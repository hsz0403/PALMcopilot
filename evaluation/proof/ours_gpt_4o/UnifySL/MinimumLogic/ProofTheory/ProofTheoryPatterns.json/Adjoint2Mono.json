[{"history": {"proof": "qsimpl time: 1.", "repairs": ["cannot_apply_in"], "exceptions": [{"ctx": ["constructor.", "intros x1 x2 H1 y1 y2 H2."], "tactic": "apply Adj in H1.", "exn": "Unable to apply lemma of type \"Adjointness L Gamma prodp funcp\" on hypothesis of type \"expr\".", "type": "cannot_apply_in", "handled": true}, {"ctx": ["constructor.", "intros x1 x2 H1 y1 y2 H2.", "qsimpl time: 1."], "tactic": "apply Adj in H2.", "exn": "The reference Adj was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["constructor.", "intros x1 x2 H1 y1 y2 H2.", "qsimpl time: 1.", "apply Empty_set in H2."], "tactic": "apply Adj.", "exn": "The reference Adj was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["constructor.", "intros x1 x2 H1 y1 y2 H2.", "qsimpl time: 1.", "apply Empty_set in H2.", "apply Build_Monotonicity."], "tactic": "rewrite <- Comm.", "exn": "The reference Comm was not found in the current environment.", "type": "ref_not_found", "handled": true}]}, "chat": [], "original": "constructor. intros x1 x2 H1 y1 y2 H2. apply Adj in H1. apply Adj in H2. apply Adj. rewrite <- Comm. apply prodp_mono. - apply Comm. apply Adj. apply derivable_impp_trans with (y := prodp x2 (funcp (funcp x2 y1) y2)). + apply prodp_mono. * apply adjoint1. apply derivable_impp_trans with (y := prodp x2 y1). -- apply derivable_impp_trans with (y := y1). ++ apply derivable_provable, derivable_impp_refl. ++ auto. -- apply Comm. apply adjoint1. apply derivable_impp_trans with (y := y1). ++ apply derivable_impp_trans with (y := funcp x2 y1). ** apply derivable_provable, derivable_impp_refl. ** apply derivable_provable, derivable_impp_refl. ++ apply derivable_provable. apply deduction_weaken0. apply derivable_impp_trans with (y := derivable (Adj x1 y1)). ** apply derivable_provable. apply deduction_weaken0. apply derivable_provable. auto. ** apply derivable_provable. apply deduction_weaken0. auto. * apply adjoint2. apply derivable_impp_trans with (y := prodp x2 (funcp (funcp x2 y1) y2)). -- apply derivable_provable, derivable_impp_refl. -- apply derivable_provable. apply derivable_impp_refl. + apply Comm. apply adjoint1. apply derivable_impp_trans with (y := derivable (Adj (prodp x2 (funcp x2 y1)) y2)). * apply prodp_mono. apply Comm. auto. * apply derivable_provable. apply derivable_impp_refl. - apply Comm. apply adjoint2. apply derivable_impp_trans with (y := prodp x2 (funcp y1 y2)). + apply derivable_impp_trans with (y := y1). * apply derivable_provable, derivable_impp_refl. * auto. + apply derivable_provable, derivable_impp_refl.", "back_times": 0, "succ": false, "time": 160.46231365203857}]