[{"history": {"proof": "intros p q H. induction H as [x p' | x y p' q' HltT | x y p' q' HeqT IHltP]. - simpl. qsimpl time: 1 use: Ltl. - qsimpl time: 1 use: Ltl. - qsimpl time: 1 use: Ltl.", "repairs": ["", "", "", "", "not_evaluable", "", "not_evaluable", "", "not_evaluable"], "exceptions": [{"ctx": ["intros p q H.", "induction H as [x p' | x y p' q' HltT | x y p' q' HeqT IHltP].", "-", "simpl."], "tactic": "unfold Ltl.", "exn": "Cannot coerce Ltl to an evaluable reference.", "type": "not_evaluable", "handled": true}, {"ctx": ["intros p q H.", "induction H as [x p' | x y p' q' HltT | x y p' q' HeqT IHltP].", "-", "simpl.", "qsimpl time: 1 use: Ltl."], "tactic": "destruct (fP p').", "exn": "No such goal. Focus next goal with bullet -.", "type": "next_goal", "handled": true}, {"ctx": ["intros p q H.", "induction H as [x p' | x y p' q' HltT | x y p' q' HeqT IHltP].", "-", "simpl.", "qsimpl time: 1 use: Ltl.", "-"], "tactic": "unfold Ltl.", "exn": "Cannot coerce Ltl to an evaluable reference.", "type": "not_evaluable", "handled": true}, {"ctx": ["intros p q H.", "induction H as [x p' | x y p' q' HltT | x y p' q' HeqT IHltP].", "-", "simpl.", "qsimpl time: 1 use: Ltl.", "-", "qsimpl time: 1 use: Ltl."], "tactic": "destruct (fP (pX x p')) eqn:Hp.", "exn": "No such goal. Focus next goal with bullet -.", "type": "next_goal", "handled": true}, {"ctx": ["intros p q H.", "induction H as [x p' | x y p' q' HltT | x y p' q' HeqT IHltP].", "-", "simpl.", "qsimpl time: 1 use: Ltl.", "-", "qsimpl time: 1 use: Ltl.", "-"], "tactic": "unfold Ltl.", "exn": "Cannot coerce Ltl to an evaluable reference.", "type": "not_evaluable", "handled": true}, {"ctx": ["intros p q H.", "induction H as [x p' | x y p' q' HltT | x y p' q' HeqT IHltP].", "-", "simpl.", "qsimpl time: 1 use: Ltl.", "-", "qsimpl time: 1 use: Ltl.", "-", "qsimpl time: 1 use: Ltl."], "tactic": "destruct (fP (pX y q')) eqn:Hq.", "exn": "No such goal.", "type": "no_goal", "handled": true}]}, "chat": [], "original": "intros p q H. induction H as [x p' | x y p' q' HltT | x y p' q' HeqT IHltP]. - simpl. unfold Ltl. destruct (fP p'). + simpl. apply inleft. constructor. + simpl. apply inleft. constructor. - unfold Ltl. destruct (fP (pX x p')) eqn:Hp. + simpl. destruct (fP (pX y q')) eqn:Hq. * simpl. apply inright. discriminate. * simpl. apply inleft. constructor. apply (olist_pX_eqT _ _ _ (eqT_refl x)). + simpl. destruct (fP (pX y q')) eqn:Hq. * simpl. apply inright. discriminate. * simpl. apply inleft. constructor. apply ltM_dec. - unfold Ltl. destruct (fP (pX y q')) eqn:Hq. + simpl. apply inright. discriminate. + simpl. apply inleft. constructor. * apply eqT_zerop_is_eqTerm with x0 x; auto. * apply IHltP.", "back_times": 0, "succ": true, "time": 0.9841058254241943}]