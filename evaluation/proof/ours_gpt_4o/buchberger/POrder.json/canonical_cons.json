[{"history": {"proof": "intros l a b ltT_ba not_zeroP_a canon_b_l. unfold canonical in *. split. - apply olist_cons. + auto. + destruct canon_b_l as [olist_b_l _]. auto. - qsimpl time: 1 use: canonical_nzeroP.", "repairs": ["", "", "", "", "", "", "", "", "", "", "", "cannot_unify"], "exceptions": [{"ctx": ["intros l a b ltT_ba not_zeroP_a canon_b_l.", "unfold canonical in *.", "split.", "-", "apply olist_cons.", "+", "auto.", "+", "destruct canon_b_l as [olist_b_l _].", "auto.", "-"], "tactic": "apply canonical_nzeroP.", "exn": "In environment A : Set A0, A1 : A eqA : A -> A -> Prop plusA : A -> A -> A invA : A -> A minusA, multA : A -> A -> A divA : A -> forall b : A, ~ eqA b A0 -> A cs : CoefStructure A A0 A1 eqA plusA invA minusA multA divA eqA_dec : forall a b : A, {eqA a b} + {~ eqA a b} n : nat ltM : mon n -> mon n -> Prop ltM_dec : forall a b : mon n, {ltM a b} + {ltM b a} + {a = b} os : OrderStructure (mon n) (zero_mon n) ltM (mult_mon n) eqT_refl := Term.eqT_refl A n : reflexive (Term A n) (eqT (A:=A) (n:=n)) consA := cons : mon n -> list (mon n) -> list (mon n) nilA := nil : list (mon n) listA := list (mon n) : Set DescA := Desc (mon n) ltM : list (mon n) -> Prop l : list (Term A n) a, b : Term A n ltT_ba : ltT b a not_zeroP_a : ~ zeroP A0 eqA (n:=n) a canon_b_l : olist (pX b l) /\\\\ nZterm (pX b l) Unable to unify \"zeroP A0 eqA (n:=n) ?M1672 -> False\" with \"(fix F (l : list (Term A n)) : (fun _ : list (Term A n) => Prop) l := match l as l0 return ((fun _ : list (Term A n) => Prop) l0) with | nil => True | y :: l0 => (fun (a : Term A n) (_ : list (Term A n)) (Rec : Prop) => Rec /\\\\ ~ zeroP A0 eqA (n:=n) a) y l0 (F l0) end) (pX a (pX b l))\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros l a b ltT_ba not_zeroP_a canon_b_l.", "unfold canonical in *.", "split.", "-", "apply olist_cons.", "+", "auto.", "+", "destruct canon_b_l as [olist_b_l _].", "auto.", "-", "qsimpl time: 1 use: canonical_nzeroP."], "tactic": "apply canonical_cons.", "exn": "No such goal.", "type": "no_goal", "handled": true}]}, "chat": [], "original": "intros l a b ltT_ba not_zeroP_a canon_b_l. unfold canonical in *. split. - apply olist_cons. + auto. + destruct canon_b_l as [olist_b_l _]. auto. - apply canonical_nzeroP. apply canonical_cons. + auto. + destruct canon_b_l as [_ nZterm_b_l]. apply canonical_nzeroP with (p:=l) in canon_b_l. intro. apply zeroP_comp_eqTerm in H; try auto. contradiction. + auto.", "back_times": 0, "succ": true, "time": 0.9390816688537598}]