[{"history": {"proof": "qsimpl time: 1 use: divP_multTerm_r.", "repairs": ["cannot_apply_in"], "exceptions": [{"ctx": ["intros a b nZa nZb H p q Hp Hq Hpq Hpq' c Hc."], "tactic": "apply sppoly_eqTerm in H.", "exn": "The reference sppoly_eqTerm was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros a b nZa nZb H p q Hp Hq Hpq Hpq' c Hc.", "apply ltT_not_ltT in H."], "tactic": "apply divP_multTerm_r in H.", "exn": "Unable to apply lemma of type \"forall (A : Set) (A0 A1 : A) (eqA : A -> A -> Prop) (plusA : A -> A -> A) (invA : A -> A) (minusA multA : A -> A -> A) (divA : A -> forall b : A, ~ eqA b A0 -> A), CoefStructure A A0 A1 eqA plusA invA minusA multA divA -> (forall a b : A, {eqA a b} + {~ eqA a b}) -> forall (n : nat) (a b c : Term A n), ~ zeroP A0 eqA (n:=n) a -> ~ zeroP A0 eqA (n:=n) b -> eqTerm eqA (n:=n) (multTerm multA (n:=n) a b) c -> divP A A0 eqA multA divA n c b\" on hypothesis of type \"~ ltT (A:=A) eq (multTerm multA (n:=n) a b) (ppc A1 (n:=n) a b)\".", "type": "cannot_apply_in", "handled": true}, {"ctx": ["intros a b nZa nZb H p q Hp Hq Hpq Hpq' c Hc.", "apply ltT_not_ltT in H.", "qsimpl time: 1 use: divP_multTerm_r.", "assert (Heq : eqT (multTerm multA (n:=n) a b) (multTerm multA (n:=n) c (divTerm divA (n:=n) c (b:=b) nZb))).", "-"], "tactic": "destruct (Hpq' c Hc) as [_ Heq].", "exn": "The reference Hpq' was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros a b nZa nZb H p q Hp Hq Hpq Hpq' c Hc.", "apply ltT_not_ltT in H.", "qsimpl time: 1 use: divP_multTerm_r.", "assert (Heq : eqT (multTerm multA (n:=n) a b) (multTerm multA (n:=n) c (divTerm divA (n:=n) c (b:=b) nZb))).", "-"], "tactic": "apply Heq.", "exn": "The reference Heq was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros a b nZa nZb H p q Hp Hq Hpq Hpq' c Hc.", "apply ltT_not_ltT in H.", "qsimpl time: 1 use: divP_multTerm_r.", "assert (Heq : eqT (multTerm multA (n:=n) a b) (multTerm multA (n:=n) c (divTerm divA (n:=n) c (b:=b) nZb))).", "-", "apply Build_equivalence.", "pose proof spminusf_plusTerm as sp_pt.", "pose proof spminusf_minusTerm as sp_mt."], "tactic": "assert (Hin : forall d : Term A n, In d q -> In d (minuspf _ _ _ _ _ _ _ _ _ _ (cons c nil) q)).", "exn": "In environment H0 : forall (A : Set) (A0 A1 : A) (eqA : A -> A -> Prop) (plusA : A -> A -> A) (invA : A -> A) (minusA multA : A -> A -> A) (divA : A -> forall b : A, (eqA b A0 -> False) -> A), CoefStructure A A0 A1 eqA plusA invA minusA multA divA -> (forall a b : A, {eqA a b} + {eqA a b -> False}) -> forall (n : nat) (a b c : Term A n), (zeroP A0 eqA (n:=n) a -> False) -> (zeroP A0 eqA (n:=n) b -> False) -> eqTerm eqA (n:=n) (multTerm multA (n:=n) a b) c -> divP A A0 eqA multA divA n c b A : Set A0, A1 : A eqA : A -> A -> Prop plusA : A -> A -> A invA : A -> A minusA, multA : A -> A -> A divA : A -> forall b : A, (eqA b A0 -> False) -> A eqA_dec : forall a b : A, {eqA a b} + {eqA a b -> False} n : nat ltM : mon n -> mon n -> Prop ltM_dec : forall a b : mon n, {ltM a b} + {ltM b a} + {a = b} a, b : Term A n nZa : zeroP A0 eqA (n:=n) a -> False nZb : zeroP A0 eqA (n:=n) b -> False H : ltT (A:=A) eq (multTerm multA (n:=n) a b) (ppc A1 (n:=n) a b) -> False p, q : list (Term A n) c : Term A n Hc : In c p H1 : forall c : Term A n, In c q -> eqT (A:=A) (n:=n) c (multTerm multA (n:=n) (divTerm (A0:=A0) (eqA:=eqA) divA (n:=n) c (b:=a) nZa) a) H2 : forall c : Term A n, In c q -> ltT (A:=A) ltM c (multTerm multA (n:=n) a b) H3 : forall c : Term A n, In c p -> eqT (A:=A) (n:=n) c (multTerm multA (n:=n) (divTerm (A0:=A0) (eqA:=eqA) divA (n:=n) c (b:=b) nZb) b) H4 : forall c : Term A n, In c p -> ltT (A:=A) ltM c (multTerm multA (n:=n) a b) H5 : olist (A:=A) ltM q H6 : nZterm A0 eqA (n:=n) q H7 : olist (A:=A) ltM p H8 : nZterm A0 eqA (n:=n) p M1_min : forall x : mon n, ltM x (zero_mon n) -> False ltM_nonrefl : forall x : mon n, ltM x x -> False ltM_trans : transitive (mon n) ltM ltM_wf : well_founded ltM ltM_plusr : forall x y z : mon n, ltM x y -> ltM (mult_mon n x z) (mult_mon n y z) ltM_plusl : forall x y z : mon n, ltM x y -> ltM (mult_mon n z x) (mult_mon n z y) A1_diff_A0 : eqA A1 A0 -> False eqA_ref : reflexive A eqA eqA_sym : symmetric A eqA eqA_trans : transitive A eqA plusA_assoc : forall a b c : A, eqA (plusA a (plusA b c)) (plusA (plusA a b) c) plusA_com : forall a b : A, eqA (plusA a b) (plusA b a) plusA_eqA_comp : forall a b c d : A, eqA a c -> eqA b d -> eqA (plusA a b) (plusA c d) plusA_A0 : forall a : A, eqA a (plusA a A0) invA_plusA : forall a : A, eqA A0 (plusA a (invA a)) invA_eqA_comp : forall a b : A, eqA a b -> eqA (invA a) (invA b) minusA_def : forall a b : A, eqA (minusA a b) (plusA a (invA b)) multA_eqA_comp : forall a b c d : A, eqA a c -> eqA b d -> eqA (multA a b) (multA c d) multA_assoc : forall a b c : A, eqA (multA a (multA b c)) (multA (multA a b) c) multA_com : forall a b : A, eqA (multA a b) (multA b a) multA_dist_l : forall a b c : A, eqA (plusA (multA c a) (multA c b)) (multA c (plusA a b)) multA_A0_l : forall a : A, eqA (multA A0 a) A0 multA_A1_l : forall a : A, eqA (multA A1 a) a divA_rew : forall (a b : A) (nZ1 nZ2 : eqA b A0 -> False), divA a b nZ1 = divA a b nZ2 divA_is_multA : forall (a b : A) (nZb : eqA b A0 -> False), eqA a (multA (divA a b nZb) b) divA_eqA_comp : forall (a b c d : A) (nZb : eqA b A0 -> False) (nZd : eqA d A0 -> False), eqA a c -> eqA b d -> eqA (divA a b nZb) (divA c d nZd) divA_multA_comp_r : forall (a b c : A) (nZc : eqA c A0 -> False), eqA (divA (multA a b) c nZc) (multA (divA a c nZc) b) divA_invA_r : forall (a b : A) (nZb : eqA b A0 -> False) (nZib : eqA (invA b) A0 -> False), eqA (divA a (invA b) nZib) (invA (divA a b nZb)) sp_pt : forall (A : Set) (A0 A1 : A) (eqA : A -> A -> Prop) (plusA : A -> A -> A) (invA : A -> A) (minusA multA : A -> A -> A) (divA : A -> forall b : A, ~ eqA b A0 -> A), CoefStructure A A0 A1 eqA plusA invA minusA multA divA -> forall (eqA_dec : forall a b : A, {eqA a b} + {~ eqA a b}) (n : nat) (ltM : mon n -> mon n -> Prop) (ltM_dec : forall a b : mon n, {ltM a b} + {ltM b a} + {a = b}), OrderStructure (mon n) (zero_mon n) ltM (mult_mon n) -> forall (a b c : Term A n) (nZc : ~ zeroP A0 eqA (n:=n) c) (p q r : list (Term A n)), canonical A0 eqA ltM p -> canonical A0 eqA ltM q -> canonical A0 eqA ltM r -> divP A A0 eqA multA divA n a c -> divP A A0 eqA multA divA n b c -> eqT (A:=A) (n:=n) a b -> ~ zeroP A0 eqA (n:=n) (plusTerm plusA (n:=n) a b) -> eqP A eqA n (spminusf A A0 A1 eqA invA minusA multA divA eqA_dec n ltM ltM_dec (plusTerm plusA (n:=n) a b) c nZc (pluspf A0 (eqA:=eqA) plusA eqA_dec (ltM:=ltM) ltM_dec p q) r) (pluspf A0 (eqA:=eqA) plusA eqA_dec (ltM:=ltM) ltM_dec (spminusf A A0 A1 eqA invA minusA multA divA eqA_dec n ltM ltM_dec a c nZc p r) (spminusf A A0 A1 eqA invA minusA multA divA eqA_dec n ltM ltM_dec b c nZc q r)) sp_mt : forall (A : Set) (A0 A1 : A) (eqA : A -> A -> Prop) (plusA : A -> A -> A) (invA : A -> A) (minusA multA : A -> A -> A) (divA : A -> forall b : A, ~ eqA b A0 -> A), CoefStructure A A0 A1 eqA plusA invA minusA multA divA -> forall (eqA_dec : forall a b : A, {eqA a b} + {~ eqA a b}) (n : nat) (ltM : mon n -> mon n -> Prop) (ltM_dec : forall a b : mon n, {ltM a b} + {ltM b a} + {a = b}), OrderStructure (mon n) (zero_mon n) ltM (mult_mon n) -> forall (a b c : Term A n) (nZc : ~ zeroP A0 eqA (n:=n) c) (p q r : list (Term A n)), canonical A0 eqA ltM p -> canonical A0 eqA ltM q -> canonical A0 eqA ltM r -> divP A A0 eqA multA divA n a c -> divP A A0 eqA multA divA n b c -> eqT (A:=A) (n:=n) a b -> ~ zeroP A0 eqA (n:=n) (minusTerm minusA (n:=n) a b) -> eqP A eqA n (spminusf A A0 A1 eqA invA minusA multA divA eqA_dec n ltM ltM_dec (minusTerm minusA (n:=n) a b) c nZc (minuspf A A0 A1 eqA invA minusA multA eqA_dec n ltM ltM_dec p q) r) (minuspf A A0 A1 eqA invA minusA multA eqA_dec n ltM ltM_dec (spminusf A A0 A1 eqA invA minusA multA divA eqA_dec n ltM ltM_dec a c nZc p r) (spminusf A A0 A1 eqA invA minusA multA divA eqA_dec n ltM ltM_dec b c nZc q r)) d : Term A n The term \"c :: nil\" has type \"list (Term A n)\" while it is expected to have type \"forall a0 b0 : mon ?n, {?ltM a0 b0} + {?ltM b0 a0} + {a0 = b0}\".", "type": "wrong_type", "handled": true}, {"ctx": ["intros a b nZa nZb H p q Hp Hq Hpq Hpq' c Hc.", "apply ltT_not_ltT in H.", "qsimpl time: 1 use: divP_multTerm_r.", "assert (Heq : eqT (multTerm multA (n:=n) a b) (multTerm multA (n:=n) c (divTerm divA (n:=n) c (b:=b) nZb))).", "-", "apply Build_equivalence.", "pose proof spminusf_plusTerm as sp_pt.", "pose proof spminusf_minusTerm as sp_mt.", "qsimpl time: 1 use: cons,minuspf,divP_multTerm_r,In,nil."], "tactic": "-", "exn": "Wrong bullet -: Current bullet - is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["intros a b nZa nZb H p q Hp Hq Hpq Hpq' c Hc.", "apply ltT_not_ltT in H.", "qsimpl time: 1 use: divP_multTerm_r.", "assert (Heq : eqT (multTerm multA (n:=n) a b) (multTerm multA (n:=n) c (divTerm divA (n:=n) c (b:=b) nZb))).", "-", "apply Build_equivalence.", "pose proof spminusf_plusTerm as sp_pt.", "pose proof spminusf_minusTerm as sp_mt.", "qsimpl time: 1 use: cons,minuspf,divP_multTerm_r,In,nil.", "+", "shelve.", "+", "shelve.", "+", "shelve.", "-"], "tactic": "intros d Hq'.", "exn": "No product even after head-reduction.", "type": "no_product", "handled": true}, {"ctx": ["intros a b nZa nZb H p q Hp Hq Hpq Hpq' c Hc.", "apply ltT_not_ltT in H.", "qsimpl time: 1 use: divP_multTerm_r.", "assert (Heq : eqT (multTerm multA (n:=n) a b) (multTerm multA (n:=n) c (divTerm divA (n:=n) c (b:=b) nZb))).", "-", "apply Build_equivalence.", "pose proof spminusf_plusTerm as sp_pt.", "pose proof spminusf_minusTerm as sp_mt.", "qsimpl time: 1 use: cons,minuspf,divP_multTerm_r,In,nil.", "+", "shelve.", "+", "shelve.", "+", "shelve.", "-"], "tactic": "apply sp_mt; auto.", "exn": "The reference sp_mt was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros a b nZa nZb H p q Hp Hq Hpq Hpq' c Hc.", "apply ltT_not_ltT in H.", "qsimpl time: 1 use: divP_multTerm_r.", "assert (Heq : eqT (multTerm multA (n:=n) a b) (multTerm multA (n:=n) c (divTerm divA (n:=n) c (b:=b) nZb))).", "-", "apply Build_equivalence.", "pose proof spminusf_plusTerm as sp_pt.", "pose proof spminusf_minusTerm as sp_mt.", "qsimpl time: 1 use: cons,minuspf,divP_multTerm_r,In,nil.", "+", "shelve.", "+", "shelve.", "+", "shelve.", "-"], "tactic": "apply sp_pt with (c := a) in Hin.", "exn": "No such hypothesis: Hin", "type": "no_hypos", "handled": true}, {"ctx": ["intros a b nZa nZb H p q Hp Hq Hpq Hpq' c Hc.", "apply ltT_not_ltT in H.", "qsimpl time: 1 use: divP_multTerm_r.", "assert (Heq : eqT (multTerm multA (n:=n) a b) (multTerm multA (n:=n) c (divTerm divA (n:=n) c (b:=b) nZb))).", "-", "apply Build_equivalence.", "pose proof spminusf_plusTerm as sp_pt.", "pose proof spminusf_minusTerm as sp_mt.", "qsimpl time: 1 use: cons,minuspf,divP_multTerm_r,In,nil.", "+", "shelve.", "+", "shelve.", "+", "shelve.", "-", "qsimpl time: 1 use: cons,minuspf,divP_multTerm_r,In,nil."], "tactic": "rewrite Heq in Hin.", "exn": "No such hypothesis: Hin", "type": "no_hypos", "handled": true}, {"ctx": ["intros a b nZa nZb H p q Hp Hq Hpq Hpq' c Hc.", "apply ltT_not_ltT in H.", "qsimpl time: 1 use: divP_multTerm_r.", "assert (Heq : eqT (multTerm multA (n:=n) a b) (multTerm multA (n:=n) c (divTerm divA (n:=n) c (b:=b) nZb))).", "-", "apply Build_equivalence.", "pose proof spminusf_plusTerm as sp_pt.", "pose proof spminusf_minusTerm as sp_mt.", "qsimpl time: 1 use: cons,minuspf,divP_multTerm_r,In,nil.", "+", "shelve.", "+", "shelve.", "+", "shelve.", "-", "qsimpl time: 1 use: cons,minuspf,divP_multTerm_r,In,nil.", "qsimpl time: 1 use: cons,minuspf,divP_multTerm_r,In,nil."], "tactic": "apply Hin in Hpq.", "exn": "No such hypothesis: Hpq", "type": "no_hypos", "handled": true}, {"ctx": ["intros a b nZa nZb H p q Hp Hq Hpq Hpq' c Hc.", "apply ltT_not_ltT in H.", "qsimpl time: 1 use: divP_multTerm_r.", "assert (Heq : eqT (multTerm multA (n:=n) a b) (multTerm multA (n:=n) c (divTerm divA (n:=n) c (b:=b) nZb))).", "-", "apply Build_equivalence.", "pose proof spminusf_plusTerm as sp_pt.", "pose proof spminusf_minusTerm as sp_mt.", "qsimpl time: 1 use: cons,minuspf,divP_multTerm_r,In,nil.", "+", "shelve.", "+", "shelve.", "+", "shelve.", "-", "qsimpl time: 1 use: cons,minuspf,divP_multTerm_r,In,nil.", "qsimpl time: 1 use: cons,minuspf,divP_multTerm_r,In,nil.", "qsimpl time: 1 use: cons,minuspf,divP_multTerm_r,In,nil.", "assert (Hpq'' : forall d : Term A n, In d p -> ltT ltM d (multTerm multA a b) /\\ eqT d (multTerm multA (divTerm divA d (b:=b) nZb) b))."], "tactic": "-", "exn": "Wrong bullet -: Current bullet - is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["intros a b nZa nZb H p q Hp Hq Hpq Hpq' c Hc.", "apply ltT_not_ltT in H.", "qsimpl time: 1 use: divP_multTerm_r.", "assert (Heq : eqT (multTerm multA (n:=n) a b) (multTerm multA (n:=n) c (divTerm divA (n:=n) c (b:=b) nZb))).", "-", "apply Build_equivalence.", "pose proof spminusf_plusTerm as sp_pt.", "pose proof spminusf_minusTerm as sp_mt.", "qsimpl time: 1 use: cons,minuspf,divP_multTerm_r,In,nil.", "+", "shelve.", "+", "shelve.", "+", "shelve.", "-", "qsimpl time: 1 use: cons,minuspf,divP_multTerm_r,In,nil.", "qsimpl time: 1 use: cons,minuspf,divP_multTerm_r,In,nil.", "qsimpl time: 1 use: cons,minuspf,divP_multTerm_r,In,nil.", "assert (Hpq'' : forall d : Term A n, In d p -> ltT ltM d (multTerm multA a b) /\\ eqT d (multTerm multA (divTerm divA d (b:=b) nZb) b)).", "+", "shelve.", "+", "shelve.", "-"], "tactic": "intros d Hd.", "exn": "No product even after head-reduction.", "type": "no_product", "handled": true}, {"ctx": ["intros a b nZa nZb H p q Hp Hq Hpq Hpq' c Hc.", "apply ltT_not_ltT in H.", "qsimpl time: 1 use: divP_multTerm_r.", "assert (Heq : eqT (multTerm multA (n:=n) a b) (multTerm multA (n:=n) c (divTerm divA (n:=n) c (b:=b) nZb))).", "-", "apply Build_equivalence.", "pose proof spminusf_plusTerm as sp_pt.", "pose proof spminusf_minusTerm as sp_mt.", "qsimpl time: 1 use: cons,minuspf,divP_multTerm_r,In,nil.", "+", "shelve.", "+", "shelve.", "+", "shelve.", "-", "qsimpl time: 1 use: cons,minuspf,divP_multTerm_r,In,nil.", "qsimpl time: 1 use: cons,minuspf,divP_multTerm_r,In,nil.", "qsimpl time: 1 use: cons,minuspf,divP_multTerm_r,In,nil.", "assert (Hpq'' : forall d : Term A n, In d p -> ltT ltM d (multTerm multA a b) /\\ eqT d (multTerm multA (divTerm divA d (b:=b) nZb) b)).", "+", "shelve.", "+", "shelve.", "-"], "tactic": "specialize (Hpq d Hd).", "exn": "The reference Hd was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros a b nZa nZb H p q Hp Hq Hpq Hpq' c Hc.", "apply ltT_not_ltT in H.", "qsimpl time: 1 use: divP_multTerm_r.", "assert (Heq : eqT (multTerm multA (n:=n) a b) (multTerm multA (n:=n) c (divTerm divA (n:=n) c (b:=b) nZb))).", "-", "apply Build_equivalence.", "pose proof spminusf_plusTerm as sp_pt.", "pose proof spminusf_minusTerm as sp_mt.", "qsimpl time: 1 use: cons,minuspf,divP_multTerm_r,In,nil.", "+", "shelve.", "+", "shelve.", "+", "shelve.", "-", "qsimpl time: 1 use: cons,minuspf,divP_multTerm_r,In,nil.", "qsimpl time: 1 use: cons,minuspf,divP_multTerm_r,In,nil.", "qsimpl time: 1 use: cons,minuspf,divP_multTerm_r,In,nil.", "assert (Hpq'' : forall d : Term A n, In d p -> ltT ltM d (multTerm multA a b) /\\ eqT d (multTerm multA (divTerm divA d (b:=b) nZb) b)).", "+", "shelve.", "+", "shelve.", "-"], "tactic": "destruct Hpq as [Hlt _].", "exn": "Unable to find an instance for the variable c.", "type": "no_instance_var", "handled": true}, {"ctx": ["intros a b nZa nZb H p q Hp Hq Hpq Hpq' c Hc.", "apply ltT_not_ltT in H.", "qsimpl time: 1 use: divP_multTerm_r.", "assert (Heq : eqT (multTerm multA (n:=n) a b) (multTerm multA (n:=n) c (divTerm divA (n:=n) c (b:=b) nZb))).", "-", "apply Build_equivalence.", "pose proof spminusf_plusTerm as sp_pt.", "pose proof spminusf_minusTerm as sp_mt.", "qsimpl time: 1 use: cons,minuspf,divP_multTerm_r,In,nil.", "+", "shelve.", "+", "shelve.", "+", "shelve.", "-", "qsimpl time: 1 use: cons,minuspf,divP_multTerm_r,In,nil.", "qsimpl time: 1 use: cons,minuspf,divP_multTerm_r,In,nil.", "qsimpl time: 1 use: cons,minuspf,divP_multTerm_r,In,nil.", "assert (Hpq'' : forall d : Term A n, In d p -> ltT ltM d (multTerm multA a b) /\\ eqT d (multTerm multA (divTerm divA d (b:=b) nZb) b)).", "+", "shelve.", "+", "shelve.", "-", "qsimpl time: 1 use: cons,minuspf,divP_multTerm_r,In,nil.", "split.", "+"], "tactic": "+", "exn": "Wrong bullet +: Current bullet + is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["intros a b nZa nZb H p q Hp Hq Hpq Hpq' c Hc.", "apply ltT_not_ltT in H.", "qsimpl time: 1 use: divP_multTerm_r.", "assert (Heq : eqT (multTerm multA (n:=n) a b) (multTerm multA (n:=n) c (divTerm divA (n:=n) c (b:=b) nZb))).", "-", "apply Build_equivalence.", "pose proof spminusf_plusTerm as sp_pt.", "pose proof spminusf_minusTerm as sp_mt.", "qsimpl time: 1 use: cons,minuspf,divP_multTerm_r,In,nil.", "+", "shelve.", "+", "shelve.", "+", "shelve.", "-", "qsimpl time: 1 use: cons,minuspf,divP_multTerm_r,In,nil.", "qsimpl time: 1 use: cons,minuspf,divP_multTerm_r,In,nil.", "qsimpl time: 1 use: cons,minuspf,divP_multTerm_r,In,nil.", "assert (Hpq'' : forall d : Term A n, In d p -> ltT ltM d (multTerm multA a b) /\\ eqT d (multTerm multA (divTerm divA d (b:=b) nZb) b)).", "+", "shelve.", "+", "shelve.", "-", "qsimpl time: 1 use: cons,minuspf,divP_multTerm_r,In,nil.", "split.", "+", "shelve.", "+"], "tactic": "assert (Hin_q : In d q).", "exn": "The reference d was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros a b nZa nZb H p q Hp Hq Hpq Hpq' c Hc.", "apply ltT_not_ltT in H.", "qsimpl time: 1 use: divP_multTerm_r.", "assert (Heq : eqT (multTerm multA (n:=n) a b) (multTerm multA (n:=n) c (divTerm divA (n:=n) c (b:=b) nZb))).", "-", "apply Build_equivalence.", "pose proof spminusf_plusTerm as sp_pt.", "pose proof spminusf_minusTerm as sp_mt.", "qsimpl time: 1 use: cons,minuspf,divP_multTerm_r,In,nil.", "+", "shelve.", "+", "shelve.", "+", "shelve.", "-", "qsimpl time: 1 use: cons,minuspf,divP_multTerm_r,In,nil.", "qsimpl time: 1 use: cons,minuspf,divP_multTerm_r,In,nil.", "qsimpl time: 1 use: cons,minuspf,divP_multTerm_r,In,nil.", "assert (Hpq'' : forall d : Term A n, In d p -> ltT ltM d (multTerm multA a b) /\\ eqT d (multTerm multA (divTerm divA d (b:=b) nZb) b)).", "+", "shelve.", "+", "shelve.", "-", "qsimpl time: 1 use: cons,minuspf,divP_multTerm_r,In,nil.", "split.", "+", "shelve.", "+"], "tactic": "-", "exn": "Wrong bullet -: Current bullet + is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["intros a b nZa nZb H p q Hp Hq Hpq Hpq' c Hc.", "apply ltT_not_ltT in H.", "qsimpl time: 1 use: divP_multTerm_r.", "assert (Heq : eqT (multTerm multA (n:=n) a b) (multTerm multA (n:=n) c (divTerm divA (n:=n) c (b:=b) nZb))).", "-", "apply Build_equivalence.", "pose proof spminusf_plusTerm as sp_pt.", "pose proof spminusf_minusTerm as sp_mt.", "qsimpl time: 1 use: cons,minuspf,divP_multTerm_r,In,nil.", "+", "shelve.", "+", "shelve.", "+", "shelve.", "-", "qsimpl time: 1 use: cons,minuspf,divP_multTerm_r,In,nil.", "qsimpl time: 1 use: cons,minuspf,divP_multTerm_r,In,nil.", "qsimpl time: 1 use: cons,minuspf,divP_multTerm_r,In,nil.", "assert (Hpq'' : forall d : Term A n, In d p -> ltT ltM d (multTerm multA a b) /\\ eqT d (multTerm multA (divTerm divA d (b:=b) nZb) b)).", "+", "shelve.", "+", "shelve.", "-", "qsimpl time: 1 use: cons,minuspf,divP_multTerm_r,In,nil.", "split.", "+", "shelve.", "+", "shelve."], "tactic": "-", "exn": "Wrong bullet -: Expecting +.", "type": "wrong_bullet", "handled": true}, {"ctx": ["intros a b nZa nZb H p q Hp Hq Hpq Hpq' c Hc.", "apply ltT_not_ltT in H.", "qsimpl time: 1 use: divP_multTerm_r.", "assert (Heq : eqT (multTerm multA (n:=n) a b) (multTerm multA (n:=n) c (divTerm divA (n:=n) c (b:=b) nZb))).", "-", "apply Build_equivalence.", "pose proof spminusf_plusTerm as sp_pt.", "pose proof spminusf_minusTerm as sp_mt.", "qsimpl time: 1 use: cons,minuspf,divP_multTerm_r,In,nil.", "+", "shelve.", "+", "shelve.", "+", "shelve.", "-", "qsimpl time: 1 use: cons,minuspf,divP_multTerm_r,In,nil.", "qsimpl time: 1 use: cons,minuspf,divP_multTerm_r,In,nil.", "qsimpl time: 1 use: cons,minuspf,divP_multTerm_r,In,nil.", "assert (Hpq'' : forall d : Term A n, In d p -> ltT ltM d (multTerm multA a b) /\\ eqT d (multTerm multA (divTerm divA d (b:=b) nZb) b)).", "+", "shelve.", "+", "shelve.", "-", "qsimpl time: 1 use: cons,minuspf,divP_multTerm_r,In,nil.", "split.", "+", "shelve.", "+", "shelve.", "+"], "tactic": "rewrite Heq'.", "exn": "The reference Heq' was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros a b nZa nZb H p q Hp Hq Hpq Hpq' c Hc.", "apply ltT_not_ltT in H.", "qsimpl time: 1 use: divP_multTerm_r.", "assert (Heq : eqT (multTerm multA (n:=n) a b) (multTerm multA (n:=n) c (divTerm divA (n:=n) c (b:=b) nZb))).", "-", "apply Build_equivalence.", "pose proof spminusf_plusTerm as sp_pt.", "pose proof spminusf_minusTerm as sp_mt.", "qsimpl time: 1 use: cons,minuspf,divP_multTerm_r,In,nil.", "+", "shelve.", "+", "shelve.", "+", "shelve.", "-", "qsimpl time: 1 use: cons,minuspf,divP_multTerm_r,In,nil.", "qsimpl time: 1 use: cons,minuspf,divP_multTerm_r,In,nil.", "qsimpl time: 1 use: cons,minuspf,divP_multTerm_r,In,nil.", "assert (Hpq'' : forall d : Term A n, In d p -> ltT ltM d (multTerm multA a b) /\\ eqT d (multTerm multA (divTerm divA d (b:=b) nZb) b)).", "+", "shelve.", "+", "shelve.", "-", "qsimpl time: 1 use: cons,minuspf,divP_multTerm_r,In,nil.", "split.", "+", "shelve.", "+", "shelve.", "+"], "tactic": "apply Heq'.", "exn": "The reference Heq' was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros a b nZa nZb H p q Hp Hq Hpq Hpq' c Hc.", "apply ltT_not_ltT in H.", "qsimpl time: 1 use: divP_multTerm_r.", "assert (Heq : eqT (multTerm multA (n:=n) a b) (multTerm multA (n:=n) c (divTerm divA (n:=n) c (b:=b) nZb))).", "-", "apply Build_equivalence.", "pose proof spminusf_plusTerm as sp_pt.", "pose proof spminusf_minusTerm as sp_mt.", "qsimpl time: 1 use: cons,minuspf,divP_multTerm_r,In,nil.", "+", "shelve.", "+", "shelve.", "+", "shelve.", "-", "qsimpl time: 1 use: cons,minuspf,divP_multTerm_r,In,nil.", "qsimpl time: 1 use: cons,minuspf,divP_multTerm_r,In,nil.", "qsimpl time: 1 use: cons,minuspf,divP_multTerm_r,In,nil.", "assert (Hpq'' : forall d : Term A n, In d p -> ltT ltM d (multTerm multA a b) /\\ eqT d (multTerm multA (divTerm divA d (b:=b) nZb) b)).", "+", "shelve.", "+", "shelve.", "-", "qsimpl time: 1 use: cons,minuspf,divP_multTerm_r,In,nil.", "split.", "+", "shelve.", "+", "shelve.", "+", "apply Build_equivalence."], "tactic": "-", "exn": "Wrong bullet -: Current bullet + is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["intros a b nZa nZb H p q Hp Hq Hpq Hpq' c Hc.", "apply ltT_not_ltT in H.", "qsimpl time: 1 use: divP_multTerm_r.", "assert (Heq : eqT (multTerm multA (n:=n) a b) (multTerm multA (n:=n) c (divTerm divA (n:=n) c (b:=b) nZb))).", "-", "apply Build_equivalence.", "pose proof spminusf_plusTerm as sp_pt.", "pose proof spminusf_minusTerm as sp_mt.", "qsimpl time: 1 use: cons,minuspf,divP_multTerm_r,In,nil.", "+", "shelve.", "+", "shelve.", "+", "shelve.", "-", "qsimpl time: 1 use: cons,minuspf,divP_multTerm_r,In,nil.", "qsimpl time: 1 use: cons,minuspf,divP_multTerm_r,In,nil.", "qsimpl time: 1 use: cons,minuspf,divP_multTerm_r,In,nil.", "assert (Hpq'' : forall d : Term A n, In d p -> ltT ltM d (multTerm multA a b) /\\ eqT d (multTerm multA (divTerm divA d (b:=b) nZb) b)).", "+", "shelve.", "+", "shelve.", "-", "qsimpl time: 1 use: cons,minuspf,divP_multTerm_r,In,nil.", "split.", "+", "shelve.", "+", "shelve.", "+", "apply Build_equivalence.", "*", "shelve.", "*", "shelve.", "*", "shelve."], "tactic": "-", "exn": "Wrong bullet -: Expecting +.", "type": "wrong_bullet", "handled": true}, {"ctx": ["intros a b nZa nZb H p q Hp Hq Hpq Hpq' c Hc.", "apply ltT_not_ltT in H.", "qsimpl time: 1 use: divP_multTerm_r.", "assert (Heq : eqT (multTerm multA (n:=n) a b) (multTerm multA (n:=n) c (divTerm divA (n:=n) c (b:=b) nZb))).", "-", "apply Build_equivalence.", "pose proof spminusf_plusTerm as sp_pt.", "pose proof spminusf_minusTerm as sp_mt.", "qsimpl time: 1 use: cons,minuspf,divP_multTerm_r,In,nil.", "+", "shelve.", "+", "shelve.", "+", "shelve.", "-", "qsimpl time: 1 use: cons,minuspf,divP_multTerm_r,In,nil.", "qsimpl time: 1 use: cons,minuspf,divP_multTerm_r,In,nil.", "qsimpl time: 1 use: cons,minuspf,divP_multTerm_r,In,nil.", "assert (Hpq'' : forall d : Term A n, In d p -> ltT ltM d (multTerm multA a b) /\\ eqT d (multTerm multA (divTerm divA d (b:=b) nZb) b)).", "+", "shelve.", "+", "shelve.", "-", "qsimpl time: 1 use: cons,minuspf,divP_multTerm_r,In,nil.", "split.", "+", "shelve.", "+", "shelve.", "+", "apply Build_equivalence.", "*", "shelve.", "*", "shelve.", "*", "shelve.", "+"], "tactic": "pose proof (divTerm_multTerm_r A A0 A1 eqA plusA invA minusA multA divA cs eqA_dec n ltM ltM_dec).", "exn": "The reference cs was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros a b nZa nZb H p q Hp Hq Hpq Hpq' c Hc.", "apply ltT_not_ltT in H.", "qsimpl time: 1 use: divP_multTerm_r.", "assert (Heq : eqT (multTerm multA (n:=n) a b) (multTerm multA (n:=n) c (divTerm divA (n:=n) c (b:=b) nZb))).", "-", "apply Build_equivalence.", "pose proof spminusf_plusTerm as sp_pt.", "pose proof spminusf_minusTerm as sp_mt.", "qsimpl time: 1 use: cons,minuspf,divP_multTerm_r,In,nil.", "+", "shelve.", "+", "shelve.", "+", "shelve.", "-", "qsimpl time: 1 use: cons,minuspf,divP_multTerm_r,In,nil.", "qsimpl time: 1 use: cons,minuspf,divP_multTerm_r,In,nil.", "qsimpl time: 1 use: cons,minuspf,divP_multTerm_r,In,nil.", "assert (Hpq'' : forall d : Term A n, In d p -> ltT ltM d (multTerm multA a b) /\\ eqT d (multTerm multA (divTerm divA d (b:=b) nZb) b)).", "+", "shelve.", "+", "shelve.", "-", "qsimpl time: 1 use: cons,minuspf,divP_multTerm_r,In,nil.", "split.", "+", "shelve.", "+", "shelve.", "+", "apply Build_equivalence.", "*", "shelve.", "*", "shelve.", "*", "shelve.", "+"], "tactic": "apply (H a b eq_refl).", "exn": "The reference H was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros a b nZa nZb H p q Hp Hq Hpq Hpq' c Hc.", "apply ltT_not_ltT in H.", "qsimpl time: 1 use: divP_multTerm_r.", "assert (Heq : eqT (multTerm multA (n:=n) a b) (multTerm multA (n:=n) c (divTerm divA (n:=n) c (b:=b) nZb))).", "-", "apply Build_equivalence.", "pose proof spminusf_plusTerm as sp_pt.", "pose proof spminusf_minusTerm as sp_mt.", "qsimpl time: 1 use: cons,minuspf,divP_multTerm_r,In,nil.", "+", "shelve.", "+", "shelve.", "+", "shelve.", "-", "qsimpl time: 1 use: cons,minuspf,divP_multTerm_r,In,nil.", "qsimpl time: 1 use: cons,minuspf,divP_multTerm_r,In,nil.", "qsimpl time: 1 use: cons,minuspf,divP_multTerm_r,In,nil.", "assert (Hpq'' : forall d : Term A n, In d p -> ltT ltM d (multTerm multA a b) /\\ eqT d (multTerm multA (divTerm divA d (b:=b) nZb) b)).", "+", "shelve.", "+", "shelve.", "-", "qsimpl time: 1 use: cons,minuspf,divP_multTerm_r,In,nil.", "split.", "+", "shelve.", "+", "shelve.", "+", "apply Build_equivalence.", "*", "shelve.", "*", "shelve.", "*", "shelve.", "+"], "tactic": "rewrite <- Heq''.", "exn": "The reference Heq'' was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros a b nZa nZb H p q Hp Hq Hpq Hpq' c Hc.", "apply ltT_not_ltT in H.", "qsimpl time: 1 use: divP_multTerm_r.", "assert (Heq : eqT (multTerm multA (n:=n) a b) (multTerm multA (n:=n) c (divTerm divA (n:=n) c (b:=b) nZb))).", "-", "apply Build_equivalence.", "pose proof spminusf_plusTerm as sp_pt.", "pose proof spminusf_minusTerm as sp_mt.", "qsimpl time: 1 use: cons,minuspf,divP_multTerm_r,In,nil.", "+", "shelve.", "+", "shelve.", "+", "shelve.", "-", "qsimpl time: 1 use: cons,minuspf,divP_multTerm_r,In,nil.", "qsimpl time: 1 use: cons,minuspf,divP_multTerm_r,In,nil.", "qsimpl time: 1 use: cons,minuspf,divP_multTerm_r,In,nil.", "assert (Hpq'' : forall d : Term A n, In d p -> ltT ltM d (multTerm multA a b) /\\ eqT d (multTerm multA (divTerm divA d (b:=b) nZb) b)).", "+", "shelve.", "+", "shelve.", "-", "qsimpl time: 1 use: cons,minuspf,divP_multTerm_r,In,nil.", "split.", "+", "shelve.", "+", "shelve.", "+", "apply Build_equivalence.", "*", "shelve.", "*", "shelve.", "*", "shelve.", "+"], "tactic": "rewrite Heq'.", "exn": "The reference Heq' was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros a b nZa nZb H p q Hp Hq Hpq Hpq' c Hc.", "apply ltT_not_ltT in H.", "qsimpl time: 1 use: divP_multTerm_r.", "assert (Heq : eqT (multTerm multA (n:=n) a b) (multTerm multA (n:=n) c (divTerm divA (n:=n) c (b:=b) nZb))).", "-", "apply Build_equivalence.", "pose proof spminusf_plusTerm as sp_pt.", "pose proof spminusf_minusTerm as sp_mt.", "qsimpl time: 1 use: cons,minuspf,divP_multTerm_r,In,nil.", "+", "shelve.", "+", "shelve.", "+", "shelve.", "-", "qsimpl time: 1 use: cons,minuspf,divP_multTerm_r,In,nil.", "qsimpl time: 1 use: cons,minuspf,divP_multTerm_r,In,nil.", "qsimpl time: 1 use: cons,minuspf,divP_multTerm_r,In,nil.", "assert (Hpq'' : forall d : Term A n, In d p -> ltT ltM d (multTerm multA a b) /\\ eqT d (multTerm multA (divTerm divA d (b:=b) nZb) b)).", "+", "shelve.", "+", "shelve.", "-", "qsimpl time: 1 use: cons,minuspf,divP_multTerm_r,In,nil.", "split.", "+", "shelve.", "+", "shelve.", "+", "apply Build_equivalence.", "*", "shelve.", "*", "shelve.", "*", "shelve.", "+"], "tactic": "apply Heq'0.", "exn": "The reference Heq'0 was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros a b nZa nZb H p q Hp Hq Hpq Hpq' c Hc.", "apply ltT_not_ltT in H.", "qsimpl time: 1 use: divP_multTerm_r.", "assert (Heq : eqT (multTerm multA (n:=n) a b) (multTerm multA (n:=n) c (divTerm divA (n:=n) c (b:=b) nZb))).", "-", "apply Build_equivalence.", "pose proof spminusf_plusTerm as sp_pt.", "pose proof spminusf_minusTerm as sp_mt.", "qsimpl time: 1 use: cons,minuspf,divP_multTerm_r,In,nil.", "+", "shelve.", "+", "shelve.", "+", "shelve.", "-", "qsimpl time: 1 use: cons,minuspf,divP_multTerm_r,In,nil.", "qsimpl time: 1 use: cons,minuspf,divP_multTerm_r,In,nil.", "qsimpl time: 1 use: cons,minuspf,divP_multTerm_r,In,nil.", "assert (Hpq'' : forall d : Term A n, In d p -> ltT ltM d (multTerm multA a b) /\\ eqT d (multTerm multA (divTerm divA d (b:=b) nZb) b)).", "+", "shelve.", "+", "shelve.", "-", "qsimpl time: 1 use: cons,minuspf,divP_multTerm_r,In,nil.", "split.", "+", "shelve.", "+", "shelve.", "+", "apply Build_equivalence.", "*", "shelve.", "*", "shelve.", "*", "shelve.", "+"], "tactic": "apply Hpq''.", "exn": "The reference Hpq'' was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros a b nZa nZb H p q Hp Hq Hpq Hpq' c Hc.", "apply ltT_not_ltT in H.", "qsimpl time: 1 use: divP_multTerm_r.", "assert (Heq : eqT (multTerm multA (n:=n) a b) (multTerm multA (n:=n) c (divTerm divA (n:=n) c (b:=b) nZb))).", "-", "apply Build_equivalence.", "pose proof spminusf_plusTerm as sp_pt.", "pose proof spminusf_minusTerm as sp_mt.", "qsimpl time: 1 use: cons,minuspf,divP_multTerm_r,In,nil.", "+", "shelve.", "+", "shelve.", "+", "shelve.", "-", "qsimpl time: 1 use: cons,minuspf,divP_multTerm_r,In,nil.", "qsimpl time: 1 use: cons,minuspf,divP_multTerm_r,In,nil.", "qsimpl time: 1 use: cons,minuspf,divP_multTerm_r,In,nil.", "assert (Hpq'' : forall d : Term A n, In d p -> ltT ltM d (multTerm multA a b) /\\ eqT d (multTerm multA (divTerm divA d (b:=b) nZb) b)).", "+", "shelve.", "+", "shelve.", "-", "qsimpl time: 1 use: cons,minuspf,divP_multTerm_r,In,nil.", "split.", "+", "shelve.", "+", "shelve.", "+", "apply Build_equivalence.", "*", "shelve.", "*", "shelve.", "*", "shelve.", "+"], "tactic": "apply Hin_q.", "exn": "The reference Hin_q was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros a b nZa nZb H p q Hp Hq Hpq Hpq' c Hc.", "apply ltT_not_ltT in H.", "qsimpl time: 1 use: divP_multTerm_r.", "assert (Heq : eqT (multTerm multA (n:=n) a b) (multTerm multA (n:=n) c (divTerm divA (n:=n) c (b:=b) nZb))).", "-", "apply Build_equivalence.", "pose proof spminusf_plusTerm as sp_pt.", "pose proof spminusf_minusTerm as sp_mt.", "qsimpl time: 1 use: cons,minuspf,divP_multTerm_r,In,nil.", "+", "shelve.", "+", "shelve.", "+", "shelve.", "-", "qsimpl time: 1 use: cons,minuspf,divP_multTerm_r,In,nil.", "qsimpl time: 1 use: cons,minuspf,divP_multTerm_r,In,nil.", "qsimpl time: 1 use: cons,minuspf,divP_multTerm_r,In,nil.", "assert (Hpq'' : forall d : Term A n, In d p -> ltT ltM d (multTerm multA a b) /\\ eqT d (multTerm multA (divTerm divA d (b:=b) nZb) b)).", "+", "shelve.", "+", "shelve.", "-", "qsimpl time: 1 use: cons,minuspf,divP_multTerm_r,In,nil.", "split.", "+", "shelve.", "+", "shelve.", "+", "apply Build_equivalence.", "*", "shelve.", "*", "shelve.", "*", "shelve.", "+"], "tactic": "-", "exn": "Wrong bullet -: Current bullet + is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["intros a b nZa nZb H p q Hp Hq Hpq Hpq' c Hc.", "apply ltT_not_ltT in H.", "qsimpl time: 1 use: divP_multTerm_r.", "assert (Heq : eqT (multTerm multA (n:=n) a b) (multTerm multA (n:=n) c (divTerm divA (n:=n) c (b:=b) nZb))).", "-", "apply Build_equivalence.", "pose proof spminusf_plusTerm as sp_pt.", "pose proof spminusf_minusTerm as sp_mt.", "qsimpl time: 1 use: cons,minuspf,divP_multTerm_r,In,nil.", "+", "shelve.", "+", "shelve.", "+", "shelve.", "-", "qsimpl time: 1 use: cons,minuspf,divP_multTerm_r,In,nil.", "qsimpl time: 1 use: cons,minuspf,divP_multTerm_r,In,nil.", "qsimpl time: 1 use: cons,minuspf,divP_multTerm_r,In,nil.", "assert (Hpq'' : forall d : Term A n, In d p -> ltT ltM d (multTerm multA a b) /\\ eqT d (multTerm multA (divTerm divA d (b:=b) nZb) b)).", "+", "shelve.", "+", "shelve.", "-", "qsimpl time: 1 use: cons,minuspf,divP_multTerm_r,In,nil.", "split.", "+", "shelve.", "+", "shelve.", "+", "apply Build_equivalence.", "*", "shelve.", "*", "shelve.", "*", "shelve.", "+", "shelve."], "tactic": "-", "exn": "Wrong bullet -: Expecting +.", "type": "wrong_bullet", "handled": true}, {"ctx": ["intros a b nZa nZb H p q Hp Hq Hpq Hpq' c Hc.", "apply ltT_not_ltT in H.", "qsimpl time: 1 use: divP_multTerm_r.", "assert (Heq : eqT (multTerm multA (n:=n) a b) (multTerm multA (n:=n) c (divTerm divA (n:=n) c (b:=b) nZb))).", "-", "apply Build_equivalence.", "pose proof spminusf_plusTerm as sp_pt.", "pose proof spminusf_minusTerm as sp_mt.", "qsimpl time: 1 use: cons,minuspf,divP_multTerm_r,In,nil.", "+", "shelve.", "+", "shelve.", "+", "shelve.", "-", "qsimpl time: 1 use: cons,minuspf,divP_multTerm_r,In,nil.", "qsimpl time: 1 use: cons,minuspf,divP_multTerm_r,In,nil.", "qsimpl time: 1 use: cons,minuspf,divP_multTerm_r,In,nil.", "assert (Hpq'' : forall d : Term A n, In d p -> ltT ltM d (multTerm multA a b) /\\ eqT d (multTerm multA (divTerm divA d (b:=b) nZb) b)).", "+", "shelve.", "+", "shelve.", "-", "qsimpl time: 1 use: cons,minuspf,divP_multTerm_r,In,nil.", "split.", "+", "shelve.", "+", "shelve.", "+", "apply Build_equivalence.", "*", "shelve.", "*", "shelve.", "*", "shelve.", "+", "shelve.", "+"], "tactic": ["apply Hc.", ""], "exn": "Applied theorem does not have enough premises.", "type": "no_enough_premises", "handled": false}]}, "chat": [], "original": "intros a b nZa nZb H p q Hp Hq Hpq Hpq' c Hc. apply sppoly_eqTerm in H. apply divP_multTerm_r in H. assert (Heq : eqT (multTerm multA (n:=n) a b) (multTerm multA (n:=n) c (divTerm divA (n:=n) c (b:=b) nZb))). - destruct (Hpq' c Hc) as [_ Heq]. apply Heq. pose proof spminusf_plusTerm as sp_pt. pose proof spminusf_minusTerm as sp_mt. assert (Hin : forall d : Term A n, In d q -> In d (minuspf _ _ _ _ _ _ _ _ _ _ (cons c nil) q)). - intros d Hq'. apply sp_mt; auto. apply sp_pt with (c := a) in Hin. rewrite Heq in Hin. apply Hin in Hpq. assert (Hpq'' : forall d : Term A n, In d p -> ltT ltM d (multTerm multA a b) /\\ eqT d (multTerm multA (divTerm divA d (b:=b) nZb) b)). - intros d Hd. specialize (Hpq d Hd). destruct Hpq as [Hlt _]. split. + auto. + assert (Hin_q : In d q). { specialize (sp_mt multA divA eqA_dec zeroP eqTerm Spoly_1_sind spminusf_plusTerm A eqA (n:=n) n a b p q). intro sp_mt. apply sp_mt with (c := a) in Hin. erewrite Heq. destruct (Hpq' d Hd) as [_ Heq']. pose proof (divP_multTerm_r A A0 A1 eqA plusA invA minusA multA divA cs eqA_dec n ltM ltM_dec) as div_mult_r. pose proof (spminusf_plusTerm A A0 A1 eqA plusA invA minusA multA divA cs eqA_dec n ltM ltM_dec) as sp_pt. remember (ppc A1 (n:=n) a b) as pab. remember (divTerm divA (n:=n) d (b:=pab) nZa) as dv. edestruct Hpq' as [Hlt' Heq'']. specialize (Hpq c Hc). replace pab with (multTerm multA a b) in Heq''. * rewrite Heq''. replace d with (multTerm multA dv pab) in Heq'. - rewrite Heq'. apply Heq'. - pose proof (divTerm_multTerm_r A A0 A1 eqA plusA invA minusA multA divA cs eqA_dec n ltM ltM_dec). apply (H a b eq_refl). rewrite <- Heq''. rewrite Heq'. apply Heq'0. * apply Hpq''. } apply Hin_q. - apply Hc.", "back_times": 2, "succ": false, "time": 277.5134496688843}]