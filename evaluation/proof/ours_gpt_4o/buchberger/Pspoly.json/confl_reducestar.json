[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": ["intros Q s_polyQ p canon_p.", "remember (reducestar_reduceplus A A0 A1 eqA invA minusA multA divA eqA_dec n ltM ltM_dec Q p) as red_star_plus.", "induction p as [|a r IHr].", "-", "apply ReduStarConfluent0.", "intros r s red_rs red_ps.", "inversion red_rs.", "subst.", "inversion red_ps.", "subst."], "tactic": "apply eqP_refl.", "exn": "The reference eqP_refl was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros Q s_polyQ p canon_p.", "remember (reducestar_reduceplus A A0 A1 eqA invA minusA multA divA eqA_dec n ltM ltM_dec Q p) as red_star_plus.", "induction p as [|a r IHr].", "-", "apply ReduStarConfluent0.", "intros r s red_rs red_ps.", "inversion red_rs.", "subst.", "inversion red_ps.", "subst."], "tactic": "-", "exn": "Wrong bullet -: Current bullet - is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["intros Q s_polyQ p canon_p.", "remember (reducestar_reduceplus A A0 A1 eqA invA minusA multA divA eqA_dec n ltM ltM_dec Q p) as red_star_plus.", "induction p as [|a r IHr].", "-", "apply ReduStarConfluent0.", "intros r s red_rs red_ps.", "inversion red_rs.", "subst.", "inversion red_ps.", "subst.", "shelve.", "-"], "tactic": "destruct (canonical_reduceplus A A0 A1 eqA plusA invA minusA multA divA cs eqA_dec n ltM ltM_dec os Q p) as [q red_plus].", "exn": "The reference p was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros Q s_polyQ p canon_p.", "remember (reducestar_reduceplus A A0 A1 eqA invA minusA multA divA eqA_dec n ltM ltM_dec Q p) as red_star_plus.", "induction p as [|a r IHr].", "-", "apply ReduStarConfluent0.", "intros r s red_rs red_ps.", "inversion red_rs.", "subst.", "inversion red_ps.", "subst.", "shelve.", "-"], "tactic": "apply eq_refl.", "exn": "In environment A : Set A0, A1 : A eqA : A -> A -> Prop plusA : A -> A -> A invA : A -> A minusA, multA : A -> A -> A divA : A -> forall b : A, ~ eqA b A0 -> A cs : CoefStructure A A0 A1 eqA plusA invA minusA multA divA eqA_dec : forall a b : A, {eqA a b} + {~ eqA a b} n : nat ltM : mon n -> mon n -> Prop ltM_dec : forall a b : mon n, {ltM a b} + {ltM b a} + {a = b} os : OrderStructure (mon n) (zero_mon n) ltM (mult_mon n) Q : list (poly A0 eqA ltM) s_polyQ : SpolyQ Q a : Term A n r : list (Term A n) canon_p : canonical A0 eqA ltM (a :: r) red_star_plus : forall q : list (Term A n), reducestar A A0 A1 eqA invA minusA multA divA eqA_dec n ltM ltM_dec Q (a :: r) q -> reduceplus A A0 A1 eqA invA minusA multA divA eqA_dec n ltM ltM_dec Q (a :: r) q Heqred_star_plus : red_star_plus = reducestar_reduceplus A A0 A1 eqA invA minusA multA divA eqA_dec n ltM ltM_dec Q (a :: r) IHr : canonical A0 eqA ltM r -> forall red_star_plus : forall q : list (Term A n), reducestar A A0 A1 eqA invA minusA multA divA eqA_dec n ltM ltM_dec Q r q -> reduceplus A A0 A1 eqA invA minusA multA divA eqA_dec n ltM ltM_dec Q r q, red_star_plus = reducestar_reduceplus A A0 A1 eqA invA minusA multA divA eqA_dec n ltM ltM_dec Q r -> ReduStarConfluent Q r Unable to unify \"?x = ?x\" with \"ReduStarConfluent Q (a :: r)\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros Q s_polyQ p canon_p.", "remember (reducestar_reduceplus A A0 A1 eqA invA minusA multA divA eqA_dec n ltM ltM_dec Q p) as red_star_plus.", "induction p as [|a r IHr].", "-", "apply ReduStarConfluent0.", "intros r s red_rs red_ps.", "inversion red_rs.", "subst.", "inversion red_ps.", "subst.", "shelve.", "-", "qsimpl time: 1 use: eq_refl."], "tactic": "apply reduceplus_eqp_com with (Q:=Q); auto.", "exn": "In environment A : Set A0, A1 : A eqA : A -> A -> Prop plusA : A -> A -> A invA : A -> A minusA, multA : A -> A -> A divA : A -> forall b : A, (eqA b A0 -> False) -> A eqA_dec : forall a b : A, {eqA a b} + {eqA a b -> False} n : nat ltM : mon n -> mon n -> Prop ltM_dec : forall a b : mon n, {ltM a b} + {ltM b a} + {a = b} Q : list (poly A0 eqA ltM) a : Term A n r : list (Term A n) IHr : canonical A0 eqA ltM r -> forall red_star_plus : forall q : list (Term A n), reducestar A A0 A1 eqA invA minusA multA divA eqA_dec n ltM ltM_dec Q r q -> reduceplus A A0 A1 eqA invA minusA multA divA eqA_dec n ltM ltM_dec Q r q, red_star_plus = reducestar_reduceplus A A0 A1 eqA invA minusA multA divA eqA_dec n ltM ltM_dec Q r -> ReduStarConfluent Q r H : olist (A:=A) ltM (a :: r) H1 : nZterm A0 eqA (n:=n) r H2 : zeroP A0 eqA (n:=n) a -> False H0 : forall p q : list (Term A n), inPolySet A A0 eqA n ltM p Q -> canonical A0 eqA ltM p -> inPolySet A A0 eqA n ltM q Q -> canonical A0 eqA ltM q -> Spoly_1 Q p q M1_min : forall x : mon n, ltM x (zero_mon n) -> False ltM_nonrefl : forall x : mon n, ltM x x -> False ltM_trans : transitive (mon n) ltM ltM_wf : well_founded ltM ltM_plusr : forall x y z : mon n, ltM x y -> ltM (mult_mon n x z) (mult_mon n y z) ltM_plusl : forall x y z : mon n, ltM x y -> ltM (mult_mon n z x) (mult_mon n z y) A1_diff_A0 : eqA A1 A0 -> False eqA_ref : reflexive A eqA eqA_sym : symmetric A eqA eqA_trans : transitive A eqA plusA_assoc : forall a b c : A, eqA (plusA a (plusA b c)) (plusA (plusA a b) c) plusA_com : forall a b : A, eqA (plusA a b) (plusA b a) plusA_eqA_comp : forall a b c d : A, eqA a c -> eqA b d -> eqA (plusA a b) (plusA c d) plusA_A0 : forall a : A, eqA a (plusA a A0) invA_plusA : forall a : A, eqA A0 (plusA a (invA a)) invA_eqA_comp : forall a b : A, eqA a b -> eqA (invA a) (invA b) minusA_def : forall a b : A, eqA (minusA a b) (plusA a (invA b)) multA_eqA_comp : forall a b c d : A, eqA a c -> eqA b d -> eqA (multA a b) (multA c d) multA_assoc : forall a b c : A, eqA (multA a (multA b c)) (multA (multA a b) c) multA_com : forall a b : A, eqA (multA a b) (multA b a) multA_dist_l : forall a b c : A, eqA (plusA (multA c a) (multA c b)) (multA c (plusA a b)) multA_A0_l : forall a : A, eqA (multA A0 a) A0 multA_A1_l : forall a : A, eqA (multA A1 a) a divA_rew : forall (a b : A) (nZ1 nZ2 : eqA b A0 -> False), divA a b nZ1 = divA a b nZ2 divA_is_multA : forall (a b : A) (nZb : eqA b A0 -> False), eqA a (multA (divA a b nZb) b) divA_eqA_comp : forall (a b c d : A) (nZb : eqA b A0 -> False) (nZd : eqA d A0 -> False), eqA a c -> eqA b d -> eqA (divA a b nZb) (divA c d nZd) divA_multA_comp_r : forall (a b c : A) (nZc : eqA c A0 -> False), eqA (divA (multA a b) c nZc) (multA (divA a c nZc) b) divA_invA_r : forall (a b : A) (nZb : eqA b A0 -> False) (nZib : eqA (invA b) A0 -> False), eqA (divA a (invA b) nZib) (invA (divA a b nZb)) Unable to unify \"reduceplus A A0 ?M8445 eqA ?M8448 ?M8449 ?M8450 ?M8451 ?M8453 n ltM ?M8456 Q ?M8461 ?M8462\" with \"ReduStarConfluent Q (a :: r)\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros Q s_polyQ p canon_p.", "remember (reducestar_reduceplus A A0 A1 eqA invA minusA multA divA eqA_dec n ltM ltM_dec Q p) as red_star_plus.", "induction p as [|a r IHr].", "-", "apply ReduStarConfluent0.", "intros r s red_rs red_ps.", "inversion red_rs.", "subst.", "inversion red_ps.", "subst.", "shelve.", "-", "qsimpl time: 1 use: eq_refl.", "qsimpl time: 1 use: reduceplus_eqp_com,eq_refl.", "apply ReduStarConfluent0.", "intros r' s' red_sr' red_ps'."], "tactic": "assert (eqP A eqA n r' q).", "exn": "The reference q was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros Q s_polyQ p canon_p.", "remember (reducestar_reduceplus A A0 A1 eqA invA minusA multA divA eqA_dec n ltM ltM_dec Q p) as red_star_plus.", "induction p as [|a r IHr].", "-", "apply ReduStarConfluent0.", "intros r s red_rs red_ps.", "inversion red_rs.", "subst.", "inversion red_ps.", "subst.", "shelve.", "-", "qsimpl time: 1 use: eq_refl.", "qsimpl time: 1 use: reduceplus_eqp_com,eq_refl.", "apply ReduStarConfluent0.", "intros r' s' red_sr' red_ps'."], "tactic": "apply reducestar_eqp_com with (Q:=Q); auto.", "exn": "In environment A : Set A0, A1 : A eqA : A -> A -> Prop plusA : A -> A -> A invA : A -> A minusA, multA : A -> A -> A divA : A -> forall b : A, (eqA b A0 -> False) -> A eqA_dec : forall a b : A, {eqA a b} + {eqA a b -> False} n : nat ltM : mon n -> mon n -> Prop ltM_dec : forall a b : mon n, {ltM a b} + {ltM b a} + {a = b} Q : list (poly A0 eqA ltM) a : Term A n r : list (Term A n) IHr : canonical A0 eqA ltM r -> forall red_star_plus : forall q : list (Term A n), reducestar A A0 A1 eqA invA minusA multA divA eqA_dec n ltM ltM_dec Q r q -> reduceplus A A0 A1 eqA invA minusA multA divA eqA_dec n ltM ltM_dec Q r q, red_star_plus = reducestar_reduceplus A A0 A1 eqA invA minusA multA divA eqA_dec n ltM ltM_dec Q r -> ReduStarConfluent Q r H : olist (A:=A) ltM (a :: r) H1 : nZterm A0 eqA (n:=n) r H2 : zeroP A0 eqA (n:=n) a -> False H0 : forall p q : list (Term A n), inPolySet A A0 eqA n ltM p Q -> canonical A0 eqA ltM p -> inPolySet A A0 eqA n ltM q Q -> canonical A0 eqA ltM q -> Spoly_1 Q p q M1_min : forall x : mon n, ltM x (zero_mon n) -> False ltM_nonrefl : forall x : mon n, ltM x x -> False ltM_trans : transitive (mon n) ltM ltM_wf : well_founded ltM ltM_plusr : forall x y z : mon n, ltM x y -> ltM (mult_mon n x z) (mult_mon n y z) ltM_plusl : forall x y z : mon n, ltM x y -> ltM (mult_mon n z x) (mult_mon n z y) A1_diff_A0 : eqA A1 A0 -> False eqA_ref : reflexive A eqA eqA_sym : symmetric A eqA eqA_trans : transitive A eqA plusA_assoc : forall a b c : A, eqA (plusA a (plusA b c)) (plusA (plusA a b) c) plusA_com : forall a b : A, eqA (plusA a b) (plusA b a) plusA_eqA_comp : forall a b c d : A, eqA a c -> eqA b d -> eqA (plusA a b) (plusA c d) plusA_A0 : forall a : A, eqA a (plusA a A0) invA_plusA : forall a : A, eqA A0 (plusA a (invA a)) invA_eqA_comp : forall a b : A, eqA a b -> eqA (invA a) (invA b) minusA_def : forall a b : A, eqA (minusA a b) (plusA a (invA b)) multA_eqA_comp : forall a b c d : A, eqA a c -> eqA b d -> eqA (multA a b) (multA c d) multA_assoc : forall a b c : A, eqA (multA a (multA b c)) (multA (multA a b) c) multA_com : forall a b : A, eqA (multA a b) (multA b a) multA_dist_l : forall a b c : A, eqA (plusA (multA c a) (multA c b)) (multA c (plusA a b)) multA_A0_l : forall a : A, eqA (multA A0 a) A0 multA_A1_l : forall a : A, eqA (multA A1 a) a divA_rew : forall (a b : A) (nZ1 nZ2 : eqA b A0 -> False), divA a b nZ1 = divA a b nZ2 divA_is_multA : forall (a b : A) (nZb : eqA b A0 -> False), eqA a (multA (divA a b nZb) b) divA_eqA_comp : forall (a b c d : A) (nZb : eqA b A0 -> False) (nZd : eqA d A0 -> False), eqA a c -> eqA b d -> eqA (divA a b nZb) (divA c d nZd) divA_multA_comp_r : forall (a b c : A) (nZc : eqA c A0 -> False), eqA (divA (multA a b) c nZc) (multA (divA a c nZc) b) divA_invA_r : forall (a b : A) (nZb : eqA b A0 -> False) (nZib : eqA (invA b) A0 -> False), eqA (divA a (invA b) nZib) (invA (divA a b nZb)) H3 : forall (A : Set) (A0 A1 : A) (eqA : A -> A -> Prop) (plusA : A -> A -> A) (invA : A -> A) (minusA multA : A -> A -> A) (divA : A -> forall b : A, (eqA b A0 -> False) -> A), CoefStructure A A0 A1 eqA plusA invA minusA multA divA -> forall (eqA_dec : forall a b : A, {eqA a b} + {eqA a b -> False}) (n : nat) (ltM : mon n -> mon n -> Prop) (ltM_dec : forall a b : mon n, {ltM a b} + {ltM b a} + {a = b}), OrderStructure (mon n) (zero_mon n) ltM (mult_mon n) -> forall (Q : list (poly A0 eqA ltM)) (p q r s : list (Term A n)), reduceplus A A0 A1 eqA invA minusA multA divA eqA_dec n ltM ltM_dec Q p q -> canonical A0 eqA ltM p -> eqP A eqA n p r -> eqP A eqA n q s -> reduceplus A A0 A1 eqA invA minusA multA divA eqA_dec n ltM ltM_dec Q r s r', s' : list (Term A n) red_sr' : reducestar A A0 A1 eqA invA minusA multA divA eqA_dec n ltM ltM_dec Q (a :: r) r' red_ps' : reducestar A A0 A1 eqA invA minusA multA divA eqA_dec n ltM ltM_dec Q (a :: r) s' Unable to unify \"reducestar A A0 ?M14786 eqA ?M14789 ?M14790 ?M14791 ?M14792 ?M14794 n ltM ?M14797 Q ?M14802 ?M14803\" with \"eqP A eqA n r' s'\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros Q s_polyQ p canon_p.", "remember (reducestar_reduceplus A A0 A1 eqA invA minusA multA divA eqA_dec n ltM ltM_dec Q p) as red_star_plus.", "induction p as [|a r IHr].", "-", "apply ReduStarConfluent0.", "intros r s red_rs red_ps.", "inversion red_rs.", "subst.", "inversion red_ps.", "subst.", "shelve.", "-", "qsimpl time: 1 use: eq_refl.", "qsimpl time: 1 use: reduceplus_eqp_com,eq_refl.", "apply ReduStarConfluent0.", "intros r' s' red_sr' red_ps'.", "qsimpl time: 1 use: reducestar_eqp_com,reduceplus_eqp_com,eq_refl."], "tactic": "assert (eqP A eqA n s' q).", "exn": "The reference q was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros Q s_polyQ p canon_p.", "remember (reducestar_reduceplus A A0 A1 eqA invA minusA multA divA eqA_dec n ltM ltM_dec Q p) as red_star_plus.", "induction p as [|a r IHr].", "-", "apply ReduStarConfluent0.", "intros r s red_rs red_ps.", "inversion red_rs.", "subst.", "inversion red_ps.", "subst.", "shelve.", "-", "qsimpl time: 1 use: eq_refl.", "qsimpl time: 1 use: reduceplus_eqp_com,eq_refl.", "apply ReduStarConfluent0.", "intros r' s' red_sr' red_ps'.", "qsimpl time: 1 use: reducestar_eqp_com,reduceplus_eqp_com,eq_refl."], "tactic": "apply reducestar_eqp_com with (Q:=Q); auto.", "exn": "In environment A : Set A0, A1 : A eqA : A -> A -> Prop plusA : A -> A -> A invA : A -> A minusA, multA : A -> A -> A divA : A -> forall b : A, (eqA b A0 -> False) -> A eqA_dec : forall a b : A, {eqA a b} + {eqA a b -> False} n : nat ltM : mon n -> mon n -> Prop ltM_dec : forall a b : mon n, {ltM a b} + {ltM b a} + {a = b} Q : list (poly A0 eqA ltM) a : Term A n r : list (Term A n) IHr : canonical A0 eqA ltM r -> forall red_star_plus : forall q : list (Term A n), reducestar A A0 A1 eqA invA minusA multA divA eqA_dec n ltM ltM_dec Q r q -> reduceplus A A0 A1 eqA invA minusA multA divA eqA_dec n ltM ltM_dec Q r q, red_star_plus = reducestar_reduceplus A A0 A1 eqA invA minusA multA divA eqA_dec n ltM ltM_dec Q r -> ReduStarConfluent Q r H : olist (A:=A) ltM (a :: r) H1 : nZterm A0 eqA (n:=n) r H2 : zeroP A0 eqA (n:=n) a -> False H0 : forall p q : list (Term A n), inPolySet A A0 eqA n ltM p Q -> canonical A0 eqA ltM p -> inPolySet A A0 eqA n ltM q Q -> canonical A0 eqA ltM q -> Spoly_1 Q p q M1_min : forall x : mon n, ltM x (zero_mon n) -> False ltM_nonrefl : forall x : mon n, ltM x x -> False ltM_trans : transitive (mon n) ltM ltM_wf : well_founded ltM ltM_plusr : forall x y z : mon n, ltM x y -> ltM (mult_mon n x z) (mult_mon n y z) ltM_plusl : forall x y z : mon n, ltM x y -> ltM (mult_mon n z x) (mult_mon n z y) A1_diff_A0 : eqA A1 A0 -> False eqA_ref : reflexive A eqA eqA_sym : symmetric A eqA eqA_trans : transitive A eqA plusA_assoc : forall a b c : A, eqA (plusA a (plusA b c)) (plusA (plusA a b) c) plusA_com : forall a b : A, eqA (plusA a b) (plusA b a) plusA_eqA_comp : forall a b c d : A, eqA a c -> eqA b d -> eqA (plusA a b) (plusA c d) plusA_A0 : forall a : A, eqA a (plusA a A0) invA_plusA : forall a : A, eqA A0 (plusA a (invA a)) invA_eqA_comp : forall a b : A, eqA a b -> eqA (invA a) (invA b) minusA_def : forall a b : A, eqA (minusA a b) (plusA a (invA b)) multA_eqA_comp : forall a b c d : A, eqA a c -> eqA b d -> eqA (multA a b) (multA c d) multA_assoc : forall a b c : A, eqA (multA a (multA b c)) (multA (multA a b) c) multA_com : forall a b : A, eqA (multA a b) (multA b a) multA_dist_l : forall a b c : A, eqA (plusA (multA c a) (multA c b)) (multA c (plusA a b)) multA_A0_l : forall a : A, eqA (multA A0 a) A0 multA_A1_l : forall a : A, eqA (multA A1 a) a divA_rew : forall (a b : A) (nZ1 nZ2 : eqA b A0 -> False), divA a b nZ1 = divA a b nZ2 divA_is_multA : forall (a b : A) (nZb : eqA b A0 -> False), eqA a (multA (divA a b nZb) b) divA_eqA_comp : forall (a b c d : A) (nZb : eqA b A0 -> False) (nZd : eqA d A0 -> False), eqA a c -> eqA b d -> eqA (divA a b nZb) (divA c d nZd) divA_multA_comp_r : forall (a b c : A) (nZc : eqA c A0 -> False), eqA (divA (multA a b) c nZc) (multA (divA a c nZc) b) divA_invA_r : forall (a b : A) (nZb : eqA b A0 -> False) (nZib : eqA (invA b) A0 -> False), eqA (divA a (invA b) nZib) (invA (divA a b nZb)) H3 : forall (A : Set) (A0 A1 : A) (eqA : A -> A -> Prop) (plusA : A -> A -> A) (invA : A -> A) (minusA multA : A -> A -> A) (divA : A -> forall b : A, (eqA b A0 -> False) -> A), CoefStructure A A0 A1 eqA plusA invA minusA multA divA -> forall (eqA_dec : forall a b : A, {eqA a b} + {eqA a b -> False}) (n : nat) (ltM : mon n -> mon n -> Prop) (ltM_dec : forall a b : mon n, {ltM a b} + {ltM b a} + {a = b}), OrderStructure (mon n) (zero_mon n) ltM (mult_mon n) -> forall (Q : list (poly A0 eqA ltM)) (p q r s : list (Term A n)), reduceplus A A0 A1 eqA invA minusA multA divA eqA_dec n ltM ltM_dec Q p q -> canonical A0 eqA ltM p -> eqP A eqA n p r -> eqP A eqA n q s -> reduceplus A A0 A1 eqA invA minusA multA divA eqA_dec n ltM ltM_dec Q r s r', s' : list (Term A n) H4 : forall (A : Set) (A0 A1 : A) (eqA : A -> A -> Prop) (plusA : A -> A -> A) (invA : A -> A) (minusA multA : A -> A -> A) (divA : A -> forall b : A, (eqA b A0 -> False) -> A), CoefStructure A A0 A1 eqA plusA invA minusA multA divA -> forall (eqA_dec : forall a b : A, {eqA a b} + {eqA a b -> False}) (n : nat) (ltM : mon n -> mon n -> Prop) (ltM_dec : forall a b : mon n, {ltM a b} + {ltM b a} + {a = b}), OrderStructure (mon n) (zero_mon n) ltM (mult_mon n) -> forall (Q : list (poly A0 eqA ltM)) (p q r s : list (Term A n)), reducestar A A0 A1 eqA invA minusA multA divA eqA_dec n ltM ltM_dec Q p q -> canonical A0 eqA ltM p -> eqP A eqA n p r -> eqP A eqA n q s -> reducestar A A0 A1 eqA invA minusA multA divA eqA_dec n ltM ltM_dec Q r s H5 : reduceplus A A0 A1 eqA invA minusA multA divA eqA_dec n ltM ltM_dec Q (a :: r) s' H6 : irreducible A A0 A1 eqA invA minusA multA divA eqA_dec n ltM ltM_dec Q s' H7 : reduceplus A A0 A1 eqA invA minusA multA divA eqA_dec n ltM ltM_dec Q (a :: r) r' H8 : irreducible A A0 A1 eqA invA minusA multA divA eqA_dec n ltM ltM_dec Q r' Unable to unify \"reducestar A A0 ?M20881 eqA ?M20884 ?M20885 ?M20886 ?M20887 ?M20889 n ltM ?M20892 Q ?M20897 ?M20898\" with \"eqP A eqA n r' s'\".", "type": "cannot_unify", "handled": true}]}, "chat": [], "original": "intros Q s_polyQ p canon_p. remember (reducestar_reduceplus A A0 A1 eqA invA minusA multA divA eqA_dec n ltM ltM_dec Q p) as red_star_plus. induction p as [|a r IHr]. - apply ReduStarConfluent0. intros r s red_rs red_ps. inversion red_rs. subst. inversion red_ps. subst. apply eqP_refl. - destruct (canonical_reduceplus A A0 A1 eqA plusA invA minusA multA divA cs eqA_dec n ltM ltM_dec os Q p) as [q red_plus]. apply eq_refl. apply reduceplus_eqp_com with (Q:=Q); auto. apply ReduStarConfluent0. intros r' s' red_sr' red_ps'. assert (eqP A eqA n r' q). { apply reducestar_eqp_com with (Q:=Q); auto. } assert (eqP A eqA n s' q). { apply reducestar_eqp_com with (Q:=Q); auto. } transitivity q. auto. apply eqP_sym. auto.", "back_times": 0, "succ": false, "time": 192.59062337875366}]