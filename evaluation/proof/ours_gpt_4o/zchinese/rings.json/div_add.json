[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": ["intros is_r a b d Hd_a Hd_b.", "destruct is_r as [comm_Add [is_grp [intern_M [assoc_M distr]]]].", "destruct Hd_a as [A_d [A_a [HaO | [HnaO [qa [A_qa Ha]]]]]].", "-"], "tactic": ["destruct Hd_b as [A_b [A_O | [HbO [qb [A_qb Hb]]]]].", ""], "exn": "Expects a disjunctive pattern with 1 branch or a conjunctive pattern made of 2 patterns.", "type": "num_branch_both", "handled": false}, {"ctx": ["intros is_r a b d Hd_a Hd_b.", "destruct is_r as [comm_Add [is_grp [intern_M [assoc_M distr]]]].", "destruct Hd_a as [A_d [A_a [HaO | [HnaO [qa [A_qa Ha]]]]]].", "-"], "tactic": "-", "exn": "Wrong bullet -: Current bullet - is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["intros is_r a b d Hd_a Hd_b.", "destruct is_r as [comm_Add [is_grp [intern_M [assoc_M distr]]]].", "destruct Hd_a as [A_d [A_a [HaO | [HnaO [qa [A_qa Ha]]]]]].", "-", "shelve.", "-"], "tactic": ["destruct Hd_b as [A_b [A_O | [Hnob [qb [A_qb Hb]]]]].", ""], "exn": "Expects a disjunctive pattern with 1 branch or a conjunctive pattern made of 2 patterns.", "type": "num_branch_both", "handled": false}]}, "chat": [], "original": "intros is_r a b d Hd_a Hd_b. destruct is_r as [comm_Add [is_grp [intern_M [assoc_M distr]]]]. destruct Hd_a as [A_d [A_a [HaO | [HnaO [qa [A_qa Ha]]]]]]. - destruct Hd_b as [A_b [A_O | [HbO [qb [A_qb Hb]]]]]. ++ simpl. split. ** auto. ** split; auto. left. auto. ++ simpl. split; auto. split; auto. right. split. auto. exists O. split. ** auto. ** rewrite Hb. destruct dist as [_ [_ [_ [Hdis _]]]]. specialize (Hdis a O 0). symmetry. apply Hdis. auto. - destruct Hd_b as [A_b [A_O | [Hnob [qb [A_qb Hb]]]]]. ++ simpl. split; auto. split; auto. right. split. auto. exists O. split. ** auto. ** rewrite opp_opp. destruct dist as [_ [_ [_ [Hdis _]]]]. specialize (Hdis O b 0). symmetry. apply Hdis. auto. ++ simpl. split; auto. split; auto. right. split. auto. exists (Add qa qb). split. ** apply intern_M; auto. ** rewrite Ha, Hb. destruct dist as [_ [_ [_ [Hdis _]]]]. specialize (Hdis a qa b). rewrite <- assoc_M. f_equal. apply Hdis; auto.", "back_times": 0, "succ": false, "time": 131.18410539627075}]