[{"history": {"proof": "apply Build_LiftLiftFuse. intros t k s wk ws H. qsimpl time: 1 use: lift_injective.", "repairs": ["", "", "no_instance_var"], "exceptions": [{"ctx": ["apply Build_LiftLiftFuse.", "intros t k s wk ws H."], "tactic": "apply lift_injective.", "exn": "Unable to find an instance for the variables w, k.", "type": "no_instance_var", "handled": true}, {"ctx": ["apply Build_LiftLiftFuse.", "intros t k s wk ws H.", "qsimpl time: 1 use: lift_injective."], "tactic": "apply H.", "exn": "No such goal.", "type": "no_goal", "handled": true}]}, "chat": [{"role": "user", "content": "Help me to prove a theorem in Coq, based on provided proof states including hypotheses and goals. Give a complete proof in only one single code block without explanations, extra definitions. Give a complete proof in one response, only give the proof body, without repeating the definition and \"Proof.\". Avoid existing names when using intros. Write the commands separately, without \";\" and \"[cmd|cmd]\". Use bullets for structure, NEVER use \"{\" and \"}\". When -, + and * are used out, proceed to double versions like --, ++, etc. For example, given proof state:\nn, m: nat\nIHn: m + n = n + m\n============================\nm + S n = S n + m\nThe hypotheses n, m: nat and IHn: m + n = n + m are given first, then the goal, m + S n = S n + m, separated by =. Expect a response like: \n```coq\nsimpl. rewrite <- IHn. auto.``` \nYou do not intros any terms because all terms have already been introduced.\n\nWhen I give:\nforall n m : nat, m + n = n + m\n============================\nn, m: nat\nyour answer should be like:\n```coq\nintros n m. induction n.\n- simpl. auto.\n- simpl. rewrite <- IHn. auto.\nQed.```\nDefinitions and lemmas related to the proof will be provided, use them accordingly.\n\n\nSolve This Proof State:\n\nHypotheses:\nNone\n\nGoal:\nLiftLiftFuse\n\nPremises:\nRecord LiftLiftFuse (T : Type) (H : Lift T) : Prop := Build_LiftLiftFuse { lift_lift_fuse : forall (t : T) (k s wk ws : nat), s <= k <= s + ws -> lift wk k (lift ws s t) = lift (wk + ws) s t } Arguments LiftLiftFuse {T}%type_scope {H} Arguments Build_LiftLiftFuse [T]%type_scope _ _%function_scope\nBuild_LiftLiftFuse : forall (T : Type) (H : Lift T), (forall (t : T) (k s wk ws : nat), s <= k <= s + ws -> lift wk k (lift ws s t) = lift (wk + ws) s t) -> LiftLiftFuse\nBool.andb_true_r : forall b : bool, (b && true)%bool = b\nInductive GFormula (TA TX AA AF : Type) : Type := TT : Tauto.GFormula | FF : Tauto.GFormula | X : TX -> Tauto.GFormula | A : TA -> AA -> Tauto.GFormula | Cj : Tauto.GFormula -> Tauto.GFormula -> Tauto.GFormula | D : Tauto.GFormula -> Tauto.GFormula -> Tauto.GFormula | N : Tauto.GFormula -> Tauto.GFormula | I : Tauto.GFormula -> option AF -> Tauto.GFormula -> Tauto.GFormula Arguments Tauto.GFormula {TA TX AA AF}%type_scope Arguments Tauto.TT {TA TX AA AF}%type_scope Arguments Tauto.FF {TA TX AA AF}%type_scope Arguments Tauto.X {TA TX AA AF}%type_scope Arguments Tauto.A {TA TX AA AF}%type_scope Arguments Tauto.Cj {TA TX AA AF}%type_scope Arguments Tauto.D {TA TX AA AF}%type_scope Arguments Tauto.N {TA TX AA AF}%type_scope Arguments Tauto.I {TA TX AA AF}%type_scope\nList.split_length_r : forall (A B : Type) (l : list (A * B)), length (snd (List.split l)) = length l\nZifyClasses.mkinj : forall (S T : Type) (inj : S -> T) (pred : T -> Prop), (forall x : S, pred (inj x)) -> ZifyClasses.InjTyp S T\nBinIntDef.Z.max = fun n m : BinNums.Z => match BinIntDef.Z.compare n m with | Lt => m | _ => n end : BinNums.Z -> BinNums.Z -> BinNums.Z Arguments BinIntDef.Z.max (_ _)%Z_scope\nInductive list (A : Type) : Type := nil : list A | cons : A -> list A -> list A Arguments list _%type_scope Arguments nil {A}%type_scope Arguments cons {A}%type_scope a l%list_scope : rename\nNat.succ_le_mono : forall n m : nat, n <= m < -> S n <= S m\nInductive between (P : nat -> Prop) (k : nat) : nat -> Prop := bet_emp : between P k k | bet_S : forall l : nat, between P k l -> P l -> between P k (S l) Arguments between _%function_scope (_ _)%nat_scope Arguments bet_emp _%function_scope _%nat_scope Arguments bet_S _%function_scope (_ _)%nat_scope\nNat.log2_up_same : forall a b : nat, 0 < a -> 0 < b -> Nat.log2_up a = Nat.log2_up b -> a < 2 * b\nInductive le (n : nat) : nat -> Prop := le_n : n <= n | le_S : forall m : nat, n <= m -> n <= S m Arguments le (_ _)%nat_scope Arguments le_n _%nat_scope Arguments le_S (_ _)%nat_scope\nLiftInjective_idx = {| lift_injective := fun (w k t1 t2 : nat) (H : (if le_gt_dec k t1 then w + t1 else t1) = (if le_gt_dec k t2 then w + t2 else t2)) => match le_gt_dec k t1 as s return ((if s then w + t1 else t1) = (if le_gt_dec k t2 then w + t2 else t2) -> t1 = t2) with | left H0 => match le_gt_dec k t2 as s return (w + t1 = (if s then w + t2 else t2) -> t1 = t2) with | left _ => fun H1 : w + t1 = w + t2 => (fun lemma : (fun t : BinNums.Z => t1 = t2 <-> t = BinInt.Z.of_nat t2) (BinInt.Z.of_nat t1) => Morphisms.iff_flip_impl_subrelation (t1 = t2) (BinInt.Z...\nNat.lt_eq_cases : forall n m : nat, n <= m < -> n < m \\/ n = m\nRecord Lift (T : Type) : Type := Build_Lift { lift : nat -> nat -> T -> T } Arguments Lift _%type_scope Arguments Build_Lift [T]%type_scope _%function_scope\nproj1_sig : forall (A : Type) (P : A -> Prop), {x : A | P x} -> A\nBinNatDef.N.of_nat = fun n : nat => match n with | 0 => BinNums.N0 | S n' => BinNums.Npos (BinPos.Pos.of_succ_nat n') end : nat -> BinNums.N Arguments BinNatDef.N.of_nat _%nat_scope\nNat.add_1_l : forall n : nat, 1 + n = S n\nandb = fun b1 b2 : bool => if b1 then b2 else false : bool -> bool -> bool Arguments andb (_ _)%bool_scope\nNat.add_succ_r : forall n m : nat, n + S m = S (n + m)\nRecord BinOp (S1 S2 S3 T : Type) (Op : S1 -> S2 -> S3) (I1 : ZifyClasses.InjTyp S1 T) (I2 : ZifyClasses.InjTyp S2 T) (I3 : ZifyClasses.InjTyp S3 T) : Type := mkbop { TBOp : T -> T -> T; TBOpInj : forall (n : S1) (m : S2), ZifyClasses.inj (Op n m) = TBOp (ZifyClasses.inj n) (ZifyClasses.inj m) } BinOp has primitive projections with eta conversion. Arguments ZifyClasses.BinOp {S1 S2 S3 T}%type_scope _%function_scope {I1 I2 I3} Arguments ZifyClasses.mkbop (_ _ _ _)%type_scope _%function_scope _ _ _ (_ _)%function_scope\nInit.Nat.shiftr = fun a : (fun _ : nat => nat) 0 => nat_rect (fun _ : nat => nat) a (fun _ : nat => Init.Nat.div2) : (fun _ : nat => nat) 0 -> forall n : nat, (fun _ : nat => nat) n Arguments Init.Nat.shiftr (_ _)%nat_scope\nPnat.Nat2Pos.inj_iff : forall n m : nat, n <> 0 -> m <> 0 -> BinPos.Pos.of_nat n = BinPos.Pos.of_nat m < -> n = m\nNat.lt_le_trans : forall n m p : nat, n < m -> m <= p -> n < p\nNat.add_succ_l : forall n m : nat, S n + m = S (n + m)\nAscii.N_of_ascii = fun a : Ascii.ascii => let (a0, a1, a2, a3, a4, a5, a6, a7) := a in Ascii.N_of_digits (a0 :: a1 :: a2 :: a3 :: a4 :: a5 :: a6 :: a7 :: nil) : Ascii.ascii -> BinNums.N Arguments Ascii.N_of_ascii _%char_scope\nInit.Nat.div = fun x y : nat => match y with | 0 => y | S y' => fst (Init.Nat.divmod x y' 0 y') end : nat -> nat -> nat Arguments Init.Nat.div (_ _)%nat_scope\nlift = fun (T : Type) (Lift0 : Lift T) => let (lift) := Lift0 in lift : forall T : Type, Lift T -> nat -> nat -> T -> T Arguments lift {T}%type_scope {Lift} (_ _)%nat_scope\nNat.lcm_0_l : forall n : nat, Nat.lcm 0 n = 0\nNat.sub_succ_l : forall n m : nat, n <= m -> S m - n = S (m - n)"}, {"role": "assistant", "content": "```coq\napply Build_LiftLiftFuse.\nintros t k s wk ws H.\napply lift_injective.\napply H.\nQed.\n```"}], "original": "apply Build_LiftLiftFuse. intros t k s wk ws H. apply lift_injective. apply H.", "back_times": 0, "succ": true, "time": 5.5314013957977295}]