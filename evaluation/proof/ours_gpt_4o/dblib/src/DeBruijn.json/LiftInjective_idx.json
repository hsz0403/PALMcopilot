[{"history": {"proof": "apply Build_LiftInjective. intros w k t1 t2 H_eq. hauto l: on depth: 3.", "repairs": ["", "", "hammer"], "exceptions": []}, "chat": [{"role": "user", "content": "Help me to prove a theorem in Coq, based on provided proof states including hypotheses and goals. Give a complete proof in only one single code block without explanations, extra definitions. Give a complete proof in one response, only give the proof body, without repeating the definition and \"Proof.\". Avoid existing names when using intros. Write the commands separately, without \";\" and \"[cmd|cmd]\". Use bullets for structure, NEVER use \"{\" and \"}\". When -, + and * are used out, proceed to double versions like --, ++, etc. For example, given proof state:\nn, m: nat\nIHn: m + n = n + m\n============================\nm + S n = S n + m\nThe hypotheses n, m: nat and IHn: m + n = n + m are given first, then the goal, m + S n = S n + m, separated by =. Expect a response like: \n```coq\nsimpl. rewrite <- IHn. auto.``` \nYou do not intros any terms because all terms have already been introduced.\n\nWhen I give:\nforall n m : nat, m + n = n + m\n============================\nn, m: nat\nyour answer should be like:\n```coq\nintros n m. induction n.\n- simpl. auto.\n- simpl. rewrite <- IHn. auto.\nQed.```\nDefinitions and lemmas related to the proof will be provided, use them accordingly.\n\n\nSolve This Proof State:\n\nHypotheses:\nNone\n\nGoal:\nLiftInjective\n\nPremises:\nRecord LiftInjective (T : Type) (H : Lift T) : Prop := Build_LiftInjective { lift_injective : forall (w k : nat) (t1 t2 : T), lift w k t1 = lift w k t2 -> t1 = t2 } Arguments LiftInjective {T}%type_scope {H} Arguments Build_LiftInjective [T]%type_scope _ _%function_scope\nBuild_LiftInjective : forall (T : Type) (H : Lift T), (forall (w k : nat) (t1 t2 : T), lift w k t1 = lift w k t2 -> t1 = t2) -> LiftInjective\ninv_lt_rel : forall A : Set, (A -> nat -> Prop) -> A -> A -> Prop\nNat.le_preorder = {| RelationClasses.PreOrder_Reflexive := Nat.le_refl; RelationClasses.PreOrder_Transitive := Nat.le_trans |} : RelationClasses.PreOrder le\nNat.lt_le_trans : forall n m p : nat, n < m -> m <= p -> n < p\nNat.pred_wd = PeanoNat.Nat.pred_wd_obligation_1 : Morphisms.Proper (Morphisms.respectful eq eq) Nat.pred\nInit.Nat.shiftr = fun a : (fun _ : nat => nat) 0 => nat_rect (fun _ : nat => nat) a (fun _ : nat => Init.Nat.div2) : (fun _ : nat => nat) 0 -> forall n : nat, (fun _ : nat => nat) n Arguments Init.Nat.shiftr (_ _)%nat_scope\nRecord BinOp (S1 S2 S3 T : Type) (Op : S1 -> S2 -> S3) (I1 : ZifyClasses.InjTyp S1 T) (I2 : ZifyClasses.InjTyp S2 T) (I3 : ZifyClasses.InjTyp S3 T) : Type := mkbop { TBOp : T -> T -> T; TBOpInj : forall (n : S1) (m : S2), ZifyClasses.inj (Op n m) = TBOp (ZifyClasses.inj n) (ZifyClasses.inj m) } BinOp has primitive projections with eta conversion. Arguments ZifyClasses.BinOp {S1 S2 S3 T}%type_scope _%function_scope {I1 I2 I3} Arguments ZifyClasses.mkbop (_ _ _ _)%type_scope _%function_scope _ _ _ (_ _)%function_scope\nNat.divide = fun x y : nat => exists z : nat, y = z * x : nat -> nat -> Prop Arguments Nat.divide (_ _)%nat_scope\nNat.succ_pred_pos : forall n : nat, 0 < n -> S (Nat.pred n) = n\nInit.Nat.div = fun x y : nat => match y with | 0 => y | S y' => fst (Init.Nat.divmod x y' 0 y') end : nat -> nat -> nat Arguments Init.Nat.div (_ _)%nat_scope\nNat.add_succ_r : forall n m : nat, n + S m = S (n + m)\nNat.mul_pow2_bits_add : forall a n m : nat, Nat.testbit (a * 2 ^ n) (m + n) = Nat.testbit a m\nle_S : forall n m : nat, n <= m -> n <= S m\nNat.square_add_le : forall a b : nat, 0 <= a -> 0 <= b -> (a + b) * (a + b) <= 2 * (a * a + b * b)\nBinIntDef.Z.max = fun n m : BinNums.Z => match BinIntDef.Z.compare n m with | Lt => m | _ => n end : BinNums.Z -> BinNums.Z -> BinNums.Z Arguments BinIntDef.Z.max (_ _)%Z_scope\nInductive list (A : Type) : Type := nil : list A | cons : A -> list A -> list A Arguments list _%type_scope Arguments nil {A}%type_scope Arguments cons {A}%type_scope a l%list_scope : rename\nNat.add_succ_l : forall n m : nat, S n + m = S (n + m)\nlift = fun (T : Type) (Lift0 : Lift T) => let (lift) := Lift0 in lift : forall T : Type, Lift T -> nat -> nat -> T -> T Arguments lift {T}%type_scope {Lift} (_ _)%nat_scope\nNat.sub_succ_l : forall n m : nat, n <= m -> S m - n = S (m - n)\nInductive unit : Set := tt : unit\nBinIntDef.Z.abs = fun z : BinNums.Z => match z with | BinNums.Z0 => BinNums.Z0 | BinNums.Zpos p | BinNums.Zneg p => BinNums.Zpos p end : BinNums.Z -> BinNums.Z Arguments BinIntDef.Z.abs _%Z_scope\nsubst = fun (V T : Type) (Subst0 : Subst V T) => let (subst) := Subst0 in subst : forall V T : Type, Subst V T -> V -> nat -> T -> T Arguments subst {V T}%type_scope {Subst} _ _%nat_scope\nlift_injective : forall (w k : nat) (t1 t2 : ?T), lift w k t1 = lift w k t2 -> t1 = t2 where ?T : [ |- Type] ?H : [ |- Lift ?T] ?LiftInjective : [ |- LiftInjective]\nInit.Nat.add = fix add (n m : nat) {struct n} : nat := match n with | 0 => m | S p => S (add p m) end : nat -> nat -> nat Arguments Init.Nat.add (_ _)%nat_scope\nRecord LiftSubst (V : Type) (H : Lift V) (T : Type) (H0 : Lift T) (H1 : Subst V T) : Prop := Build_LiftSubst { lift_subst : forall (t : T) (k : nat) (v : V) (s w : nat), lift w k (subst v s t) = subst (lift w k v) (lift w (1 + k) s) (lift w (shift s k) t) } Arguments LiftSubst {V}%type_scope {H} {T}%type_scope {H0 H1} Arguments Build_LiftSubst [V]%type_scope _ [T]%type_scope _ _ _%function_scope\nInductive Acc (A : Type) (R : A -> A -> Prop) (x : A) : Prop := Acc_intro : (forall y : A, R y x -> Acc R y) -> Acc R x Arguments Acc [A]%type_scope _%function_scope Arguments Acc_intro [A]%type_scope [R]%function_scope _ _%function_scope\nVectorDef.nil : forall A : Type, VectorDef.t A 0\nNat.sub_0_l : forall n : nat, 0 - n = 0\nNat.le_exists_sub : forall n m : nat, n <= m -> exists p : nat, m = p + n /\\ 0 <= p"}, {"role": "assistant", "content": "```coq\napply Build_LiftInjective.\nintros w k t1 t2 H_eq.\nexact (lift_injective w k t1 t2 H_eq).\nQed.\n```"}], "original": "apply Build_LiftInjective. intros w k t1 t2 H_eq. apply (lift_injective w k t1 t2 H_eq).", "back_times": 0, "succ": true, "time": 10.403900146484375}]