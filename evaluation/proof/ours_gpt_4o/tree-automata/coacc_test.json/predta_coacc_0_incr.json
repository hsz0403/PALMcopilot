[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": ["intros d d' m0 m1 H.", "apply lemd_transitive with (predta_coacc_0 d d' m0).", "-"], "tactic": "apply map_or_inc_rd.", "exn": "In environment d, d' : preDTA m0, m1 : Map bool H : lemd d' m0 m1 Unable to unify \"ensemble_base state ?M1857 (map_or ?M1858 ?M1859) /\\\\ ensemble_base state ?M1857 (map_or ?M1858 ?M1860) /\\\\ lem (map_or ?M1858 ?M1859) (map_or ?M1858 ?M1860)\" with \"ensemble_base state d (predta_coacc_0 d d' m0) /\\\\ ensemble_base state d (predta_coacc_0 d d' m0) /\\\\ lem (predta_coacc_0 d d' m0) (predta_coacc_0 d d' m0)\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros d d' m0 m1 H.", "apply lemd_transitive with (predta_coacc_0 d d' m0).", "-", "qsimpl time: 1 use: map_or_inc_rd.", "+", "apply predta_coacc_0_def_ok.", "+"], "tactic": "apply H.", "exn": "In environment H0 : forall (d : preDTA) (m m0 m1 : Map bool), ensemble_base state d m -> lemd d m0 m1 -> lemd d (map_or m m0) (map_or m m1) d, d' : preDTA m0, m1 : Map bool H1 : ensemble_base state d' m0 H : ensemble_base state d' m1 H3 : lem m0 m1 Unable to unify \"ensemble_base state d' m1\" with \"ensemble_base state d (predta_coacc_0 d d' m0)\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros d d' m0 m1 H.", "apply lemd_transitive with (predta_coacc_0 d d' m0).", "-", "qsimpl time: 1 use: map_or_inc_rd.", "+", "apply predta_coacc_0_def_ok.", "+", "qsimpl time: 1 use: map_or_inc_rd."], "tactic": "-", "exn": "Wrong bullet -: Current bullet + is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["intros d d' m0 m1 H.", "apply lemd_transitive with (predta_coacc_0 d d' m0).", "-", "qsimpl time: 1 use: map_or_inc_rd.", "+", "apply predta_coacc_0_def_ok.", "+", "qsimpl time: 1 use: map_or_inc_rd.", "shelve."], "tactic": "-", "exn": "Wrong bullet -: Expecting +.", "type": "wrong_bullet", "handled": true}, {"ctx": ["intros d d' m0 m1 H.", "apply lemd_transitive with (predta_coacc_0 d d' m0).", "-", "qsimpl time: 1 use: map_or_inc_rd.", "+", "apply predta_coacc_0_def_ok.", "+", "qsimpl time: 1 use: map_or_inc_rd.", "shelve.", "+"], "tactic": "apply map_or_inc_ld.", "exn": "In environment H0 : forall (d : preDTA) (m m0 m1 : Map bool), ensemble_base state d m -> lemd d m0 m1 -> lemd d (map_or m m0) (map_or m m1) d, d' : preDTA m0, m1 : Map bool H1 : ensemble_base state d' m0 H : ensemble_base state d' m1 H3 : lem m0 m1 Unable to unify \"ensemble_base state ?M3268 (map_or ?M3270 ?M3269) /\\\\ ensemble_base state ?M3268 (map_or ?M3271 ?M3269) /\\\\ lem (map_or ?M3270 ?M3269) (map_or ?M3271 ?M3269)\" with \"(fix lem (m0 m1 : Map bool) {struct m1} : Prop := match m0 with | @M0 _ => match m1 with | @M0 _ => True | _ => False end | @M1 _ a b => match m1 with | @M1 _ a' b' => if (a =? a')%N then leb b b' else False | _ => False end | @M2 _ a b => match m1 with | @M2 _ c d => lem a c /\\\\ lem b d | _ => False end end) (predta_coacc_0 d d' m0) (predta_coacc_0 d d' m0)\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros d d' m0 m1 H.", "apply lemd_transitive with (predta_coacc_0 d d' m0).", "-", "qsimpl time: 1 use: map_or_inc_rd.", "+", "apply predta_coacc_0_def_ok.", "+", "qsimpl time: 1 use: map_or_inc_rd.", "shelve.", "+", "qsimpl time: 1 use: map_or_inc_rd,map_or_inc_ld."], "tactic": "+", "exn": "Wrong bullet +: Current bullet + is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["intros d d' m0 m1 H.", "apply lemd_transitive with (predta_coacc_0 d d' m0).", "-", "qsimpl time: 1 use: map_or_inc_rd.", "+", "apply predta_coacc_0_def_ok.", "+", "qsimpl time: 1 use: map_or_inc_rd.", "shelve.", "+", "qsimpl time: 1 use: map_or_inc_rd,map_or_inc_ld.", "shelve."], "tactic": "+", "exn": "Wrong bullet +: Expecting -.", "type": "wrong_bullet", "handled": true}, {"ctx": ["intros d d' m0 m1 H.", "apply lemd_transitive with (predta_coacc_0 d d' m0).", "-", "qsimpl time: 1 use: map_or_inc_rd.", "+", "apply predta_coacc_0_def_ok.", "+", "qsimpl time: 1 use: map_or_inc_rd.", "shelve.", "+", "qsimpl time: 1 use: map_or_inc_rd,map_or_inc_ld.", "shelve.", "-"], "tactic": "apply predta_coacc_0_def_ok.", "exn": "In environment d, d' : preDTA m0, m1 : Map bool H : lemd d' m0 m1 Unable to unify \"(fix domain_equal (A B : Set) (m0 : Map A) (m1 : Map B) {struct m1} : Prop := match m0 with | @M0 _ => match m1 with | @M0 _ => True | _ => False end | @M1 _ a _ => match m1 with | @M1 _ b _ => a = b | _ => False end | @M2 _ a b => match m1 with | @M2 _ c d => domain_equal A B a c /\\\\ domain_equal A B b d | _ => False end end) state bool ?M3556 (predta_coacc_0 ?M3556 ?M3557 ?M3558)\" with \"ensemble_base state d (predta_coacc_0 d d' m0) /\\\\ ensemble_base state d (predta_coacc_0 d d' m1) /\\\\ lem (predta_coacc_0 d d' m0) (predta_coacc_0 d d' m1)\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros d d' m0 m1 H.", "apply lemd_transitive with (predta_coacc_0 d d' m0).", "-", "qsimpl time: 1 use: map_or_inc_rd.", "+", "apply predta_coacc_0_def_ok.", "+", "qsimpl time: 1 use: map_or_inc_rd.", "shelve.", "+", "qsimpl time: 1 use: map_or_inc_rd,map_or_inc_ld.", "shelve.", "-", "qsimpl time: 1 use: map_or_inc_rd,map_or_inc_ld,predta_coacc_0_def_ok."], "tactic": "apply lemd_reflexive.", "exn": "In environment H2 : forall (d d' : preDTA) (m : Map bool), ensemble_base state d (predta_coacc_0 d d' m) H1 : forall (d : preDTA) (m m0 m1 : Map bool), ensemble_base state d m -> lemd d m0 m1 -> lemd d (map_or m0 m) (map_or m1 m) H0 : forall (d : preDTA) (m m0 m1 : Map bool), ensemble_base state d m -> lemd d m0 m1 -> lemd d (map_or m m0) (map_or m m1) d, d' : preDTA m0, m1 : Map bool H3 : ensemble_base state d' m0 H : ensemble_base state d' m1 H5 : lem m0 m1 Unable to unify \"ensemble_base state ?M4790 ?M4791 /\\\\ ensemble_base state ?M4790 ?M4791 /\\\\ lem ?M4791 ?M4791\" with \"(fix lem (m0 m1 : Map bool) {struct m1} : Prop := match m0 with | @M0 _ => match m1 with | @M0 _ => True | _ => False end | @M1 _ a b => match m1 with | @M1 _ a' b' => if (a =? a')%N then leb b b' else False | _ => False end | @M2 _ a b => match m1 with | @M2 _ c d => lem a c /\\\\ lem b d | _ => False end end) (predta_coacc_0 d d' m0) (predta_coacc_0 d d' m1)\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros d d' m0 m1 H.", "apply lemd_transitive with (predta_coacc_0 d d' m0).", "-", "qsimpl time: 1 use: map_or_inc_rd.", "+", "apply predta_coacc_0_def_ok.", "+", "qsimpl time: 1 use: map_or_inc_rd.", "shelve.", "+", "qsimpl time: 1 use: map_or_inc_rd,map_or_inc_ld.", "shelve.", "-", "qsimpl time: 1 use: map_or_inc_rd,map_or_inc_ld,predta_coacc_0_def_ok.", "qsimpl time: 1 use: lemd_reflexive,map_or_inc_rd,map_or_inc_ld,predta_coacc_0_def_ok."], "tactic": "apply predta_coacc_0_def_ok.", "exn": "In environment H8 : forall (d d' : preDTA) (m : Map bool), ensemble_base state d (predta_coacc_0 d d' m) H7 : forall (d : preDTA) (m m0 m1 : Map bool), ensemble_base state d m -> lemd d m0 m1 -> lemd d (map_or m0 m) (map_or m1 m) H6 : forall (d : preDTA) (m m0 m1 : Map bool), ensemble_base state d m -> lemd d m0 m1 -> lemd d (map_or m m0) (map_or m m1) H4 : forall (d : preDTA) (m : Map bool), ensemble_base state d m -> lemd d m m d, d' : preDTA m0, m1 : Map bool H3 : ensemble_base state d' m0 H : ensemble_base state d' m1 H5 : lem m0 m1 Unable to unify \"(fix domain_equal (A B : Set) (m0 : Map A) (m1 : Map B) {struct m1} : Prop := match m0 with | @M0 _ => match m1 with | @M0 _ => True | _ => False end | @M1 _ a _ => match m1 with | @M1 _ b _ => a = b | _ => False end | @M2 _ a b => match m1 with | @M2 _ c d => domain_equal A B a c /\\\\ domain_equal A B b d | _ => False end end) state bool ?M5174 (predta_coacc_0 ?M5174 ?M5175 ?M5176)\" with \"(fix lem (m0 m1 : Map bool) {struct m1} : Prop := match m0 with | @M0 _ => match m1 with | @M0 _ => True | _ => False end | @M1 _ a b => match m1 with | @M1 _ a' b' => if (a =? a')%N then leb b b' else False | _ => False end | @M2 _ a b => match m1 with | @M2 _ c d => lem a c /\\\\ lem b d | _ => False end end) (predta_coacc_0 d d' m0) (predta_coacc_0 d d' m1)\".", "type": "cannot_unify", "handled": true}]}, "chat": [], "original": "intros d d' m0 m1 H. apply lemd_transitive with (predta_coacc_0 d d' m0). - apply map_or_inc_rd. + apply predta_coacc_0_def_ok. + apply H. - apply map_or_inc_ld. + apply predta_coacc_0_def_ok. + apply lemd_reflexive. apply predta_coacc_0_def_ok.", "back_times": 0, "succ": false, "time": 94.4691789150238}]