[{"history": {"proof": "intros p. induction p using prec_list_ind. - qsimpl time: 1 use: pl_produit_path_incl_1_5. - intros n m plp a l H H0 H1 H2. right. qsimpl time: 1 use: pl_produit_path_incl_1_2,pl_produit_path_incl_1_5.", "repairs": ["", "", "", "cannot_unify", "", "", "", "cannot_unify"], "exceptions": [{"ctx": ["intros p.", "induction p using prec_list_ind.", "-"], "tactic": "apply pl_produit_path_incl_1_5.", "exn": "In environment a : ad p1, p2 : prec_list IHp1 : pl_produit_path_incl_def_2 p1 prec_empty IHp2 : pl_produit_path_incl_def_2 p2 prec_empty Unable to unify \"pl_produit_path_incl_def_0 ?M1855 ?M1856 /\\\\ pl_produit_path_incl_def_1 ?M1855 ?M1856\" with \"forall (n m : nat) (plp : pl_path) (a0 : ad) (l : prec_list), pl_path_incl plp (pl_produit_0 a0 (prec_cons a p1 p2) prec_empty m l) -> pl_tl_length (prec_cons a p1 p2) n -> pl_tl_length prec_empty (S n) -> pl_essence (prec_cons a p1 p2) prec_empty <= m -> (exists plp0 plp1 : pl_path, plp = pl_path_product plp0 plp1 /\\\\ pl_path_incl plp0 (prec_cons a0 (prec_cons a p1 p2) prec_empty) /\\\\ pl_path_incl plp1 prec_empty) \\\\/ pl_path_incl plp l\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros p.", "induction p using prec_list_ind.", "-", "qsimpl time: 1 use: pl_produit_path_incl_1_5.", "-", "intros n m plp a l H H0 H1 H2.", "right."], "tactic": "apply pl_produit_path_incl_1_2.", "exn": "In environment n, m : nat plp : pl_path a : ad l : prec_list H : pl_path_incl plp (pl_produit_0 a prec_empty prec_empty m l) H0 : pl_tl_length prec_empty n H1 : pl_tl_length prec_empty (S n) H2 : pl_essence prec_empty prec_empty <= m Unable to unify \"forall (n m : nat) (plp0 plp1 : pl_path), pl_path_incl plp0 prec_empty -> pl_tl_length prec_empty n -> pl_path_incl plp1 ?M2867 -> pl_tl_length ?M2867 n -> pl_essence prec_empty ?M2867 <= m -> pl_path_incl (pl_path_product plp0 plp1) (pl_produit_1 prec_empty m ?M2867)\" with \"pl_path_incl plp l\".", "type": "cannot_unify", "handled": true}]}, "chat": [], "original": "intros p. induction p using prec_list_ind. - apply pl_produit_path_incl_1_5. - simpl. intros n m plp a l H H0 H1 H2. right. apply pl_produit_path_incl_1_2.", "back_times": 0, "succ": true, "time": 1.1861202716827393}]