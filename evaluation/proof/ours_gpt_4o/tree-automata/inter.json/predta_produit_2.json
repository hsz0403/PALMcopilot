[{"history": {"proof": "", "repairs": [], "exceptions": []}, "chat": [], "original": "intros d0 d1 a0 a1 s0 s1 H0 H1. rewrite <- (iad_inv_inv_1 (iad_conv a0 a1) a0 a1) at 1. induction d0 as [ | a0' s0' | s00 IH00 s01 IH01 ]. - inversion H0. - destruct d1 as [ | a1' s1' | s10 IH10 s11 IH11 ]. + inversion H1. + simpl. destruct (N.eq_dec a0 a0') as [Heq0|Hneq0]. * subst a0'. rewrite H0 in *. inversion H0. subst s0'. destruct (N.eq_dec a1 a1') as [Heq1|Hneq1]. ++ subst a1'. rewrite H1 in *. inversion H1. subst s1'. now apply predta_produit_0. ++ simpl in IHd1. specialize (IHd1 a1 s1 H1 a0' (iad_conv a0' a1)). rewrite (iad_inv_inv_1 (iad_conv a0' a1) a0' a1) in IHd1. rewrite (iad_conv_inj a0' a1 a0' a1) in IHd1. rewrite IHd1. reflexivity. * eapply MapDelta_semantics_2_1. ++ apply H0. ++ apply H1. + simpl. now apply predta_produit_0. - destruct d1 as [ | a1' s1' | s10 IH10 s11 IH11 ]. + inversion H1. + simpl. destruct (N.eq_dec a0 a0') as [Heq0|Hneq0]. * subst a0'. rewrite H0 in *. inversion H0. subst s0'. eapply MapDelta_semantics_2_1. ++ apply predta_produit_0. ++ apply H1. * eapply MapDelta_semantics_2_1. ++ apply H0. ++ apply H1. + simpl. eapply MapDelta_semantics_2_1. ++ apply IH01; auto. ++ apply IH11; auto.", "back_times": 0, "succ": false, "time": 72.79743885993958}]