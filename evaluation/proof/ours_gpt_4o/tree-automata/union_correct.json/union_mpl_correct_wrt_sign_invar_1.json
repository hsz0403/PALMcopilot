[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": ["intros s0 s1 pa sigma H0 H1."], "tactic": ["induction s0 as [|a0 p0 s0_1 s0_2 IH0 IH1].", ""], "exn": "Expects a disjunctive pattern with 3 branches.", "type": "num_branch", "handled": false}]}, "chat": [], "original": "intros s0 s1 pa sigma H0 H1. induction s0 as [|a0 p0 s0_1 s0_2 IH0 IH1]. - induction s1 as [|a1 p1 s1_1 s1_2 IH2 IH3]. -- simpl. intros. apply state_correct_wrt_sign_with_offset_M2. split; auto. -- simpl. apply union_mpl_correct_wrt_sign_invar_0; auto. -- simpl. apply union_mpl_correct_wrt_sign_invar_0; auto. - induction s1 as [|a1 p1 s1_1 s1_2 IH2 IH3]. -- simpl. apply union_mpl_correct_wrt_sign_invar_0; auto. -- simpl. apply union_mpl_correct_wrt_sign_invar_0; auto. -- simpl. apply umpl_conv_0_correct_wrt_sign_invar_0. ++ apply state_correct_wrt_sign_with_offset_M2 in H0 as [H0_1 H0_2]. apply IH0; auto. ++ apply state_correct_wrt_sign_with_offset_M2 in H1 as [H1_1 H1_2]. apply IH2; auto.", "back_times": 0, "succ": false, "time": 65.0484619140625}]