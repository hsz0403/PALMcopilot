[{"history": {"proof": "intros d sigma H. hauto brefl: on use: umpl_conv_1_correct_wrt_sign_invar, u_conv_1_invar_4, adcnv_ok, u_conv_1_invar_8, adcnv_disj, u_conv_1_invar_2 unfold: predta_correct_wrt_sign. qsimpl time: 1 use: u_conv_1_invar_2. qsimpl time: 1 use: u_conv_1_invar_2.", "repairs": ["", "hammer", "cannot_apply_in", "no_hypos"], "exceptions": [{"ctx": ["intros d sigma H.", "unfold predta_correct_wrt_sign in *.", "intros a s HMap."], "tactic": "apply u_conv_1_invar_2 in HMap as HMapOrig.", "exn": "Unable to apply lemma of type \"forall (d : preDTA) (a : ad) (ladj : state), MapGet state (udta_conv_1 d) (uad_conv_1 a) = Some (umpl_conv_1 ladj) -> MapGet state d a = Some ladj\" on hypothesis of type \"MapGet state (udta_conv_1 d) a = Some s\".", "type": "cannot_apply_in", "handled": true}, {"ctx": ["intros d sigma H.", "unfold predta_correct_wrt_sign in *.", "intros a s HMap.", "qsimpl time: 1 use: u_conv_1_invar_2."], "tactic": "apply H in HMapOrig as HCorrect.", "exn": "No such hypothesis: HMapOrig", "type": "no_hypos", "handled": true}, {"ctx": ["intros d sigma H.", "unfold predta_correct_wrt_sign in *.", "intros a s HMap.", "qsimpl time: 1 use: u_conv_1_invar_2.", "qsimpl time: 1 use: u_conv_1_invar_2."], "tactic": "apply umpl_conv_1_correct_wrt_sign_invar.", "exn": "In environment H1 : forall (d : preDTA) (a : ad) (ladj : state), match uad_conv_1 a with | N.pos (p~1)%positive => MapGet state (udta_conv_1_aux d) (N.pos p) | 1%N => MapGet state (udta_conv_1_aux d) 0%N | _ => None end = Some (umpl_conv_1 ladj) -> MapGet state d a = Some ladj d : preDTA sigma : signature H : forall (a : ad) (s : state), MapGet state d a = Some s -> state_correct_wrt_sign s sigma p : positive s : state HMap : MapGet state (udta_conv_1_aux d) (N.pos p) = Some s a : ad p0 : prec_list Unable to unify \"MapGet prec_list (umpl_conv_1 ?M3960) a = Some p0\" with \"MapGet prec_list s a = Some p0\".", "type": "cannot_unify", "handled": true}]}, "chat": [], "original": "intros d sigma H. unfold predta_correct_wrt_sign in *. intros a s HMap. apply u_conv_1_invar_2 in HMap as HMapOrig. apply H in HMapOrig as HCorrect. apply umpl_conv_1_correct_wrt_sign_invar. auto.", "back_times": 0, "succ": true, "time": 107.90892386436462}]