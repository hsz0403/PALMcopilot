[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": ["intros d0 d1 a0 a1 a s0 s1 s0' s1' t H_mpl_compat H_s0 H_s1 H_s0' H_s1' H_ref_ok H_new_ad.", "split.", "-", "intros [H_rec | H_rec].", "+", "pose proof (u_merge_2 d0 d1 a0 t H_rec) as H_merge_rec."], "tactic": "rewrite H_s0' in H_merge_rec.", "exn": "Found no subterm matching \"MapGet state (u_merge d0 d1) (uad_conv_0 a0)\" in H_merge_rec.", "type": "no_subterm", "handled": true}, {"ctx": ["intros d0 d1 a0 a1 a s0 s1 s0' s1' t H_mpl_compat H_s0 H_s1 H_s0' H_s1' H_ref_ok H_new_ad.", "split.", "-", "intros [H_rec | H_rec].", "+", "pose proof (u_merge_2 d0 d1 a0 t H_rec) as H_merge_rec."], "tactic": "+", "exn": "Wrong bullet +: Current bullet + is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["intros d0 d1 a0 a1 a s0 s1 s0' s1' t H_mpl_compat H_s0 H_s1 H_s0' H_s1' H_ref_ok H_new_ad.", "split.", "-", "intros [H_rec | H_rec].", "+", "pose proof (u_merge_2 d0 d1 a0 t H_rec) as H_merge_rec.", "shelve.", "+", "pose proof (u_merge_3 d0 d1 a1 t H_rec) as H_merge_rec."], "tactic": "rewrite H_s1' in H_merge_rec.", "exn": "Found no subterm matching \"MapGet state (u_merge d0 d1) (uad_conv_1 a1)\" in H_merge_rec.", "type": "no_subterm", "handled": true}, {"ctx": ["intros d0 d1 a0 a1 a s0 s1 s0' s1' t H_mpl_compat H_s0 H_s1 H_s0' H_s1' H_ref_ok H_new_ad.", "split.", "-", "intros [H_rec | H_rec].", "+", "pose proof (u_merge_2 d0 d1 a0 t H_rec) as H_merge_rec.", "shelve.", "+", "pose proof (u_merge_3 d0 d1 a1 t H_rec) as H_merge_rec."], "tactic": "qsimpl time: 1 use: auto,qsimpl,rec_dta,insert_ostate_5.", "exn": "The reference auto was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros d0 d1 a0 a1 a s0 s1 s0' s1' t H_mpl_compat H_s0 H_s1 H_s0' H_s1' H_ref_ok H_new_ad.", "split.", "-", "intros [H_rec | H_rec].", "+", "pose proof (u_merge_2 d0 d1 a0 t H_rec) as H_merge_rec.", "shelve.", "+", "pose proof (u_merge_3 d0 d1 a1 t H_rec) as H_merge_rec."], "tactic": "-", "exn": "Wrong bullet -: Current bullet + is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["intros d0 d1 a0 a1 a s0 s1 s0' s1' t H_mpl_compat H_s0 H_s1 H_s0' H_s1' H_ref_ok H_new_ad.", "split.", "-", "intros [H_rec | H_rec].", "+", "pose proof (u_merge_2 d0 d1 a0 t H_rec) as H_merge_rec.", "shelve.", "+", "pose proof (u_merge_3 d0 d1 a1 t H_rec) as H_merge_rec.", "shelve.", "-", "intros H_ins_rec."], "tactic": "apply rec_dta in H_ins_rec as [ladj H_ladj H_st].", "exn": "Unable to apply lemma of type \"forall (d : preDTA) (a : ad) (t : term) (ladj : state), MapGet state d a = Some ladj -> state_reconnait d ladj t -> reconnaissance d a t\" on hypothesis of type \"reconnaissance (insert_ostate (u_merge d0 d1) a (Some (union_mpl s0' s1'))) a t\".", "type": "cannot_apply_in", "handled": true}, {"ctx": ["intros d0 d1 a0 a1 a s0 s1 s0' s1' t H_mpl_compat H_s0 H_s1 H_s0' H_s1' H_ref_ok H_new_ad.", "split.", "-", "intros [H_rec | H_rec].", "+", "pose proof (u_merge_2 d0 d1 a0 t H_rec) as H_merge_rec.", "shelve.", "+", "pose proof (u_merge_3 d0 d1 a1 t H_rec) as H_merge_rec.", "shelve.", "-", "intros H_ins_rec."], "tactic": "qsimpl time: 1 use: auto,qsimpl,rec_dta,insert_ostate_5.", "exn": "The reference auto was not found in the current environment.", "type": "ref_not_found", "handled": true}]}, "chat": [], "original": "intros d0 d1 a0 a1 a s0 s1 s0' s1' t H_mpl_compat H_s0 H_s1 H_s0' H_s1' H_ref_ok H_new_ad. split. - intros [H_rec | H_rec]. + pose proof (u_merge_2 d0 d1 a0 t H_rec) as H_merge_rec. rewrite H_s0' in H_merge_rec. apply rec_dta with (ladj := s0'). auto. apply insert_ostate_5 with (s0' := s0') (s1' := s1'); auto. + pose proof (u_merge_3 d0 d1 a1 t H_rec) as H_merge_rec. rewrite H_s1' in H_merge_rec. apply rec_dta with (ladj := s1'). auto. apply insert_ostate_5 with (s0' := s0') (s1' := s1'); auto. - intros H_ins_rec. apply rec_dta in H_ins_rec as [ladj H_ladj H_st]. pose proof (insert_ostate_7 d0 d1 a0 a1 a s0 s1 s0' s1' t H_mpl_compat H_s0 H_s1 H_s0' H_s1' H_ref_ok H_ladj H_st) as [H_rec | H_rec]. + left. apply u_merge_4 with (d1 := d1). apply H_rec. rewrite H_s0'. reflexivity. + right. apply u_merge_5 with (d0 := d0). apply H_rec. rewrite H_s1'. reflexivity.", "back_times": 0, "succ": false, "time": 157.126070022583}]