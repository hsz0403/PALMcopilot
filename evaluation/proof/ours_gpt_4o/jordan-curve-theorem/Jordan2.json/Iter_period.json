[{"history": {"proof": "intros m z i n Hmap Hexd. qsimpl time: 1 use: Iter_plus_mult. unfold Iter_upb. remember (ndN m - card (Iter_rem m z))%nat as p. assert (Hp: Iter (f m) p z = z). - qsimpl time: 1 use: Iter_plus_mult,Iter_upb_period. - auto.", "repairs": ["", "not_evaluable", "", "", "", "", "cannot_unify", "wrong_bullet", ""], "exceptions": [{"ctx": ["intros m z i n Hmap Hexd."], "tactic": "unfold Iter_plus_mult.", "exn": "Cannot coerce Iter_plus_mult to an evaluable reference.", "type": "not_evaluable", "handled": true}, {"ctx": ["intros m z i n Hmap Hexd.", "qsimpl time: 1 use: Iter_plus_mult.", "unfold Iter_upb.", "remember (ndN m - card (Iter_rem m z))%nat as p.", "assert (Hp: Iter (f m) p z = z).", "-"], "tactic": "apply Iter_upb_period.", "exn": "In environment H : forall (m : fmap) (z : dart) (n p i : nat), inv_hmap m -> exd m z -> Iter (f m) p z = z -> Iter (f m) (i + n * p) z = Iter (f m) i z m : fmap z : dart i, n : nat Hmap : inv_hmap m Hexd : exd m z p : nat Heqp : p = (ndN m - card (Iter_rem m z))%nat Unable to unify \"Iter (f ?M2584) (Iter_upb ?M2584 ?M2585) ?M2585 = ?M2585\" with \"Iter (f m) p z = z\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros m z i n Hmap Hexd.", "qsimpl time: 1 use: Iter_plus_mult.", "unfold Iter_upb.", "remember (ndN m - card (Iter_rem m z))%nat as p.", "assert (Hp: Iter (f m) p z = z).", "-", "qsimpl time: 1 use: Iter_plus_mult,Iter_upb_period."], "tactic": "--", "exn": "Wrong bullet --: Expecting -.", "type": "wrong_bullet", "handled": true}, {"ctx": ["intros m z i n Hmap Hexd.", "qsimpl time: 1 use: Iter_plus_mult.", "unfold Iter_upb.", "remember (ndN m - card (Iter_rem m z))%nat as p.", "assert (Hp: Iter (f m) p z = z).", "-", "qsimpl time: 1 use: Iter_plus_mult,Iter_upb_period.", "-", "auto."], "tactic": "--", "exn": "Wrong bullet --: No more subgoals.", "type": "no_more_subgoals", "handled": true}]}, "chat": [], "original": "intros m z i n Hmap Hexd. unfold Iter_plus_mult. unfold Iter_upb. remember (ndN m - card (Iter_rem m z))%nat as p. assert (Hp: Iter (f m) p z = z). - apply Iter_upb_period. -- auto. -- auto. apply Iter_mult with (n := n) (p := p) (z := z) in Hp; try auto. rewrite <- Iter_comp. rewrite Hp. rewrite Iter_comp. assert (Hs: Iter (f m) i (Iter (f m) p z) = Iter (f m) i z). - rewrite Hp. auto. rewrite Hs. reflexivity.", "back_times": 0, "succ": true, "time": 1.1533920764923096}]