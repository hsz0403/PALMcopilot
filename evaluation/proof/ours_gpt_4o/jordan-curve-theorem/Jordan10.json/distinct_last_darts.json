[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": ["intros m l x x' xf xf' Hinv Hdouble Hpr.", "destruct l as [|d d' l].", "-", "simpl."], "tactic": "-", "exn": "Wrong bullet -: Current bullet - is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["intros m l x x' xf xf' Hinv Hdouble Hpr.", "destruct l as [|d d' l].", "-", "simpl.", "shelve.", "-", "simpl in *.", "destruct (last (cons xf xf' (cons d d' l))) as [xl xl'].", "destruct Hpr as [Hpr0 Hdist].", "inversion Hdouble as [[Hdlxd Hdbl]]."], "tactic": ["destruct Hdlxd as [Hneq Hexd].", ""], "exn": "Expects a disjunctive pattern with 0 branches.", "type": "num_branch", "handled": false}]}, "chat": [], "original": "intros m l x x' xf xf' Hinv Hdouble Hpr. destruct l as [|d d' l]. - simpl. split; discriminate. - simpl in *. destruct (last (cons xf xf' (cons d d' l))) as [xl xl']. destruct Hpr as [Hpr0 Hdist]. inversion Hdouble as [[Hdlxd Hdbl]]. unfold double_link in Hdlxd. destruct Hdlxd as [Hneq Hexd]. split. + intro Heq. apply Hneq. subst. reflexivity. + intro Heq. inversion Hdist as [Hd Hdiff]. unfold distinct_edge_list in Hd. destruct Hd as [Hdx Hlst]. apply Hdx. subst. reflexivity.", "back_times": 0, "succ": false, "time": 280.3027105331421}]