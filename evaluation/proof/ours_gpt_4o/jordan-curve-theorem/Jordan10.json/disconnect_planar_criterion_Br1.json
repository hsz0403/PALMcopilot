[{"history": {"proof": "", "repairs": [], "exceptions": []}, "chat": [], "original": "intros m x x' Hinv Hplan Hdl. assert (Hneq: x <> x'). { destruct Hdl as [Hneq _]. apply Hneq. } rewrite <- double_link_comm in Hdl. unfold expf in *. rewrite cA0_Br1 with (z := x); try auto. rewrite cA0_Br1 with (z := x'); try auto. split. - intros [H1 H2]. rewrite <- disconnect_planar_criterion_B0 with (m:=m) (x:=x'); try auto. rewrite <- disconnect_planar_criterion_B0 with (m:=m) (x:=x); try auto. rewrite Br1; simpl. assert (Hsucc: succ m zero x \\/ succ m zero x'). { apply double_link_succ with (1:=Hinv) (2:=Hdl). } destruct Hsucc as [Hsucc | Hsucc]; simpl. + split. * rewrite <- expf_not_expf_B0; try auto. apply expf_not_expf_B0 with (m:=B m zero x') (x:=x) in H1; try auto. intro. apply H1. auto. * intro Heqc. apply H1. apply expf_x0_x_1 with (m:=m); try auto. destruct Hdl as [_ Hdl]. apply exd_Br1; auto. + rewrite <- expf_not_expf_B0 with (x:=x); try auto. rewrite <- expf_not_expf_B0 with (x:=x'); try auto. intro. apply H1. apply expf_x0_x_1 with (m:=m); try auto. destruct Hdl as [_ Hdl]. apply exd_Br1; auto. - intros H3. split. + apply inv_hmap_Br1; try auto. + destruct H3 as [H3| H3]. * apply expf_not_expf_L0_CN with (x:=x) (y:=x') (t:=cA_1 m one x') in H3; try auto. destruct Hdl as [_ Hdl]. apply exd_Br1; auto. * apply not_expf_expf_L0_CN with (x:=x) (y:=x') (t:=cA_1 m one x') in H3; try auto. destruct Hdl as [_ Hdl]. apply exd_Br1; auto.", "back_times": 0, "succ": false, "time": 104.82769703865051}]