[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": ["intros m k x Hmap Hsucc.", "set (m0 := B m k x).", "set (m1 := L m0 k x (A m k x)).", "assert (Hnc_m0 : nc m0 = nc m + (if eqc_dec m0 x (A m k x) then 0 else 1)).", "apply nc_B.", "auto.", "auto.", "assert (Hnc_m1 : nc m1 = nc m)."], "tactic": "rewrite <- Hnc_m0.", "exn": "Found no subterm matching \"nc m + (if eqc_dec m0 x (A m k x) then 0 else 1)\" in the current goal.", "type": "no_subterm", "handled": true}]}, "chat": [], "original": "intros m k x Hmap Hsucc. set (m0 := B m k x). set (m1 := L m0 k x (A m k x)). assert (Hnc_m0 : nc m0 = nc m + (if eqc_dec m0 x (A m k x) then 0 else 1)). { apply nc_B. auto. auto. } assert (Hnc_m1 : nc m1 = nc m). { rewrite <- Hnc_m0. apply nc_L_B. auto. auto. } unfold m0 in Hnc_m0. set (m3 := L m0 k (top m k x) (bottom m k x)). assert (Hinv_m3 : inv_hmap m3). { apply inv_hmap_L_B_top_bot. auto. auto. } assert (Heqc1 : eqc m0 x (A m k x)). { apply eqc_B_CS with (m := m) (k := k) (x := x). auto. auto. left. apply eqc_B_top. auto. auto. } unfold m1 at 1 in Hnc_m1. rewrite Heqc1 in Hnc_m1. assert (Htop_bot : top m k x = bottom m k x). { apply eqc_B_bottom. auto. apply eqc_eqc_B with (m := m) (k := k) (x := x). auto. auto. auto. } unfold m3. subst m1. rewrite Htop_bot. auto.", "back_times": 0, "succ": false, "time": 369.358359336853}]