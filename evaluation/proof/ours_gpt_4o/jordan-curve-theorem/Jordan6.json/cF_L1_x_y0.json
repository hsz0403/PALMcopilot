[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": ["intros m x y i j HinvHmap HprecL HeqY0 Hexpf Hrange.", "generalize Hexpf."], "tactic": ["intros [HinvHmap' Hexpof].", ""], "exn": "Expects a disjunctive pattern with 2 branches.", "type": "num_branch", "handled": false}]}, "chat": [], "original": "intros m x y i j HinvHmap HprecL HeqY0 Hexpf Hrange. generalize Hexpf. intros [HinvHmap' Hexpof]. assert (Hneq: ~ expf m x (cA m zero y)). { assert (Hinvm1: inv_hmap (L m one x y)) by (split; auto). assert (Hexd: exd m (cA m zero y)) by now apply exd_cA. apply expf_L1_x_y0 in Hinvm1 as [Hexpfx]. auto. } case (lt_dec i (MF.degree m x)); intro Hcase. - now apply cF_L1_x_x10; auto. - apply Iter_cF_L1_i; try auto. + now apply lt_not_le in Hcase. + split; [auto|]. now apply expf_L1_x_y0.", "back_times": 0, "succ": false, "time": 126.09846925735474}]