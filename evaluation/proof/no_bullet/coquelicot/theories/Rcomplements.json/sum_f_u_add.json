[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": [], "tactic": "intros u m n p H.", "exn": "u is already used.", "type": "used_var", "handled": true}, {"ctx": [], "tactic": "intros u' m n p H.", "exn": "m is already used.", "type": "used_var", "handled": true}, {"ctx": [], "tactic": "intros u' m' n p H.", "exn": "n is already used.", "type": "used_var", "handled": true}, {"ctx": [], "tactic": "intros u' m' n' p H.", "exn": "p is already used.", "type": "used_var", "handled": true}, {"ctx": [], "tactic": "intros u' m' n' p' H.", "exn": "No product even after head-reduction.", "type": "no_product", "handled": true}, {"ctx": ["intros.", "revert n H.", "induction m as [|m IHm]; intros n H.", "-", "simpl."], "tactic": "reflexivity.", "exn": "In environment u : nat -> R p, n : nat H : (n <= 0)%nat Unable to unify \"sum_f n 0 (fun k : nat => u (k + p)%nat)\" with \"sum_f (n + p) p u\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros.", "revert n H.", "induction m as [|m IHm]; intros n H.", "-", "simpl."], "tactic": "-", "exn": "Wrong bullet -: Current bullet - is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["intros.", "revert n H.", "induction m as [|m IHm]; intros n H.", "-", "simpl.", "shelve.", "-", "destruct n as [|n].", "+", "simpl.", "rewrite sum_f_rw_0."], "tactic": "reflexivity.", "exn": "In environment u : nat -> R p, m : nat IHm : forall n : nat, (n <= m)%nat -> sum_f (n + p) (m + p) u = sum_f n m (fun k : nat => u (k + p)%nat) H : (0 <= S m)%nat Unable to unify \"sum_f_R0 (fun k : nat => u (k + p)%nat) (S m)\" with \"sum_f p (S (m + p)) u\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros.", "revert n H.", "induction m as [|m IHm]; intros n H.", "-", "simpl.", "shelve.", "-", "destruct n as [|n].", "+", "simpl.", "rewrite sum_f_rw_0."], "tactic": "+", "exn": "Wrong bullet +: Current bullet + is not finished.", "type": "unfinished_bullet", "handled": true}]}, "chat": [], "original": "intros u m n p H. revert n H. induction m as [|m IHm]; intros n H. - simpl. reflexivity. - destruct n as [|n]. + simpl. rewrite sum_f_rw_0. reflexivity. + apply le_plus_minus in H. rewrite H.", "succ": false}]