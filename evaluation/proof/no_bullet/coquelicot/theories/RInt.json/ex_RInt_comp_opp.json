[{"history": {"proof": "intros f a b H. unfold ex_RInt in H. destruct H as [If H]. qsimpl use: opp,ex_RInt_ext. - apply is_RInt_comp_opp in H. qsimpl use: opp,ex_RInt_ext. sauto depth: 3. - qsimpl use: opp,Ropp_involutive,ex_RInt_ext. + sauto depth: 3. + sauto depth: 3.", "repairs": ["", "", "", "cannot_apply_in", "", "ref_not_found", "cannot_unify", "hammer", "", "no_match_term", "", "hammer", "", "hammer"], "exceptions": [{"ctx": ["intros f a b H.", "unfold ex_RInt in H.", "destruct H as [If H]."], "tactic": "apply ex_RInt_ext with (g:= fun y => opp (f (- y))) in H.", "exn": "Unable to apply lemma of type \"forall (f g : R -> V) (a b : R), (forall x : R, Rmin a b < x < Rmax a b -> f x = g x) -> ex_RInt f a b -> ex_RInt g a b\" on hypothesis of type \"is_RInt f (- a) (- b) If\".", "type": "cannot_apply_in", "handled": true}, {"ctx": ["intros f a b H.", "unfold ex_RInt in H.", "destruct H as [If H].", "qsimpl use: opp,ex_RInt_ext.", "-"], "tactic": "apply ex_RInt_comp_opp in H.", "exn": "The reference ex_RInt_comp_opp was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros f a b H.", "unfold ex_RInt in H.", "destruct H as [If H].", "qsimpl use: opp,ex_RInt_ext.", "-", "apply is_RInt_comp_opp in H."], "tactic": "apply H.", "exn": "In environment V : NormedModule R_AbsRing H0 : forall (f g : R -> V) (a b : R), (forall x : R, Rmin a b < x < Rmax a b -> f x = g x) -> ex_RInt f a b -> ex_RInt g a b f : R -> V a, b : R If : V H : is_RInt (fun y : R => opp (f (- y))) a b If Unable to unify \"is_RInt (fun y : R => opp (f (- y))) a b If\" with \"ex_RInt (fun y : R => opp (f (- y))) a b\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros f a b H.", "unfold ex_RInt in H.", "destruct H as [If H].", "qsimpl use: opp,ex_RInt_ext.", "-", "apply is_RInt_comp_opp in H.", "qsimpl use: opp,ex_RInt_ext."], "tactic": "-", "exn": "Wrong bullet -: Current bullet - is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["intros f a b H.", "unfold ex_RInt in H.", "destruct H as [If H].", "qsimpl use: opp,ex_RInt_ext.", "-", "apply is_RInt_comp_opp in H.", "qsimpl use: opp,ex_RInt_ext.", "shelve.", "-"], "tactic": "intros x Hx.", "exn": "No product even after head-reduction.", "type": "no_product", "handled": true}, {"ctx": ["intros f a b H.", "unfold ex_RInt in H.", "destruct H as [If H].", "qsimpl use: opp,ex_RInt_ext.", "-", "apply is_RInt_comp_opp in H.", "qsimpl use: opp,ex_RInt_ext.", "shelve.", "-"], "tactic": "rewrite Ropp_involutive.", "exn": "The LHS of Ropp_involutive (- - _) does not match any subterm of the goal", "type": "no_match_term", "handled": true}, {"ctx": ["intros f a b H.", "unfold ex_RInt in H.", "destruct H as [If H].", "qsimpl use: opp,ex_RInt_ext.", "-", "apply is_RInt_comp_opp in H.", "qsimpl use: opp,ex_RInt_ext.", "shelve.", "-", "qsimpl use: opp,Ropp_involutive,ex_RInt_ext."], "tactic": "reflexivity.", "exn": "Cannot find a relation to rewrite.", "type": "no_rewrite_relation", "handled": true}]}, "chat": [], "original": "intros f a b H. unfold ex_RInt in H. destruct H as [If H]. apply ex_RInt_ext with (g:= fun y => opp (f (- y))) in H. - apply ex_RInt_comp_opp in H. apply H. - intros x Hx. unfold opp. rewrite Ropp_involutive. reflexivity.", "succ": true}]