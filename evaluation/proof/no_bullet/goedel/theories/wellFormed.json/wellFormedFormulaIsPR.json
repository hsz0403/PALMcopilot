[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": ["unfold isPR."], "tactic": "intros n' t.", "exn": "No product even after head-reduction.", "type": "no_product", "handled": true}, {"ctx": ["unfold isPR."], "tactic": "pose proof (Formula_depth_ind2 L (fun f => isPR 1 f) codeArityFIsPR codeArityRIsPR) as H.", "exn": "In environment L : Language codeF : Functions L -> nat codeArityF : nat -> nat codeArityFIsPR : isPR 1 codeArityF codeArityFIsCorrect1 : forall f : Functions L, codeArityF (codeF f) = S (arity L (inr f)) codeArityFIsCorrect2 : forall n : nat, codeArityF n <> 0 -> exists f : Functions L, codeF f = n Term := fol.Term L : Set Terms := fol.Terms L : nat -> Set var := fol.var L : nat -> fol.Term L apply := fol.apply L : forall f : Functions L, fol.Terms L (arity L (inr f)) -> fol.Term L codeR : Relations L -> nat codeArityR : nat -> nat codeArityRIsPR : isPR 1 codeArityR codeArityRIsCorrect1 : forall r : Relations L, codeArityR (codeR r) = S (arity L (inl r)) codeArityRIsCorrect2 : forall n : nat, codeArityR n <> 0 -> exists r : Relations L, codeR r = n Formula := fol.Formula L : Set equal := fol.equal L : fol.Term L -> fol.Term L -> fol.Formula L atomic := fol.atomic L : forall r : Relations L, fol.Terms L (arity L (inl r)) -> fol.Formula L impH := fol.impH L : fol.Formula L -> fol.Formula L -> fol.Formula L notH := fol.notH L : fol.Formula L -> fol.Formula L forallH := fol.forallH L : nat -> fol.Formula L -> fol.Formula L f : fol.Formula L The term \"f\" has type \"fol.Formula L\" while it is expected to have type \"naryFunc 1\".", "type": "wrong_type", "handled": true}]}, "chat": [], "original": "intros. unfold isPR. intros n' t. pose proof (Formula_depth_ind2 L (fun f => isPR 1 f) codeArityFIsPR codeArityRIsPR) as H. apply H; clear H. - intros t0 t1. auto. - intros r t0. auto. - intros f IHf g IHg. unfold isPR in IHf, IHg. auto. - intros f IHf. unfold isPR in IHf. auto. - intros v a IH. unfold isPR in IH. auto.", "succ": false}]