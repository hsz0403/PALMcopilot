[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": ["intros l f p.", "unfold checkPrf."], "tactic": "rewrite codeList_map.", "exn": "The reference codeList_map was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros l f p.", "unfold checkPrf."], "tactic": "reflexivity.", "exn": "In environment L : Language codeF : Functions L -> nat codeR : Relations L -> nat codeArityF, codeArityR : nat -> nat codeArityFIsPR : isPR 1 codeArityF codeArityFIsCorrect1 : forall f : Functions L, codeArityF (codeF f) = S (arity L (inr f)) codeArityFIsCorrect2 : forall n : nat, codeArityF n <> 0 -> exists f : Functions L, codeF f = n codeArityRIsPR : isPR 1 codeArityR codeArityRIsCorrect1 : forall r : Relations L, codeArityR (codeR r) = S (arity L (inl r)) codeArityRIsCorrect2 : forall n : nat, codeArityR n <> 0 -> exists r : Relations L, codeR r = n codeFInj : forall f g : Functions L, codeF f = codeF g -> f = g codeRInj : forall R S : Relations L, codeR R = codeR S -> R = S Term := fol.Term L : Set Terms := fol.Terms L : nat -> Set var := fol.var L : nat -> fol.Term L apply := fol.apply L : forall f : Functions L, fol.Terms L (arity L (inr f)) -> fol.Term L Formula := fol.Formula L : Set equal := fol.equal L : fol.Term L -> fol.Term L -> fol.Formula L atomic := fol.atomic L : forall r : Relations L, fol.Terms L (arity L (inl r)) -> fol.Formula L impH := fol.impH L : fol.Formula L -> fol.Formula L -> fol.Formula L notH := fol.notH L : fol.Formula L -> fol.Formula L forallH := fol.forallH L : nat -> fol.Formula L -> fol.Formula L wellFormedTerm := wellFormed.wellFormedTerm codeArityF : nat -> nat wellFormedFormula := wellFormed.wellFormedFormula codeArityF codeArityR : nat -> nat Prf := folProof.Prf L : Formulas L -> fol.Formula L -> Set l : list Formula f : Formula p : Prf l f Unable to unify \"S (codeList (map (codeFormula L codeF codeR) l))\" with \"switchPR (wellFormedFormula (codeFormula L codeF codeR f)) (checkPrfHelp (cPair (codeFormula L codeF codeR f) (codePrf L codeF codeR l f p))) 0\".", "type": "cannot_unify", "handled": true}]}, "chat": [], "original": "intros l f p. unfold checkPrf. simpl. rewrite codeList_map. reflexivity.", "succ": false}]