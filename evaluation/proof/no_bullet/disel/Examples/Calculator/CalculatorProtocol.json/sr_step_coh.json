[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": ["unfold r_step_coh_t."], "tactic": "apply network_step_sind.", "exn": "In environment f : input -> option nat prec : input -> bool prec_valid : forall i : input, prec i -> exists v : nat, f i = Some v cs, cls : seq nid Huniq : uniq nodes Unable to unify \"Prop\" with \"SProp\".", "type": "cannot_unify", "handled": true}, {"ctx": ["unfold r_step_coh_t.", "qsimpl use: network_step_sind."], "tactic": "apply ReceiveMsg.", "exn": "In environment H : forall (w : world) (this : nid) (s1 s2 : state) (P : SProp), (s1 \\\\In Coh w /\\\\ s1 = s2 -> P) -> (forall (l : nat) (st : send_trans (Protocols.coh (getProtocol w l))), st \\\\In get_st w l -> forall (to : nid) (msg0 : seq nat) (b : heap), this \\\\in Protocols.Exports.nodes (getProtocol w l) (getStatelet s1 l) -> l \\\\in dom s1 -> Coh w s1 -> forall S : send_safe st this to (getStatelet s1 l) msg0, all_hooks_fire w l (t_snd st) s1 this msg0 to -> Some b = send_step S -> s2 = upd l {| dstate := upd this b (dstate (getStatelet s1 l)); dsoup := dsoup (getStatelet s1 l) \\\\+ fresh (dsoup (getStatelet s1 l)) \\\\\\\\-> {| content := {| tag := t_snd st; tms_cont := msg0 |}; from := this; to := to; active := true |} |} s1 -> P) -> (forall (l : nat) (rt : receive_trans (Protocols.coh (getProtocol w l))), rt \\\\In get_rt w l -> forall (i from : nat) (pf : this \\\\in Protocols.Exports.nodes (getProtocol w l) (getStatelet s1 l)), l \\\\in dom s1 -> forall (C : Coh w s1) (msg0 : TaggedMessage), tag msg0 = t_rcv rt -> [/\\\\ find i (dsoup (getStatelet s1 l)) = Some {| content := msg0; from := from; to := this; active := true |}, msg_wf rt (coh_s l C) this from msg0 & s2 = upd l {| dstate := upd this (receive_step rt from msg0 (coh_s l C) pf) (dstate (getStatelet s1 l)); dsoup := consume_msg (dsoup (getStatelet s1 l)) i |} s1] -> P) -> network_step w this s1 s2 -> P f : input -> option nat prec : input -> bool prec_valid : forall i : input, prec i -> exists v : nat, f i = Some v cs, cls : seq nid Huniq : uniq nodes Unable to unify \"network_step ?M3184 ?M3185 ?M3186 ?M3187\" with \"forall (d : dstatelet) (from : nat) (this : nid) (i : mid) (C : coh d) (pf' : this \\\\in (fun=> [eta mem_seq nodes]) d) (m : TaggedMessage), this \\\\in dom (dstate d) -> find i (dsoup d) = Some {| content := m; from := from; to := this; active := true |} -> (fun (d0 : dstatelet) (x : calcoh d0) (this0 from0 : nid) (msg : TaggedMessage) => sr_wf x this0 from0 msg) d C this from m -> tag m = req -> coh {| dstate := upd this (sr_step from m C pf') (dstate d); dsoup := consume_msg (dsoup d) i |}\".", "type": "cannot_unify", "handled": true}, {"ctx": ["unfold r_step_coh_t.", "qsimpl use: network_step_sind.", "qsimpl use: ReceiveMsg,network_step_sind."], "tactic": "unfold pcm.", "exn": "Cannot coerce PCM.type to an evaluable reference.", "type": "not_evaluable", "handled": true}, {"ctx": ["unfold r_step_coh_t.", "qsimpl use: network_step_sind.", "qsimpl use: ReceiveMsg,network_step_sind.", "qsimpl use: ReceiveMsg,network_step_sind,pcm."], "tactic": "rewrite trans_updDom.", "exn": "The LHS of trans_updDom (_ \\\\in dom (upd _ _ (dstate _))) does not match any subterm of the goal", "type": "no_match_term", "handled": true}, {"ctx": ["unfold r_step_coh_t.", "qsimpl use: network_step_sind.", "qsimpl use: ReceiveMsg,network_step_sind.", "qsimpl use: ReceiveMsg,network_step_sind,pcm.", "qsimpl use: ReceiveMsg,trans_updDom,network_step_sind,pcm."], "tactic": "unfold prot.", "exn": "The reference prot was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["unfold r_step_coh_t.", "qsimpl use: network_step_sind.", "qsimpl use: ReceiveMsg,network_step_sind.", "qsimpl use: ReceiveMsg,network_step_sind,pcm.", "qsimpl use: ReceiveMsg,trans_updDom,network_step_sind,pcm."], "tactic": "apply H0.", "exn": "In environment H5 : forall (w : world) (this : nid) (s1 s2 : state) (P : SProp), (s1 \\\\In Coh w /\\\\ s1 = s2 -> P) -> (forall (l : nat) (st : send_trans (Protocols.coh (getProtocol w l))), st \\\\In get_st w l -> forall (to : nid) (msg0 : seq nat) (b : heap), this \\\\in Protocols.Exports.nodes (getProtocol w l) (getStatelet s1 l) -> l \\\\in dom s1 -> Coh w s1 -> forall S : send_safe st this to (getStatelet s1 l) msg0, all_hooks_fire w l (t_snd st) s1 this msg0 to -> Some b = send_step S -> s2 = upd l {| dstate := upd this b (dstate (getStatelet s1 l)); dsoup := dsoup (getStatelet s1 l) \\\\+ fresh (dsoup (getStatelet s1 l)) \\\\\\\\-> {| content := {| tag := t_snd st; tms_cont := msg0 |}; from := this; to := to; active := true |} |} s1 -> P) -> (forall (l : nat) (rt : receive_trans (Protocols.coh (getProtocol w l))), rt \\\\In get_rt w l -> forall (i from : nat) (pf : this \\\\in Protocols.Exports.nodes (getProtocol w l) (getStatelet s1 l)), l \\\\in dom s1 -> forall (C : Coh w s1) (msg0 : TaggedMessage), tag msg0 = t_rcv rt -> [/\\\\ find i (dsoup (getStatelet s1 l)) = Some {| content := msg0; from := from; to := this; active := true |}, msg_wf rt (coh_s l C) this from msg0 & s2 = upd l {| dstate := upd this (receive_step rt from msg0 (coh_s l C) pf) (dstate (getStatelet s1 l)); dsoup := consume_msg (dsoup (getStatelet s1 l)) i |} s1] -> P) -> network_step w this s1 s2 -> P prec : input -> bool cs, cls : seq nid H4 : forall (this : nat) (d : dstatelet) (s : heap), this \\\\in nodes -> calcoh d -> dom (upd this s (dstate d)) =i nodes H0 : forall (w : world) (this : nid) (s1 s2 : state) (l : nat) (rt : receive_trans (Protocols.coh (getProtocol w l))), rt \\\\In get_rt w l -> forall (i from : nat) (pf : this \\\\in Protocols.Exports.nodes (getProtocol w l) (getStatelet s1 l)), l \\\\in dom s1 -> forall (C : Coh w s1) (msg0 : TaggedMessage), tag msg0 = t_rcv rt -> [/\\\\ find i (dsoup (getStatelet s1 l)) = Some {| content := msg0; from := from; to := this; active := true |}, msg_wf rt (coh_s l C) this from msg0 & s2 = upd l {| dstate := upd this (receive_step rt from msg0 (coh_s l C) pf) (dstate (getStatelet s1 l)); dsoup := consume_msg (dsoup (getStatelet s1 l)) i |} s1] -> network_step w this s1 s2 H3, H1, H : forall (w : world) (this : nid) (s1 s2 : state) (P : SProp), (s1 \\\\In Coh w /\\\\ s1 = s2 -> P) -> (forall (l : nat) (st : send_trans (Protocols.coh (getProtocol w l))), st \\\\In get_st w l -> forall (to : nid) (msg0 : seq nat) (b : heap), this \\\\in Protocols.Exports.nodes (getProtocol w l) (getStatelet s1 l) -> l \\\\in dom s1 -> Coh w s1 -> forall S : send_safe st this to (getStatelet s1 l) msg0, all_hooks_fire w l (t_snd st) s1 this msg0 to -> Some b = send_step S -> s2 = upd l {| dstate := upd this b (dstate (getStatelet s1 l)); dsoup := dsoup (getStatelet s1 l) \\\\+ fresh (dsoup (getStatelet s1 l)) \\\\\\\\-> {| content := {| tag := t_snd st; tms_cont := msg0 |}; from := this; to := to; active := true |} |} s1 -> P) -> (forall (l : nat) (rt : receive_trans (Protocols.coh (getProtocol w l))), rt \\\\In get_rt w l -> forall (i from : nat) (pf : this \\\\in Protocols.Exports.nodes (getProtocol w l) (getStatelet s1 l)), l \\\\in dom s1 -> forall (C : Coh w s1) (msg0 : TaggedMessage), tag msg0 = t_rcv rt -> [/\\\\ find i (dsoup (getStatelet s1 l)) = Some {| content := msg0; from := from; to := this; active := true |}, msg_wf rt (coh_s l C) this from msg0 & s2 = upd l {| dstate := upd this (receive_step rt from msg0 (coh_s l C) pf) (dstate (getStatelet s1 l)); dsoup := consume_msg (dsoup (getStatelet s1 l)) i |} s1] -> P) -> network_step w this s1 s2 -> P f : input -> option nat prec_valid : forall i : input, prec i -> exists v : nat, f i = Some v Huniq : uniq nodes Unable to unify \"network_step ?M17914 ?M17915 ?M17916 ?M17917\" with \"forall (d : dstatelet) (from : nat) (this : nid) (i : mid) (C : coh d) (pf' : this \\\\in (fun=> [eta mem_seq nodes]) d) (m : TaggedMessage), this \\\\in dom (dstate d) -> find i (dsoup d) = Some {| content := m; from := from; to := this; active := true |} -> (fun (d0 : dstatelet) (x : calcoh d0) (this0 from0 : nid) (msg : TaggedMessage) => sr_wf x this0 from0 msg) d C this from m -> tag m = req -> coh {| dstate := upd this (sr_step from m C pf') (dstate d); dsoup := consume_msg (dsoup d) i |}\".", "type": "cannot_unify", "handled": true}, {"ctx": ["unfold r_step_coh_t.", "qsimpl use: network_step_sind.", "qsimpl use: ReceiveMsg,network_step_sind.", "qsimpl use: ReceiveMsg,network_step_sind,pcm.", "qsimpl use: ReceiveMsg,trans_updDom,network_step_sind,pcm.", "qsimpl use: ReceiveMsg,trans_updDom,network_step_sind,pcm."], "tactic": "apply Huniq.", "exn": "In environment H7 : forall (w : world) (this : nid) (s1 s2 : state) (P : SProp), (s1 \\\\In Coh w /\\\\ s1 = s2 -> P) -> (forall (l : nat) (st : send_trans (Protocols.coh (getProtocol w l))), st \\\\In get_st w l -> forall (to : nid) (msg0 : seq nat) (b : heap), this \\\\in Protocols.Exports.nodes (getProtocol w l) (getStatelet s1 l) -> l \\\\in dom s1 -> Coh w s1 -> forall S : send_safe st this to (getStatelet s1 l) msg0, all_hooks_fire w l (t_snd st) s1 this msg0 to -> Some b = send_step S -> s2 = upd l {| dstate := upd this b (dstate (getStatelet s1 l)); dsoup := dsoup (getStatelet s1 l) \\\\+ fresh (dsoup (getStatelet s1 l)) \\\\\\\\-> {| content := {| tag := t_snd st; tms_cont := msg0 |}; from := this; to := to; active := true |} |} s1 -> P) -> (forall (l : nat) (rt : receive_trans (Protocols.coh (getProtocol w l))), rt \\\\In get_rt w l -> forall (i from : nat) (pf : this \\\\in Protocols.Exports.nodes (getProtocol w l) (getStatelet s1 l)), l \\\\in dom s1 -> forall (C : Coh w s1) (msg0 : TaggedMessage), tag msg0 = t_rcv rt -> [/\\\\ find i (dsoup (getStatelet s1 l)) = Some {| content := msg0; from := from; to := this; active := true |}, msg_wf rt (coh_s l C) this from msg0 & s2 = upd l {| dstate := upd this (receive_step rt from msg0 (coh_s l C) pf) (dstate (getStatelet s1 l)); dsoup := consume_msg (dsoup (getStatelet s1 l)) i |} s1] -> P) -> network_step w this s1 s2 -> P prec : input -> bool cs, cls : seq nid H6 : forall (this : nat) (d : dstatelet) (s : heap), this \\\\in nodes -> calcoh d -> dom (upd this s (dstate d)) =i nodes H2 : forall (w : world) (this : nid) (s1 s2 : state) (l : nat) (rt : receive_trans (Protocols.coh (getProtocol w l))), rt \\\\In get_rt w l -> forall (i from : nat) (pf : this \\\\in Protocols.Exports.nodes (getProtocol w l) (getStatelet s1 l)), l \\\\in dom s1 -> forall (C : Coh w s1) (msg0 : TaggedMessage), tag msg0 = t_rcv rt -> [/\\\\ find i (dsoup (getStatelet s1 l)) = Some {| content := msg0; from := from; to := this; active := true |}, msg_wf rt (coh_s l C) this from msg0 & s2 = upd l {| dstate := upd this (receive_step rt from msg0 (coh_s l C) pf) (dstate (getStatelet s1 l)); dsoup := consume_msg (dsoup (getStatelet s1 l)) i |} s1] -> network_step w this s1 s2 H5, H3, H1, H : forall (w : world) (this : nid) (s1 s2 : state) (P : SProp), (s1 \\\\In Coh w /\\\\ s1 = s2 -> P) -> (forall (l : nat) (st : send_trans (Protocols.coh (getProtocol w l))), st \\\\In get_st w l -> forall (to : nid) (msg0 : seq nat) (b : heap), this \\\\in Protocols.Exports.nodes (getProtocol w l) (getStatelet s1 l) -> l \\\\in dom s1 -> Coh w s1 -> forall S : send_safe st this to (getStatelet s1 l) msg0, all_hooks_fire w l (t_snd st) s1 this msg0 to -> Some b = send_step S -> s2 = upd l {| dstate := upd this b (dstate (getStatelet s1 l)); dsoup := dsoup (getStatelet s1 l) \\\\+ fresh (dsoup (getStatelet s1 l)) \\\\\\\\-> {| content := {| tag := t_snd st; tms_cont := msg0 |}; from := this; to := to; active := true |} |} s1 -> P) -> (forall (l : nat) (rt : receive_trans (Protocols.coh (getProtocol w l))), rt \\\\In get_rt w l -> forall (i from : nat) (pf : this \\\\in Protocols.Exports.nodes (getProtocol w l) (getStatelet s1 l)), l \\\\in dom s1 -> forall (C : Coh w s1) (msg0 : TaggedMessage), tag msg0 = t_rcv rt -> [/\\\\ find i (dsoup (getStatelet s1 l)) = Some {| content := msg0; from := from; to := this; active := true |}, msg_wf rt (coh_s l C) this from msg0 & s2 = upd l {| dstate := upd this (receive_step rt from msg0 (coh_s l C) pf) (dstate (getStatelet s1 l)); dsoup := consume_msg (dsoup (getStatelet s1 l)) i |} s1] -> P) -> network_step w this s1 s2 -> P f : input -> option nat prec_valid : forall i : input, prec i -> exists v : nat, f i = Some v Huniq : uniq nodes Unable to unify \"is_true (uniq nodes)\" with \"Transitions.r_step_coh_t (fun (d : dstatelet) (x : calcoh d) (this from : nid) (msg : TaggedMessage) => sr_wf x this from msg) req sr_step\".", "type": "cannot_unify", "handled": true}, {"ctx": ["unfold r_step_coh_t.", "qsimpl use: network_step_sind.", "qsimpl use: ReceiveMsg,network_step_sind.", "qsimpl use: ReceiveMsg,network_step_sind,pcm.", "qsimpl use: ReceiveMsg,trans_updDom,network_step_sind,pcm.", "qsimpl use: ReceiveMsg,trans_updDom,network_step_sind,pcm.", "qsimpl use: ReceiveMsg,trans_updDom,network_step_sind,pcm."], "tactic": "apply consume_coh.", "exn": "In environment H8 : forall (w : world) (this : nid) (s1 s2 : state) (P : SProp), (s1 \\\\In Coh w /\\\\ s1 = s2 -> P) -> (forall (l : nat) (st : send_trans (Protocols.coh (getProtocol w l))), st \\\\In get_st w l -> forall (to : nid) (msg0 : seq nat) (b : heap), this \\\\in Protocols.Exports.nodes (getProtocol w l) (getStatelet s1 l) -> l \\\\in dom s1 -> Coh w s1 -> forall S : send_safe st this to (getStatelet s1 l) msg0, all_hooks_fire w l (t_snd st) s1 this msg0 to -> Some b = send_step S -> s2 = upd l {| dstate := upd this b (dstate (getStatelet s1 l)); dsoup := dsoup (getStatelet s1 l) \\\\+ fresh (dsoup (getStatelet s1 l)) \\\\\\\\-> {| content := {| tag := t_snd st; tms_cont := msg0 |}; from := this; to := to; active := true |} |} s1 -> P) -> (forall (l : nat) (rt : receive_trans (Protocols.coh (getProtocol w l))), rt \\\\In get_rt w l -> forall (i from : nat) (pf : this \\\\in Protocols.Exports.nodes (getProtocol w l) (getStatelet s1 l)), l \\\\in dom s1 -> forall (C : Coh w s1) (msg0 : TaggedMessage), tag msg0 = t_rcv rt -> [/\\\\ find i (dsoup (getStatelet s1 l)) = Some {| content := msg0; from := from; to := this; active := true |}, msg_wf rt (coh_s l C) this from msg0 & s2 = upd l {| dstate := upd this (receive_step rt from msg0 (coh_s l C) pf) (dstate (getStatelet s1 l)); dsoup := consume_msg (dsoup (getStatelet s1 l)) i |} s1] -> P) -> network_step w this s1 s2 -> P prec : input -> bool cs, cls : seq nid H4 : forall (this : nat) (d : dstatelet) (s : heap), this \\\\in nodes -> calcoh d -> dom (upd this s (dstate d)) =i nodes H0 : forall (w : world) (this : nid) (s1 s2 : state) (l : nat) (rt : receive_trans (Protocols.coh (getProtocol w l))), rt \\\\In get_rt w l -> forall (i from : nat) (pf : this \\\\in Protocols.Exports.nodes (getProtocol w l) (getStatelet s1 l)), l \\\\in dom s1 -> forall (C : Coh w s1) (msg0 : TaggedMessage), tag msg0 = t_rcv rt -> [/\\\\ find i (dsoup (getStatelet s1 l)) = Some {| content := msg0; from := from; to := this; active := true |}, msg_wf rt (coh_s l C) this from msg0 & s2 = upd l {| dstate := upd this (receive_step rt from msg0 (coh_s l C) pf) (dstate (getStatelet s1 l)); dsoup := consume_msg (dsoup (getStatelet s1 l)) i |} s1] -> network_step w this s1 s2 H7, H5, H3, H1, H : forall (w : world) (this : nid) (s1 s2 : state) (P : SProp), (s1 \\\\In Coh w /\\\\ s1 = s2 -> P) -> (forall (l : nat) (st : send_trans (Protocols.coh (getProtocol w l))), st \\\\In get_st w l -> forall (to : nid) (msg0 : seq nat) (b : heap), this \\\\in Protocols.Exports.nodes (getProtocol w l) (getStatelet s1 l) -> l \\\\in dom s1 -> Coh w s1 -> forall S : send_safe st this to (getStatelet s1 l) msg0, all_hooks_fire w l (t_snd st) s1 this msg0 to -> Some b = send_step S -> s2 = upd l {| dstate := upd this b (dstate (getStatelet s1 l)); dsoup := dsoup (getStatelet s1 l) \\\\+ fresh (dsoup (getStatelet s1 l)) \\\\\\\\-> {| content := {| tag := t_snd st; tms_cont := msg0 |}; from := this; to := to; active := true |} |} s1 -> P) -> (forall (l : nat) (rt : receive_trans (Protocols.coh (getProtocol w l))), rt \\\\In get_rt w l -> forall (i from : nat) (pf : this \\\\in Protocols.Exports.nodes (getProtocol w l) (getStatelet s1 l)), l \\\\in dom s1 -> forall (C : Coh w s1) (msg0 : TaggedMessage), tag msg0 = t_rcv rt -> [/\\\\ find i (dsoup (getStatelet s1 l)) = Some {| content := msg0; from := from; to := this; active := true |}, msg_wf rt (coh_s l C) this from msg0 & s2 = upd l {| dstate := upd this (receive_step rt from msg0 (coh_s l C) pf) (dstate (getStatelet s1 l)); dsoup := consume_msg (dsoup (getStatelet s1 l)) i |} s1] -> P) -> network_step w this s1 s2 -> P f : input -> option nat prec_valid : forall i : input, prec i -> exists v : nat, f i = Some v Huniq : uniq nodes Unable to unify \"let 'SimplFun lam := [Pred s | valid s /\\\\ (forall (m : mid) (ms : msg TaggedMessage), find m s = Some ms -> cohMsg ms)] in lam (consume_msg (dsoup ?M31478) ?M31479)\" with \"forall (d : dstatelet) (from : nat) (this : nid) (i : mid) (C : coh d) (pf' : this \\\\in (fun=> [eta mem_seq nodes]) d) (m : TaggedMessage), this \\\\in dom (dstate d) -> find i (dsoup d) = Some {| content := m; from := from; to := this; active := true |} -> (fun (d0 : dstatelet) (x : calcoh d0) (this0 from0 : nid) (msg : TaggedMessage) => sr_wf x this0 from0 msg) d C this from m -> tag m = req -> coh {| dstate := upd this (sr_step from m C pf') (dstate d); dsoup := consume_msg (dsoup d) i |}\".", "type": "cannot_unify", "handled": true}, {"ctx": ["unfold r_step_coh_t.", "qsimpl use: network_step_sind.", "qsimpl use: ReceiveMsg,network_step_sind.", "qsimpl use: ReceiveMsg,network_step_sind,pcm.", "qsimpl use: ReceiveMsg,trans_updDom,network_step_sind,pcm.", "qsimpl use: ReceiveMsg,trans_updDom,network_step_sind,pcm.", "qsimpl use: ReceiveMsg,trans_updDom,network_step_sind,pcm.", "qsimpl use: consume_coh,ReceiveMsg,pcm,network_step_sind,trans_updDom."], "tactic": "apply Huniq.", "exn": "In environment prec : input -> bool cs, cls : seq nid H10 : forall (this : nat) (d : dstatelet) (s : heap), this \\\\in nodes -> calcoh d -> dom (upd this s (dstate d)) =i nodes H9 : forall (w : world) (this : nid) (s1 s2 : state) (P : SProp), (s1 \\\\In Coh w /\\\\ s1 = s2 -> P) -> (forall (l : nat) (st : send_trans (Protocols.coh (getProtocol w l))), st \\\\In get_st w l -> forall (to : nid) (msg0 : seq nat) (b : heap), this \\\\in Protocols.Exports.nodes (getProtocol w l) (getStatelet s1 l) -> l \\\\in dom s1 -> Coh w s1 -> forall S : send_safe st this to (getStatelet s1 l) msg0, all_hooks_fire w l (t_snd st) s1 this msg0 to -> Some b = send_step S -> s2 = upd l {| dstate := upd this b (dstate (getStatelet s1 l)); dsoup := dsoup (getStatelet s1 l) \\\\+ fresh (dsoup (getStatelet s1 l)) \\\\\\\\-> {| content := {| tag := t_snd st; tms_cont := msg0 |}; from := this; to := to; active := true |} |} s1 -> P) -> (forall (l : nat) (rt : receive_trans (Protocols.coh (getProtocol w l))), rt \\\\In get_rt w l -> forall (i from : nat) (pf : this \\\\in Protocols.Exports.nodes (getProtocol w l) (getStatelet s1 l)), l \\\\in dom s1 -> forall (C : Coh w s1) (msg0 : TaggedMessage), tag msg0 = t_rcv rt -> [/\\\\ find i (dsoup (getStatelet s1 l)) = Some {| content := msg0; from := from; to := this; active := true |}, msg_wf rt (coh_s l C) this from msg0 & s2 = upd l {| dstate := upd this (receive_step rt from msg0 (coh_s l C) pf) (dstate (getStatelet s1 l)); dsoup := consume_msg (dsoup (getStatelet s1 l)) i |} s1] -> P) -> network_step w this s1 s2 -> P H6 : forall (w : world) (this : nid) (s1 s2 : state) (l : nat) (rt : receive_trans (Protocols.coh (getProtocol w l))), rt \\\\In get_rt w l -> forall (i from : nat) (pf : this \\\\in Protocols.Exports.nodes (getProtocol w l) (getStatelet s1 l)), l \\\\in dom s1 -> forall (C : Coh w s1) (msg0 : TaggedMessage), tag msg0 = t_rcv rt -> [/\\\\ find i (dsoup (getStatelet s1 l)) = Some {| content := msg0; from := from; to := this; active := true |}, msg_wf rt (coh_s l C) this from msg0 & s2 = upd l {| dstate := upd this (receive_step rt from msg0 (coh_s l C) pf) (dstate (getStatelet s1 l)); dsoup := consume_msg (dsoup (getStatelet s1 l)) i |} s1] -> network_step w this s1 s2 H2 : forall (d : dstatelet) (m : nat), calcoh d -> soupCoh (consume_msg (dsoup d) m) H8, H7, H5, H3, H1, H : forall (w : world) (this : nid) (s1 s2 : state) (P : SProp), (s1 \\\\In Coh w /\\\\ s1 = s2 -> P) -> (forall (l : nat) (st : send_trans (Protocols.coh (getProtocol w l))), st \\\\In get_st w l -> forall (to : nid) (msg0 : seq nat) (b : heap), this \\\\in Protocols.Exports.nodes (getProtocol w l) (getStatelet s1 l) -> l \\\\in dom s1 -> Coh w s1 -> forall S : send_safe st this to (getStatelet s1 l) msg0, all_hooks_fire w l (t_snd st) s1 this msg0 to -> Some b = send_step S -> s2 = upd l {| dstate := upd this b (dstate (getStatelet s1 l)); dsoup := dsoup (getStatelet s1 l) \\\\+ fresh (dsoup (getStatelet s1 l)) \\\\\\\\-> {| content := {| tag := t_snd st; tms_cont := msg0 |}; from := this; to := to; active := true |} |} s1 -> P) -> (forall (l : nat) (rt : receive_trans (Protocols.coh (getProtocol w l))), rt \\\\In get_rt w l -> forall (i from : nat) (pf : this \\\\in Protocols.Exports.nodes (getProtocol w l) (getStatelet s1 l)), l \\\\in dom s1 -> forall (C : Coh w s1) (msg0 : TaggedMessage), tag msg0 = t_rcv rt -> [/\\\\ find i (dsoup (getStatelet s1 l)) = Some {| content := msg0; from := from; to := this; active := true |}, msg_wf rt (coh_s l C) this from msg0 & s2 = upd l {| dstate := upd this (receive_step rt from msg0 (coh_s l C) pf) (dstate (getStatelet s1 l)); dsoup := consume_msg (dsoup (getStatelet s1 l)) i |} s1] -> P) -> network_step w this s1 s2 -> P f : input -> option nat prec_valid : forall i : input, prec i -> exists v : nat, f i = Some v Huniq : uniq nodes Unable to unify \"is_true (uniq nodes)\" with \"Transitions.r_step_coh_t (fun (d : dstatelet) (x : calcoh d) (this from : nid) (msg : TaggedMessage) => sr_wf x this from msg) req sr_step\".", "type": "cannot_unify", "handled": true}]}, "chat": [], "original": "unfold r_step_coh_t. intros. apply network_step_sind. intros. apply ReceiveMsg. unfold Protocols.rcv_tags. unfold all. unfold Protocols.snd_tags. unfold has. unfold mem2. unfold pcm. rewrite trans_updDom. unfold prot. apply H0. apply Huniq. apply consume_coh. apply Huniq.", "succ": false}]