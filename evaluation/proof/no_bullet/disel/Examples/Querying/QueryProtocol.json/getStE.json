[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": ["intros."], "tactic": "intros H.", "exn": "H is already used.", "type": "used_var", "handled": true}, {"ctx": ["intros."], "tactic": "intros H'.", "exn": "No product even after head-reduction.", "type": "no_product", "handled": true}, {"ctx": ["intros.", "unfold getSt."], "tactic": ["rewrite H.", ""], "exn": "Dependent type error in rewrite of (fun _pattern_value_ : heap => match find st _pattern_value_ as f return (find st _pattern_value_ = f -> qstate) with | Some v => fun epf : find st _pattern_value_ = Some v => icast (Logic.eq_sym (cohSt C' epf)) (dyn_val v) | None => fun=> ([::], [::]) end (erefl (find st _pattern_value_)) = match find st (getLocal n i) as f return (find st (getLocal n i) = f -> qstate) with | Some v => fun epf : find st (getLocal n i) = Some v => icast (Logic.eq_sym (cohSt C epf)) (dyn_val v) | None => fun=> ([::], [::]) end (erefl (find st (getLocal n i)))) Type error was: Illegal application: The term \"cohSt\" of type \"forall (n : nid) (d : dstatelet), QCoh d -> forall s : dynamic id, find st (getLocal n d) = Some s -> dyn_tp s = qstate\" cannot be applied to the terms \"n\" : \"Equality.sort nat_eqType\" \"j\" : \"dstatelet\" \"C'\" : \"QCoh j\" \"v\" : \"dynamic id\" \"epf\" : \"find st _pattern_value_ = Some v\" The 5th term has type \"find st _pattern_value_ = Some v\" which should be coercible to \"find st (getLocal n j) = Some v\".", "type": "term_cannot_apply", "handled": false}]}, "chat": [], "original": "intros. unfold getLocal. intros H. unfold getSt. rewrite H. reflexivity.", "succ": false}]