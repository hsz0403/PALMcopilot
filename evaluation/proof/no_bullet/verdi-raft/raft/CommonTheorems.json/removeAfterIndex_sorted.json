[{"history": {"proof": "intros l i H. induction l as [|e es IH]. - simpl. auto. - simpl. destruct (leb (eIndex e) i) eqn:Heindex. + apply sorted_cons. * qsimpl time: 1. * sfirstorder depth: 3. + sfirstorder depth: 3.", "repairs": ["", "", "", "", "", "", "", "", "", "", "", "cannot_unify", "", "hammer", "", "hammer"], "exceptions": [{"ctx": ["intros l i H.", "induction l as [|e es IH].", "-", "simpl.", "auto.", "-", "simpl.", "destruct (leb (eIndex e) i) eqn:Heindex.", "+", "apply sorted_cons.", "*"], "tactic": "apply IH.", "exn": "In environment orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params e : entry es : list entry i : logIndex H : sorted (e :: es) IH : sorted es -> sorted (removeAfterIndex es i) Heindex : (eIndex e <=? i) = true Unable to unify \"sorted (removeAfterIndex es i)\" with \"sorted es\".", "type": "cannot_unify", "handled": true}]}, "chat": [], "original": "intros l i H. induction l as [|e es IH]. - simpl. auto. - simpl. destruct (leb (eIndex e) i) eqn:Heindex. + apply sorted_cons. * apply IH. apply H. * intros e' Hine. apply H in Hine. destruct Hine as [Heindex' Heterm]. split. ++ apply Nat.leb_gt. apply Heindex'. ++ apply Heterm. + apply IH. apply H.", "succ": true}]