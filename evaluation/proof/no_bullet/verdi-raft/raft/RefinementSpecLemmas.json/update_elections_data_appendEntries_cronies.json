[{"history": {"proof": "intros h st t h' pli plt es ci. unfold update_elections_data_appendEntries. destruct (handleAppendEntries h (snd st) t h' pli plt es ci) as [d m] eqn:Hhandle. qsimpl time: 1 use: votes_same_append_entries.", "repairs": ["", "", "", "cannot_unify"], "exceptions": [{"ctx": ["intros h st t h' pli plt es ci.", "unfold update_elections_data_appendEntries.", "destruct (handleAppendEntries h (snd st) t h' pli plt es ci) as [d m] eqn:Hhandle."], "tactic": "apply votes_same_append_entries.", "exn": "In environment orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params rri : raft_refinement_interface h : name st : electionsData * raft_data t : term h' : name pli : logIndex plt : term es : list entry ci : logIndex d : raft_data m : msg Hhandle : handleAppendEntries h (snd st) t h' pli plt es ci = (d, m) Unable to unify \"votes (update_elections_data_appendEntries ?M1640 ?M1641 ?M1642 ?M1643 ?M1644 ?M1645 ?M1646 ?M1647) = votes (fst ?M1641)\" with \"cronies match m with | AppendEntriesReply t entries true => {| votes := votes (fst st); votesWithLog := votesWithLog (fst st); cronies := cronies (fst st); leaderLogs := leaderLogs (fst st); allEntries := map (fun e : entry => (t, e)) entries ++ allEntries (fst st) |} | AppendEntriesReply t entries false => fst st | _ => fst st end = cronies (fst st)\".", "type": "cannot_unify", "handled": true}]}, "chat": [], "original": "intros h st t h' pli plt es ci. unfold update_elections_data_appendEntries. destruct (handleAppendEntries h (snd st) t h' pli plt es ci) as [d m] eqn:Hhandle. apply votes_same_append_entries.", "succ": true}]