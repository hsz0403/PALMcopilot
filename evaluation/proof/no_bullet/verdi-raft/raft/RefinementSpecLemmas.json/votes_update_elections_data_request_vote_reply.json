[{"history": {"proof": "intros h st src t r st' t' h' HhandleRequestVoteReply Hin. unfold update_elections_data_requestVoteReply, handleRequestVoteReply in Hin. destruct (currentTerm (snd st) <? t) eqn:Hterm. - inversion HhandleRequestVoteReply. hauto lq: on depth: 3use: snd, name_eq_dec, dedup, currentTerm, votesReceived, wonElection. - hfcrush depth: 3use: snd, name_eq_dec, dedup, currentTerm, votesReceived, wonElection.", "repairs": ["", "", "", "", "", "hammer", "", "hammer"], "exceptions": []}, "chat": [], "original": "intros h st src t r st' t' h' HhandleRequestVoteReply Hin. unfold update_elections_data_requestVoteReply, handleRequestVoteReply in Hin. destruct (currentTerm (snd st) <? t) eqn:Hterm. - inversion HhandleRequestVoteReply. - destruct (t <? currentTerm (snd st)) eqn:Hterm'. + inversion HhandleRequestVoteReply. + destruct (voteGranted && wonElection (dedup name_eq_dec (src :: votesReceived (snd st)))) eqn:Hvote. * inversion HhandleRequestVoteReply; subst. intros Hin_vote. apply Hin. * inversion HhandleRequestVoteReply.", "succ": true}]