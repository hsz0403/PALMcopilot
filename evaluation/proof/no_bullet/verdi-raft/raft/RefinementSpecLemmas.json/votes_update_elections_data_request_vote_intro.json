[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": ["intros h st t src lli llt st' m h' HhandleRequest Hvoted Hterm.", "destruct Hterm as [HcurrentTerm | HvotedNone].", "+"], "tactic": "left.", "exn": "Not an inductive product.", "type": "not_inductive_product", "handled": true}, {"ctx": ["intros h st t src lli llt st' m h' HhandleRequest Hvoted Hterm.", "destruct Hterm as [HcurrentTerm | HvotedNone].", "+", "qsimpl."], "tactic": "apply HcurrentTerm.", "exn": "In environment orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params h : name st0 : electionsData st1 : RaftState.raft_data term name entry logIndex serverType data clientId output t : nat src : fin N lli, llt : nat st' : raft_data m : msg h' : name HhandleRequest : handleRequestVote h st1 t src lli llt = (st', m) Hvoted : votedFor st' = Some h' HcurrentTerm : currentTerm st1 < currentTerm st' refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (GhostSimulations.deghost net) Unable to unify \"currentTerm st1 < currentTerm st'\" with \"In (currentTerm st', h') (votes (update_elections_data_requestVote h src t src lli llt (st0, st1)))\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros h st t src lli llt st' m h' HhandleRequest Hvoted Hterm.", "destruct Hterm as [HcurrentTerm | HvotedNone].", "+", "qsimpl."], "tactic": "+", "exn": "Wrong bullet +: Current bullet + is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["intros h st t src lli llt st' m h' HhandleRequest Hvoted Hterm.", "destruct Hterm as [HcurrentTerm | HvotedNone].", "+", "qsimpl.", "shelve.", "+"], "tactic": "right.", "exn": "Not an inductive product.", "type": "not_inductive_product", "handled": true}, {"ctx": ["intros h st t src lli llt st' m h' HhandleRequest Hvoted Hterm.", "destruct Hterm as [HcurrentTerm | HvotedNone].", "+", "qsimpl.", "shelve.", "+", "qsimpl."], "tactic": "left.", "exn": "Not an inductive product.", "type": "not_inductive_product", "handled": true}, {"ctx": ["intros h st t src lli llt st' m h' HhandleRequest Hvoted Hterm.", "destruct Hterm as [HcurrentTerm | HvotedNone].", "+", "qsimpl.", "shelve.", "+", "qsimpl."], "tactic": "apply Hvoted.", "exn": "In environment orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params h : name st0 : electionsData st1 : RaftState.raft_data term name entry logIndex serverType data clientId output t : nat src : fin N lli, llt : nat st' : raft_data m : msg h' : name HhandleRequest : handleRequestVote h st1 t src lli llt = (st', m) Hvoted : votedFor st' = Some h' HvotedNone : votedFor st1 = None refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (GhostSimulations.deghost net) Unable to unify \"votedFor st' = Some h'\" with \"In (currentTerm st', h') (votes (update_elections_data_requestVote h src t src lli llt (st0, st1)))\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros h st t src lli llt st' m h' HhandleRequest Hvoted Hterm.", "destruct Hterm as [HcurrentTerm | HvotedNone].", "+", "qsimpl.", "shelve.", "+", "qsimpl."], "tactic": "+", "exn": "Wrong bullet +: Current bullet + is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["intros h st t src lli llt st' m h' HhandleRequest Hvoted Hterm.", "destruct Hterm as [HcurrentTerm | HvotedNone].", "+", "qsimpl.", "shelve.", "+", "qsimpl.", "shelve."], "tactic": "+", "exn": "Wrong bullet +: No more subgoals.", "type": "no_more_subgoals", "handled": true}]}, "chat": [], "original": "- intros h st t src lli llt st' m h' HhandleRequest Hvoted Hterm. destruct Hterm as [HcurrentTerm | HvotedNone]. + left. apply HcurrentTerm. + right. left. apply Hvoted. + right. right. apply HvotedNone.", "succ": false}]