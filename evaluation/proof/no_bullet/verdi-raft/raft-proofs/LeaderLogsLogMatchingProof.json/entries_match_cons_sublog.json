[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": ["intros."], "tactic": "apply entries_match_scratch; auto.", "exn": "Unable to find an instance for the variable plt.", "type": "no_instance_var", "handled": true}, {"ctx": ["intros.", "qsimpl use: entries_match_scratch."], "tactic": "apply sorted_cons; auto.", "exn": "In environment orig_base_params : BaseParams raft_params : RaftParams orig_base_params H4 : forall (es ys : list entry) (plt : term), sorted es -> uniqueIndices ys -> (forall e1 e2 : entry, eIndex e1 = eIndex e2 -> eTerm e1 = eTerm e2 -> In e1 es -> In e2 ys -> (forall e3 : entry, eIndex e3 <= eIndex e1 -> In e3 es -> In e3 ys) /\\\\ ((0 = 0 -> False) -> exists e4 : entry, eIndex e4 = 0 /\\\\ eTerm e4 = plt /\\\\ In e4 ys)) -> (forall i : nat, 0 < i <= maxIndex es -> exists e : entry, eIndex e = i /\\\\ In e es) -> (forall e : entry, In e es -> 0 < eIndex e) -> (forall y : entry, In y ys -> 0 < eIndex y) -> entries_match es ys one_node_params : OneNodeParams orig_base_params x : entry xs, ys : list entry H : sorted xs H0 : sorted ys H1 : eIndex x > maxIndex xs H2 : entries_match xs ys H3 : forall y : entry, In y ys -> eTerm x = eTerm y -> In y xs leaderLogs_contiguous_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaderLogs_contiguous net leaderLogs_sublog_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaderLogs_sublog net handleAppendEntries_logs_sorted : forall (net : network) (p : packet) (t : term) (n : name) (pli : logIndex) (plt : term) (es : list entry) (ci : logIndex) (st' : raft_data) (m : msg), raft_intermediate_reachable net -> logs_sorted net -> handleAppendEntries (pDst p) (nwState net (pDst p)) t n pli plt es ci = (st', m) -> pBody p = AppendEntries t n pli plt es ci -> In p (nwPackets net) -> sorted (log st') handleClientRequest_logs_sorted : forall (h : name) (client : clientId) (id : nat) (c : input) (out : list raft_output) (st : raft_data) (l : list (name * msg)) (net : network), handleClientRequest h (nwState net h) client id c = (out, st, l) -> raft_intermediate_reachable net -> logs_sorted_host net -> sorted (log st) logs_sorted_invariant : forall net : network, raft_intermediate_reachable net -> logs_sorted net leaderLogs_sorted_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaderLogs_sorted net leaderLogs_term_sanity_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaderLogs_term_sanity net leaderLogs_currentTerm_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaderLogs_currentTerm_sanity net leaderLogs_currentTerm_sanity_candidate_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaderLogs_currentTerm_sanity_candidate net log_matching_invariant : forall net : network, raft_intermediate_reachable net -> log_matching net refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (deghost net) H5 : forall net : network, refined_raft_intermediate_reachable net -> terms_and_indices_from_one_ll net H6 : forall net : network, refined_raft_intermediate_reachable net -> terms_and_indices_from_one_vwl net Unable to unify \"(forall e' : entry, In e' ?M14136 -> eIndex ?M14137 > eIndex e' /\\\\ eTerm ?M14137 >= eTerm e') /\\\\ (fix sorted (log : list entry) : Prop := match log with | [] => True | e :: es => (forall e' : entry, In e' es -> eIndex e > eIndex e' /\\\\ eTerm e >= eTerm e') /\\\\ sorted es end) ?M14136\" with \"forall e e' e'' : entry, eIndex e = eIndex e' -> eTerm e = eTerm e' -> In e (x :: xs) -> In e' ys -> eIndex e'' <= eIndex e -> In e'' (x :: xs) <-> In e'' ys\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros.", "qsimpl use: entries_match_scratch.", "qsimpl use: sorted_cons,entries_match_scratch."], "tactic": "apply removeAfterIndex_le_In; auto.", "exn": "In environment orig_base_params : BaseParams raft_params : RaftParams orig_base_params H8 : forall (es ys : list entry) (plt : term), sorted es -> uniqueIndices ys -> (forall e1 e2 : entry, eIndex e1 = eIndex e2 -> eTerm e1 = eTerm e2 -> In e1 es -> In e2 ys -> (forall e3 : entry, eIndex e3 <= eIndex e1 -> In e3 es -> In e3 ys) /\\\\ ((0 = 0 -> False) -> exists e4 : entry, eIndex e4 = 0 /\\\\ eTerm e4 = plt /\\\\ In e4 ys)) -> (forall i : nat, 0 < i <= maxIndex es -> exists e : entry, eIndex e = i /\\\\ In e es) -> (forall e : entry, In e es -> 0 < eIndex e) -> (forall y : entry, In y ys -> 0 < eIndex y) -> entries_match es ys one_node_params : OneNodeParams orig_base_params x : entry xs, ys : list entry H : sorted xs H0 : sorted ys H1 : eIndex x > maxIndex xs H2 : entries_match xs ys H3 : forall y : entry, In y ys -> eTerm x = eTerm y -> In y xs leaderLogs_contiguous_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaderLogs_contiguous net leaderLogs_sublog_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaderLogs_sublog net handleAppendEntries_logs_sorted : forall (net : network) (p : packet) (t : term) (n : name) (pli : logIndex) (plt : term) (es : list entry) (ci : logIndex) (st' : raft_data) (m : msg), raft_intermediate_reachable net -> logs_sorted net -> handleAppendEntries (pDst p) (nwState net (pDst p)) t n pli plt es ci = (st', m) -> pBody p = AppendEntries t n pli plt es ci -> In p (nwPackets net) -> sorted (log st') handleClientRequest_logs_sorted : forall (h : name) (client : clientId) (id : nat) (c : input) (out : list raft_output) (st : raft_data) (l : list (name * msg)) (net : network), handleClientRequest h (nwState net h) client id c = (out, st, l) -> raft_intermediate_reachable net -> logs_sorted_host net -> sorted (log st) logs_sorted_invariant : forall net : network, raft_intermediate_reachable net -> logs_sorted net leaderLogs_sorted_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaderLogs_sorted net leaderLogs_term_sanity_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaderLogs_term_sanity net leaderLogs_currentTerm_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaderLogs_currentTerm_sanity net leaderLogs_currentTerm_sanity_candidate_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaderLogs_currentTerm_sanity_candidate net log_matching_invariant : forall net : network, raft_intermediate_reachable net -> log_matching net refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (deghost net) H5 : forall net : network, refined_raft_intermediate_reachable net -> terms_and_indices_from_one_ll net H6 : forall net : network, refined_raft_intermediate_reachable net -> terms_and_indices_from_one_vwl net H4 : forall (xs : list entry) (a : entry), sorted xs -> (forall a' : entry, In a' xs -> eIndex a > eIndex a' /\\\\ eTerm a >= eTerm a') -> sorted xs H9 : forall (xs : list entry) (a : entry), sorted xs -> (forall a' : entry, In a' xs -> eIndex a > eIndex a' /\\\\ eTerm a >= eTerm a') -> forall e' : entry, In e' xs -> eTerm a >= eTerm e' H10 : forall (xs : list entry) (a : entry), sorted xs -> (forall a' : entry, In a' xs -> eIndex a > eIndex a' /\\\\ eTerm a >= eTerm a') -> forall e' : entry, In e' xs -> eIndex a > eIndex e' Unable to unify \"(fix In (a : entry) (l : list entry) {struct l} : Prop := match l with | [] => False | b :: m => b = a \\\\/ In a m end) ?M30421 (removeAfterIndex ?M30419 ?M30420)\" with \"forall e e' e'' : entry, eIndex e = eIndex e' -> eTerm e = eTerm e' -> In e (x :: xs) -> In e' ys -> eIndex e'' <= eIndex e -> In e'' (x :: xs) <-> In e'' ys\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros.", "qsimpl use: entries_match_scratch.", "qsimpl use: sorted_cons,entries_match_scratch.", "qsimpl use: sorted_cons,removeAfterIndex_le_In,entries_match_scratch.", "apply entries_match_sym in H2."], "tactic": "apply removeAfterIndex_In_le with (i:=eIndex y0) in H2; auto.", "exn": "The reference y0 was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros.", "qsimpl use: entries_match_scratch.", "qsimpl use: sorted_cons,entries_match_scratch.", "qsimpl use: sorted_cons,removeAfterIndex_le_In,entries_match_scratch.", "apply entries_match_sym in H2."], "tactic": "apply H2.", "exn": "In environment orig_base_params : BaseParams raft_params : RaftParams orig_base_params H12 : forall (es ys : list entry) (plt : term), sorted es -> uniqueIndices ys -> (forall e1 e2 : entry, eIndex e1 = eIndex e2 -> eTerm e1 = eTerm e2 -> In e1 es -> In e2 ys -> (forall e3 : entry, eIndex e3 <= eIndex e1 -> In e3 es -> In e3 ys) /\\\\ ((0 = 0 -> False) -> exists e4 : entry, eIndex e4 = 0 /\\\\ eTerm e4 = plt /\\\\ In e4 ys)) -> (forall i : nat, 0 < i <= maxIndex es -> exists e : entry, eIndex e = i /\\\\ In e es) -> (forall e : entry, In e es -> 0 < eIndex e) -> (forall y : entry, In y ys -> 0 < eIndex y) -> entries_match es ys H11 : forall (xs : list entry) (i : nat) (x : entry), eIndex x <= i -> In x xs -> In x (removeAfterIndex xs i) one_node_params : OneNodeParams orig_base_params x : entry xs, ys : list entry H : sorted xs H0 : sorted ys H1 : eIndex x > maxIndex xs H2 : entries_match ys xs H3 : forall y : entry, In y ys -> eTerm x = eTerm y -> In y xs leaderLogs_contiguous_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaderLogs_contiguous net leaderLogs_sublog_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaderLogs_sublog net handleAppendEntries_logs_sorted : forall (net : network) (p : packet) (t : term) (n : name) (pli : logIndex) (plt : term) (es : list entry) (ci : logIndex) (st' : raft_data) (m : msg), raft_intermediate_reachable net -> logs_sorted net -> handleAppendEntries (pDst p) (nwState net (pDst p)) t n pli plt es ci = (st', m) -> pBody p = AppendEntries t n pli plt es ci -> In p (nwPackets net) -> sorted (log st') handleClientRequest_logs_sorted : forall (h : name) (client : clientId) (id : nat) (c : input) (out : list raft_output) (st : raft_data) (l : list (name * msg)) (net : network), handleClientRequest h (nwState net h) client id c = (out, st, l) -> raft_intermediate_reachable net -> logs_sorted_host net -> sorted (log st) logs_sorted_invariant : forall net : network, raft_intermediate_reachable net -> logs_sorted net leaderLogs_sorted_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaderLogs_sorted net leaderLogs_term_sanity_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaderLogs_term_sanity net leaderLogs_currentTerm_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaderLogs_currentTerm_sanity net leaderLogs_currentTerm_sanity_candidate_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaderLogs_currentTerm_sanity_candidate net log_matching_invariant : forall net : network, raft_intermediate_reachable net -> log_matching net refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (deghost net) H5 : forall net : network, refined_raft_intermediate_reachable net -> terms_and_indices_from_one_ll net H6 : forall net : network, refined_raft_intermediate_reachable net -> terms_and_indices_from_one_vwl net H4 : forall (xs : list entry) (a : entry), sorted xs -> (forall a' : entry, In a' xs -> eIndex a > eIndex a' /\\\\ eTerm a >= eTerm a') -> sorted xs H9 : forall (xs : list entry) (a : entry), sorted xs -> (forall a' : entry, In a' xs -> eIndex a > eIndex a' /\\\\ eTerm a >= eTerm a') -> forall e' : entry, In e' xs -> eTerm a >= eTerm e' H10 : forall (xs : list entry) (a : entry), sorted xs -> (forall a' : entry, In a' xs -> eIndex a > eIndex a' /\\\\ eTerm a >= eTerm a') -> forall e' : entry, In e' xs -> eIndex a > eIndex e' Unable to unify \"entries_match ys xs\" with \"entries_match (x :: xs) ys\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros.", "qsimpl use: entries_match_scratch.", "qsimpl use: sorted_cons,entries_match_scratch.", "qsimpl use: sorted_cons,removeAfterIndex_le_In,entries_match_scratch.", "apply entries_match_sym in H2.", "qsimpl use: sorted_cons,removeAfterIndex_le_In,entries_match_scratch."], "tactic": "apply H4.", "exn": "In environment orig_base_params : BaseParams raft_params : RaftParams orig_base_params H13 : forall (es ys : list entry) (plt : term), sorted es -> uniqueIndices ys -> (forall e1 e2 : entry, eIndex e1 = eIndex e2 -> eTerm e1 = eTerm e2 -> In e1 es -> In e2 ys -> (forall e3 : entry, eIndex e3 <= eIndex e1 -> In e3 es -> In e3 ys) /\\\\ ((0 = 0 -> False) -> exists e4 : entry, eIndex e4 = 0 /\\\\ eTerm e4 = plt /\\\\ In e4 ys)) -> (forall i : nat, 0 < i <= maxIndex es -> exists e : entry, eIndex e = i /\\\\ In e es) -> (forall e : entry, In e es -> 0 < eIndex e) -> (forall y : entry, In y ys -> 0 < eIndex y) -> entries_match es ys H8 : forall (xs : list entry) (i : nat) (x : entry), eIndex x <= i -> In x xs -> In x (removeAfterIndex xs i) one_node_params : OneNodeParams orig_base_params x : entry xs, ys : list entry H : sorted xs H0 : sorted ys H1 : eIndex x > maxIndex xs H2 : entries_match ys xs H3 : forall y : entry, In y ys -> eTerm x = eTerm y -> In y xs leaderLogs_contiguous_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaderLogs_contiguous net leaderLogs_sublog_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaderLogs_sublog net handleAppendEntries_logs_sorted : forall (net : network) (p : packet) (t : term) (n : name) (pli : logIndex) (plt : term) (es : list entry) (ci : logIndex) (st' : raft_data) (m : msg), raft_intermediate_reachable net -> logs_sorted net -> handleAppendEntries (pDst p) (nwState net (pDst p)) t n pli plt es ci = (st', m) -> pBody p = AppendEntries t n pli plt es ci -> In p (nwPackets net) -> sorted (log st') handleClientRequest_logs_sorted : forall (h : name) (client : clientId) (id : nat) (c : input) (out : list raft_output) (st : raft_data) (l : list (name * msg)) (net : network), handleClientRequest h (nwState net h) client id c = (out, st, l) -> raft_intermediate_reachable net -> logs_sorted_host net -> sorted (log st) logs_sorted_invariant : forall net : network, raft_intermediate_reachable net -> logs_sorted net leaderLogs_sorted_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaderLogs_sorted net leaderLogs_term_sanity_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaderLogs_term_sanity net leaderLogs_currentTerm_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaderLogs_currentTerm_sanity net leaderLogs_currentTerm_sanity_candidate_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaderLogs_currentTerm_sanity_candidate net log_matching_invariant : forall net : network, raft_intermediate_reachable net -> log_matching net refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (deghost net) H5 : forall net : network, refined_raft_intermediate_reachable net -> terms_and_indices_from_one_ll net H6 : forall net : network, refined_raft_intermediate_reachable net -> terms_and_indices_from_one_vwl net H4 : forall (xs : list entry) (a : entry), sorted xs -> (forall a' : entry, In a' xs -> eIndex a > eIndex a' /\\\\ eTerm a >= eTerm a') -> sorted xs H9 : forall (xs : list entry) (a : entry), sorted xs -> (forall a' : entry, In a' xs -> eIndex a > eIndex a' /\\\\ eTerm a >= eTerm a') -> forall e' : entry, In e' xs -> eTerm a >= eTerm e' H10 : forall (xs : list entry) (a : entry), sorted xs -> (forall a' : entry, In a' xs -> eIndex a > eIndex a' /\\\\ eTerm a >= eTerm a') -> forall e' : entry, In e' xs -> eIndex a > eIndex e' Unable to unify \"(fix sorted (log : list entry) : Prop := match log with | [] => True | e :: es => (forall e' : entry, In e' es -> eIndex e > eIndex e' /\\\\ eTerm e >= eTerm e') /\\\\ sorted es end) ?M66064\" with \"forall e e' e'' : entry, eIndex e = eIndex e' -> eTerm e = eTerm e' -> In e (x :: xs) -> In e' ys -> eIndex e'' <= eIndex e -> In e'' (x :: xs) <-> In e'' ys\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros.", "qsimpl use: entries_match_scratch.", "qsimpl use: sorted_cons,entries_match_scratch.", "qsimpl use: sorted_cons,removeAfterIndex_le_In,entries_match_scratch.", "apply entries_match_sym in H2.", "qsimpl use: sorted_cons,removeAfterIndex_le_In,entries_match_scratch.", "qsimpl use: sorted_cons,removeAfterIndex_le_In,entries_match_scratch."], "tactic": "apply H4.", "exn": "In environment orig_base_params : BaseParams raft_params : RaftParams orig_base_params H12 : forall (es ys : list entry) (plt : term), sorted es -> uniqueIndices ys -> (forall e1 e2 : entry, eIndex e1 = eIndex e2 -> eTerm e1 = eTerm e2 -> In e1 es -> In e2 ys -> (forall e3 : entry, eIndex e3 <= eIndex e1 -> In e3 es -> In e3 ys) /\\\\ ((0 = 0 -> False) -> exists e4 : entry, eIndex e4 = 0 /\\\\ eTerm e4 = plt /\\\\ In e4 ys)) -> (forall i : nat, 0 < i <= maxIndex es -> exists e : entry, eIndex e = i /\\\\ In e es) -> (forall e : entry, In e es -> 0 < eIndex e) -> (forall y : entry, In y ys -> 0 < eIndex y) -> entries_match es ys H11 : forall (xs : list entry) (i : nat) (x : entry), eIndex x <= i -> In x xs -> In x (removeAfterIndex xs i) one_node_params : OneNodeParams orig_base_params x : entry xs, ys : list entry H : sorted xs H0 : sorted ys H1 : eIndex x > maxIndex xs H2 : entries_match ys xs H3 : forall y : entry, In y ys -> eTerm x = eTerm y -> In y xs leaderLogs_contiguous_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaderLogs_contiguous net leaderLogs_sublog_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaderLogs_sublog net handleAppendEntries_logs_sorted : forall (net : network) (p : packet) (t : term) (n : name) (pli : logIndex) (plt : term) (es : list entry) (ci : logIndex) (st' : raft_data) (m : msg), raft_intermediate_reachable net -> logs_sorted net -> handleAppendEntries (pDst p) (nwState net (pDst p)) t n pli plt es ci = (st', m) -> pBody p = AppendEntries t n pli plt es ci -> In p (nwPackets net) -> sorted (log st') handleClientRequest_logs_sorted : forall (h : name) (client : clientId) (id : nat) (c : input) (out : list raft_output) (st : raft_data) (l : list (name * msg)) (net : network), handleClientRequest h (nwState net h) client id c = (out, st, l) -> raft_intermediate_reachable net -> logs_sorted_host net -> sorted (log st) logs_sorted_invariant : forall net : network, raft_intermediate_reachable net -> logs_sorted net leaderLogs_sorted_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaderLogs_sorted net leaderLogs_term_sanity_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaderLogs_term_sanity net leaderLogs_currentTerm_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaderLogs_currentTerm_sanity net leaderLogs_currentTerm_sanity_candidate_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaderLogs_currentTerm_sanity_candidate net log_matching_invariant : forall net : network, raft_intermediate_reachable net -> log_matching net refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (deghost net) H5 : forall net : network, refined_raft_intermediate_reachable net -> terms_and_indices_from_one_ll net H6 : forall net : network, refined_raft_intermediate_reachable net -> terms_and_indices_from_one_vwl net H4 : forall (xs : list entry) (a : entry), sorted xs -> (forall a' : entry, In a' xs -> eIndex a > eIndex a' /\\\\ eTerm a >= eTerm a') -> sorted xs H9 : forall (xs : list entry) (a : entry), sorted xs -> (forall a' : entry, In a' xs -> eIndex a > eIndex a' /\\\\ eTerm a >= eTerm a') -> forall e' : entry, In e' xs -> eTerm a >= eTerm e' H10 : forall (xs : list entry) (a : entry), sorted xs -> (forall a' : entry, In a' xs -> eIndex a > eIndex a' /\\\\ eTerm a >= eTerm a') -> forall e' : entry, In e' xs -> eIndex a > eIndex e' Unable to unify \"(fix sorted (log : list entry) : Prop := match log with | [] => True | e :: es => (forall e' : entry, In e' es -> eIndex e > eIndex e' /\\\\ eTerm e >= eTerm e') /\\\\ sorted es end) ?M83885\" with \"forall e e' e'' : entry, eIndex e = eIndex e' -> eTerm e = eTerm e' -> In e (x :: xs) -> In e' ys -> eIndex e'' <= eIndex e -> In e'' (x :: xs) <-> In e'' ys\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros.", "qsimpl use: entries_match_scratch.", "qsimpl use: sorted_cons,entries_match_scratch.", "qsimpl use: sorted_cons,removeAfterIndex_le_In,entries_match_scratch.", "apply entries_match_sym in H2.", "qsimpl use: sorted_cons,removeAfterIndex_le_In,entries_match_scratch.", "qsimpl use: sorted_cons,removeAfterIndex_le_In,entries_match_scratch.", "qsimpl use: sorted_cons,removeAfterIndex_le_In,entries_match_scratch.", "split.", "++", "intros."], "tactic": "apply removeAfterIndex_In_le in H2.", "exn": "Unable to apply lemma of type \"forall (xs0 : list entry) (i : logIndex) (x0 : entry), sorted xs0 -> In x0 (removeAfterIndex xs0 i) -> eIndex x0 <= i\" on hypothesis of type \"entries_match ys xs\".", "type": "cannot_apply_in", "handled": true}, {"ctx": ["intros.", "qsimpl use: entries_match_scratch.", "qsimpl use: sorted_cons,entries_match_scratch.", "qsimpl use: sorted_cons,removeAfterIndex_le_In,entries_match_scratch.", "apply entries_match_sym in H2.", "qsimpl use: sorted_cons,removeAfterIndex_le_In,entries_match_scratch.", "qsimpl use: sorted_cons,removeAfterIndex_le_In,entries_match_scratch.", "qsimpl use: sorted_cons,removeAfterIndex_le_In,entries_match_scratch.", "split.", "++", "intros.", "qsimpl use: sorted_cons,removeAfterIndex_In_le,removeAfterIndex_le_In,entries_match_scratch."], "tactic": "apply entries_match_sym in H5.", "exn": "Unable to apply lemma of type \"forall xs0 ys0 : list entry, entries_match xs0 ys0 -> entries_match ys0 xs0\" on hypothesis of type \"forall net : network, refined_raft_intermediate_reachable net -> terms_and_indices_from_one_ll net\".", "type": "cannot_apply_in", "handled": true}, {"ctx": ["intros.", "qsimpl use: entries_match_scratch.", "qsimpl use: sorted_cons,entries_match_scratch.", "qsimpl use: sorted_cons,removeAfterIndex_le_In,entries_match_scratch.", "apply entries_match_sym in H2.", "qsimpl use: sorted_cons,removeAfterIndex_le_In,entries_match_scratch.", "qsimpl use: sorted_cons,removeAfterIndex_le_In,entries_match_scratch.", "qsimpl use: sorted_cons,removeAfterIndex_le_In,entries_match_scratch.", "split.", "++", "intros.", "qsimpl use: sorted_cons,removeAfterIndex_In_le,removeAfterIndex_le_In,entries_match_scratch.", "qsimpl use: removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym."], "tactic": "apply removeAfterIndex_le_In with (i:=i) in H5; auto.", "exn": "The reference i was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros.", "qsimpl use: entries_match_scratch.", "qsimpl use: sorted_cons,entries_match_scratch.", "qsimpl use: sorted_cons,removeAfterIndex_le_In,entries_match_scratch.", "apply entries_match_sym in H2.", "qsimpl use: sorted_cons,removeAfterIndex_le_In,entries_match_scratch.", "qsimpl use: sorted_cons,removeAfterIndex_le_In,entries_match_scratch.", "qsimpl use: sorted_cons,removeAfterIndex_le_In,entries_match_scratch.", "split.", "++", "intros.", "qsimpl use: sorted_cons,removeAfterIndex_In_le,removeAfterIndex_le_In,entries_match_scratch.", "qsimpl use: removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym."], "tactic": "apply H5.", "exn": "In environment orig_base_params : BaseParams raft_params : RaftParams orig_base_params H17 : forall xs ys : list entry, entries_match xs ys -> entries_match ys xs H16 : forall (xs : list entry) (i : logIndex) (x : entry), sorted xs -> In x (removeAfterIndex xs i) -> eIndex x <= i H12 : forall (es ys : list entry) (plt : term), sorted es -> uniqueIndices ys -> (forall e1 e2 : entry, eIndex e1 = eIndex e2 -> eTerm e1 = eTerm e2 -> In e1 es -> In e2 ys -> (forall e3 : entry, eIndex e3 <= eIndex e1 -> In e3 es -> In e3 ys) /\\\\ ((0 = 0 -> False) -> exists e4 : entry, eIndex e4 = 0 /\\\\ eTerm e4 = plt /\\\\ In e4 ys)) -> (forall i : nat, 0 < i <= maxIndex es -> exists e : entry, eIndex e = i /\\\\ In e es) -> (forall e : entry, In e es -> 0 < eIndex e) -> (forall y : entry, In y ys -> 0 < eIndex y) -> entries_match es ys H8 : forall (xs : list entry) (i : nat) (x : entry), eIndex x <= i -> In x xs -> In x (removeAfterIndex xs i) one_node_params : OneNodeParams orig_base_params xs, ys : list entry H : sorted xs H0 : sorted ys e'', e' : entry H11 : eTerm e'' = eTerm e' H7 : eIndex e'' = eIndex e' H1 : eIndex e'' > maxIndex xs H2 : entries_match ys xs H3 : forall y : entry, In y ys -> eTerm e'' = eTerm y -> In y xs leaderLogs_contiguous_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaderLogs_contiguous net leaderLogs_sublog_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaderLogs_sublog net handleAppendEntries_logs_sorted : forall (net : network) (p : packet) (t : term) (n : name) (pli : logIndex) (plt : term) (es : list entry) (ci : logIndex) (st' : raft_data) (m : msg), raft_intermediate_reachable net -> logs_sorted net -> handleAppendEntries (pDst p) (nwState net (pDst p)) t n pli plt es ci = (st', m) -> pBody p = AppendEntries t n pli plt es ci -> In p (nwPackets net) -> sorted (log st') handleClientRequest_logs_sorted : forall (h : name) (client : clientId) (id : nat) (c : input) (out : list raft_output) (st : raft_data) (l : list (name * msg)) (net : network), handleClientRequest h (nwState net h) client id c = (out, st, l) -> raft_intermediate_reachable net -> logs_sorted_host net -> sorted (log st) logs_sorted_invariant : forall net : network, raft_intermediate_reachable net -> logs_sorted net leaderLogs_sorted_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaderLogs_sorted net leaderLogs_term_sanity_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaderLogs_term_sanity net leaderLogs_currentTerm_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaderLogs_currentTerm_sanity net leaderLogs_currentTerm_sanity_candidate_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaderLogs_currentTerm_sanity_candidate net log_matching_invariant : forall net : network, raft_intermediate_reachable net -> log_matching net refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (deghost net) H5 : forall net : network, refined_raft_intermediate_reachable net -> terms_and_indices_from_one_ll net H6 : forall net : network, refined_raft_intermediate_reachable net -> terms_and_indices_from_one_vwl net H4 : forall (xs : list entry) (a : entry), sorted xs -> (forall a' : entry, In a' xs -> eIndex a > eIndex a' /\\\\ eTerm a >= eTerm a') -> sorted xs H9 : forall (xs : list entry) (a : entry), sorted xs -> (forall a' : entry, In a' xs -> eIndex a > eIndex a' /\\\\ eTerm a >= eTerm a') -> forall e' : entry, In e' xs -> eTerm a >= eTerm e' H10 : forall (xs : list entry) (a : entry), sorted xs -> (forall a' : entry, In a' xs -> eIndex a > eIndex a' /\\\\ eTerm a >= eTerm a') -> forall e' : entry, In e' xs -> eIndex a > eIndex e' H14 : In e' ys H15 : eIndex e'' <= eIndex e'' Unable to unify \"forall (h : Net.name) (t : term) (ll : list entry), In (t, ll) (leaderLogs (fst (nwState ?M119860 h))) -> terms_and_indices_from_one ll\" with \"(fix In (a : entry) (l : list entry) {struct l} : Prop := match l with | [] => False | b :: m => b = a \\\\/ In a m end) e'' ys\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros.", "qsimpl use: entries_match_scratch.", "qsimpl use: sorted_cons,entries_match_scratch.", "qsimpl use: sorted_cons,removeAfterIndex_le_In,entries_match_scratch.", "apply entries_match_sym in H2.", "qsimpl use: sorted_cons,removeAfterIndex_le_In,entries_match_scratch.", "qsimpl use: sorted_cons,removeAfterIndex_le_In,entries_match_scratch.", "qsimpl use: sorted_cons,removeAfterIndex_le_In,entries_match_scratch.", "split.", "++", "intros.", "qsimpl use: sorted_cons,removeAfterIndex_In_le,removeAfterIndex_le_In,entries_match_scratch.", "qsimpl use: removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym.", "qsimpl use: removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym.", "***"], "tactic": "apply H3; auto.", "exn": "In environment orig_base_params : BaseParams raft_params : RaftParams orig_base_params H21 : forall xs ys : list entry, entries_match xs ys -> entries_match ys xs H20 : forall (xs : list entry) (i : logIndex) (x : entry), sorted xs -> In x (removeAfterIndex xs i) -> eIndex x <= i H18 : forall (es ys : list entry) (plt : term), sorted es -> uniqueIndices ys -> (forall e1 e2 : entry, eIndex e1 = eIndex e2 -> eTerm e1 = eTerm e2 -> In e1 es -> In e2 ys -> (forall e3 : entry, eIndex e3 <= eIndex e1 -> In e3 es -> In e3 ys) /\\\\ ((0 = 0 -> False) -> exists e4 : entry, eIndex e4 = 0 /\\\\ eTerm e4 = plt /\\\\ In e4 ys)) -> (forall i : nat, 0 < i <= maxIndex es -> exists e : entry, eIndex e = i /\\\\ In e es) -> (forall e : entry, In e es -> 0 < eIndex e) -> (forall y : entry, In y ys -> 0 < eIndex y) -> entries_match es ys H13 : forall (xs : list entry) (i : nat) (x : entry), eIndex x <= i -> In x xs -> In x (removeAfterIndex xs i) one_node_params : OneNodeParams orig_base_params xs, ys : list entry H : sorted xs H0 : sorted ys e'', e' : entry H11 : eTerm e'' = eTerm e' H7 : eIndex e'' = eIndex e' H1 : eIndex e'' > maxIndex xs H2 : entries_match ys xs H3 : forall y : entry, In y ys -> eTerm e'' = eTerm y -> In y xs leaderLogs_contiguous_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaderLogs_contiguous net leaderLogs_sublog_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaderLogs_sublog net handleAppendEntries_logs_sorted : forall (net : network) (p : packet) (t : term) (n : name) (pli : logIndex) (plt : term) (es : list entry) (ci : logIndex) (st' : raft_data) (m : msg), raft_intermediate_reachable net -> logs_sorted net -> handleAppendEntries (pDst p) (nwState net (pDst p)) t n pli plt es ci = (st', m) -> pBody p = AppendEntries t n pli plt es ci -> In p (nwPackets net) -> sorted (log st') handleClientRequest_logs_sorted : forall (h : name) (client : clientId) (id : nat) (c : input) (out : list raft_output) (st : raft_data) (l : list (name * msg)) (net : network), handleClientRequest h (nwState net h) client id c = (out, st, l) -> raft_intermediate_reachable net -> logs_sorted_host net -> sorted (log st) logs_sorted_invariant : forall net : network, raft_intermediate_reachable net -> logs_sorted net leaderLogs_sorted_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaderLogs_sorted net leaderLogs_term_sanity_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaderLogs_term_sanity net leaderLogs_currentTerm_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaderLogs_currentTerm_sanity net leaderLogs_currentTerm_sanity_candidate_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaderLogs_currentTerm_sanity_candidate net log_matching_invariant : forall net : network, raft_intermediate_reachable net -> log_matching net refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (deghost net) H5 : forall net : network, refined_raft_intermediate_reachable net -> terms_and_indices_from_one_ll net H6 : forall net : network, refined_raft_intermediate_reachable net -> terms_and_indices_from_one_vwl net H4 : forall (xs : list entry) (a : entry), sorted xs -> (forall a' : entry, In a' xs -> eIndex a > eIndex a' /\\\\ eTerm a >= eTerm a') -> sorted xs H9 : forall (xs : list entry) (a : entry), sorted xs -> (forall a' : entry, In a' xs -> eIndex a > eIndex a' /\\\\ eTerm a >= eTerm a') -> forall e' : entry, In e' xs -> eTerm a >= eTerm e' H10 : forall (xs : list entry) (a : entry), sorted xs -> (forall a' : entry, In a' xs -> eIndex a > eIndex a' /\\\\ eTerm a >= eTerm a') -> forall e' : entry, In e' xs -> eIndex a > eIndex e' H14 : In e' ys H15 : eIndex e'' <= eIndex e'' Unable to unify \"(fix In (a : entry) (l : list entry) {struct l} : Prop := match l with | [] => False | b :: m => b = a \\\\/ In a m end) ?M123488 xs\" with \"(fix In (a : entry) (l : list entry) {struct l} : Prop := match l with | [] => False | b :: m => b = a \\\\/ In a m end) e'' ys\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros.", "qsimpl use: entries_match_scratch.", "qsimpl use: sorted_cons,entries_match_scratch.", "qsimpl use: sorted_cons,removeAfterIndex_le_In,entries_match_scratch.", "apply entries_match_sym in H2.", "qsimpl use: sorted_cons,removeAfterIndex_le_In,entries_match_scratch.", "qsimpl use: sorted_cons,removeAfterIndex_le_In,entries_match_scratch.", "qsimpl use: sorted_cons,removeAfterIndex_le_In,entries_match_scratch.", "split.", "++", "intros.", "qsimpl use: sorted_cons,removeAfterIndex_In_le,removeAfterIndex_le_In,entries_match_scratch.", "qsimpl use: removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym.", "qsimpl use: removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym.", "***", "qsimpl use: removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym."], "tactic": "***", "exn": "Wrong bullet ***: Current bullet *** is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["intros.", "qsimpl use: entries_match_scratch.", "qsimpl use: sorted_cons,entries_match_scratch.", "qsimpl use: sorted_cons,removeAfterIndex_le_In,entries_match_scratch.", "apply entries_match_sym in H2.", "qsimpl use: sorted_cons,removeAfterIndex_le_In,entries_match_scratch.", "qsimpl use: sorted_cons,removeAfterIndex_le_In,entries_match_scratch.", "qsimpl use: sorted_cons,removeAfterIndex_le_In,entries_match_scratch.", "split.", "++", "intros.", "qsimpl use: sorted_cons,removeAfterIndex_In_le,removeAfterIndex_le_In,entries_match_scratch.", "qsimpl use: removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym.", "qsimpl use: removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym.", "***", "qsimpl use: removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym.", "shelve.", "***"], "tactic": "apply H7; auto.", "exn": "In environment orig_base_params : BaseParams raft_params : RaftParams orig_base_params H20 : forall (es ys : list entry) (plt : term), sorted es -> uniqueIndices ys -> (forall e1 e2 : entry, eIndex e1 = eIndex e2 -> eTerm e1 = eTerm e2 -> In e1 es -> In e2 ys -> (forall e3 : entry, eIndex e3 <= eIndex e1 -> In e3 es -> In e3 ys) /\\\\ ((0 = 0 -> False) -> exists e4 : entry, eIndex e4 = 0 /\\\\ eTerm e4 = plt /\\\\ In e4 ys)) -> (forall i : nat, 0 < i <= maxIndex es -> exists e : entry, eIndex e = i /\\\\ In e es) -> (forall e : entry, In e es -> 0 < eIndex e) -> (forall y : entry, In y ys -> 0 < eIndex y) -> entries_match es ys H19 : forall (xs : list entry) (i : nat) (x : entry), eIndex x <= i -> In x xs -> In x (removeAfterIndex xs i) H18 : forall (xs : list entry) (i : logIndex) (x : entry), sorted xs -> In x (removeAfterIndex xs i) -> eIndex x <= i one_node_params : OneNodeParams orig_base_params xs, ys : list entry H : sorted xs H0 : sorted ys e : entry H1 : eIndex e > maxIndex xs H2 : entries_match ys xs H3 : forall y : entry, In y ys -> eTerm e = eTerm y -> In y xs leaderLogs_contiguous_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaderLogs_contiguous net leaderLogs_sublog_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaderLogs_sublog net handleAppendEntries_logs_sorted : forall (net : network) (p : packet) (t : term) (n : name) (pli : logIndex) (plt : term) (es : list entry) (ci : logIndex) (st' : raft_data) (m : msg), raft_intermediate_reachable net -> logs_sorted net -> handleAppendEntries (pDst p) (nwState net (pDst p)) t n pli plt es ci = (st', m) -> pBody p = AppendEntries t n pli plt es ci -> In p (nwPackets net) -> sorted (log st') handleClientRequest_logs_sorted : forall (h : name) (client : clientId) (id : nat) (c : input) (out : list raft_output) (st : raft_data) (l : list (name * msg)) (net : network), handleClientRequest h (nwState net h) client id c = (out, st, l) -> raft_intermediate_reachable net -> logs_sorted_host net -> sorted (log st) logs_sorted_invariant : forall net : network, raft_intermediate_reachable net -> logs_sorted net leaderLogs_sorted_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaderLogs_sorted net leaderLogs_term_sanity_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaderLogs_term_sanity net leaderLogs_currentTerm_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaderLogs_currentTerm_sanity net leaderLogs_currentTerm_sanity_candidate_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaderLogs_currentTerm_sanity_candidate net log_matching_invariant : forall net : network, raft_intermediate_reachable net -> log_matching net refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (deghost net) H5 : forall net : network, refined_raft_intermediate_reachable net -> terms_and_indices_from_one_ll net H6 : forall net : network, refined_raft_intermediate_reachable net -> terms_and_indices_from_one_vwl net H4 : forall (xs : list entry) (a : entry), sorted xs -> (forall a' : entry, In a' xs -> eIndex a > eIndex a' /\\\\ eTerm a >= eTerm a') -> sorted xs H9 : forall (xs : list entry) (a : entry), sorted xs -> (forall a' : entry, In a' xs -> eIndex a > eIndex a' /\\\\ eTerm a >= eTerm a') -> forall e' : entry, In e' xs -> eTerm a >= eTerm e' H10 : forall (xs : list entry) (a : entry), sorted xs -> (forall a' : entry, In a' xs -> eIndex a > eIndex a' /\\\\ eTerm a >= eTerm a') -> forall e' : entry, In e' xs -> eIndex a > eIndex e' e', e'' : entry H7 : eIndex e = eIndex e' H11 : eTerm e = eTerm e' H14 : In e' ys H15 : eIndex e'' <= eIndex e H12 : In e'' xs Unable to unify \"eIndex e = eIndex e'\" with \"In e'' ys\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros.", "qsimpl use: entries_match_scratch.", "qsimpl use: sorted_cons,entries_match_scratch.", "qsimpl use: sorted_cons,removeAfterIndex_le_In,entries_match_scratch.", "apply entries_match_sym in H2.", "qsimpl use: sorted_cons,removeAfterIndex_le_In,entries_match_scratch.", "qsimpl use: sorted_cons,removeAfterIndex_le_In,entries_match_scratch.", "qsimpl use: sorted_cons,removeAfterIndex_le_In,entries_match_scratch.", "split.", "++", "intros.", "qsimpl use: sorted_cons,removeAfterIndex_In_le,removeAfterIndex_le_In,entries_match_scratch.", "qsimpl use: removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym.", "qsimpl use: removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym.", "***", "qsimpl use: removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym.", "shelve.", "***", "qsimpl use: removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym."], "tactic": "++", "exn": "Wrong bullet ++: Current bullet *** is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["intros.", "qsimpl use: entries_match_scratch.", "qsimpl use: sorted_cons,entries_match_scratch.", "qsimpl use: sorted_cons,removeAfterIndex_le_In,entries_match_scratch.", "apply entries_match_sym in H2.", "qsimpl use: sorted_cons,removeAfterIndex_le_In,entries_match_scratch.", "qsimpl use: sorted_cons,removeAfterIndex_le_In,entries_match_scratch.", "qsimpl use: sorted_cons,removeAfterIndex_le_In,entries_match_scratch.", "split.", "++", "intros.", "qsimpl use: sorted_cons,removeAfterIndex_In_le,removeAfterIndex_le_In,entries_match_scratch.", "qsimpl use: removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym.", "qsimpl use: removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym.", "***", "qsimpl use: removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym.", "shelve.", "***", "qsimpl use: removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym.", "shelve."], "tactic": "++", "exn": "Wrong bullet ++: Expecting ***.", "type": "wrong_bullet", "handled": true}, {"ctx": ["intros.", "qsimpl use: entries_match_scratch.", "qsimpl use: sorted_cons,entries_match_scratch.", "qsimpl use: sorted_cons,removeAfterIndex_le_In,entries_match_scratch.", "apply entries_match_sym in H2.", "qsimpl use: sorted_cons,removeAfterIndex_le_In,entries_match_scratch.", "qsimpl use: sorted_cons,removeAfterIndex_le_In,entries_match_scratch.", "qsimpl use: sorted_cons,removeAfterIndex_le_In,entries_match_scratch.", "split.", "++", "intros.", "qsimpl use: sorted_cons,removeAfterIndex_In_le,removeAfterIndex_le_In,entries_match_scratch.", "qsimpl use: removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym.", "qsimpl use: removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym.", "***", "qsimpl use: removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym.", "shelve.", "***", "qsimpl use: removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym.", "shelve.", "***"], "tactic": "destruct (pli =? 0) eqn:Heq.", "exn": "The reference pli was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros.", "qsimpl use: entries_match_scratch.", "qsimpl use: sorted_cons,entries_match_scratch.", "qsimpl use: sorted_cons,removeAfterIndex_le_In,entries_match_scratch.", "apply entries_match_sym in H2.", "qsimpl use: sorted_cons,removeAfterIndex_le_In,entries_match_scratch.", "qsimpl use: sorted_cons,removeAfterIndex_le_In,entries_match_scratch.", "qsimpl use: sorted_cons,removeAfterIndex_le_In,entries_match_scratch.", "split.", "++", "intros.", "qsimpl use: sorted_cons,removeAfterIndex_In_le,removeAfterIndex_le_In,entries_match_scratch.", "qsimpl use: removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym.", "qsimpl use: removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym.", "***", "qsimpl use: removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym.", "shelve.", "***", "qsimpl use: removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym.", "shelve.", "***"], "tactic": "apply Nat.eqb_eq in Heq.", "exn": "No such hypothesis: Heq", "type": "no_hypos", "handled": true}, {"ctx": ["intros.", "qsimpl use: entries_match_scratch.", "qsimpl use: sorted_cons,entries_match_scratch.", "qsimpl use: sorted_cons,removeAfterIndex_le_In,entries_match_scratch.", "apply entries_match_sym in H2.", "qsimpl use: sorted_cons,removeAfterIndex_le_In,entries_match_scratch.", "qsimpl use: sorted_cons,removeAfterIndex_le_In,entries_match_scratch.", "qsimpl use: sorted_cons,removeAfterIndex_le_In,entries_match_scratch.", "split.", "++", "intros.", "qsimpl use: sorted_cons,removeAfterIndex_In_le,removeAfterIndex_le_In,entries_match_scratch.", "qsimpl use: removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym.", "qsimpl use: removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym.", "***", "qsimpl use: removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym.", "shelve.", "***", "qsimpl use: removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym.", "shelve.", "***", "qsimpl use: removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym."], "tactic": "exists x0.", "exn": "The reference x0 was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros.", "qsimpl use: entries_match_scratch.", "qsimpl use: sorted_cons,entries_match_scratch.", "qsimpl use: sorted_cons,removeAfterIndex_le_In,entries_match_scratch.", "apply entries_match_sym in H2.", "qsimpl use: sorted_cons,removeAfterIndex_le_In,entries_match_scratch.", "qsimpl use: sorted_cons,removeAfterIndex_le_In,entries_match_scratch.", "qsimpl use: sorted_cons,removeAfterIndex_le_In,entries_match_scratch.", "split.", "++", "intros.", "qsimpl use: sorted_cons,removeAfterIndex_In_le,removeAfterIndex_le_In,entries_match_scratch.", "qsimpl use: removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym.", "qsimpl use: removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym.", "***", "qsimpl use: removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym.", "shelve.", "***", "qsimpl use: removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym.", "shelve.", "***", "qsimpl use: removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym."], "tactic": "rewrite Heq.", "exn": "The reference Heq was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros.", "qsimpl use: entries_match_scratch.", "qsimpl use: sorted_cons,entries_match_scratch.", "qsimpl use: sorted_cons,removeAfterIndex_le_In,entries_match_scratch.", "apply entries_match_sym in H2.", "qsimpl use: sorted_cons,removeAfterIndex_le_In,entries_match_scratch.", "qsimpl use: sorted_cons,removeAfterIndex_le_In,entries_match_scratch.", "qsimpl use: sorted_cons,removeAfterIndex_le_In,entries_match_scratch.", "split.", "++", "intros.", "qsimpl use: sorted_cons,removeAfterIndex_In_le,removeAfterIndex_le_In,entries_match_scratch.", "qsimpl use: removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym.", "qsimpl use: removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym.", "***", "qsimpl use: removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym.", "shelve.", "***", "qsimpl use: removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym.", "shelve.", "***", "qsimpl use: removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym."], "tactic": "apply Nat.eqb_neq in Heq.", "exn": "No such hypothesis: Heq", "type": "no_hypos", "handled": true}, {"ctx": ["intros.", "qsimpl use: entries_match_scratch.", "qsimpl use: sorted_cons,entries_match_scratch.", "qsimpl use: sorted_cons,removeAfterIndex_le_In,entries_match_scratch.", "apply entries_match_sym in H2.", "qsimpl use: sorted_cons,removeAfterIndex_le_In,entries_match_scratch.", "qsimpl use: sorted_cons,removeAfterIndex_le_In,entries_match_scratch.", "qsimpl use: sorted_cons,removeAfterIndex_le_In,entries_match_scratch.", "split.", "++", "intros.", "qsimpl use: sorted_cons,removeAfterIndex_In_le,removeAfterIndex_le_In,entries_match_scratch.", "qsimpl use: removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym.", "qsimpl use: removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym.", "***", "qsimpl use: removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym.", "shelve.", "***", "qsimpl use: removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym.", "shelve.", "***", "qsimpl use: removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym.", "qsimpl use: removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym."], "tactic": "apply H4; auto.", "exn": "In environment orig_base_params : BaseParams raft_params : RaftParams orig_base_params H22 : forall xs ys : list entry, entries_match xs ys -> entries_match ys xs H20 : forall (xs : list entry) (i : logIndex) (x : entry), sorted xs -> In x (removeAfterIndex xs i) -> eIndex x <= i H18 : forall (es ys : list entry) (plt : term), sorted es -> uniqueIndices ys -> (forall e1 e2 : entry, eIndex e1 = eIndex e2 -> eTerm e1 = eTerm e2 -> In e1 es -> In e2 ys -> (forall e3 : entry, eIndex e3 <= eIndex e1 -> In e3 es -> In e3 ys) /\\\\ ((0 = 0 -> False) -> exists e4 : entry, eIndex e4 = 0 /\\\\ eTerm e4 = plt /\\\\ In e4 ys)) -> (forall i : nat, 0 < i <= maxIndex es -> exists e : entry, eIndex e = i /\\\\ In e es) -> (forall e : entry, In e es -> 0 < eIndex e) -> (forall y : entry, In y ys -> 0 < eIndex y) -> entries_match es ys H16 : forall (xs : list entry) (i : nat) (x : entry), eIndex x <= i -> In x xs -> In x (removeAfterIndex xs i) one_node_params : OneNodeParams orig_base_params xs, ys : list entry H : sorted xs H0 : sorted ys e'' : entry H1 : eIndex e'' > maxIndex xs H2 : entries_match ys xs H3 : forall y : entry, In y ys -> eTerm e'' = eTerm y -> In y xs leaderLogs_contiguous_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaderLogs_contiguous net leaderLogs_sublog_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaderLogs_sublog net handleAppendEntries_logs_sorted : forall (net : network) (p : packet) (t : term) (n : name) (pli : logIndex) (plt : term) (es : list entry) (ci : logIndex) (st' : raft_data) (m : msg), raft_intermediate_reachable net -> logs_sorted net -> handleAppendEntries (pDst p) (nwState net (pDst p)) t n pli plt es ci = (st', m) -> pBody p = AppendEntries t n pli plt es ci -> In p (nwPackets net) -> sorted (log st') handleClientRequest_logs_sorted : forall (h : name) (client : clientId) (id : nat) (c : input) (out : list raft_output) (st : raft_data) (l : list (name * msg)) (net : network), handleClientRequest h (nwState net h) client id c = (out, st, l) -> raft_intermediate_reachable net -> logs_sorted_host net -> sorted (log st) logs_sorted_invariant : forall net : network, raft_intermediate_reachable net -> logs_sorted net leaderLogs_sorted_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaderLogs_sorted net leaderLogs_term_sanity_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaderLogs_term_sanity net leaderLogs_currentTerm_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaderLogs_currentTerm_sanity net leaderLogs_currentTerm_sanity_candidate_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaderLogs_currentTerm_sanity_candidate net log_matching_invariant : forall net : network, raft_intermediate_reachable net -> log_matching net refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (deghost net) H5 : forall net : network, refined_raft_intermediate_reachable net -> terms_and_indices_from_one_ll net H6 : forall net : network, refined_raft_intermediate_reachable net -> terms_and_indices_from_one_vwl net H4 : forall (xs : list entry) (a : entry), sorted xs -> (forall a' : entry, In a' xs -> eIndex a > eIndex a' /\\\\ eTerm a >= eTerm a') -> sorted xs H9 : forall (xs : list entry) (a : entry), sorted xs -> (forall a' : entry, In a' xs -> eIndex a > eIndex a' /\\\\ eTerm a >= eTerm a') -> forall e' : entry, In e' xs -> eTerm a >= eTerm e' H10 : forall (xs : list entry) (a : entry), sorted xs -> (forall a' : entry, In a' xs -> eIndex a > eIndex a' /\\\\ eTerm a >= eTerm a') -> forall e' : entry, In e' xs -> eIndex a > eIndex e' e, e' : entry H7 : eIndex e = eIndex e' H11 : eTerm e = eTerm e' H14 : In e' ys H15 : eIndex e'' <= eIndex e H8 : In e xs Unable to unify \"(fix sorted (log : list entry) : Prop := match log with | [] => True | e :: es => (forall e' : entry, In e' es -> eIndex e > eIndex e' /\\\\ eTerm e >= eTerm e') /\\\\ sorted es end) ?M138180\" with \"(fix In (a : entry) (l : list entry) {struct l} : Prop := match l with | [] => False | b :: m => b = a \\\\/ In a m end) e'' ys\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros.", "qsimpl use: entries_match_scratch.", "qsimpl use: sorted_cons,entries_match_scratch.", "qsimpl use: sorted_cons,removeAfterIndex_le_In,entries_match_scratch.", "apply entries_match_sym in H2.", "qsimpl use: sorted_cons,removeAfterIndex_le_In,entries_match_scratch.", "qsimpl use: sorted_cons,removeAfterIndex_le_In,entries_match_scratch.", "qsimpl use: sorted_cons,removeAfterIndex_le_In,entries_match_scratch.", "split.", "++", "intros.", "qsimpl use: sorted_cons,removeAfterIndex_In_le,removeAfterIndex_le_In,entries_match_scratch.", "qsimpl use: removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym.", "qsimpl use: removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym.", "***", "qsimpl use: removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym.", "shelve.", "***", "qsimpl use: removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym.", "shelve.", "***", "qsimpl use: removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym.", "qsimpl use: removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym.", "qsimpl use: removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym."], "tactic": "***", "exn": "Wrong bullet ***: Current bullet *** is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["intros.", "qsimpl use: entries_match_scratch.", "qsimpl use: sorted_cons,entries_match_scratch.", "qsimpl use: sorted_cons,removeAfterIndex_le_In,entries_match_scratch.", "apply entries_match_sym in H2.", "qsimpl use: sorted_cons,removeAfterIndex_le_In,entries_match_scratch.", "qsimpl use: sorted_cons,removeAfterIndex_le_In,entries_match_scratch.", "qsimpl use: sorted_cons,removeAfterIndex_le_In,entries_match_scratch.", "split.", "++", "intros.", "qsimpl use: sorted_cons,removeAfterIndex_In_le,removeAfterIndex_le_In,entries_match_scratch.", "qsimpl use: removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym.", "qsimpl use: removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym.", "***", "qsimpl use: removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym.", "shelve.", "***", "qsimpl use: removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym.", "shelve.", "***", "qsimpl use: removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym.", "qsimpl use: removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym.", "qsimpl use: removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym.", "shelve.", "***"], "tactic": "apply Nat.lt_le_incl.", "exn": "In environment orig_base_params : BaseParams raft_params : RaftParams orig_base_params H20 : forall (es ys : list entry) (plt : term), sorted es -> uniqueIndices ys -> (forall e1 e2 : entry, eIndex e1 = eIndex e2 -> eTerm e1 = eTerm e2 -> In e1 es -> In e2 ys -> (forall e3 : entry, eIndex e3 <= eIndex e1 -> In e3 es -> In e3 ys) /\\\\ ((0 = 0 -> False) -> exists e4 : entry, eIndex e4 = 0 /\\\\ eTerm e4 = plt /\\\\ In e4 ys)) -> (forall i : nat, 0 < i <= maxIndex es -> exists e : entry, eIndex e = i /\\\\ In e es) -> (forall e : entry, In e es -> 0 < eIndex e) -> (forall y : entry, In y ys -> 0 < eIndex y) -> entries_match es ys H19 : forall (xs : list entry) (i : nat) (x : entry), eIndex x <= i -> In x xs -> In x (removeAfterIndex xs i) H18 : forall (xs : list entry) (i : logIndex) (x : entry), sorted xs -> In x (removeAfterIndex xs i) -> eIndex x <= i one_node_params : OneNodeParams orig_base_params x : entry xs, ys : list entry H : sorted xs H0 : sorted ys H1 : eIndex x > maxIndex xs H2 : entries_match ys xs H3 : forall y : entry, In y ys -> eTerm x = eTerm y -> In y xs leaderLogs_contiguous_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaderLogs_contiguous net leaderLogs_sublog_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaderLogs_sublog net handleAppendEntries_logs_sorted : forall (net : network) (p : packet) (t : term) (n : name) (pli : logIndex) (plt : term) (es : list entry) (ci : logIndex) (st' : raft_data) (m : msg), raft_intermediate_reachable net -> logs_sorted net -> handleAppendEntries (pDst p) (nwState net (pDst p)) t n pli plt es ci = (st', m) -> pBody p = AppendEntries t n pli plt es ci -> In p (nwPackets net) -> sorted (log st') handleClientRequest_logs_sorted : forall (h : name) (client : clientId) (id : nat) (c : input) (out : list raft_output) (st : raft_data) (l : list (name * msg)) (net : network), handleClientRequest h (nwState net h) client id c = (out, st, l) -> raft_intermediate_reachable net -> logs_sorted_host net -> sorted (log st) logs_sorted_invariant : forall net : network, raft_intermediate_reachable net -> logs_sorted net leaderLogs_sorted_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaderLogs_sorted net leaderLogs_term_sanity_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaderLogs_term_sanity net leaderLogs_currentTerm_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaderLogs_currentTerm_sanity net leaderLogs_currentTerm_sanity_candidate_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaderLogs_currentTerm_sanity_candidate net log_matching_invariant : forall net : network, raft_intermediate_reachable net -> log_matching net refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (deghost net) H5 : forall net : network, refined_raft_intermediate_reachable net -> terms_and_indices_from_one_ll net H6 : forall net : network, refined_raft_intermediate_reachable net -> terms_and_indices_from_one_vwl net H4 : forall (xs : list entry) (a : entry), sorted xs -> (forall a' : entry, In a' xs -> eIndex a > eIndex a' /\\\\ eTerm a >= eTerm a') -> sorted xs H9 : forall (xs : list entry) (a : entry), sorted xs -> (forall a' : entry, In a' xs -> eIndex a > eIndex a' /\\\\ eTerm a >= eTerm a') -> forall e' : entry, In e' xs -> eTerm a >= eTerm e' H10 : forall (xs : list entry) (a : entry), sorted xs -> (forall a' : entry, In a' xs -> eIndex a > eIndex a' /\\\\ eTerm a >= eTerm a') -> forall e' : entry, In e' xs -> eIndex a > eIndex e' e, e', e'' : entry H7 : eIndex e = eIndex e' H11 : eTerm e = eTerm e' H14 : In e' ys H15 : eIndex e'' <= eIndex e H8 : In e xs H12 : In e'' xs Unable to unify \"?M141868 <= ?M141869\" with \"(fix In (a : entry) (l : list entry) {struct l} : Prop := match l with | [] => False | b :: m => b = a \\\\/ In a m end) e'' ys\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros.", "qsimpl use: entries_match_scratch.", "qsimpl use: sorted_cons,entries_match_scratch.", "qsimpl use: sorted_cons,removeAfterIndex_le_In,entries_match_scratch.", "apply entries_match_sym in H2.", "qsimpl use: sorted_cons,removeAfterIndex_le_In,entries_match_scratch.", "qsimpl use: sorted_cons,removeAfterIndex_le_In,entries_match_scratch.", "qsimpl use: sorted_cons,removeAfterIndex_le_In,entries_match_scratch.", "split.", "++", "intros.", "qsimpl use: sorted_cons,removeAfterIndex_In_le,removeAfterIndex_le_In,entries_match_scratch.", "qsimpl use: removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym.", "qsimpl use: removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym.", "***", "qsimpl use: removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym.", "shelve.", "***", "qsimpl use: removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym.", "shelve.", "***", "qsimpl use: removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym.", "qsimpl use: removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym.", "qsimpl use: removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym.", "shelve.", "***", "qsimpl use: removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym."], "tactic": "apply Nat.lt_le_trans with (m:=pli) in H7; auto.", "exn": "The reference pli was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros.", "qsimpl use: entries_match_scratch.", "qsimpl use: sorted_cons,entries_match_scratch.", "qsimpl use: sorted_cons,removeAfterIndex_le_In,entries_match_scratch.", "apply entries_match_sym in H2.", "qsimpl use: sorted_cons,removeAfterIndex_le_In,entries_match_scratch.", "qsimpl use: sorted_cons,removeAfterIndex_le_In,entries_match_scratch.", "qsimpl use: sorted_cons,removeAfterIndex_le_In,entries_match_scratch.", "split.", "++", "intros.", "qsimpl use: sorted_cons,removeAfterIndex_In_le,removeAfterIndex_le_In,entries_match_scratch.", "qsimpl use: removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym.", "qsimpl use: removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym.", "***", "qsimpl use: removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym.", "shelve.", "***", "qsimpl use: removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym.", "shelve.", "***", "qsimpl use: removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym.", "qsimpl use: removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym.", "qsimpl use: removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym.", "shelve.", "***", "qsimpl use: removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym."], "tactic": "apply H7.", "exn": "In environment orig_base_params : BaseParams raft_params : RaftParams orig_base_params H22 : forall xs ys : list entry, entries_match xs ys -> entries_match ys xs H21 : forall (xs : list entry) (i : logIndex) (x : entry), sorted xs -> In x (removeAfterIndex xs i) -> eIndex x <= i H16 : forall (es ys : list entry) (plt : term), sorted es -> uniqueIndices ys -> (forall e1 e2 : entry, eIndex e1 = eIndex e2 -> eTerm e1 = eTerm e2 -> In e1 es -> In e2 ys -> (forall e3 : entry, eIndex e3 <= eIndex e1 -> In e3 es -> In e3 ys) /\\\\ ((0 = 0 -> False) -> exists e4 : entry, eIndex e4 = 0 /\\\\ eTerm e4 = plt /\\\\ In e4 ys)) -> (forall i : nat, 0 < i <= maxIndex es -> exists e : entry, eIndex e = i /\\\\ In e es) -> (forall e : entry, In e es -> 0 < eIndex e) -> (forall y : entry, In y ys -> 0 < eIndex y) -> entries_match es ys H13 : forall (xs : list entry) (i : nat) (x : entry), eIndex x <= i -> In x xs -> In x (removeAfterIndex xs i) one_node_params : OneNodeParams orig_base_params x : entry xs, ys : list entry H : sorted xs H0 : sorted ys H1 : eIndex x > maxIndex xs H2 : entries_match ys xs H3 : forall y : entry, In y ys -> eTerm x = eTerm y -> In y xs leaderLogs_contiguous_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaderLogs_contiguous net leaderLogs_sublog_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaderLogs_sublog net handleAppendEntries_logs_sorted : forall (net : network) (p : packet) (t : term) (n : name) (pli : logIndex) (plt : term) (es : list entry) (ci : logIndex) (st' : raft_data) (m : msg), raft_intermediate_reachable net -> logs_sorted net -> handleAppendEntries (pDst p) (nwState net (pDst p)) t n pli plt es ci = (st', m) -> pBody p = AppendEntries t n pli plt es ci -> In p (nwPackets net) -> sorted (log st') handleClientRequest_logs_sorted : forall (h : name) (client : clientId) (id : nat) (c : input) (out : list raft_output) (st : raft_data) (l : list (name * msg)) (net : network), handleClientRequest h (nwState net h) client id c = (out, st, l) -> raft_intermediate_reachable net -> logs_sorted_host net -> sorted (log st) logs_sorted_invariant : forall net : network, raft_intermediate_reachable net -> logs_sorted net leaderLogs_sorted_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaderLogs_sorted net leaderLogs_term_sanity_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaderLogs_term_sanity net leaderLogs_currentTerm_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaderLogs_currentTerm_sanity net leaderLogs_currentTerm_sanity_candidate_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaderLogs_currentTerm_sanity_candidate net log_matching_invariant : forall net : network, raft_intermediate_reachable net -> log_matching net refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (deghost net) H5 : forall net : network, refined_raft_intermediate_reachable net -> terms_and_indices_from_one_ll net H6 : forall net : network, refined_raft_intermediate_reachable net -> terms_and_indices_from_one_vwl net H4 : forall (xs : list entry) (a : entry), sorted xs -> (forall a' : entry, In a' xs -> eIndex a > eIndex a' /\\\\ eTerm a >= eTerm a') -> sorted xs H9 : forall (xs : list entry) (a : entry), sorted xs -> (forall a' : entry, In a' xs -> eIndex a > eIndex a' /\\\\ eTerm a >= eTerm a') -> forall e' : entry, In e' xs -> eTerm a >= eTerm e' H10 : forall (xs : list entry) (a : entry), sorted xs -> (forall a' : entry, In a' xs -> eIndex a > eIndex a' /\\\\ eTerm a >= eTerm a') -> forall e' : entry, In e' xs -> eIndex a > eIndex e' e, e', e'' : entry H7 : eIndex e = eIndex e' H11 : eTerm e = eTerm e' H14 : In e' ys H15 : eIndex e'' <= eIndex e H8 : In e xs H12 : In e'' xs Unable to unify \"eIndex e = eIndex e'\" with \"In e'' ys\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros.", "qsimpl use: entries_match_scratch.", "qsimpl use: sorted_cons,entries_match_scratch.", "qsimpl use: sorted_cons,removeAfterIndex_le_In,entries_match_scratch.", "apply entries_match_sym in H2.", "qsimpl use: sorted_cons,removeAfterIndex_le_In,entries_match_scratch.", "qsimpl use: sorted_cons,removeAfterIndex_le_In,entries_match_scratch.", "qsimpl use: sorted_cons,removeAfterIndex_le_In,entries_match_scratch.", "split.", "++", "intros.", "qsimpl use: sorted_cons,removeAfterIndex_In_le,removeAfterIndex_le_In,entries_match_scratch.", "qsimpl use: removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym.", "qsimpl use: removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym.", "***", "qsimpl use: removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym.", "shelve.", "***", "qsimpl use: removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym.", "shelve.", "***", "qsimpl use: removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym.", "qsimpl use: removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym.", "qsimpl use: removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym.", "shelve.", "***", "qsimpl use: removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym.", "qsimpl use: removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym."], "tactic": "apply H3; auto.", "exn": "In environment orig_base_params : BaseParams raft_params : RaftParams orig_base_params H23 : forall xs ys : list entry, entries_match xs ys -> entries_match ys xs H20 : forall (xs : list entry) (i : logIndex) (x : entry), sorted xs -> In x (removeAfterIndex xs i) -> eIndex x <= i H18 : forall (es ys : list entry) (plt : term), sorted es -> uniqueIndices ys -> (forall e1 e2 : entry, eIndex e1 = eIndex e2 -> eTerm e1 = eTerm e2 -> In e1 es -> In e2 ys -> (forall e3 : entry, eIndex e3 <= eIndex e1 -> In e3 es -> In e3 ys) /\\\\ ((0 = 0 -> False) -> exists e4 : entry, eIndex e4 = 0 /\\\\ eTerm e4 = plt /\\\\ In e4 ys)) -> (forall i : nat, 0 < i <= maxIndex es -> exists e : entry, eIndex e = i /\\\\ In e es) -> (forall e : entry, In e es -> 0 < eIndex e) -> (forall y : entry, In y ys -> 0 < eIndex y) -> entries_match es ys H17 : forall (xs : list entry) (i : nat) (x : entry), eIndex x <= i -> In x xs -> In x (removeAfterIndex xs i) one_node_params : OneNodeParams orig_base_params x : entry xs, ys : list entry H : sorted xs H0 : sorted ys H1 : eIndex x > maxIndex xs H2 : entries_match ys xs H3 : forall y : entry, In y ys -> eTerm x = eTerm y -> In y xs leaderLogs_contiguous_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaderLogs_contiguous net leaderLogs_sublog_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaderLogs_sublog net handleAppendEntries_logs_sorted : forall (net : network) (p : packet) (t : term) (n : name) (pli : logIndex) (plt : term) (es : list entry) (ci : logIndex) (st' : raft_data) (m : msg), raft_intermediate_reachable net -> logs_sorted net -> handleAppendEntries (pDst p) (nwState net (pDst p)) t n pli plt es ci = (st', m) -> pBody p = AppendEntries t n pli plt es ci -> In p (nwPackets net) -> sorted (log st') handleClientRequest_logs_sorted : forall (h : name) (client : clientId) (id : nat) (c : input) (out : list raft_output) (st : raft_data) (l : list (name * msg)) (net : network), handleClientRequest h (nwState net h) client id c = (out, st, l) -> raft_intermediate_reachable net -> logs_sorted_host net -> sorted (log st) logs_sorted_invariant : forall net : network, raft_intermediate_reachable net -> logs_sorted net leaderLogs_sorted_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaderLogs_sorted net leaderLogs_term_sanity_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaderLogs_term_sanity net leaderLogs_currentTerm_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaderLogs_currentTerm_sanity net leaderLogs_currentTerm_sanity_candidate_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaderLogs_currentTerm_sanity_candidate net log_matching_invariant : forall net : network, raft_intermediate_reachable net -> log_matching net refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (deghost net) H5 : forall net : network, refined_raft_intermediate_reachable net -> terms_and_indices_from_one_ll net H6 : forall net : network, refined_raft_intermediate_reachable net -> terms_and_indices_from_one_vwl net H4 : forall (xs : list entry) (a : entry), sorted xs -> (forall a' : entry, In a' xs -> eIndex a > eIndex a' /\\\\ eTerm a >= eTerm a') -> sorted xs H9 : forall (xs : list entry) (a : entry), sorted xs -> (forall a' : entry, In a' xs -> eIndex a > eIndex a' /\\\\ eTerm a >= eTerm a') -> forall e' : entry, In e' xs -> eTerm a >= eTerm e' H10 : forall (xs : list entry) (a : entry), sorted xs -> (forall a' : entry, In a' xs -> eIndex a > eIndex a' /\\\\ eTerm a >= eTerm a') -> forall e' : entry, In e' xs -> eIndex a > eIndex e' e, e', e'' : entry H7 : eIndex e = eIndex e' H11 : eTerm e = eTerm e' H14 : In e' ys H15 : eIndex e'' <= eIndex e H8 : In e xs H12 : In e'' xs Unable to unify \"(fix In (a : entry) (l : list entry) {struct l} : Prop := match l with | [] => False | b :: m => b = a \\\\/ In a m end) ?M149294 xs\" with \"(fix In (a : entry) (l : list entry) {struct l} : Prop := match l with | [] => False | b :: m => b = a \\\\/ In a m end) e'' ys\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros.", "qsimpl use: entries_match_scratch.", "qsimpl use: sorted_cons,entries_match_scratch.", "qsimpl use: sorted_cons,removeAfterIndex_le_In,entries_match_scratch.", "apply entries_match_sym in H2.", "qsimpl use: sorted_cons,removeAfterIndex_le_In,entries_match_scratch.", "qsimpl use: sorted_cons,removeAfterIndex_le_In,entries_match_scratch.", "qsimpl use: sorted_cons,removeAfterIndex_le_In,entries_match_scratch.", "split.", "++", "intros.", "qsimpl use: sorted_cons,removeAfterIndex_In_le,removeAfterIndex_le_In,entries_match_scratch.", "qsimpl use: removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym.", "qsimpl use: removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym.", "***", "qsimpl use: removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym.", "shelve.", "***", "qsimpl use: removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym.", "shelve.", "***", "qsimpl use: removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym.", "qsimpl use: removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym.", "qsimpl use: removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym.", "shelve.", "***", "qsimpl use: removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym.", "qsimpl use: removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym.", "qsimpl use: removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym."], "tactic": "apply entries_match_sym in H0.", "exn": "Unable to apply lemma of type \"forall xs0 ys0 : list entry, entries_match xs0 ys0 -> entries_match ys0 xs0\" on hypothesis of type \"sorted ys\".", "type": "cannot_apply_in", "handled": true}, {"ctx": ["intros.", "qsimpl use: entries_match_scratch.", "qsimpl use: sorted_cons,entries_match_scratch.", "qsimpl use: sorted_cons,removeAfterIndex_le_In,entries_match_scratch.", "apply entries_match_sym in H2.", "qsimpl use: sorted_cons,removeAfterIndex_le_In,entries_match_scratch.", "qsimpl use: sorted_cons,removeAfterIndex_le_In,entries_match_scratch.", "qsimpl use: sorted_cons,removeAfterIndex_le_In,entries_match_scratch.", "split.", "++", "intros.", "qsimpl use: sorted_cons,removeAfterIndex_In_le,removeAfterIndex_le_In,entries_match_scratch.", "qsimpl use: removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym.", "qsimpl use: removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym.", "***", "qsimpl use: removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym.", "shelve.", "***", "qsimpl use: removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym.", "shelve.", "***", "qsimpl use: removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym.", "qsimpl use: removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym.", "qsimpl use: removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym.", "shelve.", "***", "qsimpl use: removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym.", "qsimpl use: removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym.", "qsimpl use: removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym.", "qsimpl use: removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym."], "tactic": "apply entries_match_entries_match' in H0.", "exn": "Unable to apply lemma of type \"forall xs0 ys0 : list entry, entries_match xs0 ys0 -> entries_match' xs0 ys0 /\\\\ entries_match' ys0 xs0\" on hypothesis of type \"sorted ys\".", "type": "cannot_apply_in", "handled": true}, {"ctx": ["intros.", "qsimpl use: entries_match_scratch.", "qsimpl use: sorted_cons,entries_match_scratch.", "qsimpl use: sorted_cons,removeAfterIndex_le_In,entries_match_scratch.", "apply entries_match_sym in H2.", "qsimpl use: sorted_cons,removeAfterIndex_le_In,entries_match_scratch.", "qsimpl use: sorted_cons,removeAfterIndex_le_In,entries_match_scratch.", "qsimpl use: sorted_cons,removeAfterIndex_le_In,entries_match_scratch.", "split.", "++", "intros.", "qsimpl use: sorted_cons,removeAfterIndex_In_le,removeAfterIndex_le_In,entries_match_scratch.", "qsimpl use: removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym.", "qsimpl use: removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym.", "***", "qsimpl use: removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym.", "shelve.", "***", "qsimpl use: removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym.", "shelve.", "***", "qsimpl use: removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym.", "qsimpl use: removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym.", "qsimpl use: removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym.", "shelve.", "***", "qsimpl use: removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym.", "qsimpl use: removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym.", "qsimpl use: removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym.", "qsimpl use: removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym.", "qsimpl use: entries_match_entries_match',removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym."], "tactic": "apply entries_match' in H1.", "exn": "Unable to apply lemma of type \"list entry -> list entry -> Prop\" on hypothesis of type \"eIndex x > maxIndex xs\".", "type": "cannot_apply_in", "handled": true}, {"ctx": ["intros.", "qsimpl use: entries_match_scratch.", "qsimpl use: sorted_cons,entries_match_scratch.", "qsimpl use: sorted_cons,removeAfterIndex_le_In,entries_match_scratch.", "apply entries_match_sym in H2.", "qsimpl use: sorted_cons,removeAfterIndex_le_In,entries_match_scratch.", "qsimpl use: sorted_cons,removeAfterIndex_le_In,entries_match_scratch.", "qsimpl use: sorted_cons,removeAfterIndex_le_In,entries_match_scratch.", "split.", "++", "intros.", "qsimpl use: sorted_cons,removeAfterIndex_In_le,removeAfterIndex_le_In,entries_match_scratch.", "qsimpl use: removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym.", "qsimpl use: removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym.", "***", "qsimpl use: removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym.", "shelve.", "***", "qsimpl use: removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym.", "shelve.", "***", "qsimpl use: removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym.", "qsimpl use: removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym.", "qsimpl use: removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym.", "shelve.", "***", "qsimpl use: removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym.", "qsimpl use: removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym.", "qsimpl use: removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym.", "qsimpl use: removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym.", "qsimpl use: entries_match_entries_match',removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym.", "qsimpl use: entries_match_entries_match',removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym,entries_match'."], "tactic": "apply entries_match' in H2.", "exn": "Unable to apply lemma of type \"list entry -> list entry -> Prop\" on hypothesis of type \"entries_match ys xs\".", "type": "cannot_apply_in", "handled": true}, {"ctx": ["intros.", "qsimpl use: entries_match_scratch.", "qsimpl use: sorted_cons,entries_match_scratch.", "qsimpl use: sorted_cons,removeAfterIndex_le_In,entries_match_scratch.", "apply entries_match_sym in H2.", "qsimpl use: sorted_cons,removeAfterIndex_le_In,entries_match_scratch.", "qsimpl use: sorted_cons,removeAfterIndex_le_In,entries_match_scratch.", "qsimpl use: sorted_cons,removeAfterIndex_le_In,entries_match_scratch.", "split.", "++", "intros.", "qsimpl use: sorted_cons,removeAfterIndex_In_le,removeAfterIndex_le_In,entries_match_scratch.", "qsimpl use: removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym.", "qsimpl use: removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym.", "***", "qsimpl use: removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym.", "shelve.", "***", "qsimpl use: removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym.", "shelve.", "***", "qsimpl use: removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym.", "qsimpl use: removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym.", "qsimpl use: removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym.", "shelve.", "***", "qsimpl use: removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym.", "qsimpl use: removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym.", "qsimpl use: removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym.", "qsimpl use: removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym.", "qsimpl use: entries_match_entries_match',removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym.", "qsimpl use: entries_match_entries_match',removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym,entries_match'.", "qsimpl use: entries_match_entries_match',removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym,entries_match'."], "tactic": "destruct H0.", "exn": "Not an inductive product.", "type": "not_inductive_product", "handled": true}, {"ctx": ["intros.", "qsimpl use: entries_match_scratch.", "qsimpl use: sorted_cons,entries_match_scratch.", "qsimpl use: sorted_cons,removeAfterIndex_le_In,entries_match_scratch.", "apply entries_match_sym in H2.", "qsimpl use: sorted_cons,removeAfterIndex_le_In,entries_match_scratch.", "qsimpl use: sorted_cons,removeAfterIndex_le_In,entries_match_scratch.", "qsimpl use: sorted_cons,removeAfterIndex_le_In,entries_match_scratch.", "split.", "++", "intros.", "qsimpl use: sorted_cons,removeAfterIndex_In_le,removeAfterIndex_le_In,entries_match_scratch.", "qsimpl use: removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym.", "qsimpl use: removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym.", "***", "qsimpl use: removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym.", "shelve.", "***", "qsimpl use: removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym.", "shelve.", "***", "qsimpl use: removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym.", "qsimpl use: removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym.", "qsimpl use: removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym.", "shelve.", "***", "qsimpl use: removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym.", "qsimpl use: removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym.", "qsimpl use: removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym.", "qsimpl use: removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym.", "qsimpl use: entries_match_entries_match',removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym.", "qsimpl use: entries_match_entries_match',removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym,entries_match'.", "qsimpl use: entries_match_entries_match',removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym,entries_match'.", "qsimpl use: entries_match_entries_match',removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym,entries_match'.", "destruct H1."], "tactic": "destruct H2.", "exn": "Unable to find an instance for the variables e, e', e''.", "type": "no_instance_var", "handled": true}, {"ctx": ["intros.", "qsimpl use: entries_match_scratch.", "qsimpl use: sorted_cons,entries_match_scratch.", "qsimpl use: sorted_cons,removeAfterIndex_le_In,entries_match_scratch.", "apply entries_match_sym in H2.", "qsimpl use: sorted_cons,removeAfterIndex_le_In,entries_match_scratch.", "qsimpl use: sorted_cons,removeAfterIndex_le_In,entries_match_scratch.", "qsimpl use: sorted_cons,removeAfterIndex_le_In,entries_match_scratch.", "split.", "++", "intros.", "qsimpl use: sorted_cons,removeAfterIndex_In_le,removeAfterIndex_le_In,entries_match_scratch.", "qsimpl use: removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym.", "qsimpl use: removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym.", "***", "qsimpl use: removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym.", "shelve.", "***", "qsimpl use: removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym.", "shelve.", "***", "qsimpl use: removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym.", "qsimpl use: removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym.", "qsimpl use: removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym.", "shelve.", "***", "qsimpl use: removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym.", "qsimpl use: removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym.", "qsimpl use: removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym.", "qsimpl use: removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym.", "qsimpl use: entries_match_entries_match',removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym.", "qsimpl use: entries_match_entries_match',removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym,entries_match'.", "qsimpl use: entries_match_entries_match',removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym,entries_match'.", "qsimpl use: entries_match_entries_match',removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym,entries_match'.", "destruct H1.", "qsimpl use: entries_match_entries_match',removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym,entries_match'."], "tactic": "apply H1 in H0.", "exn": "The reference H1 was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros.", "qsimpl use: entries_match_scratch.", "qsimpl use: sorted_cons,entries_match_scratch.", "qsimpl use: sorted_cons,removeAfterIndex_le_In,entries_match_scratch.", "apply entries_match_sym in H2.", "qsimpl use: sorted_cons,removeAfterIndex_le_In,entries_match_scratch.", "qsimpl use: sorted_cons,removeAfterIndex_le_In,entries_match_scratch.", "qsimpl use: sorted_cons,removeAfterIndex_le_In,entries_match_scratch.", "split.", "++", "intros.", "qsimpl use: sorted_cons,removeAfterIndex_In_le,removeAfterIndex_le_In,entries_match_scratch.", "qsimpl use: removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym.", "qsimpl use: removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym.", "***", "qsimpl use: removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym.", "shelve.", "***", "qsimpl use: removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym.", "shelve.", "***", "qsimpl use: removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym.", "qsimpl use: removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym.", "qsimpl use: removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym.", "shelve.", "***", "qsimpl use: removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym.", "qsimpl use: removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym.", "qsimpl use: removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym.", "qsimpl use: removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym.", "qsimpl use: entries_match_entries_match',removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym.", "qsimpl use: entries_match_entries_match',removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym,entries_match'.", "qsimpl use: entries_match_entries_match',removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym,entries_match'.", "qsimpl use: entries_match_entries_match',removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym,entries_match'.", "destruct H1.", "qsimpl use: entries_match_entries_match',removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym,entries_match'."], "tactic": "apply H2 in H.", "exn": "Unable to apply lemma of type \"entries_match ys xs\" on hypothesis of type \"sorted xs\".", "type": "cannot_apply_in", "handled": true}, {"ctx": ["intros.", "qsimpl use: entries_match_scratch.", "qsimpl use: sorted_cons,entries_match_scratch.", "qsimpl use: sorted_cons,removeAfterIndex_le_In,entries_match_scratch.", "apply entries_match_sym in H2.", "qsimpl use: sorted_cons,removeAfterIndex_le_In,entries_match_scratch.", "qsimpl use: sorted_cons,removeAfterIndex_le_In,entries_match_scratch.", "qsimpl use: sorted_cons,removeAfterIndex_le_In,entries_match_scratch.", "split.", "++", "intros.", "qsimpl use: sorted_cons,removeAfterIndex_In_le,removeAfterIndex_le_In,entries_match_scratch.", "qsimpl use: removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym.", "qsimpl use: removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym.", "***", "qsimpl use: removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym.", "shelve.", "***", "qsimpl use: removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym.", "shelve.", "***", "qsimpl use: removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym.", "qsimpl use: removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym.", "qsimpl use: removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym.", "shelve.", "***", "qsimpl use: removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym.", "qsimpl use: removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym.", "qsimpl use: removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym.", "qsimpl use: removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym.", "qsimpl use: entries_match_entries_match',removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym.", "qsimpl use: entries_match_entries_match',removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym,entries_match'.", "qsimpl use: entries_match_entries_match',removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym,entries_match'.", "qsimpl use: entries_match_entries_match',removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym,entries_match'.", "destruct H1.", "qsimpl use: entries_match_entries_match',removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym,entries_match'.", "qsimpl use: entries_match_entries_match',removeAfterIndex_le_In,entries_match_scratch,sorted_cons,removeAfterIndex_In_le,entries_match_sym,entries_match'."], "tactic": "apply H3.", "exn": "In environment orig_base_params : BaseParams raft_params : RaftParams orig_base_params H25 : forall xs ys : list entry, entries_match xs ys -> entries_match ys xs H24 : forall (xs : list entry) (i : logIndex) (x : entry), sorted xs -> In x (removeAfterIndex xs i) -> eIndex x <= i H20 : forall (es ys : list entry) (plt : term), sorted es -> uniqueIndices ys -> (forall e1 e2 : entry, eIndex e1 = eIndex e2 -> eTerm e1 = eTerm e2 -> In e1 es -> In e2 ys -> (forall e3 : entry, eIndex e3 <= eIndex e1 -> In e3 es -> In e3 ys) /\\\\ ((0 = 0 -> False) -> exists e4 : entry, eIndex e4 = 0 /\\\\ eTerm e4 = plt /\\\\ In e4 ys)) -> (forall i : nat, 0 < i <= maxIndex es -> exists e : entry, eIndex e = i /\\\\ In e es) -> (forall e : entry, In e es -> 0 < eIndex e) -> (forall y : entry, In y ys -> 0 < eIndex y) -> entries_match es ys H19 : forall (xs : list entry) (i : nat) (x : entry), eIndex x <= i -> In x xs -> In x (removeAfterIndex xs i) one_node_params : OneNodeParams orig_base_params x : entry xs, ys : list entry H : sorted xs H0 : sorted ys H2 : entries_match ys xs H3 : forall y : entry, In y ys -> eTerm x = eTerm y -> In y xs leaderLogs_contiguous_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaderLogs_contiguous net leaderLogs_sublog_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaderLogs_sublog net handleAppendEntries_logs_sorted : forall (net : network) (p : packet) (t : term) (n : name) (pli : logIndex) (plt : term) (es : list entry) (ci : logIndex) (st' : raft_data) (m : msg), raft_intermediate_reachable net -> logs_sorted net -> handleAppendEntries (pDst p) (nwState net (pDst p)) t n pli plt es ci = (st', m) -> pBody p = AppendEntries t n pli plt es ci -> In p (nwPackets net) -> sorted (log st') handleClientRequest_logs_sorted : forall (h : name) (client : clientId) (id : nat) (c : input) (out : list raft_output) (st : raft_data) (l : list (name * msg)) (net : network), handleClientRequest h (nwState net h) client id c = (out, st, l) -> raft_intermediate_reachable net -> logs_sorted_host net -> sorted (log st) logs_sorted_invariant : forall net : network, raft_intermediate_reachable net -> logs_sorted net leaderLogs_sorted_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaderLogs_sorted net leaderLogs_term_sanity_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaderLogs_term_sanity net leaderLogs_currentTerm_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaderLogs_currentTerm_sanity net leaderLogs_currentTerm_sanity_candidate_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaderLogs_currentTerm_sanity_candidate net log_matching_invariant : forall net : network, raft_intermediate_reachable net -> log_matching net refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (deghost net) H5 : forall net : network, refined_raft_intermediate_reachable net -> terms_and_indices_from_one_ll net H6 : forall net : network, refined_raft_intermediate_reachable net -> terms_and_indices_from_one_vwl net H4 : forall (xs : list entry) (a : entry), sorted xs -> (forall a' : entry, In a' xs -> eIndex a > eIndex a' /\\\\ eTerm a >= eTerm a') -> sorted xs H9 : forall (xs : list entry) (a : entry), sorted xs -> (forall a' : entry, In a' xs -> eIndex a > eIndex a' /\\\\ eTerm a >= eTerm a') -> forall e' : entry, In e' xs -> eTerm a >= eTerm e' H10 : forall (xs : list entry) (a : entry), sorted xs -> (forall a' : entry, In a' xs -> eIndex a > eIndex a' /\\\\ eTerm a >= eTerm a') -> forall e' : entry, In e' xs -> eIndex a > eIndex e' e, e', e'' : entry H7 : eIndex e = eIndex e' H11 : eTerm e = eTerm e' H14 : In e' ys H15 : eIndex e'' <= eIndex e H8 : In e xs H12 : In e'' xs H13 : forall xs ys : list entry, entries_match xs ys -> entries_match' ys xs H17 : forall xs ys : list entry, entries_match xs ys -> entries_match' xs ys X, X0, X1, X2, X3 : Prop Unable to unify \"(fix In (a : entry) (l : list entry) {struct l} : Prop := match l with | [] => False | b :: m => b = a \\\\/ In a m end) ?M179966 xs\" with \"(fix In (a : entry) (l : list entry) {struct l} : Prop := match l with | [] => False | b :: m => b = a \\\\/ In a m end) e'' ys\".", "type": "cannot_unify", "handled": true}]}, "chat": [], "original": "simpl. intros. intros. intros. intros. intros. intros. intros. intros. intros. intros. intros. intros. intros. intros. intros. intros. intros. intros. intros. intros. intros. intros. intros. intros. intros. intros. intros. intros. intros. intros. intros. intros. - intros. apply entries_match_scratch; auto. * apply sorted_cons; auto. + intros. apply removeAfterIndex_le_In; auto. ** apply entries_match_sym in H2. apply removeAfterIndex_In_le with (i:=eIndex y0) in H2; auto. apply H2. apply H4. ** apply H4. * intros. intros. split. ++ intros. apply removeAfterIndex_In_le in H2. apply entries_match_sym in H5. apply removeAfterIndex_le_In with (i:=i) in H5; auto. apply H5. *** apply H3; auto. *** apply H7; auto. ++ destruct (pli =? 0) eqn:Heq. ** apply Nat.eqb_eq in Heq. exists x0. rewrite Heq. auto. ** apply Nat.eqb_neq in Heq. apply H4; auto. *** intros. apply Nat.lt_le_incl. apply Nat.lt_le_trans with (m:=pli) in H7; auto. **** apply H7. **** apply H3; auto. - intros. intros. apply entries_match_sym in H0. apply entries_match_entries_match' in H0. apply entries_match' in H1. apply entries_match' in H2. destruct H0. destruct H1. destruct H2. apply H1 in H0. apply H2 in H. apply H3. auto.", "succ": false}]