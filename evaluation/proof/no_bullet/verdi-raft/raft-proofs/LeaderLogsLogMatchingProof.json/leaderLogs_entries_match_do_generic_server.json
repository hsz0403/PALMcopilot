[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": ["unfold refined_raft_net_invariant_do_generic_server."], "tactic": "intros orig_base_params one_node_params raft_params P net st' ps' gd d os d' ms h HdoGenericServer HP Hrefined HnwState Hst' HpacketSubset.", "exn": "orig_base_params is already used.", "type": "used_var", "handled": true}, {"ctx": ["unfold refined_raft_net_invariant_do_generic_server."], "tactic": "intros orig_base_params' one_node_params raft_params P net st' ps' gd d os d' ms h HdoGenericServer HP Hrefined HnwState Hst' HpacketSubset.", "exn": "one_node_params is already used.", "type": "used_var", "handled": true}, {"ctx": ["unfold refined_raft_net_invariant_do_generic_server."], "tactic": "intros orig_base_params' one_node_params' raft_params P net st' ps' gd d os d' ms h HdoGenericServer HP Hrefined HnwState Hst' HpacketSubset.", "exn": "raft_params is already used.", "type": "used_var", "handled": true}, {"ctx": ["unfold refined_raft_net_invariant_do_generic_server."], "tactic": "intros orig_base_params' one_node_params' raft_params' P net st' ps' gd d os d' ms h HdoGenericServer HP Hrefined HnwState Hst' HpacketSubset.", "exn": "No product even after head-reduction.", "type": "no_product", "handled": true}, {"ctx": ["unfold refined_raft_net_invariant_do_generic_server.", "intros."], "tactic": "apply refined_raft_net_invariant_do_generic_server'.", "exn": "In environment orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params rri : raft_refinement_interface lmi : log_matching_interface lltsi : leaderLogs_term_sanity_interface llsi : leaderLogs_sorted_interface si : sorted_interface llsli : leaderLogs_sublog_interface llci : leaderLogs_contiguous_interface taifoi : terms_and_indices_from_one_interface net : network st' : name -> data ps' : list packet gd : ghost_data d : raft_data os : list raft_output d' : raft_data ms : list (name * msg) h : name H : doGenericServer h d = (os, d', ms) H0 : leaderLogs_entries_match net H1 : refined_raft_intermediate_reachable net H2 : nwState net h = (gd, d) H3 : forall h' : name, st' h' = update name_eq_dec (nwState net) h (gd, d') h' H4 : forall p : packet, In p ps' -> In p (nwPackets net) \\\\/ In p (send_packets h ms) Unable to unify \"Prop\" with \"leaderLogs_entries_match {| nwPackets := ps'; nwState := st' |}\".", "type": "cannot_unify", "handled": true}, {"ctx": ["unfold refined_raft_net_invariant_do_generic_server.", "intros.", "qsimpl use: refined_raft_net_invariant_do_generic_server'."], "tactic": "apply H; auto.", "exn": "In environment orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params X : (network -> Prop) -> Prop net : network st' : name -> electionsData * raft_data ps' : list packet gd : electionsData d : raft_data os : list raft_output d' : raft_data ms : list (name * msg) h : name H : doGenericServer h d = (os, d', ms) H1 : refined_raft_intermediate_reachable net H2 : nwState net h = (gd, d) H3 : forall h' : name, st' h' = update name_eq_dec (nwState net) h (gd, d') h' H4 : forall p : packet, In p ps' -> In p (nwPackets net) \\\\/ In p (map (fun m : name * msg => {| pSrc := h; pDst := fst m; pBody := snd m |}) ms) H5 : leaderLogs_entries_match_host net H6 : leaderLogs_entries_match_nw net leaderLogs_contiguous_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaderLogs_contiguous net leaderLogs_sublog_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaderLogs_sublog net handleAppendEntries_logs_sorted : forall (net : network) (p : packet) (t : term) (n : name) (pli : logIndex) (plt : term) (es : list entry) (ci : logIndex) (st' : raft_data) (m : msg), raft_intermediate_reachable net -> logs_sorted net -> handleAppendEntries (pDst p) (nwState net (pDst p)) t n pli plt es ci = (st', m) -> pBody p = AppendEntries t n pli plt es ci -> In p (nwPackets net) -> sorted (log st') handleClientRequest_logs_sorted : forall (h : name) (client : clientId) (id : nat) (c : input) (out : list raft_output) (st : raft_data) (l : list (name * msg)) (net : network), handleClientRequest h (nwState net h) client id c = (out, st, l) -> raft_intermediate_reachable net -> logs_sorted_host net -> sorted (log st) logs_sorted_invariant : forall net : network, raft_intermediate_reachable net -> logs_sorted net leaderLogs_sorted_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaderLogs_sorted net leaderLogs_term_sanity_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaderLogs_term_sanity net leaderLogs_currentTerm_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaderLogs_currentTerm_sanity net leaderLogs_currentTerm_sanity_candidate_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaderLogs_currentTerm_sanity_candidate net log_matching_invariant : forall net : network, raft_intermediate_reachable net -> log_matching net refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (deghost net) H0 : forall net : network, refined_raft_intermediate_reachable net -> terms_and_indices_from_one_ll net H7 : forall net : network, refined_raft_intermediate_reachable net -> terms_and_indices_from_one_vwl net Unable to unify \"doGenericServer h d = (os, d', ms)\" with \"leaderLogs_entries_match_host {| nwPackets := ps'; nwState := st' |}\".", "type": "cannot_unify", "handled": true}]}, "chat": [], "original": "unfold refined_raft_net_invariant_do_generic_server. intros orig_base_params one_node_params raft_params P net st' ps' gd d os d' ms h HdoGenericServer HP Hrefined HnwState Hst' HpacketSubset. apply refined_raft_net_invariant_do_generic_server'. intros. apply H; auto.", "succ": false}]