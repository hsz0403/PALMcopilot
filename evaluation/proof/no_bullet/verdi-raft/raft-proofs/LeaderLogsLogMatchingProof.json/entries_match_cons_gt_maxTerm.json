[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": ["intros x xs ys Hxs Hys Hmax Hterm Hmatch.", "unfold entries_match in *."], "tactic": "intros e e' e'' He He' Hin Heindex Hin' He''.", "exn": "No product even after head-reduction.", "type": "no_product", "handled": true}, {"ctx": ["intros x xs ys Hxs Hys Hmax Hterm Hmatch.", "unfold entries_match in *.", "intros.", "split.", "-", "intros Hin''.", "destruct Hin'' as [He''eq | Hin''].", "+", "subst."], "tactic": "apply in_cons.", "exn": "In environment orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params rri : raft_refinement_interface lmi : log_matching_interface lltsi : leaderLogs_term_sanity_interface llsi : leaderLogs_sorted_interface si : sorted_interface llsli : leaderLogs_sublog_interface llci : leaderLogs_contiguous_interface taifoi : terms_and_indices_from_one_interface xs, ys : list entry Hxs : sorted xs Hys : sorted ys e'' : entry Hterm : eTerm e'' > maxTerm ys Hmax : eIndex e'' > maxIndex xs Hmatch : forall e e' e'' : entry, eIndex e = eIndex e' -> eTerm e = eTerm e' -> In e xs -> In e' ys -> eIndex e'' <= eIndex e -> In e'' xs <-> In e'' ys e, e' : entry H : eIndex e = eIndex e' H0 : eTerm e = eTerm e' H1 : In e (e'' :: xs) H2 : In e' ys H3 : eIndex e'' <= eIndex e Unable to unify \"?M2700 = ?M2701 \\\\/ (fix In (a : ?M2699) (l : list ?M2699) {struct l} : Prop := match l with | [] => False | b :: m => b = a \\\\/ In a m end) ?M2701 ?M2702\" with \"(fix In (a : entry) (l : list entry) {struct l} : Prop := match l with | [] => False | b :: m => b = a \\\\/ In a m end) e'' ys\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros x xs ys Hxs Hys Hmax Hterm Hmatch.", "unfold entries_match in *.", "intros.", "split.", "-", "intros Hin''.", "destruct Hin'' as [He''eq | Hin''].", "+", "subst.", "qsimpl use: in_cons."], "tactic": "apply Hin'.", "exn": "The reference Hin' was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros x xs ys Hxs Hys Hmax Hterm Hmatch.", "unfold entries_match in *.", "intros.", "split.", "-", "intros Hin''.", "destruct Hin'' as [He''eq | Hin''].", "+", "subst.", "qsimpl use: in_cons."], "tactic": "+", "exn": "Wrong bullet +: Current bullet + is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["intros x xs ys Hxs Hys Hmax Hterm Hmatch.", "unfold entries_match in *.", "intros.", "split.", "-", "intros Hin''.", "destruct Hin'' as [He''eq | Hin''].", "+", "subst.", "qsimpl use: in_cons.", "*", "shelve.", "*", "shelve.", "+"], "tactic": "apply Hin.", "exn": "The reference Hin was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros x xs ys Hxs Hys Hmax Hterm Hmatch.", "unfold entries_match in *.", "intros.", "split.", "-", "intros Hin''.", "destruct Hin'' as [He''eq | Hin''].", "+", "subst.", "qsimpl use: in_cons.", "*", "shelve.", "*", "shelve.", "+", "apply NoDup_ind."], "tactic": "apply in_cons.", "exn": "In environment orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params rri : raft_refinement_interface lmi : log_matching_interface lltsi : leaderLogs_term_sanity_interface llsi : leaderLogs_sorted_interface si : sorted_interface llsli : leaderLogs_sublog_interface llci : leaderLogs_contiguous_interface taifoi : terms_and_indices_from_one_interface x : entry xs, ys : list entry Hxs : sorted xs Hys : sorted ys Hmax : eIndex x > maxIndex xs Hterm : eTerm x > maxTerm ys Hmatch : forall e e' e'' : entry, eIndex e = eIndex e' -> eTerm e = eTerm e' -> In e xs -> In e' ys -> eIndex e'' <= eIndex e -> In e'' xs <-> In e'' ys e, e', e'' : entry H : eIndex e = eIndex e' H0 : eTerm e = eTerm e' H1 : In e (x :: xs) H2 : In e' ys H3 : eIndex e'' <= eIndex e Hin'' : In e'' xs Unable to unify \"?M13541 = ?M13542 \\\\/ (fix In (a : ?M13540) (l : list ?M13540) {struct l} : Prop := match l with | [] => False | b :: m => b = a \\\\/ In a m end) ?M13542 ?M13543\" with \"False\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros x xs ys Hxs Hys Hmax Hterm Hmatch.", "unfold entries_match in *.", "intros.", "split.", "-", "intros Hin''.", "destruct Hin'' as [He''eq | Hin''].", "+", "subst.", "qsimpl use: in_cons.", "*", "shelve.", "*", "shelve.", "+", "apply NoDup_ind.", "qsimpl use: in_cons."], "tactic": "apply Hin''.", "exn": "In environment H4 : forall (A : Type) (a b : A) (l : list A), In b l -> a = b \\\\/ In b l orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params xs, ys : list entry Hxs : sorted xs Hys : sorted ys e : entry Hterm : eTerm e > maxTerm ys Hmax : eIndex e > maxIndex xs e', e'' : entry H : eIndex e = eIndex e' H0 : eTerm e = eTerm e' H2 : In e' ys H3 : eIndex e'' <= eIndex e Hin'' : In e'' xs H5 : forall e e' e'' : entry, eIndex e = eIndex e' -> eTerm e = eTerm e' -> In e xs -> In e' ys -> eIndex e'' <= eIndex e -> In e'' ys -> In e'' xs H6 : forall e e' e'' : entry, eIndex e = eIndex e' -> eTerm e = eTerm e' -> In e xs -> In e' ys -> eIndex e'' <= eIndex e -> In e'' xs -> In e'' ys leaderLogs_contiguous_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaderLogs_contiguous net leaderLogs_sublog_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaderLogs_sublog net handleAppendEntries_logs_sorted : forall (net : network) (p : packet) (t : term) (n : name) (pli : logIndex) (plt : term) (es : list entry) (ci : logIndex) (st' : raft_data) (m : msg), raft_intermediate_reachable net -> logs_sorted net -> handleAppendEntries (pDst p) (nwState net (pDst p)) t n pli plt es ci = (st', m) -> pBody p = AppendEntries t n pli plt es ci -> In p (nwPackets net) -> sorted (log st') handleClientRequest_logs_sorted : forall (h : name) (client : clientId) (id : nat) (c : input) (out : list raft_output) (st : raft_data) (l : list (name * msg)) (net : network), handleClientRequest h (nwState net h) client id c = (out, st, l) -> raft_intermediate_reachable net -> logs_sorted_host net -> sorted (log st) logs_sorted_invariant : forall net : network, raft_intermediate_reachable net -> logs_sorted net leaderLogs_sorted_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaderLogs_sorted net leaderLogs_term_sanity_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaderLogs_term_sanity net leaderLogs_currentTerm_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaderLogs_currentTerm_sanity net leaderLogs_currentTerm_sanity_candidate_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaderLogs_currentTerm_sanity_candidate net log_matching_invariant : forall net : network, raft_intermediate_reachable net -> log_matching net refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (deghost net) H1 : forall net : network, refined_raft_intermediate_reachable net -> terms_and_indices_from_one_ll net H7 : forall net : network, refined_raft_intermediate_reachable net -> terms_and_indices_from_one_vwl net Unable to unify \"In e'' xs\" with \"False\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros x xs ys Hxs Hys Hmax Hterm Hmatch.", "unfold entries_match in *.", "intros.", "split.", "-", "intros Hin''.", "destruct Hin'' as [He''eq | Hin''].", "+", "subst.", "qsimpl use: in_cons.", "*", "shelve.", "*", "shelve.", "+", "apply NoDup_ind.", "qsimpl use: in_cons.", "qsimpl use: in_cons."], "tactic": "-", "exn": "Wrong bullet -: Current bullet + is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["intros x xs ys Hxs Hys Hmax Hterm Hmatch.", "unfold entries_match in *.", "intros.", "split.", "-", "intros Hin''.", "destruct Hin'' as [He''eq | Hin''].", "+", "subst.", "qsimpl use: in_cons.", "*", "shelve.", "*", "shelve.", "+", "apply NoDup_ind.", "qsimpl use: in_cons.", "qsimpl use: in_cons.", "*", "shelve.", "*", "shelve.", "*", "shelve.", "*", "shelve.", "-", "intros Hin''."], "tactic": "apply in_inv in Hin''.", "exn": "Unable to apply lemma of type \"forall (A : Type) (a b : A) (l : list A), In b (a :: l) -> a = b \\\\/ In b l\" on hypothesis of type \"In e'' ys\".", "type": "cannot_apply_in", "handled": true}, {"ctx": ["intros x xs ys Hxs Hys Hmax Hterm Hmatch.", "unfold entries_match in *.", "intros.", "split.", "-", "intros Hin''.", "destruct Hin'' as [He''eq | Hin''].", "+", "subst.", "qsimpl use: in_cons.", "*", "shelve.", "*", "shelve.", "+", "apply NoDup_ind.", "qsimpl use: in_cons.", "qsimpl use: in_cons.", "*", "shelve.", "*", "shelve.", "*", "shelve.", "*", "shelve.", "-", "intros Hin''.", "qsimpl use: in_inv,in_cons."], "tactic": "destruct Hin'' as [He''eq | Hin''].", "exn": "Not an inductive product.", "type": "not_inductive_product", "handled": true}, {"ctx": ["intros x xs ys Hxs Hys Hmax Hterm Hmatch.", "unfold entries_match in *.", "intros.", "split.", "-", "intros Hin''.", "destruct Hin'' as [He''eq | Hin''].", "+", "subst.", "qsimpl use: in_cons.", "*", "shelve.", "*", "shelve.", "+", "apply NoDup_ind.", "qsimpl use: in_cons.", "qsimpl use: in_cons.", "*", "shelve.", "*", "shelve.", "*", "shelve.", "*", "shelve.", "-", "intros Hin''.", "qsimpl use: in_inv,in_cons.", "qsimpl use: in_inv,in_cons."], "tactic": "apply Hin.", "exn": "The reference Hin was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros x xs ys Hxs Hys Hmax Hterm Hmatch.", "unfold entries_match in *.", "intros.", "split.", "-", "intros Hin''.", "destruct Hin'' as [He''eq | Hin''].", "+", "subst.", "qsimpl use: in_cons.", "*", "shelve.", "*", "shelve.", "+", "apply NoDup_ind.", "qsimpl use: in_cons.", "qsimpl use: in_cons.", "*", "shelve.", "*", "shelve.", "*", "shelve.", "*", "shelve.", "-", "intros Hin''.", "qsimpl use: in_inv,in_cons.", "qsimpl use: in_inv,in_cons.", "apply H10."], "tactic": "apply Hin'.", "exn": "The reference Hin' was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros x xs ys Hxs Hys Hmax Hterm Hmatch.", "unfold entries_match in *.", "intros.", "split.", "-", "intros Hin''.", "destruct Hin'' as [He''eq | Hin''].", "+", "subst.", "qsimpl use: in_cons.", "*", "shelve.", "*", "shelve.", "+", "apply NoDup_ind.", "qsimpl use: in_cons.", "qsimpl use: in_cons.", "*", "shelve.", "*", "shelve.", "*", "shelve.", "*", "shelve.", "-", "intros Hin''.", "qsimpl use: in_inv,in_cons.", "qsimpl use: in_inv,in_cons.", "apply H10."], "tactic": "apply in_cons.", "exn": "In environment H10 : forall (A : Type) (a b : A) (l : list A), In b l -> a = b \\\\/ In b l orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params xs, ys : list entry Hxs : sorted xs Hys : sorted ys e : entry Hterm : eTerm e > maxTerm ys Hmax : eIndex e > maxIndex xs e', e'' : entry H : eIndex e = eIndex e' H0 : eTerm e = eTerm e' H2 : In e' ys H3 : eIndex e'' <= eIndex e Hin'' : In e'' ys H6 : forall e e' e'' : entry, eIndex e = eIndex e' -> eTerm e = eTerm e' -> In e xs -> In e' ys -> eIndex e'' <= eIndex e -> In e'' ys -> In e'' xs H7 : forall e e' e'' : entry, eIndex e = eIndex e' -> eTerm e = eTerm e' -> In e xs -> In e' ys -> eIndex e'' <= eIndex e -> In e'' xs -> In e'' ys H1 : forall (A : Type) (a b : A) (l : list A), a = b -> a = b \\\\/ In b l leaderLogs_contiguous_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaderLogs_contiguous net leaderLogs_sublog_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaderLogs_sublog net handleAppendEntries_logs_sorted : forall (net : network) (p : packet) (t : term) (n : name) (pli : logIndex) (plt : term) (es : list entry) (ci : logIndex) (st' : raft_data) (m : msg), raft_intermediate_reachable net -> logs_sorted net -> handleAppendEntries (pDst p) (nwState net (pDst p)) t n pli plt es ci = (st', m) -> pBody p = AppendEntries t n pli plt es ci -> In p (nwPackets net) -> sorted (log st') handleClientRequest_logs_sorted : forall (h : name) (client : clientId) (id : nat) (c : input) (out : list raft_output) (st : raft_data) (l : list (name * msg)) (net : network), handleClientRequest h (nwState net h) client id c = (out, st, l) -> raft_intermediate_reachable net -> logs_sorted_host net -> sorted (log st) logs_sorted_invariant : forall net : network, raft_intermediate_reachable net -> logs_sorted net leaderLogs_sorted_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaderLogs_sorted net leaderLogs_term_sanity_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaderLogs_term_sanity net leaderLogs_currentTerm_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaderLogs_currentTerm_sanity net leaderLogs_currentTerm_sanity_candidate_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaderLogs_currentTerm_sanity_candidate net log_matching_invariant : forall net : network, raft_intermediate_reachable net -> log_matching net refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (deghost net) H4 : forall net : network, refined_raft_intermediate_reachable net -> terms_and_indices_from_one_ll net H8 : forall net : network, refined_raft_intermediate_reachable net -> terms_and_indices_from_one_vwl net Unable to unify \"?M42807 = ?M42808 \\\\/ (fix In (a : ?M42806) (l : list ?M42806) {struct l} : Prop := match l with | [] => False | b :: m => b = a \\\\/ In a m end) ?M42808 ?M42809\" with \"(fix In (a : entry) (l : list entry) {struct l} : Prop := match l with | [] => False | b :: m => b = a \\\\/ In a m end) e'' xs\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros x xs ys Hxs Hys Hmax Hterm Hmatch.", "unfold entries_match in *.", "intros.", "split.", "-", "intros Hin''.", "destruct Hin'' as [He''eq | Hin''].", "+", "subst.", "qsimpl use: in_cons.", "*", "shelve.", "*", "shelve.", "+", "apply NoDup_ind.", "qsimpl use: in_cons.", "qsimpl use: in_cons.", "*", "shelve.", "*", "shelve.", "*", "shelve.", "*", "shelve.", "-", "intros Hin''.", "qsimpl use: in_inv,in_cons.", "qsimpl use: in_inv,in_cons.", "apply H10.", "qsimpl use: in_inv,in_cons."], "tactic": "apply Hin''.", "exn": "In environment H9 : forall (A : Type) (a b : A) (l : list A), In b l -> a = b \\\\/ In b l orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params xs, ys : list entry Hxs : sorted xs Hys : sorted ys e : entry Hterm : eTerm e > maxTerm ys Hmax : eIndex e > maxIndex xs e', e'' : entry H : eIndex e = eIndex e' H0 : eTerm e = eTerm e' H2 : In e' ys H3 : eIndex e'' <= eIndex e Hin'' : In e'' ys H6 : forall e e' e'' : entry, eIndex e = eIndex e' -> eTerm e = eTerm e' -> In e xs -> In e' ys -> eIndex e'' <= eIndex e -> In e'' ys -> In e'' xs H7 : forall e e' e'' : entry, eIndex e = eIndex e' -> eTerm e = eTerm e' -> In e xs -> In e' ys -> eIndex e'' <= eIndex e -> In e'' xs -> In e'' ys H1 : forall (A : Type) (a b : A) (l : list A), a = b -> a = b \\\\/ In b l leaderLogs_contiguous_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaderLogs_contiguous net leaderLogs_sublog_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaderLogs_sublog net handleAppendEntries_logs_sorted : forall (net : network) (p : packet) (t : term) (n : name) (pli : logIndex) (plt : term) (es : list entry) (ci : logIndex) (st' : raft_data) (m : msg), raft_intermediate_reachable net -> logs_sorted net -> handleAppendEntries (pDst p) (nwState net (pDst p)) t n pli plt es ci = (st', m) -> pBody p = AppendEntries t n pli plt es ci -> In p (nwPackets net) -> sorted (log st') handleClientRequest_logs_sorted : forall (h : name) (client : clientId) (id : nat) (c : input) (out : list raft_output) (st : raft_data) (l : list (name * msg)) (net : network), handleClientRequest h (nwState net h) client id c = (out, st, l) -> raft_intermediate_reachable net -> logs_sorted_host net -> sorted (log st) logs_sorted_invariant : forall net : network, raft_intermediate_reachable net -> logs_sorted net leaderLogs_sorted_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaderLogs_sorted net leaderLogs_term_sanity_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaderLogs_term_sanity net leaderLogs_currentTerm_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaderLogs_currentTerm_sanity net leaderLogs_currentTerm_sanity_candidate_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaderLogs_currentTerm_sanity_candidate net log_matching_invariant : forall net : network, raft_intermediate_reachable net -> log_matching net refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (deghost net) H4 : forall net : network, refined_raft_intermediate_reachable net -> terms_and_indices_from_one_ll net H8 : forall net : network, refined_raft_intermediate_reachable net -> terms_and_indices_from_one_vwl net Unable to unify \"In e'' ys\" with \"In e'' xs\".", "type": "cannot_unify", "handled": true}]}, "chat": [], "original": "intros x xs ys Hxs Hys Hmax Hterm Hmatch. unfold entries_match in *. intros e e' e'' He He' Hin Heindex Hin' He''. intros. split. - intros Hin''. destruct Hin'' as [He''eq | Hin'']. + subst. apply in_cons. apply Hin'. + apply Hin. apply in_cons. apply Hin''. - intros Hin''. apply in_inv in Hin''. destruct Hin'' as [He''eq | Hin'']. + subst. apply Hin. + apply Hin'. apply in_cons. apply Hin''.", "succ": false}]