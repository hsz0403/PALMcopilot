[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": ["intros net nodes t e t' h l Hin."], "tactic": "destruct Hin as [Hin | Hin].", "exn": "Not an inductive product.", "type": "not_inductive_product", "handled": true}, {"ctx": ["intros net nodes t e t' h l Hin.", "qsimpl."], "tactic": "apply in_map_iff in Hin.", "exn": "Unable to apply lemma of type \"forall (A B : Type) (f : A -> B) (l : list A) (y : B), In y (map f l) <-> (exists x : A, f x = y /\\\\ In x l)\" on hypothesis of type \"In (t', h, l) (contradicting_leader_logs net nodes t e)\".", "type": "cannot_apply_in", "handled": true}, {"ctx": ["intros net nodes t e t' h l Hin.", "qsimpl.", "qsimpl use: in_map_iff."], "tactic": "destruct Hin as [[t'' log'] [Heq Hin]].", "exn": "Not an inductive product.", "type": "not_inductive_product", "handled": true}, {"ctx": ["intros net nodes t e t' h l Hin.", "qsimpl.", "qsimpl use: in_map_iff."], "tactic": "inversion Heq; subst.", "exn": "No such hypothesis: Heq", "type": "no_hypos", "handled": true}, {"ctx": ["intros net nodes t e t' h l Hin.", "qsimpl.", "qsimpl use: in_map_iff."], "tactic": "apply in_app_iff.", "exn": "In environment orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params net : network nodes : list name t : nat e : entry t' : term h : name l : list entry Hin : In (t', h, l) (contradicting_leader_logs net nodes t e) leaderLogs_entries_match_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaderLogs_entries_match_host net votesWithLog_sorted_invariant : forall net : network, refined_raft_intermediate_reachable net -> votesWithLog_sorted net allEntries_votesWithLog_invariant : forall net : network, refined_raft_intermediate_reachable net -> allEntries_votesWithLog net leaderLogs_votesWithLog_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaderLogs_votesWithLog net every_entry_was_created_invariant : forall net : network, refined_raft_intermediate_reachable net -> every_entry_was_created net every_entry_was_created_in_any_log_invariant : forall (net : network) (e : entry), refined_raft_intermediate_reachable net -> in_any_log net e -> term_was_created net (eTerm e) leaderLogs_preserved_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaderLogs_preserved net leaderLogs_term_sanity_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaderLogs_term_sanity net leaderLogs_currentTerm_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaderLogs_currentTerm_sanity net leaderLogs_currentTerm_sanity_candidate_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaderLogs_currentTerm_sanity_candidate net allEntries_leaderLogs_prefix_within_term_invariant : forall net : network, refined_raft_intermediate_reachable net -> allEntries_leaderLogs_prefix_within_term net log_log_prefix_within_term_invariant : forall net : network, refined_raft_intermediate_reachable net -> log_log_prefix_within_term net refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (GhostSimulations.deghost net) H : forall net : network, refined_raft_intermediate_reachable net -> terms_and_indices_from_one_ll net H0 : forall net : network, refined_raft_intermediate_reachable net -> terms_and_indices_from_one_vwl net H1 : forall (A B : Type) (f : A -> B) (l : list A) (y : B), (exists x : A, f x = y /\\\\ In x l) -> In y (map f l) H2 : forall (A B : Type) (f : A -> B) (l : list A) (y : B), In y (map f l) -> exists x : A, f x = y /\\\\ In x l Unable to unify \"(In ?M5331 (?M5329 ++ ?M5330) -> In ?M5331 ?M5329 \\\\/ In ?M5331 ?M5330) /\\\\ (In ?M5331 ?M5329 \\\\/ In ?M5331 ?M5330 -> In ?M5331 (?M5329 ++ ?M5330))\" with \"(fix In (a : term * list entry) (l : list (term * list entry)) {struct l} : Prop := match l with | [] => False | b :: m => b = a \\\\/ In a m end) (t', l) (contradicting_leader_logs_on_leader (leaderLogs (fst (nwState net h))) t e)\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros net nodes t e t' h l Hin.", "qsimpl.", "qsimpl use: in_map_iff.", "qsimpl use: in_app_iff,in_map_iff."], "tactic": "left.", "exn": "Not an inductive product.", "type": "not_inductive_product", "handled": true}, {"ctx": ["intros net nodes t e t' h l Hin.", "qsimpl.", "qsimpl use: in_map_iff.", "qsimpl use: in_app_iff,in_map_iff."], "tactic": "apply minimal_contradicting_leader_log_None with (t' := t'') (h := h).", "exn": "The reference t'' was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros net nodes t e t' h l Hin.", "qsimpl.", "qsimpl use: in_map_iff.", "qsimpl use: in_app_iff,in_map_iff."], "tactic": "rewrite contradicting_leader_logs_empty in Hin.", "exn": "Found no subterm matching \"contradicting_leader_logs_on_leader (leaderLogs (fst (nwState ?M6794 ?M6799))) ?M6796 ?M6797\" in Hin.", "type": "no_subterm", "handled": true}]}, "chat": [], "original": "intros net nodes t e t' h l Hin. unfold contradicting_leader_logs_on_leader in Hin. simpl in Hin. destruct Hin as [Hin | Hin]. - apply in_map_iff in Hin. destruct Hin as [[t'' log'] [Heq Hin]]. inversion Heq; subst. apply in_app_iff. left. apply minimal_contradicting_leader_log_None with (t' := t'') (h := h). + unfold contradicting_leader_logs. rewrite contradicting_leader_logs_empty in Hin. * inversion Hin. * apply nodes. + auto. + auto. - apply in_app_iff. right. apply IHnod. auto.", "succ": false}]