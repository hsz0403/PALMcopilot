[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": ["intros net H_refinement.", "unfold leader_without_missing_entry.", "intros t e h H_in."], "tactic": "apply H_refinement in aerlli.", "exn": "Unable to apply lemma of type \"refined_raft_intermediate_reachable net\" on hypothesis of type \"append_entries_leaderLogs_interface\".", "type": "cannot_apply_in", "handled": true}, {"ctx": ["intros net H_refinement.", "unfold leader_without_missing_entry.", "intros t e h H_in.", "qsimpl."], "tactic": "apply aerlli in H_refinement.", "exn": "The reference aerlli was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros net H_refinement.", "unfold leader_without_missing_entry.", "intros t e h H_in.", "qsimpl.", "apply allEntries_log_invariant in H_refinement."], "tactic": "destruct H_in as [H_in | H_in].", "exn": "Not an inductive product.", "type": "not_inductive_product", "handled": true}, {"ctx": ["intros net H_refinement.", "unfold leader_without_missing_entry.", "intros t e h H_in.", "qsimpl.", "apply allEntries_log_invariant in H_refinement.", "left."], "tactic": "apply H_refinement.", "exn": "In environment orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params net : network H_refinement : allEntries_log net t : term e : entry h : name H_in : In (t, e) (allEntries (fst (nwState net h))) leaders_have_leaderLogs_strong_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaders_have_leaderLogs_strong net leader_sublog_invariant_invariant : forall net : network, raft_intermediate_reachable net -> leader_sublog_invariant net allEntries_log_invariant : forall net : network, refined_raft_intermediate_reachable net -> allEntries_log net append_entries_came_from_leaders_invariant : forall net : network, refined_raft_intermediate_reachable net -> append_entries_came_from_leaders net entries_contiguous_nw_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_contiguous_nw net entries_gt_0_nw_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_gt_0_nw net entries_sorted_nw_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_sorted_nw net entries_gt_0_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_gt_0 net entries_contiguous_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_contiguous net entries_sorted_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_sorted net entries_match_invariant : forall (net : network) (h h' : name), refined_raft_intermediate_reachable net -> entries_match (log (snd (nwState net h))) (log (snd (nwState net h'))) entries_match_nw_1_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_match_nw_1 net entries_match_nw_host_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_match_nw_host net allEntries_gt_0_invariant : forall (net : network) (h : name) (e : entry), refined_raft_intermediate_reachable net -> In e (map snd (allEntries (fst (nwState net h)))) -> eIndex e > 0 leaderLogs_sorted_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaderLogs_sorted net one_leaderLog_per_term_invariant : forall net : network, refined_raft_intermediate_reachable net -> one_leaderLog_per_term net one_leaderLog_per_term_log_invariant : forall net : network, refined_raft_intermediate_reachable net -> one_leaderLog_per_term_log net one_leaderLog_per_term_host_invariant : forall net : network, refined_raft_intermediate_reachable net -> one_leaderLog_per_term_host net append_entries_leaderLogs_invariant : forall net : network, refined_raft_intermediate_reachable net -> append_entries_leaderLogs net refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (GhostSimulations.deghost net) Unable to unify \"allEntries_log net\" with \"In e (log (snd (nwState net h)))\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros net H_refinement.", "unfold leader_without_missing_entry.", "intros t e h H_in.", "qsimpl.", "apply allEntries_log_invariant in H_refinement.", "left."], "tactic": "right.", "exn": "Not an inductive product.", "type": "not_inductive_product", "handled": true}, {"ctx": ["intros net H_refinement.", "unfold leader_without_missing_entry.", "intros t e h H_in.", "qsimpl.", "apply allEntries_log_invariant in H_refinement.", "left."], "tactic": "destruct H_in as [t' [log' [leader [H_gt [H_ll not_in]]]]].", "exn": "Not an inductive product.", "type": "not_inductive_product", "handled": true}, {"ctx": ["intros net H_refinement.", "unfold leader_without_missing_entry.", "intros t e h H_in.", "qsimpl.", "apply allEntries_log_invariant in H_refinement.", "left."], "tactic": "exists t', log', leader.", "exn": "The reference t' was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros net H_refinement.", "unfold leader_without_missing_entry.", "intros t e h H_in.", "qsimpl.", "apply allEntries_log_invariant in H_refinement.", "left."], "tactic": "split.", "exn": "Not an inductive product.", "type": "not_inductive_product", "handled": true}, {"ctx": ["intros net H_refinement.", "unfold leader_without_missing_entry.", "intros t e h H_in.", "qsimpl.", "apply allEntries_log_invariant in H_refinement.", "left."], "tactic": "split; auto.", "exn": "Not an inductive product.", "type": "not_inductive_product", "handled": true}]}, "chat": [], "original": "intros net H_refinement. unfold leader_without_missing_entry. intros t e h H_in. apply H_refinement in aerlli. apply aerlli in H_refinement. destruct H_in as [H_in | H_in]. - left. apply H_refinement. auto. - right. destruct H_in as [t' [log' [leader [H_gt [H_ll not_in]]]]]. exists t', log', leader. split. + auto. + split; auto.", "succ": false}]