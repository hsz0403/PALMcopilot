[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": ["intros h st t n pli plt es ci st' m H.", "unfold handleAppendEntries in H.", "destruct (t <? currentTerm st) eqn:H1.", "-", "inversion H."], "tactic": "-", "exn": "Wrong bullet -: Current bullet - is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["intros h st t n pli plt es ci st' m H.", "unfold handleAppendEntries in H.", "destruct (t <? currentTerm st) eqn:H1.", "-", "inversion H.", "shelve.", "-", "destruct (pli =? 0) eqn:H2.", "+", "destruct (haveNewEntries st es) eqn:H3.", "*", "inversion H; subst; clear H."], "tactic": "apply Nat.le_trans with (n := currentTerm st).", "exn": "Unable to find an instance for the variable m.", "type": "no_instance_var", "handled": true}, {"ctx": ["intros h st t n pli plt es ci st' m H.", "unfold handleAppendEntries in H.", "destruct (t <? currentTerm st) eqn:H1.", "-", "inversion H.", "shelve.", "-", "destruct (pli =? 0) eqn:H2.", "+", "destruct (haveNewEntries st es) eqn:H3.", "*", "inversion H; subst; clear H.", "qsimpl use: le_trans,currentTerm."], "tactic": "reflexivity.", "exn": "In environment orig_base_params : BaseParams raft_params : RaftParams orig_base_params t0 : RaftState.raft_data term name entry logIndex serverType data clientId output -> term H : forall n m p : nat, n <= m -> m <= p -> n <= p one_node_params : OneNodeParams orig_base_params h : name st : raft_data t : term n : name pli : logIndex plt : term es : list entry ci : logIndex H1 : (t <? currentTerm st) = false H2 : (pli =? 0) = true H3 : haveNewEntries st es = true msg_refined_raft_net_invariant : forall (P : network -> Prop) (net : network), msg_refined_raft_net_invariant_init P -> msg_refined_raft_net_invariant_client_request P -> msg_refined_raft_net_invariant_timeout P -> msg_refined_raft_net_invariant_append_entries P -> msg_refined_raft_net_invariant_append_entries_reply P -> msg_refined_raft_net_invariant_request_vote P -> msg_refined_raft_net_invariant_request_vote_reply P -> msg_refined_raft_net_invariant_do_leader P -> msg_refined_raft_net_invariant_do_generic_server P -> msg_refined_raft_net_invariant_state_same_packet_subset P -> msg_refined_raft_net_invariant_reboot P -> msg_refined_raft_intermediate_reachable net -> P net msg_refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), msg_refined_raft_net_invariant_init P -> msg_refined_raft_net_invariant_client_request' P -> msg_refined_raft_net_invariant_timeout' P -> msg_refined_raft_net_invariant_append_entries' P -> msg_refined_raft_net_invariant_append_entries_reply' P -> msg_refined_raft_net_invariant_request_vote' P -> msg_refined_raft_net_invariant_request_vote_reply' P -> msg_refined_raft_net_invariant_do_leader' P -> msg_refined_raft_net_invariant_do_generic_server' P -> msg_refined_raft_net_invariant_state_same_packet_subset' P -> msg_refined_raft_net_invariant_reboot' P -> msg_refined_raft_intermediate_reachable net -> P net msg_lift_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P net) -> forall net : network, msg_refined_raft_intermediate_reachable net -> P (mgv_deghost net) msg_lift_prop_all_the_way : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, msg_refined_raft_intermediate_reachable net -> P (deghost (mgv_deghost net)) msg_lower_prop : forall P : network -> Prop, (forall net : network, msg_refined_raft_intermediate_reachable net -> P (mgv_deghost net)) -> forall net : network, refined_raft_intermediate_reachable net -> P net msg_lower_prop_all_the_way : forall P : network -> Prop, (forall net : network, msg_refined_raft_intermediate_reachable net -> P (deghost (mgv_deghost net))) -> forall net : network, raft_intermediate_reachable net -> P net msg_deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => nwState h end = nwState net h msg_simulation_1 : forall net : network, msg_refined_raft_intermediate_reachable net -> refined_raft_intermediate_reachable (mgv_deghost net) one_leaderLog_per_term_invariant : forall net : network, refined_raft_intermediate_reachable net -> one_leaderLog_per_term net one_leaderLog_per_term_log_invariant : forall net : network, refined_raft_intermediate_reachable net -> one_leaderLog_per_term_log net one_leaderLog_per_term_host_invariant : forall net : network, refined_raft_intermediate_reachable net -> one_leaderLog_per_term_host net leaders_have_leaderLogs_strong_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaders_have_leaderLogs_strong net no_entries_past_current_term_invariant : forall net : network, raft_intermediate_reachable net -> no_entries_past_current_term net transitive_commit_invariant : forall net : network, refined_raft_intermediate_reachable net -> transitive_commit net ghost_log_entries_match_invariant : forall net : network, msg_refined_raft_intermediate_reachable net -> ghost_log_entries_match_host net log_properties_hold_on_ghost_logs_invariant : forall net : network, msg_refined_raft_intermediate_reachable net -> log_properties_hold_on_ghost_logs net ghost_log_correct_invariant : forall net : network, msg_refined_raft_intermediate_reachable net -> ghost_log_correct net terms_and_indices_from_one_log_invariant : forall net : network, raft_intermediate_reachable net -> terms_and_indices_from_one_log net terms_and_indices_from_one_log_nw_invariant : forall net : network, raft_intermediate_reachable net -> terms_and_indices_from_one_log_nw net leader_sublog_invariant_invariant : forall net : network, raft_intermediate_reachable net -> leader_sublog_invariant net leader_completeness_invariant : forall net : network, refined_raft_intermediate_reachable net -> leader_completeness net leaders_have_leaderLogs_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaders_have_leaderLogs net match_index_all_entries_invariant : forall net : network, refined_raft_intermediate_reachable net -> match_index_all_entries net lastApplied_le_commitIndex_invariant : forall net : network, raft_intermediate_reachable net -> lastApplied_le_commitIndex net current_term_gt_zero_invariant : forall net : network, raft_intermediate_reachable net -> current_term_gt_zero net prevLog_leader_sublog_invariant : forall net : network, raft_intermediate_reachable net -> prevLog_leader_sublog net entries_contiguous_nw_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_contiguous_nw net entries_gt_0_nw_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_gt_0_nw net entries_sorted_nw_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_sorted_nw net entries_gt_0_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_gt_0 net entries_contiguous_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_contiguous net entries_sorted_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_sorted net entries_match_invariant : forall (net : network) (h h' : name), refined_raft_intermediate_reachable net -> entries_match (log (snd (nwState net h))) (log (snd (nwState net h'))) entries_match_nw_1_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_match_nw_1 net entries_match_nw_host_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_match_nw_host net allEntries_gt_0_invariant : forall (net : network) (h : name) (e : entry), refined_raft_intermediate_reachable net -> In e (map snd (allEntries (fst (nwState net h)))) -> eIndex e > 0 state_machine_safety'_invariant : forall net : network, refined_raft_intermediate_reachable net -> state_machine_safety' net log_matching_invariant : forall net : network, raft_intermediate_reachable net -> log_matching net handleAppendEntries_logs_sorted : forall (net : network) (p : packet) (t : term) (n : name) (pli : logIndex) (plt : term) (es : list entry) (ci : logIndex) (st' : raft_data) (m : msg), raft_intermediate_reachable net -> logs_sorted net -> handleAppendEntries (pDst p) (nwState net (pDst p)) t n pli plt es ci = (st', m) -> pBody p = AppendEntries t n pli plt es ci -> In p (nwPackets net) -> sorted (log st') handleClientRequest_logs_sorted : forall (h : name) (client : clientId) (id : nat) (c : input) (out : list raft_output) (st : raft_data) (l : list (name * msg)) (net : network), handleClientRequest h (nwState net h) client id c = (out, st, l) -> raft_intermediate_reachable net -> logs_sorted_host net -> sorted (log st) logs_sorted_invariant : forall net : network, raft_intermediate_reachable net -> logs_sorted net refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (deghost net) Unable to unify \"t0 (mkRaft_data (t0 (advanceCurrentTerm st t)) (votedFor (advanceCurrentTerm st t)) (Some n) es (Init.Nat.max (commitIndex st) (Init.Nat.min ci (maxIndex es))) (lastApplied (advanceCurrentTerm st t)) (stateMachine (advanceCurrentTerm st t)) (nextIndex (advanceCurrentTerm st t)) (matchIndex (advanceCurrentTerm st t)) (shouldSend (advanceCurrentTerm st t)) (votesReceived (advanceCurrentTerm st t)) Follower (clientCache (advanceCurrentTerm st t)) (electoralVictories (advanceCurrentTerm st t)))\" with \"t0 st\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros h st t n pli plt es ci st' m H.", "unfold handleAppendEntries in H.", "destruct (t <? currentTerm st) eqn:H1.", "-", "inversion H.", "shelve.", "-", "destruct (pli =? 0) eqn:H2.", "+", "destruct (haveNewEntries st es) eqn:H3.", "*", "inversion H; subst; clear H.", "qsimpl use: le_trans,currentTerm."], "tactic": "*", "exn": "Wrong bullet *: Current bullet * is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["intros h st t n pli plt es ci st' m H.", "unfold handleAppendEntries in H.", "destruct (t <? currentTerm st) eqn:H1.", "-", "inversion H.", "shelve.", "-", "destruct (pli =? 0) eqn:H2.", "+", "destruct (haveNewEntries st es) eqn:H3.", "*", "inversion H; subst; clear H.", "qsimpl use: le_trans,currentTerm.", "shelve.", "*"], "tactic": "+", "exn": "Wrong bullet +: Current bullet * is not finished.", "type": "unfinished_bullet", "handled": true}]}, "chat": [], "original": "intros h st t n pli plt es ci st' m H. unfold handleAppendEntries in H. destruct (t <? currentTerm st) eqn:H1. - inversion H. - destruct (pli =? 0) eqn:H2. + destruct (haveNewEntries st es) eqn:H3. * inversion H; subst; clear H. apply Nat.le_trans with (n := currentTerm st). auto. reflexivity. * discriminate. + discriminate.", "succ": false}]