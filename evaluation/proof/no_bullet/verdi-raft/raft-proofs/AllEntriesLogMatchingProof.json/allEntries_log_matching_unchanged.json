[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": ["induction net; intros."], "tactic": "rewrite H0.", "exn": "Found no subterm matching \"st' ?M3212\" in the current goal.", "type": "no_subterm", "handled": true}, {"ctx": ["induction net; intros.", "qsimpl."], "tactic": "rewrite H1.", "exn": "Found no subterm matching \"log d\" in the current goal.", "type": "no_subterm", "handled": true}, {"ctx": ["induction net; intros.", "qsimpl."], "tactic": "rewrite H0.", "exn": "Found no subterm matching \"st' ?M9847\" in the current goal.", "type": "no_subterm", "handled": true}, {"ctx": ["induction net; intros.", "qsimpl."], "tactic": "rewrite H1.", "exn": "Found no subterm matching \"log d\" in the current goal.", "type": "no_subterm", "handled": true}, {"ctx": ["induction net; intros.", "qsimpl.", "unfold allEntries_log_matching in *.", "intros."], "tactic": "destruct net.", "exn": "The reference net was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["induction net; intros.", "qsimpl.", "unfold allEntries_log_matching in *.", "intros.", "destruct update_elections_data_net.", "simpl in *."], "tactic": "apply H with (net := {| nwPackets := x; nwState := x0 |}).", "exn": "The reference x0 was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["induction net; intros.", "qsimpl.", "unfold allEntries_log_matching in *.", "intros.", "destruct update_elections_data_net.", "simpl in *.", "+"], "tactic": "apply H1.", "exn": "In environment orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params nwPackets : list packet nwState, st' : name -> electionsData * raft_data h : name gd : electionsData d : raft_data ps' : list packet H : forall (e e' : entry) (h h' : name), In e (log (snd (nwState h))) -> In e' (map snd (allEntries (fst (nwState h')))) -> eTerm e = eTerm e' -> eIndex e = eIndex e' -> e = e' H0 : forall h' : name, st' h' = update name_eq_dec nwState h (gd, d) h' H1 : log d = log (snd (nwState h)) H2 : allEntries gd = allEntries (fst (nwState h)) entries_contiguous_nw_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_contiguous_nw net entries_gt_0_nw_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_gt_0_nw net entries_sorted_nw_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_sorted_nw net entries_gt_0_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_gt_0 net entries_contiguous_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_contiguous net entries_sorted_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_sorted net entries_match_invariant : forall (net : network) (h h' : name), refined_raft_intermediate_reachable net -> entries_match (log (snd (Net.nwState net h))) (log (snd (Net.nwState net h'))) entries_match_nw_1_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_match_nw_1 net entries_match_nw_host_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_match_nw_host net allEntries_gt_0_invariant : forall (net : network) (h : name) (e : entry), refined_raft_intermediate_reachable net -> In e (map snd (allEntries (fst (Net.nwState net h)))) -> eIndex e > 0 leader_sublog_invariant_invariant : forall net : network, raft_intermediate_reachable net -> leader_sublog_invariant net allEntries_leader_sublog_invariant : forall net : network, refined_raft_intermediate_reachable net -> allEntries_leader_sublog net refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (Net.nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (GhostSimulations.deghost net) e, e' : entry h0, h' : name H3 : In e (log (snd (st' h0))) H4 : In e' (map snd (allEntries (fst (st' h')))) H5 : eTerm e = eTerm e' H6 : eIndex e = eIndex e' Unable to unify \"log d = log (snd (nwState h))\" with \"name\".", "type": "cannot_unify", "handled": true}, {"ctx": ["induction net; intros.", "qsimpl.", "unfold allEntries_log_matching in *.", "intros.", "destruct update_elections_data_net.", "simpl in *.", "+", "qsimpl.", "+"], "tactic": "apply H2.", "exn": "In environment orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params nwPackets : list packet nwState, st' : name -> electionsData * raft_data h : name gd : electionsData d : raft_data ps' : list packet H : forall (e e' : entry) (h h' : Net.name), In e (log (snd (Net.nwState {| nwPackets := nwPackets; nwState := nwState |} h))) -> In e' (map snd (allEntries (fst (Net.nwState {| nwPackets := nwPackets; nwState := nwState |} h')))) -> eTerm e = eTerm e' -> eIndex e = eIndex e' -> e = e' H0 : forall h' : name, st' h' = update name_eq_dec nwState h (gd, d) h' H1 : log d = log (snd (nwState h)) H2 : allEntries gd = allEntries (fst (nwState h)) entries_contiguous_nw_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_contiguous_nw net entries_gt_0_nw_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_gt_0_nw net entries_sorted_nw_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_sorted_nw net entries_gt_0_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_gt_0 net entries_contiguous_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_contiguous net entries_sorted_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_sorted net entries_match_invariant : forall (net : network) (h h' : name), refined_raft_intermediate_reachable net -> entries_match (log (snd (Net.nwState net h))) (log (snd (Net.nwState net h'))) entries_match_nw_1_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_match_nw_1 net entries_match_nw_host_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_match_nw_host net allEntries_gt_0_invariant : forall (net : network) (h : name) (e : entry), refined_raft_intermediate_reachable net -> In e (map snd (allEntries (fst (Net.nwState net h)))) -> eIndex e > 0 leader_sublog_invariant_invariant : forall net : network, raft_intermediate_reachable net -> leader_sublog_invariant net allEntries_leader_sublog_invariant : forall net : network, refined_raft_intermediate_reachable net -> allEntries_leader_sublog net refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (Net.nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (GhostSimulations.deghost net) e, e' : entry h0, h' : Net.name H3 : In e (log (snd (Net.nwState {| nwPackets := ps'; nwState := st' |} h0))) H4 : In e' (map snd (allEntries (fst (Net.nwState {| nwPackets := ps'; nwState := st' |} h')))) H5 : eTerm e = eTerm e' H6 : eIndex e = eIndex e' Unable to unify \"allEntries gd = allEntries (fst (nwState h))\" with \"name\".", "type": "cannot_unify", "handled": true}, {"ctx": ["induction net; intros.", "qsimpl.", "unfold allEntries_log_matching in *.", "intros.", "destruct update_elections_data_net.", "simpl in *.", "+", "qsimpl.", "+", "qsimpl.", "+"], "tactic": "apply H3.", "exn": "In environment orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params nwPackets : list packet nwState, st' : name -> electionsData * raft_data h : name gd : electionsData d : raft_data ps' : list packet H : forall (e e' : entry) (h h' : Net.name), In e (log (snd (Net.nwState {| nwPackets := nwPackets; nwState := nwState |} h))) -> In e' (map snd (allEntries (fst (Net.nwState {| nwPackets := nwPackets; nwState := nwState |} h')))) -> eTerm e = eTerm e' -> eIndex e = eIndex e' -> e = e' H0 : forall h' : name, st' h' = update name_eq_dec nwState h (gd, d) h' H1 : log d = log (snd (nwState h)) H2 : allEntries gd = allEntries (fst (nwState h)) entries_contiguous_nw_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_contiguous_nw net entries_gt_0_nw_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_gt_0_nw net entries_sorted_nw_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_sorted_nw net entries_gt_0_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_gt_0 net entries_contiguous_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_contiguous net entries_sorted_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_sorted net entries_match_invariant : forall (net : network) (h h' : name), refined_raft_intermediate_reachable net -> entries_match (log (snd (Net.nwState net h))) (log (snd (Net.nwState net h'))) entries_match_nw_1_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_match_nw_1 net entries_match_nw_host_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_match_nw_host net allEntries_gt_0_invariant : forall (net : network) (h : name) (e : entry), refined_raft_intermediate_reachable net -> In e (map snd (allEntries (fst (Net.nwState net h)))) -> eIndex e > 0 leader_sublog_invariant_invariant : forall net : network, raft_intermediate_reachable net -> leader_sublog_invariant net allEntries_leader_sublog_invariant : forall net : network, refined_raft_intermediate_reachable net -> allEntries_leader_sublog net refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (Net.nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (GhostSimulations.deghost net) e, e' : entry h0, h' : Net.name H3 : In e (log (snd (Net.nwState {| nwPackets := ps'; nwState := st' |} h0))) H4 : In e' (map snd (allEntries (fst (Net.nwState {| nwPackets := ps'; nwState := st' |} h')))) H5 : eTerm e = eTerm e' H6 : eIndex e = eIndex e' Unable to unify \"In e (log (snd (Net.nwState {| nwPackets := ps'; nwState := st' |} h0)))\" with \"msg\".", "type": "cannot_unify", "handled": true}, {"ctx": ["induction net; intros.", "qsimpl.", "unfold allEntries_log_matching in *.", "intros.", "destruct update_elections_data_net.", "simpl in *.", "+", "qsimpl.", "+", "qsimpl.", "+", "qsimpl.", "+"], "tactic": "apply H4.", "exn": "In environment orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params nwPackets : list packet nwState, st' : name -> electionsData * raft_data h : name gd : electionsData d : raft_data ps' : list packet H : forall (e e' : entry) (h h' : Net.name), In e (log (snd (Net.nwState {| nwPackets := nwPackets; nwState := nwState |} h))) -> In e' (map snd (allEntries (fst (Net.nwState {| nwPackets := nwPackets; nwState := nwState |} h')))) -> eTerm e = eTerm e' -> eIndex e = eIndex e' -> e = e' H0 : forall h' : name, st' h' = update name_eq_dec nwState h (gd, d) h' H1 : log d = log (snd (nwState h)) H2 : allEntries gd = allEntries (fst (nwState h)) entries_contiguous_nw_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_contiguous_nw net entries_gt_0_nw_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_gt_0_nw net entries_sorted_nw_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_sorted_nw net entries_gt_0_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_gt_0 net entries_contiguous_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_contiguous net entries_sorted_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_sorted net entries_match_invariant : forall (net : network) (h h' : name), refined_raft_intermediate_reachable net -> entries_match (log (snd (Net.nwState net h))) (log (snd (Net.nwState net h'))) entries_match_nw_1_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_match_nw_1 net entries_match_nw_host_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_match_nw_host net allEntries_gt_0_invariant : forall (net : network) (h : name) (e : entry), refined_raft_intermediate_reachable net -> In e (map snd (allEntries (fst (Net.nwState net h)))) -> eIndex e > 0 leader_sublog_invariant_invariant : forall net : network, raft_intermediate_reachable net -> leader_sublog_invariant net allEntries_leader_sublog_invariant : forall net : network, refined_raft_intermediate_reachable net -> allEntries_leader_sublog net refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (Net.nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (GhostSimulations.deghost net) e, e' : entry h0, h' : Net.name H3 : In e (log (snd (Net.nwState {| nwPackets := ps'; nwState := st' |} h0))) H4 : In e' (map snd (allEntries (fst (Net.nwState {| nwPackets := ps'; nwState := st' |} h')))) H5 : eTerm e = eTerm e' H6 : eIndex e = eIndex e' Unable to unify \"In e' (map snd (allEntries (fst (Net.nwState {| nwPackets := ps'; nwState := st' |} h'))))\" with \"(electionsData * RaftState.raft_data term name entry logIndex serverType data clientId output)%type\".", "type": "cannot_unify", "handled": true}]}, "chat": [], "original": "induction net; intros. - intros. rewrite H0. rewrite H1. auto. - intros. rewrite H0. rewrite H1. unfold allEntries_log_matching in *. intros. destruct net. simpl in *. intros. apply H with (net := {| nwPackets := x; nwState := x0 |}). + apply H1. + apply H2. + apply H3. + apply H4.", "succ": false}]