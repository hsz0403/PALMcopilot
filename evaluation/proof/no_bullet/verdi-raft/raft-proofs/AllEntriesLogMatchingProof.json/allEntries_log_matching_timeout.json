[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": ["unfold refined_raft_net_invariant_timeout.", "intros net h st' ps' gd out d l Htimeout Helection Hinvariant Hreachable Hst' Hps'."], "tactic": "apply allEntries_log_matching_inductive.", "exn": "In environment orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params rri : raft_refinement_interface aelsi : allEntries_leader_sublog_interface lsi : leader_sublog_interface rlmli : refined_log_matching_lemmas_interface net : network h : name st' : name -> data ps' : list packet gd : electionsData out : list raft_output d : raft_data l : list (name * msg) Htimeout : handleTimeout h (snd (nwState net h)) = (out, d, l) Helection : gd = update_elections_data_timeout h (nwState net h) Hinvariant : allEntries_log_matching_inductive net Hreachable : refined_raft_intermediate_reachable net Hst' : forall h' : name, st' h' = update name_eq_dec (nwState net) h (gd, d) h' Hps' : forall p' : packet, In p' ps' -> In p' (nwPackets net) \\\\/ In p' (send_packets h l) Unable to unify \"Prop\" with \"allEntries_log_matching_inductive {| nwPackets := ps'; nwState := st' |}\".", "type": "cannot_unify", "handled": true}, {"ctx": ["unfold refined_raft_net_invariant_timeout.", "intros net h st' ps' gd out d l Htimeout Helection Hinvariant Hreachable Hst' Hps'.", "qsimpl use: allEntries_log_matching_inductive."], "tactic": "split.", "exn": "Not an inductive product.", "type": "not_inductive_product", "handled": true}, {"ctx": ["unfold refined_raft_net_invariant_timeout.", "intros net h st' ps' gd out d l Htimeout Helection Hinvariant Hreachable Hst' Hps'.", "qsimpl use: allEntries_log_matching_inductive.", "qsimpl use: allEntries_log_matching_inductive."], "tactic": "apply entries_contiguous_nw_invariant with (net:=net).", "exn": "In environment orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params P : network -> Prop net : network h : name st' : name -> electionsData * raft_data ps' : list packet out : list raft_output d : raft_data l : list (name * msg) Htimeout : handleTimeout h (snd (nwState net h)) = (out, d, l) Hreachable : refined_raft_intermediate_reachable net Hst' : forall h' : name, st' h' = update name_eq_dec (nwState net) h (update_elections_data_timeout h (nwState net h), d) h' Hps' : forall p' : packet, In p' ps' -> In p' (nwPackets net) \\\\/ In p' (map (fun m : name * msg => {| pSrc := h; pDst := fst m; pBody := snd m |}) l) H : allEntries_log_matching net H0 : allEntries_log_matching_nw net entries_contiguous_nw_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_contiguous_nw net entries_gt_0_nw_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_gt_0_nw net entries_sorted_nw_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_sorted_nw net entries_gt_0_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_gt_0 net entries_contiguous_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_contiguous net entries_sorted_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_sorted net entries_match_invariant : forall (net : network) (h h' : name), refined_raft_intermediate_reachable net -> entries_match (log (snd (nwState net h))) (log (snd (nwState net h'))) entries_match_nw_1_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_match_nw_1 net entries_match_nw_host_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_match_nw_host net allEntries_gt_0_invariant : forall (net : network) (h : name) (e : entry), refined_raft_intermediate_reachable net -> In e (map snd (allEntries (fst (nwState net h)))) -> eIndex e > 0 leader_sublog_invariant_invariant : forall net : network, raft_intermediate_reachable net -> leader_sublog_invariant net allEntries_leader_sublog_invariant : forall net : network, refined_raft_intermediate_reachable net -> allEntries_leader_sublog net refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (GhostSimulations.deghost net) X0 : Prop Unable to unify \"entries_contiguous_nw net\" with \"P {| nwPackets := ps'; nwState := st' |}\".", "type": "cannot_unify", "handled": true}, {"ctx": ["unfold refined_raft_net_invariant_timeout.", "intros net h st' ps' gd out d l Htimeout Helection Hinvariant Hreachable Hst' Hps'.", "qsimpl use: allEntries_log_matching_inductive.", "qsimpl use: allEntries_log_matching_inductive.", "qsimpl use: allEntries_log_matching_inductive."], "tactic": "eapply entries_sorted_nw_invariant; eauto.", "exn": "In environment orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params P : network -> Prop net : network h : name st' : name -> electionsData * raft_data ps' : list packet out : list raft_output d : raft_data l : list (name * msg) Htimeout : handleTimeout h (snd (nwState net h)) = (out, d, l) Hreachable : refined_raft_intermediate_reachable net Hst' : forall h' : name, st' h' = update name_eq_dec (nwState net) h (update_elections_data_timeout h (nwState net h), d) h' Hps' : forall p' : packet, In p' ps' -> In p' (nwPackets net) \\\\/ In p' (map (fun m : name * msg => {| pSrc := h; pDst := fst m; pBody := snd m |}) l) H : allEntries_log_matching net H0 : allEntries_log_matching_nw net entries_contiguous_nw_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_contiguous_nw net entries_gt_0_nw_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_gt_0_nw net entries_sorted_nw_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_sorted_nw net entries_gt_0_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_gt_0 net entries_contiguous_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_contiguous net entries_sorted_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_sorted net entries_match_invariant : forall (net : network) (h h' : name), refined_raft_intermediate_reachable net -> entries_match (log (snd (nwState net h))) (log (snd (nwState net h'))) entries_match_nw_1_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_match_nw_1 net entries_match_nw_host_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_match_nw_host net allEntries_gt_0_invariant : forall (net : network) (h : name) (e : entry), refined_raft_intermediate_reachable net -> In e (map snd (allEntries (fst (nwState net h)))) -> eIndex e > 0 leader_sublog_invariant_invariant : forall net : network, raft_intermediate_reachable net -> leader_sublog_invariant net allEntries_leader_sublog_invariant : forall net : network, refined_raft_intermediate_reachable net -> allEntries_leader_sublog net refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (GhostSimulations.deghost net) X0, X1 : Prop Unable to unify \"forall (p : packet) (t : term) (n : name) (pli : logIndex) (plt : term) (es : list entry) (ci : logIndex), In p (nwPackets ?M9568) -> pBody p = AppendEntries t n pli plt es ci -> sorted es\" with \"P {| nwPackets := ps'; nwState := st' |}\".", "type": "cannot_unify", "handled": true}]}, "chat": [], "original": "intros. unfold refined_raft_net_invariant_timeout. intros net h st' ps' gd out d l Htimeout Helection Hinvariant Hreachable Hst' Hps'. apply allEntries_log_matching_inductive. split. - apply entries_contiguous_nw_invariant with (net:=net). + auto. + auto. - eapply entries_sorted_nw_invariant; eauto. + auto. + auto.", "succ": false}]