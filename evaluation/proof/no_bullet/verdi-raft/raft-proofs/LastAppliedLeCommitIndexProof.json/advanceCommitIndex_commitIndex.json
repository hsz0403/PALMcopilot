[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": ["intros st h.", "unfold advanceCommitIndex.", "destruct st.", "simpl."], "tactic": "apply Nat.le_max_l.", "exn": "In environment orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params currentTerm : term votedFor, leaderId : option name log : list entry commitIndex, lastApplied : logIndex stateMachine : data nextIndex, matchIndex : list (name * logIndex) shouldSend : bool votesReceived : list name type : serverType clientCache : list (clientId * (nat * output)) electoralVictories : list (term * list name * list entry) h : name Unable to unify \"?M1646 <= Nat.max ?M1646 ?M1647\" with \"commitIndex <= fold_left Init.Nat.max (map eIndex (filter (fun e : entry => (currentTerm =? eTerm e) && (commitIndex <? eIndex e) && haveQuorum (mkRaft_data currentTerm votedFor leaderId log commitIndex lastApplied stateMachine nextIndex matchIndex shouldSend votesReceived type clientCache electoralVictories) h (eIndex e)) (findGtIndex log commitIndex))) commitIndex\".", "type": "cannot_unify", "handled": true}]}, "chat": [], "original": "intros st h. unfold advanceCommitIndex. destruct st. simpl. apply Nat.le_max_l.", "succ": false}]