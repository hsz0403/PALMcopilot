[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": ["simpl.", "intros.", "unfold sorted in H.", "destruct H as [H1 H2]."], "tactic": "apply (fast_OMEGA13 1 (maxIndex l2) 0 1).", "exn": "In environment orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params llli : logs_leaderLogs_interface aerlli : append_entries_leaderLogs_interface rlmli : refined_log_matching_lemmas_interface aellti : allEntries_leaderLogs_term_interface llci : leaderLogs_contiguous_interface ollpti : one_leaderLog_per_term_interface llsi : leaderLogs_sorted_interface tsi : term_sanity_interface rri : raft_refinement_interface aetsi : allEntries_term_sanity_interface e : entry l1, l2 : list entry H1 : forall e' : entry, In e' (l1 ++ l2) -> eIndex e > eIndex e' /\\\\ eTerm e >= eTerm e' H2 : (fix sorted (log : list entry) : Prop := match log with | [] => True | e :: es => (forall e' : entry, In e' es -> eIndex e > eIndex e' /\\\\ eTerm e >= eTerm e') /\\\\ sorted es end) (l1 ++ l2) H0 : l2 <> [] The term \"maxIndex l2\" has type \"logIndex\" while it is expected to have type \"Z\".", "type": "wrong_type", "handled": true}, {"ctx": ["simpl.", "intros.", "unfold sorted in H.", "destruct H as [H1 H2].", "qsimpl use: maxIndex,fast_OMEGA13."], "tactic": "apply (maxIndex_is_max l2 e).", "exn": "In environment H : forall (v l1 l2 : Z) (x : positive) (P : Z -> Prop), P (l1 + l2)%Z -> P (v * Z.pos x + l1 + (v * Z.neg x + l2))%Z orig_base_params : BaseParams raft_params : RaftParams orig_base_params l : list entry -> logIndex one_node_params : OneNodeParams orig_base_params e : entry l1, l2 : list entry H2 : (fix sorted (log : list entry) : Prop := match log with | [] => True | e :: es => (forall e' : entry, In e' es -> eIndex e > eIndex e' /\\\\ eTerm e >= eTerm e') /\\\\ sorted es end) (l1 ++ l2) H0 : l2 = [] -> False H1 : forall e' : entry, In e' (l1 ++ l2) -> eTerm e >= eTerm e' H3 : forall e' : entry, In e' (l1 ++ l2) -> eIndex e > eIndex e' allEntries_term_sanity_invariant : forall net : network, refined_raft_intermediate_reachable net -> allEntries_term_sanity net refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (deghost net) no_entries_past_current_term_invariant : forall net : network, raft_intermediate_reachable net -> no_entries_past_current_term net leaderLogs_sorted_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaderLogs_sorted net one_leaderLog_per_term_invariant : forall net : network, refined_raft_intermediate_reachable net -> one_leaderLog_per_term net one_leaderLog_per_term_log_invariant : forall net : network, refined_raft_intermediate_reachable net -> one_leaderLog_per_term_log net one_leaderLog_per_term_host_invariant : forall net : network, refined_raft_intermediate_reachable net -> one_leaderLog_per_term_host net leaderLogs_contiguous_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaderLogs_contiguous net allEntries_leaderLogs_term_invariant : forall net : network, refined_raft_intermediate_reachable net -> allEntries_leaderLogs_term net entries_contiguous_nw_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_contiguous_nw net entries_gt_0_nw_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_gt_0_nw net entries_sorted_nw_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_sorted_nw net entries_gt_0_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_gt_0 net entries_contiguous_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_contiguous net entries_sorted_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_sorted net entries_match_invariant : forall (net : network) (h h' : name), refined_raft_intermediate_reachable net -> entries_match (log (snd (nwState net h))) (log (snd (nwState net h'))) entries_match_nw_1_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_match_nw_1 net entries_match_nw_host_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_match_nw_host net allEntries_gt_0_invariant : forall (net : network) (h : name) (e : entry), refined_raft_intermediate_reachable net -> In e (map snd (allEntries (fst (nwState net h)))) -> eIndex e > 0 append_entries_leaderLogs_invariant : forall net : network, refined_raft_intermediate_reachable net -> append_entries_leaderLogs net logs_leaderLogs_invariant : forall net : network, refined_raft_intermediate_reachable net -> logs_leaderLogs net logs_leaderLogs_nw_invariant : forall net : network, refined_raft_intermediate_reachable net -> logs_leaderLogs_nw net Unable to unify \"maxIndex l2 >= eIndex e\" with \"l l2 < eIndex e\".", "type": "cannot_unify", "handled": true}, {"ctx": ["simpl.", "intros.", "unfold sorted in H.", "destruct H as [H1 H2].", "qsimpl use: maxIndex,fast_OMEGA13.", "qsimpl use: maxIndex_is_max,maxIndex,fast_OMEGA13."], "tactic": "apply H2.", "exn": "In environment H5 : forall (v l1 l2 : Z) (x : positive) (P : Z -> Prop), P (l1 + l2)%Z -> P (v * Z.pos x + l1 + (v * Z.neg x + l2))%Z orig_base_params : BaseParams raft_params : RaftParams orig_base_params H4 : forall (l : list entry) (e : entry), sorted l -> In e l -> maxIndex l >= eIndex e l : list entry -> logIndex one_node_params : OneNodeParams orig_base_params e : entry l1, l2 : list entry H2 : (fix sorted (log : list entry) : Prop := match log with | [] => True | e :: es => (forall e' : entry, In e' es -> eIndex e > eIndex e' /\\\\ eTerm e >= eTerm e') /\\\\ sorted es end) (l1 ++ l2) H0 : l2 = [] -> False H1 : forall e' : entry, In e' (l1 ++ l2) -> eTerm e >= eTerm e' H3 : forall e' : entry, In e' (l1 ++ l2) -> eIndex e > eIndex e' allEntries_term_sanity_invariant : forall net : network, refined_raft_intermediate_reachable net -> allEntries_term_sanity net refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (deghost net) no_entries_past_current_term_invariant : forall net : network, raft_intermediate_reachable net -> no_entries_past_current_term net leaderLogs_sorted_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaderLogs_sorted net one_leaderLog_per_term_invariant : forall net : network, refined_raft_intermediate_reachable net -> one_leaderLog_per_term net one_leaderLog_per_term_log_invariant : forall net : network, refined_raft_intermediate_reachable net -> one_leaderLog_per_term_log net one_leaderLog_per_term_host_invariant : forall net : network, refined_raft_intermediate_reachable net -> one_leaderLog_per_term_host net leaderLogs_contiguous_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaderLogs_contiguous net allEntries_leaderLogs_term_invariant : forall net : network, refined_raft_intermediate_reachable net -> allEntries_leaderLogs_term net entries_contiguous_nw_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_contiguous_nw net entries_gt_0_nw_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_gt_0_nw net entries_sorted_nw_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_sorted_nw net entries_gt_0_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_gt_0 net entries_contiguous_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_contiguous net entries_sorted_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_sorted net entries_match_invariant : forall (net : network) (h h' : name), refined_raft_intermediate_reachable net -> entries_match (log (snd (nwState net h))) (log (snd (nwState net h'))) entries_match_nw_1_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_match_nw_1 net entries_match_nw_host_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_match_nw_host net allEntries_gt_0_invariant : forall (net : network) (h : name) (e : entry), refined_raft_intermediate_reachable net -> In e (map snd (allEntries (fst (nwState net h)))) -> eIndex e > 0 append_entries_leaderLogs_invariant : forall net : network, refined_raft_intermediate_reachable net -> append_entries_leaderLogs net logs_leaderLogs_invariant : forall net : network, refined_raft_intermediate_reachable net -> logs_leaderLogs net logs_leaderLogs_nw_invariant : forall net : network, refined_raft_intermediate_reachable net -> logs_leaderLogs_nw net H6 : logIndex Unable to unify \"(fix sorted (log : list entry) : Prop := match log with | [] => True | e :: es => (forall e' : entry, In e' es -> eIndex e > eIndex e' /\\\\ eTerm e >= eTerm e') /\\\\ sorted es end) (l1 ++ l2)\" with \"l l2 < eIndex e\".", "type": "cannot_unify", "handled": true}, {"ctx": ["simpl.", "intros.", "unfold sorted in H.", "destruct H as [H1 H2].", "qsimpl use: maxIndex,fast_OMEGA13.", "qsimpl use: maxIndex_is_max,maxIndex,fast_OMEGA13.", "qsimpl use: maxIndex_is_max,maxIndex,fast_OMEGA13."], "tactic": "apply in_or_app.", "exn": "In environment H7 : forall (v l1 l2 : Z) (x : positive) (P : Z -> Prop), P (l1 + l2)%Z -> P (v * Z.pos x + l1 + (v * Z.neg x + l2))%Z orig_base_params : BaseParams raft_params : RaftParams orig_base_params H : forall (l : list entry) (e : entry), sorted l -> In e l -> maxIndex l >= eIndex e l : list entry -> logIndex one_node_params : OneNodeParams orig_base_params e : entry l1, l2 : list entry H2 : (fix sorted (log : list entry) : Prop := match log with | [] => True | e :: es => (forall e' : entry, In e' es -> eIndex e > eIndex e' /\\\\ eTerm e >= eTerm e') /\\\\ sorted es end) (l1 ++ l2) H0 : l2 = [] -> False H1 : forall e' : entry, In e' (l1 ++ l2) -> eTerm e >= eTerm e' H3 : forall e' : entry, In e' (l1 ++ l2) -> eIndex e > eIndex e' allEntries_term_sanity_invariant : forall net : network, refined_raft_intermediate_reachable net -> allEntries_term_sanity net refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (deghost net) no_entries_past_current_term_invariant : forall net : network, raft_intermediate_reachable net -> no_entries_past_current_term net leaderLogs_sorted_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaderLogs_sorted net one_leaderLog_per_term_invariant : forall net : network, refined_raft_intermediate_reachable net -> one_leaderLog_per_term net one_leaderLog_per_term_log_invariant : forall net : network, refined_raft_intermediate_reachable net -> one_leaderLog_per_term_log net one_leaderLog_per_term_host_invariant : forall net : network, refined_raft_intermediate_reachable net -> one_leaderLog_per_term_host net leaderLogs_contiguous_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaderLogs_contiguous net allEntries_leaderLogs_term_invariant : forall net : network, refined_raft_intermediate_reachable net -> allEntries_leaderLogs_term net entries_contiguous_nw_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_contiguous_nw net entries_gt_0_nw_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_gt_0_nw net entries_sorted_nw_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_sorted_nw net entries_gt_0_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_gt_0 net entries_contiguous_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_contiguous net entries_sorted_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_sorted net entries_match_invariant : forall (net : network) (h h' : name), refined_raft_intermediate_reachable net -> entries_match (log (snd (nwState net h))) (log (snd (nwState net h'))) entries_match_nw_1_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_match_nw_1 net entries_match_nw_host_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_match_nw_host net allEntries_gt_0_invariant : forall (net : network) (h : name) (e : entry), refined_raft_intermediate_reachable net -> In e (map snd (allEntries (fst (nwState net h)))) -> eIndex e > 0 append_entries_leaderLogs_invariant : forall net : network, refined_raft_intermediate_reachable net -> append_entries_leaderLogs net logs_leaderLogs_invariant : forall net : network, refined_raft_intermediate_reachable net -> logs_leaderLogs net logs_leaderLogs_nw_invariant : forall net : network, refined_raft_intermediate_reachable net -> logs_leaderLogs_nw net H6, H8 : logIndex Unable to unify \"(fix In (a : ?M7170) (l : list ?M7170) {struct l} : Prop := match l with | [] => False | b :: m => b = a \\\\/ In a m end) ?M7173 (?M7171 ++ ?M7172)\" with \"S (l l2) <= eIndex e\".", "type": "cannot_unify", "handled": true}, {"ctx": ["simpl.", "intros.", "unfold sorted in H.", "destruct H as [H1 H2].", "qsimpl use: maxIndex,fast_OMEGA13.", "qsimpl use: maxIndex_is_max,maxIndex,fast_OMEGA13.", "qsimpl use: maxIndex_is_max,maxIndex,fast_OMEGA13.", "qsimpl use: maxIndex_is_max,in_or_app,maxIndex,fast_OMEGA13."], "tactic": "right.", "exn": "In environment H9 : forall (v l1 l2 : Z) (x : positive) (P : Z -> Prop), P (l1 + l2)%Z -> P (v * Z.pos x + l1 + (v * Z.neg x + l2))%Z orig_base_params : BaseParams raft_params : RaftParams orig_base_params H5 : forall (A : Type) (l m : list A) (a : A), In a l \\\\/ In a m -> In a (l ++ m) H4 : forall (l : list entry) (e : entry), sorted l -> In e l -> maxIndex l >= eIndex e l : list entry -> logIndex one_node_params : OneNodeParams orig_base_params e : entry l1, l2 : list entry H2 : (fix sorted (log : list entry) : Prop := match log with | [] => True | e :: es => (forall e' : entry, In e' es -> eIndex e > eIndex e' /\\\\ eTerm e >= eTerm e') /\\\\ sorted es end) (l1 ++ l2) H0 : l2 = [] -> False H1 : forall e' : entry, In e' (l1 ++ l2) -> eTerm e >= eTerm e' H3 : forall e' : entry, In e' (l1 ++ l2) -> eIndex e > eIndex e' allEntries_term_sanity_invariant : forall net : network, refined_raft_intermediate_reachable net -> allEntries_term_sanity net refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (deghost net) no_entries_past_current_term_invariant : forall net : network, raft_intermediate_reachable net -> no_entries_past_current_term net leaderLogs_sorted_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaderLogs_sorted net one_leaderLog_per_term_invariant : forall net : network, refined_raft_intermediate_reachable net -> one_leaderLog_per_term net one_leaderLog_per_term_log_invariant : forall net : network, refined_raft_intermediate_reachable net -> one_leaderLog_per_term_log net one_leaderLog_per_term_host_invariant : forall net : network, refined_raft_intermediate_reachable net -> one_leaderLog_per_term_host net leaderLogs_contiguous_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaderLogs_contiguous net allEntries_leaderLogs_term_invariant : forall net : network, refined_raft_intermediate_reachable net -> allEntries_leaderLogs_term net entries_contiguous_nw_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_contiguous_nw net entries_gt_0_nw_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_gt_0_nw net entries_sorted_nw_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_sorted_nw net entries_gt_0_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_gt_0 net entries_contiguous_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_contiguous net entries_sorted_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_sorted net entries_match_invariant : forall (net : network) (h h' : name), refined_raft_intermediate_reachable net -> entries_match (log (snd (nwState net h))) (log (snd (nwState net h'))) entries_match_nw_1_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_match_nw_1 net entries_match_nw_host_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_match_nw_host net allEntries_gt_0_invariant : forall (net : network) (h : name) (e : entry), refined_raft_intermediate_reachable net -> In e (map snd (allEntries (fst (nwState net h)))) -> eIndex e > 0 append_entries_leaderLogs_invariant : forall net : network, refined_raft_intermediate_reachable net -> append_entries_leaderLogs net logs_leaderLogs_invariant : forall net : network, refined_raft_intermediate_reachable net -> logs_leaderLogs net logs_leaderLogs_nw_invariant : forall net : network, refined_raft_intermediate_reachable net -> logs_leaderLogs_nw net H6, H8, H10 : logIndex Unable to unify \"?M8793 <= S ?M8794\" with \"S (l l2) <= eIndex e\".", "type": "cannot_unify", "handled": true}, {"ctx": ["simpl.", "intros.", "unfold sorted in H.", "destruct H as [H1 H2].", "qsimpl use: maxIndex,fast_OMEGA13.", "qsimpl use: maxIndex_is_max,maxIndex,fast_OMEGA13.", "qsimpl use: maxIndex_is_max,maxIndex,fast_OMEGA13.", "qsimpl use: maxIndex_is_max,in_or_app,maxIndex,fast_OMEGA13.", "qsimpl use: maxIndex_is_max,in_or_app,maxIndex,fast_OMEGA13."], "tactic": "left.", "exn": "In environment H11 : forall (v l1 l2 : Z) (x : positive) (P : Z -> Prop), P (l1 + l2)%Z -> P (v * Z.pos x + l1 + (v * Z.neg x + l2))%Z orig_base_params : BaseParams raft_params : RaftParams orig_base_params H7 : forall (A : Type) (l m : list A) (a : A), In a l \\\\/ In a m -> In a (l ++ m) H : forall (l : list entry) (e : entry), sorted l -> In e l -> maxIndex l >= eIndex e l : list entry -> logIndex one_node_params : OneNodeParams orig_base_params e : entry l1, l2 : list entry H2 : (fix sorted (log : list entry) : Prop := match log with | [] => True | e :: es => (forall e' : entry, In e' es -> eIndex e > eIndex e' /\\\\ eTerm e >= eTerm e') /\\\\ sorted es end) (l1 ++ l2) H0 : l2 = [] -> False H1 : forall e' : entry, In e' (l1 ++ l2) -> eTerm e >= eTerm e' H3 : forall e' : entry, In e' (l1 ++ l2) -> eIndex e > eIndex e' allEntries_term_sanity_invariant : forall net : network, refined_raft_intermediate_reachable net -> allEntries_term_sanity net refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (deghost net) no_entries_past_current_term_invariant : forall net : network, raft_intermediate_reachable net -> no_entries_past_current_term net leaderLogs_sorted_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaderLogs_sorted net one_leaderLog_per_term_invariant : forall net : network, refined_raft_intermediate_reachable net -> one_leaderLog_per_term net one_leaderLog_per_term_log_invariant : forall net : network, refined_raft_intermediate_reachable net -> one_leaderLog_per_term_log net one_leaderLog_per_term_host_invariant : forall net : network, refined_raft_intermediate_reachable net -> one_leaderLog_per_term_host net leaderLogs_contiguous_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaderLogs_contiguous net allEntries_leaderLogs_term_invariant : forall net : network, refined_raft_intermediate_reachable net -> allEntries_leaderLogs_term net entries_contiguous_nw_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_contiguous_nw net entries_gt_0_nw_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_gt_0_nw net entries_sorted_nw_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_sorted_nw net entries_gt_0_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_gt_0 net entries_contiguous_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_contiguous net entries_sorted_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_sorted net entries_match_invariant : forall (net : network) (h h' : name), refined_raft_intermediate_reachable net -> entries_match (log (snd (nwState net h))) (log (snd (nwState net h'))) entries_match_nw_1_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_match_nw_1 net entries_match_nw_host_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_match_nw_host net allEntries_gt_0_invariant : forall (net : network) (h : name) (e : entry), refined_raft_intermediate_reachable net -> In e (map snd (allEntries (fst (nwState net h)))) -> eIndex e > 0 append_entries_leaderLogs_invariant : forall net : network, refined_raft_intermediate_reachable net -> append_entries_leaderLogs net logs_leaderLogs_invariant : forall net : network, refined_raft_intermediate_reachable net -> logs_leaderLogs net logs_leaderLogs_nw_invariant : forall net : network, refined_raft_intermediate_reachable net -> logs_leaderLogs_nw net H6, H8, H10, H12 : logIndex Unable to unify \"eIndex e\" with \"S (l l2)\".", "type": "cannot_unify", "handled": true}]}, "chat": [], "original": "simpl. intros. unfold sorted in H. simpl in H. destruct H as [H1 H2]. apply (fast_OMEGA13 1 (maxIndex l2) 0 1). apply (maxIndex_is_max l2 e). apply H2. apply in_or_app. right. left. reflexivity. apply H0. apply le_n. apply le_0_n.", "succ": false}]