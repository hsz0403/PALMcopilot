[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": [], "tactic": "intros orig_base_params one_node_params raft_params rri cei vci cci olpti xs p ys net st' ps' d m t es res Hhandle Hbody HP Hreachable Heq.", "exn": "orig_base_params is already used.", "type": "used_var", "handled": true}, {"ctx": [], "tactic": "intros orig_base_params' one_node_params raft_params rri cei vci cci olpti xs p ys net st' ps' d m t es res Hhandle Hbody HP Hreachable Heq.", "exn": "one_node_params is already used.", "type": "used_var", "handled": true}, {"ctx": [], "tactic": "intros orig_base_params' one_node_params' raft_params rri cei vci cci olpti xs p ys net st' ps' d m t es res Hhandle Hbody HP Hreachable Heq.", "exn": "raft_params is already used.", "type": "used_var", "handled": true}, {"ctx": [], "tactic": "intros orig_base_params' one_node_params' raft_params' rri cei vci cci olpti xs p ys net st' ps' d m t es res Hhandle Hbody HP Hreachable Heq.", "exn": "rri is already used.", "type": "used_var", "handled": true}, {"ctx": [], "tactic": "intros orig_base_params' one_node_params' raft_params' rri' cei vci cci olpti xs p ys net st' ps' d m t es res Hhandle Hbody HP Hreachable Heq.", "exn": "cei is already used.", "type": "used_var", "handled": true}, {"ctx": [], "tactic": "intros orig_base_params' one_node_params' raft_params' rri' cei' vci cci olpti xs p ys net st' ps' d m t es res Hhandle Hbody HP Hreachable Heq.", "exn": "vci is already used.", "type": "used_var", "handled": true}, {"ctx": [], "tactic": "intros orig_base_params' one_node_params' raft_params' rri' cei' vci' cci olpti xs p ys net st' ps' d m t es res Hhandle Hbody HP Hreachable Heq.", "exn": "cci is already used.", "type": "used_var", "handled": true}, {"ctx": [], "tactic": "intros orig_base_params' one_node_params' raft_params' rri' cei' vci' cci' olpti xs p ys net st' ps' d m t es res Hhandle Hbody HP Hreachable Heq.", "exn": "olpti is already used.", "type": "used_var", "handled": true}, {"ctx": [], "tactic": "intros orig_base_params' one_node_params' raft_params' rri' cei' vci' cci' olpti' xs p ys net st' ps' d m t es res Hhandle Hbody HP Hreachable Heq.", "exn": "No product even after head-reduction.", "type": "no_product", "handled": true}, {"ctx": ["unfold raft_net_invariant_append_entries_reply in *.", "intros h."], "tactic": "specialize (Heq h).", "exn": "The reference Heq was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["unfold raft_net_invariant_append_entries_reply in *.", "intros h.", "specialize (in_app_iff h)."], "tactic": "rewrite Heq in *.", "exn": "The reference Heq was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["unfold raft_net_invariant_append_entries_reply in *.", "intros h.", "specialize (in_app_iff h)."], "tactic": "clear Heq.", "exn": "No such hypothesis: Heq", "type": "no_hypos", "handled": true}, {"ctx": ["unfold raft_net_invariant_append_entries_reply in *.", "intros h.", "specialize (in_app_iff h).", "qsimpl."], "tactic": "apply leader_sublog_invariant_invariant; auto.", "exn": "In environment orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params h : list packet p : packet ys : list packet net : network st' : name -> raft_data ps' : list packet d : raft_data m : list (name * msg) t : nat es : list entry res : bool H0 : handleAppendEntriesReply (pDst p) (nwState net (pDst p)) (pSrc p) t es res = (d, m) H1 : pBody p = AppendEntriesReply t es res H3 : raft_intermediate_reachable net H4 : nwPackets net = h ++ p :: ys H5 : forall h : name, st' h = (if name_eq_dec h (pDst p) then d else nwState net h) H6 : forall p' : packet, In p' ps' -> In p' (h ++ ys) \\\\/ In p' (map (fun m : name * msg => {| pSrc := pDst p; pDst := fst m; pBody := snd m |}) m) H7 : forall (l' : list packet) (a : packet), In a l' -> In a (h ++ l') H8 : forall (l' : list packet) (a : packet), In a h -> In a (h ++ l') H : forall (l' : list packet) (a : packet), In a (h ++ l') -> In a h \\\\/ In a l' H9 : leader_sublog_host_invariant net H10 : leader_sublog_nw_invariant net one_leader_per_term_invariant : forall net : network, raft_intermediate_reachable net -> one_leader_per_term net cronies_correct_invariant : forall net : network, refined_raft_intermediate_reachable net -> cronies_correct net votes_correct_invariant : forall net : network, refined_raft_intermediate_reachable net -> votes_correct net candidate_entries_invariant : forall net : network, refined_raft_intermediate_reachable net -> CandidateEntries net refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (deghost net) Unable to unify \"leader_sublog_host_invariant ?M16970 /\\\\ leader_sublog_nw_invariant ?M16970\" with \"forall (leader : Net.name) (e : entry) (h : Net.name), type (nwState {| nwPackets := ps'; nwState := st' |} leader) = Leader -> In e (log (nwState {| nwPackets := ps'; nwState := st' |} h)) -> eTerm e = currentTerm (nwState {| nwPackets := ps'; nwState := st' |} leader) -> In e (log (nwState {| nwPackets := ps'; nwState := st' |} leader))\".", "type": "cannot_unify", "handled": true}]}, "chat": [], "original": "intros orig_base_params one_node_params raft_params rri cei vci cci olpti xs p ys net st' ps' d m t es res Hhandle Hbody HP Hreachable Heq. unfold raft_net_invariant_append_entries_reply in *. intros h. specialize (Heq h). rewrite Heq in *. clear Heq. apply leader_sublog_invariant_invariant; auto.", "succ": false}]