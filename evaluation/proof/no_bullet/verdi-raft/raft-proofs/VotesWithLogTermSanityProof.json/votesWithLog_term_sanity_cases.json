[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": ["intros net st' ps' h gd d H_votesWithLog H_update_st H_sameTerm H_termSanity H_ge currentTerm_ge_update.", "unfold votesWithLog_term_sanity in *."], "tactic": "intros t' h' l' H_in_votesWithLog.", "exn": "No product even after head-reduction.", "type": "no_product", "handled": true}, {"ctx": ["intros net st' ps' h gd d H_votesWithLog H_update_st H_sameTerm H_termSanity H_ge currentTerm_ge_update.", "unfold votesWithLog_term_sanity in *.", "intros."], "tactic": "apply currentTerm_ge_update in H_ge.", "exn": "Unable to apply lemma of type \"name\" on hypothesis of type \"term\".", "type": "cannot_apply_in", "handled": true}, {"ctx": ["intros net st' ps' h gd d H_votesWithLog H_update_st H_sameTerm H_termSanity H_ge currentTerm_ge_update.", "unfold votesWithLog_term_sanity in *.", "intros.", "qsimpl."], "tactic": "apply H_votesWithLog in H_in_votesWithLog.", "exn": "No such hypothesis: H_in_votesWithLog", "type": "no_hypos", "handled": true}, {"ctx": ["intros net st' ps' h gd d H_votesWithLog H_update_st H_sameTerm H_termSanity H_ge currentTerm_ge_update.", "unfold votesWithLog_term_sanity in *.", "intros.", "qsimpl."], "tactic": "destruct H_in_votesWithLog as [H_in_net | [H_term H_log]].", "exn": "The reference H_in_votesWithLog was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros net st' ps' h gd d H_votesWithLog H_update_st H_sameTerm H_termSanity H_ge currentTerm_ge_update.", "unfold votesWithLog_term_sanity in *.", "intros.", "qsimpl.", "destruct votesWithLog as [H_in_net | [H_term H_log]].", "-"], "tactic": "left.", "exn": "In environment orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params net : network st' : name -> electionsData * raft_data ps' : list packet h : name gd : electionsData d : raft_data H_votesWithLog : forall (t : term) (l : name) (hs : list entry) (h : name), In (t, l, hs) (votesWithLog (fst (nwState net h))) -> t <= currentTerm (snd (nwState net h)) H_update_st : forall h' : name, st' h' = update name_eq_dec (nwState net) h (gd, d) h' H_sameTerm : forall (t' : term) (h' : name) (l' : list entry), In (t', h', l') [] -> In (t', h', l') (votesWithLog (fst (nwState net h))) \\\\/ t' = currentTerm d /\\\\ l' = log d H_termSanity : currentTerm d >= currentTerm (snd (nwState net h)) H_ge : term currentTerm_ge_update : name hs : list entry h0 : name H : In (H_ge, currentTerm_ge_update, hs) (votesWithLog (fst (st' h0))) refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (GhostSimulations.deghost net) Unable to unify \"currentTerm (snd (st' h0))\" with \"H_ge\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros net st' ps' h gd d H_votesWithLog H_update_st H_sameTerm H_termSanity H_ge currentTerm_ge_update.", "unfold votesWithLog_term_sanity in *.", "intros.", "qsimpl.", "destruct votesWithLog as [H_in_net | [H_term H_log]].", "-", "qsimpl."], "tactic": "-", "exn": "Wrong bullet -: Current bullet - is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["intros net st' ps' h gd d H_votesWithLog H_update_st H_sameTerm H_termSanity H_ge currentTerm_ge_update.", "unfold votesWithLog_term_sanity in *.", "intros.", "qsimpl.", "destruct votesWithLog as [H_in_net | [H_term H_log]].", "-", "qsimpl.", "shelve.", "-"], "tactic": "right.", "exn": "In environment orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params net : network st' : name -> electionsData * raft_data ps' : list packet h : name gd : electionsData d : raft_data H_votesWithLog : forall (t : term) (l : name) (hs : list entry) (h : name), In (t, l, hs) (votesWithLog (fst (nwState net h))) -> t <= currentTerm (snd (nwState net h)) H_update_st : forall h' : name, st' h' = update name_eq_dec (nwState net) h (gd, d) h' H_term : term * name H_log : list entry l : list (term * name * list entry) H_sameTerm : forall (t' : term) (h' : name) (l' : list entry), In (t', h', l') ((H_term, H_log) :: l) -> In (t', h', l') (votesWithLog (fst (nwState net h))) \\\\/ t' = currentTerm d /\\\\ l' = log d H_termSanity : currentTerm d >= currentTerm (snd (nwState net h)) H_ge : term currentTerm_ge_update : name hs : list entry h0 : name H : In (H_ge, currentTerm_ge_update, hs) (votesWithLog (fst (st' h0))) refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (GhostSimulations.deghost net) Unable to unify \"?M4283 <= S ?M4284\" with \"H_ge <= currentTerm (snd (st' h0))\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros net st' ps' h gd d H_votesWithLog H_update_st H_sameTerm H_termSanity H_ge currentTerm_ge_update.", "unfold votesWithLog_term_sanity in *.", "intros.", "qsimpl.", "destruct votesWithLog as [H_in_net | [H_term H_log]].", "-", "qsimpl.", "shelve.", "-", "qsimpl."], "tactic": "split; reflexivity.", "exn": "Not an inductive goal with 1 constructor.", "type": "not_inductive_goal", "handled": true}]}, "chat": [], "original": "intros net st' ps' h gd d H_votesWithLog H_update_st H_sameTerm H_termSanity H_ge currentTerm_ge_update. unfold votesWithLog_term_sanity in *. intros t' h' l' H_in_votesWithLog. apply currentTerm_ge_update in H_ge. apply H_votesWithLog in H_in_votesWithLog. destruct H_in_votesWithLog as [H_in_net | [H_term H_log]]. - left. auto. - right. subst. split; reflexivity.", "succ": false}]