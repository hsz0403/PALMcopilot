[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": [], "tactic": "unfold every_entry_was_created_host_log_interface.", "exn": "Cannot coerce every_entry_was_created_host_log_interface to an evaluable reference.", "type": "not_evaluable", "handled": true}, {"ctx": ["qsimpl use: every_entry_was_created_host_log_interface."], "tactic": "apply Build_every_entry_was_created_host_log_interface.", "exn": "In environment P : Prop orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params every_entry_was_created_invariant : forall net : network, refined_raft_intermediate_reachable net -> every_entry_was_created net every_entry_was_created_in_any_log_invariant : forall (net : network) (e : entry), refined_raft_intermediate_reachable net -> in_any_log net e -> RefinementCommonDefinitions.term_was_created net (eTerm e) refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (GhostSimulations.deghost net) leaders_have_leaderLogs_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaders_have_leaderLogs net Unable to unify \"every_entry_was_created_host_log_interface\" with \"P\".", "type": "cannot_unify", "handled": true}, {"ctx": ["qsimpl use: every_entry_was_created_host_log_interface.", "qsimpl use: Build_every_entry_was_created_host_log_interface,every_entry_was_created_host_log_interface."], "tactic": "apply every_entry_was_created_in_any_log_invariant with net e.", "exn": "The reference net was not found in the current environment.", "type": "ref_not_found", "handled": true}]}, "chat": [], "original": "simpl. unfold every_entry_was_created_host_log_interface. intros. apply Build_every_entry_was_created_host_log_interface. intros. apply every_entry_was_created_in_any_log_invariant with net e. auto. auto.", "succ": false}]