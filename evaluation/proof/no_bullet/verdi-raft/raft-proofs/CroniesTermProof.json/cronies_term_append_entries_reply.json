[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": [], "tactic": "intros orig_base_params one_node_params raft_params rri xs p ys net st' ps' gd d m t es res Hhandle Hgd Hp Hreachable Hpackets Hst'.", "exn": "orig_base_params is already used.", "type": "used_var", "handled": true}, {"ctx": [], "tactic": "intros orig_base_params' one_node_params raft_params rri xs p ys net st' ps' gd d m t es res Hhandle Hgd Hp Hreachable Hpackets Hst'.", "exn": "one_node_params is already used.", "type": "used_var", "handled": true}, {"ctx": [], "tactic": "intros orig_base_params' one_node_params' raft_params rri xs p ys net st' ps' gd d m t es res Hhandle Hgd Hp Hreachable Hpackets Hst'.", "exn": "raft_params is already used.", "type": "used_var", "handled": true}, {"ctx": [], "tactic": "intros orig_base_params' one_node_params' raft_params' rri xs p ys net st' ps' gd d m t es res Hhandle Hgd Hp Hreachable Hpackets Hst'.", "exn": "rri is already used.", "type": "used_var", "handled": true}, {"ctx": ["intros orig_base_params' one_node_params' raft_params' rri' xs p ys net st' ps' gd d m t es res Hhandle Hgd Hp Hreachable Hpackets Hst'."], "tactic": "apply (refined_raft_net_invariant_append_entries_reply orig_base_params one_node_params raft_params rri).", "exn": "In environment orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params rri : raft_refinement_interface orig_base_params' : list packet one_node_params' : packet raft_params' : list packet rri' : network xs : name -> data p : list packet ys : GhostSimulations.ghost_data net : raft_data st' : list (name * msg) ps' : nat gd : list entry d : bool m : handleAppendEntriesReply (pDst one_node_params') (snd (nwState rri' (pDst one_node_params'))) (pSrc one_node_params') ps' gd d = (net, st') t : ys = fst (nwState rri' (pDst one_node_params')) es : pBody one_node_params' = AppendEntriesReply ps' gd d res : cronies_term rri' Hhandle : refined_raft_intermediate_reachable rri' Hgd : nwPackets rri' = orig_base_params' ++ one_node_params' :: raft_params' Hp : forall h : name, xs h = update name_eq_dec (nwState rri') (pDst one_node_params') (ys, net) h Hreachable : forall p' : packet, In p' p -> In p' (orig_base_params' ++ raft_params') \\\\/ In p' (send_packets (pDst one_node_params') st') Hpackets : name Hst' : Net.name The term \"orig_base_params\" has type \"BaseParams\" while it is expected to have type \"network -> Prop\".", "type": "wrong_type", "handled": true}, {"ctx": ["intros orig_base_params' one_node_params' raft_params' rri' xs p ys net st' ps' gd d m t es res Hhandle Hgd Hp Hreachable Hpackets Hst'.", "qsimpl use: refined_raft_net_invariant_append_entries_reply."], "tactic": "apply Hhandle.", "exn": "In environment orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params X : (network -> Prop) -> Prop orig_base_params' : list packet one_node_params' : packet raft_params' : list packet rri' : network xs : name -> electionsData * raft_data p : list packet net : raft_data st' : list (name * msg) ps' : nat gd : list entry d : bool m : handleAppendEntriesReply (pDst one_node_params') (snd (nwState rri' (pDst one_node_params'))) (pSrc one_node_params') ps' gd d = (net, st') es : pBody one_node_params' = AppendEntriesReply ps' gd d res : cronies_term rri' Hhandle : refined_raft_intermediate_reachable rri' Hgd : nwPackets rri' = orig_base_params' ++ one_node_params' :: raft_params' Hp : forall h : name, xs h = update name_eq_dec (nwState rri') (pDst one_node_params') (fst (nwState rri' (pDst one_node_params')), net) h Hreachable : forall p' : packet, In p' p -> In p' (orig_base_params' ++ raft_params') \\\\/ In p' (map (fun m : name * msg => {| pSrc := pDst one_node_params'; pDst := fst m; pBody := snd m |}) st') Hpackets, Hst' : name t0 : term H : In Hpackets (cronies (fst (xs Hst')) t0) refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (GhostSimulations.deghost net) Unable to unify \"refined_raft_intermediate_reachable rri'\" with \"t0 <= currentTerm (snd (xs Hst'))\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros orig_base_params' one_node_params' raft_params' rri' xs p ys net st' ps' gd d m t es res Hhandle Hgd Hp Hreachable Hpackets Hst'.", "qsimpl use: refined_raft_net_invariant_append_entries_reply.", "qsimpl use: refined_raft_net_invariant_append_entries_reply."], "tactic": "apply Hgd.", "exn": "In environment orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params X0, X : (network -> Prop) -> Prop orig_base_params' : list packet one_node_params' : packet raft_params' : list packet rri' : network xs : name -> electionsData * raft_data p : list packet net : raft_data st' : list (name * msg) ps' : nat gd : list entry d : bool m : handleAppendEntriesReply (pDst one_node_params') (snd (nwState rri' (pDst one_node_params'))) (pSrc one_node_params') ps' gd d = (net, st') es : pBody one_node_params' = AppendEntriesReply ps' gd d res : cronies_term rri' Hhandle : refined_raft_intermediate_reachable rri' Hgd : nwPackets rri' = orig_base_params' ++ one_node_params' :: raft_params' Hp : forall h : name, xs h = update name_eq_dec (nwState rri') (pDst one_node_params') (fst (nwState rri' (pDst one_node_params')), net) h Hreachable : forall p' : packet, In p' p -> In p' (orig_base_params' ++ raft_params') \\\\/ In p' (map (fun m : name * msg => {| pSrc := pDst one_node_params'; pDst := fst m; pBody := snd m |}) st') Hpackets, Hst' : name t0 : term H : In Hpackets (cronies (fst (xs Hst')) t0) refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (GhostSimulations.deghost net) Unable to unify \"nwPackets rri' = orig_base_params' ++ one_node_params' :: raft_params'\" with \"t0 <= currentTerm (snd (xs Hst'))\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros orig_base_params' one_node_params' raft_params' rri' xs p ys net st' ps' gd d m t es res Hhandle Hgd Hp Hreachable Hpackets Hst'.", "qsimpl use: refined_raft_net_invariant_append_entries_reply.", "qsimpl use: refined_raft_net_invariant_append_entries_reply.", "qsimpl use: refined_raft_net_invariant_append_entries_reply."], "tactic": "apply Hp.", "exn": "In environment orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params X1, X0, X : (network -> Prop) -> Prop orig_base_params' : list packet one_node_params' : packet raft_params' : list packet rri' : network xs : name -> electionsData * raft_data p : list packet net : raft_data st' : list (name * msg) ps' : nat gd : list entry d : bool m : handleAppendEntriesReply (pDst one_node_params') (snd (nwState rri' (pDst one_node_params'))) (pSrc one_node_params') ps' gd d = (net, st') es : pBody one_node_params' = AppendEntriesReply ps' gd d res : cronies_term rri' Hhandle : refined_raft_intermediate_reachable rri' Hgd : nwPackets rri' = orig_base_params' ++ one_node_params' :: raft_params' Hp : forall h : name, xs h = update name_eq_dec (nwState rri') (pDst one_node_params') (fst (nwState rri' (pDst one_node_params')), net) h Hreachable : forall p' : packet, In p' p -> In p' (orig_base_params' ++ raft_params') \\\\/ In p' (map (fun m : name * msg => {| pSrc := pDst one_node_params'; pDst := fst m; pBody := snd m |}) st') Hpackets, Hst' : name t0 : term H : In Hpackets (cronies (fst (xs Hst')) t0) refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (GhostSimulations.deghost net) Unable to unify \"xs ?M9270 = update name_eq_dec (nwState rri') (pDst one_node_params') (fst (nwState rri' (pDst one_node_params')), net) ?M9270\" with \"t0 <= currentTerm (snd (xs Hst'))\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros orig_base_params' one_node_params' raft_params' rri' xs p ys net st' ps' gd d m t es res Hhandle Hgd Hp Hreachable Hpackets Hst'.", "qsimpl use: refined_raft_net_invariant_append_entries_reply.", "qsimpl use: refined_raft_net_invariant_append_entries_reply.", "qsimpl use: refined_raft_net_invariant_append_entries_reply.", "qsimpl use: refined_raft_net_invariant_append_entries_reply."], "tactic": "apply Hreachable.", "exn": "In environment orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params X2, X1, X0, X : (network -> Prop) -> Prop orig_base_params' : list packet one_node_params' : packet raft_params' : list packet rri' : network xs : name -> electionsData * raft_data p : list packet net : raft_data st' : list (name * msg) ps' : nat gd : list entry d : bool m : handleAppendEntriesReply (pDst one_node_params') (snd (nwState rri' (pDst one_node_params'))) (pSrc one_node_params') ps' gd d = (net, st') es : pBody one_node_params' = AppendEntriesReply ps' gd d res : cronies_term rri' Hhandle : refined_raft_intermediate_reachable rri' Hgd : nwPackets rri' = orig_base_params' ++ one_node_params' :: raft_params' Hp : forall h : name, xs h = update name_eq_dec (nwState rri') (pDst one_node_params') (fst (nwState rri' (pDst one_node_params')), net) h Hreachable : forall p' : packet, In p' p -> In p' (orig_base_params' ++ raft_params') \\\\/ In p' (map (fun m : name * msg => {| pSrc := pDst one_node_params'; pDst := fst m; pBody := snd m |}) st') Hpackets, Hst' : name t0 : term H : In Hpackets (cronies (fst (xs Hst')) t0) refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (GhostSimulations.deghost net) Unable to unify \"In ?M19108 (orig_base_params' ++ raft_params') \\\\/ In ?M19108 (map (fun m : name * msg => {| pSrc := pDst one_node_params'; pDst := fst m; pBody := snd m |}) st')\" with \"t0 <= currentTerm (snd (xs Hst'))\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros orig_base_params' one_node_params' raft_params' rri' xs p ys net st' ps' gd d m t es res Hhandle Hgd Hp Hreachable Hpackets Hst'.", "qsimpl use: refined_raft_net_invariant_append_entries_reply.", "qsimpl use: refined_raft_net_invariant_append_entries_reply.", "qsimpl use: refined_raft_net_invariant_append_entries_reply.", "qsimpl use: refined_raft_net_invariant_append_entries_reply.", "qsimpl use: refined_raft_net_invariant_append_entries_reply."], "tactic": "apply Hpackets.", "exn": "In environment orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params X3, X2, X1, X0, X : (network -> Prop) -> Prop orig_base_params' : list packet one_node_params' : packet raft_params' : list packet rri' : network xs : name -> electionsData * raft_data p : list packet net : raft_data st' : list (name * msg) ps' : nat gd : list entry d : bool m : handleAppendEntriesReply (pDst one_node_params') (snd (nwState rri' (pDst one_node_params'))) (pSrc one_node_params') ps' gd d = (net, st') es : pBody one_node_params' = AppendEntriesReply ps' gd d res : cronies_term rri' Hhandle : refined_raft_intermediate_reachable rri' Hgd : nwPackets rri' = orig_base_params' ++ one_node_params' :: raft_params' Hp : forall h : name, xs h = update name_eq_dec (nwState rri') (pDst one_node_params') (fst (nwState rri' (pDst one_node_params')), net) h Hreachable : forall p' : packet, In p' p -> In p' (orig_base_params' ++ raft_params') \\\\/ In p' (map (fun m : name * msg => {| pSrc := pDst one_node_params'; pDst := fst m; pBody := snd m |}) st') Hpackets, Hst' : name t0 : term H : In Hpackets (cronies (fst (xs Hst')) t0) refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (GhostSimulations.deghost net) Unable to unify \"name\" with \"t0 <= currentTerm (snd (xs Hst'))\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros orig_base_params' one_node_params' raft_params' rri' xs p ys net st' ps' gd d m t es res Hhandle Hgd Hp Hreachable Hpackets Hst'.", "qsimpl use: refined_raft_net_invariant_append_entries_reply.", "qsimpl use: refined_raft_net_invariant_append_entries_reply.", "qsimpl use: refined_raft_net_invariant_append_entries_reply.", "qsimpl use: refined_raft_net_invariant_append_entries_reply.", "qsimpl use: refined_raft_net_invariant_append_entries_reply.", "qsimpl use: refined_raft_net_invariant_append_entries_reply."], "tactic": "intros h'.", "exn": "No product even after head-reduction.", "type": "no_product", "handled": true}, {"ctx": ["intros orig_base_params' one_node_params' raft_params' rri' xs p ys net st' ps' gd d m t es res Hhandle Hgd Hp Hreachable Hpackets Hst'.", "qsimpl use: refined_raft_net_invariant_append_entries_reply.", "qsimpl use: refined_raft_net_invariant_append_entries_reply.", "qsimpl use: refined_raft_net_invariant_append_entries_reply.", "qsimpl use: refined_raft_net_invariant_append_entries_reply.", "qsimpl use: refined_raft_net_invariant_append_entries_reply.", "qsimpl use: refined_raft_net_invariant_append_entries_reply."], "tactic": "apply Hst'.", "exn": "In environment orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params X4, X3, X2, X1, X0, X : (network -> Prop) -> Prop orig_base_params' : list packet one_node_params' : packet raft_params' : list packet rri' : network xs : name -> electionsData * raft_data p : list packet net : raft_data st' : list (name * msg) ps' : nat gd : list entry d : bool m : handleAppendEntriesReply (pDst one_node_params') (snd (nwState rri' (pDst one_node_params'))) (pSrc one_node_params') ps' gd d = (net, st') es : pBody one_node_params' = AppendEntriesReply ps' gd d res : cronies_term rri' Hhandle : refined_raft_intermediate_reachable rri' Hgd : nwPackets rri' = orig_base_params' ++ one_node_params' :: raft_params' Hp : forall h : name, xs h = update name_eq_dec (nwState rri') (pDst one_node_params') (fst (nwState rri' (pDst one_node_params')), net) h Hreachable : forall p' : packet, In p' p -> In p' (orig_base_params' ++ raft_params') \\\\/ In p' (map (fun m : name * msg => {| pSrc := pDst one_node_params'; pDst := fst m; pBody := snd m |}) st') Hpackets, Hst' : name t0 : term H : In Hpackets (cronies (fst (xs Hst')) t0) refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (GhostSimulations.deghost net) Unable to unify \"name\" with \"t0 <= currentTerm (snd (xs Hst'))\".", "type": "cannot_unify", "handled": true}]}, "chat": [], "original": "intros orig_base_params one_node_params raft_params rri xs p ys net st' ps' gd d m t es res Hhandle Hgd Hp Hreachable Hpackets Hst'. apply (refined_raft_net_invariant_append_entries_reply orig_base_params one_node_params raft_params rri). - apply Hhandle. - apply Hgd. - apply Hp. - apply Hreachable. - apply Hpackets. - intros h'. apply Hst'.", "succ": false}]