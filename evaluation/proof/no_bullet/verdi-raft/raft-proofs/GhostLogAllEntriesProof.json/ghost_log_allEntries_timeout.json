[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": [], "tactic": "intros orig_base_params one_node_params raft_params rmri iliaei.", "exn": "orig_base_params is already used.", "type": "used_var", "handled": true}, {"ctx": [], "tactic": "intros orig_base_params' one_node_params raft_params rmri iliaei.", "exn": "one_node_params is already used.", "type": "used_var", "handled": true}, {"ctx": [], "tactic": "intros orig_base_params' one_node_params' raft_params rmri iliaei.", "exn": "raft_params is already used.", "type": "used_var", "handled": true}, {"ctx": [], "tactic": "intros orig_base_params' one_node_params' raft_params' rmri iliaei.", "exn": "rmri is already used.", "type": "used_var", "handled": true}, {"ctx": [], "tactic": "intros orig_base_params' one_node_params' raft_params' rmri' iliaei.", "exn": "iliaei is already used.", "type": "used_var", "handled": true}, {"ctx": ["intros orig_base_params' one_node_params' raft_params' rmri' iliaei'.", "intros net h st' ps' gd out d l ht upd_pd P Hreach Hst'."], "tactic": "pose proof (msg_refined_raft_net_invariant_timeout orig_base_params one_node_params raft_params P net h st' ps' gd out d l ht upd_pd P Hreach) as Hinv.", "exn": "In environment orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params rmri : raft_msg_refinement_interface iliaei : in_log_in_all_entries_interface orig_base_params' : network one_node_params' : name raft_params' : Net.name -> data rmri' : list packet iliaei' : electionsData net : list raft_output h : raft_data st' : list (name * msg) ps' : handleTimeout one_node_params' (snd (nwState orig_base_params' one_node_params')) = (net, h, st') gd : iliaei' = update_elections_data_timeout one_node_params' (nwState orig_base_params' one_node_params') out : ghost_log_allEntries orig_base_params' d : msg_refined_raft_intermediate_reachable orig_base_params' l : msg_refined_raft_intermediate_reachable {| nwPackets := rmri'; nwState := raft_params' |} ht : forall h' : Net.name, raft_params' h' = update name_eq_dec (nwState orig_base_params') one_node_params' (iliaei', h) h' upd_pd : forall p' : packet, In p' rmri' -> In p' (nwPackets orig_base_params') \\\\/ In p' (send_packets one_node_params' (add_ghost_msg one_node_params' (iliaei', h) st')) P : packet Hreach : entry Hst' : In P (nwPackets {| nwPackets := rmri'; nwState := raft_params' |}) The term \"orig_base_params\" has type \"BaseParams\" while it is expected to have type \"network -> Prop\".", "type": "wrong_type", "handled": true}, {"ctx": ["intros orig_base_params' one_node_params' raft_params' rmri' iliaei'.", "intros net h st' ps' gd out d l ht upd_pd P Hreach Hst'.", "qsimpl use: msg_refined_raft_net_invariant_timeout."], "tactic": "apply Hinv; auto.", "exn": "The reference Hinv was not found in the current environment.", "type": "ref_not_found", "handled": true}]}, "chat": [], "original": "intros orig_base_params one_node_params raft_params rmri iliaei. unfold msg_refined_raft_net_invariant_timeout'. intros net h st' ps' gd out d l ht upd_pd P Hreach Hst'. pose proof (msg_refined_raft_net_invariant_timeout orig_base_params one_node_params raft_params P net h st' ps' gd out d l ht upd_pd P Hreach) as Hinv. apply Hinv; auto.", "succ": false}]