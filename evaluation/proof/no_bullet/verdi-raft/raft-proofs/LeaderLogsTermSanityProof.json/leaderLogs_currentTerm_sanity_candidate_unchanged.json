[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": ["intros net st' h gd d ps H1 H2 H3 H4 H5 H6 H7 H8 H9."], "tactic": "intros h' [t log] H10 H11.", "exn": "No product even after head-reduction.", "type": "no_product", "handled": true}, {"ctx": ["intros net st' h gd d ps H1 H2 H3 H4 H5 H6 H7 H8 H9.", "intros.", "simpl in *."], "tactic": "split; auto.", "exn": "Not an inductive goal with 1 constructor.", "type": "not_inductive_goal", "handled": true}, {"ctx": ["intros net st' h gd d ps H1 H2 H3 H4 H5 H6 H7 H8 H9.", "intros.", "simpl in *.", "qsimpl.", "apply Nat.leb_le."], "tactic": "apply Nat.lt_le_incl.", "exn": "In environment orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params net : network st' : name -> electionsData * raft_data h : name gd : electionsData d : raft_data ps : list packet H1 : leaderLogs_currentTerm_sanity_candidate net H2 : forall h' : name, st' h' = update name_eq_dec (nwState net) h (gd, d) h' H3 : leaderLogs gd = leaderLogs (fst (nwState net h)) H4 : currentTerm d >= currentTerm (snd (nwState net h)) H6 : name H7 : term H8 : list entry H9 : In (H7, H8) (leaderLogs (fst (st' H6))) H : type (snd (st' H6)) = Candidate H0 : type d = type (snd (nwState net h)) candidate_term_gt_log_invariant : forall net : network, raft_intermediate_reachable net -> candidate_term_gt_log net refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (deghost net) Unable to unify \"?M6630 <= ?M6631\" with \"(S H7 <=? currentTerm (snd (st' H6))) = true\".", "type": "cannot_unify", "handled": true}]}, "chat": [], "original": "intros net st' h gd d ps H1 H2 H3 H4 H5 H6 H7 H8 H9. unfold leaderLogs_currentTerm_sanity_candidate. intros h' [t log] H10 H11. simpl in *. split; auto. apply Nat.leb_le. apply Nat.lt_le_incl. auto.", "succ": false}]