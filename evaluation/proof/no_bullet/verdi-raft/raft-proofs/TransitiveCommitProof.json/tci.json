[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": ["apply Build_transitive_commit_interface.", "intros net H."], "tactic": "apply CommonTheorems.applyEntries_spec_ind in H.", "exn": "Unable to apply lemma of type \"applyEntries ?h ?st ?es = (?os, ?st') -> forall P : raft_data -> Prop, (forall (d : data) (cc : list (clientId * (nat * output))), P (RaftState.set_raft_data_clientCache term name entry logIndex serverType data clientId output (RaftState.set_raft_data_stateMachine term name entry logIndex serverType data clientId output ?st d) cc)) -> P ?st'\" on hypothesis of type \"refined_raft_intermediate_reachable net\".", "type": "cannot_apply_in", "handled": true}, {"ctx": ["apply Build_transitive_commit_interface.", "intros net H.", "qsimpl.", "intros P H0."], "tactic": "apply H in H0.", "exn": "Unable to apply lemma of type \"refined_raft_intermediate_reachable net\" on hypothesis of type \"entry\".", "type": "cannot_apply_in", "handled": true}, {"ctx": ["apply Build_transitive_commit_interface.", "intros net H.", "qsimpl.", "intros P H0.", "qsimpl."], "tactic": "apply H0.", "exn": "In environment orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params net : network H : refined_raft_intermediate_reachable net entries_contiguous_nw_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_contiguous_nw net entries_gt_0_nw_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_gt_0_nw net entries_sorted_nw_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_sorted_nw net entries_gt_0_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_gt_0 net entries_contiguous_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_contiguous net entries_sorted_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_sorted net entries_match_invariant : forall (net : network) (h h' : name), refined_raft_intermediate_reachable net -> CommonDefinitions.entries_match (log (snd (nwState net h))) (log (snd (nwState net h'))) entries_match_nw_1_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_match_nw_1 net entries_match_nw_host_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_match_nw_host net allEntries_gt_0_invariant : forall (net : network) (h : name) (e : entry), refined_raft_intermediate_reachable net -> In e (map snd (allEntries (fst (nwState net h)))) -> eIndex e > 0 refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (GhostSimulations.deghost net) P : name H0, e' : entry t : term H1 : In H0 (log (snd (nwState net P))) H2 : In e' (log (snd (nwState net P))) H3 : eIndex H0 <= eIndex e' x : name x0 : entry H5 : eTerm x0 <= t H6 : eIndex e' <= eIndex x0 H7 : In e' (log (snd (nwState net x))) H9 : In x0 (log (snd (nwState net x))) x1 : list name H4 : NoDup x1 H8 : length x1 > div2 (length nodes) H11 : forall h : name, In h x1 -> In (eTerm x0, x0) (allEntries (fst (nwState net h))) Unable to unify \"entry\" with \"committed net H0 t\".", "type": "cannot_unify", "handled": true}]}, "chat": [], "original": "apply Build_transitive_commit_interface. intros net H. apply CommonTheorems.applyEntries_spec_ind in H. intros P H0. apply H in H0. apply H0.", "succ": false}]