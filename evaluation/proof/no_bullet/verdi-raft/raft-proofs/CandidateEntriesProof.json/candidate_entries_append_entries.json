[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": [], "tactic": "intros orig_base_params one_node_params raft_params rri cti tsi vci cci.", "exn": "orig_base_params is already used.", "type": "used_var", "handled": true}, {"ctx": [], "tactic": "intros orig_base_params' one_node_params raft_params rri cti tsi vci cci.", "exn": "one_node_params is already used.", "type": "used_var", "handled": true}, {"ctx": [], "tactic": "intros orig_base_params' one_node_params' raft_params rri cti tsi vci cci.", "exn": "raft_params is already used.", "type": "used_var", "handled": true}, {"ctx": [], "tactic": "intros orig_base_params' one_node_params' raft_params' rri cti tsi vci cci.", "exn": "rri is already used.", "type": "used_var", "handled": true}, {"ctx": [], "tactic": "intros orig_base_params' one_node_params' raft_params' rri' cti tsi vci cci.", "exn": "cti is already used.", "type": "used_var", "handled": true}, {"ctx": [], "tactic": "intros orig_base_params' one_node_params' raft_params' rri' cti' tsi vci cci.", "exn": "tsi is already used.", "type": "used_var", "handled": true}, {"ctx": [], "tactic": "intros orig_base_params' one_node_params' raft_params' rri' cti' tsi' vci cci.", "exn": "vci is already used.", "type": "used_var", "handled": true}, {"ctx": [], "tactic": "intros orig_base_params' one_node_params' raft_params' rri' cti' tsi' vci' cci.", "exn": "cci is already used.", "type": "used_var", "handled": true}, {"ctx": ["intros orig_base_params' one_node_params' raft_params' rri' cti' tsi' vci' cci'."], "tactic": "intros xs p ys net st' ps' gd d m t n pli plt es ci HhandleAppendEntries.", "exn": "No product even after head-reduction.", "type": "no_product", "handled": true}, {"ctx": ["intros orig_base_params' one_node_params' raft_params' rri' cti' tsi' vci' cci'.", "intros."], "tactic": "apply H in HhandleAppendEntries.", "exn": "No such hypothesis: HhandleAppendEntries", "type": "no_hypos", "handled": true}, {"ctx": ["intros orig_base_params' one_node_params' raft_params' rri' cti' tsi' vci' cci'.", "intros.", "qsimpl."], "tactic": "apply H.", "exn": "In environment orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params orig_base_params' : list packet one_node_params' : packet raft_params' : list packet rri' : network cti' : name -> electionsData * raft_data tsi' : list packet cci' : raft_data m : msg t : term n : name pli : logIndex plt : term es : list entry ci : logIndex H : handleAppendEntries (pDst one_node_params') (snd (nwState rri' (pDst one_node_params'))) t n pli plt es ci = (cci', m) H1 : pBody one_node_params' = AppendEntries t n pli plt es ci H3 : refined_raft_intermediate_reachable rri' H4 : nwPackets rri' = orig_base_params' ++ one_node_params' :: raft_params' H5 : forall h : name, cti' h = update name_eq_dec (nwState rri') (pDst one_node_params') (update_elections_data_appendEntries (pDst one_node_params') (nwState rri' (pDst one_node_params')) t n pli plt es ci, cci') h H6 : forall p' : packet, In p' tsi' -> In p' (orig_base_params' ++ raft_params') \\\\/ p' = {| pSrc := pDst one_node_params'; pDst := pSrc one_node_params'; pBody := m |} H0 : candidateEntries_host_invariant (nwState rri') H7 : candidateEntries_nw_invariant rri' cronies_correct_invariant : forall net : network, refined_raft_intermediate_reachable net -> cronies_correct net votes_correct_invariant : forall net : network, refined_raft_intermediate_reachable net -> votes_correct net no_entries_past_current_term_invariant : forall net : network, raft_intermediate_reachable net -> no_entries_past_current_term net cronies_term_invariant : forall net : network, refined_raft_intermediate_reachable net -> cronies_term net refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (GhostSimulations.deghost net) Unable to unify \"handleAppendEntries (pDst one_node_params') (snd (nwState rri' (pDst one_node_params'))) t n pli plt es ci = (cci', m)\" with \"candidateEntries_host_invariant cti'\".", "type": "cannot_unify", "handled": true}]}, "chat": [], "original": "intros orig_base_params one_node_params raft_params rri cti tsi vci cci. unfold refined_raft_net_invariant_append_entries. intros xs p ys net st' ps' gd d m t n pli plt es ci HhandleAppendEntries. apply H in HhandleAppendEntries. apply H.", "succ": false}]