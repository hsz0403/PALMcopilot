[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": ["intros net h t n pli plt es ci d m e HhandleApp Hrefined Hcand."], "tactic": "apply (handleRequestVoteReply_preserves_candidate_entries net h (fst (nwState net h)) h t m d e).", "exn": "In environment orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params rri : raft_refinement_interface cti : cronies_term_interface tsi : term_sanity_interface vci : votes_correct_interface cci : cronies_correct_interface net : network h : name t : term n : name pli : logIndex plt : term es : list entry ci : logIndex d : raft_data m : msg e : entry HhandleApp : handleAppendEntries h (snd (nwState net h)) t n pli plt es ci = (d, m) Hrefined : refined_raft_intermediate_reachable net Hcand : candidateEntries e (nwState net) The term \"fst (nwState net h)\" has type \"GhostSimulations.ghost_data\" while it is expected to have type \"name\".", "type": "wrong_type", "handled": true}, {"ctx": ["intros net h t n pli plt es ci d m e HhandleApp Hrefined Hcand.", "qsimpl use: nwState,fst,handleRequestVoteReply_preserves_candidate_entries."], "tactic": "apply HhandleApp.", "exn": "In environment orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params d0 : network -> name -> electionsData * raft_data H : forall (net : network) (h h' : name) (t : nat) (r : bool) (st' : raft_data) (e : entry), st' = handleRequestVoteReply h (snd (d0 net h)) h' t r -> refined_raft_intermediate_reachable net -> candidateEntries e (d0 net) -> candidateEntries e (update name_eq_dec (d0 net) h (update_elections_data_requestVoteReply h h' t r (d0 net h), st')) net : network h : name t : term n : name pli : logIndex plt : term es : list entry ci : logIndex d : raft_data m : msg e : entry HhandleApp : handleAppendEntries h (snd (nwState net h)) t n pli plt es ci = (d, m) Hrefined : refined_raft_intermediate_reachable net x : name H1 : wonElection (dedup name_eq_dec (cronies (fst (nwState net x)) (eTerm e))) = true H2 : currentTerm (snd (nwState net x)) = eTerm e -> type (snd (nwState net x)) = Candidate -> False cronies_correct_invariant : forall net : network, refined_raft_intermediate_reachable net -> cronies_correct net votes_correct_invariant : forall net : network, refined_raft_intermediate_reachable net -> votes_correct net no_entries_past_current_term_invariant : forall net : network, raft_intermediate_reachable net -> no_entries_past_current_term net cronies_term_invariant : forall net : network, refined_raft_intermediate_reachable net -> cronies_term net refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (GhostSimulations.deghost net) H0 : ?B -> forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (GhostSimulations.deghost net) Unable to unify \"handleAppendEntries h (snd (nwState net h)) t n pli plt es ci = (d, m)\" with \"candidateEntries e (update name_eq_dec (d0 net) h (update_elections_data_appendEntries h (d0 net h) t n pli plt es ci, d))\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros net h t n pli plt es ci d m e HhandleApp Hrefined Hcand.", "qsimpl use: nwState,fst,handleRequestVoteReply_preserves_candidate_entries.", "qsimpl use: nwState,fst,handleRequestVoteReply_preserves_candidate_entries."], "tactic": "apply Hrefined.", "exn": "In environment orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params d0 : network -> name -> electionsData * raft_data H : forall (net : network) (h h' : name) (t : nat) (r : bool) (st' : raft_data) (e : entry), st' = handleRequestVoteReply h (snd (d0 net h)) h' t r -> refined_raft_intermediate_reachable net -> candidateEntries e (d0 net) -> candidateEntries e (update name_eq_dec (d0 net) h (update_elections_data_requestVoteReply h h' t r (d0 net h), st')) net : network h : name t : term n : name pli : logIndex plt : term es : list entry ci : logIndex d : raft_data m : msg e : entry HhandleApp : handleAppendEntries h (snd (nwState net h)) t n pli plt es ci = (d, m) Hrefined : refined_raft_intermediate_reachable net x : name H1 : wonElection (dedup name_eq_dec (cronies (fst (nwState net x)) (eTerm e))) = true H2 : currentTerm (snd (nwState net x)) = eTerm e -> type (snd (nwState net x)) = Candidate -> False cronies_correct_invariant : forall net : network, refined_raft_intermediate_reachable net -> cronies_correct net votes_correct_invariant : forall net : network, refined_raft_intermediate_reachable net -> votes_correct net no_entries_past_current_term_invariant : forall net : network, raft_intermediate_reachable net -> no_entries_past_current_term net cronies_term_invariant : forall net : network, refined_raft_intermediate_reachable net -> cronies_term net refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (GhostSimulations.deghost net) H0 : ?B -> forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (GhostSimulations.deghost net) H3 : forall (net : network) (h h' : name) (t : nat) (r : bool) (st' : raft_data) (e : entry), st' = handleRequestVoteReply h (snd (nwState net h)) h' t r -> refined_raft_intermediate_reachable net -> candidateEntries e (nwState net) -> candidateEntries e (update name_eq_dec (nwState net) h (update_elections_data_requestVoteReply h h' t r (nwState net h), st')) X0 : ?A * ?B0 -> ?A X : electionsData * raft_data Unable to unify \"refined_raft_intermediate_reachable net\" with \"candidateEntries e (update name_eq_dec (d0 net) h (update_elections_data_appendEntries h (d0 net h) t n pli plt es ci, d))\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros net h t n pli plt es ci d m e HhandleApp Hrefined Hcand.", "qsimpl use: nwState,fst,handleRequestVoteReply_preserves_candidate_entries.", "qsimpl use: nwState,fst,handleRequestVoteReply_preserves_candidate_entries.", "qsimpl use: nwState,fst,handleRequestVoteReply_preserves_candidate_entries."], "tactic": "apply Hcand.", "exn": "The reference Hcand was not found in the current environment.", "type": "ref_not_found", "handled": true}]}, "chat": [], "original": "intros net h t n pli plt es ci d m e HhandleApp Hrefined Hcand. apply (handleRequestVoteReply_preserves_candidate_entries net h (fst (nwState net h)) h t m d e). apply HhandleApp. apply Hrefined. apply Hcand.", "succ": false}]