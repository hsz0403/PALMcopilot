[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": ["intros h d out d' l t H_handleTimeout.", "unfold handleTimeout in H_handleTimeout.", "destruct (snd d) eqn:Heq_state.", "inversion H_handleTimeout.", "left."], "tactic": "reflexivity.", "exn": "In environment orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params rri : raft_refinement_interface cei : candidate_entries_interface cti : cronies_term_interface cci : cronies_correct_interface h : name d : electionsData * raft_data out : list raft_output d' : raft_data l : list (name * msg) t, currentTerm : term votedFor, leaderId : option name log : list entry commitIndex, lastApplied : logIndex stateMachine : data nextIndex, matchIndex : list (name * logIndex) shouldSend : bool votesReceived : list name type : serverType clientCache : list (clientId * (nat * output)) electoralVictories : list (term * list name * list entry) Heq_state : snd d = mkRaft_data currentTerm votedFor leaderId log commitIndex lastApplied stateMachine nextIndex matchIndex shouldSend votesReceived type clientCache electoralVictories H_handleTimeout : match Raft.type (mkRaft_data currentTerm votedFor leaderId log commitIndex lastApplied stateMachine nextIndex matchIndex shouldSend votesReceived type clientCache electoralVictories) with | Leader => ([], RaftState.set_raft_data_shouldSend term name entry logIndex serverType data clientId output (mkRaft_data currentTerm votedFor leaderId log commitIndex lastApplied stateMachine nextIndex matchIndex shouldSend votesReceived type clientCache electoralVictories) true, []) | _ => tryToBecomeLeader h (mkRaft_data currentTerm votedFor leaderId log commitIndex lastApplied stateMachine nextIndex matchIndex shouldSend votesReceived type clientCache electoralVictories) end = (out, d', l) H0 : match type with | Leader => ([], mkRaft_data currentTerm votedFor leaderId log commitIndex lastApplied stateMachine nextIndex matchIndex true votesReceived type clientCache electoralVictories, []) | _ => tryToBecomeLeader h (mkRaft_data currentTerm votedFor leaderId log commitIndex lastApplied stateMachine nextIndex matchIndex shouldSend votesReceived type clientCache electoralVictories) end = (out, d', l) Unable to unify \"cronies (fst d) t\" with \"cronies (update_elections_data_timeout h d) t\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros h d out d' l t H_handleTimeout.", "unfold handleTimeout in H_handleTimeout.", "destruct (snd d) eqn:Heq_state.", "inversion H_handleTimeout.", "left."], "tactic": "destruct (tryToBecomeLeader h r) eqn:Heq_leader.", "exn": "The reference r was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros h d out d' l t H_handleTimeout.", "unfold handleTimeout in H_handleTimeout.", "destruct (snd d) eqn:Heq_state.", "inversion H_handleTimeout.", "left.", "inversion H_handleTimeout."], "tactic": "left.", "exn": "Not an inductive goal with 2 constructors.", "type": "not_inductive_goal", "handled": true}, {"ctx": ["intros h d out d' l t H_handleTimeout.", "unfold handleTimeout in H_handleTimeout.", "destruct (snd d) eqn:Heq_state.", "inversion H_handleTimeout.", "left.", "inversion H_handleTimeout.", "qsimpl."], "tactic": "reflexivity.", "exn": "In environment orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params h : name d0 : electionsData currentTerm : term votedFor, leaderId : option name log : list entry commitIndex, lastApplied : logIndex stateMachine : data nextIndex, matchIndex : list (name * logIndex) shouldSend : bool votesReceived : list name clientCache : list (clientId * (nat * output)) electoralVictories : list (term * list name * list entry) e : currentTerm = currentTerm Heqs0 : Nat.eq_dec currentTerm currentTerm = left e cronies_correct_invariant : forall net : network, refined_raft_intermediate_reachable net -> cronies_correct net cronies_term_invariant : forall net : network, refined_raft_intermediate_reachable net -> cronies_term net candidate_entries_invariant : forall net : network, refined_raft_intermediate_reachable net -> CandidateEntries net refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (GhostSimulations.deghost net) Unable to unify \"cronies d0 (S currentTerm)\" with \"[h]\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros h d out d' l t H_handleTimeout.", "unfold handleTimeout in H_handleTimeout.", "destruct (snd d) eqn:Heq_state.", "inversion H_handleTimeout.", "left.", "inversion H_handleTimeout.", "qsimpl.", "+"], "tactic": "inversion H_handleTimeout.", "exn": "No such hypothesis: H_handleTimeout", "type": "no_hypos", "handled": true}, {"ctx": ["intros h d out d' l t H_handleTimeout.", "unfold handleTimeout in H_handleTimeout.", "destruct (snd d) eqn:Heq_state.", "inversion H_handleTimeout.", "left.", "inversion H_handleTimeout.", "qsimpl.", "+"], "tactic": "right.", "exn": "Not an inductive goal with 2 constructors.", "type": "not_inductive_goal", "handled": true}, {"ctx": ["intros h d out d' l t H_handleTimeout.", "unfold handleTimeout in H_handleTimeout.", "destruct (snd d) eqn:Heq_state.", "inversion H_handleTimeout.", "left.", "inversion H_handleTimeout.", "qsimpl.", "+"], "tactic": "split.", "exn": "In environment orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params h : name d0 : electionsData currentTerm : term votedFor, leaderId : option name log : list entry commitIndex, lastApplied : logIndex stateMachine : data nextIndex, matchIndex : list (name * logIndex) shouldSend : bool votesReceived : list name clientCache : list (clientId * (nat * output)) electoralVictories : list (term * list name * list entry) e : currentTerm = currentTerm Heqs0 : Nat.eq_dec currentTerm currentTerm = left e cronies_correct_invariant : forall net : network, refined_raft_intermediate_reachable net -> cronies_correct net cronies_term_invariant : forall net : network, refined_raft_intermediate_reachable net -> cronies_term net candidate_entries_invariant : forall net : network, refined_raft_intermediate_reachable net -> CandidateEntries net refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (GhostSimulations.deghost net) Unable to unify \"cronies d0 (S currentTerm)\" with \"[h]\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros h d out d' l t H_handleTimeout.", "unfold handleTimeout in H_handleTimeout.", "destruct (snd d) eqn:Heq_state.", "inversion H_handleTimeout.", "left.", "inversion H_handleTimeout.", "qsimpl.", "+"], "tactic": "split.", "exn": "In environment orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params h : name d0 : electionsData currentTerm : term votedFor, leaderId : option name log : list entry commitIndex, lastApplied : logIndex stateMachine : data nextIndex, matchIndex : list (name * logIndex) shouldSend : bool votesReceived : list name clientCache : list (clientId * (nat * output)) electoralVictories : list (term * list name * list entry) e : currentTerm = currentTerm Heqs0 : Nat.eq_dec currentTerm currentTerm = left e cronies_correct_invariant : forall net : network, refined_raft_intermediate_reachable net -> cronies_correct net cronies_term_invariant : forall net : network, refined_raft_intermediate_reachable net -> cronies_term net candidate_entries_invariant : forall net : network, refined_raft_intermediate_reachable net -> CandidateEntries net refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (GhostSimulations.deghost net) Unable to unify \"cronies d0 (S currentTerm)\" with \"[h]\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros h d out d' l t H_handleTimeout.", "unfold handleTimeout in H_handleTimeout.", "destruct (snd d) eqn:Heq_state.", "inversion H_handleTimeout.", "left.", "inversion H_handleTimeout.", "qsimpl.", "+", "symmetry."], "tactic": "apply handleTimeout_type.", "exn": "In environment orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params h : name d0 : electionsData currentTerm : term votedFor, leaderId : option name log : list entry commitIndex, lastApplied : logIndex stateMachine : data nextIndex, matchIndex : list (name * logIndex) shouldSend : bool votesReceived : list name clientCache : list (clientId * (nat * output)) electoralVictories : list (term * list name * list entry) e : currentTerm = currentTerm Heqs0 : Nat.eq_dec currentTerm currentTerm = left e cronies_correct_invariant : forall net : network, refined_raft_intermediate_reachable net -> cronies_correct net cronies_term_invariant : forall net : network, refined_raft_intermediate_reachable net -> cronies_term net candidate_entries_invariant : forall net : network, refined_raft_intermediate_reachable net -> CandidateEntries net refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (GhostSimulations.deghost net) Unable to unify \"type ?M8795 = type ?M8793 /\\\\ Raft.currentTerm ?M8795 = Raft.currentTerm ?M8793 \\\\/ type ?M8795 = Candidate\" with \"cronies d0 (S currentTerm) = [h]\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros h d out d' l t H_handleTimeout.", "unfold handleTimeout in H_handleTimeout.", "destruct (snd d) eqn:Heq_state.", "inversion H_handleTimeout.", "left.", "inversion H_handleTimeout.", "qsimpl.", "+", "symmetry.", "qsimpl use: handleTimeout_type."], "tactic": "reflexivity.", "exn": "In environment orig_base_params : BaseParams raft_params : RaftParams orig_base_params H : forall (h : name) (st : raft_data) (out : list raft_output) (st' : raft_data) (l : list (name * msg)), handleTimeout h st = (out, st', l) -> type st' = type st /\\\\ Raft.currentTerm st' = Raft.currentTerm st \\\\/ type st' = Candidate one_node_params : OneNodeParams orig_base_params h : name d0 : electionsData currentTerm : term votedFor, leaderId : option name log : list entry commitIndex, lastApplied : logIndex stateMachine : data nextIndex, matchIndex : list (name * logIndex) shouldSend : bool votesReceived : list name clientCache : list (clientId * (nat * output)) electoralVictories : list (term * list name * list entry) e : currentTerm = currentTerm Heqs0 : Nat.eq_dec currentTerm currentTerm = left e cronies_correct_invariant : forall net : network, refined_raft_intermediate_reachable net -> cronies_correct net cronies_term_invariant : forall net : network, refined_raft_intermediate_reachable net -> cronies_term net candidate_entries_invariant : forall net : network, refined_raft_intermediate_reachable net -> CandidateEntries net refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (GhostSimulations.deghost net) Unable to unify \"[h]\" with \"cronies d0 (S currentTerm)\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros h d out d' l t H_handleTimeout.", "unfold handleTimeout in H_handleTimeout.", "destruct (snd d) eqn:Heq_state.", "inversion H_handleTimeout.", "left.", "inversion H_handleTimeout.", "qsimpl.", "+", "symmetry.", "qsimpl use: handleTimeout_type."], "tactic": "split.", "exn": "In environment orig_base_params : BaseParams raft_params : RaftParams orig_base_params H : forall (h : name) (st : raft_data) (out : list raft_output) (st' : raft_data) (l : list (name * msg)), handleTimeout h st = (out, st', l) -> type st' = type st /\\\\ Raft.currentTerm st' = Raft.currentTerm st \\\\/ type st' = Candidate one_node_params : OneNodeParams orig_base_params h : name d0 : electionsData currentTerm : term votedFor, leaderId : option name log : list entry commitIndex, lastApplied : logIndex stateMachine : data nextIndex, matchIndex : list (name * logIndex) shouldSend : bool votesReceived : list name clientCache : list (clientId * (nat * output)) electoralVictories : list (term * list name * list entry) e : currentTerm = currentTerm Heqs0 : Nat.eq_dec currentTerm currentTerm = left e cronies_correct_invariant : forall net : network, refined_raft_intermediate_reachable net -> cronies_correct net cronies_term_invariant : forall net : network, refined_raft_intermediate_reachable net -> cronies_term net candidate_entries_invariant : forall net : network, refined_raft_intermediate_reachable net -> CandidateEntries net refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (GhostSimulations.deghost net) Unable to unify \"[h]\" with \"cronies d0 (S currentTerm)\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros h d out d' l t H_handleTimeout.", "unfold handleTimeout in H_handleTimeout.", "destruct (snd d) eqn:Heq_state.", "inversion H_handleTimeout.", "left.", "inversion H_handleTimeout.", "qsimpl.", "+", "symmetry.", "qsimpl use: handleTimeout_type.", "qsimpl use: handleTimeout_type."], "tactic": "reflexivity.", "exn": "In environment orig_base_params : BaseParams raft_params : RaftParams orig_base_params H0 : forall (h : name) (st : raft_data) (out : list raft_output) (st' : raft_data) (l : list (name * msg)), handleTimeout h st = (out, st', l) -> type st' = type st /\\\\ Raft.currentTerm st' = Raft.currentTerm st \\\\/ type st' = Candidate one_node_params : OneNodeParams orig_base_params h : name d0 : electionsData currentTerm : term votedFor, leaderId : option name log : list entry commitIndex, lastApplied : logIndex stateMachine : data nextIndex, matchIndex : list (name * logIndex) shouldSend : bool votesReceived : list name clientCache : list (clientId * (nat * output)) electoralVictories : list (term * list name * list entry) e : currentTerm = currentTerm Heqs0 : Nat.eq_dec currentTerm currentTerm = left e cronies_correct_invariant : forall net : network, refined_raft_intermediate_reachable net -> cronies_correct net cronies_term_invariant : forall net : network, refined_raft_intermediate_reachable net -> cronies_term net candidate_entries_invariant : forall net : network, refined_raft_intermediate_reachable net -> CandidateEntries net refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (GhostSimulations.deghost net) Unable to unify \"[h]\" with \"cronies d0 (S currentTerm)\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros h d out d' l t H_handleTimeout.", "unfold handleTimeout in H_handleTimeout.", "destruct (snd d) eqn:Heq_state.", "inversion H_handleTimeout.", "left.", "inversion H_handleTimeout.", "qsimpl.", "+", "symmetry.", "qsimpl use: handleTimeout_type.", "qsimpl use: handleTimeout_type."], "tactic": "split.", "exn": "In environment orig_base_params : BaseParams raft_params : RaftParams orig_base_params H0 : forall (h : name) (st : raft_data) (out : list raft_output) (st' : raft_data) (l : list (name * msg)), handleTimeout h st = (out, st', l) -> type st' = type st /\\\\ Raft.currentTerm st' = Raft.currentTerm st \\\\/ type st' = Candidate one_node_params : OneNodeParams orig_base_params h : name d0 : electionsData currentTerm : term votedFor, leaderId : option name log : list entry commitIndex, lastApplied : logIndex stateMachine : data nextIndex, matchIndex : list (name * logIndex) shouldSend : bool votesReceived : list name clientCache : list (clientId * (nat * output)) electoralVictories : list (term * list name * list entry) e : currentTerm = currentTerm Heqs0 : Nat.eq_dec currentTerm currentTerm = left e cronies_correct_invariant : forall net : network, refined_raft_intermediate_reachable net -> cronies_correct net cronies_term_invariant : forall net : network, refined_raft_intermediate_reachable net -> cronies_term net candidate_entries_invariant : forall net : network, refined_raft_intermediate_reachable net -> CandidateEntries net refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (GhostSimulations.deghost net) Unable to unify \"[h]\" with \"cronies d0 (S currentTerm)\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros h d out d' l t H_handleTimeout.", "unfold handleTimeout in H_handleTimeout.", "destruct (snd d) eqn:Heq_state.", "inversion H_handleTimeout.", "left.", "inversion H_handleTimeout.", "qsimpl.", "+", "symmetry.", "qsimpl use: handleTimeout_type.", "qsimpl use: handleTimeout_type.", "qsimpl use: handleTimeout_type."], "tactic": "rewrite <- Heq_state.", "exn": "The reference Heq_state was not found in the current environment.", "type": "ref_not_found", "handled": true}]}, "chat": [], "original": "intros h d out d' l t H_handleTimeout. unfold handleTimeout in H_handleTimeout. destruct (snd d) eqn:Heq_state. - inversion H_handleTimeout. subst. left. reflexivity. - destruct (tryToBecomeLeader h r) eqn:Heq_leader. + inversion H_handleTimeout. subst. left. reflexivity. + inversion H_handleTimeout. subst. right. split. * split. -- symmetry. apply handleTimeout_type. eauto. -- reflexivity. * split. -- reflexivity. -- split. ++ rewrite <- Heq_state.", "succ": false}]