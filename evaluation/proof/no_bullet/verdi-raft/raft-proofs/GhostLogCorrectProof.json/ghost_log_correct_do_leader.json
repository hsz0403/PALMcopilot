[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": [], "tactic": "unfold msg_refined_raft_net_invariant_do_leader, msg_refined_raft_intermediate_reachable, ghost_log_correct in *.", "exn": "Cannot coerce msg_refined_raft_intermediate_reachable to an evaluable reference.", "type": "not_evaluable", "handled": true}, {"ctx": ["qsimpl use: msg_refined_raft_net_invariant_do_leader,msg_refined_raft_intermediate_reachable,ghost_log_correct."], "tactic": "specialize (H0 net st' ps' gd d h os d' ms H1 H2 H3 H4 H5).", "exn": "The reference H0 was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["qsimpl use: msg_refined_raft_net_invariant_do_leader,msg_refined_raft_intermediate_reachable,ghost_log_correct."], "tactic": "pose proof (project_ghost_log_correct_result ori_base_params one_node_params raft_params net p l t leaderId prevLogIndex prevLogTerm entries leaderCommit H H0).", "exn": "The reference project_ghost_log_correct_result was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["qsimpl use: msg_refined_raft_net_invariant_do_leader,msg_refined_raft_intermediate_reachable,ghost_log_correct."], "tactic": "destruct H6 as [H6 | [e [He1 [He2 He3]]]].", "exn": "The reference H6 was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["qsimpl use: msg_refined_raft_net_invariant_do_leader,msg_refined_raft_intermediate_reachable,ghost_log_correct."], "tactic": "destruct H6 as [H6 | [H6 | H6]].", "exn": "The reference H6 was not found in the current environment.", "type": "ref_not_found", "handled": true}]}, "chat": [], "original": "intros. unfold msg_refined_raft_net_invariant_do_leader, msg_refined_raft_intermediate_reachable, ghost_log_correct in *. intros. specialize (H0 net st' ps' gd d h os d' ms H1 H2 H3 H4 H5). pose proof (project_ghost_log_correct_result ori_base_params one_node_params raft_params net p l t leaderId prevLogIndex prevLogTerm entries leaderCommit H H0). destruct H6 as [H6 | [e [He1 [He2 He3]]]]. - destruct H6 as [H6 | [H6 | H6]]. + subst. auto. + contradict H6. apply findGtIndex_all_gt with (prevLogIndex := prevLogIndex) in H3. lia. + specialize (H7 e). destruct H7 as [H7 | H7]. * subst. lia. * destruct H7 as [H7 [H8 H9]]. subst. auto. - contradiction.", "succ": false}]