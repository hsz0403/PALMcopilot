[{"history": {"proof": "intros h st out st' l H. unfold handleTimeout in H. break_match. inversion H. qsimpl time: 1 use: update_elections_data_timeout. destruct (votedFor st') eqn:votedForSt'. - destruct (type st) eqn:typeSt. + qsimpl time: 1 use: update_elections_data_timeout. + fcrush depth: 3use: update_elections_data_timeout. + scongruence depth: 3use: update_elections_data_timeout. - ecrush depth: 3use: update_elections_data_timeout. - hauto lq: on rew: off depth: 3use: update_elections_data_timeout.", "repairs": ["", "", "", "", "no_hypos", "", "", "", "", "no_hypos", "", "hammer", "", "hammer", "", "hammer", "", "hammer"], "exceptions": [{"ctx": ["intros h st out st' l H.", "unfold handleTimeout in H.", "break_match.", "inversion H."], "tactic": "unfold update_elections_data_timeout in Heqp.", "exn": "No such hypothesis: Heqp", "type": "no_hypos", "handled": true}, {"ctx": ["intros h st out st' l H.", "unfold handleTimeout in H.", "break_match.", "inversion H.", "qsimpl time: 1 use: update_elections_data_timeout.", "destruct (votedFor st') eqn:votedForSt'.", "-", "destruct (type st) eqn:typeSt.", "+"], "tactic": "inversion Heqp; subst; clear Heqp.", "exn": "No such hypothesis: Heqp", "type": "no_hypos", "handled": true}]}, "chat": [], "original": "intros h st out st' l H. unfold handleTimeout in H. break_match. inversion H. unfold update_elections_data_timeout in Heqp. destruct (votedFor st') eqn:votedForSt'. - destruct (type st) eqn:typeSt. + inversion Heqp; subst; clear Heqp. reflexivity. + inversion Heqp. - inversion Heqp.", "succ": true}]