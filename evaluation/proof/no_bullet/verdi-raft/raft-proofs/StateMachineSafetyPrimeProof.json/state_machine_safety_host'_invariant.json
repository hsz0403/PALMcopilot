[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": ["intros net H_ref.", "unfold state_machine_safety_host'.", "intros e e' t t' H_comm1 H_comm2 H_idx."], "tactic": "apply committed_unique_indices with (e' := e') (t := t) (t' := t').", "exn": "The reference committed_unique_indices was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros net H_ref.", "unfold state_machine_safety_host'.", "intros e e' t t' H_comm1 H_comm2 H_idx."], "tactic": "apply H_comm1.", "exn": "In environment orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params rri : raft_refinement_interface lci : leader_completeness_interface aelli : all_entries_leader_logs_interface lmi : log_matching_interface uii : unique_indices_interface aerlli : append_entries_leaderLogs_interface llsi : leaderLogs_sorted_interface lsi : sorted_interface llci : leaderLogs_contiguous_interface lllmi : leaderLogs_entries_match_interface llli : logs_leaderLogs_interface ollpti : one_leaderLog_per_term_interface rlmli : refined_log_matching_lemmas_interface net : network H_ref : refined_raft_intermediate_reachable net e, e' : entry t, t' : term H_comm1 : committed net e t H_comm2 : committed net e' t' H_idx : eIndex e = eIndex e' Unable to unify \"committed net e t\" with \"e = e'\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros net H_ref.", "unfold state_machine_safety_host'.", "intros e e' t t' H_comm1 H_comm2 H_idx.", "qsimpl."], "tactic": "apply H_comm2.", "exn": "The reference H_comm2 was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros net H_ref.", "unfold state_machine_safety_host'.", "intros e e' t t' H_comm1 H_comm2 H_idx.", "qsimpl.", "apply fast_Zred_factor6.", "-"], "tactic": "apply H_idx.", "exn": "In environment orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params net : network H_ref : refined_raft_intermediate_reachable net e, e' : entry t, t' : term H_idx : eIndex e = eIndex e' x : name x0 : entry H : eTerm x0 <= t' H1 : eIndex e' <= eIndex x0 H2 : In e' (log (snd (nwState net x))) H4 : In x0 (log (snd (nwState net x))) x1 : list name H0 : NoDup x1 H3 : length x1 > div2 (length nodes) H6 : forall h : name, In h x1 -> In (eTerm x0, x0) (allEntries (fst (nwState net h))) x2 : name x3 : entry H5 : eTerm x3 <= t H8 : eIndex e <= eIndex x3 H9 : In e (log (snd (nwState net x2))) H11 : In x3 (log (snd (nwState net x2))) x4 : list name H7 : NoDup x4 H10 : length x4 > div2 (length nodes) H13 : forall h : name, In h x4 -> In (eTerm x3, x3) (allEntries (fst (nwState net h))) entries_contiguous_nw_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_contiguous_nw net entries_gt_0_nw_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_gt_0_nw net entries_sorted_nw_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_sorted_nw net entries_gt_0_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_gt_0 net entries_contiguous_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_contiguous net entries_sorted_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_sorted net entries_match_invariant : forall (net : network) (h h' : name), refined_raft_intermediate_reachable net -> entries_match (log (snd (nwState net h))) (log (snd (nwState net h'))) entries_match_nw_1_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_match_nw_1 net entries_match_nw_host_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_match_nw_host net allEntries_gt_0_invariant : forall (net : network) (h : name) (e : entry), refined_raft_intermediate_reachable net -> In e (map snd (allEntries (fst (nwState net h)))) -> eIndex e > 0 one_leaderLog_per_term_invariant : forall net : network, refined_raft_intermediate_reachable net -> one_leaderLog_per_term net one_leaderLog_per_term_log_invariant : forall net : network, refined_raft_intermediate_reachable net -> one_leaderLog_per_term_log net one_leaderLog_per_term_host_invariant : forall net : network, refined_raft_intermediate_reachable net -> one_leaderLog_per_term_host net logs_leaderLogs_invariant : forall net : network, refined_raft_intermediate_reachable net -> logs_leaderLogs net logs_leaderLogs_nw_invariant : forall net : network, refined_raft_intermediate_reachable net -> logs_leaderLogs_nw net leaderLogs_entries_match_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaderLogs_entries_match_host net leaderLogs_contiguous_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaderLogs_contiguous net handleAppendEntries_logs_sorted : forall (net : network) (p : packet) (t : term) (n : name) (pli : logIndex) (plt : term) (es : list entry) (ci : logIndex) (st' : raft_data) (m : msg), raft_intermediate_reachable net -> logs_sorted net -> handleAppendEntries (pDst p) (nwState net (pDst p)) t n pli plt es ci = (st', m) -> pBody p = AppendEntries t n pli plt es ci -> In p (nwPackets net) -> sorted (log st') handleClientRequest_logs_sorted : forall (h : name) (client : clientId) (id : nat) (c : input) (out : list raft_output) (st : raft_data) (l : list (name * msg)) (net : network), handleClientRequest h (nwState net h) client id c = (out, st, l) -> raft_intermediate_reachable net -> logs_sorted_host net -> sorted (log st) logs_sorted_invariant : forall net : network, raft_intermediate_reachable net -> logs_sorted net leaderLogs_sorted_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaderLogs_sorted net append_entries_leaderLogs_invariant : forall net : network, refined_raft_intermediate_reachable net -> append_entries_leaderLogs net UniqueIndices_invariant : forall net : network, raft_intermediate_reachable net -> UniqueIndices net log_matching_invariant : forall net : network, raft_intermediate_reachable net -> log_matching net all_entries_leader_logs_invariant : forall net : network, refined_raft_intermediate_reachable net -> all_entries_leader_logs net leader_completeness_invariant : forall net : network, refined_raft_intermediate_reachable net -> leader_completeness net refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (deghost net) Unable to unify \"eIndex e = eIndex e'\" with \"Z\".", "type": "cannot_unify", "handled": true}]}, "chat": [], "original": "intros net H_ref. unfold state_machine_safety_host'. intros e e' t t' H_comm1 H_comm2 H_idx. apply committed_unique_indices with (e' := e') (t := t) (t' := t'). - apply H_comm1. - apply H_comm2. - apply H_idx.", "succ": false}]