[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": ["intros h h' t st t' ll' r Hin.", "unfold update_elections_data_requestVoteReply in Hin.", "destruct (type (snd st)) eqn:Heq_type.", "-", "right.", "destruct (handleRequestVoteReply h (snd st) h' t r) eqn:Heq_st'."], "tactic": "left.", "exn": "Not an inductive goal with 2 constructors.", "type": "not_inductive_goal", "handled": true}, {"ctx": ["intros h h' t st t' ll' r Hin.", "unfold update_elections_data_requestVoteReply in Hin.", "destruct (type (snd st)) eqn:Heq_type.", "-", "right.", "destruct (handleRequestVoteReply h (snd st) h' t r) eqn:Heq_st'.", "qsimpl."], "tactic": "apply update_elections_data_requestVoteReply_leaderLogs.", "exn": "In environment orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params h, h' : name t : nat st0 : electionsData st1 : RaftState.raft_data term name entry logIndex serverType data clientId output t' : term ll' : list entry r : bool Heq_type : type st1 = Follower currentTerm : term votedFor, leaderId : option name log : list entry commitIndex, lastApplied : logIndex stateMachine : data nextIndex, matchIndex : list (name * logIndex) shouldSend : bool votesReceived : list name clientCache : list (clientId * (nat * output)) electoralVictories : list (term * list name * list entry) Heq_st' : handleRequestVoteReply h st1 h' t r = mkRaft_data currentTerm votedFor leaderId log commitIndex lastApplied stateMachine nextIndex matchIndex shouldSend votesReceived Follower clientCache electoralVictories Hin : In (t', ll') (leaderLogs st0) cronies_correct_invariant : forall net : network, refined_raft_intermediate_reachable net -> cronies_correct net votes_correct_invariant : forall net : network, refined_raft_intermediate_reachable net -> votes_correct net one_leaderLog_per_term_invariant : forall net : network, refined_raft_intermediate_reachable net -> one_leaderLog_per_term net one_leaderLog_per_term_log_invariant : forall net : network, refined_raft_intermediate_reachable net -> one_leaderLog_per_term_log net one_leaderLog_per_term_host_invariant : forall net : network, refined_raft_intermediate_reachable net -> one_leaderLog_per_term_host net leaderLogs_candidate_entries_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaderLogs_candidateEntries net leaderLogs_term_sanity_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaderLogs_term_sanity net leaderLogs_currentTerm_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaderLogs_currentTerm_sanity net leaderLogs_currentTerm_sanity_candidate_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaderLogs_currentTerm_sanity_candidate net logs_leaderLogs_invariant : forall net : network, refined_raft_intermediate_reachable net -> logs_leaderLogs net logs_leaderLogs_nw_invariant : forall net : network, refined_raft_intermediate_reachable net -> logs_leaderLogs_nw net refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (GhostSimulations.deghost net) Unable to unify \"(fix In (a : term * list entry) (l : list (term * list entry)) {struct l} : Prop := match l with | [] => False | b :: m => b = a \\\\/ In a m end) (?M83962, ?M83963) (leaderLogs (update_elections_data_requestVoteReply ?M83958 ?M83959 ?M83960 ?M83964 ?M83961))\" with \"r = true\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros h h' t st t' ll' r Hin.", "unfold update_elections_data_requestVoteReply in Hin.", "destruct (type (snd st)) eqn:Heq_type.", "-", "right.", "destruct (handleRequestVoteReply h (snd st) h' t r) eqn:Heq_st'.", "qsimpl.", "qsimpl use: update_elections_data_requestVoteReply_leaderLogs.", "+"], "tactic": "apply SpecLemmas.handleRequestVoteReply_spec' in Heq_st' as [Heq_log [Heq_votes Htypes]].", "exn": "Unable to apply lemma of type \"forall (h0 : name) (st : RaftState.raft_data term name entry logIndex serverType data clientId output) (h'0 : name) (t0 : nat) (r0 : bool) (st' : raft_data), st' = handleRequestVoteReply h0 st h'0 t0 r0 -> Raft.log st' = Raft.log st /\\\\ (forall v : name, In v (Raft.votesReceived st) -> In v (Raft.votesReceived st')) /\\\\ (type st <> Leader /\\\\ type st' = Leader -> (type st = Candidate /\\\\ wonElection (dedup name_eq_dec (Raft.votesReceived st')) = true) /\\\\ r0 = true /\\\\ Raft.currentTerm st' = Raft.currentTerm st /\\\\ Raft.currentTerm st = t0 /\\\\ Raft.votesReceived st' = h'0 :: Raft.votesReceived st)\" on hypothesis of type \"handleRequestVoteReply h st1 h' t r = mkRaft_data currentTerm votedFor leaderId log commitIndex lastApplied stateMachine nextIndex matchIndex shouldSend votesReceived Follower clientCache electoralVictories\".", "type": "cannot_apply_in", "handled": true}, {"ctx": ["intros h h' t st t' ll' r Hin.", "unfold update_elections_data_requestVoteReply in Hin.", "destruct (type (snd st)) eqn:Heq_type.", "-", "right.", "destruct (handleRequestVoteReply h (snd st) h' t r) eqn:Heq_st'.", "qsimpl.", "qsimpl use: update_elections_data_requestVoteReply_leaderLogs.", "+", "qsimpl use: update_elections_data_requestVoteReply_leaderLogs."], "tactic": "rewrite Heq_log in Hin.", "exn": "The reference Heq_log was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros h h' t st t' ll' r Hin.", "unfold update_elections_data_requestVoteReply in Hin.", "destruct (type (snd st)) eqn:Heq_type.", "-", "right.", "destruct (handleRequestVoteReply h (snd st) h' t r) eqn:Heq_st'.", "qsimpl.", "qsimpl use: update_elections_data_requestVoteReply_leaderLogs.", "+", "qsimpl use: update_elections_data_requestVoteReply_leaderLogs.", "rewrite one_leaderLog_per_term_log_invariant in Hin."], "tactic": "left.", "exn": "Not an inductive goal with 2 constructors.", "type": "not_inductive_goal", "handled": true}, {"ctx": ["intros h h' t st t' ll' r Hin.", "unfold update_elections_data_requestVoteReply in Hin.", "destruct (type (snd st)) eqn:Heq_type.", "-", "right.", "destruct (handleRequestVoteReply h (snd st) h' t r) eqn:Heq_st'.", "qsimpl.", "qsimpl use: update_elections_data_requestVoteReply_leaderLogs.", "+", "qsimpl use: update_elections_data_requestVoteReply_leaderLogs.", "rewrite one_leaderLog_per_term_log_invariant in Hin.", "qsimpl use: update_elections_data_requestVoteReply_leaderLogs."], "tactic": "-", "exn": "Wrong bullet -: Current bullet + is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["intros h h' t st t' ll' r Hin.", "unfold update_elections_data_requestVoteReply in Hin.", "destruct (type (snd st)) eqn:Heq_type.", "-", "right.", "destruct (handleRequestVoteReply h (snd st) h' t r) eqn:Heq_st'.", "qsimpl.", "qsimpl use: update_elections_data_requestVoteReply_leaderLogs.", "+", "qsimpl use: update_elections_data_requestVoteReply_leaderLogs.", "rewrite one_leaderLog_per_term_log_invariant in Hin.", "qsimpl use: update_elections_data_requestVoteReply_leaderLogs.", "*", "shelve.", "*", "shelve.", "*", "shelve.", "*", "shelve."], "tactic": "-", "exn": "Wrong bullet -: Expecting +.", "type": "wrong_bullet", "handled": true}, {"ctx": ["intros h h' t st t' ll' r Hin.", "unfold update_elections_data_requestVoteReply in Hin.", "destruct (type (snd st)) eqn:Heq_type.", "-", "right.", "destruct (handleRequestVoteReply h (snd st) h' t r) eqn:Heq_st'.", "qsimpl.", "qsimpl use: update_elections_data_requestVoteReply_leaderLogs.", "+", "qsimpl use: update_elections_data_requestVoteReply_leaderLogs.", "rewrite one_leaderLog_per_term_log_invariant in Hin.", "qsimpl use: update_elections_data_requestVoteReply_leaderLogs.", "*", "shelve.", "*", "shelve.", "*", "shelve.", "*", "shelve.", "+"], "tactic": "right.", "exn": "Not an inductive goal with 2 constructors.", "type": "not_inductive_goal", "handled": true}, {"ctx": ["intros h h' t st t' ll' r Hin.", "unfold update_elections_data_requestVoteReply in Hin.", "destruct (type (snd st)) eqn:Heq_type.", "-", "right.", "destruct (handleRequestVoteReply h (snd st) h' t r) eqn:Heq_st'.", "qsimpl.", "qsimpl use: update_elections_data_requestVoteReply_leaderLogs.", "+", "qsimpl use: update_elections_data_requestVoteReply_leaderLogs.", "rewrite one_leaderLog_per_term_log_invariant in Hin.", "qsimpl use: update_elections_data_requestVoteReply_leaderLogs.", "*", "shelve.", "*", "shelve.", "*", "shelve.", "*", "shelve.", "+", "qsimpl use: update_elections_data_requestVoteReply_leaderLogs."], "tactic": "+", "exn": "Wrong bullet +: Current bullet + is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["intros h h' t st t' ll' r Hin.", "unfold update_elections_data_requestVoteReply in Hin.", "destruct (type (snd st)) eqn:Heq_type.", "-", "right.", "destruct (handleRequestVoteReply h (snd st) h' t r) eqn:Heq_st'.", "qsimpl.", "qsimpl use: update_elections_data_requestVoteReply_leaderLogs.", "+", "qsimpl use: update_elections_data_requestVoteReply_leaderLogs.", "rewrite one_leaderLog_per_term_log_invariant in Hin.", "qsimpl use: update_elections_data_requestVoteReply_leaderLogs.", "*", "shelve.", "*", "shelve.", "*", "shelve.", "*", "shelve.", "+", "qsimpl use: update_elections_data_requestVoteReply_leaderLogs.", "shelve.", "+"], "tactic": "inversion Heq_t'.", "exn": "No such hypothesis: Heq_t'", "type": "no_hypos", "handled": true}, {"ctx": ["intros h h' t st t' ll' r Hin.", "unfold update_elections_data_requestVoteReply in Hin.", "destruct (type (snd st)) eqn:Heq_type.", "-", "right.", "destruct (handleRequestVoteReply h (snd st) h' t r) eqn:Heq_st'.", "qsimpl.", "qsimpl use: update_elections_data_requestVoteReply_leaderLogs.", "+", "qsimpl use: update_elections_data_requestVoteReply_leaderLogs.", "rewrite one_leaderLog_per_term_log_invariant in Hin.", "qsimpl use: update_elections_data_requestVoteReply_leaderLogs.", "*", "shelve.", "*", "shelve.", "*", "shelve.", "*", "shelve.", "+", "qsimpl use: update_elections_data_requestVoteReply_leaderLogs.", "shelve.", "+", "qsimpl use: update_elections_data_requestVoteReply_leaderLogs."], "tactic": "+", "exn": "Wrong bullet +: Current bullet + is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["intros h h' t st t' ll' r Hin.", "unfold update_elections_data_requestVoteReply in Hin.", "destruct (type (snd st)) eqn:Heq_type.", "-", "right.", "destruct (handleRequestVoteReply h (snd st) h' t r) eqn:Heq_st'.", "qsimpl.", "qsimpl use: update_elections_data_requestVoteReply_leaderLogs.", "+", "qsimpl use: update_elections_data_requestVoteReply_leaderLogs.", "rewrite one_leaderLog_per_term_log_invariant in Hin.", "qsimpl use: update_elections_data_requestVoteReply_leaderLogs.", "*", "shelve.", "*", "shelve.", "*", "shelve.", "*", "shelve.", "+", "qsimpl use: update_elections_data_requestVoteReply_leaderLogs.", "shelve.", "+", "qsimpl use: update_elections_data_requestVoteReply_leaderLogs.", "shelve.", "+"], "tactic": "inversion Heq_t.", "exn": "No such hypothesis: Heq_t", "type": "no_hypos", "handled": true}, {"ctx": ["intros h h' t st t' ll' r Hin.", "unfold update_elections_data_requestVoteReply in Hin.", "destruct (type (snd st)) eqn:Heq_type.", "-", "right.", "destruct (handleRequestVoteReply h (snd st) h' t r) eqn:Heq_st'.", "qsimpl.", "qsimpl use: update_elections_data_requestVoteReply_leaderLogs.", "+", "qsimpl use: update_elections_data_requestVoteReply_leaderLogs.", "rewrite one_leaderLog_per_term_log_invariant in Hin.", "qsimpl use: update_elections_data_requestVoteReply_leaderLogs.", "*", "shelve.", "*", "shelve.", "*", "shelve.", "*", "shelve.", "+", "qsimpl use: update_elections_data_requestVoteReply_leaderLogs.", "shelve.", "+", "qsimpl use: update_elections_data_requestVoteReply_leaderLogs.", "shelve.", "+"], "tactic": "qsimpl use: update_elections_data_requestVoteReply_leaderLogs,auto.", "exn": "The reference auto was not found in the current environment.", "type": "ref_not_found", "handled": true}]}, "chat": [], "original": "intros h h' t st t' ll' r Hin. unfold update_elections_data_requestVoteReply in Hin. destruct (type (snd st)) eqn:Heq_type. - right. destruct (handleRequestVoteReply h (snd st) h' t r) eqn:Heq_st'. + left. apply update_elections_data_requestVoteReply_leaderLogs. auto. + apply SpecLemmas.handleRequestVoteReply_spec' in Heq_st' as [Heq_log [Heq_votes Htypes]]. rewrite Heq_log in Hin. left. auto. - right. inversion Hin as [[Heq_t' Heq_ll'] | [Heq_r [Heq_t [Heq_ll [Heq_t' [Heq_type' Hwon]]]]]]. + inversion Heq_t'. subst t' ll'. split; auto. + inversion Heq_t. subst t. inversion Heq_type. subst. repeat split; auto.", "succ": false}]