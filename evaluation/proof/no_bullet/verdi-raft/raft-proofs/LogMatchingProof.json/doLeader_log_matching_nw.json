[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": [], "tactic": "intros net h out d ms net' HdoLeader Hlogs_sorted Hlog_matching HuniqueIndices Hin_p HnwState_update; unfold log_matching_nw; intros p t leaderId prevLogIndex prevLogTerm entries leaderCommit Hin_packets HpBody; apply log_matching_state_same_packet_subset with net; auto.", "exn": "In environment orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params si : sorted_interface lsi : leader_sublog_interface uii : unique_indices_interface net : network h : Net.name out : list raft_output d : raft_data ms : list (name * msg) net' : network HdoLeader : doLeader (nwState net h) h = (out, d, ms) Hlogs_sorted : logs_sorted net Hlog_matching : log_matching net HuniqueIndices : uniqueIndices_host_invariant net Hin_p : forall p : packet, In p (nwPackets net') -> In p (nwPackets net) \\\\/ In p (map (fun m : Net.name * Net.msg => {| pSrc := h; pDst := fst m; pBody := snd m |}) ms) HnwState_update : forall h' : Net.name, nwState net' h' = (if name_eq_dec h' h then d else nwState net h') p : packet t : term leaderId : name prevLogIndex : logIndex prevLogTerm : term entries : list entry leaderCommit : logIndex Hin_packets : In p (nwPackets net') HpBody : pBody p = AppendEntries t leaderId prevLogIndex prevLogTerm entries leaderCommit Unable to unify \"log_matching_hosts ?M2496 /\\\\ log_matching_nw ?M2496\" with \"(forall (h : Net.name) (e1 e2 : entry), In e1 entries -> In e2 (log (nwState net' h)) -> eIndex e1 = eIndex e2 -> eTerm e1 = eTerm e2 -> (forall e3 : entry, eIndex e3 <= eIndex e1 -> In e3 entries -> In e3 (log (nwState net' h))) /\\\\ (prevLogIndex <> 0 -> exists e4 : entry, eIndex e4 = prevLogIndex /\\\\ eTerm e4 = prevLogTerm /\\\\ In e4 (log (nwState net' h)))) /\\\\ (forall i : nat, prevLogIndex < i <= maxIndex entries -> exists e : entry, eIndex e = i /\\\\ In e entries) /\\\\ (forall e : entry, In e entries -> prevLogIndex < eIndex e) /\\\\ (forall (p' : packet) (t' : term) (leaderId' : name) (prevLogIndex' : logIndex) (prevLogTerm' : term) (entries' : list entry) (leaderCommit' : logIndex), In p' (nwPackets net') -> pBody p' = AppendEntries t' leaderId' prevLogIndex' prevLogTerm' entries' leaderCommit' -> forall e1 e2 : entry, In e1 entries -> In e2 entries' -> eIndex e1 = eIndex e2 -> eTerm e1 = eTerm e2 -> (forall e3 : entry, prevLogIndex' < eIndex e3 <= eIndex e1 -> In e3 entries -> In e3 entries') /\\\\ (forall e3 : entry, In e3 entries -> eIndex e3 = prevLogIndex' -> eTerm e3 = prevLogTerm') /\\\\ (prevLogIndex <> 0 -> prevLogIndex = prevLogIndex' -> prevLogTerm = prevLogTerm'))\".", "type": "cannot_unify", "handled": true}]}, "chat": [], "original": "intros net h out d ms net' HdoLeader Hlogs_sorted Hlog_matching HuniqueIndices Hin_p HnwState_update; unfold log_matching_nw; intros p t leaderId prevLogIndex prevLogTerm entries leaderCommit Hin_packets HpBody; apply log_matching_state_same_packet_subset with net; auto.", "succ": false}]