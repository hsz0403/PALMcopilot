[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": ["unfold refined_raft_net_invariant_state_same_packet_subset.", "intros.", "unfold logs_leaderLogs_inductive in *.", "unfold logs_leaderLogs in *."], "tactic": "unfold logs_leaderLogs_host in *.", "exn": "The reference logs_leaderLogs_host was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["unfold refined_raft_net_invariant_state_same_packet_subset.", "intros.", "unfold logs_leaderLogs_inductive in *.", "unfold logs_leaderLogs in *.", "unfold logs_leaderLogs_nw in *."], "tactic": "unfold leaderLogs_contiguous_interface in *.", "exn": "Cannot coerce leaderLogs_contiguous_interface to an evaluable reference.", "type": "not_evaluable", "handled": true}, {"ctx": ["unfold refined_raft_net_invariant_state_same_packet_subset.", "intros.", "unfold logs_leaderLogs_inductive in *.", "unfold logs_leaderLogs in *.", "unfold logs_leaderLogs_nw in *.", "qsimpl use: leaderLogs_contiguous_interface.", "unfold LeaderLogsContiguousInterface.leaderLogs_contiguous in *.", "unfold leaderLogs_entries_match_host in *."], "tactic": "unfold leaderLogs_entries_match_interface in *.", "exn": "Cannot coerce leaderLogs_entries_match_interface to an evaluable reference.", "type": "not_evaluable", "handled": true}, {"ctx": ["unfold refined_raft_net_invariant_state_same_packet_subset.", "intros.", "unfold logs_leaderLogs_inductive in *.", "unfold logs_leaderLogs in *.", "unfold logs_leaderLogs_nw in *.", "qsimpl use: leaderLogs_contiguous_interface.", "unfold LeaderLogsContiguousInterface.leaderLogs_contiguous in *.", "unfold leaderLogs_entries_match_host in *.", "qsimpl use: leaderLogs_entries_match_interface,leaderLogs_contiguous_interface.", "unfold leaderLogs_sorted in *."], "tactic": "unfold leaderLogs_sorted_interface in *.", "exn": "Cannot coerce leaderLogs_sorted_interface to an evaluable reference.", "type": "not_evaluable", "handled": true}, {"ctx": ["unfold refined_raft_net_invariant_state_same_packet_subset.", "intros.", "unfold logs_leaderLogs_inductive in *.", "unfold logs_leaderLogs in *.", "unfold logs_leaderLogs_nw in *.", "qsimpl use: leaderLogs_contiguous_interface.", "unfold LeaderLogsContiguousInterface.leaderLogs_contiguous in *.", "unfold leaderLogs_entries_match_host in *.", "qsimpl use: leaderLogs_entries_match_interface,leaderLogs_contiguous_interface.", "unfold leaderLogs_sorted in *.", "qsimpl use: leaderLogs_entries_match_interface,leaderLogs_contiguous_interface,leaderLogs_sorted_interface.", "unfold leaders_have_leaderLogs_strong in *."], "tactic": "unfold leaders_have_leaderLogs_strong_interface in *.", "exn": "Cannot coerce leaders_have_leaderLogs_strong_interface to an evaluable reference.", "type": "not_evaluable", "handled": true}, {"ctx": ["unfold refined_raft_net_invariant_state_same_packet_subset.", "intros.", "unfold logs_leaderLogs_inductive in *.", "unfold logs_leaderLogs in *.", "unfold logs_leaderLogs_nw in *.", "qsimpl use: leaderLogs_contiguous_interface.", "unfold LeaderLogsContiguousInterface.leaderLogs_contiguous in *.", "unfold leaderLogs_entries_match_host in *.", "qsimpl use: leaderLogs_entries_match_interface,leaderLogs_contiguous_interface.", "unfold leaderLogs_sorted in *.", "qsimpl use: leaderLogs_entries_match_interface,leaderLogs_contiguous_interface,leaderLogs_sorted_interface.", "unfold leaders_have_leaderLogs_strong in *.", "qsimpl use: leaderLogs_entries_match_interface,leaders_have_leaderLogs_strong_interface,leaderLogs_contiguous_interface,leaderLogs_sorted_interface.", "unfold nextIndex_safety in *."], "tactic": "unfold nextIndex_safety_interface in *.", "exn": "Cannot coerce nextIndex_safety_interface to an evaluable reference.", "type": "not_evaluable", "handled": true}, {"ctx": ["unfold refined_raft_net_invariant_state_same_packet_subset.", "intros.", "unfold logs_leaderLogs_inductive in *.", "unfold logs_leaderLogs in *.", "unfold logs_leaderLogs_nw in *.", "qsimpl use: leaderLogs_contiguous_interface.", "unfold LeaderLogsContiguousInterface.leaderLogs_contiguous in *.", "unfold leaderLogs_entries_match_host in *.", "qsimpl use: leaderLogs_entries_match_interface,leaderLogs_contiguous_interface.", "unfold leaderLogs_sorted in *.", "qsimpl use: leaderLogs_entries_match_interface,leaderLogs_contiguous_interface,leaderLogs_sorted_interface.", "unfold leaders_have_leaderLogs_strong in *.", "qsimpl use: leaderLogs_entries_match_interface,leaders_have_leaderLogs_strong_interface,leaderLogs_contiguous_interface,leaderLogs_sorted_interface.", "unfold nextIndex_safety in *.", "qsimpl use: nextIndex_safety_interface,leaderLogs_sorted_interface,leaderLogs_contiguous_interface,leaderLogs_entries_match_interface,leaders_have_leaderLogs_strong_interface."], "tactic": "unfold sorted_interface in *.", "exn": "Cannot coerce sorted_interface to an evaluable reference.", "type": "not_evaluable", "handled": true}, {"ctx": ["unfold refined_raft_net_invariant_state_same_packet_subset.", "intros.", "unfold logs_leaderLogs_inductive in *.", "unfold logs_leaderLogs in *.", "unfold logs_leaderLogs_nw in *.", "qsimpl use: leaderLogs_contiguous_interface.", "unfold LeaderLogsContiguousInterface.leaderLogs_contiguous in *.", "unfold leaderLogs_entries_match_host in *.", "qsimpl use: leaderLogs_entries_match_interface,leaderLogs_contiguous_interface.", "unfold leaderLogs_sorted in *.", "qsimpl use: leaderLogs_entries_match_interface,leaderLogs_contiguous_interface,leaderLogs_sorted_interface.", "unfold leaders_have_leaderLogs_strong in *.", "qsimpl use: leaderLogs_entries_match_interface,leaders_have_leaderLogs_strong_interface,leaderLogs_contiguous_interface,leaderLogs_sorted_interface.", "unfold nextIndex_safety in *.", "qsimpl use: nextIndex_safety_interface,leaderLogs_sorted_interface,leaderLogs_contiguous_interface,leaderLogs_entries_match_interface,leaders_have_leaderLogs_strong_interface.", "qsimpl use: sorted_interface,nextIndex_safety_interface,leaderLogs_sorted_interface,leaderLogs_contiguous_interface,leaderLogs_entries_match_interface,leaders_have_leaderLogs_strong_interface."], "tactic": "unfold raft_refinement_interface in *.", "exn": "Cannot coerce raft_refinement_interface to an evaluable reference.", "type": "not_evaluable", "handled": true}, {"ctx": ["unfold refined_raft_net_invariant_state_same_packet_subset.", "intros.", "unfold logs_leaderLogs_inductive in *.", "unfold logs_leaderLogs in *.", "unfold logs_leaderLogs_nw in *.", "qsimpl use: leaderLogs_contiguous_interface.", "unfold LeaderLogsContiguousInterface.leaderLogs_contiguous in *.", "unfold leaderLogs_entries_match_host in *.", "qsimpl use: leaderLogs_entries_match_interface,leaderLogs_contiguous_interface.", "unfold leaderLogs_sorted in *.", "qsimpl use: leaderLogs_entries_match_interface,leaderLogs_contiguous_interface,leaderLogs_sorted_interface.", "unfold leaders_have_leaderLogs_strong in *.", "qsimpl use: leaderLogs_entries_match_interface,leaders_have_leaderLogs_strong_interface,leaderLogs_contiguous_interface,leaderLogs_sorted_interface.", "unfold nextIndex_safety in *.", "qsimpl use: nextIndex_safety_interface,leaderLogs_sorted_interface,leaderLogs_contiguous_interface,leaderLogs_entries_match_interface,leaders_have_leaderLogs_strong_interface.", "qsimpl use: sorted_interface,nextIndex_safety_interface,leaderLogs_sorted_interface,leaderLogs_contiguous_interface,leaderLogs_entries_match_interface,leaders_have_leaderLogs_strong_interface.", "qsimpl use: raft_refinement_interface,sorted_interface,nextIndex_safety_interface,leaderLogs_sorted_interface,leaderLogs_contiguous_interface,leaderLogs_entries_match_interface,leaders_have_leaderLogs_strong_interface."], "tactic": "unfold log_properties_hold_on_leader_logs_interface in *.", "exn": "Cannot coerce log_properties_hold_on_leader_logs_interface to an evaluable reference.", "type": "not_evaluable", "handled": true}, {"ctx": ["unfold refined_raft_net_invariant_state_same_packet_subset.", "intros.", "unfold logs_leaderLogs_inductive in *.", "unfold logs_leaderLogs in *.", "unfold logs_leaderLogs_nw in *.", "qsimpl use: leaderLogs_contiguous_interface.", "unfold LeaderLogsContiguousInterface.leaderLogs_contiguous in *.", "unfold leaderLogs_entries_match_host in *.", "qsimpl use: leaderLogs_entries_match_interface,leaderLogs_contiguous_interface.", "unfold leaderLogs_sorted in *.", "qsimpl use: leaderLogs_entries_match_interface,leaderLogs_contiguous_interface,leaderLogs_sorted_interface.", "unfold leaders_have_leaderLogs_strong in *.", "qsimpl use: leaderLogs_entries_match_interface,leaders_have_leaderLogs_strong_interface,leaderLogs_contiguous_interface,leaderLogs_sorted_interface.", "unfold nextIndex_safety in *.", "qsimpl use: nextIndex_safety_interface,leaderLogs_sorted_interface,leaderLogs_contiguous_interface,leaderLogs_entries_match_interface,leaders_have_leaderLogs_strong_interface.", "qsimpl use: sorted_interface,nextIndex_safety_interface,leaderLogs_sorted_interface,leaderLogs_contiguous_interface,leaderLogs_entries_match_interface,leaders_have_leaderLogs_strong_interface.", "qsimpl use: raft_refinement_interface,sorted_interface,nextIndex_safety_interface,leaderLogs_sorted_interface,leaderLogs_contiguous_interface,leaderLogs_entries_match_interface,leaders_have_leaderLogs_strong_interface.", "qsimpl use: raft_refinement_interface,sorted_interface,nextIndex_safety_interface,leaderLogs_sorted_interface,leaderLogs_contiguous_interface,leaderLogs_entries_match_interface,log_properties_hold_on_leader_logs_interface,leaders_have_leaderLogs_strong_interface."], "tactic": "unfold refine_raft_parameters in *.", "exn": "The reference refine_raft_parameters was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["unfold refined_raft_net_invariant_state_same_packet_subset.", "intros.", "unfold logs_leaderLogs_inductive in *.", "unfold logs_leaderLogs in *.", "unfold logs_leaderLogs_nw in *.", "qsimpl use: leaderLogs_contiguous_interface.", "unfold LeaderLogsContiguousInterface.leaderLogs_contiguous in *.", "unfold leaderLogs_entries_match_host in *.", "qsimpl use: leaderLogs_entries_match_interface,leaderLogs_contiguous_interface.", "unfold leaderLogs_sorted in *.", "qsimpl use: leaderLogs_entries_match_interface,leaderLogs_contiguous_interface,leaderLogs_sorted_interface.", "unfold leaders_have_leaderLogs_strong in *.", "qsimpl use: leaderLogs_entries_match_interface,leaders_have_leaderLogs_strong_interface,leaderLogs_contiguous_interface,leaderLogs_sorted_interface.", "unfold nextIndex_safety in *.", "qsimpl use: nextIndex_safety_interface,leaderLogs_sorted_interface,leaderLogs_contiguous_interface,leaderLogs_entries_match_interface,leaders_have_leaderLogs_strong_interface.", "qsimpl use: sorted_interface,nextIndex_safety_interface,leaderLogs_sorted_interface,leaderLogs_contiguous_interface,leaderLogs_entries_match_interface,leaders_have_leaderLogs_strong_interface.", "qsimpl use: raft_refinement_interface,sorted_interface,nextIndex_safety_interface,leaderLogs_sorted_interface,leaderLogs_contiguous_interface,leaderLogs_entries_match_interface,leaders_have_leaderLogs_strong_interface.", "qsimpl use: raft_refinement_interface,sorted_interface,nextIndex_safety_interface,leaderLogs_sorted_interface,leaderLogs_contiguous_interface,leaderLogs_entries_match_interface,log_properties_hold_on_leader_logs_interface,leaders_have_leaderLogs_strong_interface.", "unfold raft_data in *."], "tactic": "unfold refine_multi_params in *.", "exn": "The reference refine_multi_params was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["unfold refined_raft_net_invariant_state_same_packet_subset.", "intros.", "unfold logs_leaderLogs_inductive in *.", "unfold logs_leaderLogs in *.", "unfold logs_leaderLogs_nw in *.", "qsimpl use: leaderLogs_contiguous_interface.", "unfold LeaderLogsContiguousInterface.leaderLogs_contiguous in *.", "unfold leaderLogs_entries_match_host in *.", "qsimpl use: leaderLogs_entries_match_interface,leaderLogs_contiguous_interface.", "unfold leaderLogs_sorted in *.", "qsimpl use: leaderLogs_entries_match_interface,leaderLogs_contiguous_interface,leaderLogs_sorted_interface.", "unfold leaders_have_leaderLogs_strong in *.", "qsimpl use: leaderLogs_entries_match_interface,leaders_have_leaderLogs_strong_interface,leaderLogs_contiguous_interface,leaderLogs_sorted_interface.", "unfold nextIndex_safety in *.", "qsimpl use: nextIndex_safety_interface,leaderLogs_sorted_interface,leaderLogs_contiguous_interface,leaderLogs_entries_match_interface,leaders_have_leaderLogs_strong_interface.", "qsimpl use: sorted_interface,nextIndex_safety_interface,leaderLogs_sorted_interface,leaderLogs_contiguous_interface,leaderLogs_entries_match_interface,leaders_have_leaderLogs_strong_interface.", "qsimpl use: raft_refinement_interface,sorted_interface,nextIndex_safety_interface,leaderLogs_sorted_interface,leaderLogs_contiguous_interface,leaderLogs_entries_match_interface,leaders_have_leaderLogs_strong_interface.", "qsimpl use: raft_refinement_interface,sorted_interface,nextIndex_safety_interface,leaderLogs_sorted_interface,leaderLogs_contiguous_interface,leaderLogs_entries_match_interface,log_properties_hold_on_leader_logs_interface,leaders_have_leaderLogs_strong_interface.", "unfold raft_data in *."], "tactic": "unfold refine_base_params in *.", "exn": "The reference refine_base_params was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["unfold refined_raft_net_invariant_state_same_packet_subset.", "intros.", "unfold logs_leaderLogs_inductive in *.", "unfold logs_leaderLogs in *.", "unfold logs_leaderLogs_nw in *.", "qsimpl use: leaderLogs_contiguous_interface.", "unfold LeaderLogsContiguousInterface.leaderLogs_contiguous in *.", "unfold leaderLogs_entries_match_host in *.", "qsimpl use: leaderLogs_entries_match_interface,leaderLogs_contiguous_interface.", "unfold leaderLogs_sorted in *.", "qsimpl use: leaderLogs_entries_match_interface,leaderLogs_contiguous_interface,leaderLogs_sorted_interface.", "unfold leaders_have_leaderLogs_strong in *.", "qsimpl use: leaderLogs_entries_match_interface,leaders_have_leaderLogs_strong_interface,leaderLogs_contiguous_interface,leaderLogs_sorted_interface.", "unfold nextIndex_safety in *.", "qsimpl use: nextIndex_safety_interface,leaderLogs_sorted_interface,leaderLogs_contiguous_interface,leaderLogs_entries_match_interface,leaders_have_leaderLogs_strong_interface.", "qsimpl use: sorted_interface,nextIndex_safety_interface,leaderLogs_sorted_interface,leaderLogs_contiguous_interface,leaderLogs_entries_match_interface,leaders_have_leaderLogs_strong_interface.", "qsimpl use: raft_refinement_interface,sorted_interface,nextIndex_safety_interface,leaderLogs_sorted_interface,leaderLogs_contiguous_interface,leaderLogs_entries_match_interface,leaders_have_leaderLogs_strong_interface.", "qsimpl use: raft_refinement_interface,sorted_interface,nextIndex_safety_interface,leaderLogs_sorted_interface,leaderLogs_contiguous_interface,leaderLogs_entries_match_interface,log_properties_hold_on_leader_logs_interface,leaders_have_leaderLogs_strong_interface.", "unfold raft_data in *."], "tactic": "split; intros.", "exn": "Unable to find an instance for the variable x.", "type": "no_instance_var", "handled": true}, {"ctx": ["unfold refined_raft_net_invariant_state_same_packet_subset.", "intros.", "unfold logs_leaderLogs_inductive in *.", "unfold logs_leaderLogs in *.", "unfold logs_leaderLogs_nw in *.", "qsimpl use: leaderLogs_contiguous_interface.", "unfold LeaderLogsContiguousInterface.leaderLogs_contiguous in *.", "unfold leaderLogs_entries_match_host in *.", "qsimpl use: leaderLogs_entries_match_interface,leaderLogs_contiguous_interface.", "unfold leaderLogs_sorted in *.", "qsimpl use: leaderLogs_entries_match_interface,leaderLogs_contiguous_interface,leaderLogs_sorted_interface.", "unfold leaders_have_leaderLogs_strong in *.", "qsimpl use: leaderLogs_entries_match_interface,leaders_have_leaderLogs_strong_interface,leaderLogs_contiguous_interface,leaderLogs_sorted_interface.", "unfold nextIndex_safety in *.", "qsimpl use: nextIndex_safety_interface,leaderLogs_sorted_interface,leaderLogs_contiguous_interface,leaderLogs_entries_match_interface,leaders_have_leaderLogs_strong_interface.", "qsimpl use: sorted_interface,nextIndex_safety_interface,leaderLogs_sorted_interface,leaderLogs_contiguous_interface,leaderLogs_entries_match_interface,leaders_have_leaderLogs_strong_interface.", "qsimpl use: raft_refinement_interface,sorted_interface,nextIndex_safety_interface,leaderLogs_sorted_interface,leaderLogs_contiguous_interface,leaderLogs_entries_match_interface,leaders_have_leaderLogs_strong_interface.", "qsimpl use: raft_refinement_interface,sorted_interface,nextIndex_safety_interface,leaderLogs_sorted_interface,leaderLogs_contiguous_interface,leaderLogs_entries_match_interface,log_properties_hold_on_leader_logs_interface,leaders_have_leaderLogs_strong_interface.", "unfold raft_data in *.", "qsimpl use: raft_refinement_interface,sorted_interface,nextIndex_safety_interface,leaderLogs_sorted_interface,leaderLogs_contiguous_interface,leaderLogs_entries_match_interface,log_properties_hold_on_leader_logs_interface,leaders_have_leaderLogs_strong_interface.", "-"], "tactic": "apply H; auto.", "exn": "In environment X42, X41, X40, X39, X38, X37, X36, X35, X34, X33, X32, X31, X30, X29, X28, X27, X26, X25, X24, X23, X22, X21, X20, X19, X18, X17, X16, X15, X14, X13, X12, X11, X10, X9, X8, X7, X6, X5, X4, X3, X2, X1, X0, X : Prop orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params net, net' : network H : forall h : name, nwState net h = nwState net' h H0 : forall p : packet, In p (nwPackets net') -> In p (nwPackets net) H2 : refined_raft_intermediate_reachable net H1 : forall (h : name) (e : entry), In e (log (snd (nwState net h))) -> exists (leader : name) (ll es : list entry), In (eTerm e, ll) (leaderLogs (fst (nwState net leader))) /\\\\ removeAfterIndex (log (snd (nwState net h))) (eIndex e) = es ++ ll /\\\\ (forall e' : entry, In e' es -> eTerm e' = eTerm e) H3 : forall (p : packet) (t : term) (n : name) (pli : logIndex) (plt : term) (es : list entry) (ci : logIndex) (e : entry), In p (nwPackets net) -> pBody p = AppendEntries t n pli plt es ci -> In e es -> exists (leader : name) (ll es' ll' : list entry), In (eTerm e, ll) (leaderLogs (fst (nwState net leader))) /\\\\ Prefix ll' ll /\\\\ removeAfterIndex es (eIndex e) = es' ++ ll' /\\\\ (forall e' : entry, In e' es' -> eTerm e' = eTerm e) /\\\\ (plt = eTerm e /\\\\ pli > maxIndex ll \\\\/ (exists e0 : entry, In e0 ll /\\\\ eIndex e0 = pli /\\\\ eTerm e0 = plt /\\\\ ((ll' = [] -> False) \\\\/ pli = maxIndex ll)) \\\\/ plt = 0 /\\\\ pli = 0 /\\\\ ll' = ll) h : name e : entry H4 : In e (log (snd (nwState net' h))) log_properties_hold_on_leader_logs_invariant : forall net : network, refined_raft_intermediate_reachable net -> log_properties_hold_on_leader_logs net handleAppendEntries_logs_sorted : forall (net : network) (p : packet) (t : term) (n : name) (pli : logIndex) (plt : term) (es : list entry) (ci : logIndex) (st' : RaftState.raft_data term name entry logIndex serverType data clientId output) (m : msg), raft_intermediate_reachable net -> logs_sorted net -> handleAppendEntries (pDst p) (nwState net (pDst p)) t n pli plt es ci = (st', m) -> pBody p = AppendEntries t n pli plt es ci -> In p (nwPackets net) -> sorted (log st') handleClientRequest_logs_sorted : forall (h : name) (client : clientId) (id : nat) (c : input) (out : list raft_output) (st : RaftState.raft_data term name entry logIndex serverType data clientId output) (l : list (name * msg)) (net : network), handleClientRequest h (nwState net h) client id c = (out, st, l) -> raft_intermediate_reachable net -> logs_sorted_host net -> sorted (log st) logs_sorted_invariant : forall net : network, raft_intermediate_reachable net -> logs_sorted net nextIndex_safety_invariant : forall net : network, raft_intermediate_reachable net -> forall h h' : name, type (nwState net h) = Leader -> Init.Nat.pred (getNextIndex (nwState net h) h') <= maxIndex (log (nwState net h)) leaders_have_leaderLogs_strong_invariant : forall net : network, refined_raft_intermediate_reachable net -> forall h : name, type (snd (nwState net h)) = Leader -> exists ll es : list entry, In (currentTerm (snd (nwState net h)), ll) (leaderLogs (fst (nwState net h))) /\\\\ log (snd (nwState net h)) = es ++ ll /\\\\ (forall e : entry, In e es -> eTerm e = currentTerm (snd (nwState net h))) leaderLogs_entries_match_invariant : forall net : network, refined_raft_intermediate_reachable net -> forall (h h' : name) (t : term) (ll : list entry), In (t, ll) (leaderLogs (fst (nwState net h'))) -> entries_match (log (snd (nwState net h))) ll leaderLogs_contiguous_invariant : forall net : network, refined_raft_intermediate_reachable net -> forall (h : name) (t : term) (ll : list entry), In (t, ll) (leaderLogs (fst (nwState net h))) -> contiguous_range_exact_lo ll 0 entries_contiguous_nw_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_contiguous_nw net entries_gt_0_nw_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_gt_0_nw net entries_sorted_nw_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_sorted_nw net entries_gt_0_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_gt_0 net entries_contiguous_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_contiguous net entries_sorted_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_sorted net entries_match_invariant : forall (net : network) (h h' : name), refined_raft_intermediate_reachable net -> entries_match (log (snd (nwState net h))) (log (snd (nwState net h'))) entries_match_nw_1_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_match_nw_1 net entries_match_nw_host_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_match_nw_host net allEntries_gt_0_invariant : forall (net : network) (h : name) (e : entry), refined_raft_intermediate_reachable net -> In e (map snd (allEntries (fst (nwState net h)))) -> eIndex e > 0 leaderLogs_sorted_invariant : forall net : network, refined_raft_intermediate_reachable net -> forall (h : name) (t : term) (log : list entry), In (t, log) (leaderLogs (fst (nwState net h))) -> sorted log refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (deghost net) Unable to unify \"nwState net ?M50203 = nwState net' ?M50203\" with \"exists (leader : name) (ll es : list entry), In (eTerm e, ll) (leaderLogs (fst (nwState net' leader))) /\\\\ removeAfterIndex (log (snd (nwState net' h))) (eIndex e) = es ++ ll /\\\\ (forall e' : entry, In e' es -> eTerm e' = eTerm e)\".", "type": "cannot_unify", "handled": true}, {"ctx": ["unfold refined_raft_net_invariant_state_same_packet_subset.", "intros.", "unfold logs_leaderLogs_inductive in *.", "unfold logs_leaderLogs in *.", "unfold logs_leaderLogs_nw in *.", "qsimpl use: leaderLogs_contiguous_interface.", "unfold LeaderLogsContiguousInterface.leaderLogs_contiguous in *.", "unfold leaderLogs_entries_match_host in *.", "qsimpl use: leaderLogs_entries_match_interface,leaderLogs_contiguous_interface.", "unfold leaderLogs_sorted in *.", "qsimpl use: leaderLogs_entries_match_interface,leaderLogs_contiguous_interface,leaderLogs_sorted_interface.", "unfold leaders_have_leaderLogs_strong in *.", "qsimpl use: leaderLogs_entries_match_interface,leaders_have_leaderLogs_strong_interface,leaderLogs_contiguous_interface,leaderLogs_sorted_interface.", "unfold nextIndex_safety in *.", "qsimpl use: nextIndex_safety_interface,leaderLogs_sorted_interface,leaderLogs_contiguous_interface,leaderLogs_entries_match_interface,leaders_have_leaderLogs_strong_interface.", "qsimpl use: sorted_interface,nextIndex_safety_interface,leaderLogs_sorted_interface,leaderLogs_contiguous_interface,leaderLogs_entries_match_interface,leaders_have_leaderLogs_strong_interface.", "qsimpl use: raft_refinement_interface,sorted_interface,nextIndex_safety_interface,leaderLogs_sorted_interface,leaderLogs_contiguous_interface,leaderLogs_entries_match_interface,leaders_have_leaderLogs_strong_interface.", "qsimpl use: raft_refinement_interface,sorted_interface,nextIndex_safety_interface,leaderLogs_sorted_interface,leaderLogs_contiguous_interface,leaderLogs_entries_match_interface,log_properties_hold_on_leader_logs_interface,leaders_have_leaderLogs_strong_interface.", "unfold raft_data in *.", "qsimpl use: raft_refinement_interface,sorted_interface,nextIndex_safety_interface,leaderLogs_sorted_interface,leaderLogs_contiguous_interface,leaderLogs_entries_match_interface,log_properties_hold_on_leader_logs_interface,leaders_have_leaderLogs_strong_interface.", "-", "qsimpl use: raft_refinement_interface,sorted_interface,nextIndex_safety_interface,leaderLogs_sorted_interface,leaderLogs_contiguous_interface,leaderLogs_entries_match_interface,log_properties_hold_on_leader_logs_interface,leaders_have_leaderLogs_strong_interface."], "tactic": "-", "exn": "Wrong bullet -: Current bullet - is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["unfold refined_raft_net_invariant_state_same_packet_subset.", "intros.", "unfold logs_leaderLogs_inductive in *.", "unfold logs_leaderLogs in *.", "unfold logs_leaderLogs_nw in *.", "qsimpl use: leaderLogs_contiguous_interface.", "unfold LeaderLogsContiguousInterface.leaderLogs_contiguous in *.", "unfold leaderLogs_entries_match_host in *.", "qsimpl use: leaderLogs_entries_match_interface,leaderLogs_contiguous_interface.", "unfold leaderLogs_sorted in *.", "qsimpl use: leaderLogs_entries_match_interface,leaderLogs_contiguous_interface,leaderLogs_sorted_interface.", "unfold leaders_have_leaderLogs_strong in *.", "qsimpl use: leaderLogs_entries_match_interface,leaders_have_leaderLogs_strong_interface,leaderLogs_contiguous_interface,leaderLogs_sorted_interface.", "unfold nextIndex_safety in *.", "qsimpl use: nextIndex_safety_interface,leaderLogs_sorted_interface,leaderLogs_contiguous_interface,leaderLogs_entries_match_interface,leaders_have_leaderLogs_strong_interface.", "qsimpl use: sorted_interface,nextIndex_safety_interface,leaderLogs_sorted_interface,leaderLogs_contiguous_interface,leaderLogs_entries_match_interface,leaders_have_leaderLogs_strong_interface.", "qsimpl use: raft_refinement_interface,sorted_interface,nextIndex_safety_interface,leaderLogs_sorted_interface,leaderLogs_contiguous_interface,leaderLogs_entries_match_interface,leaders_have_leaderLogs_strong_interface.", "qsimpl use: raft_refinement_interface,sorted_interface,nextIndex_safety_interface,leaderLogs_sorted_interface,leaderLogs_contiguous_interface,leaderLogs_entries_match_interface,log_properties_hold_on_leader_logs_interface,leaders_have_leaderLogs_strong_interface.", "unfold raft_data in *.", "qsimpl use: raft_refinement_interface,sorted_interface,nextIndex_safety_interface,leaderLogs_sorted_interface,leaderLogs_contiguous_interface,leaderLogs_entries_match_interface,log_properties_hold_on_leader_logs_interface,leaders_have_leaderLogs_strong_interface.", "-", "qsimpl use: raft_refinement_interface,sorted_interface,nextIndex_safety_interface,leaderLogs_sorted_interface,leaderLogs_contiguous_interface,leaderLogs_entries_match_interface,log_properties_hold_on_leader_logs_interface,leaders_have_leaderLogs_strong_interface.", "shelve.", "-"], "tactic": "apply H0; auto.", "exn": "In environment X : Prop orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params net, net' : network H : forall h : name, nwState net h = nwState net' h H0 : forall p : packet, In p (nwPackets net') -> In p (nwPackets net) H2 : refined_raft_intermediate_reachable net H1 : forall (h : name) (e : entry), In e (log (snd (nwState net h))) -> exists (leader : name) (ll es : list entry), In (eTerm e, ll) (leaderLogs (fst (nwState net leader))) /\\\\ removeAfterIndex (log (snd (nwState net h))) (eIndex e) = es ++ ll /\\\\ (forall e' : entry, In e' es -> eTerm e' = eTerm e) H3 : forall (p : packet) (t : term) (n : name) (pli : logIndex) (plt : term) (es : list entry) (ci : logIndex) (e : entry), In p (nwPackets net) -> pBody p = AppendEntries t n pli plt es ci -> In e es -> exists (leader : name) (ll es' ll' : list entry), In (eTerm e, ll) (leaderLogs (fst (nwState net leader))) /\\\\ Prefix ll' ll /\\\\ removeAfterIndex es (eIndex e) = es' ++ ll' /\\\\ (forall e' : entry, In e' es' -> eTerm e' = eTerm e) /\\\\ (plt = eTerm e /\\\\ pli > maxIndex ll \\\\/ (exists e0 : entry, In e0 ll /\\\\ eIndex e0 = pli /\\\\ eTerm e0 = plt /\\\\ ((ll' = [] -> False) \\\\/ pli = maxIndex ll)) \\\\/ plt = 0 /\\\\ pli = 0 /\\\\ ll' = ll) p : packet t : term n : name pli : logIndex plt : term es : list entry ci : logIndex e : entry H4 : In p (nwPackets net') H5 : pBody p = AppendEntries t n pli plt es ci H6 : In e es log_properties_hold_on_leader_logs_invariant : forall net : network, refined_raft_intermediate_reachable net -> log_properties_hold_on_leader_logs net handleAppendEntries_logs_sorted : forall (net : network) (p : packet) (t : term) (n : name) (pli : logIndex) (plt : term) (es : list entry) (ci : logIndex) (st' : raft_data) (m : msg), raft_intermediate_reachable net -> logs_sorted net -> handleAppendEntries (pDst p) (nwState net (pDst p)) t n pli plt es ci = (st', m) -> pBody p = AppendEntries t n pli plt es ci -> In p (nwPackets net) -> sorted (log st') handleClientRequest_logs_sorted : forall (h : name) (client : clientId) (id : nat) (c : input) (out : list raft_output) (st : raft_data) (l : list (name * msg)) (net : network), handleClientRequest h (nwState net h) client id c = (out, st, l) -> raft_intermediate_reachable net -> logs_sorted_host net -> sorted (log st) logs_sorted_invariant : forall net : network, raft_intermediate_reachable net -> logs_sorted net nextIndex_safety_invariant : forall net : network, raft_intermediate_reachable net -> nextIndex_safety net leaders_have_leaderLogs_strong_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaders_have_leaderLogs_strong net leaderLogs_entries_match_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaderLogs_entries_match_host net leaderLogs_contiguous_invariant : forall net : network, refined_raft_intermediate_reachable net -> LeaderLogsContiguousInterface.leaderLogs_contiguous net entries_contiguous_nw_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_contiguous_nw net entries_gt_0_nw_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_gt_0_nw net entries_sorted_nw_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_sorted_nw net entries_gt_0_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_gt_0 net entries_contiguous_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_contiguous net entries_sorted_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_sorted net entries_match_invariant : forall (net : network) (h h' : name), refined_raft_intermediate_reachable net -> entries_match (log (snd (nwState net h))) (log (snd (nwState net h'))) entries_match_nw_1_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_match_nw_1 net entries_match_nw_host_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_match_nw_host net allEntries_gt_0_invariant : forall (net : network) (h : name) (e : entry), refined_raft_intermediate_reachable net -> In e (map snd (allEntries (fst (nwState net h)))) -> eIndex e > 0 leaderLogs_sorted_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaderLogs_sorted net refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (deghost net) Unable to unify \"(fix In (a : packet) (l : list packet) {struct l} : Prop := match l with | [] => False | b :: m => b = a \\\\/ In a m end) ?M54595 (nwPackets net)\" with \"exists (leader : name) (ll es' ll' : list entry), In (eTerm e, ll) (leaderLogs (fst (nwState net' leader))) /\\\\ Prefix ll' ll /\\\\ removeAfterIndex es (eIndex e) = es' ++ ll' /\\\\ (forall e' : entry, In e' es' -> eTerm e' = eTerm e) /\\\\ (plt = eTerm e /\\\\ pli > maxIndex ll \\\\/ (exists e : entry, In e ll /\\\\ eIndex e = pli /\\\\ eTerm e = plt /\\\\ ((ll' = [] -> False) \\\\/ pli = maxIndex ll)) \\\\/ plt = 0 /\\\\ pli = 0 /\\\\ ll' = ll)\".", "type": "cannot_unify", "handled": true}]}, "chat": [], "original": "intros. unfold refined_raft_net_invariant_state_same_packet_subset. intros. intros. unfold logs_leaderLogs_inductive in *. unfold logs_leaderLogs in *. unfold logs_leaderLogs_host in *. unfold logs_leaderLogs_nw in *. unfold entries_sorted_nw in *. unfold entries_sorted in *. unfold logs_sorted in *. unfold logs_sorted_host in *. unfold entries_contiguous_nw in *. unfold entries_contiguous in *. unfold entries_gt_0_nw in *. unfold entries_gt_0 in *. unfold leaderLogs_contiguous_interface in *. unfold LeaderLogsContiguousInterface.leaderLogs_contiguous in *. unfold leaderLogs_entries_match_host in *. unfold leaderLogs_entries_match_interface in *. unfold leaderLogs_sorted in *. unfold leaderLogs_sorted_interface in *. unfold leaders_have_leaderLogs_strong in *. unfold leaders_have_leaderLogs_strong_interface in *. unfold nextIndex_safety in *. unfold nextIndex_safety_interface in *. unfold sorted_interface in *. unfold update_elections_data_client_request in *. unfold update_elections_data_timeout in *. unfold update_elections_data_requestVoteReply in *. unfold update in *. unfold raft_refinement_interface in *. unfold log_properties_hold_on_leader_logs_interface in *. unfold refine_raft_parameters in *. unfold refine_multi_params in *. unfold refine_base_params in *. unfold logs_leaderLogs_nw in *. split; intros. - apply H; auto. - apply H0; auto.", "succ": false}]