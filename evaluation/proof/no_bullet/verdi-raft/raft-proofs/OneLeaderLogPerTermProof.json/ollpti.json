[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": [], "tactic": "unfold one_leaderLog_per_term_interface.", "exn": "Cannot coerce one_leaderLog_per_term_interface to an evaluable reference.", "type": "not_evaluable", "handled": true}, {"ctx": ["qsimpl use: one_leaderLog_per_term_interface."], "tactic": "apply Build_one_leaderLog_per_term_interface.", "exn": "In environment P : Prop orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params leaderLogs_term_sanity_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaderLogs_term_sanity net leaderLogs_currentTerm_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaderLogs_currentTerm_sanity net leaderLogs_currentTerm_sanity_candidate_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaderLogs_currentTerm_sanity_candidate net votes_votesWithLog_correspond_invariant : forall net : network, refined_raft_intermediate_reachable net -> votes_votesWithLog_correspond net cronies_correct_invariant : forall net : network, refined_raft_intermediate_reachable net -> cronies_correct net votes_correct_invariant : forall net : network, refined_raft_intermediate_reachable net -> votes_correct net leaderLogs_votesWithLog_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaderLogs_votesWithLog net refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (deghost net) Unable to unify \"one_leaderLog_per_term_interface\" with \"P\".", "type": "cannot_unify", "handled": true}, {"ctx": ["qsimpl use: one_leaderLog_per_term_interface.", "qsimpl use: one_leaderLog_per_term_interface,Build_one_leaderLog_per_term_interface."], "tactic": "intros net H.", "exn": "H is already used.", "type": "used_var", "handled": true}, {"ctx": ["qsimpl use: one_leaderLog_per_term_interface.", "qsimpl use: one_leaderLog_per_term_interface,Build_one_leaderLog_per_term_interface."], "tactic": "intros net H'.", "exn": "No product even after head-reduction.", "type": "no_product", "handled": true}, {"ctx": ["qsimpl use: one_leaderLog_per_term_interface.", "qsimpl use: one_leaderLog_per_term_interface,Build_one_leaderLog_per_term_interface."], "tactic": "apply (one_leaderLog_per_term_invariant one_node_params net H).", "exn": "The reference net was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["qsimpl use: one_leaderLog_per_term_interface.", "qsimpl use: one_leaderLog_per_term_interface,Build_one_leaderLog_per_term_interface."], "tactic": "intros net H.", "exn": "H is already used.", "type": "used_var", "handled": true}, {"ctx": ["qsimpl use: one_leaderLog_per_term_interface.", "qsimpl use: one_leaderLog_per_term_interface,Build_one_leaderLog_per_term_interface."], "tactic": "intros net H'.", "exn": "No product even after head-reduction.", "type": "no_product", "handled": true}, {"ctx": ["qsimpl use: one_leaderLog_per_term_interface.", "qsimpl use: one_leaderLog_per_term_interface,Build_one_leaderLog_per_term_interface."], "tactic": "apply (one_leaderLog_per_term_log_invariant one_node_params net H).", "exn": "The reference net was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["qsimpl use: one_leaderLog_per_term_interface.", "qsimpl use: one_leaderLog_per_term_interface,Build_one_leaderLog_per_term_interface."], "tactic": "intros net H.", "exn": "H is already used.", "type": "used_var", "handled": true}, {"ctx": ["qsimpl use: one_leaderLog_per_term_interface.", "qsimpl use: one_leaderLog_per_term_interface,Build_one_leaderLog_per_term_interface."], "tactic": "intros net H'.", "exn": "No product even after head-reduction.", "type": "no_product", "handled": true}, {"ctx": ["qsimpl use: one_leaderLog_per_term_interface.", "qsimpl use: one_leaderLog_per_term_interface,Build_one_leaderLog_per_term_interface."], "tactic": "apply (one_leaderLog_per_term_host_invariant one_node_params net H).", "exn": "The reference net was not found in the current environment.", "type": "ref_not_found", "handled": true}]}, "chat": [], "original": "intros. unfold one_leaderLog_per_term_interface. apply Build_one_leaderLog_per_term_interface. - intros net H. apply (one_leaderLog_per_term_invariant one_node_params net H). - intros net H. apply (one_leaderLog_per_term_log_invariant one_node_params net H). - intros net H. apply (one_leaderLog_per_term_host_invariant one_node_params net H).", "succ": false}]