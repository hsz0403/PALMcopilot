[{"history": {"proof": "intros n m p H1 H2. apply Z.lt_gt. srun best use: Z.gt_lt, Zmult_lt_neg_compat_l. qsimpl time: 1 use: Zgt_trans. qsimpl time: 1 use: Zmult_gt_compat_r,Zgt_trans. qsimpl time: 1 use: Zmult_gt_compat_r,Z,Zgt_trans.", "repairs": ["", "ref_not_found", "hammer", "cannot_unify", "cannot_unify", "cannot_unify"], "exceptions": [{"ctx": ["intros n m p H1 H2."], "tactic": "apply Zlt_gt.", "exn": "The reference Zlt_gt was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros n m p H1 H2.", "apply Z.lt_gt."], "tactic": "apply Zlt_gt in H2.", "exn": "The reference Zlt_gt was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros n m p H1 H2.", "apply Z.lt_gt.", "apply Zopp_gt in H2."], "tactic": "apply Zgt_trans with (m:=0).", "exn": "In environment n, m, p : Z H1 : m > n H2 : - p > - 0 Unable to unify \"(?M1416 ?= ?M1418) = Gt\" with \"(p * m ?= p * n) = Lt\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros n m p H1 H2.", "apply Z.lt_gt.", "apply Zopp_gt in H2.", "qsimpl time: 1 use: Zgt_trans."], "tactic": "apply Zmult_gt_compat_r; auto.", "exn": "In environment H : forall n m p : Z, n > m -> m > p -> n > p n, m, p : Z H3 : (- p ?= 0) = Gt H2 : (m ?= n) = Gt Unable to unify \"(?M2027 * ?M2029 ?= ?M2028 * ?M2029) = Gt\" with \"(p * m ?= p * n) = Lt\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros n m p H1 H2.", "apply Z.lt_gt.", "apply Zopp_gt in H2.", "qsimpl time: 1 use: Zgt_trans.", "qsimpl time: 1 use: Zmult_gt_compat_r,Zgt_trans."], "tactic": "apply Zmult_gt_compat_r; [assumption | apply Z.lt_gt].", "exn": "In environment H1 : forall n m p : Z, n > m -> m > p -> n > p H0 : forall n m p : Z, p > 0 -> n > m -> n * p > m * p n, m, p : Z H3 : (- p ?= 0) = Gt H2 : (m ?= n) = Gt Unable to unify \"(?M2467 * ?M2469 ?= ?M2468 * ?M2469) = Gt\" with \"(p * m ?= p * n) = Lt\".", "type": "cannot_unify", "handled": true}]}, "chat": [], "original": "intros n m p H1 H2. apply Zlt_gt. apply Zlt_gt in H2. apply Zgt_trans with (m:=0). - apply Zmult_gt_compat_r; auto. - apply Zmult_gt_compat_r; [assumption | apply Z.lt_gt].", "succ": true}]