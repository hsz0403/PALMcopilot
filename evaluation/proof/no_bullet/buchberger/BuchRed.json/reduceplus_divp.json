[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": ["intros a b Q Hreduce Hnonzero.", "remember (s2p A A0 eqA n ltM a) as a' eqn:Heqa'.", "remember (s2p A A0 eqA n ltM b) as b' eqn:Heqb'."], "tactic": "unfold reduceplus in Hreduce.", "exn": "Cannot coerce reduceplus to an evaluable reference.", "type": "not_evaluable", "handled": true}, {"ctx": ["intros a b Q Hreduce Hnonzero.", "remember (s2p A A0 eqA n ltM a) as a' eqn:Heqa'.", "remember (s2p A A0 eqA n ltM b) as b' eqn:Heqb'.", "qsimpl use: reduceplus."], "tactic": "unfold reduceplus in Hreduce.", "exn": "Cannot coerce reduceplus to an evaluable reference.", "type": "not_evaluable", "handled": true}, {"ctx": ["intros a b Q Hreduce Hnonzero.", "remember (s2p A A0 eqA n ltM a) as a' eqn:Heqa'.", "remember (s2p A A0 eqA n ltM b) as b' eqn:Heqb'.", "qsimpl use: reduceplus."], "tactic": ["destruct Hreduce as [r [Hin [Hdiv Hnz]]].", ""], "exn": "Expects a disjunctive pattern with 2 branches.", "type": "num_branch", "handled": false}]}, "chat": [], "original": "intros a b Q Hreduce Hnonzero. remember (s2p A A0 eqA n ltM a) as a' eqn:Heqa'. remember (s2p A A0 eqA n ltM b) as b' eqn:Heqb'. unfold reduceplus in Hreduce. unfold reduceplus in Hreduce. destruct Hreduce as [r [Hin [Hdiv Hnz]]]. exists r. split. - rewrite Heqb'. rewrite <- Heqa'. auto. - auto.", "succ": false}]