[{"history": {"proof": "intros. sauto l: on depth: 3.", "repairs": ["", "hammer"], "exceptions": [{"ctx": ["intros."], "tactic": "intro H.", "exn": "No product even after head-reduction.", "type": "no_product", "handled": true}, {"ctx": ["intros.", "destruct H.", "-", "exists nil."], "tactic": "split; [|split].", "exn": "Not an inductive goal with 1 constructor.", "type": "not_inductive_goal", "handled": true}, {"ctx": ["intros.", "destruct H.", "-", "exists nil.", "qsimpl."], "tactic": "apply H1.", "exn": "The reference H1 was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros.", "destruct H.", "-", "exists nil.", "qsimpl.", "apply BinNat.N.binary_rec.", "+"], "tactic": "apply H0.", "exn": "The reference H0 was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros.", "destruct H.", "-", "exists nil.", "qsimpl.", "apply BinNat.N.binary_rec.", "+", "apply BinNat.N.binary_rec."], "tactic": "+", "exn": "Wrong bullet +: Current bullet + is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["intros.", "destruct H.", "-", "exists nil.", "qsimpl.", "apply BinNat.N.binary_rec.", "+", "apply BinNat.N.binary_rec.", "*", "shelve.", "*", "shelve.", "*", "shelve.", "*", "shelve.", "+", "left."], "tactic": "-", "exn": "Wrong bullet -: Current bullet + is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["intros.", "destruct H.", "-", "exists nil.", "qsimpl.", "apply BinNat.N.binary_rec.", "+", "apply BinNat.N.binary_rec.", "*", "shelve.", "*", "shelve.", "*", "shelve.", "*", "shelve.", "+", "left.", "shelve."], "tactic": "-", "exn": "Wrong bullet -: Expecting +.", "type": "wrong_bullet", "handled": true}, {"ctx": ["intros.", "destruct H.", "-", "exists nil.", "qsimpl.", "apply BinNat.N.binary_rec.", "+", "apply BinNat.N.binary_rec.", "*", "shelve.", "*", "shelve.", "*", "shelve.", "*", "shelve.", "+", "left.", "shelve.", "+"], "tactic": "destruct H as [l1 [Hlt [Hplus Heq]]].", "exn": "The reference H was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros.", "destruct H.", "-", "exists nil.", "qsimpl.", "apply BinNat.N.binary_rec.", "+", "apply BinNat.N.binary_rec.", "*", "shelve.", "*", "shelve.", "*", "shelve.", "*", "shelve.", "+", "left.", "shelve.", "+"], "tactic": "exists (pX A n b q).", "exn": "In environment A : Set A0, A1 : A eqA : A -> A -> Prop plusA : A -> A -> A invA : A -> A minusA, multA : A -> A -> A divA : A -> forall b : A, (eqA b A0 -> False) -> A eqA_dec : forall a b : A, {eqA a b} + {eqA a b -> False} n : nat ltM : mon n -> mon n -> Prop ltM_dec : forall a b : mon n, {ltM a b} + {ltM b a} + {a = b} p, q : list (Term A n) a, b : Term A n l1 : list (Term A n) M1_min : forall x : mon n, ltM x (zero_mon n) -> False ltM_nonrefl : forall x : mon n, ltM x x -> False ltM_trans : transitive (mon n) ltM ltM_wf : well_founded ltM ltM_plusr : forall x y z : mon n, ltM x y -> ltM (mult_mon n x z) (mult_mon n y z) ltM_plusl : forall x y z : mon n, ltM x y -> ltM (mult_mon n z x) (mult_mon n z y) A1_diff_A0 : eqA A1 A0 -> False eqA_ref : reflexive A eqA eqA_sym : symmetric A eqA eqA_trans : transitive A eqA plusA_assoc : forall a b c : A, eqA (plusA a (plusA b c)) (plusA (plusA a b) c) plusA_com : forall a b : A, eqA (plusA a b) (plusA b a) plusA_eqA_comp : forall a b c d : A, eqA a c -> eqA b d -> eqA (plusA a b) (plusA c d) plusA_A0 : forall a : A, eqA a (plusA a A0) invA_plusA : forall a : A, eqA A0 (plusA a (invA a)) invA_eqA_comp : forall a b : A, eqA a b -> eqA (invA a) (invA b) minusA_def : forall a b : A, eqA (minusA a b) (plusA a (invA b)) multA_eqA_comp : forall a b c d : A, eqA a c -> eqA b d -> eqA (multA a b) (multA c d) multA_assoc : forall a b c : A, eqA (multA a (multA b c)) (multA (multA a b) c) multA_com : forall a b : A, eqA (multA a b) (multA b a) multA_dist_l : forall a b c : A, eqA (plusA (multA c a) (multA c b)) (multA c (plusA a b)) multA_A0_l : forall a : A, eqA (multA A0 a) A0 multA_A1_l : forall a : A, eqA (multA A1 a) a divA_rew : forall (a b : A) (nZ1 nZ2 : eqA b A0 -> False), divA a b nZ1 = divA a b nZ2 divA_is_multA : forall (a b : A) (nZb : eqA b A0 -> False), eqA a (multA (divA a b nZb) b) divA_eqA_comp : forall (a b c d : A) (nZb : eqA b A0 -> False) (nZd : eqA d A0 -> False), eqA a c -> eqA b d -> eqA (divA a b nZb) (divA c d nZd) divA_multA_comp_r : forall (a b c : A) (nZc : eqA c A0 -> False), eqA (divA (multA a b) c nZc) (multA (divA a c nZc) b) divA_invA_r : forall (a b : A) (nZb : eqA b A0 -> False) (nZib : eqA (invA b) A0 -> False), eqA (divA a (invA b) nZib) (invA (divA a b nZb)) The term \"A\" has type \"Set\" while it is expected to have type \"Term ?A ?n\".", "type": "wrong_type", "handled": true}, {"ctx": ["intros.", "destruct H.", "-", "exists nil.", "qsimpl.", "apply BinNat.N.binary_rec.", "+", "apply BinNat.N.binary_rec.", "*", "shelve.", "*", "shelve.", "*", "shelve.", "*", "shelve.", "+", "left.", "shelve.", "+", "qsimpl use: pX."], "tactic": "split.", "exn": "No such goal. Focus next goal with bullet +.", "type": "next_goal", "handled": true}, {"ctx": ["intros.", "destruct H.", "-", "exists nil.", "qsimpl.", "apply BinNat.N.binary_rec.", "+", "apply BinNat.N.binary_rec.", "*", "shelve.", "*", "shelve.", "*", "shelve.", "*", "shelve.", "+", "left.", "shelve.", "+", "qsimpl use: pX.", "+"], "tactic": "apply Hlt.", "exn": "The reference Hlt was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros.", "destruct H.", "-", "exists nil.", "qsimpl.", "apply BinNat.N.binary_rec.", "+", "apply BinNat.N.binary_rec.", "*", "shelve.", "*", "shelve.", "*", "shelve.", "*", "shelve.", "+", "left.", "shelve.", "+", "qsimpl use: pX.", "+", "apply BinNat.N.binary_rec."], "tactic": "+", "exn": "Wrong bullet +: Current bullet + is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["intros.", "destruct H.", "-", "exists nil.", "qsimpl.", "apply BinNat.N.binary_rec.", "+", "apply BinNat.N.binary_rec.", "*", "shelve.", "*", "shelve.", "*", "shelve.", "*", "shelve.", "+", "left.", "shelve.", "+", "qsimpl use: pX.", "+", "apply BinNat.N.binary_rec.", "*", "shelve.", "*", "shelve.", "*", "shelve.", "*", "shelve."], "tactic": "+", "exn": "Wrong bullet +: Expecting -.", "type": "wrong_bullet", "handled": true}, {"ctx": ["intros.", "destruct H.", "-", "exists nil.", "qsimpl.", "apply BinNat.N.binary_rec.", "+", "apply BinNat.N.binary_rec.", "*", "shelve.", "*", "shelve.", "*", "shelve.", "*", "shelve.", "+", "left.", "shelve.", "+", "qsimpl use: pX.", "+", "apply BinNat.N.binary_rec.", "*", "shelve.", "*", "shelve.", "*", "shelve.", "*", "shelve.", "-"], "tactic": "split.", "exn": "Unable to find an instance for the variable x.", "type": "no_instance_var", "handled": true}, {"ctx": ["intros.", "destruct H.", "-", "exists nil.", "qsimpl.", "apply BinNat.N.binary_rec.", "+", "apply BinNat.N.binary_rec.", "*", "shelve.", "*", "shelve.", "*", "shelve.", "*", "shelve.", "+", "left.", "shelve.", "+", "qsimpl use: pX.", "+", "apply BinNat.N.binary_rec.", "*", "shelve.", "*", "shelve.", "*", "shelve.", "*", "shelve.", "-", "qsimpl use: pX."], "tactic": "apply mainu2a with (a1:=a) (a2:=b) (l1:=p) (l2:=l1) (l3:=l).", "exn": "In environment l : forall (A : Set) (n : nat), Term A n -> list (Term A n) -> list (Term A n) A : Set A0, A1 : A eqA : A -> A -> Prop plusA : A -> A -> A invA : A -> A minusA, multA : A -> A -> A divA : A -> forall b : A, (eqA b A0 -> False) -> A eqA_dec : forall a b : A, {eqA a b} + {eqA a b -> False} n : nat ltM : mon n -> mon n -> Prop ltM_dec : forall a b : mon n, {ltM a b} + {ltM b a} + {a = b} p, q : list (Term A n) a, b : Term A n l1 : list (Term A n) M1_min : forall x : mon n, ltM x (zero_mon n) -> False ltM_nonrefl : forall x : mon n, ltM x x -> False ltM_trans : transitive (mon n) ltM ltM_wf : well_founded ltM ltM_plusr : forall x y z : mon n, ltM x y -> ltM (mult_mon n x z) (mult_mon n y z) ltM_plusl : forall x y z : mon n, ltM x y -> ltM (mult_mon n z x) (mult_mon n z y) A1_diff_A0 : eqA A1 A0 -> False eqA_ref : reflexive A eqA eqA_sym : symmetric A eqA eqA_trans : transitive A eqA plusA_assoc : forall a b c : A, eqA (plusA a (plusA b c)) (plusA (plusA a b) c) plusA_com : forall a b : A, eqA (plusA a b) (plusA b a) plusA_eqA_comp : forall a b c d : A, eqA a c -> eqA b d -> eqA (plusA a b) (plusA c d) plusA_A0 : forall a : A, eqA a (plusA a A0) invA_plusA : forall a : A, eqA A0 (plusA a (invA a)) invA_eqA_comp : forall a b : A, eqA a b -> eqA (invA a) (invA b) minusA_def : forall a b : A, eqA (minusA a b) (plusA a (invA b)) multA_eqA_comp : forall a b c d : A, eqA a c -> eqA b d -> eqA (multA a b) (multA c d) multA_assoc : forall a b c : A, eqA (multA a (multA b c)) (multA (multA a b) c) multA_com : forall a b : A, eqA (multA a b) (multA b a) multA_dist_l : forall a b c : A, eqA (plusA (multA c a) (multA c b)) (multA c (plusA a b)) multA_A0_l : forall a : A, eqA (multA A0 a) A0 multA_A1_l : forall a : A, eqA (multA A1 a) a divA_rew : forall (a b : A) (nZ1 nZ2 : eqA b A0 -> False), divA a b nZ1 = divA a b nZ2 divA_is_multA : forall (a b : A) (nZb : eqA b A0 -> False), eqA a (multA (divA a b nZb) b) divA_eqA_comp : forall (a b c d : A) (nZb : eqA b A0 -> False) (nZd : eqA d A0 -> False), eqA a c -> eqA b d -> eqA (divA a b nZb) (divA c d nZd) divA_multA_comp_r : forall (a b c : A) (nZc : eqA c A0 -> False), eqA (divA (multA a b) c nZc) (multA (divA a c nZc) b) divA_invA_r : forall (a b : A) (nZb : eqA b A0 -> False) (nZib : eqA (invA b) A0 -> False), eqA (divA a (invA b) nZib) (invA (divA a b nZb)) The term \"l\" has type \"forall (A : Set) (n : nat), Term A n -> list (Term A n) -> list (Term A n)\" while it is expected to have type \"list (Term A n)\".", "type": "wrong_type", "handled": true}, {"ctx": ["intros.", "destruct H.", "-", "exists nil.", "qsimpl.", "apply BinNat.N.binary_rec.", "+", "apply BinNat.N.binary_rec.", "*", "shelve.", "*", "shelve.", "*", "shelve.", "*", "shelve.", "+", "left.", "shelve.", "+", "qsimpl use: pX.", "+", "apply BinNat.N.binary_rec.", "*", "shelve.", "*", "shelve.", "*", "shelve.", "*", "shelve.", "-", "qsimpl use: pX.", "qsimpl use: pX,mainu2a."], "tactic": "apply Hplus.", "exn": "The reference Hplus was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros.", "destruct H.", "-", "exists nil.", "qsimpl.", "apply BinNat.N.binary_rec.", "+", "apply BinNat.N.binary_rec.", "*", "shelve.", "*", "shelve.", "*", "shelve.", "*", "shelve.", "+", "left.", "shelve.", "+", "qsimpl use: pX.", "+", "apply BinNat.N.binary_rec.", "*", "shelve.", "*", "shelve.", "*", "shelve.", "*", "shelve.", "-", "qsimpl use: pX.", "qsimpl use: pX,mainu2a.", "apply BinNat.N.binary_rec."], "tactic": "apply os.", "exn": "The reference os was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros.", "destruct H.", "-", "exists nil.", "qsimpl.", "apply BinNat.N.binary_rec.", "+", "apply BinNat.N.binary_rec.", "*", "shelve.", "*", "shelve.", "*", "shelve.", "*", "shelve.", "+", "left.", "shelve.", "+", "qsimpl use: pX.", "+", "apply BinNat.N.binary_rec.", "*", "shelve.", "*", "shelve.", "*", "shelve.", "*", "shelve.", "-", "qsimpl use: pX.", "qsimpl use: pX,mainu2a.", "apply BinNat.N.binary_rec.", "apply BinNat.N.binary_rec."], "tactic": "intro abs.", "exn": "No product even after head-reduction.", "type": "no_product", "handled": true}, {"ctx": ["intros.", "destruct H.", "-", "exists nil.", "qsimpl.", "apply BinNat.N.binary_rec.", "+", "apply BinNat.N.binary_rec.", "*", "shelve.", "*", "shelve.", "*", "shelve.", "*", "shelve.", "+", "left.", "shelve.", "+", "qsimpl use: pX.", "+", "apply BinNat.N.binary_rec.", "*", "shelve.", "*", "shelve.", "*", "shelve.", "*", "shelve.", "-", "qsimpl use: pX.", "qsimpl use: pX,mainu2a.", "apply BinNat.N.binary_rec.", "apply BinNat.N.binary_rec."], "tactic": "apply H0.", "exn": "The reference H0 was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros.", "destruct H.", "-", "exists nil.", "qsimpl.", "apply BinNat.N.binary_rec.", "+", "apply BinNat.N.binary_rec.", "*", "shelve.", "*", "shelve.", "*", "shelve.", "*", "shelve.", "+", "left.", "shelve.", "+", "qsimpl use: pX.", "+", "apply BinNat.N.binary_rec.", "*", "shelve.", "*", "shelve.", "*", "shelve.", "*", "shelve.", "-", "qsimpl use: pX.", "qsimpl use: pX,mainu2a.", "apply BinNat.N.binary_rec.", "apply BinNat.N.binary_rec.", "apply BinNat.N.binary_rec."], "tactic": "apply heq.", "exn": "The reference heq was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros.", "destruct H.", "-", "exists nil.", "qsimpl.", "apply BinNat.N.binary_rec.", "+", "apply BinNat.N.binary_rec.", "*", "shelve.", "*", "shelve.", "*", "shelve.", "*", "shelve.", "+", "left.", "shelve.", "+", "qsimpl use: pX.", "+", "apply BinNat.N.binary_rec.", "*", "shelve.", "*", "shelve.", "*", "shelve.", "*", "shelve.", "-", "qsimpl use: pX.", "qsimpl use: pX,mainu2a.", "apply BinNat.N.binary_rec.", "apply BinNat.N.binary_rec.", "apply BinNat.N.binary_rec.", "apply BinNat.N.binary_rec."], "tactic": "split;[|easy].", "exn": "Unable to find an instance for the variable x.", "type": "no_instance_var", "handled": true}, {"ctx": ["intros.", "destruct H.", "-", "exists nil.", "qsimpl.", "apply BinNat.N.binary_rec.", "+", "apply BinNat.N.binary_rec.", "*", "shelve.", "*", "shelve.", "*", "shelve.", "*", "shelve.", "+", "left.", "shelve.", "+", "qsimpl use: pX.", "+", "apply BinNat.N.binary_rec.", "*", "shelve.", "*", "shelve.", "*", "shelve.", "*", "shelve.", "-", "qsimpl use: pX.", "qsimpl use: pX,mainu2a.", "apply BinNat.N.binary_rec.", "apply BinNat.N.binary_rec.", "apply BinNat.N.binary_rec.", "apply BinNat.N.binary_rec.", "qsimpl use: pX,mainu2a."], "tactic": "apply zeroP_plusTermr in Heq.", "exn": "No such hypothesis: Heq", "type": "no_hypos", "handled": true}, {"ctx": ["intros.", "destruct H.", "-", "exists nil.", "qsimpl.", "apply BinNat.N.binary_rec.", "+", "apply BinNat.N.binary_rec.", "*", "shelve.", "*", "shelve.", "*", "shelve.", "*", "shelve.", "+", "left.", "shelve.", "+", "qsimpl use: pX.", "+", "apply BinNat.N.binary_rec.", "*", "shelve.", "*", "shelve.", "*", "shelve.", "*", "shelve.", "-", "qsimpl use: pX.", "qsimpl use: pX,mainu2a.", "apply BinNat.N.binary_rec.", "apply BinNat.N.binary_rec.", "apply BinNat.N.binary_rec.", "apply BinNat.N.binary_rec.", "qsimpl use: pX,mainu2a.", "qsimpl use: pX,zeroP_plusTermr,mainu2a."], "tactic": "destruct Heq.", "exn": "The reference Heq was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros.", "destruct H.", "-", "exists nil.", "qsimpl.", "apply BinNat.N.binary_rec.", "+", "apply BinNat.N.binary_rec.", "*", "shelve.", "*", "shelve.", "*", "shelve.", "*", "shelve.", "+", "left.", "shelve.", "+", "qsimpl use: pX.", "+", "apply BinNat.N.binary_rec.", "*", "shelve.", "*", "shelve.", "*", "shelve.", "*", "shelve.", "-", "qsimpl use: pX.", "qsimpl use: pX,mainu2a.", "apply BinNat.N.binary_rec.", "apply BinNat.N.binary_rec.", "apply BinNat.N.binary_rec.", "apply BinNat.N.binary_rec.", "qsimpl use: pX,mainu2a.", "qsimpl use: pX,zeroP_plusTermr,mainu2a.", "destruct A1_diff_A0."], "tactic": "apply abs.", "exn": "The reference abs was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros.", "destruct H.", "-", "exists nil.", "qsimpl.", "apply BinNat.N.binary_rec.", "+", "apply BinNat.N.binary_rec.", "*", "shelve.", "*", "shelve.", "*", "shelve.", "*", "shelve.", "+", "left.", "shelve.", "+", "qsimpl use: pX.", "+", "apply BinNat.N.binary_rec.", "*", "shelve.", "*", "shelve.", "*", "shelve.", "*", "shelve.", "-", "qsimpl use: pX.", "qsimpl use: pX,mainu2a.", "apply BinNat.N.binary_rec.", "apply BinNat.N.binary_rec.", "apply BinNat.N.binary_rec.", "apply BinNat.N.binary_rec.", "qsimpl use: pX,mainu2a.", "qsimpl use: pX,zeroP_plusTermr,mainu2a.", "destruct A1_diff_A0.", "apply BinNat.N.binary_rec.", "*"], "tactic": "right.", "exn": "Not an inductive product.", "type": "not_inductive_product", "handled": true}, {"ctx": ["intros.", "destruct H.", "-", "exists nil.", "qsimpl.", "apply BinNat.N.binary_rec.", "+", "apply BinNat.N.binary_rec.", "*", "shelve.", "*", "shelve.", "*", "shelve.", "*", "shelve.", "+", "left.", "shelve.", "+", "qsimpl use: pX.", "+", "apply BinNat.N.binary_rec.", "*", "shelve.", "*", "shelve.", "*", "shelve.", "*", "shelve.", "-", "qsimpl use: pX.", "qsimpl use: pX,mainu2a.", "apply BinNat.N.binary_rec.", "apply BinNat.N.binary_rec.", "apply BinNat.N.binary_rec.", "apply BinNat.N.binary_rec.", "qsimpl use: pX,mainu2a.", "qsimpl use: pX,zeroP_plusTermr,mainu2a.", "destruct A1_diff_A0.", "apply BinNat.N.binary_rec.", "*", "qsimpl use: pX,zeroP_plusTermr,mainu2a."], "tactic": "split;[|split].", "exn": "Not an inductive product.", "type": "not_inductive_product", "handled": true}, {"ctx": ["intros.", "destruct H.", "-", "exists nil.", "qsimpl.", "apply BinNat.N.binary_rec.", "+", "apply BinNat.N.binary_rec.", "*", "shelve.", "*", "shelve.", "*", "shelve.", "*", "shelve.", "+", "left.", "shelve.", "+", "qsimpl use: pX.", "+", "apply BinNat.N.binary_rec.", "*", "shelve.", "*", "shelve.", "*", "shelve.", "*", "shelve.", "-", "qsimpl use: pX.", "qsimpl use: pX,mainu2a.", "apply BinNat.N.binary_rec.", "apply BinNat.N.binary_rec.", "apply BinNat.N.binary_rec.", "apply BinNat.N.binary_rec.", "qsimpl use: pX,mainu2a.", "qsimpl use: pX,zeroP_plusTermr,mainu2a.", "destruct A1_diff_A0.", "apply BinNat.N.binary_rec.", "*", "qsimpl use: pX,zeroP_plusTermr,mainu2a.", "qsimpl use: pX,zeroP_plusTermr,mainu2a."], "tactic": "apply H1.", "exn": "In environment l5 : forall (A : Set) (n : nat), Term A n -> list (Term A n) -> list (Term A n) A : Set A0 : A eqA : A -> A -> Prop plusA : A -> A -> A n : nat ltM : mon n -> mon n -> Prop H5 : forall (a1 a2 : Term A n) (l1 l2 l3 : list (Term A n)), plusP l1 l2 l3 -> eqT (A:=A) (n:=n) a1 a2 -> zeroP A0 eqA (n:=n) (plusTerm plusA (n:=n) a1 a2) -> plusP (l5 A n a1 l1) (l5 A n a2 l2) l3 H1 : forall (A : Set) (A0 A1 : A) (eqA : A -> A -> Prop) (plusA : A -> A -> A) (invA : A -> A) (minusA multA : A -> A -> A) (divA : A -> forall b : A, (eqA b A0 -> False) -> A), CoefStructure A A0 A1 eqA plusA invA minusA multA divA -> forall (n : nat) (a b : Term A n), eqT (A:=A) (n:=n) a b -> zeroP A0 eqA (n:=n) b -> eqTerm eqA (n:=n) a (plusTerm plusA (n:=n) a b) l4 : forall (A : Set) (n : nat), Term A n -> list (Term A n) -> list (Term A n) H4 : forall (a1 a2 : Term A n) (l1 l2 l3 : list (Term A n)), plusP l1 l2 l3 -> eqT (A:=A) (n:=n) a1 a2 -> zeroP A0 eqA (n:=n) (plusTerm plusA (n:=n) a1 a2) -> plusP (l4 A n a1 l1) (l4 A n a2 l2) l3 l3 : forall (A : Set) (n : nat), Term A n -> list (Term A n) -> list (Term A n) H2 : forall (a1 a2 : Term A n) (l1 l2 l4 : list (Term A n)), plusP l1 l2 l4 -> eqT (A:=A) (n:=n) a1 a2 -> zeroP A0 eqA (n:=n) (plusTerm plusA (n:=n) a1 a2) -> plusP (l3 A n a1 l1) (l3 A n a2 l2) l4 l2 : forall (A : Set) (n : nat), Term A n -> list (Term A n) -> list (Term A n) H0 : forall (a1 a2 : Term A n) (l1 l3 l4 : list (Term A n)), plusP l1 l3 l4 -> eqT (A:=A) (n:=n) a1 a2 -> zeroP A0 eqA (n:=n) (plusTerm plusA (n:=n) a1 a2) -> plusP (l2 A n a1 l1) (l2 A n a2 l3) l4 l0 : forall (A : Set) (n : nat), Term A n -> list (Term A n) -> list (Term A n) H : forall (a1 a2 : Term A n) (l1 l2 l3 : list (Term A n)), plusP l1 l2 l3 -> eqT (A:=A) (n:=n) a1 a2 -> zeroP A0 eqA (n:=n) (plusTerm plusA (n:=n) a1 a2) -> plusP (l0 A n a1 l1) (l0 A n a2 l2) l3 l : forall (A : Set) (n : nat), Term A n -> list (Term A n) -> list (Term A n) A1 : A invA : A -> A minusA, multA : A -> A -> A divA : A -> forall b : A, (eqA b A0 -> False) -> A eqA_dec : forall a b : A, {eqA a b} + {eqA a b -> False} ltM_dec : forall a b : mon n, {ltM a b} + {ltM b a} + {a = b} p, q : list (Term A n) a, b : Term A n l1 : list (Term A n) M1_min : forall x : mon n, ltM x (zero_mon n) -> False ltM_nonrefl : forall x : mon n, ltM x x -> False ltM_trans : transitive (mon n) ltM ltM_wf : well_founded ltM ltM_plusr : forall x y z : mon n, ltM x y -> ltM (mult_mon n x z) (mult_mon n y z) ltM_plusl : forall x y z : mon n, ltM x y -> ltM (mult_mon n z x) (mult_mon n z y) eqA_ref : reflexive A eqA eqA_sym : symmetric A eqA eqA_trans : transitive A eqA plusA_assoc : forall a b c : A, eqA (plusA a (plusA b c)) (plusA (plusA a b) c) plusA_com : forall a b : A, eqA (plusA a b) (plusA b a) plusA_eqA_comp : forall a b c d : A, eqA a c -> eqA b d -> eqA (plusA a b) (plusA c d) plusA_A0 : forall a : A, eqA a (plusA a A0) invA_plusA : forall a : A, eqA A0 (plusA a (invA a)) invA_eqA_comp : forall a b : A, eqA a b -> eqA (invA a) (invA b) minusA_def : forall a b : A, eqA (minusA a b) (plusA a (invA b)) multA_eqA_comp : forall a b c d : A, eqA a c -> eqA b d -> eqA (multA a b) (multA c d) multA_assoc : forall a b c : A, eqA (multA a (multA b c)) (multA (multA a b) c) multA_com : forall a b : A, eqA (multA a b) (multA b a) multA_dist_l : forall a b c : A, eqA (plusA (multA c a) (multA c b)) (multA c (plusA a b)) multA_A0_l : forall a : A, eqA (multA A0 a) A0 multA_A1_l : forall a : A, eqA (multA A1 a) a divA_rew : forall (a b : A) (nZ1 nZ2 : eqA b A0 -> False), divA a b nZ1 = divA a b nZ2 divA_is_multA : forall (a b : A) (nZb : eqA b A0 -> False), eqA a (multA (divA a b nZb) b) divA_eqA_comp : forall (a b c d : A) (nZb : eqA b A0 -> False) (nZd : eqA d A0 -> False), eqA a c -> eqA b d -> eqA (divA a b nZb) (divA c d nZd) divA_multA_comp_r : forall (a b c : A) (nZc : eqA c A0 -> False), eqA (divA (multA a b) c nZc) (multA (divA a c nZc) b) divA_invA_r : forall (a b : A) (nZb : eqA b A0 -> False) (nZib : eqA (invA b) A0 -> False), eqA (divA a (invA b) nZib) (invA (divA a b nZb)) Unable to unify \"(let (a, a') := ?M56258 in fun H'2 : Term ?M56247 ?M56257 => let (b, b') := H'2 in ?M56250 a b /\\\\ a' = b') (plusTerm ?M56251 ?M56258 ?M56259)\" with \"eqA A1 A0\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros.", "destruct H.", "-", "exists nil.", "qsimpl.", "apply BinNat.N.binary_rec.", "+", "apply BinNat.N.binary_rec.", "*", "shelve.", "*", "shelve.", "*", "shelve.", "*", "shelve.", "+", "left.", "shelve.", "+", "qsimpl use: pX.", "+", "apply BinNat.N.binary_rec.", "*", "shelve.", "*", "shelve.", "*", "shelve.", "*", "shelve.", "-", "qsimpl use: pX.", "qsimpl use: pX,mainu2a.", "apply BinNat.N.binary_rec.", "apply BinNat.N.binary_rec.", "apply BinNat.N.binary_rec.", "apply BinNat.N.binary_rec.", "qsimpl use: pX,mainu2a.", "qsimpl use: pX,zeroP_plusTermr,mainu2a.", "destruct A1_diff_A0.", "apply BinNat.N.binary_rec.", "*", "qsimpl use: pX,zeroP_plusTermr,mainu2a.", "qsimpl use: pX,zeroP_plusTermr,mainu2a.", "qsimpl use: pX,zeroP_plusTermr,mainu2a."], "tactic": "apply Hplus.", "exn": "The reference Hplus was not found in the current environment.", "type": "ref_not_found", "handled": true}]}, "chat": [], "original": "intros. intro H. destruct H. - exists nil. split; [|split]. + apply H1. + apply H0. + left. reflexivity. - destruct H as [l1 [Hlt [Hplus Heq]]]. exists (pX A n b q). split. + apply Hlt. + split. * apply mainu2a with (a1:=a) (a2:=b) (l1:=p) (l2:=l1) (l3:=l). apply Hplus. apply os. intro abs. apply H0. apply heq. split;[|easy]. subst. apply zeroP_plusTermr in Heq. destruct Heq. apply abs. * right. split;[|split]. apply H1. apply Hplus. reflexivity.", "succ": true}]