[{"history": {"proof": "intros Q p q Hred. induction Hred. intros Hr. qsimpl use: irreducible_eqp_com. qsimpl use: irreducible_eqp_com,red_minus_zero_reduce. qsimpl use: irreducible_eqp_com,red_minus_zero_reduce. apply A1_diff_A0. qsimpl use: irreducible_eqp_com,reduceplus_mults,red_minus_zero_reduce. qsimpl use: irreducible_eqp_com,reduce_eqp_com,reduceplus_mults,red_minus_zero_reduce. qsimpl use: reduce_eqp_com,reduce_mults_inv_lem,reduceplus_mults,irreducible_eqp_com,red_minus_zero_reduce. sfirstorder depth: 3.", "repairs": ["", "", "", "cannot_unify", "no_hypos", "cannot_unify", "ref_not_found", "cannot_apply_in", "cannot_unify", "cannot_apply_in", "hammer"], "exceptions": [{"ctx": ["intros Q p q Hred.", "induction Hred.", "intros Hr."], "tactic": "apply irreducible_eqp_com with (eqA_dec:=eqA_dec) (ltM_dec:=ltM_dec).", "exn": "In environment A : Set A0, A1 : A eqA : A -> A -> Prop plusA : A -> A -> A invA : A -> A minusA, multA : A -> A -> A divA : A -> forall b : A, ~ eqA b A0 -> A cs : CoefStructure A A0 A1 eqA plusA invA minusA multA divA eqA_dec : forall a b : A, {eqA a b} + {~ eqA a b} n : nat ltM : mon n -> mon n -> Prop ltM_dec : forall a b : mon n, {ltM a b} + {ltM b a} + {a = b} os : OrderStructure (mon n) (zero_mon n) ltM (mult_mon n) Q : list (poly A0 eqA ltM) p, q : list (Term A n) H : reduceplus A A0 A1 eqA invA minusA multA divA eqA_dec n ltM ltM_dec Q p q H0 : irreducible A A0 A1 eqA invA minusA multA divA eqA_dec n ltM ltM_dec Q q Hr : list (Term A n) Unable to unify \"list (Term A n)\" with \"reduce A A0 A1 eqA invA minusA multA divA eqA_dec n ltM ltM_dec Q q Hr\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros Q p q Hred.", "induction Hred.", "intros Hr.", "qsimpl use: irreducible_eqp_com."], "tactic": "apply red_minus_zero_reduce with (A:=A) (A0:=A0) (A1:=A1) (eqA:=eqA) (plusA:=plusA) (invA:=invA) (minusA:=minusA) (multA:=multA) (divA:=divA) (Q:=Q) (p:=p) in cs as [r1 [Hrp Hrq]].", "exn": "No such hypothesis: cs", "type": "no_hypos", "handled": true}, {"ctx": ["intros Q p q Hred.", "induction Hred.", "intros Hr.", "qsimpl use: irreducible_eqp_com.", "qsimpl use: irreducible_eqp_com,red_minus_zero_reduce."], "tactic": "intros contra.", "exn": "No product even after head-reduction.", "type": "no_product", "handled": true}, {"ctx": ["intros Q p q Hred.", "induction Hred.", "intros Hr.", "qsimpl use: irreducible_eqp_com.", "qsimpl use: irreducible_eqp_com,red_minus_zero_reduce."], "tactic": "apply H.", "exn": "In environment H4 : forall (A : Set) (A0 A1 : A) (eqA : A -> A -> Prop) (plusA : A -> A -> A) (invA : A -> A) (minusA multA : A -> A -> A) (divA : A -> forall b : A, (eqA b A0 -> False) -> A), CoefStructure A A0 A1 eqA plusA invA minusA multA divA -> forall (eqA_dec : forall a b : A, {eqA a b} + {eqA a b -> False}) (n : nat) (ltM : mon n -> mon n -> Prop) (ltM_dec : forall a b : mon n, {ltM a b} + {ltM b a} + {a = b}), OrderStructure (mon n) (zero_mon n) ltM (mult_mon n) -> forall (Q : list (poly A0 eqA ltM)) (p q : list (Term A n)), canonical A0 eqA ltM p -> canonical A0 eqA ltM q -> reduceplus A A0 A1 eqA invA minusA multA divA eqA_dec n ltM ltM_dec Q (minuspf A A0 A1 eqA invA minusA multA eqA_dec n ltM ltM_dec p q) (pO A n) -> exists r1 : list (Term A n), reduceplus A A0 A1 eqA invA minusA multA divA eqA_dec n ltM ltM_dec Q p r1 /\\\\ reduceplus A A0 A1 eqA invA minusA multA divA eqA_dec n ltM ltM_dec Q q r1 H3 : forall (A : Set) (A0 A1 : A) (eqA : A -> A -> Prop) (plusA : A -> A -> A) (invA : A -> A) (minusA multA : A -> A -> A) (divA : A -> forall b : A, (eqA b A0 -> False) -> A), CoefStructure A A0 A1 eqA plusA invA minusA multA divA -> forall (eqA_dec : forall a b : A, {eqA a b} + {eqA a b -> False}) (n : nat) (ltM : mon n -> mon n -> Prop) (ltM_dec : forall a b : mon n, {ltM a b} + {ltM b a} + {a = b}), OrderStructure (mon n) (zero_mon n) ltM (mult_mon n) -> forall (Q : list (poly A0 eqA ltM)) (p q : list (Term A n)), irreducible A A0 A1 eqA invA minusA multA divA eqA_dec n ltM ltM_dec Q p -> canonical A0 eqA ltM p -> eqP A eqA n p q -> irreducible A A0 A1 eqA invA minusA multA divA eqA_dec n ltM ltM_dec Q q A : Set A0, A1 : A eqA : A -> A -> Prop plusA : A -> A -> A invA : A -> A minusA, multA : A -> A -> A divA : A -> forall b : A, (eqA b A0 -> False) -> A eqA_dec : forall a b : A, {eqA a b} + {eqA a b -> False} n : nat ltM : mon n -> mon n -> Prop ltM_dec : forall a b : mon n, {ltM a b} + {ltM b a} + {a = b} Q : list (poly A0 eqA ltM) p, q : list (Term A n) H : reduceplus A A0 A1 eqA invA minusA multA divA eqA_dec n ltM ltM_dec Q p q H0 : irreducible A A0 A1 eqA invA minusA multA divA eqA_dec n ltM ltM_dec Q q Hr : list (Term A n) H2 : reduce A A0 A1 eqA invA minusA multA divA eqA_dec n ltM ltM_dec Q q Hr M1_min : forall x : mon n, ltM x (zero_mon n) -> False ltM_nonrefl : forall x : mon n, ltM x x -> False ltM_trans : transitive (mon n) ltM ltM_wf : well_founded ltM ltM_plusr : forall x y z : mon n, ltM x y -> ltM (mult_mon n x z) (mult_mon n y z) ltM_plusl : forall x y z : mon n, ltM x y -> ltM (mult_mon n z x) (mult_mon n z y) A1_diff_A0 : eqA A1 A0 -> False eqA_ref : reflexive A eqA eqA_sym : symmetric A eqA eqA_trans : transitive A eqA plusA_assoc : forall a b c : A, eqA (plusA a (plusA b c)) (plusA (plusA a b) c) plusA_com : forall a b : A, eqA (plusA a b) (plusA b a) plusA_eqA_comp : forall a b c d : A, eqA a c -> eqA b d -> eqA (plusA a b) (plusA c d) plusA_A0 : forall a : A, eqA a (plusA a A0) invA_plusA : forall a : A, eqA A0 (plusA a (invA a)) invA_eqA_comp : forall a b : A, eqA a b -> eqA (invA a) (invA b) minusA_def : forall a b : A, eqA (minusA a b) (plusA a (invA b)) multA_eqA_comp : forall a b c d : A, eqA a c -> eqA b d -> eqA (multA a b) (multA c d) multA_assoc : forall a b c : A, eqA (multA a (multA b c)) (multA (multA a b) c) multA_com : forall a b : A, eqA (multA a b) (multA b a) multA_dist_l : forall a b c : A, eqA (plusA (multA c a) (multA c b)) (multA c (plusA a b)) multA_A0_l : forall a : A, eqA (multA A0 a) A0 multA_A1_l : forall a : A, eqA (multA A1 a) a divA_rew : forall (a b : A) (nZ1 nZ2 : eqA b A0 -> False), divA a b nZ1 = divA a b nZ2 divA_is_multA : forall (a b : A) (nZb : eqA b A0 -> False), eqA a (multA (divA a b nZb) b) divA_eqA_comp : forall (a b c d : A) (nZb : eqA b A0 -> False) (nZd : eqA d A0 -> False), eqA a c -> eqA b d -> eqA (divA a b nZb) (divA c d nZd) divA_multA_comp_r : forall (a b c : A) (nZc : eqA c A0 -> False), eqA (divA (multA a b) c nZc) (multA (divA a c nZc) b) divA_invA_r : forall (a b : A) (nZb : eqA b A0 -> False) (nZib : eqA (invA b) A0 -> False), eqA (divA a (invA b) nZib) (invA (divA a b nZb)) Unable to unify \"reduceplus A A0 A1 eqA invA minusA multA divA eqA_dec n ltM ltM_dec Q p q\" with \"False\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros Q p q Hred.", "induction Hred.", "intros Hr.", "qsimpl use: irreducible_eqp_com.", "qsimpl use: irreducible_eqp_com,red_minus_zero_reduce.", "qsimpl use: irreducible_eqp_com,red_minus_zero_reduce."], "tactic": "rewrite contra.", "exn": "The reference contra was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros Q p q Hred.", "induction Hred.", "intros Hr.", "qsimpl use: irreducible_eqp_com.", "qsimpl use: irreducible_eqp_com,red_minus_zero_reduce.", "qsimpl use: irreducible_eqp_com,red_minus_zero_reduce."], "tactic": "reflexivity.", "exn": "Cannot find a relation to rewrite.", "type": "no_rewrite_relation", "handled": true}, {"ctx": ["intros Q p q Hred.", "induction Hred.", "intros Hr.", "qsimpl use: irreducible_eqp_com.", "qsimpl use: irreducible_eqp_com,red_minus_zero_reduce.", "qsimpl use: irreducible_eqp_com,red_minus_zero_reduce."], "tactic": "intros Hr.", "exn": "Hr is already used.", "type": "used_var", "handled": true}, {"ctx": ["intros Q p q Hred.", "induction Hred.", "intros Hr.", "qsimpl use: irreducible_eqp_com.", "qsimpl use: irreducible_eqp_com,red_minus_zero_reduce.", "qsimpl use: irreducible_eqp_com,red_minus_zero_reduce."], "tactic": "intros Hr'.", "exn": "No product even after head-reduction.", "type": "no_product", "handled": true}, {"ctx": ["intros Q p q Hred.", "induction Hred.", "intros Hr.", "qsimpl use: irreducible_eqp_com.", "qsimpl use: irreducible_eqp_com,red_minus_zero_reduce.", "qsimpl use: irreducible_eqp_com,red_minus_zero_reduce."], "tactic": "apply IHHred2.", "exn": "The reference IHHred2 was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros Q p q Hred.", "induction Hred.", "intros Hr.", "qsimpl use: irreducible_eqp_com.", "qsimpl use: irreducible_eqp_com,red_minus_zero_reduce.", "qsimpl use: irreducible_eqp_com,red_minus_zero_reduce.", "apply A1_diff_A0."], "tactic": "apply IHHred1 in Hr.", "exn": "The reference IHHred1 was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros Q p q Hred.", "induction Hred.", "intros Hr.", "qsimpl use: irreducible_eqp_com.", "qsimpl use: irreducible_eqp_com,red_minus_zero_reduce.", "qsimpl use: irreducible_eqp_com,red_minus_zero_reduce.", "apply A1_diff_A0."], "tactic": "apply reduceplus_mults in Hr.", "exn": "Unable to apply lemma of type \"forall (A : Set) (A0 A1 : A) (eqA : A -> A -> Prop) (plusA : A -> A -> A) (invA : A -> A) (minusA multA : A -> A -> A) (divA : A -> forall b : A, ~ eqA b A0 -> A), CoefStructure A A0 A1 eqA plusA invA minusA multA divA -> forall (eqA_dec : forall a b : A, {eqA a b} + {~ eqA a b}) (n : nat) (ltM : mon n -> mon n -> Prop) (ltM_dec : forall a b : mon n, {ltM a b} + {ltM b a} + {a = b}), OrderStructure (mon n) (zero_mon n) ltM (mult_mon n) -> forall (Q : list (poly A0 eqA ltM)) (a : Term A n) (p q : list (Term A n)), reduceplus A A0 A1 eqA invA minusA multA divA eqA_dec n ltM ltM_dec Q p q -> canonical A0 eqA ltM p -> ~ zeroP A0 eqA (n:=n) a -> reduceplus A A0 A1 eqA invA minusA multA divA eqA_dec n ltM ltM_dec Q (mults multA (n:=n) a p) (mults multA (n:=n) a q)\" on hypothesis of type \"list (Term A n)\".", "type": "cannot_apply_in", "handled": true}, {"ctx": ["intros Q p q Hred.", "induction Hred.", "intros Hr.", "qsimpl use: irreducible_eqp_com.", "qsimpl use: irreducible_eqp_com,red_minus_zero_reduce.", "qsimpl use: irreducible_eqp_com,red_minus_zero_reduce.", "apply A1_diff_A0.", "qsimpl use: irreducible_eqp_com,reduceplus_mults,red_minus_zero_reduce."], "tactic": "apply reduce_eqp_com with (eqA_dec:=eqA_dec) (ltM_dec:=ltM_dec).", "exn": "In environment H6 : forall (A : Set) (A0 A1 : A) (eqA : A -> A -> Prop) (plusA : A -> A -> A) (invA : A -> A) (minusA multA : A -> A -> A) (divA : A -> forall b : A, (eqA b A0 -> False) -> A), CoefStructure A A0 A1 eqA plusA invA minusA multA divA -> forall (eqA_dec : forall a b : A, {eqA a b} + {eqA a b -> False}) (n : nat) (ltM : mon n -> mon n -> Prop) (ltM_dec : forall a b : mon n, {ltM a b} + {ltM b a} + {a = b}), OrderStructure (mon n) (zero_mon n) ltM (mult_mon n) -> forall (Q : list (poly A0 eqA ltM)) (p q : list (Term A n)), canonical A0 eqA ltM p -> canonical A0 eqA ltM q -> reduceplus A A0 A1 eqA invA minusA multA divA eqA_dec n ltM ltM_dec Q (minuspf A A0 A1 eqA invA minusA multA eqA_dec n ltM ltM_dec p q) (pO A n) -> exists r1 : list (Term A n), reduceplus A A0 A1 eqA invA minusA multA divA eqA_dec n ltM ltM_dec Q p r1 /\\\\ reduceplus A A0 A1 eqA invA minusA multA divA eqA_dec n ltM ltM_dec Q q r1 H4 : forall (A : Set) (A0 A1 : A) (eqA : A -> A -> Prop) (plusA : A -> A -> A) (invA : A -> A) (minusA multA : A -> A -> A) (divA : A -> forall b : A, (eqA b A0 -> False) -> A), CoefStructure A A0 A1 eqA plusA invA minusA multA divA -> forall (eqA_dec : forall a b : A, {eqA a b} + {eqA a b -> False}) (n : nat) (ltM : mon n -> mon n -> Prop) (ltM_dec : forall a b : mon n, {ltM a b} + {ltM b a} + {a = b}), OrderStructure (mon n) (zero_mon n) ltM (mult_mon n) -> forall (Q : list (poly A0 eqA ltM)) (a : Term A n) (p q : list (Term A n)), reduceplus A A0 A1 eqA invA minusA multA divA eqA_dec n ltM ltM_dec Q p q -> canonical A0 eqA ltM p -> (zeroP A0 eqA (n:=n) a -> False) -> reduceplus A A0 A1 eqA invA minusA multA divA eqA_dec n ltM ltM_dec Q (mults multA (n:=n) a p) (mults multA (n:=n) a q) H3 : forall (A : Set) (A0 A1 : A) (eqA : A -> A -> Prop) (plusA : A -> A -> A) (invA : A -> A) (minusA multA : A -> A -> A) (divA : A -> forall b : A, (eqA b A0 -> False) -> A), CoefStructure A A0 A1 eqA plusA invA minusA multA divA -> forall (eqA_dec : forall a b : A, {eqA a b} + {eqA a b -> False}) (n : nat) (ltM : mon n -> mon n -> Prop) (ltM_dec : forall a b : mon n, {ltM a b} + {ltM b a} + {a = b}), OrderStructure (mon n) (zero_mon n) ltM (mult_mon n) -> forall (Q : list (poly A0 eqA ltM)) (p q : list (Term A n)), irreducible A A0 A1 eqA invA minusA multA divA eqA_dec n ltM ltM_dec Q p -> canonical A0 eqA ltM p -> eqP A eqA n p q -> irreducible A A0 A1 eqA invA minusA multA divA eqA_dec n ltM ltM_dec Q q A : Set A0, A1 : A eqA : A -> A -> Prop plusA : A -> A -> A invA : A -> A minusA, multA : A -> A -> A divA : A -> forall b : A, (eqA b A0 -> False) -> A eqA_dec : forall a b : A, {eqA a b} + {eqA a b -> False} n : nat ltM : mon n -> mon n -> Prop ltM_dec : forall a b : mon n, {ltM a b} + {ltM b a} + {a = b} Q : list (poly A0 eqA ltM) p, q : list (Term A n) H : reduceplus A A0 A1 eqA invA minusA multA divA eqA_dec n ltM ltM_dec Q p q H0 : irreducible A A0 A1 eqA invA minusA multA divA eqA_dec n ltM ltM_dec Q q Hr : list (Term A n) H2 : reduce A A0 A1 eqA invA minusA multA divA eqA_dec n ltM ltM_dec Q q Hr M1_min : forall x : mon n, ltM x (zero_mon n) -> False ltM_nonrefl : forall x : mon n, ltM x x -> False ltM_trans : transitive (mon n) ltM ltM_wf : well_founded ltM ltM_plusr : forall x y z : mon n, ltM x y -> ltM (mult_mon n x z) (mult_mon n y z) ltM_plusl : forall x y z : mon n, ltM x y -> ltM (mult_mon n z x) (mult_mon n z y) A1_diff_A0 : eqA A1 A0 -> False eqA_ref : reflexive A eqA eqA_sym : symmetric A eqA eqA_trans : transitive A eqA plusA_assoc : forall a b c : A, eqA (plusA a (plusA b c)) (plusA (plusA a b) c) plusA_com : forall a b : A, eqA (plusA a b) (plusA b a) plusA_eqA_comp : forall a b c d : A, eqA a c -> eqA b d -> eqA (plusA a b) (plusA c d) plusA_A0 : forall a : A, eqA a (plusA a A0) invA_plusA : forall a : A, eqA A0 (plusA a (invA a)) invA_eqA_comp : forall a b : A, eqA a b -> eqA (invA a) (invA b) minusA_def : forall a b : A, eqA (minusA a b) (plusA a (invA b)) multA_eqA_comp : forall a b c d : A, eqA a c -> eqA b d -> eqA (multA a b) (multA c d) multA_assoc : forall a b c : A, eqA (multA a (multA b c)) (multA (multA a b) c) multA_com : forall a b : A, eqA (multA a b) (multA b a) multA_dist_l : forall a b c : A, eqA (plusA (multA c a) (multA c b)) (multA c (plusA a b)) multA_A0_l : forall a : A, eqA (multA A0 a) A0 multA_A1_l : forall a : A, eqA (multA A1 a) a divA_rew : forall (a b : A) (nZ1 nZ2 : eqA b A0 -> False), divA a b nZ1 = divA a b nZ2 divA_is_multA : forall (a b : A) (nZb : eqA b A0 -> False), eqA a (multA (divA a b nZb) b) divA_eqA_comp : forall (a b c d : A) (nZb : eqA b A0 -> False) (nZd : eqA d A0 -> False), eqA a c -> eqA b d -> eqA (divA a b nZb) (divA c d nZd) divA_multA_comp_r : forall (a b c : A) (nZc : eqA c A0 -> False), eqA (divA (multA a b) c nZc) (multA (divA a c nZc) b) divA_invA_r : forall (a b : A) (nZb : eqA b A0 -> False) (nZib : eqA (invA b) A0 -> False), eqA (divA a (invA b) nZib) (invA (divA a b nZb)) Unable to unify \"reduce A ?M14692 ?M14693 eqA ?M14696 ?M14697 ?M14698 ?M14699 eqA_dec n ltM ltM_dec ?M14706 ?M14709 ?M14710\" with \"eqA A1 A0\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros Q p q Hred.", "induction Hred.", "intros Hr.", "qsimpl use: irreducible_eqp_com.", "qsimpl use: irreducible_eqp_com,red_minus_zero_reduce.", "qsimpl use: irreducible_eqp_com,red_minus_zero_reduce.", "apply A1_diff_A0.", "qsimpl use: irreducible_eqp_com,reduceplus_mults,red_minus_zero_reduce.", "qsimpl use: irreducible_eqp_com,reduce_eqp_com,reduceplus_mults,red_minus_zero_reduce."], "tactic": "apply reduce_mults_inv_lem in Hr.", "exn": "Unable to apply lemma of type \"forall (A : Set) (A0 A1 : A) (eqA : A -> A -> Prop) (plusA : A -> A -> A) (invA : A -> A) (minusA multA : A -> A -> A) (divA : A -> forall b : A, ~ eqA b A0 -> A), CoefStructure A A0 A1 eqA plusA invA minusA multA divA -> forall (eqA_dec : forall a b : A, {eqA a b} + {~ eqA a b}) (n : nat) (ltM : mon n -> mon n -> Prop) (ltM_dec : forall a b : mon n, {ltM a b} + {ltM b a} + {a = b}), OrderStructure (mon n) (zero_mon n) ltM (mult_mon n) -> forall (Q : list (poly A0 eqA ltM)) (p q : list (Term A n)), reduce A A0 A1 eqA invA minusA multA divA eqA_dec n ltM ltM_dec Q p q -> forall r : list (Term A n), canonical A0 eqA ltM r -> p = mults multA (n:=n) (invTerm invA (n:=n) (T1 A1 n)) r -> reduce A A0 A1 eqA invA minusA multA divA eqA_dec n ltM ltM_dec Q r (mults multA (n:=n) (invTerm invA (n:=n) (T1 A1 n)) q)\" on hypothesis of type \"list (Term A n)\".", "type": "cannot_apply_in", "handled": true}, {"ctx": ["intros Q p q Hred.", "induction Hred.", "intros Hr.", "qsimpl use: irreducible_eqp_com.", "qsimpl use: irreducible_eqp_com,red_minus_zero_reduce.", "qsimpl use: irreducible_eqp_com,red_minus_zero_reduce.", "apply A1_diff_A0.", "qsimpl use: irreducible_eqp_com,reduceplus_mults,red_minus_zero_reduce.", "qsimpl use: irreducible_eqp_com,reduce_eqp_com,reduceplus_mults,red_minus_zero_reduce.", "qsimpl use: reduce_eqp_com,reduce_mults_inv_lem,reduceplus_mults,irreducible_eqp_com,red_minus_zero_reduce."], "tactic": ["destruct Hr as [p1 [q1 [Hr1 [Hr2 Heq]]]].", ""], "exn": "Expects a disjunctive pattern with 2 branches.", "type": "num_branch", "handled": false}]}, "chat": [], "original": "intros Q p q Hred. induction Hred. - intros Hr. apply irreducible_eqp_com with (eqA_dec:=eqA_dec) (ltM_dec:=ltM_dec). + auto. + apply red_minus_zero_reduce with (A:=A) (A0:=A0) (A1:=A1) (eqA:=eqA) (plusA:=plusA) (invA:=invA) (minusA:=minusA) (multA:=multA) (divA:=divA) (Q:=Q) (p:=p) in cs as [r1 [Hrp Hrq]]. * auto. * intros contra. apply H. rewrite contra. reflexivity. - intros Hr. apply IHHred2. apply IHHred1 in Hr. apply reduceplus_mults in Hr. apply reduce_eqp_com with (eqA_dec:=eqA_dec) (ltM_dec:=ltM_dec). + auto. + auto. + auto. + apply reduce_mults_inv_lem in Hr. destruct Hr as [p1 [q1 [Hr1 [Hr2 Heq]]]]. apply reduce_eqp_com with (eqA_dec:=eqA_dec) (ltM_dec:=ltM_dec). * auto. * auto. * auto. * apply reduce_eqp_com with (eqA_dec:=eqA_dec) (ltM_dec:=ltM_dec). { apply Hr1. } { apply Hr2. } + reflexivity.", "succ": true}]