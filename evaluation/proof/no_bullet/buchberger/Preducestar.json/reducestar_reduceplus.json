[{"history": {"proof": "intros Q p q H. induction H. qsimpl use: reduce_imp_reduceplus.", "repairs": ["", "", "cannot_apply_in"], "exceptions": [{"ctx": ["intros Q p q H.", "induction H."], "tactic": "intros cs eqA_dec n ltM ltM_dec os.", "exn": "cs is already used.", "type": "used_var", "handled": true}, {"ctx": ["intros Q p q H.", "induction H."], "tactic": "intros cs' eqA_dec n ltM ltM_dec os.", "exn": "eqA_dec is already used.", "type": "used_var", "handled": true}, {"ctx": ["intros Q p q H.", "induction H."], "tactic": "intros cs' eqA_dec' n ltM ltM_dec os.", "exn": "n is already used.", "type": "used_var", "handled": true}, {"ctx": ["intros Q p q H.", "induction H."], "tactic": "intros cs' eqA_dec' n' ltM ltM_dec os.", "exn": "ltM is already used.", "type": "used_var", "handled": true}, {"ctx": ["intros Q p q H.", "induction H."], "tactic": "intros cs' eqA_dec' n' ltM' ltM_dec os.", "exn": "ltM_dec is already used.", "type": "used_var", "handled": true}, {"ctx": ["intros Q p q H.", "induction H."], "tactic": "intros cs' eqA_dec' n' ltM' ltM_dec' os.", "exn": "os is already used.", "type": "used_var", "handled": true}, {"ctx": ["intros Q p q H.", "induction H."], "tactic": "intros cs' eqA_dec' n' ltM' ltM_dec' os'.", "exn": "No product even after head-reduction.", "type": "no_product", "handled": true}, {"ctx": ["intros Q p q H.", "induction H."], "tactic": "apply reduce_imp_reduceplus with (A:=A) (A0:=A0) (A1:=A1) (eqA:=eqA) (plusA:=plusA) (invA:=invA) (minusA:=minusA) (multA:=multA) (divA:=divA) (eqA_dec:=eqA_dec) (n:=n) (ltM:=ltM) (ltM_dec:=ltM_dec) in H.", "exn": "Unable to apply lemma of type \"forall (A : Set) (A0 A1 : A) (eqA : A -> A -> Prop) (plusA : A -> A -> A) (invA : A -> A) (minusA multA : A -> A -> A) (divA : A -> forall b : A, ~ eqA b A0 -> A), CoefStructure A A0 A1 eqA plusA invA minusA multA divA -> forall (eqA_dec : forall a b : A, {eqA a b} + {~ eqA a b}) (n : nat) (ltM : mon n -> mon n -> Prop) (ltM_dec : forall a b : mon n, {ltM a b} + {ltM b a} + {a = b}) (Q : list (poly A0 eqA ltM)) (p q : list (Term A n)), reduce A A0 A1 eqA invA minusA multA divA eqA_dec n ltM ltM_dec Q p q -> reduceplus A A0 A1 eqA invA minusA multA divA eqA_dec n ltM ltM_dec Q p q\" on hypothesis of type \"reduceplus A A0 A1 eqA invA minusA multA divA eqA_dec n ltM ltM_dec Q p q\".", "type": "cannot_apply_in", "handled": true}, {"ctx": ["intros Q p q H.", "induction H.", "qsimpl use: reduce_imp_reduceplus."], "tactic": "apply H.", "exn": "No such goal.", "type": "no_goal", "handled": true}]}, "chat": [], "original": "intros Q p q H. induction H. - intros cs eqA_dec n ltM ltM_dec os. apply reduce_imp_reduceplus with (A:=A) (A0:=A0) (A1:=A1) (eqA:=eqA) (plusA:=plusA) (invA:=invA) (minusA:=minusA) (multA:=multA) (divA:=divA) (eqA_dec:=eqA_dec) (n:=n) (ltM:=ltM) (ltM_dec:=ltM_dec) in H. apply H. - intros cs eqA_dec n ltM ltM_dec os. apply reduceplus_ind with (A:=A) (A0:=A0) (A1:=A1) (eqA:=eqA) (invA:=invA) (minusA:=minusA) (multA:=multA) (divA:=divA) (eqA_dec:=eqA_dec) (n:=n) (ltM:=ltM) (ltM_dec:=ltM_dec) in H. apply H.", "succ": true}]