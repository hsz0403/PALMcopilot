[{"history": {"proof": "qsimpl time: 1 use: reduceplus. qsimpl time: 1 use: reduceplus. qsimpl time: 1 use: reduceplus,reduce_inv2. qsimpl time: 1 use: reduceplus,reduce_inv2. qsimpl time: 1 use: reduceplus,reduce_inv2. qsimpl time: 1 use: rep_plus_zero_reduce,reduceplus,reduce_inv2. qsimpl time: 1 use: rep_plus_zero_reduce,reduceplus,reduce_inv2. qsimpl time: 1 use: rep_plus_zero_reduce,reduceplus,reduce_inv2. qsimpl time: 1 use: rep_plus_zero_reduce,reduceplus,reduce_inv2. qsimpl time: 1 use: rep_plus_zero_reduce,reduceplus,reducestar0,reduce_inv2. qsimpl time: 1 use: rep_plus_zero_reduce,reduceplus,reducestar0,reduce_inv2. qsimpl time: 1 use: rep_plus_zero_reduce,reduceplus,reducestar0,reduce_inv2. qsimpl time: 1 use: rep_plus_zero_reduce,reduceplus,reducestar0,reduce_inv2. qsimpl time: 1 use: rep_plus_zero_reduce,reduceplus,reducestar0,reduce_inv2. qsimpl time: 1 use: rep_plus_zero_reduce,reduceplus,reducestar0,reduce_inv2. qsimpl time: 1 use: rep_plus_zero_reduce,reduceplus,reducestar0,reduce_inv2. qsimpl time: 1 use: rep_plus_zero_reduce,reduceplus,reducestar0,reduce_inv2. qsimpl time: 1 use: rep_plus_zero_reduce,reduceplus,reducestar0,reduce_inv2. qsimpl time: 1 use: rep_plus_zero_reduce,reduceplus,reducestar0,reduce_inv2.", "repairs": ["not_evaluable", "not_inductive_goal", "cannot_unify", "not_inductive_goal", "not_inductive_goal", "cannot_unify", "not_inductive_goal", "cannot_unify", "not_inductive_goal", "cannot_unify", "not_evaluable", "not_inductive_goal", "cannot_unify", "not_inductive_goal", "not_inductive_goal", "cannot_unify", "not_inductive_goal", "cannot_unify", "not_inductive_goal"], "exceptions": [{"ctx": ["intros Q p H.", "induction H.", "exists p.", "apply reducestar0."], "tactic": "unfold reduceplus.", "exn": "Cannot coerce reduceplus to an evaluable reference.", "type": "not_evaluable", "handled": true}, {"ctx": ["intros Q p H.", "induction H.", "exists p.", "apply reducestar0.", "qsimpl time: 1 use: reduceplus."], "tactic": "split.", "exn": "Not an inductive goal with 1 constructor.", "type": "not_inductive_goal", "handled": true}, {"ctx": ["intros Q p H.", "induction H.", "exists p.", "apply reducestar0.", "qsimpl time: 1 use: reduceplus.", "qsimpl time: 1 use: reduceplus."], "tactic": "apply reduce_inv2.", "exn": "In environment A : Set A0, A1 : A eqA : A -> A -> Prop plusA : A -> A -> A invA : A -> A minusA, multA : A -> A -> A divA : A -> forall b : A, (eqA b A0 -> False) -> A eqA_dec : forall a b : A, {eqA a b} + {eqA a b -> False} n : nat ltM : mon n -> mon n -> Prop ltM_dec : forall a b : mon n, {ltM a b} + {ltM b a} + {a = b} Q : list (poly A0 eqA ltM) p : list (Term A n) H : olist (A:=A) ltM p H0 : nZterm A0 eqA (n:=n) p M1_min : forall x : mon n, ltM x (zero_mon n) -> False ltM_nonrefl : forall x : mon n, ltM x x -> False ltM_trans : transitive (mon n) ltM ltM_wf : well_founded ltM ltM_plusr : forall x y z : mon n, ltM x y -> ltM (mult_mon n x z) (mult_mon n y z) ltM_plusl : forall x y z : mon n, ltM x y -> ltM (mult_mon n z x) (mult_mon n z y) A1_diff_A0 : eqA A1 A0 -> False eqA_ref : reflexive A eqA eqA_sym : symmetric A eqA eqA_trans : transitive A eqA plusA_assoc : forall a b c : A, eqA (plusA a (plusA b c)) (plusA (plusA a b) c) plusA_com : forall a b : A, eqA (plusA a b) (plusA b a) plusA_eqA_comp : forall a b c d : A, eqA a c -> eqA b d -> eqA (plusA a b) (plusA c d) plusA_A0 : forall a : A, eqA a (plusA a A0) invA_plusA : forall a : A, eqA A0 (plusA a (invA a)) invA_eqA_comp : forall a b : A, eqA a b -> eqA (invA a) (invA b) minusA_def : forall a b : A, eqA (minusA a b) (plusA a (invA b)) multA_eqA_comp : forall a b c d : A, eqA a c -> eqA b d -> eqA (multA a b) (multA c d) multA_assoc : forall a b c : A, eqA (multA a (multA b c)) (multA (multA a b) c) multA_com : forall a b : A, eqA (multA a b) (multA b a) multA_dist_l : forall a b c : A, eqA (plusA (multA c a) (multA c b)) (multA c (plusA a b)) multA_A0_l : forall a : A, eqA (multA A0 a) A0 multA_A1_l : forall a : A, eqA (multA A1 a) a divA_rew : forall (a b : A) (nZ1 nZ2 : eqA b A0 -> False), divA a b nZ1 = divA a b nZ2 divA_is_multA : forall (a b : A) (nZb : eqA b A0 -> False), eqA a (multA (divA a b nZb) b) divA_eqA_comp : forall (a b c d : A) (nZb : eqA b A0 -> False) (nZd : eqA d A0 -> False), eqA a c -> eqA b d -> eqA (divA a b nZb) (divA c d nZd) divA_multA_comp_r : forall (a b c : A) (nZc : eqA c A0 -> False), eqA (divA (multA a b) c nZc) (multA (divA a c nZc) b) divA_invA_r : forall (a b : A) (nZb : eqA b A0 -> False) (nZib : eqA (invA b) A0 -> False), eqA (divA a (invA b) nZib) (invA (divA a b nZb)) Unable to unify \"exists (x : list (Term ?M5780 ?M5791)) (a : Term ?M5780 ?M5791), ~ zeroP ?M5781 ?M5783 a /\\\\ inPolySet ?M5780 ?M5781 ?M5783 ?M5791 ?M5792 x ?M5795 /\\\\ canonical ?M5781 ?M5783 ?M5792 x /\\\\ eqP ?M5780 ?M5783 ?M5791 ?M5797 (minuspf ?M5780 ?M5781 ?M5782 ?M5783 ?M5785 ?M5786 ?M5787 ?M5790 ?M5791 ?M5792 ?M5793 ?M5796 (mults ?M5787 a x))\" with \"forall q : list (Term A n), ~ reduce A A0 A1 eqA invA minusA multA divA eqA_dec n ltM ltM_dec Q p q\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros Q p H.", "induction H.", "exists p.", "apply reducestar0.", "qsimpl time: 1 use: reduceplus.", "qsimpl time: 1 use: reduceplus.", "qsimpl time: 1 use: reduceplus,reduce_inv2."], "tactic": "apply cs.", "exn": "The reference cs was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros Q p H.", "induction H.", "exists p.", "apply reducestar0.", "qsimpl time: 1 use: reduceplus.", "qsimpl time: 1 use: reduceplus.", "qsimpl time: 1 use: reduceplus,reduce_inv2.", "apply rev_ind."], "tactic": "exists p.", "exn": "Not an inductive goal with 1 constructor.", "type": "not_inductive_goal", "handled": true}, {"ctx": ["intros Q p H.", "induction H.", "exists p.", "apply reducestar0.", "qsimpl time: 1 use: reduceplus.", "qsimpl time: 1 use: reduceplus.", "qsimpl time: 1 use: reduceplus,reduce_inv2.", "apply rev_ind.", "qsimpl time: 1 use: reduceplus,reduce_inv2.", "unfold irreducible."], "tactic": "split.", "exn": "Not an inductive goal with 1 constructor.", "type": "not_inductive_goal", "handled": true}, {"ctx": ["intros Q p H.", "induction H.", "exists p.", "apply reducestar0.", "qsimpl time: 1 use: reduceplus.", "qsimpl time: 1 use: reduceplus.", "qsimpl time: 1 use: reduceplus,reduce_inv2.", "apply rev_ind.", "qsimpl time: 1 use: reduceplus,reduce_inv2.", "unfold irreducible.", "qsimpl time: 1 use: reduceplus,reduce_inv2."], "tactic": "apply rep_plus_zero_reduce.", "exn": "In environment H2 : forall (A : Set) (A0 A1 : A) (eqA : A -> A -> Prop) (plusA : A -> A -> A) (invA : A -> A) (minusA multA : A -> A -> A) (divA : A -> forall b : A, (eqA b A0 -> False) -> A), CoefStructure A A0 A1 eqA plusA invA minusA multA divA -> forall (eqA_dec : forall a b : A, {eqA a b} + {eqA a b -> False}) (n : nat) (ltM : mon n -> mon n -> Prop) (ltM_dec : forall a b : mon n, {ltM a b} + {ltM b a} + {a = b}), OrderStructure (mon n) (zero_mon n) ltM (mult_mon n) -> forall (Q : list (poly A0 eqA ltM)) (p q : list (Term A n)), reduce A A0 A1 eqA invA minusA multA divA eqA_dec n ltM ltM_dec Q p q -> canonical A0 eqA ltM p -> exists (x : list (Term A n)) (a : Term A n), (zeroP A0 eqA (n:=n) a -> False) /\\\\ inPolySet A A0 eqA n ltM x Q /\\\\ canonical A0 eqA ltM x /\\\\ eqP A eqA n q (minuspf A A0 A1 eqA invA minusA multA eqA_dec n ltM ltM_dec p (mults multA (n:=n) a x)) A : Set A0, A1 : A eqA : A -> A -> Prop plusA : A -> A -> A invA : A -> A minusA, multA : A -> A -> A divA : A -> forall b : A, (eqA b A0 -> False) -> A eqA_dec : forall a b : A, {eqA a b} + {eqA a b -> False} n : nat ltM : mon n -> mon n -> Prop ltM_dec : forall a b : mon n, {ltM a b} + {ltM b a} + {a = b} Q : list (poly A0 eqA ltM) p : list (Term A n) H : olist (A:=A) ltM p H0 : nZterm A0 eqA (n:=n) p M1_min : forall x : mon n, ltM x (zero_mon n) -> False ltM_nonrefl : forall x : mon n, ltM x x -> False ltM_trans : transitive (mon n) ltM ltM_wf : well_founded ltM ltM_plusr : forall x y z : mon n, ltM x y -> ltM (mult_mon n x z) (mult_mon n y z) ltM_plusl : forall x y z : mon n, ltM x y -> ltM (mult_mon n z x) (mult_mon n z y) A1_diff_A0 : eqA A1 A0 -> False eqA_ref : reflexive A eqA eqA_sym : symmetric A eqA eqA_trans : transitive A eqA plusA_assoc : forall a b c : A, eqA (plusA a (plusA b c)) (plusA (plusA a b) c) plusA_com : forall a b : A, eqA (plusA a b) (plusA b a) plusA_eqA_comp : forall a b c d : A, eqA a c -> eqA b d -> eqA (plusA a b) (plusA c d) plusA_A0 : forall a : A, eqA a (plusA a A0) invA_plusA : forall a : A, eqA A0 (plusA a (invA a)) invA_eqA_comp : forall a b : A, eqA a b -> eqA (invA a) (invA b) minusA_def : forall a b : A, eqA (minusA a b) (plusA a (invA b)) multA_eqA_comp : forall a b c d : A, eqA a c -> eqA b d -> eqA (multA a b) (multA c d) multA_assoc : forall a b c : A, eqA (multA a (multA b c)) (multA (multA a b) c) multA_com : forall a b : A, eqA (multA a b) (multA b a) multA_dist_l : forall a b c : A, eqA (plusA (multA c a) (multA c b)) (multA c (plusA a b)) multA_A0_l : forall a : A, eqA (multA A0 a) A0 multA_A1_l : forall a : A, eqA (multA A1 a) a divA_rew : forall (a b : A) (nZ1 nZ2 : eqA b A0 -> False), divA a b nZ1 = divA a b nZ2 divA_is_multA : forall (a b : A) (nZb : eqA b A0 -> False), eqA a (multA (divA a b nZb) b) divA_eqA_comp : forall (a b c d : A) (nZb : eqA b A0 -> False) (nZd : eqA d A0 -> False), eqA a c -> eqA b d -> eqA (divA a b nZb) (divA c d nZd) divA_multA_comp_r : forall (a b c : A) (nZc : eqA c A0 -> False), eqA (divA (multA a b) c nZc) (multA (divA a c nZc) b) divA_invA_r : forall (a b : A) (nZb : eqA b A0 -> False) (nZib : eqA (invA b) A0 -> False), eqA (divA a (invA b) nZib) (invA (divA a b nZb)) x : Term A n l : list (Term A n) H3 : forall q : list (Term A n), reduce A A0 A1 eqA invA minusA multA divA eqA_dec n ltM ltM_dec Q l q -> False q : list (Term A n) H4 : reduce A A0 A1 eqA invA minusA multA divA eqA_dec n ltM ltM_dec Q (l ++ x :: nil) q Unable to unify \"exists r1 : list (Term ?M13003 ?M13014), reduceplus ?M13003 ?M13004 ?M13005 ?M13006 ?M13008 ?M13009 ?M13010 ?M13011 ?M13013 ?M13014 ?M13015 ?M13016 ?M13018 ?M13023 r1 /\\\\ reduceplus ?M13003 ?M13004 ?M13005 ?M13006 ?M13008 ?M13009 ?M13010 ?M13011 ?M13013 ?M13014 ?M13015 ?M13016 ?M13018 ?M13024 (mults ?M13010 (invTerm ?M13008 (T1 ?M13005 ?M13014)) r1)\" with \"False\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros Q p H.", "induction H.", "exists p.", "apply reducestar0.", "qsimpl time: 1 use: reduceplus.", "qsimpl time: 1 use: reduceplus.", "qsimpl time: 1 use: reduceplus,reduce_inv2.", "apply rev_ind.", "qsimpl time: 1 use: reduceplus,reduce_inv2.", "unfold irreducible.", "qsimpl time: 1 use: reduceplus,reduce_inv2.", "qsimpl time: 1 use: rep_plus_zero_reduce,reduceplus,reduce_inv2."], "tactic": "apply cs.", "exn": "The reference cs was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros Q p H.", "induction H.", "exists p.", "apply reducestar0.", "qsimpl time: 1 use: reduceplus.", "qsimpl time: 1 use: reduceplus.", "qsimpl time: 1 use: reduceplus,reduce_inv2.", "apply rev_ind.", "qsimpl time: 1 use: reduceplus,reduce_inv2.", "unfold irreducible.", "qsimpl time: 1 use: reduceplus,reduce_inv2.", "qsimpl time: 1 use: rep_plus_zero_reduce,reduceplus,reduce_inv2."], "tactic": "exists r1.", "exn": "The reference r1 was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros Q p H.", "induction H.", "exists p.", "apply reducestar0.", "qsimpl time: 1 use: reduceplus.", "qsimpl time: 1 use: reduceplus.", "qsimpl time: 1 use: reduceplus,reduce_inv2.", "apply rev_ind.", "qsimpl time: 1 use: reduceplus,reduce_inv2.", "unfold irreducible.", "qsimpl time: 1 use: reduceplus,reduce_inv2.", "qsimpl time: 1 use: rep_plus_zero_reduce,reduceplus,reduce_inv2."], "tactic": "split.", "exn": "Not an inductive goal with 1 constructor.", "type": "not_inductive_goal", "handled": true}, {"ctx": ["intros Q p H.", "induction H.", "exists p.", "apply reducestar0.", "qsimpl time: 1 use: reduceplus.", "qsimpl time: 1 use: reduceplus.", "qsimpl time: 1 use: reduceplus,reduce_inv2.", "apply rev_ind.", "qsimpl time: 1 use: reduceplus,reduce_inv2.", "unfold irreducible.", "qsimpl time: 1 use: reduceplus,reduce_inv2.", "qsimpl time: 1 use: rep_plus_zero_reduce,reduceplus,reduce_inv2.", "qsimpl time: 1 use: rep_plus_zero_reduce,reduceplus,reduce_inv2."], "tactic": "apply reduce_inv2.", "exn": "In environment H6 : forall (A : Set) (A0 A1 : A) (eqA : A -> A -> Prop) (plusA : A -> A -> A) (invA : A -> A) (minusA multA : A -> A -> A) (divA : A -> forall b : A, (eqA b A0 -> False) -> A), CoefStructure A A0 A1 eqA plusA invA minusA multA divA -> forall (eqA_dec : forall a b : A, {eqA a b} + {eqA a b -> False}) (n : nat) (ltM : mon n -> mon n -> Prop) (ltM_dec : forall a b : mon n, {ltM a b} + {ltM b a} + {a = b}), OrderStructure (mon n) (zero_mon n) ltM (mult_mon n) -> forall (Q : list (poly A0 eqA ltM)) (p q : list (Term A n)), reduce A A0 A1 eqA invA minusA multA divA eqA_dec n ltM ltM_dec Q p q -> canonical A0 eqA ltM p -> exists (x : list (Term A n)) (a : Term A n), (zeroP A0 eqA (n:=n) a -> False) /\\\\ inPolySet A A0 eqA n ltM x Q /\\\\ canonical A0 eqA ltM x /\\\\ eqP A eqA n q (minuspf A A0 A1 eqA invA minusA multA eqA_dec n ltM ltM_dec p (mults multA (n:=n) a x)) H2 : forall (A : Set) (A0 A1 : A) (eqA : A -> A -> Prop) (plusA : A -> A -> A) (invA : A -> A) (minusA multA : A -> A -> A) (divA : A -> forall b : A, (eqA b A0 -> False) -> A), CoefStructure A A0 A1 eqA plusA invA minusA multA divA -> forall (eqA_dec : forall a b : A, {eqA a b} + {eqA a b -> False}) (n : nat) (ltM : mon n -> mon n -> Prop) (ltM_dec : forall a b : mon n, {ltM a b} + {ltM b a} + {a = b}), OrderStructure (mon n) (zero_mon n) ltM (mult_mon n) -> forall (Q : list (poly A0 eqA ltM)) (s t : list (Term A n)), reduceplus A A0 A1 eqA invA minusA multA divA eqA_dec n ltM ltM_dec Q s t -> canonical A0 eqA ltM s -> forall p q : list (Term A n), eqP A eqA n s (pluspf A0 (eqA:=eqA) plusA eqA_dec (ltM:=ltM) ltM_dec p q) -> canonical A0 eqA ltM p -> canonical A0 eqA ltM q -> eqP A eqA n t (pO A n) -> exists r1 : list (Term A n), reduceplus A A0 A1 eqA invA minusA multA divA eqA_dec n ltM ltM_dec Q p r1 /\\\\ reduceplus A A0 A1 eqA invA minusA multA divA eqA_dec n ltM ltM_dec Q q (mults multA (n:=n) (invA A1, M1 n) r1) A : Set A0, A1 : A eqA : A -> A -> Prop plusA : A -> A -> A invA : A -> A minusA, multA : A -> A -> A divA : A -> forall b : A, (eqA b A0 -> False) -> A eqA_dec : forall a b : A, {eqA a b} + {eqA a b -> False} n : nat ltM : mon n -> mon n -> Prop ltM_dec : forall a b : mon n, {ltM a b} + {ltM b a} + {a = b} Q : list (poly A0 eqA ltM) p : list (Term A n) H : olist (A:=A) ltM p H0 : nZterm A0 eqA (n:=n) p M1_min : forall x : mon n, ltM x (zero_mon n) -> False ltM_nonrefl : forall x : mon n, ltM x x -> False ltM_trans : transitive (mon n) ltM ltM_wf : well_founded ltM ltM_plusr : forall x y z : mon n, ltM x y -> ltM (mult_mon n x z) (mult_mon n y z) ltM_plusl : forall x y z : mon n, ltM x y -> ltM (mult_mon n z x) (mult_mon n z y) A1_diff_A0 : eqA A1 A0 -> False eqA_ref : reflexive A eqA eqA_sym : symmetric A eqA eqA_trans : transitive A eqA plusA_assoc : forall a b c : A, eqA (plusA a (plusA b c)) (plusA (plusA a b) c) plusA_com : forall a b : A, eqA (plusA a b) (plusA b a) plusA_eqA_comp : forall a b c d : A, eqA a c -> eqA b d -> eqA (plusA a b) (plusA c d) plusA_A0 : forall a : A, eqA a (plusA a A0) invA_plusA : forall a : A, eqA A0 (plusA a (invA a)) invA_eqA_comp : forall a b : A, eqA a b -> eqA (invA a) (invA b) minusA_def : forall a b : A, eqA (minusA a b) (plusA a (invA b)) multA_eqA_comp : forall a b c d : A, eqA a c -> eqA b d -> eqA (multA a b) (multA c d) multA_assoc : forall a b c : A, eqA (multA a (multA b c)) (multA (multA a b) c) multA_com : forall a b : A, eqA (multA a b) (multA b a) multA_dist_l : forall a b c : A, eqA (plusA (multA c a) (multA c b)) (multA c (plusA a b)) multA_A0_l : forall a : A, eqA (multA A0 a) A0 multA_A1_l : forall a : A, eqA (multA A1 a) a divA_rew : forall (a b : A) (nZ1 nZ2 : eqA b A0 -> False), divA a b nZ1 = divA a b nZ2 divA_is_multA : forall (a b : A) (nZb : eqA b A0 -> False), eqA a (multA (divA a b nZb) b) divA_eqA_comp : forall (a b c d : A) (nZb : eqA b A0 -> False) (nZd : eqA d A0 -> False), eqA a c -> eqA b d -> eqA (divA a b nZb) (divA c d nZd) divA_multA_comp_r : forall (a b c : A) (nZc : eqA c A0 -> False), eqA (divA (multA a b) c nZc) (multA (divA a c nZc) b) divA_invA_r : forall (a b : A) (nZb : eqA b A0 -> False) (nZib : eqA (invA b) A0 -> False), eqA (divA a (invA b) nZib) (invA (divA a b nZb)) x : Term A n l : list (Term A n) H3 : forall q : list (Term A n), reduce A A0 A1 eqA invA minusA multA divA eqA_dec n ltM ltM_dec Q l q -> False q : list (Term A n) H4 : reduce A A0 A1 eqA invA minusA multA divA eqA_dec n ltM ltM_dec Q (l ++ x :: nil) q Unable to unify \"exists (x : list (Term ?M18745 ?M18756)) (a : Term ?M18745 ?M18756), ~ zeroP ?M18746 ?M18748 a /\\\\ inPolySet ?M18745 ?M18746 ?M18748 ?M18756 ?M18757 x ?M18760 /\\\\ canonical ?M18746 ?M18748 ?M18757 x /\\\\ eqP ?M18745 ?M18748 ?M18756 ?M18762 (minuspf ?M18745 ?M18746 ?M18747 ?M18748 ?M18750 ?M18751 ?M18752 ?M18755 ?M18756 ?M18757 ?M18758 ?M18761 (mults ?M18752 a x))\" with \"False\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros Q p H.", "induction H.", "exists p.", "apply reducestar0.", "qsimpl time: 1 use: reduceplus.", "qsimpl time: 1 use: reduceplus.", "qsimpl time: 1 use: reduceplus,reduce_inv2.", "apply rev_ind.", "qsimpl time: 1 use: reduceplus,reduce_inv2.", "unfold irreducible.", "qsimpl time: 1 use: reduceplus,reduce_inv2.", "qsimpl time: 1 use: rep_plus_zero_reduce,reduceplus,reduce_inv2.", "qsimpl time: 1 use: rep_plus_zero_reduce,reduceplus,reduce_inv2.", "qsimpl time: 1 use: rep_plus_zero_reduce,reduceplus,reduce_inv2."], "tactic": "apply cs.", "exn": "The reference cs was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros Q p H.", "induction H.", "exists p.", "apply reducestar0.", "qsimpl time: 1 use: reduceplus.", "qsimpl time: 1 use: reduceplus.", "qsimpl time: 1 use: reduceplus,reduce_inv2.", "apply rev_ind.", "qsimpl time: 1 use: reduceplus,reduce_inv2.", "unfold irreducible.", "qsimpl time: 1 use: reduceplus,reduce_inv2.", "qsimpl time: 1 use: rep_plus_zero_reduce,reduceplus,reduce_inv2.", "qsimpl time: 1 use: rep_plus_zero_reduce,reduceplus,reduce_inv2.", "qsimpl time: 1 use: rep_plus_zero_reduce,reduceplus,reduce_inv2."], "tactic": "exists q.", "exn": "Not an inductive goal with 1 constructor.", "type": "not_inductive_goal", "handled": true}, {"ctx": ["intros Q p H.", "induction H.", "exists p.", "apply reducestar0.", "qsimpl time: 1 use: reduceplus.", "qsimpl time: 1 use: reduceplus.", "qsimpl time: 1 use: reduceplus,reduce_inv2.", "apply rev_ind.", "qsimpl time: 1 use: reduceplus,reduce_inv2.", "unfold irreducible.", "qsimpl time: 1 use: reduceplus,reduce_inv2.", "qsimpl time: 1 use: rep_plus_zero_reduce,reduceplus,reduce_inv2.", "qsimpl time: 1 use: rep_plus_zero_reduce,reduceplus,reduce_inv2.", "qsimpl time: 1 use: rep_plus_zero_reduce,reduceplus,reduce_inv2.", "qsimpl time: 1 use: rep_plus_zero_reduce,reduceplus,reduce_inv2."], "tactic": "destruct IHcanonical as [t Ht].", "exn": "The reference IHcanonical was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros Q p H.", "induction H.", "exists p.", "apply reducestar0.", "qsimpl time: 1 use: reduceplus.", "qsimpl time: 1 use: reduceplus.", "qsimpl time: 1 use: reduceplus,reduce_inv2.", "apply rev_ind.", "qsimpl time: 1 use: reduceplus,reduce_inv2.", "unfold irreducible.", "qsimpl time: 1 use: reduceplus,reduce_inv2.", "qsimpl time: 1 use: rep_plus_zero_reduce,reduceplus,reduce_inv2.", "qsimpl time: 1 use: rep_plus_zero_reduce,reduceplus,reduce_inv2.", "qsimpl time: 1 use: rep_plus_zero_reduce,reduceplus,reduce_inv2.", "qsimpl time: 1 use: rep_plus_zero_reduce,reduceplus,reduce_inv2."], "tactic": "destruct Ht as [Ht1 Ht2].", "exn": "The reference Ht was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros Q p H.", "induction H.", "exists p.", "apply reducestar0.", "qsimpl time: 1 use: reduceplus.", "qsimpl time: 1 use: reduceplus.", "qsimpl time: 1 use: reduceplus,reduce_inv2.", "apply rev_ind.", "qsimpl time: 1 use: reduceplus,reduce_inv2.", "unfold irreducible.", "qsimpl time: 1 use: reduceplus,reduce_inv2.", "qsimpl time: 1 use: rep_plus_zero_reduce,reduceplus,reduce_inv2.", "qsimpl time: 1 use: rep_plus_zero_reduce,reduceplus,reduce_inv2.", "qsimpl time: 1 use: rep_plus_zero_reduce,reduceplus,reduce_inv2.", "qsimpl time: 1 use: rep_plus_zero_reduce,reduceplus,reduce_inv2."], "tactic": "exists t.", "exn": "The reference t was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros Q p H.", "induction H.", "exists p.", "apply reducestar0.", "qsimpl time: 1 use: reduceplus.", "qsimpl time: 1 use: reduceplus.", "qsimpl time: 1 use: reduceplus,reduce_inv2.", "apply rev_ind.", "qsimpl time: 1 use: reduceplus,reduce_inv2.", "unfold irreducible.", "qsimpl time: 1 use: reduceplus,reduce_inv2.", "qsimpl time: 1 use: rep_plus_zero_reduce,reduceplus,reduce_inv2.", "qsimpl time: 1 use: rep_plus_zero_reduce,reduceplus,reduce_inv2.", "qsimpl time: 1 use: rep_plus_zero_reduce,reduceplus,reduce_inv2.", "qsimpl time: 1 use: rep_plus_zero_reduce,reduceplus,reduce_inv2."], "tactic": "apply reducestar0.", "exn": "In environment H6 : forall (A : Set) (A0 A1 : A) (eqA : A -> A -> Prop) (plusA : A -> A -> A) (invA : A -> A) (minusA multA : A -> A -> A) (divA : A -> forall b : A, (eqA b A0 -> False) -> A), CoefStructure A A0 A1 eqA plusA invA minusA multA divA -> forall (eqA_dec : forall a b : A, {eqA a b} + {eqA a b -> False}) (n : nat) (ltM : mon n -> mon n -> Prop) (ltM_dec : forall a b : mon n, {ltM a b} + {ltM b a} + {a = b}), OrderStructure (mon n) (zero_mon n) ltM (mult_mon n) -> forall (Q : list (poly A0 eqA ltM)) (p q : list (Term A n)), reduce A A0 A1 eqA invA minusA multA divA eqA_dec n ltM ltM_dec Q p q -> canonical A0 eqA ltM p -> exists (x : list (Term A n)) (a : Term A n), (zeroP A0 eqA (n:=n) a -> False) /\\\\ inPolySet A A0 eqA n ltM x Q /\\\\ canonical A0 eqA ltM x /\\\\ eqP A eqA n q (minuspf A A0 A1 eqA invA minusA multA eqA_dec n ltM ltM_dec p (mults multA (n:=n) a x)) H2 : forall (A : Set) (A0 A1 : A) (eqA : A -> A -> Prop) (plusA : A -> A -> A) (invA : A -> A) (minusA multA : A -> A -> A) (divA : A -> forall b : A, (eqA b A0 -> False) -> A), CoefStructure A A0 A1 eqA plusA invA minusA multA divA -> forall (eqA_dec : forall a b : A, {eqA a b} + {eqA a b -> False}) (n : nat) (ltM : mon n -> mon n -> Prop) (ltM_dec : forall a b : mon n, {ltM a b} + {ltM b a} + {a = b}), OrderStructure (mon n) (zero_mon n) ltM (mult_mon n) -> forall (Q : list (poly A0 eqA ltM)) (s t : list (Term A n)), reduceplus A A0 A1 eqA invA minusA multA divA eqA_dec n ltM ltM_dec Q s t -> canonical A0 eqA ltM s -> forall p q : list (Term A n), eqP A eqA n s (pluspf A0 (eqA:=eqA) plusA eqA_dec (ltM:=ltM) ltM_dec p q) -> canonical A0 eqA ltM p -> canonical A0 eqA ltM q -> eqP A eqA n t (pO A n) -> exists r1 : list (Term A n), reduceplus A A0 A1 eqA invA minusA multA divA eqA_dec n ltM ltM_dec Q p r1 /\\\\ reduceplus A A0 A1 eqA invA minusA multA divA eqA_dec n ltM ltM_dec Q q (mults multA (n:=n) (invA A1, M1 n) r1) A : Set A0, A1 : A eqA : A -> A -> Prop plusA : A -> A -> A invA : A -> A minusA, multA : A -> A -> A divA : A -> forall b : A, (eqA b A0 -> False) -> A eqA_dec : forall a b : A, {eqA a b} + {eqA a b -> False} n : nat ltM : mon n -> mon n -> Prop ltM_dec : forall a b : mon n, {ltM a b} + {ltM b a} + {a = b} Q : list (poly A0 eqA ltM) p : list (Term A n) H : olist (A:=A) ltM p H0 : nZterm A0 eqA (n:=n) p M1_min : forall x : mon n, ltM x (zero_mon n) -> False ltM_nonrefl : forall x : mon n, ltM x x -> False ltM_trans : transitive (mon n) ltM ltM_wf : well_founded ltM ltM_plusr : forall x y z : mon n, ltM x y -> ltM (mult_mon n x z) (mult_mon n y z) ltM_plusl : forall x y z : mon n, ltM x y -> ltM (mult_mon n z x) (mult_mon n z y) A1_diff_A0 : eqA A1 A0 -> False eqA_ref : reflexive A eqA eqA_sym : symmetric A eqA eqA_trans : transitive A eqA plusA_assoc : forall a b c : A, eqA (plusA a (plusA b c)) (plusA (plusA a b) c) plusA_com : forall a b : A, eqA (plusA a b) (plusA b a) plusA_eqA_comp : forall a b c d : A, eqA a c -> eqA b d -> eqA (plusA a b) (plusA c d) plusA_A0 : forall a : A, eqA a (plusA a A0) invA_plusA : forall a : A, eqA A0 (plusA a (invA a)) invA_eqA_comp : forall a b : A, eqA a b -> eqA (invA a) (invA b) minusA_def : forall a b : A, eqA (minusA a b) (plusA a (invA b)) multA_eqA_comp : forall a b c d : A, eqA a c -> eqA b d -> eqA (multA a b) (multA c d) multA_assoc : forall a b c : A, eqA (multA a (multA b c)) (multA (multA a b) c) multA_com : forall a b : A, eqA (multA a b) (multA b a) multA_dist_l : forall a b c : A, eqA (plusA (multA c a) (multA c b)) (multA c (plusA a b)) multA_A0_l : forall a : A, eqA (multA A0 a) A0 multA_A1_l : forall a : A, eqA (multA A1 a) a divA_rew : forall (a b : A) (nZ1 nZ2 : eqA b A0 -> False), divA a b nZ1 = divA a b nZ2 divA_is_multA : forall (a b : A) (nZb : eqA b A0 -> False), eqA a (multA (divA a b nZb) b) divA_eqA_comp : forall (a b c d : A) (nZb : eqA b A0 -> False) (nZd : eqA d A0 -> False), eqA a c -> eqA b d -> eqA (divA a b nZb) (divA c d nZd) divA_multA_comp_r : forall (a b c : A) (nZc : eqA c A0 -> False), eqA (divA (multA a b) c nZc) (multA (divA a c nZc) b) divA_invA_r : forall (a b : A) (nZb : eqA b A0 -> False) (nZib : eqA (invA b) A0 -> False), eqA (divA a (invA b) nZib) (invA (divA a b nZb)) x : Term A n l : list (Term A n) H3 : forall q : list (Term A n), reduce A A0 A1 eqA invA minusA multA divA eqA_dec n ltM ltM_dec Q l q -> False q : list (Term A n) H4 : reduce A A0 A1 eqA invA minusA multA divA eqA_dec n ltM ltM_dec Q (l ++ x :: nil) q Unable to unify \"reducestar ?M24499 ?M24500 ?M24501\" with \"False\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros Q p H.", "induction H.", "exists p.", "apply reducestar0.", "qsimpl time: 1 use: reduceplus.", "qsimpl time: 1 use: reduceplus.", "qsimpl time: 1 use: reduceplus,reduce_inv2.", "apply rev_ind.", "qsimpl time: 1 use: reduceplus,reduce_inv2.", "unfold irreducible.", "qsimpl time: 1 use: reduceplus,reduce_inv2.", "qsimpl time: 1 use: rep_plus_zero_reduce,reduceplus,reduce_inv2.", "qsimpl time: 1 use: rep_plus_zero_reduce,reduceplus,reduce_inv2.", "qsimpl time: 1 use: rep_plus_zero_reduce,reduceplus,reduce_inv2.", "qsimpl time: 1 use: rep_plus_zero_reduce,reduceplus,reduce_inv2.", "qsimpl time: 1 use: rep_plus_zero_reduce,reduceplus,reducestar0,reduce_inv2."], "tactic": "unfold reduceplus.", "exn": "Cannot coerce reduceplus to an evaluable reference.", "type": "not_evaluable", "handled": true}, {"ctx": ["intros Q p H.", "induction H.", "exists p.", "apply reducestar0.", "qsimpl time: 1 use: reduceplus.", "qsimpl time: 1 use: reduceplus.", "qsimpl time: 1 use: reduceplus,reduce_inv2.", "apply rev_ind.", "qsimpl time: 1 use: reduceplus,reduce_inv2.", "unfold irreducible.", "qsimpl time: 1 use: reduceplus,reduce_inv2.", "qsimpl time: 1 use: rep_plus_zero_reduce,reduceplus,reduce_inv2.", "qsimpl time: 1 use: rep_plus_zero_reduce,reduceplus,reduce_inv2.", "qsimpl time: 1 use: rep_plus_zero_reduce,reduceplus,reduce_inv2.", "qsimpl time: 1 use: rep_plus_zero_reduce,reduceplus,reduce_inv2.", "qsimpl time: 1 use: rep_plus_zero_reduce,reduceplus,reducestar0,reduce_inv2.", "qsimpl time: 1 use: rep_plus_zero_reduce,reduceplus,reducestar0,reduce_inv2."], "tactic": "split.", "exn": "Not an inductive goal with 1 constructor.", "type": "not_inductive_goal", "handled": true}, {"ctx": ["intros Q p H.", "induction H.", "exists p.", "apply reducestar0.", "qsimpl time: 1 use: reduceplus.", "qsimpl time: 1 use: reduceplus.", "qsimpl time: 1 use: reduceplus,reduce_inv2.", "apply rev_ind.", "qsimpl time: 1 use: reduceplus,reduce_inv2.", "unfold irreducible.", "qsimpl time: 1 use: reduceplus,reduce_inv2.", "qsimpl time: 1 use: rep_plus_zero_reduce,reduceplus,reduce_inv2.", "qsimpl time: 1 use: rep_plus_zero_reduce,reduceplus,reduce_inv2.", "qsimpl time: 1 use: rep_plus_zero_reduce,reduceplus,reduce_inv2.", "qsimpl time: 1 use: rep_plus_zero_reduce,reduceplus,reduce_inv2.", "qsimpl time: 1 use: rep_plus_zero_reduce,reduceplus,reducestar0,reduce_inv2.", "qsimpl time: 1 use: rep_plus_zero_reduce,reduceplus,reducestar0,reduce_inv2.", "qsimpl time: 1 use: rep_plus_zero_reduce,reduceplus,reducestar0,reduce_inv2."], "tactic": "apply reduce_inv2.", "exn": "In environment H7 : forall (A : Set) (A0 A1 : A) (eqA : A -> A -> Prop) (plusA : A -> A -> A) (invA : A -> A) (minusA multA : A -> A -> A) (divA : A -> forall b : A, (eqA b A0 -> False) -> A), CoefStructure A A0 A1 eqA plusA invA minusA multA divA -> forall (eqA_dec : forall a b : A, {eqA a b} + {eqA a b -> False}) (n : nat) (ltM : mon n -> mon n -> Prop) (ltM_dec : forall a b : mon n, {ltM a b} + {ltM b a} + {a = b}), OrderStructure (mon n) (zero_mon n) ltM (mult_mon n) -> forall (Q : list (poly A0 eqA ltM)) (p q : list (Term A n)), reduce A A0 A1 eqA invA minusA multA divA eqA_dec n ltM ltM_dec Q p q -> canonical A0 eqA ltM p -> exists (x : list (Term A n)) (a : Term A n), (zeroP A0 eqA (n:=n) a -> False) /\\\\ inPolySet A A0 eqA n ltM x Q /\\\\ canonical A0 eqA ltM x /\\\\ eqP A eqA n q (minuspf A A0 A1 eqA invA minusA multA eqA_dec n ltM ltM_dec p (mults multA (n:=n) a x)) A : Set A0, A1 : A eqA : A -> A -> Prop invA : A -> A minusA, multA : A -> A -> A divA : A -> forall b : A, (eqA b A0 -> False) -> A eqA_dec : forall a b : A, {eqA a b} + {eqA a b -> False} n : nat ltM : mon n -> mon n -> Prop ltM_dec : forall a b : mon n, {ltM a b} + {ltM b a} + {a = b} H5 : forall (Q : list (poly A0 eqA ltM)) (p q : list (Term A n)), reduceplus A A0 A1 eqA invA minusA multA divA eqA_dec n ltM ltM_dec Q p q -> irreducible A A0 A1 eqA invA minusA multA divA eqA_dec n ltM ltM_dec Q q -> reducestar Q p q H1 : forall (A : Set) (A0 A1 : A) (eqA : A -> A -> Prop) (plusA : A -> A -> A) (invA : A -> A) (minusA multA : A -> A -> A) (divA : A -> forall b : A, (eqA b A0 -> False) -> A), CoefStructure A A0 A1 eqA plusA invA minusA multA divA -> forall (eqA_dec : forall a b : A, {eqA a b} + {eqA a b -> False}) (n : nat) (ltM : mon n -> mon n -> Prop) (ltM_dec : forall a b : mon n, {ltM a b} + {ltM b a} + {a = b}), OrderStructure (mon n) (zero_mon n) ltM (mult_mon n) -> forall (Q : list (poly A0 eqA ltM)) (s t : list (Term A n)), reduceplus A A0 A1 eqA invA minusA multA divA eqA_dec n ltM ltM_dec Q s t -> canonical A0 eqA ltM s -> forall p q : list (Term A n), eqP A eqA n s (pluspf A0 (eqA:=eqA) plusA eqA_dec (ltM:=ltM) ltM_dec p q) -> canonical A0 eqA ltM p -> canonical A0 eqA ltM q -> eqP A eqA n t (pO A n) -> exists r1 : list (Term A n), reduceplus A A0 A1 eqA invA minusA multA divA eqA_dec n ltM ltM_dec Q p r1 /\\\\ reduceplus A A0 A1 eqA invA minusA multA divA eqA_dec n ltM ltM_dec Q q (mults multA (n:=n) (invA A1, M1 n) r1) plusA : A -> A -> A Q : list (poly A0 eqA ltM) p : list (Term A n) H : olist (A:=A) ltM p H0 : nZterm A0 eqA (n:=n) p M1_min : forall x : mon n, ltM x (zero_mon n) -> False ltM_nonrefl : forall x : mon n, ltM x x -> False ltM_trans : transitive (mon n) ltM ltM_wf : well_founded ltM ltM_plusr : forall x y z : mon n, ltM x y -> ltM (mult_mon n x z) (mult_mon n y z) ltM_plusl : forall x y z : mon n, ltM x y -> ltM (mult_mon n z x) (mult_mon n z y) A1_diff_A0 : eqA A1 A0 -> False eqA_ref : reflexive A eqA eqA_sym : symmetric A eqA eqA_trans : transitive A eqA plusA_assoc : forall a b c : A, eqA (plusA a (plusA b c)) (plusA (plusA a b) c) plusA_com : forall a b : A, eqA (plusA a b) (plusA b a) plusA_eqA_comp : forall a b c d : A, eqA a c -> eqA b d -> eqA (plusA a b) (plusA c d) plusA_A0 : forall a : A, eqA a (plusA a A0) invA_plusA : forall a : A, eqA A0 (plusA a (invA a)) invA_eqA_comp : forall a b : A, eqA a b -> eqA (invA a) (invA b) minusA_def : forall a b : A, eqA (minusA a b) (plusA a (invA b)) multA_eqA_comp : forall a b c d : A, eqA a c -> eqA b d -> eqA (multA a b) (multA c d) multA_assoc : forall a b c : A, eqA (multA a (multA b c)) (multA (multA a b) c) multA_com : forall a b : A, eqA (multA a b) (multA b a) multA_dist_l : forall a b c : A, eqA (plusA (multA c a) (multA c b)) (multA c (plusA a b)) multA_A0_l : forall a : A, eqA (multA A0 a) A0 multA_A1_l : forall a : A, eqA (multA A1 a) a divA_rew : forall (a b : A) (nZ1 nZ2 : eqA b A0 -> False), divA a b nZ1 = divA a b nZ2 divA_is_multA : forall (a b : A) (nZb : eqA b A0 -> False), eqA a (multA (divA a b nZb) b) divA_eqA_comp : forall (a b c d : A) (nZb : eqA b A0 -> False) (nZd : eqA d A0 -> False), eqA a c -> eqA b d -> eqA (divA a b nZb) (divA c d nZd) divA_multA_comp_r : forall (a b c : A) (nZc : eqA c A0 -> False), eqA (divA (multA a b) c nZc) (multA (divA a c nZc) b) divA_invA_r : forall (a b : A) (nZb : eqA b A0 -> False) (nZib : eqA (invA b) A0 -> False), eqA (divA a (invA b) nZib) (invA (divA a b nZb)) x : Term A n l : list (Term A n) H3 : forall q : list (Term A n), reduce A A0 A1 eqA invA minusA multA divA eqA_dec n ltM ltM_dec Q l q -> False q : list (Term A n) H4 : reduce A A0 A1 eqA invA minusA multA divA eqA_dec n ltM ltM_dec Q (l ++ x :: nil) q Unable to unify \"exists (x : list (Term ?M33394 ?M33405)) (a : Term ?M33394 ?M33405), ~ zeroP ?M33395 ?M33397 a /\\\\ inPolySet ?M33394 ?M33395 ?M33397 ?M33405 ?M33406 x ?M33409 /\\\\ canonical ?M33395 ?M33397 ?M33406 x /\\\\ eqP ?M33394 ?M33397 ?M33405 ?M33411 (minuspf ?M33394 ?M33395 ?M33396 ?M33397 ?M33399 ?M33400 ?M33401 ?M33404 ?M33405 ?M33406 ?M33407 ?M33410 (mults ?M33401 a x))\" with \"False\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros Q p H.", "induction H.", "exists p.", "apply reducestar0.", "qsimpl time: 1 use: reduceplus.", "qsimpl time: 1 use: reduceplus.", "qsimpl time: 1 use: reduceplus,reduce_inv2.", "apply rev_ind.", "qsimpl time: 1 use: reduceplus,reduce_inv2.", "unfold irreducible.", "qsimpl time: 1 use: reduceplus,reduce_inv2.", "qsimpl time: 1 use: rep_plus_zero_reduce,reduceplus,reduce_inv2.", "qsimpl time: 1 use: rep_plus_zero_reduce,reduceplus,reduce_inv2.", "qsimpl time: 1 use: rep_plus_zero_reduce,reduceplus,reduce_inv2.", "qsimpl time: 1 use: rep_plus_zero_reduce,reduceplus,reduce_inv2.", "qsimpl time: 1 use: rep_plus_zero_reduce,reduceplus,reducestar0,reduce_inv2.", "qsimpl time: 1 use: rep_plus_zero_reduce,reduceplus,reducestar0,reduce_inv2.", "qsimpl time: 1 use: rep_plus_zero_reduce,reduceplus,reducestar0,reduce_inv2.", "qsimpl time: 1 use: rep_plus_zero_reduce,reduceplus,reducestar0,reduce_inv2."], "tactic": "apply cs.", "exn": "The reference cs was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros Q p H.", "induction H.", "exists p.", "apply reducestar0.", "qsimpl time: 1 use: reduceplus.", "qsimpl time: 1 use: reduceplus.", "qsimpl time: 1 use: reduceplus,reduce_inv2.", "apply rev_ind.", "qsimpl time: 1 use: reduceplus,reduce_inv2.", "unfold irreducible.", "qsimpl time: 1 use: reduceplus,reduce_inv2.", "qsimpl time: 1 use: rep_plus_zero_reduce,reduceplus,reduce_inv2.", "qsimpl time: 1 use: rep_plus_zero_reduce,reduceplus,reduce_inv2.", "qsimpl time: 1 use: rep_plus_zero_reduce,reduceplus,reduce_inv2.", "qsimpl time: 1 use: rep_plus_zero_reduce,reduceplus,reduce_inv2.", "qsimpl time: 1 use: rep_plus_zero_reduce,reduceplus,reducestar0,reduce_inv2.", "qsimpl time: 1 use: rep_plus_zero_reduce,reduceplus,reducestar0,reduce_inv2.", "qsimpl time: 1 use: rep_plus_zero_reduce,reduceplus,reducestar0,reduce_inv2.", "qsimpl time: 1 use: rep_plus_zero_reduce,reduceplus,reducestar0,reduce_inv2."], "tactic": "exists p.", "exn": "Not an inductive goal with 1 constructor.", "type": "not_inductive_goal", "handled": true}, {"ctx": ["intros Q p H.", "induction H.", "exists p.", "apply reducestar0.", "qsimpl time: 1 use: reduceplus.", "qsimpl time: 1 use: reduceplus.", "qsimpl time: 1 use: reduceplus,reduce_inv2.", "apply rev_ind.", "qsimpl time: 1 use: reduceplus,reduce_inv2.", "unfold irreducible.", "qsimpl time: 1 use: reduceplus,reduce_inv2.", "qsimpl time: 1 use: rep_plus_zero_reduce,reduceplus,reduce_inv2.", "qsimpl time: 1 use: rep_plus_zero_reduce,reduceplus,reduce_inv2.", "qsimpl time: 1 use: rep_plus_zero_reduce,reduceplus,reduce_inv2.", "qsimpl time: 1 use: rep_plus_zero_reduce,reduceplus,reduce_inv2.", "qsimpl time: 1 use: rep_plus_zero_reduce,reduceplus,reducestar0,reduce_inv2.", "qsimpl time: 1 use: rep_plus_zero_reduce,reduceplus,reducestar0,reduce_inv2.", "qsimpl time: 1 use: rep_plus_zero_reduce,reduceplus,reducestar0,reduce_inv2.", "qsimpl time: 1 use: rep_plus_zero_reduce,reduceplus,reducestar0,reduce_inv2.", "qsimpl time: 1 use: rep_plus_zero_reduce,reduceplus,reducestar0,reduce_inv2."], "tactic": "split.", "exn": "Not an inductive goal with 1 constructor.", "type": "not_inductive_goal", "handled": true}, {"ctx": ["intros Q p H.", "induction H.", "exists p.", "apply reducestar0.", "qsimpl time: 1 use: reduceplus.", "qsimpl time: 1 use: reduceplus.", "qsimpl time: 1 use: reduceplus,reduce_inv2.", "apply rev_ind.", "qsimpl time: 1 use: reduceplus,reduce_inv2.", "unfold irreducible.", "qsimpl time: 1 use: reduceplus,reduce_inv2.", "qsimpl time: 1 use: rep_plus_zero_reduce,reduceplus,reduce_inv2.", "qsimpl time: 1 use: rep_plus_zero_reduce,reduceplus,reduce_inv2.", "qsimpl time: 1 use: rep_plus_zero_reduce,reduceplus,reduce_inv2.", "qsimpl time: 1 use: rep_plus_zero_reduce,reduceplus,reduce_inv2.", "qsimpl time: 1 use: rep_plus_zero_reduce,reduceplus,reducestar0,reduce_inv2.", "qsimpl time: 1 use: rep_plus_zero_reduce,reduceplus,reducestar0,reduce_inv2.", "qsimpl time: 1 use: rep_plus_zero_reduce,reduceplus,reducestar0,reduce_inv2.", "qsimpl time: 1 use: rep_plus_zero_reduce,reduceplus,reducestar0,reduce_inv2.", "qsimpl time: 1 use: rep_plus_zero_reduce,reduceplus,reducestar0,reduce_inv2.", "qsimpl time: 1 use: rep_plus_zero_reduce,reduceplus,reducestar0,reduce_inv2."], "tactic": "apply rep_plus_zero_reduce.", "exn": "In environment H8 : forall (A : Set) (A0 A1 : A) (eqA : A -> A -> Prop) (plusA : A -> A -> A) (invA : A -> A) (minusA multA : A -> A -> A) (divA : A -> forall b : A, (eqA b A0 -> False) -> A), CoefStructure A A0 A1 eqA plusA invA minusA multA divA -> forall (eqA_dec : forall a b : A, {eqA a b} + {eqA a b -> False}) (n : nat) (ltM : mon n -> mon n -> Prop) (ltM_dec : forall a b : mon n, {ltM a b} + {ltM b a} + {a = b}), OrderStructure (mon n) (zero_mon n) ltM (mult_mon n) -> forall (Q : list (poly A0 eqA ltM)) (p q : list (Term A n)), reduce A A0 A1 eqA invA minusA multA divA eqA_dec n ltM ltM_dec Q p q -> canonical A0 eqA ltM p -> exists (x : list (Term A n)) (a : Term A n), (zeroP A0 eqA (n:=n) a -> False) /\\\\ inPolySet A A0 eqA n ltM x Q /\\\\ canonical A0 eqA ltM x /\\\\ eqP A eqA n q (minuspf A A0 A1 eqA invA minusA multA eqA_dec n ltM ltM_dec p (mults multA (n:=n) a x)) A : Set A0, A1 : A eqA : A -> A -> Prop invA : A -> A minusA, multA : A -> A -> A divA : A -> forall b : A, (eqA b A0 -> False) -> A eqA_dec : forall a b : A, {eqA a b} + {eqA a b -> False} n : nat ltM : mon n -> mon n -> Prop ltM_dec : forall a b : mon n, {ltM a b} + {ltM b a} + {a = b} H6 : forall (Q : list (poly A0 eqA ltM)) (p q : list (Term A n)), reduceplus A A0 A1 eqA invA minusA multA divA eqA_dec n ltM ltM_dec Q p q -> irreducible A A0 A1 eqA invA minusA multA divA eqA_dec n ltM ltM_dec Q q -> reducestar Q p q H2 : forall (A : Set) (A0 A1 : A) (eqA : A -> A -> Prop) (plusA : A -> A -> A) (invA : A -> A) (minusA multA : A -> A -> A) (divA : A -> forall b : A, (eqA b A0 -> False) -> A), CoefStructure A A0 A1 eqA plusA invA minusA multA divA -> forall (eqA_dec : forall a b : A, {eqA a b} + {eqA a b -> False}) (n : nat) (ltM : mon n -> mon n -> Prop) (ltM_dec : forall a b : mon n, {ltM a b} + {ltM b a} + {a = b}), OrderStructure (mon n) (zero_mon n) ltM (mult_mon n) -> forall (Q : list (poly A0 eqA ltM)) (s t : list (Term A n)), reduceplus A A0 A1 eqA invA minusA multA divA eqA_dec n ltM ltM_dec Q s t -> canonical A0 eqA ltM s -> forall p q : list (Term A n), eqP A eqA n s (pluspf A0 (eqA:=eqA) plusA eqA_dec (ltM:=ltM) ltM_dec p q) -> canonical A0 eqA ltM p -> canonical A0 eqA ltM q -> eqP A eqA n t (pO A n) -> exists r1 : list (Term A n), reduceplus A A0 A1 eqA invA minusA multA divA eqA_dec n ltM ltM_dec Q p r1 /\\\\ reduceplus A A0 A1 eqA invA minusA multA divA eqA_dec n ltM ltM_dec Q q (mults multA (n:=n) (invA A1, M1 n) r1) plusA : A -> A -> A Q : list (poly A0 eqA ltM) p : list (Term A n) H : olist (A:=A) ltM p H0 : nZterm A0 eqA (n:=n) p M1_min : forall x : mon n, ltM x (zero_mon n) -> False ltM_nonrefl : forall x : mon n, ltM x x -> False ltM_trans : transitive (mon n) ltM ltM_wf : well_founded ltM ltM_plusr : forall x y z : mon n, ltM x y -> ltM (mult_mon n x z) (mult_mon n y z) ltM_plusl : forall x y z : mon n, ltM x y -> ltM (mult_mon n z x) (mult_mon n z y) A1_diff_A0 : eqA A1 A0 -> False eqA_ref : reflexive A eqA eqA_sym : symmetric A eqA eqA_trans : transitive A eqA plusA_assoc : forall a b c : A, eqA (plusA a (plusA b c)) (plusA (plusA a b) c) plusA_com : forall a b : A, eqA (plusA a b) (plusA b a) plusA_eqA_comp : forall a b c d : A, eqA a c -> eqA b d -> eqA (plusA a b) (plusA c d) plusA_A0 : forall a : A, eqA a (plusA a A0) invA_plusA : forall a : A, eqA A0 (plusA a (invA a)) invA_eqA_comp : forall a b : A, eqA a b -> eqA (invA a) (invA b) minusA_def : forall a b : A, eqA (minusA a b) (plusA a (invA b)) multA_eqA_comp : forall a b c d : A, eqA a c -> eqA b d -> eqA (multA a b) (multA c d) multA_assoc : forall a b c : A, eqA (multA a (multA b c)) (multA (multA a b) c) multA_com : forall a b : A, eqA (multA a b) (multA b a) multA_dist_l : forall a b c : A, eqA (plusA (multA c a) (multA c b)) (multA c (plusA a b)) multA_A0_l : forall a : A, eqA (multA A0 a) A0 multA_A1_l : forall a : A, eqA (multA A1 a) a divA_rew : forall (a b : A) (nZ1 nZ2 : eqA b A0 -> False), divA a b nZ1 = divA a b nZ2 divA_is_multA : forall (a b : A) (nZb : eqA b A0 -> False), eqA a (multA (divA a b nZb) b) divA_eqA_comp : forall (a b c d : A) (nZb : eqA b A0 -> False) (nZd : eqA d A0 -> False), eqA a c -> eqA b d -> eqA (divA a b nZb) (divA c d nZd) divA_multA_comp_r : forall (a b c : A) (nZc : eqA c A0 -> False), eqA (divA (multA a b) c nZc) (multA (divA a c nZc) b) divA_invA_r : forall (a b : A) (nZb : eqA b A0 -> False) (nZib : eqA (invA b) A0 -> False), eqA (divA a (invA b) nZib) (invA (divA a b nZb)) x : Term A n l : list (Term A n) H3 : forall q : list (Term A n), reduce A A0 A1 eqA invA minusA multA divA eqA_dec n ltM ltM_dec Q l q -> False q : list (Term A n) H4 : reduce A A0 A1 eqA invA minusA multA divA eqA_dec n ltM ltM_dec Q (l ++ x :: nil) q Unable to unify \"exists r1 : list (Term ?M42301 ?M42312), reduceplus ?M42301 ?M42302 ?M42303 ?M42304 ?M42306 ?M42307 ?M42308 ?M42309 ?M42311 ?M42312 ?M42313 ?M42314 ?M42316 ?M42321 r1 /\\\\ reduceplus ?M42301 ?M42302 ?M42303 ?M42304 ?M42306 ?M42307 ?M42308 ?M42309 ?M42311 ?M42312 ?M42313 ?M42314 ?M42316 ?M42322 (mults ?M42308 (invTerm ?M42306 (T1 ?M42303 ?M42312)) r1)\" with \"False\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros Q p H.", "induction H.", "exists p.", "apply reducestar0.", "qsimpl time: 1 use: reduceplus.", "qsimpl time: 1 use: reduceplus.", "qsimpl time: 1 use: reduceplus,reduce_inv2.", "apply rev_ind.", "qsimpl time: 1 use: reduceplus,reduce_inv2.", "unfold irreducible.", "qsimpl time: 1 use: reduceplus,reduce_inv2.", "qsimpl time: 1 use: rep_plus_zero_reduce,reduceplus,reduce_inv2.", "qsimpl time: 1 use: rep_plus_zero_reduce,reduceplus,reduce_inv2.", "qsimpl time: 1 use: rep_plus_zero_reduce,reduceplus,reduce_inv2.", "qsimpl time: 1 use: rep_plus_zero_reduce,reduceplus,reduce_inv2.", "qsimpl time: 1 use: rep_plus_zero_reduce,reduceplus,reducestar0,reduce_inv2.", "qsimpl time: 1 use: rep_plus_zero_reduce,reduceplus,reducestar0,reduce_inv2.", "qsimpl time: 1 use: rep_plus_zero_reduce,reduceplus,reducestar0,reduce_inv2.", "qsimpl time: 1 use: rep_plus_zero_reduce,reduceplus,reducestar0,reduce_inv2.", "qsimpl time: 1 use: rep_plus_zero_reduce,reduceplus,reducestar0,reduce_inv2.", "qsimpl time: 1 use: rep_plus_zero_reduce,reduceplus,reducestar0,reduce_inv2.", "qsimpl time: 1 use: rep_plus_zero_reduce,reduceplus,reducestar0,reduce_inv2."], "tactic": "apply cs.", "exn": "The reference cs was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros Q p H.", "induction H.", "exists p.", "apply reducestar0.", "qsimpl time: 1 use: reduceplus.", "qsimpl time: 1 use: reduceplus.", "qsimpl time: 1 use: reduceplus,reduce_inv2.", "apply rev_ind.", "qsimpl time: 1 use: reduceplus,reduce_inv2.", "unfold irreducible.", "qsimpl time: 1 use: reduceplus,reduce_inv2.", "qsimpl time: 1 use: rep_plus_zero_reduce,reduceplus,reduce_inv2.", "qsimpl time: 1 use: rep_plus_zero_reduce,reduceplus,reduce_inv2.", "qsimpl time: 1 use: rep_plus_zero_reduce,reduceplus,reduce_inv2.", "qsimpl time: 1 use: rep_plus_zero_reduce,reduceplus,reduce_inv2.", "qsimpl time: 1 use: rep_plus_zero_reduce,reduceplus,reducestar0,reduce_inv2.", "qsimpl time: 1 use: rep_plus_zero_reduce,reduceplus,reducestar0,reduce_inv2.", "qsimpl time: 1 use: rep_plus_zero_reduce,reduceplus,reducestar0,reduce_inv2.", "qsimpl time: 1 use: rep_plus_zero_reduce,reduceplus,reducestar0,reduce_inv2.", "qsimpl time: 1 use: rep_plus_zero_reduce,reduceplus,reducestar0,reduce_inv2.", "qsimpl time: 1 use: rep_plus_zero_reduce,reduceplus,reducestar0,reduce_inv2.", "qsimpl time: 1 use: rep_plus_zero_reduce,reduceplus,reducestar0,reduce_inv2."], "tactic": "exists r1.", "exn": "The reference r1 was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros Q p H.", "induction H.", "exists p.", "apply reducestar0.", "qsimpl time: 1 use: reduceplus.", "qsimpl time: 1 use: reduceplus.", "qsimpl time: 1 use: reduceplus,reduce_inv2.", "apply rev_ind.", "qsimpl time: 1 use: reduceplus,reduce_inv2.", "unfold irreducible.", "qsimpl time: 1 use: reduceplus,reduce_inv2.", "qsimpl time: 1 use: rep_plus_zero_reduce,reduceplus,reduce_inv2.", "qsimpl time: 1 use: rep_plus_zero_reduce,reduceplus,reduce_inv2.", "qsimpl time: 1 use: rep_plus_zero_reduce,reduceplus,reduce_inv2.", "qsimpl time: 1 use: rep_plus_zero_reduce,reduceplus,reduce_inv2.", "qsimpl time: 1 use: rep_plus_zero_reduce,reduceplus,reducestar0,reduce_inv2.", "qsimpl time: 1 use: rep_plus_zero_reduce,reduceplus,reducestar0,reduce_inv2.", "qsimpl time: 1 use: rep_plus_zero_reduce,reduceplus,reducestar0,reduce_inv2.", "qsimpl time: 1 use: rep_plus_zero_reduce,reduceplus,reducestar0,reduce_inv2.", "qsimpl time: 1 use: rep_plus_zero_reduce,reduceplus,reducestar0,reduce_inv2.", "qsimpl time: 1 use: rep_plus_zero_reduce,reduceplus,reducestar0,reduce_inv2.", "qsimpl time: 1 use: rep_plus_zero_reduce,reduceplus,reducestar0,reduce_inv2."], "tactic": "split.", "exn": "Not an inductive goal with 1 constructor.", "type": "not_inductive_goal", "handled": true}, {"ctx": ["intros Q p H.", "induction H.", "exists p.", "apply reducestar0.", "qsimpl time: 1 use: reduceplus.", "qsimpl time: 1 use: reduceplus.", "qsimpl time: 1 use: reduceplus,reduce_inv2.", "apply rev_ind.", "qsimpl time: 1 use: reduceplus,reduce_inv2.", "unfold irreducible.", "qsimpl time: 1 use: reduceplus,reduce_inv2.", "qsimpl time: 1 use: rep_plus_zero_reduce,reduceplus,reduce_inv2.", "qsimpl time: 1 use: rep_plus_zero_reduce,reduceplus,reduce_inv2.", "qsimpl time: 1 use: rep_plus_zero_reduce,reduceplus,reduce_inv2.", "qsimpl time: 1 use: rep_plus_zero_reduce,reduceplus,reduce_inv2.", "qsimpl time: 1 use: rep_plus_zero_reduce,reduceplus,reducestar0,reduce_inv2.", "qsimpl time: 1 use: rep_plus_zero_reduce,reduceplus,reducestar0,reduce_inv2.", "qsimpl time: 1 use: rep_plus_zero_reduce,reduceplus,reducestar0,reduce_inv2.", "qsimpl time: 1 use: rep_plus_zero_reduce,reduceplus,reducestar0,reduce_inv2.", "qsimpl time: 1 use: rep_plus_zero_reduce,reduceplus,reducestar0,reduce_inv2.", "qsimpl time: 1 use: rep_plus_zero_reduce,reduceplus,reducestar0,reduce_inv2.", "qsimpl time: 1 use: rep_plus_zero_reduce,reduceplus,reducestar0,reduce_inv2.", "qsimpl time: 1 use: rep_plus_zero_reduce,reduceplus,reducestar0,reduce_inv2."], "tactic": "apply reduce_inv2.", "exn": "In environment H8 : forall (A : Set) (A0 A1 : A) (eqA : A -> A -> Prop) (plusA : A -> A -> A) (invA : A -> A) (minusA multA : A -> A -> A) (divA : A -> forall b : A, (eqA b A0 -> False) -> A), CoefStructure A A0 A1 eqA plusA invA minusA multA divA -> forall (eqA_dec : forall a b : A, {eqA a b} + {eqA a b -> False}) (n : nat) (ltM : mon n -> mon n -> Prop) (ltM_dec : forall a b : mon n, {ltM a b} + {ltM b a} + {a = b}), OrderStructure (mon n) (zero_mon n) ltM (mult_mon n) -> forall (Q : list (poly A0 eqA ltM)) (p q : list (Term A n)), reduce A A0 A1 eqA invA minusA multA divA eqA_dec n ltM ltM_dec Q p q -> canonical A0 eqA ltM p -> exists (x : list (Term A n)) (a : Term A n), (zeroP A0 eqA (n:=n) a -> False) /\\\\ inPolySet A A0 eqA n ltM x Q /\\\\ canonical A0 eqA ltM x /\\\\ eqP A eqA n q (minuspf A A0 A1 eqA invA minusA multA eqA_dec n ltM ltM_dec p (mults multA (n:=n) a x)) A : Set A0, A1 : A eqA : A -> A -> Prop invA : A -> A minusA, multA : A -> A -> A divA : A -> forall b : A, (eqA b A0 -> False) -> A eqA_dec : forall a b : A, {eqA a b} + {eqA a b -> False} n : nat ltM : mon n -> mon n -> Prop ltM_dec : forall a b : mon n, {ltM a b} + {ltM b a} + {a = b} H6 : forall (Q : list (poly A0 eqA ltM)) (p q : list (Term A n)), reduceplus A A0 A1 eqA invA minusA multA divA eqA_dec n ltM ltM_dec Q p q -> irreducible A A0 A1 eqA invA minusA multA divA eqA_dec n ltM ltM_dec Q q -> reducestar Q p q H2 : forall (A : Set) (A0 A1 : A) (eqA : A -> A -> Prop) (plusA : A -> A -> A) (invA : A -> A) (minusA multA : A -> A -> A) (divA : A -> forall b : A, (eqA b A0 -> False) -> A), CoefStructure A A0 A1 eqA plusA invA minusA multA divA -> forall (eqA_dec : forall a b : A, {eqA a b} + {eqA a b -> False}) (n : nat) (ltM : mon n -> mon n -> Prop) (ltM_dec : forall a b : mon n, {ltM a b} + {ltM b a} + {a = b}), OrderStructure (mon n) (zero_mon n) ltM (mult_mon n) -> forall (Q : list (poly A0 eqA ltM)) (s t : list (Term A n)), reduceplus A A0 A1 eqA invA minusA multA divA eqA_dec n ltM ltM_dec Q s t -> canonical A0 eqA ltM s -> forall p q : list (Term A n), eqP A eqA n s (pluspf A0 (eqA:=eqA) plusA eqA_dec (ltM:=ltM) ltM_dec p q) -> canonical A0 eqA ltM p -> canonical A0 eqA ltM q -> eqP A eqA n t (pO A n) -> exists r1 : list (Term A n), reduceplus A A0 A1 eqA invA minusA multA divA eqA_dec n ltM ltM_dec Q p r1 /\\\\ reduceplus A A0 A1 eqA invA minusA multA divA eqA_dec n ltM ltM_dec Q q (mults multA (n:=n) (invA A1, M1 n) r1) plusA : A -> A -> A Q : list (poly A0 eqA ltM) p : list (Term A n) H : olist (A:=A) ltM p H0 : nZterm A0 eqA (n:=n) p M1_min : forall x : mon n, ltM x (zero_mon n) -> False ltM_nonrefl : forall x : mon n, ltM x x -> False ltM_trans : transitive (mon n) ltM ltM_wf : well_founded ltM ltM_plusr : forall x y z : mon n, ltM x y -> ltM (mult_mon n x z) (mult_mon n y z) ltM_plusl : forall x y z : mon n, ltM x y -> ltM (mult_mon n z x) (mult_mon n z y) A1_diff_A0 : eqA A1 A0 -> False eqA_ref : reflexive A eqA eqA_sym : symmetric A eqA eqA_trans : transitive A eqA plusA_assoc : forall a b c : A, eqA (plusA a (plusA b c)) (plusA (plusA a b) c) plusA_com : forall a b : A, eqA (plusA a b) (plusA b a) plusA_eqA_comp : forall a b c d : A, eqA a c -> eqA b d -> eqA (plusA a b) (plusA c d) plusA_A0 : forall a : A, eqA a (plusA a A0) invA_plusA : forall a : A, eqA A0 (plusA a (invA a)) invA_eqA_comp : forall a b : A, eqA a b -> eqA (invA a) (invA b) minusA_def : forall a b : A, eqA (minusA a b) (plusA a (invA b)) multA_eqA_comp : forall a b c d : A, eqA a c -> eqA b d -> eqA (multA a b) (multA c d) multA_assoc : forall a b c : A, eqA (multA a (multA b c)) (multA (multA a b) c) multA_com : forall a b : A, eqA (multA a b) (multA b a) multA_dist_l : forall a b c : A, eqA (plusA (multA c a) (multA c b)) (multA c (plusA a b)) multA_A0_l : forall a : A, eqA (multA A0 a) A0 multA_A1_l : forall a : A, eqA (multA A1 a) a divA_rew : forall (a b : A) (nZ1 nZ2 : eqA b A0 -> False), divA a b nZ1 = divA a b nZ2 divA_is_multA : forall (a b : A) (nZb : eqA b A0 -> False), eqA a (multA (divA a b nZb) b) divA_eqA_comp : forall (a b c d : A) (nZb : eqA b A0 -> False) (nZd : eqA d A0 -> False), eqA a c -> eqA b d -> eqA (divA a b nZb) (divA c d nZd) divA_multA_comp_r : forall (a b c : A) (nZc : eqA c A0 -> False), eqA (divA (multA a b) c nZc) (multA (divA a c nZc) b) divA_invA_r : forall (a b : A) (nZb : eqA b A0 -> False) (nZib : eqA (invA b) A0 -> False), eqA (divA a (invA b) nZib) (invA (divA a b nZb)) x : Term A n l : list (Term A n) H3 : forall q : list (Term A n), reduce A A0 A1 eqA invA minusA multA divA eqA_dec n ltM ltM_dec Q l q -> False q : list (Term A n) H4 : reduce A A0 A1 eqA invA minusA multA divA eqA_dec n ltM ltM_dec Q (l ++ x :: nil) q Unable to unify \"exists (x : list (Term ?M48239 ?M48250)) (a : Term ?M48239 ?M48250), ~ zeroP ?M48240 ?M48242 a /\\\\ inPolySet ?M48239 ?M48240 ?M48242 ?M48250 ?M48251 x ?M48254 /\\\\ canonical ?M48240 ?M48242 ?M48251 x /\\\\ eqP ?M48239 ?M48242 ?M48250 ?M48256 (minuspf ?M48239 ?M48240 ?M48241 ?M48242 ?M48244 ?M48245 ?M48246 ?M48249 ?M48250 ?M48251 ?M48252 ?M48255 (mults ?M48246 a x))\" with \"False\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros Q p H.", "induction H.", "exists p.", "apply reducestar0.", "qsimpl time: 1 use: reduceplus.", "qsimpl time: 1 use: reduceplus.", "qsimpl time: 1 use: reduceplus,reduce_inv2.", "apply rev_ind.", "qsimpl time: 1 use: reduceplus,reduce_inv2.", "unfold irreducible.", "qsimpl time: 1 use: reduceplus,reduce_inv2.", "qsimpl time: 1 use: rep_plus_zero_reduce,reduceplus,reduce_inv2.", "qsimpl time: 1 use: rep_plus_zero_reduce,reduceplus,reduce_inv2.", "qsimpl time: 1 use: rep_plus_zero_reduce,reduceplus,reduce_inv2.", "qsimpl time: 1 use: rep_plus_zero_reduce,reduceplus,reduce_inv2.", "qsimpl time: 1 use: rep_plus_zero_reduce,reduceplus,reducestar0,reduce_inv2.", "qsimpl time: 1 use: rep_plus_zero_reduce,reduceplus,reducestar0,reduce_inv2.", "qsimpl time: 1 use: rep_plus_zero_reduce,reduceplus,reducestar0,reduce_inv2.", "qsimpl time: 1 use: rep_plus_zero_reduce,reduceplus,reducestar0,reduce_inv2.", "qsimpl time: 1 use: rep_plus_zero_reduce,reduceplus,reducestar0,reduce_inv2.", "qsimpl time: 1 use: rep_plus_zero_reduce,reduceplus,reducestar0,reduce_inv2.", "qsimpl time: 1 use: rep_plus_zero_reduce,reduceplus,reducestar0,reduce_inv2.", "qsimpl time: 1 use: rep_plus_zero_reduce,reduceplus,reducestar0,reduce_inv2.", "qsimpl time: 1 use: rep_plus_zero_reduce,reduceplus,reducestar0,reduce_inv2."], "tactic": "apply cs.", "exn": "The reference cs was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros Q p H.", "induction H.", "exists p.", "apply reducestar0.", "qsimpl time: 1 use: reduceplus.", "qsimpl time: 1 use: reduceplus.", "qsimpl time: 1 use: reduceplus,reduce_inv2.", "apply rev_ind.", "qsimpl time: 1 use: reduceplus,reduce_inv2.", "unfold irreducible.", "qsimpl time: 1 use: reduceplus,reduce_inv2.", "qsimpl time: 1 use: rep_plus_zero_reduce,reduceplus,reduce_inv2.", "qsimpl time: 1 use: rep_plus_zero_reduce,reduceplus,reduce_inv2.", "qsimpl time: 1 use: rep_plus_zero_reduce,reduceplus,reduce_inv2.", "qsimpl time: 1 use: rep_plus_zero_reduce,reduceplus,reduce_inv2.", "qsimpl time: 1 use: rep_plus_zero_reduce,reduceplus,reducestar0,reduce_inv2.", "qsimpl time: 1 use: rep_plus_zero_reduce,reduceplus,reducestar0,reduce_inv2.", "qsimpl time: 1 use: rep_plus_zero_reduce,reduceplus,reducestar0,reduce_inv2.", "qsimpl time: 1 use: rep_plus_zero_reduce,reduceplus,reducestar0,reduce_inv2.", "qsimpl time: 1 use: rep_plus_zero_reduce,reduceplus,reducestar0,reduce_inv2.", "qsimpl time: 1 use: rep_plus_zero_reduce,reduceplus,reducestar0,reduce_inv2.", "qsimpl time: 1 use: rep_plus_zero_reduce,reduceplus,reducestar0,reduce_inv2.", "qsimpl time: 1 use: rep_plus_zero_reduce,reduceplus,reducestar0,reduce_inv2.", "qsimpl time: 1 use: rep_plus_zero_reduce,reduceplus,reducestar0,reduce_inv2."], "tactic": "exists q.", "exn": "Not an inductive goal with 1 constructor.", "type": "not_inductive_goal", "handled": true}]}, "chat": [], "original": "intros Q p H. induction H. - exists p. apply reducestar0. unfold reduceplus. split. apply reduce_inv2. apply cs. exists p. auto. unfold irreducible. split. apply rep_plus_zero_reduce. apply cs. exists r1. split. apply reduce_inv2. apply cs. exists q. auto. - destruct IHcanonical as [t Ht]. destruct Ht as [Ht1 Ht2]. exists t. apply reducestar0. unfold reduceplus. split. apply reduce_inv2. apply cs. exists p. auto. unfold irreducible. split. apply rep_plus_zero_reduce. apply cs. exists r1. split. apply reduce_inv2. apply cs. exists q. auto.", "succ": false}]