[{"history": {"proof": "", "repairs": [], "exceptions": []}, "chat": [], "original": "intros n ln t l H. induction H. - simpl. auto. - simpl. specialize (IHheight_pred1 eq_refl). specialize (IHheight_pred2 eq_refl). rewrite -> weight_tree_list_node. rewrite -> IHheight_pred1. rewrite -> IHheight_pred2. assert (Hlen: length ln1 = length l1). { apply height_pred_length in H. auto. } assert (Hlen': length ln2 = length l2). { apply height_pred_length in H0. auto. } assert (Hlen'': length (ln1 ++ ln2) = length (l1 ++ l2)). { rewrite app_length. rewrite app_length. auto. } rewrite <- (prod2list_app A f ln1 l1 ln2 l2). rewrite <- (prod2list_app A f ln1 l1 ln2 l2). apply (prod2list_le_l A f (S n) n (S n) n). all: auto.", "succ": false}]