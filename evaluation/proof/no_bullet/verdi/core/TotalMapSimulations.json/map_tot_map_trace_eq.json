[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": ["intros out to.", "unfold map2fst.", "unfold map."], "tactic": "rewrite map_map.", "exn": "The LHS of map_map (map _ (map _ _)) does not match any subterm of the goal", "type": "no_match_term", "handled": true}, {"ctx": ["intros out to.", "unfold map2fst.", "unfold map.", "qsimpl use: map_map."], "tactic": "reflexivity.", "exn": "In environment H : forall (A B C : Type) (f : A -> B) (g : B -> C) (l : list A), map g (map f l) = map (fun x : A => g (f x)) l base_fst, base_snd : BaseParams multi_fst : MultiParams base_fst multi_snd : MultiParams base_snd base_map : BaseParamsTotalMap base_fst base_snd name_map : MultiParamsNameTotalMap multi_fst multi_snd msg_map : MultiParamsMsgTotalMap multi_fst multi_snd tot_map_output_injective : forall o o' : output, tot_map_output o = tot_map_output o' -> o = o' fail_fst : FailureParams multi_fst fail_snd : FailureParams multi_snd overlay_fst : NameOverlayParams multi_fst overlay_snd : NameOverlayParams multi_snd fail_msg_fst : FailMsgParams multi_fst fail_msg_snd : FailMsgParams multi_snd out : list output to : name tot_fail_msg_fst_snd0 : msg_fail = tot_map_msg msg_fail tot_reboot_eq0 : forall d : data, tot_map_data (reboot d) = reboot (tot_map_data d) tot_init_handlers_eq0 : forall n : name, tot_map_data (init_handlers n) = init_handlers (tot_map_name n) tot_net_handlers_eq0 : forall (me src : name) (m : msg) (st : data), tot_mapped_net_handlers me src m st = net_handlers (tot_map_name me) (tot_map_name src) (tot_map_msg m) (tot_map_data st) tot_input_handlers_eq0 : forall (me : name) (inp : input) (st : data), tot_mapped_input_handlers me inp st = input_handlers (tot_map_name me) (tot_map_input inp) (tot_map_data st) tot_map_name_inv_inverse0 : forall n : name, tot_map_name_inv (tot_map_name n) = n tot_map_name_inverse_inv0 : forall n : name, tot_map_name (tot_map_name_inv n) = n H0 : forall n n' : name, adjacent_to (tot_map_name n) (tot_map_name n') -> adjacent_to n n' H1 : forall n n' : name, adjacent_to n n' -> adjacent_to (tot_map_name n) (tot_map_name n') Unable to unify \"(fix map (l : list (input + output)) : list (name * (input + output)) := match l with | [] => [] | a :: t => (tot_map_name to, a) :: map t end) ((fix map (l : list output) : list (input + output) := match l with | [] => [] | a :: t => inr a :: map t end) ((fix map (l : list output) : list output := match l with | [] => [] | a :: t => tot_map_output a :: map t end) out))\" with \"(fix map (l : list (name * (input + output))) : list (name * (input + output)) := match l with | [] => [] | a :: t => tot_map_trace a :: map t end) ((fix map (l : list (input + output)) : list (name * (input + output)) := match l with | [] => [] | a :: t => (to, a) :: map t end) ((fix map (l : list output) : list (input + output) := match l with | [] => [] | a :: t => inr a :: map t end) out))\".", "type": "cannot_unify", "handled": true}]}, "chat": [], "original": "intros out to. unfold map2fst. unfold map. rewrite map_map. reflexivity.", "hammer_times": 5, "succ": false, "time": 161.93904089927673}]