[{"history": {"proof": "qsimpl time: 2 use: corable. sauto lq: on depth: 3. qsimpl time: 2 use: corable.", "repairs": ["not_evaluable", "hammer", "cannot_unify"], "exceptions": [{"ctx": ["intros x y corx cory."], "tactic": "unfold corable, CosAX in *.", "exn": "Cannot coerce CosAX to an evaluable reference.", "type": "not_evaluable", "handled": true}, {"ctx": ["intros x y corx cory.", "qsimpl time: 2 use: corable.", "destruct CosAX as [corable_ap corable_or corable_impp corable_iff]."], "tactic": "apply corable_ap; auto.", "exn": "In environment L : Language P : expr -> Prop minL : MinimumLanguage L pL : PropositionalLanguage L sepconL : SepconLanguage L wandL : WandLanguage L Gamma : Provable L CosAX : Corable L Gamma x, y : expr corable_ap : expr -> Prop corable_or : PropositionalStable L Gamma corable_ap corable_impp : SeparationStable L Gamma corable_ap corable_iff : SeparationAbsorbStable L Gamma corable_ap corx : corable x cory : corable y sepcon_comm_impp : forall x y : expr, |-- x * y --> y * x sepcon_assoc1 : forall x y z : expr, |-- x * (y * z) --> x * y * z sepcon_mono : forall x1 x2 y1 y2 : expr, |-- x1 --> x2 -> |-- y1 --> y2 -> |-- x1 * y1 --> x2 * y2 andp_intros : forall x y : expr, |-- x --> y --> x && y andp_elim1 : forall x y : expr, |-- x && y --> x andp_elim2 : forall x y : expr, |-- x && y --> y orp_intros1 : forall x y : expr, |-- x --> x || y orp_intros2 : forall x y : expr, |-- y --> x || y orp_elim : forall x y z : expr, |-- (x --> z) --> (y --> z) --> x || y --> z falsep_elim : forall x : expr, |-- FF --> x modus_ponens : forall x y : expr, |-- x --> y -> |-- x -> |-- y axiom1 : forall x y : expr, |-- x --> y --> x axiom2 : forall x y z : expr, |-- (x --> y --> z) --> (x --> y) --> x --> z H : forall x y z : expr, |-- x --> y -* z -> |-- x * y --> z H0 : forall x y z : expr, |-- x * y --> z -> |-- x --> y -* z Unable to unify \"Prop\" with \"P (x * y)\".", "type": "cannot_unify", "handled": true}]}, "chat": [], "original": "intros x y corx cory. unfold corable, CosAX in *. destruct CosAX as [corable_ap corable_or corable_impp corable_iff]. apply corable_ap; auto.", "succ": true}]