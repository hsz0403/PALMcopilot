[{"history": {"proof": "qsimpl time: 2. qsimpl time: 2 use: wand_sepcon_adjoint.", "repairs": ["not_inductive_product", "no_hypos"], "exceptions": [{"ctx": ["intros x y."], "tactic": "split.", "exn": "Not an inductive product.", "type": "not_inductive_product", "handled": true}, {"ctx": ["intros x y.", "qsimpl time: 2."], "tactic": "intros H.", "exn": "No product even after head-reduction.", "type": "no_product", "handled": true}, {"ctx": ["intros x y.", "qsimpl time: 2."], "tactic": "apply wand_sepcon_adjoint in H.", "exn": "No such hypothesis: H", "type": "no_hypos", "handled": true}, {"ctx": ["intros x y.", "qsimpl time: 2.", "qsimpl time: 2 use: wand_sepcon_adjoint."], "tactic": "apply H.", "exn": "In environment L : Language minL : MinimumLanguage L pL : PropositionalLanguage L sepconL : SepconLanguage L wandL : WandLanguage L CtsL : CoreTransitSeparationLanguage L Gamma : Provable L CosAX : Corable L Gamma x, y : expr core_tr_andp_sepcon0 : forall x y : expr, |-- \u25a1 (x && y) --> \u25a1 (x * y) boxp_absorb_stable : forall x : expr, corable x -> |-- x --> \u25a1 x boxp_sepcon : forall x y : expr, |-- \u25a1 (x * y) --> \u25a1 x * \u25a1 y sepcon_boxp : forall x y : expr, |-- \u25a1 x * \u25a1 y --> \u25a1 (x * y) boxp_orp : forall x y : expr, |-- \u25a1 (x || y) <--> \u25a1 x || \u25a1 y axiom_K : forall x y : expr, |-- \u25a1 (x --> y) --> \u25a1 x --> \u25a1 y rule_N : forall x : expr, |-- x -> |-- \u25a1 x sepcon_comm_impp : forall x y : expr, |-- x * y --> y * x sepcon_assoc1 : forall x y z : expr, |-- x * (y * z) --> x * y * z sepcon_mono : forall x1 x2 y1 y2 : expr, |-- x1 --> x2 -> |-- y1 --> y2 -> |-- x1 * y1 --> x2 * y2 andp_intros : forall x y : expr, |-- x --> y --> x && y andp_elim1 : forall x y : expr, |-- x && y --> x andp_elim2 : forall x y : expr, |-- x && y --> y orp_intros1 : forall x y : expr, |-- x --> x || y orp_intros2 : forall x y : expr, |-- y --> x || y orp_elim : forall x y z : expr, |-- (x --> z) --> (y --> z) --> x || y --> z falsep_elim : forall x : expr, |-- FF --> x modus_ponens : forall x y : expr, |-- x --> y -> |-- x -> |-- y axiom1 : forall x y : expr, |-- x --> y --> x axiom2 : forall x y z : expr, |-- (x --> y --> z) --> (x --> y) --> x --> z H : forall x y z : expr, (|-- x * y --> z -> |-- x --> y -* z) /\\\\ (|-- x --> y -* z -> |-- x * y --> z) Unable to unify \"(|-- ?M6504 * ?M6505 --> ?M6506 -> |-- ?M6504 --> ?M6505 -* ?M6506) /\\\\ (|-- ?M6504 --> ?M6505 -* ?M6506 -> |-- ?M6504 * ?M6505 --> ?M6506)\" with \"(let (provable) := Gamma in provable) (\u25a1 x * \u25a1 y <--> \u25a1 (x * y))\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros x y.", "qsimpl time: 2.", "qsimpl time: 2 use: wand_sepcon_adjoint.", "qsimpl time: 2 use: wand_sepcon_adjoint.", "-"], "tactic": "intros H.", "exn": "H is already used.", "type": "used_var", "handled": true}, {"ctx": ["intros x y.", "qsimpl time: 2.", "qsimpl time: 2 use: wand_sepcon_adjoint.", "qsimpl time: 2 use: wand_sepcon_adjoint.", "-"], "tactic": "intros H'.", "exn": "No product even after head-reduction.", "type": "no_product", "handled": true}, {"ctx": ["intros x y.", "qsimpl time: 2.", "qsimpl time: 2 use: wand_sepcon_adjoint.", "qsimpl time: 2 use: wand_sepcon_adjoint.", "-"], "tactic": "apply wand_sepcon_adjoint.", "exn": "In environment L : Language minL : MinimumLanguage L pL : PropositionalLanguage L sepconL : SepconLanguage L wandL : WandLanguage L CtsL : CoreTransitSeparationLanguage L Gamma : Provable L CosAX : Corable L Gamma x, y : expr core_tr_andp_sepcon0 : forall x y : expr, |-- \u25a1 (x && y) --> \u25a1 (x * y) boxp_absorb_stable : forall x : expr, corable x -> |-- x --> \u25a1 x boxp_sepcon : forall x y : expr, |-- \u25a1 (x * y) --> \u25a1 x * \u25a1 y sepcon_boxp : forall x y : expr, |-- \u25a1 x * \u25a1 y --> \u25a1 (x * y) boxp_orp : forall x y : expr, |-- \u25a1 (x || y) <--> \u25a1 x || \u25a1 y axiom_K : forall x y : expr, |-- \u25a1 (x --> y) --> \u25a1 x --> \u25a1 y rule_N : forall x : expr, |-- x -> |-- \u25a1 x sepcon_comm_impp : forall x y : expr, |-- x * y --> y * x sepcon_assoc1 : forall x y z : expr, |-- x * (y * z) --> x * y * z sepcon_mono : forall x1 x2 y1 y2 : expr, |-- x1 --> x2 -> |-- y1 --> y2 -> |-- x1 * y1 --> x2 * y2 andp_intros : forall x y : expr, |-- x --> y --> x && y andp_elim1 : forall x y : expr, |-- x && y --> x andp_elim2 : forall x y : expr, |-- x && y --> y orp_intros1 : forall x y : expr, |-- x --> x || y orp_intros2 : forall x y : expr, |-- y --> x || y orp_elim : forall x y z : expr, |-- (x --> z) --> (y --> z) --> x || y --> z falsep_elim : forall x : expr, |-- FF --> x modus_ponens : forall x y : expr, |-- x --> y -> |-- x -> |-- y axiom1 : forall x y : expr, |-- x --> y --> x axiom2 : forall x y z : expr, |-- (x --> y --> z) --> (x --> y) --> x --> z H : forall x y z : expr, (|-- x * y --> z -> |-- x --> y -* z) /\\\\ (|-- x --> y -* z -> |-- x * y --> z) H0 : forall x y z : expr, (|-- x * y --> z -> |-- x --> y -* z) /\\\\ (|-- x --> y -* z -> |-- x * y --> z) Unable to unify \"(|-- ?M8538 * ?M8539 --> ?M8540 -> |-- ?M8538 --> ?M8539 -* ?M8540) /\\\\ (|-- ?M8538 --> ?M8539 -* ?M8540 -> |-- ?M8538 * ?M8539 --> ?M8540)\" with \"(let (provable) := Gamma in provable) (\u25a1 x * \u25a1 y <--> \u25a1 (x * y))\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros x y.", "qsimpl time: 2.", "qsimpl time: 2 use: wand_sepcon_adjoint.", "qsimpl time: 2 use: wand_sepcon_adjoint.", "-", "qsimpl time: 2 use: wand_sepcon_adjoint."], "tactic": "apply H.", "exn": "In environment L : Language minL : MinimumLanguage L pL : PropositionalLanguage L sepconL : SepconLanguage L wandL : WandLanguage L CtsL : CoreTransitSeparationLanguage L Gamma : Provable L CosAX : Corable L Gamma x, y : expr core_tr_andp_sepcon0 : forall x y : expr, |-- \u25a1 (x && y) --> \u25a1 (x * y) boxp_absorb_stable : forall x : expr, corable x -> |-- x --> \u25a1 x boxp_sepcon : forall x y : expr, |-- \u25a1 (x * y) --> \u25a1 x * \u25a1 y sepcon_boxp : forall x y : expr, |-- \u25a1 x * \u25a1 y --> \u25a1 (x * y) boxp_orp : forall x y : expr, |-- \u25a1 (x || y) <--> \u25a1 x || \u25a1 y axiom_K : forall x y : expr, |-- \u25a1 (x --> y) --> \u25a1 x --> \u25a1 y rule_N : forall x : expr, |-- x -> |-- \u25a1 x sepcon_comm_impp : forall x y : expr, |-- x * y --> y * x sepcon_assoc1 : forall x y z : expr, |-- x * (y * z) --> x * y * z sepcon_mono : forall x1 x2 y1 y2 : expr, |-- x1 --> x2 -> |-- y1 --> y2 -> |-- x1 * y1 --> x2 * y2 andp_intros : forall x y : expr, |-- x --> y --> x && y andp_elim1 : forall x y : expr, |-- x && y --> x andp_elim2 : forall x y : expr, |-- x && y --> y orp_intros1 : forall x y : expr, |-- x --> x || y orp_intros2 : forall x y : expr, |-- y --> x || y orp_elim : forall x y z : expr, |-- (x --> z) --> (y --> z) --> x || y --> z falsep_elim : forall x : expr, |-- FF --> x modus_ponens : forall x y : expr, |-- x --> y -> |-- x -> |-- y axiom1 : forall x y : expr, |-- x --> y --> x axiom2 : forall x y z : expr, |-- (x --> y --> z) --> (x --> y) --> x --> z H : forall x y z : expr, (|-- x * y --> z -> |-- x --> y -* z) /\\\\ (|-- x --> y -* z -> |-- x * y --> z) H1 : forall x y z : expr, (|-- x * y --> z -> |-- x --> y -* z) /\\\\ (|-- x --> y -* z -> |-- x * y --> z) Unable to unify \"(|-- ?M10596 * ?M10597 --> ?M10598 -> |-- ?M10596 --> ?M10597 -* ?M10598) /\\\\ (|-- ?M10596 --> ?M10597 -* ?M10598 -> |-- ?M10596 * ?M10597 --> ?M10598)\" with \"(let (provable) := Gamma in provable) (\u25a1 x * \u25a1 y <--> \u25a1 (x * y))\".", "type": "cannot_unify", "handled": true}]}, "chat": [], "original": "intros x y. split. - intros H. apply wand_sepcon_adjoint in H. apply H. - intros H. apply wand_sepcon_adjoint. apply H.", "succ": false}]