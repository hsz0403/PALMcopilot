[{"history": {"proof": "qsimpl time: 2 use: sepcon. qsimpl time: 2 use: sepcon,join_comm,wand. qsimpl time: 2 use: sepcon,join_comm,wand,join_assoc.", "repairs": ["cannot_unify", "cannot_unify", "cannot_unify"], "exceptions": [{"ctx": [], "tactic": "apply WeakSemantics.WeakSemanticsMono.sepcon.", "exn": "In environment L : Language minL : MinimumLanguage L pL : PropositionalLanguage L sepconL : SepconLanguage L wandL : WandLanguage L GammaP : Provable L GammaD : Derivable L SC : NormalSequentCalculus L GammaP GammaD bSC : BasicSequentCalculus L GammaD minSC : MinimumSequentCalculus L GammaD ipSC : IntuitionisticPropositionalSequentCalculus L GammaD AX : NormalAxiomatization L GammaP GammaD minAX : MinimumAxiomatization L GammaP ipAX : IntuitionisticPropositionalLogic L GammaP sepconAX : SepconAxiomatization L GammaP wandAX : WandAxiomatization L GammaP MD : Model kMD : KripkeModel MD M : Kmodel R : Relation (Kworlds M) J : Join (Kworlds M) SM : Semantics L MD fsepconSM : SepconSemantics L MD M SM fwandSM : WandSemantics L MD M SM cP : context -> Prop rel : bijection (Kworlds M) {x : context | cP x} H_R : forall (m n : Kworlds M) (Phi Psi : {x : context | cP x}), rel m Phi -> rel n Psi -> m <= n <-> Included expr (proj1_sig Phi) (proj1_sig Psi) H_J : forall (m1 m2 m : Kworlds M) (Phi1 Phi2 Phi : {x : context | cP x}), rel m1 Phi1 -> rel m2 Phi2 -> rel m Phi -> join m1 m2 m <-> Included expr (context_sepcon (proj1_sig Phi1) (proj1_sig Phi2)) (proj1_sig Phi) AL_DC : at_least derivable_closed cP LIN_SR : forall (Phi : context) (Psi : {x : context | cP x}), Lindenbaum_constructable (context_sepcon_included_r Phi (proj1_sig Psi)) cP Unable to unify \"{x : ?worlds -> Prop | upwards_closed_Kdenote x}\" with \"SeparationAlgebra (Kworlds M)\".", "type": "cannot_unify", "handled": true}, {"ctx": ["qsimpl time: 2 use: sepcon."], "tactic": "apply WeakSemantics.WeakSemanticsMono.wand.", "exn": "In environment L : Language minL : MinimumLanguage L pL : PropositionalLanguage L sepconL : SepconLanguage L wandL : WandLanguage L GammaP : Provable L GammaD : Derivable L MD : Model kMD : KripkeModel MD M : Kmodel R : Relation (Kworlds M) J : Join (Kworlds M) SM : Semantics L MD fsepconSM : SepconSemantics L MD M SM fwandSM : WandSemantics L MD M SM cP : context -> Prop rel : bijection (Kworlds M) {x : context | cP x} H_J : forall (m1 m2 m : Kworlds M) (Phi1 Phi2 Phi : {x : context | cP x}), rel m1 Phi1 -> rel m2 Phi2 -> rel m Phi -> (join m1 m2 m -> Included expr (context_sepcon (proj1_sig Phi1) (proj1_sig Phi2)) (proj1_sig Phi)) /\\\\ (Included expr (context_sepcon (proj1_sig Phi1) (proj1_sig Phi2)) (proj1_sig Phi) -> join m1 m2 m) AL_DC : at_least derivable_closed cP LIN_SR : forall (Phi : context) (Psi : {x : context | cP x}), Lindenbaum_constructable (context_sepcon_included_r Phi (proj1_sig Psi)) cP H : forall (m n : Kworlds M) (Phi Psi : {x : context | cP x}), rel m Phi -> rel n Psi -> Included expr (proj1_sig Phi) (proj1_sig Psi) -> m <= n H0 : forall (m n : Kworlds M) (Phi Psi : {x : context | cP x}), rel m Phi -> rel n Psi -> m <= n -> Included expr (proj1_sig Phi) (proj1_sig Psi) sepcon_comm_impp : forall x y : expr, |-- x * y --> y * x sepcon_assoc1 : forall x y z : expr, |-- x * (y * z) --> x * y * z sepcon_mono : forall x1 x2 y1 y2 : expr, |-- x1 --> x2 -> |-- y1 --> y2 -> |-- x1 * y1 --> x2 * y2 andp_intros : forall x y : expr, |-- x --> y --> x && y andp_elim1 : forall x y : expr, |-- x && y --> x andp_elim2 : forall x y : expr, |-- x && y --> y orp_intros1 : forall x y : expr, |-- x --> x || y orp_intros2 : forall x y : expr, |-- y --> x || y orp_elim : forall x y z : expr, |-- (x --> z) --> (y --> z) --> x || y --> z falsep_elim : forall x : expr, |-- FF --> x modus_ponens : forall x y : expr, |-- x --> y -> |-- x -> |-- y axiom1 : forall x y : expr, |-- x --> y --> x axiom2 : forall x y z : expr, |-- (x --> y --> z) --> (x --> y) --> x --> z deduction_andp_intros : forall (Phi : context) (x y : expr), Phi |-- x -> Phi |-- y -> Phi |-- x && y deduction_andp_elim1 : forall (Phi : context) (x y : expr), Phi |-- x && y -> Phi |-- x deduction_andp_elim2 : forall (Phi : context) (x y : expr), Phi |-- x && y -> Phi |-- y deduction_orp_intros1 : forall (Phi : context) (x y : expr), Phi |-- x -> Phi |-- x || y deduction_orp_intros2 : forall (Phi : context) (x y : expr), Phi |-- y -> Phi |-- x || y deduction_orp_elim : forall (Phi : Ensemble expr) (x y z : expr), Phi;; x |-- z -> Phi;; y |-- z -> Phi;; x || y |-- z deduction_falsep_elim : forall (Phi : context) (x : expr), Phi |-- FF -> Phi |-- x deduction_modus_ponens : forall (Phi : context) (x y : expr), Phi |-- x -> Phi |-- x --> y -> Phi |-- y deduction_impp_intros : forall (Phi : Ensemble expr) (x y : expr), Phi;; x |-- y -> Phi |-- x --> y deduction_weaken : forall (Phi Psi : Ensemble expr) (x : expr), Included expr Phi Psi -> Phi |-- x -> Psi |-- x derivable_assum : forall (Phi : Ensemble expr) (x : expr), Ensembles.In expr Phi x -> Phi |-- x deduction_subst : forall (Phi Psi : context) (y : expr), (forall x : expr, Psi x -> Phi |-- x) -> Union expr Phi Psi |-- y -> Phi |-- y H1 : forall x : expr, empty_context |-- x -> |-- x H2 : forall x : expr, |-- x -> empty_context |-- x H3 : forall (Phi : context) (y : expr), (exists xs : list expr, Forall (fun x : expr => Phi x) xs /\\\\ |-- multi_imp xs y) -> Phi |-- y H4 : forall (Phi : context) (y : expr), Phi |-- y -> exists xs : list expr, Forall (fun x : expr => Phi x) xs /\\\\ |-- multi_imp xs y H5 : forall x y z : expr, |-- x --> y -* z -> |-- x * y --> z H6 : forall x y z : expr, |-- x * y --> z -> |-- x --> y -* z Unable to unify \"{x : ?worlds -> Prop | upwards_closed_Kdenote x}\" with \"SeparationAlgebra (Kworlds M)\".", "type": "cannot_unify", "handled": true}, {"ctx": ["qsimpl time: 2 use: sepcon."], "tactic": "apply join_comm.", "exn": "In environment L : Language minL : MinimumLanguage L pL : PropositionalLanguage L sepconL : SepconLanguage L wandL : WandLanguage L GammaP : Provable L GammaD : Derivable L MD : Model kMD : KripkeModel MD M : Kmodel R : Relation (Kworlds M) J : Join (Kworlds M) SM : Semantics L MD fsepconSM : SepconSemantics L MD M SM fwandSM : WandSemantics L MD M SM cP : context -> Prop rel : bijection (Kworlds M) {x : context | cP x} H_J : forall (m1 m2 m : Kworlds M) (Phi1 Phi2 Phi : {x : context | cP x}), rel m1 Phi1 -> rel m2 Phi2 -> rel m Phi -> (join m1 m2 m -> Included expr (context_sepcon (proj1_sig Phi1) (proj1_sig Phi2)) (proj1_sig Phi)) /\\\\ (Included expr (context_sepcon (proj1_sig Phi1) (proj1_sig Phi2)) (proj1_sig Phi) -> join m1 m2 m) AL_DC : at_least derivable_closed cP LIN_SR : forall (Phi : context) (Psi : {x : context | cP x}), Lindenbaum_constructable (context_sepcon_included_r Phi (proj1_sig Psi)) cP H : forall (m n : Kworlds M) (Phi Psi : {x : context | cP x}), rel m Phi -> rel n Psi -> Included expr (proj1_sig Phi) (proj1_sig Psi) -> m <= n H0 : forall (m n : Kworlds M) (Phi Psi : {x : context | cP x}), rel m Phi -> rel n Psi -> m <= n -> Included expr (proj1_sig Phi) (proj1_sig Psi) sepcon_comm_impp : forall x y : expr, |-- x * y --> y * x sepcon_assoc1 : forall x y z : expr, |-- x * (y * z) --> x * y * z sepcon_mono : forall x1 x2 y1 y2 : expr, |-- x1 --> x2 -> |-- y1 --> y2 -> |-- x1 * y1 --> x2 * y2 andp_intros : forall x y : expr, |-- x --> y --> x && y andp_elim1 : forall x y : expr, |-- x && y --> x andp_elim2 : forall x y : expr, |-- x && y --> y orp_intros1 : forall x y : expr, |-- x --> x || y orp_intros2 : forall x y : expr, |-- y --> x || y orp_elim : forall x y z : expr, |-- (x --> z) --> (y --> z) --> x || y --> z falsep_elim : forall x : expr, |-- FF --> x modus_ponens : forall x y : expr, |-- x --> y -> |-- x -> |-- y axiom1 : forall x y : expr, |-- x --> y --> x axiom2 : forall x y z : expr, |-- (x --> y --> z) --> (x --> y) --> x --> z deduction_andp_intros : forall (Phi : context) (x y : expr), Phi |-- x -> Phi |-- y -> Phi |-- x && y deduction_andp_elim1 : forall (Phi : context) (x y : expr), Phi |-- x && y -> Phi |-- x deduction_andp_elim2 : forall (Phi : context) (x y : expr), Phi |-- x && y -> Phi |-- y deduction_orp_intros1 : forall (Phi : context) (x y : expr), Phi |-- x -> Phi |-- x || y deduction_orp_intros2 : forall (Phi : context) (x y : expr), Phi |-- y -> Phi |-- x || y deduction_orp_elim : forall (Phi : Ensemble expr) (x y z : expr), Phi;; x |-- z -> Phi;; y |-- z -> Phi;; x || y |-- z deduction_falsep_elim : forall (Phi : context) (x : expr), Phi |-- FF -> Phi |-- x deduction_modus_ponens : forall (Phi : context) (x y : expr), Phi |-- x -> Phi |-- x --> y -> Phi |-- y deduction_impp_intros : forall (Phi : Ensemble expr) (x y : expr), Phi;; x |-- y -> Phi |-- x --> y deduction_weaken : forall (Phi Psi : Ensemble expr) (x : expr), Included expr Phi Psi -> Phi |-- x -> Psi |-- x derivable_assum : forall (Phi : Ensemble expr) (x : expr), Ensembles.In expr Phi x -> Phi |-- x deduction_subst : forall (Phi Psi : context) (y : expr), (forall x : expr, Psi x -> Phi |-- x) -> Union expr Phi Psi |-- y -> Phi |-- y H1 : forall x : expr, empty_context |-- x -> |-- x H2 : forall x : expr, |-- x -> empty_context |-- x H3 : forall (Phi : context) (y : expr), (exists xs : list expr, Forall (fun x : expr => Phi x) xs /\\\\ |-- multi_imp xs y) -> Phi |-- y H4 : forall (Phi : context) (y : expr), Phi |-- y -> exists xs : list expr, Forall (fun x : expr => Phi x) xs /\\\\ |-- multi_imp xs y H5 : forall x y z : expr, |-- x --> y -* z -> |-- x * y --> z H6 : forall x y z : expr, |-- x * y --> z -> |-- x --> y -* z Unable to unify \"?SA ?M14587 ?M14586 ?M14588\" with \"SeparationAlgebra (Kworlds M)\".", "type": "cannot_unify", "handled": true}, {"ctx": ["qsimpl time: 2 use: sepcon.", "qsimpl time: 2 use: sepcon,join_comm,wand."], "tactic": "apply join_assoc.", "exn": "In environment L : Language X0 : expr -> expr -> expr minL : MinimumLanguage L pL : PropositionalLanguage L sepconL : SepconLanguage L wandL : WandLanguage L GammaP : Provable L GammaD : Derivable L MD : Model kMD : KripkeModel MD M : Kmodel R : Relation (Kworlds M) J : Join (Kworlds M) SM : Semantics L MD fsepconSM : SepconSemantics L MD M SM fwandSM : WandSemantics L MD M SM cP : context -> Prop rel : bijection (Kworlds M) {x : context | cP x} H_J : forall (m1 m2 m : Kworlds M) (Phi1 Phi2 Phi : {x : context | cP x}), rel m1 Phi1 -> rel m2 Phi2 -> rel m Phi -> (join m1 m2 m -> Included expr (context_sepcon (proj1_sig Phi1) (proj1_sig Phi2)) (proj1_sig Phi)) /\\\\ (Included expr (context_sepcon (proj1_sig Phi1) (proj1_sig Phi2)) (proj1_sig Phi) -> join m1 m2 m) AL_DC : at_least derivable_closed cP LIN_SR : forall (Phi : context) (Psi : {x : context | cP x}), Lindenbaum_constructable (context_sepcon_included_r Phi (proj1_sig Psi)) cP H : forall (m n : Kworlds M) (Phi Psi : {x : context | cP x}), rel m Phi -> rel n Psi -> Included expr (proj1_sig Phi) (proj1_sig Psi) -> m <= n H0 : forall (m n : Kworlds M) (Phi Psi : {x : context | cP x}), rel m Phi -> rel n Psi -> m <= n -> Included expr (proj1_sig Phi) (proj1_sig Psi) sepcon_comm_impp : forall x y : expr, |-- x * y --> y * x sepcon_assoc1 : forall x y z : expr, |-- x * (y * z) --> x * y * z sepcon_mono : forall x1 x2 y1 y2 : expr, |-- x1 --> x2 -> |-- y1 --> y2 -> |-- x1 * y1 --> x2 * y2 andp_intros : forall x y : expr, |-- x --> y --> x && y andp_elim1 : forall x y : expr, |-- x && y --> x andp_elim2 : forall x y : expr, |-- x && y --> y orp_intros1 : forall x y : expr, |-- x --> x || y orp_intros2 : forall x y : expr, |-- y --> x || y orp_elim : forall x y z : expr, |-- (x --> z) --> (y --> z) --> x || y --> z falsep_elim : forall x : expr, |-- FF --> x modus_ponens : forall x y : expr, |-- x --> y -> |-- x -> |-- y axiom1 : forall x y : expr, |-- x --> y --> x axiom2 : forall x y z : expr, |-- (x --> y --> z) --> (x --> y) --> x --> z deduction_andp_intros : forall (Phi : context) (x y : expr), Phi |-- x -> Phi |-- y -> Phi |-- x && y deduction_andp_elim1 : forall (Phi : context) (x y : expr), Phi |-- x && y -> Phi |-- x deduction_andp_elim2 : forall (Phi : context) (x y : expr), Phi |-- x && y -> Phi |-- y deduction_orp_intros1 : forall (Phi : context) (x y : expr), Phi |-- x -> Phi |-- x || y deduction_orp_intros2 : forall (Phi : context) (x y : expr), Phi |-- y -> Phi |-- x || y deduction_orp_elim : forall (Phi : Ensemble expr) (x y z : expr), Phi;; x |-- z -> Phi;; y |-- z -> Phi;; x || y |-- z deduction_falsep_elim : forall (Phi : context) (x : expr), Phi |-- FF -> Phi |-- x deduction_modus_ponens : forall (Phi : context) (x y : expr), Phi |-- x -> Phi |-- x --> y -> Phi |-- y deduction_impp_intros : forall (Phi : Ensemble expr) (x y : expr), Phi;; x |-- y -> Phi |-- x --> y deduction_weaken : forall (Phi Psi : Ensemble expr) (x : expr), Included expr Phi Psi -> Phi |-- x -> Psi |-- x derivable_assum : forall (Phi : Ensemble expr) (x : expr), Ensembles.In expr Phi x -> Phi |-- x deduction_subst : forall (Phi Psi : context) (y : expr), (forall x : expr, Psi x -> Phi |-- x) -> Union expr Phi Psi |-- y -> Phi |-- y H1 : forall x : expr, empty_context |-- x -> |-- x H2 : forall x : expr, |-- x -> empty_context |-- x H3 : forall (Phi : context) (y : expr), (exists xs : list expr, Forall (fun x : expr => Phi x) xs /\\\\ |-- multi_imp xs y) -> Phi |-- y H4 : forall (Phi : context) (y : expr), Phi |-- y -> exists xs : list expr, Forall (fun x : expr => Phi x) xs /\\\\ |-- multi_imp xs y H5 : forall x y z : expr, |-- x --> y -* z -> |-- x * y --> z H6 : forall x y z : expr, |-- x * y --> z -> |-- x --> y -* z H7 : forall m1 m2 m : ?worlds, join m1 m2 m -> join m2 m1 m X : expr -> expr -> expr Unable to unify \"exists myz : ?worlds0, join ?M30034 ?M30035 myz /\\\\ join ?M30033 myz ?M30037\" with \"SeparationAlgebra (Kworlds M)\".", "type": "cannot_unify", "handled": true}, {"ctx": ["qsimpl time: 2 use: sepcon.", "qsimpl time: 2 use: sepcon,join_comm,wand.", "qsimpl time: 2 use: sepcon,join_comm,wand,join_assoc."], "tactic": "apply derivable_finite_witnessed.", "exn": "In environment L : Language X0 : expr -> expr -> expr minL : MinimumLanguage L pL : PropositionalLanguage L sepconL : SepconLanguage L wandL : WandLanguage L GammaP : Provable L GammaD : Derivable L MD : Model kMD : KripkeModel MD M : Kmodel R : Relation (Kworlds M) J : Join (Kworlds M) SM : Semantics L MD fsepconSM : SepconSemantics L MD M SM fwandSM : WandSemantics L MD M SM cP : context -> Prop rel : bijection (Kworlds M) {x : context | cP x} H_J : forall (m1 m2 m : Kworlds M) (Phi1 Phi2 Phi : {x : context | cP x}), rel m1 Phi1 -> rel m2 Phi2 -> rel m Phi -> (join m1 m2 m -> Included expr (context_sepcon (proj1_sig Phi1) (proj1_sig Phi2)) (proj1_sig Phi)) /\\\\ (Included expr (context_sepcon (proj1_sig Phi1) (proj1_sig Phi2)) (proj1_sig Phi) -> join m1 m2 m) AL_DC : at_least derivable_closed cP LIN_SR : forall (Phi : context) (Psi : {x : context | cP x}), Lindenbaum_constructable (context_sepcon_included_r Phi (proj1_sig Psi)) cP H : forall (m n : Kworlds M) (Phi Psi : {x : context | cP x}), rel m Phi -> rel n Psi -> Included expr (proj1_sig Phi) (proj1_sig Psi) -> m <= n H0 : forall (m n : Kworlds M) (Phi Psi : {x : context | cP x}), rel m Phi -> rel n Psi -> m <= n -> Included expr (proj1_sig Phi) (proj1_sig Psi) sepcon_comm_impp : forall x y : expr, |-- x * y --> y * x sepcon_assoc1 : forall x y z : expr, |-- x * (y * z) --> x * y * z sepcon_mono : forall x1 x2 y1 y2 : expr, |-- x1 --> x2 -> |-- y1 --> y2 -> |-- x1 * y1 --> x2 * y2 andp_intros : forall x y : expr, |-- x --> y --> x && y andp_elim1 : forall x y : expr, |-- x && y --> x andp_elim2 : forall x y : expr, |-- x && y --> y orp_intros1 : forall x y : expr, |-- x --> x || y orp_intros2 : forall x y : expr, |-- y --> x || y orp_elim : forall x y z : expr, |-- (x --> z) --> (y --> z) --> x || y --> z falsep_elim : forall x : expr, |-- FF --> x modus_ponens : forall x y : expr, |-- x --> y -> |-- x -> |-- y axiom1 : forall x y : expr, |-- x --> y --> x axiom2 : forall x y z : expr, |-- (x --> y --> z) --> (x --> y) --> x --> z deduction_andp_intros : forall (Phi : context) (x y : expr), Phi |-- x -> Phi |-- y -> Phi |-- x && y deduction_andp_elim1 : forall (Phi : context) (x y : expr), Phi |-- x && y -> Phi |-- x deduction_andp_elim2 : forall (Phi : context) (x y : expr), Phi |-- x && y -> Phi |-- y deduction_orp_intros1 : forall (Phi : context) (x y : expr), Phi |-- x -> Phi |-- x || y deduction_orp_intros2 : forall (Phi : context) (x y : expr), Phi |-- y -> Phi |-- x || y deduction_orp_elim : forall (Phi : Ensemble expr) (x y z : expr), Phi;; x |-- z -> Phi;; y |-- z -> Phi;; x || y |-- z deduction_falsep_elim : forall (Phi : context) (x : expr), Phi |-- FF -> Phi |-- x deduction_modus_ponens : forall (Phi : context) (x y : expr), Phi |-- x -> Phi |-- x --> y -> Phi |-- y deduction_impp_intros : forall (Phi : Ensemble expr) (x y : expr), Phi;; x |-- y -> Phi |-- x --> y deduction_weaken : forall (Phi Psi : Ensemble expr) (x : expr), Included expr Phi Psi -> Phi |-- x -> Psi |-- x derivable_assum : forall (Phi : Ensemble expr) (x : expr), Ensembles.In expr Phi x -> Phi |-- x deduction_subst : forall (Phi Psi : context) (y : expr), (forall x : expr, Psi x -> Phi |-- x) -> Union expr Phi Psi |-- y -> Phi |-- y H1 : forall x : expr, empty_context |-- x -> |-- x H2 : forall x : expr, |-- x -> empty_context |-- x H3 : forall (Phi : context) (y : expr), (exists xs : list expr, Forall (fun x : expr => Phi x) xs /\\\\ |-- multi_imp xs y) -> Phi |-- y H4 : forall (Phi : context) (y : expr), Phi |-- y -> exists xs : list expr, Forall (fun x : expr => Phi x) xs /\\\\ |-- multi_imp xs y H5 : forall x y z : expr, |-- x --> y -* z -> |-- x * y --> z H6 : forall x y z : expr, |-- x * y --> z -> |-- x --> y -* z H7 : forall m1 m2 m : ?worlds, join m1 m2 m -> join m2 m1 m X : expr -> expr -> expr H9 : forall mx my mz mxy mxyz : ?worlds1, join mx my mxy -> join mxy mz mxyz -> exists myz : ?worlds1, join my mz myz /\\\\ join mx myz mxyz X2 : expr -> expr -> expr H8 : forall m1 m2 m : ?worlds0, join m1 m2 m -> join m2 m1 m X1 : expr -> expr -> expr Unable to unify \"exists xs : list expr, Forall ?M55661 xs /\\\\ (fun x : expr => In x xs) |-- ?M55662\" with \"SeparationAlgebra (Kworlds M)\".", "type": "cannot_unify", "handled": true}]}, "chat": [], "original": "apply WeakSemantics.WeakSemanticsMono.sepcon. apply WeakSemantics.WeakSemanticsMono.wand. apply join_comm. apply join_assoc. apply derivable_finite_witnessed.", "succ": false}]