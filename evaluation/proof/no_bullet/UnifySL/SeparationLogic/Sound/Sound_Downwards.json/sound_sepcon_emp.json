[{"history": {"proof": "qsimpl time: 2. qsimpl time: 2 use: denote_sepcon.", "repairs": ["not_inductive_product", "cannot_apply_in"], "exceptions": [{"ctx": ["intros x m."], "tactic": "split.", "exn": "Not an inductive product.", "type": "not_inductive_product", "handled": true}, {"ctx": ["intros x m.", "qsimpl time: 2."], "tactic": "intros H.", "exn": "H is already used.", "type": "used_var", "handled": true}, {"ctx": ["intros x m.", "qsimpl time: 2."], "tactic": "intros H'.", "exn": "No product even after head-reduction.", "type": "no_product", "handled": true}, {"ctx": ["intros x m.", "qsimpl time: 2."], "tactic": "apply denote_sepcon in H.", "exn": "Unable to apply lemma of type \"forall x0 y : expr, Same_set (Kworlds ?M) (Kdenotation ?M (x0 * y)) (StrongSemantics.StrongSemantics.sepcon (Kdenotation ?M x0) (Kdenotation ?M y))\" on hypothesis of type \"Included (Kworlds M) (Kdenotation M emp) WeakSemantics.WeakSemantics.emp\".", "type": "cannot_apply_in", "handled": true}]}, "chat": [], "original": "intros x m. split. - intros H. apply denote_sepcon in H. apply sound_sepcon_assoc in H. auto. - intros H. apply denote_sepcon. apply sound_sepcon_assoc. auto.", "succ": false}]