[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": ["intros s1 s2 z.", "split.", "-", "intros [H1 H2].", "unfold exds in *."], "tactic": "split.", "exn": "Not an inductive product.", "type": "not_inductive_product", "handled": true}, {"ctx": ["intros s1 s2 z.", "split.", "-", "intros [H1 H2].", "unfold exds in *.", "qsimpl time: 1.", "induction s1.", "*", "contradiction.", "*", "destruct H1 as [H1 | H1].", "++", "unfold set_minus.", "destruct (exds_dec s2 z).", "**"], "tactic": "left.", "exn": "Not an inductive product.", "type": "not_inductive_product", "handled": true}]}, "chat": [], "original": "intros s1 s2 z. split. - intros [H1 H2]. unfold exds in *. split. + induction s1. * contradiction. * destruct H1 as [H1 | H1]. ++ unfold set_minus. destruct (exds_dec s2 z). ** left. auto. ** right. auto. ++ apply IHs1. apply H1. + intro H3. apply H2. eapply exds_set_minus. * auto. * intro Contra. apply H3. apply exds_Ds_exds. apply Contra. - intros [H1 H2]. unfold exds in *. split. + induction s1. * contradiction. * destruct H1 as [H1 | H1]. ++ unfold set_minus. destruct (exds_dec s2 z). ** left. auto. ** right. auto. ++ apply IHs1. apply H1. + intro H3. apply H2. eapply exds_set_minus. * auto. * intro Contra. apply H3. eapply not_exds_Ds_bis. ++ intro Contra'. apply H3. apply exds_Ds_exds. apply Contra'. ++ apply Contra.", "succ": false}]