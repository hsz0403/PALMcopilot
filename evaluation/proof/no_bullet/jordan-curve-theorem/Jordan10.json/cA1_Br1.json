[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": ["intros m x x' z Hmap.", "unfold cA.", "unfold Br1."], "tactic": "assert (H: succ m zero x = true).", "exn": "In environment m : fmap x, x', z : dart Hmap : inv_hmap m The term \"true\" has type \"bool\" while it is expected to have type \"Prop\".", "type": "wrong_type", "handled": true}, {"ctx": ["intros m x x' z Hmap.", "unfold cA.", "unfold Br1.", "qsimpl use: zero,true,succ."], "tactic": "apply double_link_succ; auto.", "exn": "In environment P : fmap -> dim -> dart -> Prop H : bool d : dim m : fmap x, x', z : dart Hmap : inv_hmap m Unable to unify \"succ ?M2370 zero ?M2371 \\\\/ succ ?M2370 zero ?M2372\" with \"(fix cA (m : fmap) (k : dim) (z : dart) {struct m} : dart := match m with | V => nil | I m0 x _ _ => if eq_dart_dec x z then z else cA m0 k z | L m0 k0 x y => if eq_dim_dec k0 k then if eq_dart_dec x z then y else if eq_dart_dec (cA_1 m0 k y) z then cA m0 k x else cA m0 k z else cA m0 k z end with cA_1 (m : fmap) (k : dim) (z : dart) {struct m} : dart := match m with | V => nil | I m0 x _ _ => if eq_dart_dec x z then z else cA_1 m0 k z | L m0 k0 x y => if eq_dim_dec k0 k then if eq_dart_dec y z then x else if eq_dart_dec (cA m0 k x) z then cA_1 m0 k y else cA_1 m0 k z else cA_1 m0 k z end for cA) (if succ_dec m d x then if succ_dec m d x' then if eq_dim_dec d d then if eq_dart_dec (top m d x) x' then B m d x else L (B (B m d x) d x') d (top m d x) (bottom m d x) else L (B (B m d x) d x') d (top m d x) (bottom m d x) else B m d x else B m d x') one z = (fix cA (m : fmap) (k : dim) (z : dart) {struct m} : dart := match m with | V => nil | I m0 x _ _ => if eq_dart_dec x z then z else cA m0 k z | L m0 k0 x y => if eq_dim_dec k0 k then if eq_dart_dec x z then y else if eq_dart_dec (cA_1 m0 k y) z then cA m0 k x else cA m0 k z else cA m0 k z end with cA_1 (m : fmap) (k : dim) (z : dart) {struct m} : dart := match m with | V => nil | I m0 x _ _ => if eq_dart_dec x z then z else cA_1 m0 k z | L m0 k0 x y => if eq_dim_dec k0 k then if eq_dart_dec y z then x else if eq_dart_dec (cA m0 k x) z then cA_1 m0 k y else cA_1 m0 k z else cA_1 m0 k z end for cA) m one z\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros m x x' z Hmap.", "unfold cA.", "unfold Br1.", "qsimpl use: zero,true,succ.", "qsimpl use: zero,true,succ,double_link_succ."], "tactic": "destruct (succ_dec m zero x) as [H0 | H0]; rewrite H0.", "exn": "H0 is already used.", "type": "used_var", "handled": true}, {"ctx": ["intros m x x' z Hmap.", "unfold cA.", "unfold Br1.", "qsimpl use: zero,true,succ.", "qsimpl use: zero,true,succ,double_link_succ."], "tactic": "destruct (succ_dec m zero x) as [H0' | H0]; rewrite H0.", "exn": "H0 is already used.", "type": "used_var", "handled": true}]}, "chat": [], "original": "intros m x x' z Hmap. unfold cA. unfold Br1. assert (H: succ m zero x = true). { apply double_link_succ; auto. } destruct (succ_dec m zero x) as [H0 | H0]; rewrite H0. - destruct (succ_dec m zero x') as [H1 | H1]; rewrite H1. + apply cA0_Br1; auto. + apply cA1_Br1; auto. - apply not_succ_br; auto.", "succ": false}]