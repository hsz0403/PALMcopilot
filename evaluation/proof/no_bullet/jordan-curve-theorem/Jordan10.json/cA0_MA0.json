[{"history": {"proof": "intros m z. induction m. - simpl. reflexivity. - unfold cA. destruct (eq_dart_dec nil z) eqn:E. + reflexivity. + qsimpl. - unfold cA, MA0.f. reflexivity.", "repairs": ["", "", "", "", "", "", "", "ref_not_found", "", "", "", "cannot_unify", "", "", ""], "exceptions": [{"ctx": ["intros m z.", "induction m.", "-", "simpl.", "reflexivity.", "-", "unfold cA."], "tactic": "destruct (eq_dart_dec x z) eqn:E.", "exn": "The reference x was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros m z.", "induction m.", "-", "simpl.", "reflexivity.", "-", "unfold cA.", "destruct (eq_dart_dec nil z) eqn:E.", "+", "reflexivity.", "+"], "tactic": "apply IHm.", "exn": "In environment m : fmap d : dart t : tag p : point z : dart IHm : cA m zero z = MA0.f m z n : nil <> z E : eq_dart_dec nil z = right n Unable to unify \"cA m zero z = MA0.f m z\" with \"(if eq_dart_dec d z then z else (fix cA (m : fmap) (k : dim) (z : dart) {struct m} : dart := match m with | V => nil | I m0 x _ _ => if eq_dart_dec x z then z else cA m0 k z | L m0 k0 x y => if eq_dim_dec k0 k then if eq_dart_dec x z then y else if eq_dart_dec (cA_1 m0 k y) z then cA m0 k x else cA m0 k z else cA m0 k z end with cA_1 (m : fmap) (k : dim) (z : dart) {struct m} : dart := match m with | V => nil | I m0 x _ _ => if eq_dart_dec x z then z else cA_1 m0 k z | L m0 k0 x y => if eq_dim_dec k0 k then if eq_dart_dec y z then x else if eq_dart_dec (cA m0 k x) z then cA_1 m0 k y else cA_1 m0 k z else cA_1 m0 k z end for cA) m zero z) = MA0.f (I m d t p) z\".", "type": "cannot_unify", "handled": true}]}, "chat": [], "original": "intros m z. induction m. - simpl. reflexivity. - unfold cA. destruct (eq_dart_dec x z) eqn:E. + reflexivity. + apply IHm. - unfold cA, MA0.f. reflexivity.", "succ": true}]