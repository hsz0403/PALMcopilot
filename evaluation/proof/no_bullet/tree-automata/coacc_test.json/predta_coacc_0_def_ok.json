[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": ["intros d d' m.", "unfold ensemble_base, predta_coacc_0.", "induction d'.", "-", "intros; simpl; destruct m; apply map_mini_appartient.", "-", "destruct m.", "+", "apply map_mini_appartient.", "+"], "tactic": "destruct m.", "exn": "The reference m was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros d d' m.", "unfold ensemble_base, predta_coacc_0.", "induction d'.", "-", "intros; simpl; destruct m; apply map_mini_appartient.", "-", "destruct m.", "+", "apply map_mini_appartient.", "+", "destruct ad_in_list.", "*"], "tactic": "simpl; destruct (a =? a0)%N eqn:E1.", "exn": "In environment d : preDTA a : ad a0 : state a1 : ad b : bool The term \"a0\" has type \"state\" while it is expected to have type \"N\".", "type": "wrong_type", "handled": true}, {"ctx": ["intros d d' m.", "unfold ensemble_base, predta_coacc_0.", "induction d'.", "-", "intros; simpl; destruct m; apply map_mini_appartient.", "-", "destruct m.", "+", "apply map_mini_appartient.", "+", "destruct ad_in_list.", "*", "qsimpl use: N."], "tactic": "simpl; apply st_coacc_def_ok.", "exn": "No such goal. Focus next goal with bullet *.", "type": "next_goal", "handled": true}, {"ctx": ["intros d d' m.", "unfold ensemble_base, predta_coacc_0.", "induction d'.", "-", "intros; simpl; destruct m; apply map_mini_appartient.", "-", "destruct m.", "+", "apply map_mini_appartient.", "+", "destruct ad_in_list.", "*", "qsimpl use: N.", "*"], "tactic": "simpl; apply map_mini_appartient.", "exn": "In environment d : preDTA a : ad a0 : state a1 : ad b : bool Unable to unify \"(fix domain_equal (A B : Set) (m0 : Map A) (m1 : Map B) {struct m1} : Prop := match m0 with | @M0 _ => match m1 with | @M0 _ => True | _ => False end | @M1 _ a _ => match m1 with | @M1 _ b _ => a = b | _ => False end | @M2 _ a b => match m1 with | @M2 _ c d => domain_equal A B a c /\\\\ domain_equal A B b d | _ => False end end) ?M1885 bool ?M1886 (map_mini ?M1885 ?M1886)\" with \"list ad\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros d d' m.", "unfold ensemble_base, predta_coacc_0.", "induction d'.", "-", "intros; simpl; destruct m; apply map_mini_appartient.", "-", "destruct m.", "+", "apply map_mini_appartient.", "+", "destruct ad_in_list.", "*", "qsimpl use: N.", "*", "qsimpl use: N,map_mini_appartient."], "tactic": "-", "exn": "Wrong bullet -: Expecting *.", "type": "wrong_bullet", "handled": true}, {"ctx": ["intros d d' m.", "unfold ensemble_base, predta_coacc_0.", "induction d'.", "-", "intros; simpl; destruct m; apply map_mini_appartient.", "-", "destruct m.", "+", "apply map_mini_appartient.", "+", "destruct ad_in_list.", "*", "qsimpl use: N.", "*", "qsimpl use: N,map_mini_appartient.", "*"], "tactic": "intros; apply map_mini_appartient.", "exn": "In environment d : preDTA a : ad a0 : state a1 : ad b : bool Unable to unify \"(fix domain_equal (A B : Set) (m0 : Map A) (m1 : Map B) {struct m1} : Prop := match m0 with | @M0 _ => match m1 with | @M0 _ => True | _ => False end | @M1 _ a _ => match m1 with | @M1 _ b _ => a = b | _ => False end | @M2 _ a b => match m1 with | @M2 _ c d => domain_equal A B a c /\\\\ domain_equal A B b d | _ => False end end) ?M1898 bool ?M1899 (map_mini ?M1898 ?M1899)\" with \"(fix domain_equal (A B : Set) (m0 : Map A) (m1 : Map B) {struct m1} : Prop := match m0 with | @M0 _ => match m1 with | @M0 _ => True | _ => False end | @M1 _ a _ => match m1 with | @M1 _ b _ => a = b | _ => False end | @M2 _ a b => match m1 with | @M2 _ c d => domain_equal A B a c /\\\\ domain_equal A B b d | _ => False end end) state bool d (if (a =? a1)%N && b then st_coacc d a0 else map_mini state d)\".", "type": "cannot_unify", "handled": true}]}, "chat": [], "original": "intros d d' m. unfold ensemble_base, predta_coacc_0. induction d'. - intros; simpl; destruct m; apply map_mini_appartient. - destruct m. + apply map_mini_appartient. + destruct m. * simpl; destruct (a =? a0)%N eqn:E1. { simpl; apply st_coacc_def_ok. } { apply map_mini_appartient. } * simpl; apply map_mini_appartient. - intros; apply map_mini_appartient.", "succ": false}]