[{"history": {"proof": "", "repairs": [], "exceptions": []}, "chat": [], "original": "Inductive btree : Set := | leaf : A -> btree | node : btree -> btree -> btree. Inductive compute_code : btree -> list (A * list bool) := | leaf_code : forall a, compute_code (leaf a) [((a, []), true)] | node_code : forall a1 a2 b1 b2, compute_code b1 -> compute_code b2 -> compute_code (node b1 b2) ((a1, (b1 :: b2)) :: (a2, b1 :: b2) :: (a2, b2 :: b1 :: b2)). Fixpoint flatten (p : btree) : list A := match p with | leaf a => [a] | node l r => flatten l ++ flatten r end. Fixpoint inb (p : btree) (a : A) : Prop := In a (flatten p).", "hammer_times": 1, "succ": false}]