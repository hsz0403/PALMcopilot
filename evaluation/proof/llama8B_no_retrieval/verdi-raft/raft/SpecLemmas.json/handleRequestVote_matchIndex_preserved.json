[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": ["intros n st t c li lt st' ms H.", "unfold handleRequestVote in H.", "destruct H as [H1 H2].", "unfold matchIndex_preserved."], "tactic": "unfold RaftState.raft_data in *.", "exn": "Cannot coerce RaftState.raft_data to an evaluable reference.", "type": "not_evaluable", "handled": true}, {"ctx": ["intros n st t c li lt st' ms H.", "unfold handleRequestVote in H.", "destruct H as [H1 H2].", "unfold matchIndex_preserved.", "qsimpl time: 1 use: raft_data."], "tactic": ["destruct st as [[term' entry' log' serverType' data' clientId'] output'].", ""], "exn": "Expects a disjunctive pattern with 2 branches.", "type": "num_branch", "handled": false}]}, "chat": [], "original": "intros n st t c li lt st' ms H. unfold handleRequestVote in H. destruct H as [H1 H2]. unfold matchIndex_preserved. unfold RaftState.raft_data in *. destruct st as [[term' entry' log' serverType' data' clientId'] output']. destruct st' as [[term'' entry'' log'' serverType'' data'' clientId'' output'']]. unfold matchIndex in *. rewrite <- H1 in H2. unfold RaftState.matchIndex in *. unfold RaftState.RaftState in *. unfold RaftState.RaftStateData in *. unfold RaftState.RaftStateDataData in *. unfold RaftState.RaftStateDataLog in *. unfold RaftState.RaftStateDataTerm in *. destruct H2 as [H2 H3]. apply H3. reflexivity.", "hammer_times": 6, "succ": false}]