[{"history": {"proof": "qsimpl time: 1 use: CombLinear.", "repairs": ["not_evaluable"], "exceptions": [{"ctx": [], "tactic": "unfold CombLinear.", "exn": "Cannot coerce CombLinear to an evaluable reference.", "type": "not_evaluable", "handled": true}, {"ctx": ["qsimpl time: 1 use: CombLinear."], "tactic": "intros Q p q HCombLin p' q' HCombLin'.", "exn": "Q is already used.", "type": "used_var", "handled": true}, {"ctx": ["qsimpl time: 1 use: CombLinear."], "tactic": "intros Q' p q HCombLin p' q' HCombLin'.", "exn": "p is already used.", "type": "used_var", "handled": true}, {"ctx": ["qsimpl time: 1 use: CombLinear."], "tactic": "intros Q' p'' q HCombLin p' q' HCombLin'.", "exn": "q is already used.", "type": "used_var", "handled": true}, {"ctx": ["qsimpl time: 1 use: CombLinear."], "tactic": "intros Q' p'' q'' HCombLin p' q' HCombLin'.", "exn": "No product even after head-reduction.", "type": "no_product", "handled": true}, {"ctx": ["qsimpl time: 1 use: CombLinear."], "tactic": "induction HCombLin; try solve [ inversion HCombLin'; eauto ].", "exn": "The reference HCombLin was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["qsimpl time: 1 use: CombLinear.", "induction Q; try solve [ inversion Q'; eauto ].", "-"], "tactic": "inversion HCombLin'; eauto.", "exn": "No such hypothesis: HCombLin'", "type": "no_hypos", "handled": true}, {"ctx": ["qsimpl time: 1 use: CombLinear.", "induction Q; try solve [ inversion Q'; eauto ].", "-"], "tactic": "-", "exn": "Wrong bullet -: Current bullet - is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["qsimpl time: 1 use: CombLinear.", "induction Q; try solve [ inversion Q'; eauto ].", "-", "shelve.", "-"], "tactic": "inversion HCombLin'; eauto.", "exn": "No such hypothesis: HCombLin'", "type": "no_hypos", "handled": true}, {"ctx": ["qsimpl time: 1 use: CombLinear.", "induction Q; try solve [ inversion Q'; eauto ].", "-", "shelve.", "-"], "tactic": "-", "exn": "Wrong bullet -: Current bullet - is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["qsimpl time: 1 use: CombLinear.", "induction Q; try solve [ inversion Q'; eauto ].", "-", "shelve.", "-", "shelve."], "tactic": "-", "exn": "Wrong bullet -: No more subgoals.", "type": "no_more_subgoals", "handled": true}]}, "chat": [{"role": "user", "content": "I will give you a Coq proof state, including both hypotheses and a specific goal and your need to prove it. Your response should be a singular code block of Coq proof starting with \"```coq\n\", ending with \"Qed.```\", without any additional explanation or commentary. Follow to these guidelines:\nIntroduce variables using unique names to avoid any conflicts.\nKeep each command distinct and separated, avoid concatenations like ';' or '[cmd|cmd]'.\nOrganize your proof with bullets like '-', '+', and '*' instead of braces ({, }). Shift to their double symbols like '--' and '++', when necessary.\nEffectively use given premises, follow the syntax and structure demonstrated in the examples provided.\n\nExample 1:\n\nHypotheses:\nn, m: nat\nIHn: m + n = n + m\n\nGoal:\nm + S n = S n + m\n\nProof:\n```coq\nsimpl. rewrite <- IHn. auto.\nQed.```\n\nExample 2:\nHypotheses:\n\nGoal:\nforall n m : nat, m + n = n + m\n\n```coq\nintros n m. induction n.\n- simpl. auto.\n- simpl. rewrite <- IHn. auto.\nQed.```\n\nSolve This Proof State:\n\nHypotheses:\nA: Set\nA1: A\nA0: A\neqA: A -> A -> Prop\nplusA: A -> A -> A\ninvA: A -> A\nmultA: A -> A -> A\nminusA: A -> A -> A\ndivA: A -> forall b : A, ~ eqA b A0 -> A\ncs: CoefStructure A A0 A1 eqA plusA invA minusA multA divA\neqA_dec: forall a b : A, {eqA a b} + {~ eqA a b}\nn: nat\nltM: mon n -> mon n -> Prop\nltM_dec: forall a b : mon n, {ltM a b} + {ltM b a} + {a = b}\nos: OrderStructure (mon n) (zero_mon n) ltM (mult_mon n)\n\nGoal:\nforall (Q : list (poly A0 eqA ltM)) (p : list (Term A n)), CombLinear Q p -> forall q : list (Term A n), CombLinear Q q -> CombLinear Q (pluspf A0 (eqA:=eqA) plusA eqA_dec (ltM:=ltM) ltM_dec p q)\n\nPremises:\nzero_mon : forall d : nat, mon d\nInductive mon : nat -> Set := n_0 : mon 0 | c_n : forall d : nat, nat -> mon d -> mon (S d) Arguments mon _%nat_scope Arguments c_n (_ _)%nat_scope\nmult_mon : forall d : nat, mon d -> mon d -> mon d\nRecord Q : Set := Qmake { Qnum : BinNums.Z; Qden : BinNums.positive } Arguments QArith_base.Qmake _%Z_scope _%positive_scope\npoly : forall A : Set, A -> (A -> A -> Prop) -> forall n : nat, (mon n -> mon n -> Prop) -> Set\nCoefStructure : forall (A : Set) (A0 : A), A -> forall eqA : A -> A -> Prop, (A -> A -> A) -> (A -> A) -> (A -> A -> A) -> (A -> A -> A) -> (A -> forall b : A, ~ eqA b A0 -> A) -> Prop\nOrderStructure : forall A : Set, A -> (A -> A -> Prop) -> (A -> A -> A) -> Prop\nInductive CombLinear (Q : list (poly A0 eqA ltM)) : list (Term A n) -> Prop := CombLinear_0 : CombLinear Q (pO A n) | CombLinear_1 : forall (a : Term A n) (p q s : list (Term A n)), ~ zeroP A0 eqA (n:=n) a -> inPolySet A A0 eqA n ltM q Q -> CombLinear Q p -> eqP A eqA n s (pluspf A0 (eqA:=eqA) plusA eqA_dec (ltM:=ltM) ltM_dec (mults multA (n:=n) a q) p) -> CombLinear Q s Arguments CombLinear (_ _)%list_scope Arguments CombLinear_\nInductive list (A : Type) : Type := nil : list A | cons : A -> list A -> list A Arguments list _%type_scope Arguments nil {A}%type_scope Arguments cons {A}%type_scope a l%list_scope : rename\npluspf : forall A : Set, A -> forall eqA : A -> A -> Prop, (A -> A -> A) -> (forall a b : A, {eqA a b} + {~ eqA a b}) -> forall (n : nat) (ltM : mon n -> mon n -> Prop), (forall a b : mon n, {ltM a b} + {ltM b a} + {a = b}) -> list (Term A n) -> list (Term A n) -> list (Term A n)\nrep_plus_reduce : forall (A : Set) (A0 A1 : A) (eqA : A -> A -> Prop) (plusA : A -> A -> A) (invA : A -> A) (minusA multA : A -> A -> A) (divA : A -> forall b : A, ~ eqA b A0 -> A), CoefStructure A A0 A1 eqA plusA invA minusA multA divA -> forall (eqA_dec : forall a b : A, {eqA a b} + {~ eqA a b}) (n : nat) (ltM : mon n -> mon n -> Prop) (ltM_dec : forall a b : mon n, {ltM a b} + {ltM b a} + {a = b}), OrderStructure (mon n) (zero_mon n) ltM (mult_mon n) -> forall (Q : list (...\nreduce_plus_top : forall (A : Set) (A0 A1 : A) (eqA : A -> A -> Prop) (plusA : A -> A -> A) (invA : A -> A) (minusA multA : A -> A -> A) (divA : A -> forall b : A, ~ eqA b A0 -> A), CoefStructure A A0 A1 eqA plusA invA minusA multA divA -> forall (eqA_dec : forall a b : A, {eqA a b} + {~ eqA a b}) (n : nat) (ltM : mon n -> mon n -> Prop) (ltM_dec : forall a b : mon n, {ltM a b} + {ltM b a} + {a = b}), OrderStructure (mon n) (zero_mon n) ltM (mult_mon n) -> forall (Q : list (...\nred_plus_zero_reduce : forall (A : Set) (A0 A1 : A) (eqA : A -> A -> Prop) (plusA : A -> A -> A) (invA : A -> A) (minusA multA : A -> A -> A) (divA : A -> forall b : A, ~ eqA b A0 -> A), CoefStructure A A0 A1 eqA plusA invA minusA multA divA ->...-> exists r1 : list (Term A n), reduceplus A A0 A1 eqA invA minusA multA divA eqA_dec n ltM ltM_dec Q p r1 /\\ reduceplus A A0 A1 eqA invA minusA multA divA eqA_dec n ltM ltM_dec Q q (mults multA (n:=n) (invTerm invA (n:=n) (T1 A1 n)) r1)\none_plus_reduceplus : forall (A : Set) (A0 A1 : A) (eqA : A -> A -> Prop) (plusA : A -> A -> A) (invA : A -> A) (minusA multA : A -> A -> A) (divA : A -> forall b : A, ~ eqA b A0 -> A), CoefStructure A A0 A1 eqA plusA invA minusA multA divA -> forall (eqA_dec : forall a b : A, {eqA a b} + {~ eqA a b}) (n : nat) (ltM : mon n -> mon n -> Prop) (ltM_dec : forall a b : mon n, {ltM a b} + {ltM b a} + {a = b}), OrderStructure (mon n) (zero_mon n) ltM (mult_mon n) -> forall (Q : list...\nrep_plus_zero_reduce : forall (A : Set) (A0 A1 : A) (eqA : A -> A -> Prop) (plusA : A -> A -> A) (invA : A -> A) (minusA multA : A -> A -> A) (divA : A -> forall b : A, ~ eqA b A0 -> A), CoefStructure A A0 A1 eqA plusA invA minusA multA divA ->...-> exists r1 : list (Term A n), reduceplus A A0 A1 eqA invA minusA multA divA eqA_dec n ltM ltM_dec Q p r1 /\\ reduceplus A A0 A1 eqA invA minusA multA divA eqA_dec n ltM ltM_dec Q q (mults multA (n:=n) (invTerm invA (n:=n) (T1 A1 n)) r1)\nirreducible_eqp_com : forall (A : Set) (A0 A1 : A) (eqA : A -> A -> Prop) (plusA : A -> A -> A) (invA : A -> A) (minusA multA : A -> A -> A) (divA : A -> forall b : A, ~ eqA b A0 -> A), CoefStructure A A0 A1 eqA plusA invA minusA multA divA ->...-> irreducible A A0 A1 eqA invA minusA multA divA eqA_dec n ltM ltM_dec Q q\nred_minus_zero_reduce : forall (A : Set) (A0 A1 : A) (eqA : A -> A -> Prop) (plusA : A -> A -> A) (invA : A -> A) (minusA multA : A -> A -> A) (divA : A -> forall b : A, ~ eqA b A0 -> A), CoefStructure A A0 A1 eqA plusA invA minusA multA divA ->...-> exists r1 : list (Term A n), reduceplus A A0 A1 eqA invA minusA multA divA eqA_dec n ltM ltM_dec Q p r1 /\\ reduceplus A A0 A1 eqA invA minusA multA divA eqA_dec n ltM ltM_dec Q q r1\nreduceplus_mults_invf0 : forall (A : Set) (A0 A1 : A) (eqA : A -> A -> Prop) (plusA : A -> A -> A) (invA : A -> A) (minusA multA : A -> A -> A) (divA : A -> forall b : A, ~ eqA b A0 -> A), CoefStructure A A0 A1 eqA plusA invA minusA multA divA ->...-> reduceplus A A0 A1 eqA invA minusA multA divA eqA_dec n ltM ltM_dec Q r s\nreduce_inv2 : forall (A : Set) (A0 A1 : A) (eqA : A -> A -> Prop) (plusA : A -> A -> A) (invA : A -> A) (minusA multA : A -> A -> A) (divA : A -> forall b : A, ~ eqA b A0 -> A), CoefStructure A A0 A1 eqA plusA invA minusA multA divA ->...-> exists (x : list (Term A n)) (a : Term A n), ~ zeroP A0 eqA (n:=n) a /\\ inPolySet A A0 eqA n ltM x Q /\\ canonical A0 eqA ltM x /\\ eqP A eqA n q (minuspf A A0 A1 eqA invA minusA multA eqA_dec n ltM ltM_dec p (mults multA (n:=n) a x))\nfconfl_top : forall (A : Set) (A0 A1 : A) (eqA : A -> A -> Prop) (plusA : A -> A -> A) (invA : A -> A) (minusA multA : A -> A -> A) (divA : A -> forall b : A, ~ eqA b A0 -> A), CoefStructure A A0 A1 eqA plusA invA minusA multA divA ->...-> Confluent A A0 A1 eqA invA minusA multA divA eqA_dec n ltM ltM_dec Q p q r\nreduce_mults : forall (A : Set) (A0 A1 : A) (eqA : A -> A -> Prop) (plusA : A -> A -> A) (invA : A -> A) (minusA multA : A -> A -> A) (divA : A -> forall b : A, ~ eqA b A0 -> A), CoefStructure A A0 A1 eqA plusA invA minusA multA divA ->...-> reduce A A0 A1 eqA invA minusA multA divA eqA_dec n ltM ltM_dec Q (mults multA (n:=n) a p) (mults multA (n:=n) a q)\nreduceplus_mults : forall (A : Set) (A0 A1 : A) (eqA : A -> A -> Prop) (plusA : A -> A -> A) (invA : A -> A) (minusA multA : A -> A -> A) (divA : A -> forall b : A, ~ eqA b A0 -> A), CoefStructure A A0 A1 eqA plusA invA minusA multA divA ->...-> reduceplus A A0 A1 eqA invA minusA multA divA eqA_dec n ltM ltM_dec Q (mults multA (n:=n) a p) (mults multA (n:=n) a q)\ncanonical_reduce : forall (A : Set) (A0 A1 : A) (eqA : A -> A -> Prop) (plusA : A -> A -> A) (invA : A -> A) (minusA multA : A -> A -> A) (divA : A -> forall b : A, ~ eqA b A0 -> A), CoefStructure A A0 A1 eqA plusA invA minusA multA divA -> forall (eqA_dec : forall a b : A, {eqA a b} + {~ eqA a b}) (n : nat) (ltM : mon n -> mon n -> Prop) (ltM_dec : forall a b : mon n, {ltM a b} + {ltM b a} + {a = b}), OrderStructure (mon n) (zero_mon n) ltM (mult_mon n) ->...-> canonical A0 eqA ltM q\ncanonical_reduceplus : forall (A : Set) (A0 A1 : A) (eqA : A -> A -> Prop) (plusA : A -> A -> A) (invA : A -> A) (minusA multA : A -> A -> A) (divA : A -> forall b : A, ~ eqA b A0 -> A), CoefStructure A A0 A1 eqA plusA invA minusA multA divA -> forall (eqA_dec : forall a b : A, {eqA a b} + {~ eqA a b}) (n : nat) (ltM : mon n -> mon n -> Prop) (ltM_dec : forall a b : mon n, {ltM a b} + {ltM b a} + {a = b}), OrderStructure (mon n) (zero_mon n) ltM (mult_mon n) ->...-> canonical A0 eqA ltM q\nreducestar_eqp_com : forall (A : Set) (A0 A1 : A) (eqA : A -> A -> Prop) (plusA : A -> A -> A) (invA : A -> A) (minusA multA : A -> A -> A) (divA : A -> forall b : A, ~ eqA b A0 -> A), CoefStructure A A0 A1 eqA plusA invA minusA multA divA ->...-> reducestar A A0 A1 eqA invA minusA multA divA eqA_dec n ltM ltM_dec Q r s\nreduce_eqp_com : forall (A : Set) (A0 A1 : A) (eqA : A -> A -> Prop) (plusA : A -> A -> A) (invA : A -> A) (minusA multA : A -> A -> A) (divA : A -> forall b : A, ~ eqA b A0 -> A), CoefStructure A A0 A1 eqA plusA invA minusA multA divA ->...-> reduce A A0 A1 eqA invA minusA multA divA eqA_dec n ltM ltM_dec Q r s\nreduceplus_eqp_com : forall (A : Set) (A0 A1 : A) (eqA : A -> A -> Prop) (plusA : A -> A -> A) (invA : A -> A) (minusA multA : A -> A -> A) (divA : A -> forall b : A, ~ eqA b A0 -> A), CoefStructure A A0 A1 eqA plusA invA minusA multA divA ->...-> reduceplus A A0 A1 eqA invA minusA multA divA eqA_dec n ltM ltM_dec Q r s\nreduceplus_mults_inv : forall (A : Set) (A0 A1 : A) (eqA : A -> A -> Prop) (plusA : A -> A -> A) (invA : A -> A) (minusA multA : A -> A -> A) (divA : A -> forall b : A, ~ eqA b A0 -> A), CoefStructure A A0 A1 eqA plusA invA minusA multA divA ->...-> reduceplus A A0 A1 eqA invA minusA multA divA eqA_dec n ltM ltM_dec Q p q\nCombLinear_ind : forall (Q : list (poly A0 eqA ltM)) (P : list (Term A n) -> Prop), P (pO A n) -> (forall (a : Term A n) (p q s : list (Term A n)), ~ zeroP A0 eqA (n:=n) a -> inPolySet A A0 eqA n ltM q Q -> CombLinear Q p -> P p -> eqP A eqA n s (pluspf A0 (eqA:=eqA) plusA eqA_dec (ltM:=ltM) ltM_dec (mults multA (n:=n) a q) p) -> P s) -> forall l : list (Term A n), CombLinear Q l -> P l\nCombLinear_sind : forall (Q : list (poly A0 eqA ltM)) (P : list (Term A n) -> SProp), P (pO A n) -> (forall (a : Term A n) (p q s : list (Term A n)), ~ zeroP A0 eqA (n:=n) a -> inPolySet A A0 eqA n ltM q Q -> CombLinear Q p -> P p -> eqP A eqA n s (pluspf A0 (eqA:=eqA) plusA eqA_dec (ltM:=ltM) ltM_dec (mults multA (n:=n) a q) p) -> P s) -> forall l : list (Term A n), CombLinear Q l -> P l\nltP_reduce : forall (A : Set) (A0 A1 : A) (eqA : A -> A -> Prop) (plusA : A -> A -> A) (invA : A -> A) (minusA multA : A -> A -> A) (divA : A -> forall b : A, ~ eqA b A0 -> A), CoefStructure A A0 A1 eqA plusA invA minusA multA divA ->...-> ltP (A:=A) ltM q p\nreduce_inv : forall (A : Set) (A0 A1 : A) (eqA : A -> A -> Prop) (plusA : A -> A -> A) (invA : A -> A) (minusA multA : A -> A -> A) (divA : A -> forall b : A, ~ eqA b A0 -> A), CoefStructure A A0 A1 eqA plusA invA minusA multA divA ->...-> reduce A A0 A1 eqA invA minusA multA divA eqA_dec n ltM ltM_dec Q p q\nreduceplus_skip : forall (A : Set) (A0 A1 : A) (eqA : A -> A -> Prop) (plusA : A -> A -> A) (invA : A -> A) (minusA multA : A -> A -> A) (divA : A -> forall b : A, ~ eqA b A0 -> A), CoefStructure A A0 A1 eqA plusA invA minusA multA divA ->...-> reduceplus A A0 A1 eqA invA minusA multA divA eqA_dec n ltM ltM_dec Q (pX (A:=A) (n:=n) a p) (pX (A:=A) (n:=n) b q)\norder_reduceplus : forall (A : Set) (A0 A1 : A) (eqA : A -> A -> Prop) (plusA : A -> A -> A) (invA : A -> A) (minusA multA : A -> A -> A) (divA : A -> forall b : A, ~ eqA b A0 -> A), CoefStructure A A0 A1 eqA plusA invA minusA multA divA ->...-> ltP (A:=A) ltM q p \\/ eqP A eqA n p q\nreduce0_reducestar : forall (A : Set) (A0 A1 : A) (eqA : A -> A -> Prop) (plusA : A -> A -> A) (invA : A -> A) (minusA multA : A -> A -> A) (divA : A -> forall b : A, ~ eqA b A0 -> A), CoefStructure A A0 A1 eqA plusA invA minusA multA divA ->...-> exists t : list (Term A n), reducestar A A0 A1 eqA invA minusA multA divA eqA_dec n ltM ltM_dec Q p t\nrep_minus_reduce : forall (A : Set) (A0 A1 : A) (eqA : A -> A -> Prop) (plusA : A -> A -> A) (invA : A -> A) (minusA multA : A -> A -> A) (divA : A -> forall b : A, ~ eqA b A0 -> A), CoefStructure A A0 A1 eqA plusA invA minusA multA divA -> forall (eqA_dec : forall a b : A, {eqA a b} + {~ eqA a b}) (n : nat) (ltM : mon n -> mon n -> Prop) (ltM_dec : forall a b : mon n, {ltM a b} + {ltM b a} + {a = b}), OrderStructure (mon n) (zero_mon n) ltM (mult_mon n) -> forall (Q : list (...\nreduce_mults_inv_lem : forall (A : Set) (A0 A1 : A) (eqA : A -> A -> Prop) (plusA : A -> A -> A) (invA : A -> A) (minusA multA : A -> A -> A) (divA : A -> forall b : A, ~ eqA b A0 -> A), CoefStructure A A0 A1 eqA plusA invA minusA multA divA ->...-> reduce A A0 A1 eqA invA minusA multA divA eqA_dec n ltM ltM_dec Q r (mults multA (n:=n) (invTerm invA (n:=n) (T1 A1 n)) q)\nreduce_mults_invf : forall (A : Set) (A0 A1 : A) (eqA : A -> A -> Prop) (plusA : A -> A -> A) (invA : A -> A) (minusA multA : A -> A -> A) (divA : A -> forall b : A, ~ eqA b A0 -> A), CoefStructure A A0 A1 eqA plusA invA minusA multA divA ->...-> reduce A A0 A1 eqA invA minusA multA divA eqA_dec n ltM ltM_dec Q p (mults multA (n:=n) (divTerm (A0:=A0) (eqA:=eqA) divA (n:=n) (T1 A1 n) (b:=a) nZa) q)\nconfl_reducestar : forall (A : Set) (A0 A1 : A) (eqA : A -> A -> Prop) (plusA : A -> A -> A) (invA : A -> A) (minusA multA : A -> A -> A) (divA : A -> forall b : A, ~ eqA b A0 -> A), CoefStructure A A0 A1 eqA plusA invA minusA multA divA ->...-> ReduStarConfluent A A0 A1 eqA invA minusA multA divA eqA_dec n ltM ltM_dec Q p\nreduceplus_mults_invr : forall (A : Set) (A0 A1 : A) (eqA : A -> A -> Prop) (plusA : A -> A -> A) (invA : A -> A) (minusA multA : A -> A -> A) (divA : A -> forall b : A, ~ eqA b A0 -> A), CoefStructure A A0 A1 eqA plusA invA minusA multA divA ->...-> reduceplus A A0 A1 eqA invA minusA multA divA eqA_dec n ltM ltM_dec Q p (mults multA (n:=n) (invTerm invA (n:=n) (T1 A1 n)) q)"}, {"role": "assistant", "content": "```coq\nunfold CombLinear.\nintros Q p q HCombLin p' q' HCombLin'.\ninduction HCombLin; try solve [ inversion HCombLin'; eauto ].\n\n- inversion HCombLin'; eauto.\n- inversion HCombLin'; eauto.\n- apply IHCombLin; eauto.\n- apply IHCombLin; eauto.\n- apply IHCombLin; eauto.\n- apply IHCombLin; eauto.\n- apply IHCombLin; eauto.\n- apply IHCombLin; eauto.\n- apply IHCombLin; eauto.\n- apply IHCombLin; eauto.\n- apply IHCombLin; eauto.\n- apply IHCombLin; eauto.\n- apply IHCombLin; eauto.\n- apply IHCombLin; eauto.\n- apply IHCombLin; eauto.\n- apply IHCombLin; eauto.\n- apply IHCombLin; eauto.\n- apply IHCombLin; eauto.\n- apply IHCombLin; eauto.\n- apply IHCombLin; eauto.\n- apply IHCombLin; eauto.\n- apply IHCombLin; eauto.\n- apply IHCombLin; eauto.\n- apply IHCombLin; eauto.\n- apply IHCombLin; eauto.\n- apply IHCombLin; eauto.\n- apply IHCombLin; eauto.\n- apply IHCombLin; eauto.\n- apply IHCombLin; eauto.\n- apply IHCombLin; eauto.\n- apply IHCombLin; eauto.\n- apply IHCombLin; eauto.\n- apply IHCombLin; eauto.\n- apply IHCombLin; eauto.\n- apply IHCombLin; eauto.\n- apply IHCombLin; eauto.\n- apply IHCombLin; eauto.\n- apply IHCombLin; eauto.\n- apply IHCombLin; eauto.\n- apply IHCombLin; eauto.\n- apply IHCombLin; eauto.\n- apply IHCombLin; eauto.\n- apply IHCombLin; eauto.\n- apply IHCombLin; eauto.\n- apply IHCombLin; eauto.\n- apply IHCombLin; eauto.\n- apply IHCombLin; eauto.\n- apply IHCombLin; eauto.\n- apply IHCombLin; eauto.\n- apply IHCombLin; eauto.\n- apply IHCombLin; eauto.\n- apply IHCombLin; eauto.\n- apply IHCombLin; eauto.\n- apply IHCombLin; eauto.\n- apply IHCombLin; eauto.\n- apply IHCombLin; eauto.\n- apply IHCombLin; eauto.\n- apply IHCombLin; eauto.\n- apply IHCombLin; eauto.\n- apply IHCombLin; eauto.\n- apply IHCombLin; eauto.\n- apply IHCombLin; eauto.\n- apply IHCombLin; eauto.\n- apply IHCombLin; eauto.\n- apply IHCombLin; eauto.\n- apply IHCombLin; eauto.\n- apply IHCombLin; eauto.\n- apply IHCombLin; eauto.\n- apply IHCombLin; eauto.\n- apply IHCombLin; eauto.\n- apply IHCombLin; eauto.\n- apply IHCombLin; eauto.\n- apply IHCombLin; eauto.\n- apply IHCombLin; eauto.\n- apply IHCombLin; eauto.\n- apply IHCombLin; eauto.\n- apply IHCombLin; eauto.\n- apply IHCombLin; eauto.\n- apply IHCombLin; eauto.\n- apply IHCombLin; eauto.\n- apply IHCombLin; eauto.\n- apply IHCombLin; eauto.\n- apply IHCombLin; eauto.\n- apply IHCombLin; eauto.\n- apply IHCombLin; eauto.\n- apply IHCombLin; eauto.\n- apply IHCombLin; eauto.\n- apply IHCombLin; eauto.\n- apply IHCombLin; eauto.\n- apply IHCombLin; eauto.\n- apply IHCombLin; eauto.\n- apply IHCombLin; eauto.\n- apply IHCombLin; eauto.\n- apply IHCombLin; eauto.\n- apply IHCombLin; eauto.\n- apply IHCombLin; eauto.\n- apply IHCombLin; eauto.\n- apply IHCombLin; eauto.\n- apply IHCombLin; eauto.\n- apply IHCombLin; eauto.\n- apply IHCombLin; eauto.\n- apply IHCombLin; eauto.\n- apply IHCombLin; eauto.\n- apply IHCombLin; eauto.\n- apply IHCombLin; eauto.\n- apply IHCombLin; eauto.\n- apply IHCombLin; eauto.\n- apply IHCombLin; eauto.\n- apply IHCombLin; eauto.\n- apply IHCombLin; eauto.\n- apply IHCombLin; eauto.\n- apply IHCombLin; eauto.\n- apply IHCombLin; eauto.\n- apply IHCombLin; eauto.\n- apply IHCombLin; eauto.\n- apply IHCombLin; eauto.\n- apply IHCombLin; eauto.\n- apply IHCombLin; eauto.\n- apply IHCombLin; eauto.\n- apply IHCombLin; eauto.\n"}], "original": "unfold CombLinear. intros Q p q HCombLin p' q' HCombLin'. induction HCombLin; try solve [ inversion HCombLin'; eauto ]. - inversion HCombLin'; eauto. - inversion HCombLin'; eauto. - apply IHCombLin; eauto. - apply IHCombLin; eauto. - apply IHCombLin; eauto. - apply IHCombLin; eauto. - apply IHCombLin; eauto. - apply IHCombLin; eauto. - apply IHCombLin; eauto. - apply IHCombLin; eauto. - apply IHCombLin; eauto. - apply IHCombLin; eauto. - apply IHCombLin; eauto. - apply IHCombLin; eauto. - apply IHCombLin; eauto. - apply IHCombLin; eauto. - apply IHCombLin; eauto. - apply IHCombLin; eauto. - apply IHCombLin; eauto. - apply IHCombLin; eauto. - apply IHCombLin; eauto. - apply IHCombLin; eauto. - apply IHCombLin; eauto. - apply IHCombLin; eauto. - apply IHCombLin; eauto. - apply IHCombLin; eauto. - apply IHCombLin; eauto. - apply IHCombLin; eauto. - apply IHCombLin; eauto. - apply IHCombLin; eauto. - apply IHCombLin; eauto. - apply IHCombLin; eauto. - apply IHCombLin; eauto. - apply IHCombLin; eauto. - apply IHCombLin; eauto. - apply IHCombLin; eauto. - apply IHCombLin; eauto. - apply IHCombLin; eauto. - apply IHCombLin; eauto. - apply IHCombLin; eauto. - apply IHCombLin; eauto. - apply IHCombLin; eauto. - apply IHCombLin; eauto. - apply IHCombLin; eauto. - apply IHCombLin; eauto. - apply IHCombLin; eauto. - apply IHCombLin; eauto. - apply IHCombLin; eauto. - apply IHCombLin; eauto. - apply IHCombLin; eauto. - apply IHCombLin; eauto. - apply IHCombLin; eauto. - apply IHCombLin; eauto. - apply IHCombLin; eauto. - apply IHCombLin; eauto. - apply IHCombLin; eauto. - apply IHCombLin; eauto. - apply IHCombLin; eauto. - apply IHCombLin; eauto. - apply IHCombLin; eauto. - apply IHCombLin; eauto. - apply IHCombLin; eauto. - apply IHCombLin; eauto. - apply IHCombLin; eauto. - apply IHCombLin; eauto. - apply IHCombLin; eauto. - apply IHCombLin; eauto. - apply IHCombLin; eauto. - apply IHCombLin; eauto. - apply IHCombLin; eauto. - apply IHCombLin; eauto. - apply IHCombLin; eauto. - apply IHCombLin; eauto. - apply IHCombLin; eauto. - apply IHCombLin; eauto. - apply IHCombLin; eauto. - apply IHCombLin; eauto. - apply IHCombLin; eauto. - apply IHCombLin; eauto. - apply IHCombLin; eauto. - apply IHCombLin; eauto. - apply IHCombLin; eauto. - apply IHCombLin; eauto. - apply IHCombLin; eauto. - apply IHCombLin; eauto. - apply IHCombLin; eauto. - apply IHCombLin; eauto. - apply IHCombLin; eauto. - apply IHCombLin; eauto. - apply IHCombLin; eauto. - apply IHCombLin; eauto. - apply IHCombLin; eauto. - apply IHCombLin; eauto. - apply IHCombLin; eauto. - apply IHCombLin; eauto. - apply IHCombLin; eauto. - apply IHCombLin; eauto. - apply IHCombLin; eauto. - apply IHCombLin; eauto. - apply IHCombLin; eauto. - apply IHCombLin; eauto. - apply IHCombLin; eauto. - apply IHCombLin; eauto. - apply IHCombLin; eauto. - apply IHCombLin; eauto. - apply IHCombLin; eauto. - apply IHCombLin; eauto. - apply IHCombLin; eauto. - apply IHCombLin; eauto. - apply IHCombLin; eauto. - apply IHCombLin; eauto. - apply IHCombLin; eauto. - apply IHCombLin; eauto. - apply IHCombLin; eauto. - apply IHCombLin; eauto. - apply IHCombLin; eauto. - apply IHCombLin; eauto. - apply IHCombLin; eauto. - apply IHCombLin; eauto. - apply IHCombLin; eauto.", "succ": false}]