[{"history": {"proof": "shelve.", "repairs": [""], "exceptions": []}, "chat": [{"role": "user", "content": "I will give you a Coq proof state, including both hypotheses and a specific goal and your need to prove it. Your response should be a singular code block of Coq proof starting with \"```coq\n\", ending with \"Qed.```\", without any additional explanation or commentary. Follow to these guidelines:\nIntroduce variables using unique names to avoid any conflicts.\nKeep each command distinct and separated, avoid concatenations like ';' or '[cmd|cmd]'.\nOrganize your proof with bullets like '-', '+', and '*' instead of braces ({, }). Shift to their double symbols like '--' and '++', when necessary.\nEffectively use given premises, follow the syntax and structure demonstrated in the examples provided.\n\nExample 1:\n\nHypotheses:\nn, m: nat\nIHn: m + n = n + m\n\nGoal:\nm + S n = S n + m\n\nProof:\n```coq\nsimpl. rewrite <- IHn. auto.\nQed.```\n\nExample 2:\nHypotheses:\n\nGoal:\nforall n m : nat, m + n = n + m\n\n```coq\nintros n m. induction n.\n- simpl. auto.\n- simpl. rewrite <- IHn. auto.\nQed.```\n\nSolve This Proof State:\n\nHypotheses:\nA: Set\nR: Rel A\nlt: Rel A\nwflt: well_founded lt\n\nGoal:\nforall xs : list A, Min xs -> (forall a : A, Min (a :: xs) -> GRBar A R (a :: xs)) -> GRBar A R xs\n\nPremises:\nInductive Min : list A -> Set := nmin : Min nil | cmin : forall (a : A) (l : list A), Min l -> (forall y : A, lt y a -> GRBar A R (y :: l)) -> Min (a :: l) Arguments Min _%list_scope Arguments cmin _ _%list_scope _ _%function_scope\nwell_founded : forall A : Type, (A -> A -> Prop) -> Prop\nRel = fun A : Set => A -> A -> Prop : Set -> Type Arguments Rel _%type_scope\nInductive list (A : Type) : Type := nil : list A | cons : A -> list A -> list A Arguments list _%type_scope Arguments nil {A}%type_scope Arguments cons {A}%type_scope a l%list_scope : rename\nGRBar : forall A : Set, Rel A -> list A -> Set\nmonGRBarAux : forall (A : Set) (R : Rel A) (l : list A), GRBar A R l -> forall xs bs cs : list A, l = xs ++ cs -> GRBar A R (xs ++ bs ++ cs)\ncmin : forall (a : A) (l : list A), Min l -> (forall y : A, lt y a -> GRBar A R (y :: l)) -> Min (a :: l)\nInductive Min : list A -> Set := nmin : Min nil | cmin : forall (a : A) (l : list A), Min l -> (forall y : A, lt y a -> GRBar A R (y :: l)) -> Min (a :: l) Arguments Min _%list_scope Arguments cmin _ _%list_scope _ _%function_scope\nconsGRBar : forall (A : Set) (R : Rel A) (l : list A), GRBar A R l -> forall a : A, GRBar A R (a :: l)\nMin_rec : forall P : forall l : list A, Min l -> Set, P nil nmin -> (forall (a : A) (l : list A) (m : Min l), P l m -> forall g : forall y : A, lt y a -> GRBar A R (y :: l), P (a :: l) (cmin a l m g)) -> forall (l : list A) (m : Min l), P l m\nMin_ind : forall P : forall l : list A, Min l -> Prop, P nil nmin -> (forall (a : A) (l : list A) (m : Min l), P l m -> forall g : forall y : A, lt y a -> GRBar A R (y :: l), P (a :: l) (cmin a l m g)) -> forall (l : list A) (m : Min l), P l m\nMin_rect : forall P : forall l : list A, Min l -> Type, P nil nmin -> (forall (a : A) (l : list A) (m : Min l), P l m -> forall g : forall y : A, lt y a -> GRBar A R (y :: l), P (a :: l) (cmin a l m g)) -> forall (l : list A) (m : Min l), P l m\nMin_sind : forall P : forall l : list A, Min l -> SProp, P nil nmin -> (forall (a : A) (l : list A) (m : Min l), P l m -> forall g : forall y : A, lt y a -> GRBar A R (y :: l), P (a :: l) (cmin a l m g)) -> forall (l : list A) (m : Min l), P l m\nnilGRBar : forall (A : Set) (R : Rel A), GRBar A R nil -> forall l : list A, GRBar A R l\nsubRelGRBar : forall (A B : Set) (R : Rel A) (S : Rel B) (f : A -> B), (forall a b : A, R a b -> S (f a) (f b)) -> (forall b : B, {a : A | b = f a}) -> forall l : list A, GRBar A R l -> GRBar B S (map f l)\nForall_inv_tail : forall (A : Type) (P : A -> Prop) (x0 : A) (xs : list A), Forall P (x0 :: xs) -> Forall P xs\nmonGRBar : forall (A : Set) (R : Rel A) (xs bs cs : list A), GRBar A R (xs ++ cs) -> GRBar A R (xs ++ bs ++ cs)\nGoodR_sind : forall (A : Set) (R : Rel A) (P : forall l : list A, GoodR A R l -> SProp), (forall (a : A) (l : list A) (e : ExistsL A (fun x : A => R x a) l), P (a :: l) (FoundG A R a l e)) -> (forall (a : A) (l : list A) (g : GoodR A R l), P l g -> P (a :: l) (SearchG A R a l g)) -> forall (l : list A) (g : GoodR A R l), P l g\nGoodR_rec : forall (A : Set) (R : Rel A) (P : forall l : list A, GoodR A R l -> Set), (forall (a : A) (l : list A) (e : ExistsL A (fun x : A => R x a) l), P (a :: l) (FoundG A R a l e)) -> (forall (a : A) (l : list A) (g : GoodR A R l), P l g -> P (a :: l) (SearchG A R a l g)) -> forall (l : list A) (g : GoodR A R l), P l g\nGoodR_rect : forall (A : Set) (R : Rel A) (P : forall l : list A, GoodR A R l -> Type), (forall (a : A) (l : list A) (e : ExistsL A (fun x : A => R x a) l), P (a :: l) (FoundG A R a l e)) -> (forall (a : A) (l : list A) (g : GoodR A R l), P l g -> P (a :: l) (SearchG A R a l g)) -> forall (l : list A) (g : GoodR A R l), P l g\nGoodR_ind : forall (A : Set) (R : Rel A) (P : forall l : list A, GoodR A R l -> Prop), (forall (a : A) (l : list A) (e : ExistsL A (fun x : A => R x a) l), P (a :: l) (FoundG A R a l e)) -> (forall (a : A) (l : list A) (g : GoodR A R l), P l g -> P (a :: l) (SearchG A R a l g)) -> forall (l : list A) (g : GoodR A R l), P l g\nwell_founded_ind : forall (A : Type) (R : A -> A -> Prop), well_founded R -> forall P : A -> Prop, (forall x : A, (forall y : A, R y x -> P y) -> P x) -> forall a : A, P a\nwell_founded_induction : forall (A : Type) (R : A -> A -> Prop), well_founded R -> forall P : A -> Set, (forall x : A, (forall y : A, R y x -> P y) -> P x) -> forall a : A, P a\nwell_founded_induction_type : forall (A : Type) (R : A -> A -> Prop), well_founded R -> forall P : A -> Type, (forall x : A, (forall y : A, R y x -> P y) -> P x) -> forall a : A, P a\nsubRelGoodR : forall (A B : Set) (R : Rel A) (S : Rel B) (f : A -> B), (forall a b : A, R a b -> S (f a) (f b)) -> forall l : list A, GoodR A R l -> GoodR B S (map f l)\nFix : forall (A : Type) (R : A -> A -> Prop), well_founded R -> forall P : A -> Type, (forall x : A, (forall y : A, R y x -> P y) -> P x) -> forall x : A, P x\nWf_nat.well_founded_inv_lt_rel_compat : forall (A : Set) (R : A -> A -> Prop) (F : A -> nat -> Prop), (forall x y : A, R x y -> Wf_nat.inv_lt_rel A F x y) -> well_founded R\nForallOrdPairs_sind : forall (A : Type) (R : A -> A -> Prop) (P : list A -> SProp), P nil -> (forall (a : A) (l : list A), Forall (R a) l -> ForallOrdPairs R l -> P l -> P (a :: l)) -> forall l : list A, ForallOrdPairs R l -> P l\nForallOrdPairs_ind : forall (A : Type) (R : A -> A -> Prop) (P : list A -> Prop), P nil -> (forall (a : A) (l : list A), Forall (R a) l -> ForallOrdPairs R l -> P l -> P (a :: l)) -> forall l : list A, ForallOrdPairs R l -> P l\nWf_nat.well_founded_lt_compat : forall (A : Type) (f : A -> nat) (R : A -> A -> Prop), (forall x y : A, R x y -> f x < f y) -> well_founded R\nSearchG : forall (A : Set) (R : Rel A) (a : A) (l : list A), GoodR A R l -> GoodR A R (a :: l)\nAcc_intro_generator : forall (A : Type) (R : A -> A -> Prop), nat -> well_founded R -> well_founded R\nRelation_Operators.Ltl_sind : forall (A : Set) (leA : A -> A -> Prop) (P : list A -> list A -> SProp), (forall (a : A) (x : list A), P nil (a :: x)) -> (forall a b : A, leA a b -> forall x y : list A, P (a :: x) (b :: y)) -> (forall (a : A) (x y : list A), Relation_Operators.Ltl A leA x y -> P x y -> P (a :: x) (a :: y)) -> forall l l0 : list A, Relation_Operators.Ltl A leA l l0 -> P l l0\nRelation_Operators.Ltl_ind : forall (A : Set) (leA : A -> A -> Prop) (P : list A -> list A -> Prop), (forall (a : A) (x : list A), P nil (a :: x)) -> (forall a b : A, leA a b -> forall x y : list A, P (a :: x) (b :: y)) -> (forall (a : A) (x y : list A), Relation_Operators.Ltl A leA x y -> P x y -> P (a :: x) (a :: y)) -> forall l l0 : list A, Relation_Operators.Ltl A leA l l0 -> P l l0\nFoundG : forall (A : Set) (R : Rel A) (a : A) (l : list A), ExistsL A (fun x : A => R x a) l -> GoodR A R (a :: l)"}, {"role": "assistant", "content": "```coq\n```"}], "original": "", "succ": false}]