[{"history": {"proof": "shelve.", "repairs": [""], "exceptions": []}, "chat": [{"role": "user", "content": "I will give you a Coq proof state, including both hypotheses and a specific goal and your need to prove it. Your response should be a singular code block of Coq proof starting with \"```coq\n\", ending with \"Qed.```\", without any additional explanation or commentary. Follow to these guidelines:\nIntroduce variables using unique names to avoid any conflicts.\nKeep each command distinct and separated, avoid concatenations like ';' or '[cmd|cmd]'.\nOrganize your proof with bullets like '-', '+', and '*' instead of braces ({, }). Shift to their double symbols like '--' and '++', when necessary.\nEffectively use given premises, follow the syntax and structure demonstrated in the examples provided.\n\nExample 1:\n\nHypotheses:\nn, m: nat\nIHn: m + n = n + m\n\nGoal:\nm + S n = S n + m\n\nYour Response:\n```coq\nsimpl. rewrite <- IHn. auto.\nQed.```\n\nExample 2:\nHypotheses:\n\nGoal:\nforall n m : nat, m + n = n + m\n\nYour Response:\n```coq\nintros n m. induction n.\n- simpl. auto.\n- simpl. rewrite <- IHn. auto.\nQed.```\n\nSolve This Proof State:\n\nHypotheses:\nNone\n\nGoal:\nFiniteT True\n\nPremises:\nInductive FiniteT : Type -> Prop := empty_finite : FiniteT False | add_finite : forall T : Type, FiniteT T -> FiniteT (option T) | bij_finite : forall (X Y : Type) (f : X -> Y), FiniteT X -> invertible f -> FiniteT Y Arguments FiniteT _%type_scope Arguments add_finite _%type_scope Arguments bij_finite (_ _)%type_scope _%function_scope\nInductive FiniteT : Type -> Prop := empty_finite : FiniteT False | add_finite : forall T : Type, FiniteT T -> FiniteT (option T) | bij_finite : forall (X Y : Type) (f : X -> Y), FiniteT X -> invertible f -> FiniteT Y Arguments FiniteT _%type_scope Arguments add_finite _%type_scope Arguments bij_finite (_ _)%type_scope _%function_scope\nadd_finite : forall T : Type, FiniteT T -> FiniteT (option T)\nbij_finite : forall (X Y : Type) (f : X -> Y), FiniteT X -> invertible f -> FiniteT Y\nFiniteT_sind : forall P : Type -> SProp, P False -> (forall T : Type, FiniteT T -> P T -> P (option T)) -> (forall (X Y : Type) (f1 : X -> Y), FiniteT X -> P X -> invertible f1 -> P Y) -> forall T : Type, FiniteT T -> P T\nFiniteT_ind : forall P : Type -> Prop, P False -> (forall T : Type, FiniteT T -> P T -> P (option T)) -> (forall (X Y : Type) (f1 : X -> Y), FiniteT X -> P X -> invertible f1 -> P Y) -> forall T : Type, FiniteT T -> P T\nZeven.Zodd = fun z : BinNums.Z => match z with | BinNums.Z0 | BinNums.Zpos (BinNums.xO _) | BinNums.Zneg (BinNums.xO _) => False | _ => True end : BinNums.Z -> Prop Arguments Zeven.Zodd _%Z_scope\nBinIntDef.Z.mul = fun x y : BinNums.Z => match x with | BinNums.Z0 => BinNums.Z0 | BinNums.Zpos x' => match y with | BinNums.Z0 => BinNums.Z0 | BinNums.Zpos y' => BinNums.Zpos (BinPos.Pos.mul x' y') | BinNums.Zneg y' => BinNums.Zneg (BinPos.Pos.mul x' y') end | BinNums.Zneg x' => match y with | BinNums.Z0 => BinNums.Z0 | BinNums.Zpos y' => BinNums.Zneg (BinPos.Pos.mul x' y') | BinNums.Zneg y' => BinNums.Zpos (BinPos.Pos.mul x' y') end end : BinNums.Z -> BinNums.Z -> BinNums.Z Arguments BinIntDef.Z.mul (_ _)%Z_scope\nBinNat.N.mul_pow2_bits_high : forall a n m : BinNums.N, BinNat.N.le n m -> BinNat.N.testbit (BinNat.N.mul a (BinNat.N.pow (BinNums.Npos (BinNums.xO BinNums.xH)) n)) m = BinNat.N.testbit a (BinNat.N.sub m n)\nBinNat.N.lt_0_1 = (fun lemma : BinNums.Npos BinNums.xH = BinNat.N.succ BinNums.N0 => Morphisms.Reflexive_partial_app_morphism (Morphisms.subrelation_proper BinNat.N.lt_wd tt (Morphisms.subrelation_respectful (Morphisms.subrelation_refl eq) (Morphisms.subrelation_respectful (Morphisms.subrelation_refl eq) Morphisms.iff_flip_impl_subrelation))) (Morphisms.reflexive_proper_proxy RelationClasses.Equivalence_Reflexive BinNums.N0) (BinNums.Npos BinNums.xH) (BinNat.N.succ BinNums.N0) lemma) BinNat.N.one_succ (BinNat.N.lt_succ_diag_r BinNums.N0) : BinNat.N.lt BinNums.N0 (BinNums.Npos BinNums.xH)\nBinInt.Z.add_lt_mono_r : forall n m p : BinNums.Z, BinInt.Z.lt n m < -> BinInt.Z.lt (BinInt.Z.add n p) (BinInt.Z.add m p)\nQArith_base.Qlt_compat = fun (p q : QArith_base.Q) (H : QArith_base.Qeq p q) (r s : QArith_base.Q) (H' : QArith_base.Qeq r s) => (fun lemma : QArith_base.Qlt p r <-> QArith_base.Qcompare p r = Lt => Morphisms.trans_co_eq_inv_impl_morphism RelationClasses.iff_Transitive (QArith_base.Qlt p r) (QArith_base.Qcompare p r = Lt) lemma (QArith_base.Qlt q s) (QArith_base.Qlt q s) (Morphisms.eq_proper_proxy (QArith_base.Qlt q s))) (QArith_base.Qlt_alt p r) ((fun lemma : QArith_base.Qlt q s <-> QArith_base.Qcompare q s = Lt => Morphisms.trans_sym_co_inv_impl_morphism (RelationClasses.Equivalence_PER RelationClasses.iff_equivalence) (QArith_base.Qlt q s) (...\nRecord ring_theory (R : Type) (rO rI : R) (radd rmul rsub : R -> R -> R) (ropp : R -> R) (req : R -> R -> Prop) : Prop := mk_rt { Radd_0_l : forall x : R, req (radd rO x) x; Radd_comm : forall x y : R, req (radd x y) (radd y x); Radd_assoc : forall x y z : R, req (radd x (radd y z)) (radd (radd x y) z); Rmul_1_l : forall x : R, req (rmul rI x) x; Rmul_comm : forall x y : R, req (rmul x y) (rmul y x); Rmul_assoc : forall x y z : R, req (rmul x (rmul y z)) (rmul (rmul x y) z); Rdistr_l : forall x y z : R, req (rmul (r...\nBinInt.Z.lt = fun x y : BinNums.Z => BinInt.Z.compare x y = Lt : BinNums.Z -> BinNums.Z -> Prop Arguments BinInt.Z.lt (_ _)%Z_scope\nUIP : forall (U : Type) (x y : U) (p1 p2 : x = y), p1 = p2\nEnsemble = fun U : Type => U -> Prop : Type -> Type Arguments Ensemble _%type_scope\nNdigits.Nbit_Ntestbit : forall a n : BinNums.N, BinNat.N.testbit_nat a (BinNat.N.to_nat n) = BinNat.N.testbit a n\nBinNat.N.log2_up = fun a : BinNums.N => match BinNat.N.compare (BinNums.Npos BinNums.xH) a with | Lt => BinNat.N.succ (BinNat.N.log2 (BinNat.N.pred a)) | _ => BinNums.N0 end : BinNums.N -> BinNums.N\nNdigits.Pbit_Ptestbit : forall (p : BinNums.positive) (n : BinNums.N), BinPos.Pos.testbit_nat p (BinNat.N.to_nat n) = BinPos.Pos.testbit p n\nField_theory.rsplit_right : forall C : Type, Field_theory.rsplit C -> Ring_polynom.PExpr C\nBinList.jump_tl : forall (A : Type) (j : BinNums.positive) (l : list A), List.tl (BinList.jump j l) = BinList.jump j (List.tl l)\nInitialRing.NwO = nil : InitialRing.Nword\nssrbool.introTF : forall (P : Prop) (b c : bool), Bool.reflect P b -> (if c then P else ~ P) -> b = c\nBinInt.Z.lnot_nonneg : forall a : BinNums.Z, BinInt.Z.le BinNums.Z0 (BinInt.Z.lnot a) < -> BinInt.Z.lt a BinNums.Z0\nUIP_refl : forall (U : Type) (x : U) (p : x = x), p = eq_refl\nOrderedRing.SORle_refl : forall (R : Type) (rO rI : R) (rplus rtimes rminus : R -> R -> R) (ropp : R -> R) (req rle rlt : R -> R -> Prop), OrderedRing.SOR rO rI rplus rtimes rminus ropp req rle rlt -> forall n : R, rle n n\nclassic : forall P : Prop, P \\/ ~ P\nSetoid.Seq_sym : forall (A : Type) (Aeq : Relation_Definitions.relation A), Setoid.Setoid_Theory A Aeq -> forall x y : A, Aeq x y -> Aeq y x\nQArith_base.Qplus_lt_r : forall x y z : QArith_base.Q, QArith_base.Qlt (QArith_base.Qplus z x) (QArith_base.Qplus z y) < -> QArith_base.Qlt x y\nBinInt.Z.pow_succ_r : forall n m : BinNums.Z, BinInt.Z.le BinNums.Z0 m -> BinInt.Z.pow n (BinInt.Z.succ m) = BinInt.Z.mul n (BinInt.Z.pow n m)\nPeanoNat.Nat.min_r : forall n m : nat, m <= n -> PeanoNat.Nat.min n m = m"}, {"role": "assistant", "content": "```coq\n```coq\nDefinition finite_true := @FiniteT True.\n\nProof.\napply add_finite with (T := option True).\nassumption.\nQed."}], "original": "", "succ": false}]