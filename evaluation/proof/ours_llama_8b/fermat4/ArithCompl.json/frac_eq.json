[{"history": {"proof": "shelve.", "repairs": [""], "exceptions": []}, "chat": [{"role": "user", "content": "I will give you a Coq proof state, including both hypotheses and a specific goal and your need to prove it. Your response should be a singular code block of Coq proof starting with \"```coq\n\", ending with \"Qed.```\", without any additional explanation or commentary. Follow to these guidelines:\nIntroduce variables using unique names to avoid any conflicts.\nKeep each command distinct and separated, avoid concatenations like ';' or '[cmd|cmd]'.\nOrganize your proof with bullets like '-', '+', and '*' instead of braces ({, }). Shift to their double symbols like '--' and '++', when necessary.\nEffectively use given premises, follow the syntax and structure demonstrated in the examples provided.\n\nExample 1:\n\nHypotheses:\nn, m: nat\nIHn: m + n = n + m\n\nGoal:\nm + S n = S n + m\n\nProof:\n```coq\nsimpl. rewrite <- IHn. auto.\nQed.```\n\nExample 2:\nHypotheses:\n\nGoal:\nforall n m : nat, m + n = n + m\n\n```coq\nintros n m. induction n.\n- simpl. auto.\n- simpl. rewrite <- IHn. auto.\nQed.```\n\nSolve This Proof State:\n\nHypotheses:\n\n\nGoal:\nforall a b c d : Z, b <> 0 -> c <> 0 -> frac a (Z.mul b c) = frac d c -> a = Z.mul b d\n\nPremises:\nfrac = fun a b : Z => (IZR a / IZR b)%R : Z -> Z -> R Arguments frac (_ _)%Z_scope\nN.mul = fun n m : N => match n with | 0%N => 0%N | N.pos p => match m with | 0%N => 0%N | N.pos q => N.pos (p * q) end end : N -> N -> N Arguments N.mul (_ _)%N_scope\nInductive Z : Set := Z0 : Z | Zpos : positive -> Z | Zneg : positive -> Z Arguments Zpos _%positive_scope Arguments Zneg _%positive_scope\nrel_prime_cross_prod : forall a b c d : Z, rel_prime a b -> rel_prime c d -> b > 0 -> d > 0 -> a * d = b * c -> a = c /\\ b = d\nrelp_mult1 : forall a b c d k : Z, 0 <= a -> 0 <= b -> 0 < c -> 0 <= d -> a = k * c -> b = k * d -> rel_prime a b -> k = 1\nZ.quot_mul_cancel_r : forall a b c : Z, b <> 0 -> c <> 0 -> a * c \u00f7 (b * c) = a \u00f7 b\nZ.mul_mod_distr_r : forall a b c : Z, b <> 0 -> c <> 0 -> (a * c) mod (b * c) = a mod b * c\nZ.mul_rem_distr_r : forall a b c : Z, b <> 0 -> c <> 0 -> Z.rem (a * c) (b * c) = Z.rem a b * c\nZ.rem_add : forall a b c : Z, c <> 0 -> 0 <= (a + b * c) * a -> Z.rem (a + b * c) c = Z.rem a c\nZ.quot_add : forall a b c : Z, c <> 0 -> 0 <= (a + b * c) * a -> (a + b * c) \u00f7 c = a \u00f7 c + b\nZ.quot_add_l : forall a b c : Z, b <> 0 -> 0 <= (a * b + c) * c -> (a * b + c) \u00f7 b = a + c \u00f7 b\nZis_gcd_sym : forall a b d : Z, Zis_gcd a b d -> Zis_gcd b a d\nZ.div_mul_cancel_l : forall a b c : Z, b <> 0 -> c <> 0 -> c * a / (c * b) = a / b\ngcd_rel_prime : forall x y d : Z, Zis_gcd x y d -> exists a b : Z, x = d * a /\\ y = d * b /\\ rel_prime a b\nZmod_divides : forall a b : Z, b <> 0 -> a mod b = 0 < -> (exists c : Z, a = b * c)\nZ.mul_rem_distr_l : forall a b c : Z, b <> 0 -> c <> 0 -> Z.rem (c * a) (c * b) = c * Z.rem a b\nZ.divide_quot_mul_exact : forall a b c : Z, b <> 0 -> (b | a) -> c * a \u00f7 b = c * (a \u00f7 b)\nZ.divide_div_mul_exact : forall a b c : Z, b <> 0 -> (b | a) -> c * a / b = c * (a / b)\nZ.mul_mod_distr_l : forall a b c : Z, b <> 0 -> c <> 0 -> (c * a) mod (c * b) = c * (a mod b)\ndivide_mult_l : forall a b c : Z, c <> 0 -> (c * a | c * b) -> (a | b)\nGauss : forall a b c : Z, (a | b * c) -> rel_prime a b -> (a | c)\nnot_rel_prime1 : forall x y : Z, ~ rel_prime x y -> exists d : Z, Zis_gcd x y d /\\ d <> 1 /\\ d <> -1\nZ_div_exact_full_2 : forall a b : Z, b <> 0 -> a mod b = 0 -> a = b * (a / b)\nZ.div_unique_exact : forall a b q : Z, b <> 0 -> a = b * q -> q = a / b\nZ.quot_unique_exact : forall a b q : Z, b <> 0 -> a = b * q -> q = a \u00f7 b\nZ.quot_mul : forall a b : Z, b <> 0 -> a * b \u00f7 b = a\nZ.div_mul : forall a b : Z, b <> 0 -> a * b / b = a\nZ.quot_div_exact : forall a b : Z, b <> 0 -> (b | a) -> a \u00f7 b = a / b\nZ.quot_exact : forall a b : Z, b <> 0 -> a = b * (a \u00f7 b) < -> Z.rem a b = 0\nZ.div_exact : forall a b : Z, b <> 0 -> a = b * (a / b) < -> a mod b = 0\nZ.rem_mod_nonneg : forall a b : Z, 0 <= a -> 0 < b -> Z.rem a b = a mod b\nZ.quot_div_nonneg : forall a b : Z, 0 <= a -> 0 < b -> a \u00f7 b = a / b\nsqr_sum4 : forall a b : Z, a * a + b * b = 0 -> a = 0 /\\ b = 0"}, {"role": "assistant", "content": "```coq\n```"}], "original": "", "succ": false}]