[{"history": {"proof": "shelve.", "repairs": [""], "exceptions": []}, "chat": [{"role": "user", "content": "I will give you a Coq proof state, including both hypotheses and a specific goal and your need to prove it. Your response should be a singular code block of Coq proof starting with \"```coq\n\", ending with \"Qed.```\", without any additional explanation or commentary. Follow to these guidelines:\nIntroduce variables using unique names to avoid any conflicts.\nKeep each command distinct and separated, avoid concatenations like ';' or '[cmd|cmd]'.\nOrganize your proof with bullets like '-', '+', and '*' instead of braces ({, }). Shift to their double symbols like '--' and '++', when necessary.\nEffectively use given premises, follow the syntax and structure demonstrated in the examples provided.\n\nExample 1:\n\nHypotheses:\nn, m: nat\nIHn: m + n = n + m\n\nGoal:\nm + S n = S n + m\n\nProof:\n```coq\nsimpl. rewrite <- IHn. auto.\nQed.```\n\nExample 2:\nHypotheses:\n\nGoal:\nforall n m : nat, m + n = n + m\n\n```coq\nintros n m. induction n.\n- simpl. auto.\n- simpl. rewrite <- IHn. auto.\nQed.```\n\nSolve This Proof State:\n\nHypotheses:\n\n\nGoal:\nTraverseVarInjective\n\nPremises:\nTraverseVarInjective_my_value_my_value = {| traverse_var_injective := traverse_my_value_injective |} : TraverseVarInjective\nRecord TraverseVarInjective (V : Type) (H : Var V) (T : Type) (H0 : Traverse V T) : Prop := Build_TraverseVarInjective { traverse_var_injective : forall f : nat -> nat -> nat, (forall x1 x2 l : nat, f l x1 = f l x2 -> x1 = x2) -> forall (t1 t2 : T) (l : nat), traverse_var f l t1 = traverse_var f l t2 -> t1 = t2 } Arguments TraverseVarInjective {V}%type_scope {H} {T}%type_scope {H0} Arguments Build_TraverseVarInjective [V]%type_scope _ [T]%type_scope _ _%function_scope\nBuild_TraverseVarInjective : forall (V : Type) (H : Var V) (T : Type) (H0 : Traverse V T), (forall f : nat -> nat -> nat, (forall x1 x2 l : nat, f l x1 = f l x2 -> x1 = x2) -> forall (t1 t2 : T) (l : nat), traverse_var f l t1 = traverse_var f l t2 -> t1 = t2) -> TraverseVarInjective\nLiftInjective_Traverse = fun (V : Type) (H : Var V) (T : Type) (H0 : Traverse V T) (H1 : TraverseVarInjective) => {| lift_injective := fun (w k : nat) (t1 t2 : T) (H2 : traverse (fun l x : nat => var (lift w (l + k) x)) 0 t1 = traverse (fun l x : nat => var (lift w (l + k) x)) 0 t2) => traverse_var_injective (fun l x : nat => lift w (l + k) x) (fun (x1 x2 l : nat) (H3 : lift w (l + k) x1 = lift w (l + k) x2) => lift_injective w (l + k) x1 x2 H3) t1 t2 0 H2 |} : forall (V : Type) (H : Var V) (T : Type) (H0 : Traverse V T), TraverseVarInject...\nRing_theory.pow_pos : forall R : Type, (R -> R -> R) -> R -> BinNums.positive -> R\nBinInt.Z.add_le_lt_mono : forall n m p q : BinNums.Z, BinInt.Z.le n m -> BinInt.Z.lt p q -> BinInt.Z.lt (BinInt.Z.add n p) (BinInt.Z.add m q)\nField_theory.NPEeval_ext : forall (R : Type) (rO rI : R) (radd rmul rsub : R -> R -> R) (ropp : R -> R) (req : R -> R -> Prop), RelationClasses.Equivalence req -> forall (C : Type) (phi : C -> R) (Cpow : Type) (Cp_phi : BinNums.N -> Cpow) (rpow : R -> Cpow -> R), Morphisms.Proper (Morphisms.respectful eq (Morphisms.respectful (Field_theory.NPEequiv rO rI radd rmul rsub ropp req phi Cp_phi rpow) req)) (Ring_polynom.PEeval rO rI radd rmul rsub ropp phi Cp_phi rpow)\nBinInt.Z.pow_0_r : forall n : BinNums.Z, BinInt.Z.pow n BinNums.Z0 = BinNums.Zpos BinNums.xH\nBinInt.Z.lt_1_2 = (fun lemma : BinNums.Zpos (BinNums.xO BinNums.xH) = BinInt.Z.succ (BinNums.Zpos BinNums.xH) => Morphisms.Reflexive_partial_app_morphism (Morphisms.subrelation_proper BinInt.Z.lt_wd tt (Morphisms.subrelation_respectful (Morphisms.subrelation_refl eq) (Morphisms.subrelation_respectful (Morphisms.subrelation_refl eq) Morphisms.iff_flip_impl_subrelation))) (Morphisms.reflexive_proper_proxy RelationClasses.Equivalence_Reflexive (BinNums.Zpos BinNums.xH)) (BinNums.Zpos (BinNums.xO BinNums.xH)) (BinInt.Z.succ (BinNums.Zpos BinNums.xH)) lemma) BinInt.Z.two_succ (BinInt.Z.lt_succ_diag_r (BinNums.Zpos BinNums.xH)) : BinInt.Z.lt (BinNums.Zpos BinNums.xH...\nInductive clos_trans_1n (A : Type) (R : Relation_Definitions.relation A) (x : A) : A -> Prop := t1n_step : forall y : A, R x y -> Relation_Operators.clos_trans_1n A R x y | t1n_trans : forall y z : A, R x y -> Relation_Operators.clos_trans_1n A R y z -> Relation_Operators.clos_trans_1n A R x z Arguments Relation_Operators.clos_trans_1n _%type_scope Arguments Relation_Operators.t1n_step _%type_scope Arguments Relation_Operators.t1n_trans _%type_scope\nRing_polynom.PEeval : forall R : Type, R -> R -> (R -> R -> R) -> (R -> R -> R) -> (R -> R -> R) -> (R -> R) -> forall C : Type, (C -> R) -> forall Cpow : Type, (BinNums.N -> Cpow) -> (R -> Cpow -> R) -> list R -> Ring_polynom.PExpr C -> R\nBinInt.Zne = fun x y : BinNums.Z => x <> y : BinNums.Z -> BinNums.Z -> Prop Arguments BinInt.Zne (_ _)%Z_scope\nBinInt.Z.le = fun x y : BinNums.Z => BinInt.Z.compare x y <> Gt : BinNums.Z -> BinNums.Z -> Prop Arguments BinInt.Z.le (_ _)%Z_scope\nBinNat.N.le = fun x y : BinNums.N => BinNat.N.compare x y <> Gt : BinNums.N -> BinNums.N -> Prop Arguments BinNat.N.le (_ _)%N_scope\nssrbool.predPredType : forall T : Type, ssrbool.predType T\nBinInt.Z.le_ind : forall A : BinNums.Z -> Prop, Morphisms.Proper (Morphisms.respectful eq iff) A -> forall n : BinNums.Z, A n -> (forall m : BinNums.Z, BinInt.Z.le n m -> A m -> A (BinInt.Z.succ m)) -> forall m : BinNums.Z, BinInt.Z.le n m -> A m\nBinNat.N.le_preorder = {| RelationClasses.PreOrder_Reflexive := BinNat.N.le_refl; RelationClasses.PreOrder_Transitive := BinNat.N.le_trans |} : RelationClasses.PreOrder BinNat.N.le\nInductive Z : Set := Z0 : BinNums.Z | Zpos : BinNums.positive -> BinNums.Z | Zneg : BinNums.positive -> BinNums.Z Arguments BinNums.Zpos _%positive_scope Arguments BinNums.Zneg _%positive_scope\nInductive bool : Set := true : bool | false : bool\nInductive comparison : Set := Eq : comparison | Lt : comparison | Gt : comparison\nBinNatDef.N.eqb = fix eqb (n m : BinNums.N) {struct n} : bool := match n with | BinNums.N0 => match m with | BinNums.N0 => true | BinNums.Npos _ => false end | BinNums.Npos p => match m with | BinNums.N0 => false | BinNums.Npos q => BinPos.Pos.eqb p q end end : BinNums.N -> BinNums.N -> bool Arguments BinNatDef.N.eqb (_ _)%N_scope\nmy_value_ind : forall P : my_value -> Prop, (forall n : nat, P (MyVVar n)) -> (forall m : my_term, P (MyVAbs m)) -> forall m : my_value, P m\nBinNat.N.bit_log2 : forall a : BinNums.N, a <> BinNums.N0 -> BinNat.N.testbit a (BinNat.N.log2 a) = true\nRingMicromega.Op1_ind : forall P : RingMicromega.Op1 -> Prop, P RingMicromega.Equal -> P RingMicromega.NonEqual -> P RingMicromega.Strict -> P RingMicromega.NonStrict -> forall o : RingMicromega.Op1, P o\nField_theory.ceqb_spec : forall (R : Type) (rO rI : R) (radd rmul rsub : R -> R -> R) (ropp : R -> R) (req : R -> R -> Prop) (C : Type) (cO cI : C) (cadd cmul csub : C -> C -> C) (copp : C -> C) (ceqb : C -> C -> bool) (phi : C -> R), Ring_theory.ring_morph rO rI radd rmul rsub ropp req cO cI cadd cmul csub copp ceqb phi -> forall c c' : C, BoolSpec (req (phi c) (phi c')) True (ceqb c c')\nBinNatDef.N.mul = fun n m : BinNums.N => match n with | BinNums.N0 => BinNums.N0 | BinNums.Npos p => match m with | BinNums.N0 => BinNums.N0 | BinNums.Npos q => BinNums.Npos (BinPos.Pos.mul p q) end end : BinNums.N -> BinNums.N -> BinNums.N Arguments BinNatDef.N.mul (_ _)%N_scope\nInductive sig (A : Type) (P : A -> Prop) : Type := exist : forall x : A, P x -> {x : A | P x} Arguments sig [A]%type_scope _%type_scope Arguments exist [A]%type_scope _%function_scope\nfst = fun (A B : Type) (p : A * B) => let (x, _) := p in x : forall A B : Type, A * B -> A Arguments fst {A B}%type_scope\nBinInt.Z.sub_move_0_r : forall n m : BinNums.Z, BinInt.Z.sub n m = BinNums.Z0 < -> n = m\nBinInt.Z.add_cancel_r : forall n m p : BinNums.Z, BinInt.Z.add n p = BinInt.Z.add m p < -> n = m"}, {"role": "assistant", "content": "```coq\n```"}], "original": "", "succ": false}]