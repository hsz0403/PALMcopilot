[{"history": {"proof": "shelve.", "repairs": [""], "exceptions": []}, "chat": [{"role": "user", "content": "I will give you a Coq proof state, including both hypotheses and a specific goal and your need to prove it. Your response should be a singular code block of Coq proof starting with \"```coq\n\", ending with \"Qed.```\", without any additional explanation or commentary. Follow to these guidelines:\nIntroduce variables using unique names to avoid any conflicts.\nKeep each command distinct and separated, avoid concatenations like ';' or '[cmd|cmd]'.\nOrganize your proof with bullets like '-', '+', and '*' instead of braces ({, }). Shift to their double symbols like '--' and '++', when necessary.\nEffectively use given premises, follow the syntax and structure demonstrated in the examples provided.\n\nExample 1:\n\nHypotheses:\nn, m: nat\nIHn: m + n = n + m\n\nGoal:\nm + S n = S n + m\n\nYour Response:\n```coq\nsimpl. rewrite <- IHn. auto.\nQed.```\n\nExample 2:\nHypotheses:\n\nGoal:\nforall n m : nat, m + n = n + m\n\nYour Response:\n```coq\nintros n m. induction n.\n- simpl. auto.\n- simpl. rewrite <- IHn. auto.\nQed.```\n\nSolve This Proof State:\n\nHypotheses:\nNone\n\nGoal:\nforall P : Z -> Set, (forall n : Z, (forall m : Z, lt_absZ m n -> P m) -> P n) -> forall p : Z, P p\n\nPremises:\nlt_absZ = fun x y : Z => ltZ (absZ x) (absZ y) : Z -> Z -> Prop\nInductive Z : Set := OZ : Z | pos : nat -> Z | neg : nat -> Z Arguments pos _%nat_scope Arguments neg _%nat_scope\nZrec4 : forall P : Z -> Set, (forall n : Z, (forall m : Z, lt_absZ m n -> P m) -> P n) -> forall p : nat, and_recZ p P\nZrec1 : forall P : Z -> Set, (forall n : Z, (forall m : Z, lt_absZ m n -> P m) -> P n) -> P OZ\nZrec2 : forall P : Z -> Set, (forall n : Z, (forall m : Z, lt_absZ m n -> P m) -> P n) -> and_recZ 0 P\nZrec3 : forall (P : Z -> Set) (p : nat), (forall n : Z, (forall m : Z, lt_absZ m n -> P m) -> P n) -> and_recZ p P -> and_recZ (S p) P\nZ_rec : forall P : Z -> Set, P OZ -> (forall n : nat, P (pos n)) -> (forall n : nat, P (neg n)) -> forall z : Z, P z\nZ_ind : forall P : Z -> Prop, P OZ -> (forall n : nat, P (pos n)) -> (forall n : nat, P (neg n)) -> forall z : Z, P z\nZ_rect : forall P : Z -> Type, P OZ -> (forall n : nat, P (pos n)) -> (forall n : nat, P (neg n)) -> forall z : Z, P z\nZ_sind : forall P : Z -> SProp, P OZ -> (forall n : nat, P (pos n)) -> (forall n : nat, P (neg n)) -> forall z : Z, P z\nnat_rec : forall P : nat -> Set, P 0 -> (forall n : nat, P n -> P (S n)) -> forall n : nat, P n\nnat_ind : forall P : nat -> Prop, P 0 -> (forall n : nat, P n -> P (S n)) -> forall n : nat, P n\nsumbool_rec : forall (A B : Prop) (P : {A} + {B} -> Set), (forall a : A, P (left a)) -> (forall b : B, P (right b)) -> forall s : {A} + {B}, P s\nssrbool.prop_in1 : forall T1 : Type, ssrbool.mem_pred T1 -> forall P : T1 -> Prop, ssreflect.phantom Prop (forall x : T1, P x) -> Prop\nand_set_set_set_rec : forall (S1 S2 : Set) (P : and_set_set_set S1 S2 -> Set), (forall (s : S2) (s0 : S1), P (and_set_set_set_i S1 S2 s s0)) -> forall a : and_set_set_set S1 S2, P a\nssrbool.prop_on1 : forall T1 T2 T3 : Type, ssrbool.mem_pred T2 -> forall (f : T1 -> T2) (Pf : (T1 -> T2) -> T3) (P : T1 -> Prop), ssreflect.phantom T3 (Pf f) -> ssreflect.phantom Prop (forall x : T1, P x) -> Prop\nplus_le_compat_r : forall n m p : nat, n <= m -> n + p <= m + p\ntech_lt_abs_OZ : forall x : Z, lt_absZ x (pos 0) -> x = OZ\nBinInt.Z.bits_inj' : forall a b : BinNums.Z, (forall n : BinNums.Z, BinInt.Z.le BinNums.Z0 n -> BinInt.Z.testbit a n = BinInt.Z.testbit b n) -> a = b\nBinInt.Z.mul_assoc : forall n m p : BinNums.Z, BinInt.Z.mul n (BinInt.Z.mul m p) = BinInt.Z.mul (BinInt.Z.mul n m) p\nBinInt.Z.add_assoc : forall n m p : BinNums.Z, BinInt.Z.add n (BinInt.Z.add m p) = BinInt.Z.add (BinInt.Z.add n m) p\nBinInt.Z.add_shuffle0 : forall n m p : BinNums.Z, BinInt.Z.add (BinInt.Z.add n m) p = BinInt.Z.add (BinInt.Z.add n p) m\nInit.Nat.add = fix add (n m : nat) {struct n} : nat := match n with | 0 => m | S p => S (add p m) end : nat -> nat -> nat Arguments Init.Nat.add (_ _)%nat_scope\nminus_n_Sm : forall n m : nat, m < n -> Init.Nat.pred (n - m) = n - S m\nlt_OZ : forall m : Z, ~ ltZ (absZ m) OZ\nNat.le_antisymm : forall n m : nat, n <= m -> m <= n -> n = m\nand_recZ = fun (p : nat) (P : Z -> Set) => forall n : nat, n <= p -> and_set_set_set (P (pos n)) (P (neg n)) : nat -> (Z -> Set) -> Set Arguments and_recZ _%nat_scope _%function_scope\nBinInt.Z.shiftr_spec : forall a n m : BinNums.Z, BinInt.Z.le BinNums.Z0 m -> BinInt.Z.testbit (BinInt.Z.shiftr a n) m = BinInt.Z.testbit a (BinInt.Z.add m n)\nBinInt.Z.mul_add_distr_l : forall n m p : BinNums.Z, BinInt.Z.mul n (BinInt.Z.add m p) = BinInt.Z.add (BinInt.Z.mul n m) (BinInt.Z.mul n p)\nNat.add_le_mono_r : forall n m p : nat, n <= m < -> n + p <= m + p\nBinInt.Z.add_cancel_l : forall n m p : BinNums.Z, BinInt.Z.add p n = BinInt.Z.add p m < -> n = m\nNat.lt_le_incl : forall n m : nat, n < m -> n <= m"}, {"role": "assistant", "content": "```coq\n```"}], "original": "", "succ": false}]