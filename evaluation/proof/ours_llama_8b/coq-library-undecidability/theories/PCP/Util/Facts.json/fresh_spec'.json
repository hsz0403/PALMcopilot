[{"history": {"proof": "shelve.", "repairs": [""], "exceptions": []}, "chat": [{"role": "user", "content": "I will give you a Coq proof state, including both hypotheses and a specific goal and your need to prove it. Your response should be a singular code block of Coq proof starting with \"```coq\n\", ending with \"Qed.```\", without any additional explanation or commentary. Follow to these guidelines:\nIntroduce variables using unique names to avoid any conflicts.\nKeep each command distinct and separated, avoid concatenations like ';' or '[cmd|cmd]'.\nOrganize your proof with bullets like '-', '+', and '*' instead of braces ({, }). Shift to their double symbols like '--' and '++', when necessary.\nEffectively use given premises, follow the syntax and structure demonstrated in the examples provided.\n\nExample 1:\n\nHypotheses:\nn, m: nat\nIHn: m + n = n + m\n\nGoal:\nm + S n = S n + m\n\nProof:\n```coq\nsimpl. rewrite <- IHn. auto.\nQed.```\n\nExample 2:\nHypotheses:\n\nGoal:\nforall n m : nat, m + n = n + m\n\n```coq\nintros n m. induction n.\n- simpl. auto.\n- simpl. rewrite <- IHn. auto.\nQed.```\n\nSolve This Proof State:\n\nHypotheses:\nl: list nat\na: nat\n\nGoal:\na el l -> a < fresh l\n\nPremises:\nInductive list (A : Type) : Type := nil : list A | cons : A -> list A -> list A Arguments list _%type_scope Arguments nil {A}%type_scope Arguments cons {A}%type_scope a l%list_scope : rename\nfresh = fix fresh (l : list nat) : nat := match l with | [] => 0 | x :: l0 => S x + fresh l0 end : list nat -> nat Arguments fresh _%list_scope\nmap_ext_in_iff : map ?f ?l = map ?g ?l < -> (forall a0 : ?A, a0 el ?l -> ?f a0 = ?g a0) where ?A : [l : list nat a : nat |- Type] ?B : [l : list nat a : nat |- Type] ?f : [l : list nat a : nat |- ?A -> ?B] ?g : [l : list nat a : nat |- ?A -> ?B] ?l : [l : list nat a : nat |- list ?A]\nin_app_or : forall (A : Type) (l m : list A) (a : A), a el l ++ m -> a el l \\/ a el m\nin_or_app : forall (A : Type) (l m : list A) (a : A), a el l \\/ a el m -> a el l ++ m\next_in_filter : forall (A : Type) (f g : A -> bool) (l : list A), filter f l = filter g l -> forall a : A, a el l -> f a = g a\next_in_map : forall (A B : Type) (f g : A -> B) (l : list A), map f l = map g l -> forall a : A, a el l -> f a = g a\nincl_Add_inv : forall (A : Type) (a : A) (l u v : list A), ~ a el l -> a :: l <<= v -> Add a u v -> l <<= u\niPCPb = fun P : stack bool => exists A : list nat, (forall a : nat, a el A -> a < | P |) /\\ A <> [] /\\ itau1 P A = itau2 P A : stack bool -> Prop\nfilter_ext_in : forall (A : Type) (f g : A -> bool) (l : list A), (forall a : A, a el l -> f a = g a) -> filter f l = filter g l\nmap_ext_in : forall (A B : Type) (f g : A -> B) (l : list A), (forall a : A, a el l -> f a = g a) -> map f l = map g l\nfilter_ext_in_iff : forall (A : Type) (f g : A -> bool) (l : list A), filter f l = filter g l < -> (forall a : A, a el l -> f a = g a)\nin_inv : forall (A : Type) (a b : A) (l : list A), b el a :: l -> a = b \\/ b el l\nincl_cons : forall (A : Type) (a : A) (l m : list A), a el m -> l <<= m -> a :: l <<= m\nin_app_iff : forall (A : Type) (l l' : list A) (a : A), a el l ++ l' < -> a el l \\/ a el l'\nAdd_inv : forall (A : Type) (a : A) (l : list A), a el l -> exists l' : list A, Add a l' l\nlist_prefix_inv : forall (X : Type) (a : X) (x u y v : list X), ~ a el x -> ~ a el u -> x ++ a :: y = u ++ a :: v -> x = u /\\ y = v\nNoDup_Add : forall (A : Type) (a : A) (l l' : list A), Add a l l' -> NoDup l' < -> NoDup l /\\ ~ a el l\nAdd_in : forall (A : Type) (a : A) (l l' : list A), Add a l l' -> forall x : A, x el l' < -> x el a :: l\nnth_S_cons : forall (A : Type) (n : nat) (l : list A) (d a : A), nth n l d el l -> nth (S n) (a :: l) d el a :: l\nin_cons : forall (A : Type) (a b : A) (l : list A), b el l -> b el a :: l\nBinNatDef.N.to_nat = fun a : BinNums.N => match a with | BinNums.N0 => 0 | BinNums.Npos p => BinPos.Pos.to_nat p end : BinNums.N -> nat Arguments BinNatDef.N.to_nat _%N_scope\nder_sing : forall (P : stack ?X) (x y : list ?X), (x, y) el P -> derivable P x y where ?X : [l : list nat a : nat |- Type]\nin_eq : forall (A : Type) (a : A) (l : list A), a el a :: l\nNoDup_remove : forall (A : Type) (l l' : list A) (a : A), NoDup (l ++ a :: l') -> NoDup (l ++ l') /\\ ~ a el l ++ l'\nlist_max_lt : forall (l : list nat) (n : nat), l <> [] -> list_max l < n < -> Forall (fun k : nat => k < n) l\nder_cons : forall (P : stack ?X) (x y : list ?X) (u v : string ?X), (x, y) el P -> derivable P u v -> derivable P (x ++ u) (y ++ v) where ?X : [l : list nat a : nat |- Type]\nZMicromega.in_bdepth : forall (l : list ZMicromega.ZArithProof) (a b : ZMicromega.ZWitness) (y : ZMicromega.ZArithProof), y el l -> Wf_nat.ltof ZMicromega.ZArithProof ZMicromega.bdepth y (ZMicromega.EnumProof a b l)\ngt = fun n m : nat => m < n : nat -> nat -> Prop Arguments gt (_ _)%nat_scope\nInductive Add (A : Type) (a : A) : list A -> list A -> Prop := Add_head : forall l : list A, Add a l (a :: l) | Add_cons : forall (x : A) (l l' : list A), Add a l l' -> Add a (x :: l) (x :: l') Arguments Add [A]%type_scope _ (_ _)%list_scope Arguments Add_head [A]%type_scope _ _%list_scope Arguments Add_cons [A]%type_scope [a] _ [l l']%list_scope\nandb_prop : forall a b : bool, (a && b)%bool = true -> a = true /\\ b = true\nin_split : forall (X : Type) (a : X) (x : list X), a el x -> exists y z : list X, x = y ++ [a] ++ z"}, {"role": "assistant", "content": "```coq\n```"}], "original": "", "succ": false}]