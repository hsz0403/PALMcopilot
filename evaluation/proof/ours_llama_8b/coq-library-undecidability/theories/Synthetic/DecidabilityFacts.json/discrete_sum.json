[{"history": {"proof": "shelve.", "repairs": [""], "exceptions": []}, "chat": [{"role": "user", "content": "I will give you a Coq proof state, including both hypotheses and a specific goal and your need to prove it. Your response should be a singular code block of Coq proof starting with \"```coq\n\", ending with \"Qed.```\", without any additional explanation or commentary. Follow to these guidelines:\nIntroduce variables using unique names to avoid any conflicts.\nKeep each command distinct and separated, avoid concatenations like ';' or '[cmd|cmd]'.\nOrganize your proof with bullets like '-', '+', and '*' instead of braces ({, }). Shift to their double symbols like '--' and '++', when necessary.\nEffectively use given premises, follow the syntax and structure demonstrated in the examples provided.\n\nExample 1:\n\nHypotheses:\nn, m: nat\nIHn: m + n = n + m\n\nGoal:\nm + S n = S n + m\n\nProof:\n```coq\nsimpl. rewrite <- IHn. auto.\nQed.```\n\nExample 2:\nHypotheses:\n\nGoal:\nforall n m : nat, m + n = n + m\n\n```coq\nintros n m. induction n.\n- simpl. auto.\n- simpl. rewrite <- IHn. auto.\nQed.```\n\nSolve This Proof State:\n\nHypotheses:\nX: Type\nY: Type\n\nGoal:\ndiscrete X -> discrete Y -> discrete (X + Y)\n\nPremises:\ndiscrete = fun X : Type => decidable (fun '(x, y) => x = y) : Type -> Prop Arguments discrete _%type_scope\ndiscrete_prod : forall X Y : Type, discrete X -> discrete Y -> discrete (X * Y)\ndiscrete_nat = let H : forall X : Type, inhabited (eq_dec X) -> discrete X := fun X : Type => match discrete_iff X with | conj _ x0 => x0 end in H nat (inhabits nat_eq_dec) : discrete nat\ndiscrete_bool = let H : forall X : Type, inhabited (eq_dec X) -> discrete X := fun X : Type => match discrete_iff X with | conj _ x0 => x0 end in H bool (inhabits bool_eq_dec) : discrete bool\ndiscrete_nat_nat = let H : forall X : Type, inhabited (eq_dec X) -> discrete X := fun X : Type => match discrete_iff X with | conj _ x0 => x0 end in H (nat * nat)%type (inhabits (prod_eq_dec nat_eq_dec nat_eq_dec)) : discrete (nat * nat)\ndiscrete_iff : forall X : Type, discrete X < -> inhabited (eq_dec X)\nsum_eq_dec : forall X Y : Type, eq_dec X -> eq_dec Y -> eq_dec X + Y\nprod_eq_dec : forall X Y : Type, eq_dec X -> eq_dec Y -> eq_dec X * Y\ndecidable = fun (X : Type) (P : X -> Prop) => exists f : X -> bool, decider f P : forall X : Type, (X -> Prop) -> Prop Arguments decidable {X}%type_scope _%function_scope\ndec = fun X : Prop => {X} + {~ X} : Prop -> Type Arguments dec _%type_scope\ndecidable_iff : forall (X : Type) (p : X -> Prop), decidable p < -> inhabited (forall x : X, dec (p x))\nrelation = fun A : Type => A -> A -> Prop : Type -> Type Arguments relation _%type_scope\nInductive sum (A B : Type) : Type := inl : A -> A + B | inr : B -> A + B Arguments sum (_ _)%type_scope Arguments inl {A B}%type_scope, [A] _ _ Arguments inr {A B}%type_scope, _ [B] _\nTauto.clause = fun Term' Annot : Type => list (Term' * Annot) : Type -> Type -> Type Arguments Tauto.clause (_ _)%type_scope\nssrbool.rel = fun T : Type => T -> ssrbool.pred T : Type -> Type Arguments ssrbool.rel _%type_scope\nssrbool.classically = fun P : Type => forall b : bool, (P -> Datatypes.is_true b) -> Datatypes.is_true b : Type -> Prop Arguments ssrbool.classically _%type_scope\nRelation_Operators.le_AsB_ind : forall (A B : Type) (leA : A -> A -> Prop) (leB : B -> B -> Prop) (P : A + B -> A + B -> Prop), (forall x y : A, leA x y -> P (inl x) (inl y)) -> (forall (x : A) (y : B), P (inl x) (inr y)) -> (forall x y : B, leB x y -> P (inr x) (inr y)) -> forall s s0 : A + B, Relation_Operators.le_AsB A B leA leB s s0 -> P s s0\nRelation_Operators.le_AsB_sind : forall (A B : Type) (leA : A -> A -> Prop) (leB : B -> B -> Prop) (P : A + B -> A + B -> SProp), (forall x y : A, leA x y -> P (inl x) (inl y)) -> (forall (x : A) (y : B), P (inl x) (inr y)) -> (forall x y : B, leB x y -> P (inr x) (inr y)) -> forall s s0 : A + B, Relation_Operators.le_AsB A B leA leB s s0 -> P s s0\nTauto.radd_term : forall Term' Annot : Type, (Term' -> bool) -> (Term' -> Term' -> option Term') -> Term' * Annot -> Tauto.clause Term' Annot -> Tauto.clause Term' Annot + list Annot\nTauto.ror_clause : forall Term' Annot : Type, (Term' -> bool) -> (Term' -> Term' -> option Term') -> list (Term' * Annot) -> Tauto.clause Term' Annot -> Tauto.clause Term' Annot + list Annot\nsumbool_rec : forall (A B : Prop) (P : {A} + {B} -> Set), (forall a : A, P (left a)) -> (forall b : B, P (right b)) -> forall s : {A} + {B}, P s\nsum_sind : forall (A B : Type) (P : A + B -> SProp), (forall a : A, P (inl a)) -> (forall b : B, P (inr b)) -> forall s : A + B, P s\nsum_rect : forall (A B : Type) (P : A + B -> Type), (forall a : A, P (inl a)) -> (forall b : B, P (inr b)) -> forall s : A + B, P s\nsum_ind : forall (A B : Type) (P : A + B -> Prop), (forall a : A, P (inl a)) -> (forall b : B, P (inr b)) -> forall s : A + B, P s\nsum_rec : forall (A B : Type) (P : A + B -> Set), (forall a : A, P (inl a)) -> (forall b : B, P (inr b)) -> forall s : A + B, P s\nInductive prod (A B : Type) : Type := pair : A -> B -> A * B Arguments prod (_ _)%type_scope Arguments pair {A B}%type_scope\nInductive Pol (C : Type) : Type := Pc : C -> Ring_polynom.Pol C | Pinj : BinNums.positive -> Ring_polynom.Pol C -> Ring_polynom.Pol C | PX : Ring_polynom.Pol C -> BinNums.positive -> Ring_polynom.Pol C -> Ring_polynom.Pol C Arguments Ring_polynom.Pol _%type_scope Arguments Ring_polynom.Pc [C]%type_scope Arguments Ring_polynom.Pinj [C]%type_scope _%positive_scope Arguments Ring_polynom.PX [C]%type_scope _ _%positive_scope\nInductive sumbool (A B : Prop) : Set := left : A -> {A} + {B} | right : B -> {A} + {B} Arguments sumbool (_ _)%type_scope Arguments left {A B}%type_scope, [A] _ _ Arguments right {A B}%type_scope, _ [B] _\nInductive list (A : Type) : Type := nil : list A | cons : A -> list A -> list A Arguments list _%type_scope Arguments nil {A}%type_scope Arguments cons {A}%type_scope a l%list_scope : rename\nInductive le_AsB (A B : Type) (leA : A -> A -> Prop) (leB : B -> B -> Prop) : A + B -> A + B -> Prop := le_aa : forall x y : A, leA x y -> Relation_Operators.le_AsB A B leA leB (inl x) (inl y) | le_ab : forall (x : A) (y : B), Relation_Operators.le_AsB A B leA leB (inl x) (inr y) | le_bb : forall x y : B, leB x y -> Relation_Operators.le_AsB A B leA leB (inr x) (inr y) Arguments Relation_Operators.le_AsB (_ _)%type_scope (_ _)%function_scope Arguments Relation_Operators.le_aa (_ _)%type_scope (_ _)%function_scope Arguments Relation_Operators.le_ab (_ _)%type_scope (_ _)%function_scope Arguments Relation_Operators.le_bb (_ _)%type_scope (_ _)%function_scope\nInductive sig (A : Type) (P : A -> Prop) : Type := exist : forall x : A, P x -> {x : A | P x} Arguments sig [A]%type_scope _%type_scope Arguments exist [A]%type_scope _%function_scope"}, {"role": "assistant", "content": "```coq\n```"}], "original": "", "succ": false}]