[{"history": {"proof": "shelve.", "repairs": [""], "exceptions": []}, "chat": [{"role": "user", "content": "I will give you a Coq proof state, including both hypotheses and a specific goal and your need to prove it. Your response should be a singular code block of Coq proof starting with \"```coq\n\", ending with \"Qed.```\", without any additional explanation or commentary. Follow to these guidelines:\nIntroduce variables using unique names to avoid any conflicts.\nKeep each command distinct and separated, avoid concatenations like ';' or '[cmd|cmd]'.\nOrganize your proof with bullets like '-', '+', and '*' instead of braces ({, }). Shift to their double symbols like '--' and '++', when necessary.\nEffectively use given premises, follow the syntax and structure demonstrated in the examples provided.\n\nExample 1:\n\nHypotheses:\nn, m: nat\nIHn: m + n = n + m\n\nGoal:\nm + S n = S n + m\n\nProof:\n```coq\nsimpl. rewrite <- IHn. auto.\nQed.```\n\nExample 2:\nHypotheses:\n\nGoal:\nforall n m : nat, m + n = n + m\n\n```coq\nintros n m. induction n.\n- simpl. auto.\n- simpl. rewrite <- IHn. auto.\nQed.```\n\nSolve This Proof State:\n\nHypotheses:\nX: Type\nA: list X\np: X -> Prop\n\nGoal:\n(forall x : X, dec (p x)) -> dec (forall x : X, x el A -> p x)\n\nPremises:\nInductive list (A : Type) : Type := nil : list A | cons : A -> list A -> list A Arguments list _%type_scope Arguments nil {A}%type_scope Arguments cons {A}%type_scope a l%list_scope : rename\ndec = fun X : Prop => {X} + {~ X} : Prop -> Type Arguments dec _%type_scope\ncfind : forall (A0 : list ?X) (p0 : ?X -> Prop), (forall x : ?X, dec (p0 x)) -> {x : ?X | x el A0 /\\ p0 x} + {forall x : ?X, x el A0 -> ~ p0 x} where ?X : [X : Type A : list X p : X -> Prop |- Type]\nmap_ext_in_iff : map ?f ?l = map ?g ?l < -> (forall a : ?A, a el ?l -> ?f a = ?g a) where ?A : [X : Type A : list X p : X -> Prop |- Type] ?B : [X : Type A : list X p : X -> Prop |- Type] ?f : [X : Type A : list X p : X -> Prop |- ?A -> ?B] ?g : [X : Type A : list X p : X -> Prop |- ?A -> ?B] ?l : [X : Type A : list X p : X -> Prop |- list ?A]\nimpl_dec : forall X Y : Prop, dec X -> dec Y -> dec (X -> Y)\nRingMicromega.Psatz_ind : forall (C : Type) (P : RingMicromega.Psatz C -> Prop), (forall n : nat, P (RingMicromega.PsatzIn C n)) -> (forall p : RingMicromega.PolC C, P (RingMicromega.PsatzSquare p)) -> (forall (p : RingMicromega.PolC C) (p0 : RingMicromega.Psatz C), P p0 -> P (RingMicromega.PsatzMulC p p0)) -> (forall p : RingMicromega.Psatz C, P p -> forall p0 : RingMicromega.Psatz C, P p0 -> P (RingMicromega.PsatzMulE p p0)) ->...-> forall p : RingMicromega.Psatz C, P p\nor_dec : forall X Y : Prop, dec X -> dec Y -> dec (X \\/ Y)\nand_dec : forall X Y : Prop, dec X -> dec Y -> dec (X /\\ Y)\niff_dec : forall X Y : Prop, dec X -> dec Y -> dec (X <-> Y)\nEnvRing.Pol_ind : forall (C : Type) (P : EnvRing.Pol C -> Prop), (forall c : C, P (EnvRing.Pc c)) -> (forall (p : positive) (p0 : EnvRing.Pol C), P p0 -> P (EnvRing.Pinj p p0)) -> (forall p : EnvRing.Pol C, P p -> forall (p0 : positive) (p1 : EnvRing.Pol C), P p1 -> P (EnvRing.PX p p0 p1)) -> forall p : EnvRing.Pol C, P p\nDec : forall X : Prop, dec X -> dec X\ndec_DM_impl : forall X Y : Prop, dec X -> dec Y -> ~ (X -> Y) -> X /\\ ~ Y\nnot_dec : forall X : Prop, dec X -> dec (~ X)\ndec_DM_and : forall X Y : Prop, dec X -> dec Y -> ~ (X /\\ Y) -> ~ X \\/ ~ Y\ndec_DN : forall X : Prop, dec X -> ~ ~ X -> X\nForall_forall : forall (A : Type) (P : A -> Prop) (l : list A), Forall P l < -> (forall x : A, x el l -> P x)\nforallb_forall : forall (A : Type) (f : A -> bool) (l : list A), forallb f l = true < -> (forall x : A, x el l -> f x = true)\ncount_occ : forall A : Type, (forall x y : A, {x = y} + {x <> y}) -> list A -> A -> nat\nDec_auto : forall (X : Prop) (d : dec X), X -> Dec X\nremove : forall A : Type, (forall x y : A, {x = y} + {x <> y}) -> A -> list A -> list A\nnodup : forall A : Type, (forall x y : A, {x = y} + {x <> y}) -> list A -> list A\nDec_auto_not : forall (X : Prop) (d : dec X), ~ X -> ~ Dec X\nFalse_eq_dec = fun x : False => match x as f return (forall y : False, dec (f = y)) with end : eq_dec False\nExists_ind : forall (A : Type) (P : A -> Prop) (P0 : list A -> Prop), (forall (x : A) (l : list A), P x -> P0 (x :: l)) -> (forall (x : A) (l : list A), Exists P l -> P0 l -> P0 (x :: l)) -> forall l : list A, Exists P l -> P0 l\nlist_in_dec : forall (X : Type) (x : X) (A : list X), eq_dec X -> dec (x el A)\nForallOrdPairs_In : forall (A : Type) (R : A -> A -> Prop) (l : list A), ForallOrdPairs R l -> forall x y : A, x el l -> y el l -> x = y \\/ R x y \\/ R y x\nNoDup_ind : forall (A : Type) (P : list A -> Prop), P [] -> (forall (x : A) (l : list A), ~ x el l -> NoDup l -> P l -> P (x :: l)) -> forall l : list A, NoDup l -> P l\nNoDup_sind : forall (A : Type) (P : list A -> SProp), P [] -> (forall (x : A) (l : list A), ~ x el l -> NoDup l -> P l -> P (x :: l)) -> forall l : list A, NoDup l -> P l\nprod_rect : forall (A B : Type) (P : A * B -> Type), (forall (a : A) (b : B), P (a, b)) -> forall p : A * B, P p\ndec_transfer : forall P Q : Prop, P < -> Q -> dec P -> dec Q\nForall_ind : forall (A : Type) (P : A -> Prop) (P0 : list A -> Prop), P0 [] -> (forall (x : A) (l : list A), P x -> Forall P l -> P0 l -> P0 (x :: l)) -> forall l : list A, Forall P l -> P0 l\nNoDup_count_occ' : forall (A : Type) (decA : forall x y : A, {x = y} + {x <> y}) (l : list A), NoDup l < -> (forall x : A, x el l -> count_occ decA l x = 1)"}, {"role": "assistant", "content": "```coq\n```"}], "original": "", "succ": false}]