[{"history": {"proof": "shelve.", "repairs": [""], "exceptions": []}, "chat": [{"role": "user", "content": "I will give you a Coq proof state, including both hypotheses and a specific goal and your need to prove it. Your response should be a singular code block of Coq proof starting with \"```coq\n\", ending with \"Qed.```\", without any additional explanation or commentary. Follow to these guidelines:\nIntroduce variables using unique names to avoid any conflicts.\nKeep each command distinct and separated, avoid concatenations like ';' or '[cmd|cmd]'.\nOrganize your proof with bullets like '-', '+', and '*' instead of braces ({, }). Shift to their double symbols like '--' and '++', when necessary.\nEffectively use given premises, follow the syntax and structure demonstrated in the examples provided.\n\nExample 1:\n\nHypotheses:\nn, m: nat\nIHn: m + n = n + m\n\nGoal:\nm + S n = S n + m\n\nProof:\n```coq\nsimpl. rewrite <- IHn. auto.\nQed.```\n\nExample 2:\nHypotheses:\n\nGoal:\nforall n m : nat, m + n = n + m\n\n```coq\nintros n m. induction n.\n- simpl. auto.\n- simpl. rewrite <- IHn. auto.\nQed.```\n\nSolve This Proof State:\n\nHypotheses:\nX: Type\nq: X -> bool\np: X -> bool\nA: list X\n\nGoal:\n(forall x, x el A -> p x = q x) -> filter p A = filter q A\n\nPremises:\nInductive list (A : Type) : Type := nil : list A | cons : A -> list A -> list A Arguments list _%type_scope Arguments nil {A}%type_scope Arguments cons {A}%type_scope a l%list_scope : rename\nfilter : forall A : Type, (A -> bool) -> list A -> list A\nfilter_pq_mono : forall p q A, (forall x, x el A -> p x -> q x) -> filter p A <<= filter q A\nfilter_id : forall p A, (forall x, x el A -> p x) -> filter p A = A\nmap_ext_in_iff : map ?f ?l = map ?g ?l < -> (forall a : ?A, a el ?l -> ?f a = ?g a) where ?A : [X : Type p : X -> bool q : X -> bool A : list X |- Type] ?B : [X : Type p : X -> bool q : X -> bool A : list X |- Type] ?f : [X : Type p : X -> bool q : X -> bool A : list X |- ?A -> ?B] ?g : [X : Type p : X -> bool q : X -> bool A : list X |- ?A -> ?B] ?l : [X : Type p : X -> bool q : X -> bool A : list X |- list ?A]\ncfind : forall (A0 : list ?X) (p0 : ?X -> Prop), (forall x : ?X, dec (p0 x)) -> {x : ?X | x el A0 /\\ p0 x} + {forall x : ?X, x el A0 -> ~ p0 x} where ?X : [X : Type p : X -> bool q : X -> bool A : list X |- Type]\nlist_cc : forall (X : Type) (p : X -> Prop) (A : list X), (forall x : X, dec (p x)) -> (exists x : X, x el A /\\ p x) -> {x : X | x el A /\\ p x}\nfilter_fst : forall p x A, p x -> filter p (x :: A) = x :: filter p A\nfilter_fst' : forall p x A, ~ p x -> filter p (x :: A) = filter p A\nlist_exists_DM : forall (X : Type) (A : list X) (p : X -> Prop), (forall x : X, dec (p x)) -> ~ (forall x : X, x el A -> ~ p x) -> exists x : X, x el A /\\ p x\nlist_forall_dec : forall (X : Type) (A : list X) (p : X -> Prop), (forall x : X, dec (p x)) -> dec (forall x : X, x el A -> p x)\nlist_exists_dec : forall (X : Type) (A : list X) (p : X -> Prop), (forall x : X, dec (p x)) -> dec (exists x : X, x el A /\\ p x)\nfilter_mono : forall p A B, A <<= B -> filter p A <<= filter p B\nfilter_app : forall p A B, filter p (A ++ B) = filter p A ++ filter p B\nin_filter_iff : forall x p A, x el filter p A < -> x el A /\\ p x\ndisjoint : forall X : Type, list X -> list X -> Prop\nequi : forall X : Type, list X -> list X -> Prop\nfilter_ext_in : forall (A : Type) (f g : A -> bool) (l : list A), (forall a : A, a el l -> f a = g a) -> filter f l = filter g l\nfilter_ext_in_iff : forall (A : Type) (f g : A -> bool) (l : list A), filter f l = filter g l < -> (forall a : A, a el l -> f a = g a)\nfilter_ext : forall (A : Type) (f g : A -> bool), (forall a : A, f a = g a) -> forall l : list A, filter f l = filter g l\ninclp : forall X : Type, list X -> (X -> Prop) -> Prop\ndec_DN : forall X : Prop, dec X -> ~ ~ X -> X\nZMicromega.vars = fix vars (jmp : positive) (p : EnvRing.Pol Z) {struct p} : list positive := match p with | EnvRing.Pc _ => [] | EnvRing.Pinj j p0 => vars (j + jmp)%positive p0 | EnvRing.PX p0 _ q => jmp :: vars jmp p0 ++ vars (Pos.succ jmp) q end : positive -> EnvRing.Pol Z -> list positive Arguments ZMicromega.vars _%positive_scope\next_in_filter : forall (A : Type) (f g : A -> bool) (l : list A), filter f l = filter g l -> forall a : A, a el l -> f a = g a\nfilter_incl : forall p A, filter p A <<= A\nRingMicromega.Psatz_ind : forall (C : Type) (P : RingMicromega.Psatz C -> Prop), (forall n : nat, P (RingMicromega.PsatzIn C n)) -> (forall p : RingMicromega.PolC C, P (RingMicromega.PsatzSquare p)) -> (forall (p : RingMicromega.PolC C) (p0 : RingMicromega.Psatz C), P p0 -> P (RingMicromega.PsatzMulC p p0)) -> (forall p : RingMicromega.Psatz C, P p -> forall p0 : RingMicromega.Psatz C, P p0 -> P (RingMicromega.PsatzMulE p p0)) ->...-> forall p : RingMicromega.Psatz C, P p\nList.filter_app : forall (A : Type) (f : A -> bool) (l l' : list A), filter f (l ++ l') = filter f l ++ filter f l'\nDec : forall X : Prop, dec X -> dec X\nfilter_In : forall (A : Type) (f : A -> bool) (x : A) (l : list A), x el filter f l < -> x el l /\\ f x = true\nRefl.make_conj_in : forall (A : Type) (eval : A -> Prop) (l : list A), Refl.make_conj eval l -> forall p : A, p el l -> eval p\nfilter_map : forall (A : Type) (f g : A -> bool) (l : list A), filter f l = filter g l < -> map f l = map g l\nForall_forall : forall (A : Type) (P : A -> Prop) (l : list A), Forall P l < -> (forall x : A, x el l -> P x)"}, {"role": "assistant", "content": "```coq\n```"}], "original": "", "succ": false}]