[{"history": {"proof": "shelve.", "repairs": [""], "exceptions": []}, "chat": [{"role": "user", "content": "I will give you a Coq proof state, including both hypotheses and a specific goal and your need to prove it. Your response should be a singular code block of Coq proof starting with \"```coq\n\", ending with \"Qed.```\", without any additional explanation or commentary. Follow to these guidelines:\nIntroduce variables using unique names to avoid any conflicts.\nKeep each command distinct and separated, avoid concatenations like ';' or '[cmd|cmd]'.\nOrganize your proof with bullets like '-', '+', and '*' instead of braces ({, }). Shift to their double symbols like '--' and '++', when necessary.\nEffectively use given premises, follow the syntax and structure demonstrated in the examples provided.\n\nExample 1:\n\nHypotheses:\nn, m: nat\nIHn: m + n = n + m\n\nGoal:\nm + S n = S n + m\n\nProof:\n```coq\nsimpl. rewrite <- IHn. auto.\nQed.```\n\nExample 2:\nHypotheses:\n\nGoal:\nforall n m : nat, m + n = n + m\n\n```coq\nintros n m. induction n.\n- simpl. auto.\n- simpl. rewrite <- IHn. auto.\nQed.```\n\nSolve This Proof State:\n\nHypotheses:\nX: Type\nR: X -> X -> Prop\nll: list X\n\nGoal:\nForall2 R ll ll <-> Forall (fun x : X => R x x) ll\n\nPremises:\nInductive list (A : Type) : Type := nil : list A | cons : A -> list A -> list A Arguments list _%type_scope Arguments nil {A}%type_scope Arguments cons {A}%type_scope a l%list_scope : rename\nForall2 : forall A B : Type, (A -> B -> Prop) -> list A -> list B -> Prop\nForall : forall A : Type, (A -> Prop) -> list A -> Prop\nmap_ext_in_iff : map ?f ?l = map ?g ?l < -> (forall a : ?A, In a ?l -> ?f a = ?g a) where ?A : [X : Type R : X -> X -> Prop ll : list X |- Type] ?B : [X : Type R : X -> X -> Prop ll : list X |- Type] ?f : [X : Type R : X -> X -> Prop ll : list X |- ?A -> ?B] ?g : [X : Type R : X -> X -> Prop ll : list X |- ?A -> ?B] ?l : [X : Type R : X -> X -> Prop ll : list X |- list ?A]\nForall2_cons_inv_r : forall (X Y : Type) (R : X -> Y -> Prop) (b : Y) (ll : list X) (mm : list Y), Forall2 R ll (b :: mm) -> {a : X & {ll' : list X | R a b /\\ ll = a :: ll' /\\ Forall2 R ll' mm}}\nForall2_map_left : forall (X Y Z : Type) (R : Y -> X -> Prop) (f : Z -> Y) (ll : list Z) (mm : list X), Forall2 R (map f ll) mm < -> Forall2 (fun (x : Z) (y : X) => R (f x) y) ll mm\nForall2_map_right : forall (X Y Z : Type) (R : Y -> X -> Prop) (f : Z -> X) (mm : list Y) (ll : list Z), Forall2 R mm (map f ll) < -> Forall2 (fun (y : Y) (x : Z) => R y (f x)) mm ll\nForall2_map_both : forall (X Y X' Y' : Type) (R : X -> Y -> Prop) (f : X' -> X) (g : Y' -> Y) (ll : list X') (mm : list Y'), Forall2 R (map f ll) (map g mm) < -> Forall2 (fun (x : X') (y : Y') => R (f x) (g y)) ll mm\nForall2_app_inv_r : forall (X Y : Type) (R : X -> Y -> Prop) (l : list X) (m1 m2 : list Y), Forall2 R l (m1 ++ m2) -> {l1 : list X & {l2 : list X | Forall2 R l1 m1 /\\ Forall2 R l2 m2 /\\ l = l1 ++ l2}}\nForall2_cons_inv_l : forall (X Y : Type) (R : X -> Y -> Prop) (a : X) (ll : list X) (mm : list Y), Forall2 R (a :: ll) mm -> {b : Y & {mm' : list Y | R a b /\\ mm = b :: mm' /\\ Forall2 R ll mm'}}\nForall2_cons_inv : forall (X Y : Type) (R : X -> Y -> Prop) (x : X) (l : list X) (y : Y) (m : list Y), Forall2 R (x :: l) (y :: m) < -> R x y /\\ Forall2 R l m\nForall2_mono : forall (X Y : Type) (R S : X -> Y -> Prop), (forall (x : X) (y : Y), R x y -> S x y) -> forall (l : list X) (m : list Y), Forall2 R l m -> Forall2 S l m\nForall2_nil_inv_l : forall (X Y : Type) (R : X -> Y -> Prop) (m : list Y), Forall2 R nil m -> m = nil\nForall2_nil_inv_r : forall (X Y : Type) (R : X -> Y -> Prop) (m : list X), Forall2 R m nil -> m = nil\nForall2_app_inv_l : forall (X Y : Type) (R : X -> Y -> Prop) (l1 l2 : list X) (m : list Y), Forall2 R (l1 ++ l2) m -> {m1 : list Y & {m2 : list Y | Forall2 R l1 m1 /\\ Forall2 R l2 m2 /\\ m = m1 ++ m2}}\nForall_and : forall (A : Type) (P Q : A -> Prop) (l : list A), Forall P l -> Forall Q l -> Forall (fun x : A => P x /\\ Q x) l\nExists_Forall_neg : forall (A : Type) (P : A -> Prop) (l : list A), (forall x : A, P x \\/ ~ P x) -> Exists (fun x : A => ~ P x) l < -> ~ Forall P l\nForall_and_inv : forall (A : Type) (P Q : A -> Prop) (l : list A), Forall (fun x : A => P x /\\ Q x) l -> Forall P l /\\ Forall Q l\nForall_Exists_neg : forall (A : Type) (P : A -> Prop) (l : list A), Forall (fun x : A => ~ P x) l < -> ~ Exists P l\nexists_Forall : forall (A B : Type) (P : A -> B -> Prop) (l : list B), (exists k : A, Forall (P k) l) -> Forall (fun x : B => exists k : A, P k x) l\nmap_ext_Forall : forall (A B : Type) (f g : A -> B) (l : list A), Forall (fun x : A => f x = g x) l -> map f l = map g l\nneg_Forall_Exists_neg : forall (A : Type) (P : A -> Prop) (l : list A), (forall x : A, {P x} + {~ P x}) -> ~ Forall P l -> Exists (fun x : A => ~ P x) l\nForall2_cons : forall (A B : Type) (R : A -> B -> Prop) (x : A) (y : B) (l : list A) (l' : list B), R x y -> Forall2 R l l' -> Forall2 R (x :: l) (y :: l')\nForall2_app : forall (A B : Type) (R : A -> B -> Prop) (l1 l2 : list A) (l1' l2' : list B), Forall2 R l1 l1' -> Forall2 R l2 l2' -> Forall2 R (l1 ++ l2) (l1' ++ l2')\nForall_image : forall (A B : Type) (f : A -> B) (l : list B), Forall (fun y : B => exists x : A, y = f x) l < -> (exists l' : list A, l = map f l')\nARmul_1_l : forall (R : Type) (rO rI : R) (radd rmul rsub : R -> R -> R) (ropp : R -> R) (req : R -> R -> Prop), almost_ring_theory rO rI radd rmul rsub ropp req -> forall x : R, req (rmul rI x) x\nForall2_ind : forall (A B : Type) (R : A -> B -> Prop) (P : list A -> list B -> Prop), P nil nil -> (forall (x : A) (y : B) (l : list A) (l' : list B), R x y -> Forall2 R l l' -> P l l' -> P (x :: l) (y :: l')) -> forall (l : list A) (l0 : list B), Forall2 R l l0 -> P l l0\nForall2_sind : forall (A B : Type) (R : A -> B -> Prop) (P : list A -> list B -> SProp), P nil nil -> (forall (x : A) (y : B) (l : list A) (l' : list B), R x y -> Forall2 R l l' -> P l l' -> P (x :: l) (y :: l')) -> forall (l : list A) (l0 : list B), Forall2 R l l0 -> P l l0\nList.Forall2_app_inv_l : forall (A B : Type) (R : A -> B -> Prop) (l1 l2 : list A) (l' : list B), Forall2 R (l1 ++ l2) l' -> exists l1' l2' : list B, Forall2 R l1 l1' /\\ Forall2 R l2 l2' /\\ l' = l1' ++ l2'\nList.Forall2_app_inv_r : forall (A B : Type) (R : A -> B -> Prop) (l1' l2' : list B) (l : list A), Forall2 R l (l1' ++ l2') -> exists l1 l2 : list A, Forall2 R l1 l1' /\\ Forall2 R l2 l2' /\\ l = l1 ++ l2\nARopp_mul_l : forall (R : Type) (rO rI : R) (radd rmul rsub : R -> R -> R) (ropp : R -> R) (req : R -> R -> Prop), almost_ring_theory rO rI radd rmul rsub ropp req -> forall x y : R, req (ropp (rmul x y)) (rmul (ropp x) y)\nARmul_0_l : forall (R : Type) (rO rI : R) (radd rmul rsub : R -> R -> R) (ropp : R -> R) (req : R -> R -> Prop), almost_ring_theory rO rI radd rmul rsub ropp req -> forall x : R, req (rmul rO x) rO\nForall_fold_right : forall (A : Type) (P : A -> Prop) (l : list A), Forall P l < -> fold_right (fun x : A => and (P x)) True l"}, {"role": "assistant", "content": "```coq\n```"}], "original": "", "succ": false}]