[{"history": {"proof": "shelve.", "repairs": [""], "exceptions": []}, "chat": [{"role": "user", "content": "I will give you a Coq proof state, including both hypotheses and a specific goal and your need to prove it. Your response should be a singular code block of Coq proof starting with \"```coq\n\", ending with \"Qed.```\", without any additional explanation or commentary. Follow to these guidelines:\nIntroduce variables using unique names to avoid any conflicts.\nKeep each command distinct and separated, avoid concatenations like ';' or '[cmd|cmd]'.\nOrganize your proof with bullets like '-', '+', and '*' instead of braces ({, }). Shift to their double symbols like '--' and '++', when necessary.\nEffectively use given premises, follow the syntax and structure demonstrated in the examples provided.\n\nExample 1:\n\nHypotheses:\nn, m: nat\nIHn: m + n = n + m\n\nGoal:\nm + S n = S n + m\n\nProof:\n```coq\nsimpl. rewrite <- IHn. auto.\nQed.```\n\nExample 2:\nHypotheses:\n\nGoal:\nforall n m : nat, m + n = n + m\n\n```coq\nintros n m. induction n.\n- simpl. auto.\n- simpl. rewrite <- IHn. auto.\nQed.```\n\nSolve This Proof State:\n\nHypotheses:\nX: Type\nY: Type\nS: X -> Y -> Prop\nR: X -> Y -> Prop\n\nGoal:\n(forall (x : X) (y : Y), R x y -> S x y) -> forall (l : list X) (m : list Y), Forall2 R l m -> Forall2 S l m\n\nPremises:\nInductive list (A : Type) : Type := nil : list A | cons : A -> list A -> list A Arguments list _%type_scope Arguments nil {A}%type_scope Arguments cons {A}%type_scope a l%list_scope : rename\nForall2 : forall A B : Type, (A -> B -> Prop) -> list A -> list B -> Prop\nForall2_mono : forall (X Y : Type) (R S : X -> Y -> Prop), (forall (x : X) (y : Y), R x y -> S x y) -> forall (l : list X) (m : list Y), Forall2 R l m -> Forall2 S l m\nForall2_conj : forall (X Y : Type) (R S : X -> Y -> Prop) (ll : list X) (mm : list Y), Forall2 (fun (x : X) (y : Y) => R x y /\\ S x y) ll mm < -> Forall2 R ll mm /\\ Forall2 S ll mm\nForall2_cons_inv : forall (X Y : Type) (R : X -> Y -> Prop) (x : X) (l : list X) (y : Y) (m : list Y), Forall2 R (x :: l) (y :: m) < -> R x y /\\ Forall2 R l m\nForall2_length : forall (X Y : Type) (R : X -> Y -> Prop) (l : list X) (m : list Y), Forall2 R l m -> length l = length m\nForall2_app_inv_l : forall (X Y : Type) (R : X -> Y -> Prop) (l1 l2 : list X) (m : list Y), Forall2 R (l1 ++ l2) m -> {m1 : list Y & {m2 : list Y | Forall2 R l1 m1 /\\ Forall2 R l2 m2 /\\ m = m1 ++ m2}}\nForall2_nil_inv_l : forall (X Y : Type) (R : X -> Y -> Prop) (m : list Y), Forall2 R nil m -> m = nil\nForall2_app_inv_r : forall (X Y : Type) (R : X -> Y -> Prop) (l : list X) (m1 m2 : list Y), Forall2 R l (m1 ++ m2) -> {l1 : list X & {l2 : list X | Forall2 R l1 m1 /\\ Forall2 R l2 m2 /\\ l = l1 ++ l2}}\nForall2_cons_inv_l : forall (X Y : Type) (R : X -> Y -> Prop) (a : X) (ll : list X) (mm : list Y), Forall2 R (a :: ll) mm -> {b : Y & {mm' : list Y | R a b /\\ mm = b :: mm' /\\ Forall2 R ll mm'}}\nlist_exists : forall (X Y : Type) (R : X -> Y -> Prop) (l : list X), (forall x : X, In x l -> exists y : Y, R x y) -> exists ll : list Y, Forall2 R l ll\nForall2_map_left : forall (X Y Z : Type) (R : Y -> X -> Prop) (f : Z -> Y) (ll : list Z) (mm : list X), Forall2 R (map f ll) mm < -> Forall2 (fun (x : Z) (y : X) => R (f x) y) ll mm\nForall2_cons_inv_r : forall (X Y : Type) (R : X -> Y -> Prop) (b : Y) (ll : list X) (mm : list Y), Forall2 R ll (b :: mm) -> {a : X & {ll' : list X | R a b /\\ ll = a :: ll' /\\ Forall2 R ll' mm}}\nForall2_map_right : forall (X Y Z : Type) (R : Y -> X -> Prop) (f : Z -> X) (mm : list Y) (ll : list Z), Forall2 R mm (map f ll) < -> Forall2 (fun (y : Y) (x : Z) => R y (f x)) mm ll\nForall2_nil_inv_r : forall (X Y : Type) (R : X -> Y -> Prop) (m : list X), Forall2 R m nil -> m = nil\nForall2_map_both : forall (X Y X' Y' : Type) (R : X -> Y -> Prop) (f : X' -> X) (g : Y' -> Y) (ll : list X') (mm : list Y'), Forall2 R (map f ll) (map g mm) < -> Forall2 (fun (x : X') (y : Y') => R (f x) (g y)) ll mm\nForall2_ind : forall (A B : Type) (R : A -> B -> Prop) (P : list A -> list B -> Prop), P nil nil -> (forall (x : A) (y : B) (l : list A) (l' : list B), R x y -> Forall2 R l l' -> P l l' -> P (x :: l) (y :: l')) -> forall (l : list A) (l0 : list B), Forall2 R l l0 -> P l l0\nForall2_sind : forall (A B : Type) (R : A -> B -> Prop) (P : list A -> list B -> SProp), P nil nil -> (forall (x : A) (y : B) (l : list A) (l' : list B), R x y -> Forall2 R l l' -> P l l' -> P (x :: l) (y :: l')) -> forall (l : list A) (l0 : list B), Forall2 R l l0 -> P l l0\nForall2_cons : forall (A B : Type) (R : A -> B -> Prop) (x : A) (y : B) (l : list A) (l' : list B), R x y -> Forall2 R l l' -> Forall2 R (x :: l) (y :: l')\nprefix_rect : forall (X : Type) (P : list X -> list X -> Type), (forall ll : list X, P nil ll) -> (forall (x : X) (l ll : list X), l <p ll -> P l ll -> P (x :: l) (x :: ll)) -> forall l ll : list X, l <p ll -> P l ll\nPermutation_ind : forall (A : Type) (P : list A -> list A -> Prop), P nil nil -> (forall (x : A) (l l' : list A), l ~p l' -> P l l' -> P (x :: l) (x :: l')) -> (forall (x y : A) (l : list A), P (y :: x :: l) (x :: y :: l)) -> (forall l l' l'' : list A, l ~p l' -> P l l' -> l' ~p l'' -> P l' l'' -> P l l'') -> forall l l0 : list A, l ~p l0 -> P l l0\nForall2_Forall : forall (X : Type) (R : X -> X -> Prop) (ll : list X), Forall2 R ll ll < -> Forall (fun x : X => R x x) ll\nNoDup_ind : forall (A : Type) (P : list A -> Prop), P nil -> (forall (x : A) (l : list A), ~ In x l -> NoDup l -> P l -> P (x :: l)) -> forall l : list A, NoDup l -> P l\nListDec.decidable_eq = fun A : Type => forall x y : A, Decidable.decidable (x = y) : Type -> Prop Arguments ListDec.decidable_eq _%type_scope\nForall_ind : forall (A : Type) (P : A -> Prop) (P0 : list A -> Prop), P0 nil -> (forall (x : A) (l : list A), P x -> Forall P l -> P0 l -> P0 (x :: l)) -> forall l : list A, Forall P l -> P0 l\nList.Forall2_app_inv_r : forall (A B : Type) (R : A -> B -> Prop) (l1' l2' : list B) (l : list A), Forall2 R l (l1' ++ l2') -> exists l1 l2 : list A, Forall2 R l1 l1' /\\ Forall2 R l2 l2' /\\ l = l1 ++ l2\nlt = fun n m : nat => S n <= m : nat -> nat -> Prop Arguments lt (_ _)%nat_scope\nin_in_remove : forall (A : Type) (eq_dec : forall x y : A, {x = y} + {x <> y}) (l : list A) (x y : A), x <> y -> In x l -> In x (remove eq_dec y l)\nARadd_comm : forall (R : Type) (rO rI : R) (radd rmul rsub : R -> R -> R) (ropp : R -> R) (req : R -> R -> Prop), almost_ring_theory rO rI radd rmul rsub ropp req -> forall x y : R, req (radd x y) (radd y x)\nARmul_comm : forall (R : Type) (rO rI : R) (radd rmul rsub : R -> R -> R) (ropp : R -> R) (req : R -> R -> Prop), almost_ring_theory rO rI radd rmul rsub ropp req -> forall x y : R, req (rmul x y) (rmul y x)\nARmul_assoc : forall (R : Type) (rO rI : R) (radd rmul rsub : R -> R -> R) (ropp : R -> R) (req : R -> R -> Prop), almost_ring_theory rO rI radd rmul rsub ropp req -> forall x y z : R, req (rmul x (rmul y z)) (rmul (rmul x y) z)\nInductive le (n : nat) : nat -> Prop := le_n : n <= n | le_S : forall m : nat, n <= m -> n <= S m Arguments le (_ _)%nat_scope Arguments le_n _%nat_scope Arguments le_S (_ _)%nat_scope"}, {"role": "assistant", "content": "```coq\n```"}], "original": "", "succ": false}]