[{"history": {"proof": "shelve.", "repairs": [""], "exceptions": []}, "chat": [{"role": "user", "content": "I will give you a Coq proof state, including both hypotheses and a specific goal and your need to prove it. Your response should be a singular code block of Coq proof starting with \"```coq\n\", ending with \"Qed.```\", without any additional explanation or commentary. Follow to these guidelines:\nIntroduce variables using unique names to avoid any conflicts.\nKeep each command distinct and separated, avoid concatenations like ';' or '[cmd|cmd]'.\nOrganize your proof with bullets like '-', '+', and '*' instead of braces ({, }). Shift to their double symbols like '--' and '++', when necessary.\nEffectively use given premises, follow the syntax and structure demonstrated in the examples provided.\n\nExample 1:\n\nHypotheses:\nn, m: nat\nIHn: m + n = n + m\n\nGoal:\nm + S n = S n + m\n\nProof:\n```coq\nsimpl. rewrite <- IHn. auto.\nQed.```\n\nExample 2:\nHypotheses:\n\nGoal:\nforall n m : nat, m + n = n + m\n\n```coq\nintros n m. induction n.\n- simpl. auto.\n- simpl. rewrite <- IHn. auto.\nQed.```\n\nSolve This Proof State:\n\nHypotheses:\nn: nat\nw: Vector.t nat n\nv: Vector.t nat n\n\nGoal:\nvec_sum (vec_plus v w) = vec_sum v + vec_sum w\n\nPremises:\nInductive t : nat -> Set := F1 : forall n : nat, pos (S n) | FS : forall n : nat, pos n -> pos (S n) Arguments Fin.t _%nat_scope Arguments Fin.F1 {n}%nat_scope Arguments Fin.FS {n}%nat_scope\nvec_sum : forall n : nat, vec nat n -> nat\nModule Vector := Struct Inductive t (A : Type) : nat -> Type := nil : t A 0 | cons : A -> forall n : nat, t A n -> t A (S n) Definition t_rect : forall (A : Type) (P : forall n : nat, vec A n -> Type), P 0 vec_nil -> (forall (h : A) (n : nat) (t : vec A n), P n t -> P (S n) (h ## t)) -> forall (n : nat) (t : vec A n), P n t. Definition t_ind : forall (A : Type) (P : forall n : nat, vec A n -> Prop), P 0 vec_nil -> (forall (h : A) (n : nat) (t : vec A n), P n t -> P (S n) (h ## t)) -> forall (n : nat) (\nInductive nat : Set := O : nat | S : nat -> nat Arguments S _%nat_scope\nvec_plus = fun (n : nat) (v w : vec nat n) => vec_set_pos (fun p : pos n => (v#>p) + (w#>p)) : forall n : nat, vec nat n -> vec nat n -> vec nat n Arguments vec_plus {n}%nat_scope\nvec_plus_assoc : forall (n : nat) (u v w : vec nat n), vec_plus u (vec_plus v w) = vec_plus (vec_plus u v) w\nvec_plus_cons : forall (n x : nat) (v : vec nat n) (y : nat) (w : vec nat n), vec_plus (x ## v) (y ## w) = x + y ## vec_plus v w\nvec_plus_is_zero : forall (n : nat) (u v : vec nat n), vec_zero = vec_plus u v -> u = vec_zero /\\ v = vec_zero\nvec_zero_plus : forall (n : nat) (v : vec nat n), vec_plus vec_zero v = v\nvec_plus_comm : forall (n : nat) (v w : vec nat n), vec_plus v w = vec_plus w v\nFin.depair_sanity : forall (o : pos ?m) (p : pos ?n), proj1_sig (Fin.to_nat (Fin.depair o p)) = ?n * proj1_sig (Fin.to_nat o) + proj1_sig (Fin.to_nat p) where ?m : [n : nat v : vec nat n w : vec nat n |- nat] ?n : [n : nat v : vec nat n w : vec nat n |- nat]\nFin.weak : forall p : nat, (pos ?m -> pos ?n) -> pos (p + ?m) -> pos (p + ?n) where ?m : [n : nat v : vec nat n w : vec nat n |- nat] ?n : [n : nat v : vec nat n w : vec nat n |- nat]\nvec_pos_plus : forall (n : nat) (v w : vec nat n) (p : pos n), vec_plus v w#>p = (v#>p) + (w#>p)\npos_S_inv : forall p : pos (S ?n), (p = pos0) + {q : pos ?n | p = pos_nxt q} where ?n : [n : nat v : vec nat n w : vec nat n |- nat]\nFin.R_sanity : forall (n0 : nat) (p : pos ?m), proj1_sig (Fin.to_nat (Fin.R n0 p)) = n0 + proj1_sig (Fin.to_nat p) where ?m : [n : nat v : vec nat n w : vec nat n |- nat]\nvec_change_succ : forall (n : nat) (v : vec nat n) (p : pos n), v[(S (v#>p))/p] = vec_plus (vec_one p) v\nFin.L : forall n0 : nat, pos ?m -> pos (?m + n0) where ?m : [n : nat v : vec nat n w : vec nat n |- nat]\nFin.R : forall n0 : nat, pos ?m -> pos (n0 + ?m) where ?m : [n : nat v : vec nat n w : vec nat n |- nat]\nFin.L_sanity : forall (n0 : nat) (p : pos ?m), proj1_sig (Fin.to_nat (Fin.L n0 p)) = proj1_sig (Fin.to_nat p) where ?m : [n : nat v : vec nat n w : vec nat n |- nat]\nvec_change_pred : forall (n : nat) (v : vec nat n) (p : pos n) (u : nat), v#>p = S u -> v = vec_plus (vec_one p) (v[u/p])\nvec_pos_ext : forall (X : Type) (n : nat) (v w : vec X n), (forall p : pos n, v#>p = w#>p) -> v = w\nNat.Bezout = fun n m p : nat => exists a b : nat, a * n = p + b * m : nat -> nat -> nat -> Prop Arguments Nat.Bezout (_ _ _)%nat_scope\nNat.Odd = fun n : nat => exists m : nat, n = 2 * m + 1 : nat -> Prop Arguments Nat.Odd _%nat_scope\nPeanoNat.Nat.add_wd_obligation_1 = fun (x y : nat) (H : x = y) (x0 y0 : nat) (H0 : x0 = y0) => eq_ind_r (fun x1 : nat => x + x1 = y + y0) (eq_ind_r (fun x1 : nat => x1 + y0 = y + y0) eq_refl H) H0 : Morphisms.respectful eq (Morphisms.respectful eq eq) Init.Nat.add Init.Nat.add\nInit.Nat.mul = fix mul (n m : nat) {struct n} : nat := match n with | 0 => 0 | S p => m + mul p m end : nat -> nat -> nat Arguments Init.Nat.mul (_ _)%nat_scope\nInit.Nat.land = fun a b : nat => Init.Nat.bitwise andb a a b : nat -> nat -> nat Arguments Init.Nat.land (_ _)%nat_scope\nNat.ones = fun n : nat => Nat.pred (Nat.shiftl 1 n) : nat -> nat Arguments Nat.ones _%nat_scope\nInit.Nat.lxor = fun a b : nat => Init.Nat.bitwise xorb (Init.Nat.max a b) a b : nat -> nat -> nat Arguments Init.Nat.lxor (_ _)%nat_scope\nInit.Nat.lor = fun a b : nat => Init.Nat.bitwise orb (Init.Nat.max a b) a b : nat -> nat -> nat Arguments Init.Nat.lor (_ _)%nat_scope\nInit.Nat.log2 = fun n : nat => Init.Nat.log2_iter (Init.Nat.pred n) 0 1 0 : nat -> nat Arguments Init.Nat.log2 _%nat_scope\nlt = fun n m : nat => S n <= m : nat -> nat -> Prop Arguments lt (_ _)%nat_scope\nNat.Even = fun n : nat => exists m : nat, n = 2 * m : nat -> Prop Arguments Nat.Even _%nat_scope\nInit.Nat.odd = fun n : nat => negb (Init.Nat.even n) : nat -> bool Arguments Init.Nat.odd _%nat_scope\nInit.Nat.pred = fun n : nat => match n with | 0 => n | S u => u end : nat -> nat Arguments Init.Nat.pred _%nat_scope\nInit.Nat.div = fun x y : nat => match y with | 0 => y | S y' => fst (Init.Nat.divmod x y' 0 y') end : nat -> nat -> nat Arguments Init.Nat.div (_ _)%nat_scope"}, {"role": "assistant", "content": "```coq\n```"}], "original": "", "succ": false}]