[{"history": {"proof": "shelve.", "repairs": [""], "exceptions": []}, "chat": [{"role": "user", "content": "I will give you a Coq proof state, including both hypotheses and a specific goal and your need to prove it. Your response should be a singular code block of Coq proof starting with \"```coq\n\", ending with \"Qed.```\", without any additional explanation or commentary. Follow to these guidelines:\nIntroduce variables using unique names to avoid any conflicts.\nKeep each command distinct and separated, avoid concatenations like ';' or '[cmd|cmd]'.\nOrganize your proof with bullets like '-', '+', and '*' instead of braces ({, }). Shift to their double symbols like '--' and '++', when necessary.\nEffectively use given premises, follow the syntax and structure demonstrated in the examples provided.\n\nExample 1:\n\nHypotheses:\nn, m: nat\nIHn: m + n = n + m\n\nGoal:\nm + S n = S n + m\n\nProof:\n```coq\nsimpl. rewrite <- IHn. auto.\nQed.```\n\nExample 2:\nHypotheses:\n\nGoal:\nforall n m : nat, m + n = n + m\n\n```coq\nintros n m. induction n.\n- simpl. auto.\n- simpl. rewrite <- IHn. auto.\nQed.```\n\nSolve This Proof State:\n\nHypotheses:\nd: nat\nc: nat\nb: nat\na: nat\n\nGoal:\na div b -> c div d -> a * c div b * d\n\nPremises:\nNat.div_div : forall a b c : nat, b <> 0 -> c <> 0 -> a / b / c = a / (b * c)\nNat.mod_divides : forall a b : nat, b <> 0 -> a mod b = 0 < -> (exists c : nat, a = b * c)\nFin.R : forall n : nat, Fin.t ?m -> Fin.t (n + ?m) where ?m : [a : nat b : nat c : nat d : nat |- nat]\nFin.L : forall n : nat, Fin.t ?m -> Fin.t (?m + n) where ?m : [a : nat b : nat c : nat d : nat |- nat]\ndivides_trans : forall x y z : nat, x div y -> y div z -> x div z\nNat.crossmul_le_addsquare : forall a b : nat, 0 <= a -> 0 <= b -> b * a + a * b <= a * a + b * b\ndivides_mult_r : forall p q k : nat, p div q -> p div q * k\ndivides_mult : forall p q k : nat, p div q -> p div k * q\ndivides_anti : forall x y : nat, x div y -> y div x -> x = y\nNat.sqrt_up_le_square : forall a b : nat, 0 <= a -> 0 <= b -> a <= b * b < -> Nat.sqrt_up a <= b\nNat.log2_up_same : forall a b : nat, 0 < a -> 0 < b -> Nat.log2_up a = Nat.log2_up b -> a < 2 * b\nNat.div_mul : forall a b : nat, b <> 0 -> a * b / b = a\nNat.pow_succ_r : forall a b : nat, 0 <= b -> a ^ S b = a * a ^ b\nNat.sqrt_up_mul_above : forall a b : nat, 0 <= a -> 0 <= b -> Nat.sqrt_up (a * b) <= Nat.sqrt_up a * Nat.sqrt_up b\nNat.log2_mul_below : forall a b : nat, 0 < a -> 0 < b -> Nat.log2 a + Nat.log2 b <= Nat.log2 (a * b)\nNat.log2_mul_pow2 : forall a b : nat, 0 < a -> 0 <= b -> Nat.log2 (a * 2 ^ b) = b + Nat.log2 a\nNat.log2_up_lt_cancel : forall a b : nat, Nat.log2_up a < Nat.log2_up b -> a < b\nNat.square_add_le : forall a b : nat, 0 <= a -> 0 <= b -> (a + b) * (a + b) <= 2 * (a * a + b * b)\nNat.log2_le_pow2 : forall a b : nat, 0 < a -> 2 ^ b <= a < -> b <= Nat.log2 a\nNat.pow_neg_r : forall a b : nat, b < 0 -> a ^ b = 0\nNat.pow_nonzero : forall a b : nat, a <> 0 -> a ^ b <> 0\nNat.sqrt_lt_square : forall a b : nat, a < b * b < -> Nat.sqrt a < b\nNat.sqrt_le_square : forall a b : nat, b * b <= a < -> b <= Nat.sqrt a\ndivides_0_inv : forall p : nat, 0 div p -> p = 0\ndivides_1_inv : forall p : nat, p div 1 -> p = 1\nNat.pow_succ_r' : forall a b : nat, a ^ S b = a * a ^ b\ndivides_2_inv : forall p : nat, p div 2 -> p = 1 \\/ p = 2\nNat.log2_eq_succ_is_pow2 : forall a : nat, Nat.log2 (S a) = S (Nat.log2 a) -> exists b : nat, S a = 2 ^ b\ndivides_refl : forall x : nat, x div x\ndivides_0 : forall p : nat, p div 0"}, {"role": "assistant", "content": "```coq\n```"}], "original": "", "succ": false}]