[{"history": {"proof": "qsimpl time: 1 use: type. qsimpl time: 1 use: type. qsimpl time: 1 use: type. qsimpl time: 1 use: type. qsimpl time: 1 use: type. qsimpl time: 1 use: type. qsimpl time: 1 use: type. qsimpl time: 1 use: type. qsimpl time: 1 use: type. qsimpl time: 1 use: type. qsimpl time: 1 use: type. qsimpl time: 1 use: type. qsimpl time: 1 use: type. qsimpl time: 1 use: type. qsimpl time: 1 use: type. qsimpl time: 1 use: type. qsimpl time: 1 use: type. qsimpl time: 1 use: type. qsimpl time: 1 use: type. qsimpl time: 1 use: type. qsimpl time: 1 use: type. qsimpl time: 1 use: type. qsimpl time: 1 use: type. qsimpl time: 1 use: type. qsimpl time: 1 use: type. qsimpl time: 1 use: type. qsimpl time: 1 use: type. qsimpl time: 1 use: type. qsimpl time: 1 use: type. qsimpl time: 1 use: type. qsimpl time: 1 use: type. qsimpl time: 1 use: type. qsimpl time: 1 use: type. qsimpl time: 1 use: type. qsimpl time: 1 use: type. qsimpl time: 1 use: type. qsimpl time: 1 use: type. qsimpl time: 1 use: type. qsimpl time: 1 use: type. qsimpl time: 1 use: type. qsimpl time: 1 use: type. qsimpl time: 1 use: type. qsimpl time: 1 use: type. qsimpl time: 1 use: type. qsimpl time: 1 use: type. qsimpl time: 1 use: type. qsimpl time: 1 use: type. qsimpl time: 1 use: type. qsimpl time: 1 use: type. qsimpl time: 1 use: type. qsimpl time: 1 use: type. qsimpl time: 1 use: type. qsimpl time: 1 use: type. qsimpl time: 1 use: type. qsimpl time: 1 use: type. qsimpl time: 1 use: type. qsimpl time: 1 use: type. qsimpl time: 1 use: type. qsimpl time: 1 use: type. qsimpl time: 1 use: type. qsimpl time: 1 use: type. qsimpl time: 1 use: type. qsimpl time: 1 use: type. qsimpl time: 1 use: type. qsimpl time: 1 use: type. qsimpl time: 1 use: type. qsimpl time: 1 use: type. qsimpl time: 1 use: type. qsimpl time: 1 use: type. qsimpl time: 1 use: type. qsimpl time: 1 use: type. qsimpl time: 1 use: type. qsimpl time: 1 use: type. qsimpl time: 1 use: type. qsimpl time: 1 use: type. qsimpl time: 1 use: type. qsimpl time: 1 use: type. qsimpl time: 1 use: type. qsimpl time: 1 use: type. qsimpl time: 1 use: type. qsimpl time: 1 use: type. qsimpl time: 1 use: type. qsimpl time: 1 use: type. qsimpl time: 1 use: type. qsimpl time: 1 use: type. qsimpl time: 1 use: type. qsimpl time: 1 use: type. qsimpl time: 1 use: type. qsimpl time: 1 use: type. qsimpl time: 1 use: type. qsimpl time: 1 use: type. qsimpl time: 1 use: type. qsimpl time: 1 use: type. qsimpl time: 1 use: type. qsimpl time: 1 use: type. qsimpl time: 1 use: type. qsimpl time: 1 use: type. qsimpl time: 1 use: type. qsimpl time: 1 use: type. qsimpl time: 1 use: type. qsimpl time: 1 use: type. qsimpl time: 1 use: type. qsimpl time: 1 use: type. qsimpl time: 1 use: type. qsimpl time: 1 use: type. qsimpl time: 1 use: type. qsimpl time: 1 use: type. qsimpl time: 1 use: type. qsimpl time: 1 use: type. qsimpl time: 1 use: type. qsimpl time: 1 use: type. qsimpl time: 1 use: type. qsimpl time: 1 use: type.", "repairs": ["wrong_type", "not_inductive_goal", "cannot_unify", "not_inductive_goal", "cannot_unify", "cannot_unify", "not_inductive_goal", "cannot_unify", "cannot_unify", "not_inductive_goal", "cannot_unify", "cannot_unify", "not_inductive_goal", "cannot_unify", "cannot_unify", "not_inductive_goal", "cannot_unify", "cannot_unify", "not_inductive_goal", "cannot_unify", "cannot_unify", "not_inductive_goal", "cannot_unify", "cannot_unify", "not_inductive_goal", "cannot_unify", "cannot_unify", "not_inductive_goal", "cannot_unify", "cannot_unify", "not_inductive_goal", "cannot_unify", "cannot_unify", "not_inductive_goal", "cannot_unify", "cannot_unify", "not_inductive_goal", "cannot_unify", "cannot_unify", "not_inductive_goal", "cannot_unify", "cannot_unify", "not_inductive_goal", "cannot_unify", "cannot_unify", "not_inductive_goal", "cannot_unify", "cannot_unify", "not_inductive_goal", "cannot_unify", "cannot_unify", "not_inductive_goal", "cannot_unify", "cannot_unify", "not_inductive_goal", "cannot_unify", "cannot_unify", "not_inductive_goal", "cannot_unify", "cannot_unify", "not_inductive_goal", "cannot_unify", "cannot_unify", "not_inductive_goal", "cannot_unify", "cannot_unify", "not_inductive_goal", "cannot_unify", "cannot_unify", "not_inductive_goal", "cannot_unify", "cannot_unify", "not_inductive_goal", "cannot_unify", "cannot_unify", "not_inductive_goal", "cannot_unify", "cannot_unify", "not_inductive_goal", "cannot_unify", "cannot_unify", "not_inductive_goal", "cannot_unify", "cannot_unify", "not_inductive_goal", "cannot_unify", "cannot_unify", "not_inductive_goal", "cannot_unify", "cannot_unify", "not_inductive_goal", "cannot_unify", "cannot_unify", "not_inductive_goal", "cannot_unify", "cannot_unify", "not_inductive_goal", "cannot_unify", "cannot_unify", "not_inductive_goal", "cannot_unify", "cannot_unify", "not_inductive_goal", "cannot_unify", "cannot_unify", "not_inductive_goal", "cannot_unify", "cannot_unify", "not_inductive_goal", "cannot_unify", "cannot_unify", "not_inductive_goal", "cannot_unify"], "exceptions": [{"ctx": ["intros h cid st out st' m H1 H2.", "inversion H1; subst."], "tactic": "destruct (type st) eqn:E; try discriminate.", "exn": "In environment orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params rri : raft_refinement_interface h, cid : name st : electionsData * raft_data out : list raft_output st' : raft_data m : list (name * msg) H1 : handleTimeout h (snd st) = (out, st', m) H2 : votedFor st' = Some cid H0 : handleTimeout h (snd st) = (out, st', m) The term \"st\" has type \"(electionsData * raft_data)%type\" while it is expected to have type \"RaftState.raft_data term name entry logIndex serverType data clientId output\".", "type": "wrong_type", "handled": true}, {"ctx": ["intros h cid st out st' m H1 H2.", "inversion H1; subst.", "qsimpl time: 1 use: type.", "destruct (type st') eqn:E'; try discriminate.", "inversion H2; subst.", "constructor; intuition."], "tactic": "left; split; try reflexivity.", "exn": "Not an inductive goal with 2 constructors.", "type": "not_inductive_goal", "handled": true}, {"ctx": ["intros h cid st out st' m H1 H2.", "inversion H1; subst.", "qsimpl time: 1 use: type.", "destruct (type st') eqn:E'; try discriminate.", "inversion H2; subst.", "constructor; intuition.", "qsimpl time: 1 use: type."], "tactic": "constructor; intuition.", "exn": "In environment orig_base_params : BaseParams raft_params : RaftParams orig_base_params one_node_params : OneNodeParams orig_base_params h, cid : name st1 : raft_data out : list raft_output st' : raft_data m : list (name * msg) H1 : handleTimeout h st1 = (out, st', m) H2 : votedFor st' = Some cid refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (GhostSimulations.deghost net) E' : type st' = Follower H, H3 : serverType votes : list (term * name) votesWithLog : list (term * name * list entry) cronies : term -> list name leaderLogs : list (term * list entry) allEntries : list (term * entry) Unable to unify \"votedFor st'\" with \"votedFor st1\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros h cid st out st' m H1 H2.", "inversion H1; subst.", "qsimpl time: 1 use: type.", "destruct (type st') eqn:E'; try discriminate.", "inversion H2; subst.", "constructor; intuition.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type."], "tactic": "right; split; try reflexivity.", "exn": "Not an inductive goal with 2 constructors.", "type": "not_inductive_goal", "handled": true}, {"ctx": ["intros h cid st out st' m H1 H2.", "inversion H1; subst.", "qsimpl time: 1 use: type.", "destruct (type st') eqn:E'; try discriminate.", "inversion H2; subst.", "constructor; intuition.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type."], "tactic": "constructor; intuition.", "exn": "In environment orig_base_params : BaseParams raft_params : RaftParams orig_base_params one_node_params : OneNodeParams orig_base_params h, cid : name st1 : raft_data out : list raft_output st' : raft_data m : list (name * msg) H1 : handleTimeout h st1 = (out, st', m) H2 : votedFor st' = Some cid refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (GhostSimulations.deghost net) E' : type st' = Follower H, H3 : serverType votes : list (term * name) votesWithLog : list (term * name * list entry) cronies : term -> list name leaderLogs : list (term * list entry) allEntries : list (term * entry) H0, H4 : serverType Unable to unify \"votedFor st'\" with \"votedFor st1\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros h cid st out st' m H1 H2.", "inversion H1; subst.", "qsimpl time: 1 use: type.", "destruct (type st') eqn:E'; try discriminate.", "inversion H2; subst.", "constructor; intuition.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst."], "tactic": "constructor; intuition.", "exn": "In environment orig_base_params : BaseParams raft_params : RaftParams orig_base_params one_node_params : OneNodeParams orig_base_params h, cid : name st1 : raft_data out : list raft_output st' : raft_data m : list (name * msg) H1 : handleTimeout h st1 = (out, st', m) H2 : votedFor st' = Some cid refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (GhostSimulations.deghost net) E' : type st' = Follower H, H3 : serverType votes : list (term * name) votesWithLog : list (term * name * list entry) cronies : term -> list name leaderLogs : list (term * list entry) allEntries : list (term * entry) H0, H4, H5 : serverType H7 : votedFor st' = Some cid Unable to unify \"votedFor st'\" with \"votedFor st1\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros h cid st out st' m H1 H2.", "inversion H1; subst.", "qsimpl time: 1 use: type.", "destruct (type st') eqn:E'; try discriminate.", "inversion H2; subst.", "constructor; intuition.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type."], "tactic": "right; split; try reflexivity.", "exn": "Not an inductive goal with 2 constructors.", "type": "not_inductive_goal", "handled": true}, {"ctx": ["intros h cid st out st' m H1 H2.", "inversion H1; subst.", "qsimpl time: 1 use: type.", "destruct (type st') eqn:E'; try discriminate.", "inversion H2; subst.", "constructor; intuition.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type."], "tactic": "constructor; intuition.", "exn": "In environment orig_base_params : BaseParams raft_params : RaftParams orig_base_params one_node_params : OneNodeParams orig_base_params h, cid : name st1 : raft_data out : list raft_output st' : raft_data m : list (name * msg) H1 : handleTimeout h st1 = (out, st', m) H2 : votedFor st' = Some cid refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (GhostSimulations.deghost net) E' : type st' = Follower H, H3 : serverType votes : list (term * name) votesWithLog : list (term * name * list entry) cronies : term -> list name leaderLogs : list (term * list entry) allEntries : list (term * entry) H0, H4, H5, H6, H7 : serverType Unable to unify \"votedFor st'\" with \"votedFor st1\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros h cid st out st' m H1 H2.", "inversion H1; subst.", "qsimpl time: 1 use: type.", "destruct (type st') eqn:E'; try discriminate.", "inversion H2; subst.", "constructor; intuition.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst."], "tactic": "constructor; intuition.", "exn": "In environment orig_base_params : BaseParams raft_params : RaftParams orig_base_params one_node_params : OneNodeParams orig_base_params h, cid : name st1 : raft_data out : list raft_output st' : raft_data m : list (name * msg) H1 : handleTimeout h st1 = (out, st', m) H2 : votedFor st' = Some cid refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (GhostSimulations.deghost net) E' : type st' = Follower H, H3 : serverType votes : list (term * name) votesWithLog : list (term * name * list entry) cronies : term -> list name leaderLogs : list (term * list entry) allEntries : list (term * entry) H0, H4, H5, H6, H7, H8 : serverType H10 : votedFor st' = Some cid Unable to unify \"votedFor st'\" with \"votedFor st1\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros h cid st out st' m H1 H2.", "inversion H1; subst.", "qsimpl time: 1 use: type.", "destruct (type st') eqn:E'; try discriminate.", "inversion H2; subst.", "constructor; intuition.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type."], "tactic": "right; split; try reflexivity.", "exn": "Not an inductive goal with 2 constructors.", "type": "not_inductive_goal", "handled": true}, {"ctx": ["intros h cid st out st' m H1 H2.", "inversion H1; subst.", "qsimpl time: 1 use: type.", "destruct (type st') eqn:E'; try discriminate.", "inversion H2; subst.", "constructor; intuition.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type."], "tactic": "constructor; intuition.", "exn": "In environment orig_base_params : BaseParams raft_params : RaftParams orig_base_params one_node_params : OneNodeParams orig_base_params h, cid : name st1 : raft_data out : list raft_output st' : raft_data m : list (name * msg) H1 : handleTimeout h st1 = (out, st', m) H2 : votedFor st' = Some cid refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (GhostSimulations.deghost net) E' : type st' = Follower H, H3 : serverType votes : list (term * name) votesWithLog : list (term * name * list entry) cronies : term -> list name leaderLogs : list (term * list entry) allEntries : list (term * entry) H0, H4, H5, H6, H7, H8, H9, H10 : serverType Unable to unify \"votedFor st'\" with \"votedFor st1\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros h cid st out st' m H1 H2.", "inversion H1; subst.", "qsimpl time: 1 use: type.", "destruct (type st') eqn:E'; try discriminate.", "inversion H2; subst.", "constructor; intuition.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst."], "tactic": "constructor; intuition.", "exn": "In environment orig_base_params : BaseParams raft_params : RaftParams orig_base_params one_node_params : OneNodeParams orig_base_params h, cid : name st1 : raft_data out : list raft_output st' : raft_data m : list (name * msg) H1 : handleTimeout h st1 = (out, st', m) H2 : votedFor st' = Some cid refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (GhostSimulations.deghost net) E' : type st' = Follower H, H3 : serverType votes : list (term * name) votesWithLog : list (term * name * list entry) cronies : term -> list name leaderLogs : list (term * list entry) allEntries : list (term * entry) H0, H4, H5, H6, H7, H8, H9, H10, H11 : serverType H13 : votedFor st' = Some cid Unable to unify \"votedFor st'\" with \"votedFor st1\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros h cid st out st' m H1 H2.", "inversion H1; subst.", "qsimpl time: 1 use: type.", "destruct (type st') eqn:E'; try discriminate.", "inversion H2; subst.", "constructor; intuition.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type."], "tactic": "right; split; try reflexivity.", "exn": "Not an inductive goal with 2 constructors.", "type": "not_inductive_goal", "handled": true}, {"ctx": ["intros h cid st out st' m H1 H2.", "inversion H1; subst.", "qsimpl time: 1 use: type.", "destruct (type st') eqn:E'; try discriminate.", "inversion H2; subst.", "constructor; intuition.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type."], "tactic": "constructor; intuition.", "exn": "In environment orig_base_params : BaseParams raft_params : RaftParams orig_base_params one_node_params : OneNodeParams orig_base_params h, cid : name st1 : raft_data out : list raft_output st' : raft_data m : list (name * msg) H1 : handleTimeout h st1 = (out, st', m) H2 : votedFor st' = Some cid refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (GhostSimulations.deghost net) E' : type st' = Follower H, H3 : serverType votes : list (term * name) votesWithLog : list (term * name * list entry) cronies : term -> list name leaderLogs : list (term * list entry) allEntries : list (term * entry) H0, H4, H5, H6, H7, H8, H9, H10, H11, H12, H13 : serverType Unable to unify \"votedFor st'\" with \"votedFor st1\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros h cid st out st' m H1 H2.", "inversion H1; subst.", "qsimpl time: 1 use: type.", "destruct (type st') eqn:E'; try discriminate.", "inversion H2; subst.", "constructor; intuition.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst."], "tactic": "constructor; intuition.", "exn": "In environment orig_base_params : BaseParams raft_params : RaftParams orig_base_params one_node_params : OneNodeParams orig_base_params h, cid : name st1 : raft_data out : list raft_output st' : raft_data m : list (name * msg) H1 : handleTimeout h st1 = (out, st', m) H2 : votedFor st' = Some cid refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (GhostSimulations.deghost net) E' : type st' = Follower H, H3 : serverType votes : list (term * name) votesWithLog : list (term * name * list entry) cronies : term -> list name leaderLogs : list (term * list entry) allEntries : list (term * entry) H0, H4, H5, H6, H7, H8, H9, H10, H11, H12, H13, H14 : serverType H16 : votedFor st' = Some cid Unable to unify \"votedFor st'\" with \"votedFor st1\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros h cid st out st' m H1 H2.", "inversion H1; subst.", "qsimpl time: 1 use: type.", "destruct (type st') eqn:E'; try discriminate.", "inversion H2; subst.", "constructor; intuition.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type."], "tactic": "right; split; try reflexivity.", "exn": "Not an inductive goal with 2 constructors.", "type": "not_inductive_goal", "handled": true}, {"ctx": ["intros h cid st out st' m H1 H2.", "inversion H1; subst.", "qsimpl time: 1 use: type.", "destruct (type st') eqn:E'; try discriminate.", "inversion H2; subst.", "constructor; intuition.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type."], "tactic": "constructor; intuition.", "exn": "In environment orig_base_params : BaseParams raft_params : RaftParams orig_base_params one_node_params : OneNodeParams orig_base_params h, cid : name st1 : raft_data out : list raft_output st' : raft_data m : list (name * msg) H1 : handleTimeout h st1 = (out, st', m) H2 : votedFor st' = Some cid refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (GhostSimulations.deghost net) E' : type st' = Follower H, H3 : serverType votes : list (term * name) votesWithLog : list (term * name * list entry) cronies : term -> list name leaderLogs : list (term * list entry) allEntries : list (term * entry) H0, H4, H5, H6, H7, H8, H9, H10, H11, H12, H13, H14, H15, H16 : serverType Unable to unify \"votedFor st'\" with \"votedFor st1\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros h cid st out st' m H1 H2.", "inversion H1; subst.", "qsimpl time: 1 use: type.", "destruct (type st') eqn:E'; try discriminate.", "inversion H2; subst.", "constructor; intuition.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst."], "tactic": "constructor; intuition.", "exn": "In environment orig_base_params : BaseParams raft_params : RaftParams orig_base_params one_node_params : OneNodeParams orig_base_params h, cid : name st1 : raft_data out : list raft_output st' : raft_data m : list (name * msg) H1 : handleTimeout h st1 = (out, st', m) H2 : votedFor st' = Some cid refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (GhostSimulations.deghost net) E' : type st' = Follower H, H3 : serverType votes : list (term * name) votesWithLog : list (term * name * list entry) cronies : term -> list name leaderLogs : list (term * list entry) allEntries : list (term * entry) H0, H4, H5, H6, H7, H8, H9, H10, H11, H12, H13, H14, H15, H16, H17 : serverType H19 : votedFor st' = Some cid Unable to unify \"votedFor st'\" with \"votedFor st1\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros h cid st out st' m H1 H2.", "inversion H1; subst.", "qsimpl time: 1 use: type.", "destruct (type st') eqn:E'; try discriminate.", "inversion H2; subst.", "constructor; intuition.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type."], "tactic": "right; split; try reflexivity.", "exn": "Not an inductive goal with 2 constructors.", "type": "not_inductive_goal", "handled": true}, {"ctx": ["intros h cid st out st' m H1 H2.", "inversion H1; subst.", "qsimpl time: 1 use: type.", "destruct (type st') eqn:E'; try discriminate.", "inversion H2; subst.", "constructor; intuition.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type."], "tactic": "constructor; intuition.", "exn": "In environment orig_base_params : BaseParams raft_params : RaftParams orig_base_params one_node_params : OneNodeParams orig_base_params h, cid : name st1 : raft_data out : list raft_output st' : raft_data m : list (name * msg) H1 : handleTimeout h st1 = (out, st', m) H2 : votedFor st' = Some cid refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (GhostSimulations.deghost net) E' : type st' = Follower H, H3 : serverType votes : list (term * name) votesWithLog : list (term * name * list entry) cronies : term -> list name leaderLogs : list (term * list entry) allEntries : list (term * entry) H0, H4, H5, H6, H7, H8, H9, H10, H11, H12, H13, H14, H15, H16, H17, H18, H19 : serverType Unable to unify \"votedFor st'\" with \"votedFor st1\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros h cid st out st' m H1 H2.", "inversion H1; subst.", "qsimpl time: 1 use: type.", "destruct (type st') eqn:E'; try discriminate.", "inversion H2; subst.", "constructor; intuition.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst."], "tactic": "constructor; intuition.", "exn": "In environment orig_base_params : BaseParams raft_params : RaftParams orig_base_params one_node_params : OneNodeParams orig_base_params h, cid : name st1 : raft_data out : list raft_output st' : raft_data m : list (name * msg) H1 : handleTimeout h st1 = (out, st', m) H2 : votedFor st' = Some cid refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (GhostSimulations.deghost net) E' : type st' = Follower H, H3 : serverType votes : list (term * name) votesWithLog : list (term * name * list entry) cronies : term -> list name leaderLogs : list (term * list entry) allEntries : list (term * entry) H0, H4, H5, H6, H7, H8, H9, H10, H11, H12, H13, H14, H15, H16, H17, H18, H19, H20 : serverType H22 : votedFor st' = Some cid Unable to unify \"votedFor st'\" with \"votedFor st1\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros h cid st out st' m H1 H2.", "inversion H1; subst.", "qsimpl time: 1 use: type.", "destruct (type st') eqn:E'; try discriminate.", "inversion H2; subst.", "constructor; intuition.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type."], "tactic": "right; split; try reflexivity.", "exn": "Not an inductive goal with 2 constructors.", "type": "not_inductive_goal", "handled": true}, {"ctx": ["intros h cid st out st' m H1 H2.", "inversion H1; subst.", "qsimpl time: 1 use: type.", "destruct (type st') eqn:E'; try discriminate.", "inversion H2; subst.", "constructor; intuition.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type."], "tactic": "constructor; intuition.", "exn": "In environment orig_base_params : BaseParams raft_params : RaftParams orig_base_params one_node_params : OneNodeParams orig_base_params h, cid : name st1 : raft_data out : list raft_output st' : raft_data m : list (name * msg) H1 : handleTimeout h st1 = (out, st', m) H2 : votedFor st' = Some cid refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (GhostSimulations.deghost net) E' : type st' = Follower H, H3 : serverType votes : list (term * name) votesWithLog : list (term * name * list entry) cronies : term -> list name leaderLogs : list (term * list entry) allEntries : list (term * entry) H0, H4, H5, H6, H7, H8, H9, H10, H11, H12, H13, H14, H15, H16, H17, H18, H19, H20, H21, H22 : serverType Unable to unify \"votedFor st'\" with \"votedFor st1\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros h cid st out st' m H1 H2.", "inversion H1; subst.", "qsimpl time: 1 use: type.", "destruct (type st') eqn:E'; try discriminate.", "inversion H2; subst.", "constructor; intuition.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst."], "tactic": "constructor; intuition.", "exn": "In environment orig_base_params : BaseParams raft_params : RaftParams orig_base_params one_node_params : OneNodeParams orig_base_params h, cid : name st1 : raft_data out : list raft_output st' : raft_data m : list (name * msg) H1 : handleTimeout h st1 = (out, st', m) H2 : votedFor st' = Some cid refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (GhostSimulations.deghost net) E' : type st' = Follower H, H3 : serverType votes : list (term * name) votesWithLog : list (term * name * list entry) cronies : term -> list name leaderLogs : list (term * list entry) allEntries : list (term * entry) H0, H4, H5, H6, H7, H8, H9, H10, H11, H12, H13, H14, H15, H16, H17, H18, H19, H20, H21, H22, H23 : serverType H25 : votedFor st' = Some cid Unable to unify \"votedFor st'\" with \"votedFor st1\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros h cid st out st' m H1 H2.", "inversion H1; subst.", "qsimpl time: 1 use: type.", "destruct (type st') eqn:E'; try discriminate.", "inversion H2; subst.", "constructor; intuition.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type."], "tactic": "right; split; try reflexivity.", "exn": "Not an inductive goal with 2 constructors.", "type": "not_inductive_goal", "handled": true}, {"ctx": ["intros h cid st out st' m H1 H2.", "inversion H1; subst.", "qsimpl time: 1 use: type.", "destruct (type st') eqn:E'; try discriminate.", "inversion H2; subst.", "constructor; intuition.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type."], "tactic": "constructor; intuition.", "exn": "In environment orig_base_params : BaseParams raft_params : RaftParams orig_base_params one_node_params : OneNodeParams orig_base_params h, cid : name st1 : raft_data out : list raft_output st' : raft_data m : list (name * msg) H1 : handleTimeout h st1 = (out, st', m) H2 : votedFor st' = Some cid refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (GhostSimulations.deghost net) E' : type st' = Follower H, H3 : serverType votes : list (term * name) votesWithLog : list (term * name * list entry) cronies : term -> list name leaderLogs : list (term * list entry) allEntries : list (term * entry) H0, H4, H5, H6, H7, H8, H9, H10, H11, H12, H13, H14, H15, H16, H17, H18, H19, H20, H21, H22, H23, H24, H25 : serverType Unable to unify \"votedFor st'\" with \"votedFor st1\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros h cid st out st' m H1 H2.", "inversion H1; subst.", "qsimpl time: 1 use: type.", "destruct (type st') eqn:E'; try discriminate.", "inversion H2; subst.", "constructor; intuition.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst."], "tactic": "constructor; intuition.", "exn": "In environment orig_base_params : BaseParams raft_params : RaftParams orig_base_params one_node_params : OneNodeParams orig_base_params h, cid : name st1 : raft_data out : list raft_output st' : raft_data m : list (name * msg) H1 : handleTimeout h st1 = (out, st', m) H2 : votedFor st' = Some cid refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (GhostSimulations.deghost net) E' : type st' = Follower H, H3 : serverType votes : list (term * name) votesWithLog : list (term * name * list entry) cronies : term -> list name leaderLogs : list (term * list entry) allEntries : list (term * entry) H0, H4, H5, H6, H7, H8, H9, H10, H11, H12, H13, H14, H15, H16, H17, H18, H19, H20, H21, H22, H23, H24, H25, H26 : serverType H28 : votedFor st' = Some cid Unable to unify \"votedFor st'\" with \"votedFor st1\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros h cid st out st' m H1 H2.", "inversion H1; subst.", "qsimpl time: 1 use: type.", "destruct (type st') eqn:E'; try discriminate.", "inversion H2; subst.", "constructor; intuition.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type."], "tactic": "right; split; try reflexivity.", "exn": "Not an inductive goal with 2 constructors.", "type": "not_inductive_goal", "handled": true}, {"ctx": ["intros h cid st out st' m H1 H2.", "inversion H1; subst.", "qsimpl time: 1 use: type.", "destruct (type st') eqn:E'; try discriminate.", "inversion H2; subst.", "constructor; intuition.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type."], "tactic": "constructor; intuition.", "exn": "In environment orig_base_params : BaseParams raft_params : RaftParams orig_base_params one_node_params : OneNodeParams orig_base_params h, cid : name st1 : raft_data out : list raft_output st' : raft_data m : list (name * msg) H1 : handleTimeout h st1 = (out, st', m) H2 : votedFor st' = Some cid refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (GhostSimulations.deghost net) E' : type st' = Follower H, H3 : serverType votes : list (term * name) votesWithLog : list (term * name * list entry) cronies : term -> list name leaderLogs : list (term * list entry) allEntries : list (term * entry) H0, H4, H5, H6, H7, H8, H9, H10, H11, H12, H13, H14, H15, H16, H17, H18, H19, H20, H21, H22, H23, H24, H25, H26, H27, H28 : serverType Unable to unify \"votedFor st'\" with \"votedFor st1\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros h cid st out st' m H1 H2.", "inversion H1; subst.", "qsimpl time: 1 use: type.", "destruct (type st') eqn:E'; try discriminate.", "inversion H2; subst.", "constructor; intuition.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst."], "tactic": "constructor; intuition.", "exn": "In environment orig_base_params : BaseParams raft_params : RaftParams orig_base_params one_node_params : OneNodeParams orig_base_params h, cid : name st1 : raft_data out : list raft_output st' : raft_data m : list (name * msg) H1 : handleTimeout h st1 = (out, st', m) H2 : votedFor st' = Some cid refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (GhostSimulations.deghost net) E' : type st' = Follower H, H3 : serverType votes : list (term * name) votesWithLog : list (term * name * list entry) cronies : term -> list name leaderLogs : list (term * list entry) allEntries : list (term * entry) H0, H4, H5, H6, H7, H8, H9, H10, H11, H12, H13, H14, H15, H16, H17, H18, H19, H20, H21, H22, H23, H24, H25, H26, H27, H28, H29 : serverType H31 : votedFor st' = Some cid Unable to unify \"votedFor st'\" with \"votedFor st1\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros h cid st out st' m H1 H2.", "inversion H1; subst.", "qsimpl time: 1 use: type.", "destruct (type st') eqn:E'; try discriminate.", "inversion H2; subst.", "constructor; intuition.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type."], "tactic": "right; split; try reflexivity.", "exn": "Not an inductive goal with 2 constructors.", "type": "not_inductive_goal", "handled": true}, {"ctx": ["intros h cid st out st' m H1 H2.", "inversion H1; subst.", "qsimpl time: 1 use: type.", "destruct (type st') eqn:E'; try discriminate.", "inversion H2; subst.", "constructor; intuition.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type."], "tactic": "constructor; intuition.", "exn": "In environment orig_base_params : BaseParams raft_params : RaftParams orig_base_params one_node_params : OneNodeParams orig_base_params h, cid : name st1 : raft_data out : list raft_output st' : raft_data m : list (name * msg) H1 : handleTimeout h st1 = (out, st', m) H2 : votedFor st' = Some cid refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (GhostSimulations.deghost net) E' : type st' = Follower H, H3 : serverType votes : list (term * name) votesWithLog : list (term * name * list entry) cronies : term -> list name leaderLogs : list (term * list entry) allEntries : list (term * entry) H0, H4, H5, H6, H7, H8, H9, H10, H11, H12, H13, H14, H15, H16, H17, H18, H19, H20, H21, H22, H23, H24, H25, H26, H27, H28, H29, H30, H31 : serverType Unable to unify \"votedFor st'\" with \"votedFor st1\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros h cid st out st' m H1 H2.", "inversion H1; subst.", "qsimpl time: 1 use: type.", "destruct (type st') eqn:E'; try discriminate.", "inversion H2; subst.", "constructor; intuition.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst."], "tactic": "constructor; intuition.", "exn": "In environment orig_base_params : BaseParams raft_params : RaftParams orig_base_params one_node_params : OneNodeParams orig_base_params h, cid : name st1 : raft_data out : list raft_output st' : raft_data m : list (name * msg) H1 : handleTimeout h st1 = (out, st', m) H2 : votedFor st' = Some cid refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (GhostSimulations.deghost net) E' : type st' = Follower H, H3 : serverType votes : list (term * name) votesWithLog : list (term * name * list entry) cronies : term -> list name leaderLogs : list (term * list entry) allEntries : list (term * entry) H0, H4, H5, H6, H7, H8, H9, H10, H11, H12, H13, H14, H15, H16, H17, H18, H19, H20, H21, H22, H23, H24, H25, H26, H27, H28, H29, H30, H31, H32 : serverType H34 : votedFor st' = Some cid Unable to unify \"votedFor st'\" with \"votedFor st1\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros h cid st out st' m H1 H2.", "inversion H1; subst.", "qsimpl time: 1 use: type.", "destruct (type st') eqn:E'; try discriminate.", "inversion H2; subst.", "constructor; intuition.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type."], "tactic": "right; split; try reflexivity.", "exn": "Not an inductive goal with 2 constructors.", "type": "not_inductive_goal", "handled": true}, {"ctx": ["intros h cid st out st' m H1 H2.", "inversion H1; subst.", "qsimpl time: 1 use: type.", "destruct (type st') eqn:E'; try discriminate.", "inversion H2; subst.", "constructor; intuition.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type."], "tactic": "constructor; intuition.", "exn": "In environment orig_base_params : BaseParams raft_params : RaftParams orig_base_params one_node_params : OneNodeParams orig_base_params h, cid : name st1 : raft_data out : list raft_output st' : raft_data m : list (name * msg) H1 : handleTimeout h st1 = (out, st', m) H2 : votedFor st' = Some cid refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (GhostSimulations.deghost net) E' : type st' = Follower H, H3 : serverType votes : list (term * name) votesWithLog : list (term * name * list entry) cronies : term -> list name leaderLogs : list (term * list entry) allEntries : list (term * entry) H0, H4, H5, H6, H7, H8, H9, H10, H11, H12, H13, H14, H15, H16, H17, H18, H19, H20, H21, H22, H23, H24, H25, H26, H27, H28, H29, H30, H31, H32, H33, H34 : serverType Unable to unify \"votedFor st'\" with \"votedFor st1\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros h cid st out st' m H1 H2.", "inversion H1; subst.", "qsimpl time: 1 use: type.", "destruct (type st') eqn:E'; try discriminate.", "inversion H2; subst.", "constructor; intuition.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst."], "tactic": "constructor; intuition.", "exn": "In environment orig_base_params : BaseParams raft_params : RaftParams orig_base_params one_node_params : OneNodeParams orig_base_params h, cid : name st1 : raft_data out : list raft_output st' : raft_data m : list (name * msg) H1 : handleTimeout h st1 = (out, st', m) H2 : votedFor st' = Some cid refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (GhostSimulations.deghost net) E' : type st' = Follower H, H3 : serverType votes : list (term * name) votesWithLog : list (term * name * list entry) cronies : term -> list name leaderLogs : list (term * list entry) allEntries : list (term * entry) H0, H4, H5, H6, H7, H8, H9, H10, H11, H12, H13, H14, H15, H16, H17, H18, H19, H20, H21, H22, H23, H24, H25, H26, H27, H28, H29, H30, H31, H32, H33, H34, H35 : serverType H37 : votedFor st' = Some cid Unable to unify \"votedFor st'\" with \"votedFor st1\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros h cid st out st' m H1 H2.", "inversion H1; subst.", "qsimpl time: 1 use: type.", "destruct (type st') eqn:E'; try discriminate.", "inversion H2; subst.", "constructor; intuition.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type."], "tactic": "right; split; try reflexivity.", "exn": "Not an inductive goal with 2 constructors.", "type": "not_inductive_goal", "handled": true}, {"ctx": ["intros h cid st out st' m H1 H2.", "inversion H1; subst.", "qsimpl time: 1 use: type.", "destruct (type st') eqn:E'; try discriminate.", "inversion H2; subst.", "constructor; intuition.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type."], "tactic": "constructor; intuition.", "exn": "In environment orig_base_params : BaseParams raft_params : RaftParams orig_base_params one_node_params : OneNodeParams orig_base_params h, cid : name st1 : raft_data out : list raft_output st' : raft_data m : list (name * msg) H1 : handleTimeout h st1 = (out, st', m) H2 : votedFor st' = Some cid refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (GhostSimulations.deghost net) E' : type st' = Follower H, H3 : serverType votes : list (term * name) votesWithLog : list (term * name * list entry) cronies : term -> list name leaderLogs : list (term * list entry) allEntries : list (term * entry) H0, H4, H5, H6, H7, H8, H9, H10, H11, H12, H13, H14, H15, H16, H17, H18, H19, H20, H21, H22, H23, H24, H25, H26, H27, H28, H29, H30, H31, H32, H33, H34, H35, H36, H37 : serverType Unable to unify \"votedFor st'\" with \"votedFor st1\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros h cid st out st' m H1 H2.", "inversion H1; subst.", "qsimpl time: 1 use: type.", "destruct (type st') eqn:E'; try discriminate.", "inversion H2; subst.", "constructor; intuition.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst."], "tactic": "constructor; intuition.", "exn": "In environment orig_base_params : BaseParams raft_params : RaftParams orig_base_params one_node_params : OneNodeParams orig_base_params h, cid : name st1 : raft_data out : list raft_output st' : raft_data m : list (name * msg) H1 : handleTimeout h st1 = (out, st', m) H2 : votedFor st' = Some cid refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (GhostSimulations.deghost net) E' : type st' = Follower H, H3 : serverType votes : list (term * name) votesWithLog : list (term * name * list entry) cronies : term -> list name leaderLogs : list (term * list entry) allEntries : list (term * entry) H0, H4, H5, H6, H7, H8, H9, H10, H11, H12, H13, H14, H15, H16, H17, H18, H19, H20, H21, H22, H23, H24, H25, H26, H27, H28, H29, H30, H31, H32, H33, H34, H35, H36, H37, H38 : serverType H40 : votedFor st' = Some cid Unable to unify \"votedFor st'\" with \"votedFor st1\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros h cid st out st' m H1 H2.", "inversion H1; subst.", "qsimpl time: 1 use: type.", "destruct (type st') eqn:E'; try discriminate.", "inversion H2; subst.", "constructor; intuition.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type."], "tactic": "right; split; try reflexivity.", "exn": "Not an inductive goal with 2 constructors.", "type": "not_inductive_goal", "handled": true}, {"ctx": ["intros h cid st out st' m H1 H2.", "inversion H1; subst.", "qsimpl time: 1 use: type.", "destruct (type st') eqn:E'; try discriminate.", "inversion H2; subst.", "constructor; intuition.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type."], "tactic": "constructor; intuition.", "exn": "In environment orig_base_params : BaseParams raft_params : RaftParams orig_base_params one_node_params : OneNodeParams orig_base_params h, cid : name st1 : raft_data out : list raft_output st' : raft_data m : list (name * msg) H1 : handleTimeout h st1 = (out, st', m) H2 : votedFor st' = Some cid refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (GhostSimulations.deghost net) E' : type st' = Follower H, H3 : serverType votes : list (term * name) votesWithLog : list (term * name * list entry) cronies : term -> list name leaderLogs : list (term * list entry) allEntries : list (term * entry) H0, H4, H5, H6, H7, H8, H9, H10, H11, H12, H13, H14, H15, H16, H17, H18, H19, H20, H21, H22, H23, H24, H25, H26, H27, H28, H29, H30, H31, H32, H33, H34, H35, H36, H37, H38, H39, H40 : serverType Unable to unify \"votedFor st'\" with \"votedFor st1\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros h cid st out st' m H1 H2.", "inversion H1; subst.", "qsimpl time: 1 use: type.", "destruct (type st') eqn:E'; try discriminate.", "inversion H2; subst.", "constructor; intuition.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst."], "tactic": "constructor; intuition.", "exn": "In environment orig_base_params : BaseParams raft_params : RaftParams orig_base_params one_node_params : OneNodeParams orig_base_params h, cid : name st1 : raft_data out : list raft_output st' : raft_data m : list (name * msg) H1 : handleTimeout h st1 = (out, st', m) H2 : votedFor st' = Some cid refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (GhostSimulations.deghost net) E' : type st' = Follower H, H3 : serverType votes : list (term * name) votesWithLog : list (term * name * list entry) cronies : term -> list name leaderLogs : list (term * list entry) allEntries : list (term * entry) H0, H4, H5, H6, H7, H8, H9, H10, H11, H12, H13, H14, H15, H16, H17, H18, H19, H20, H21, H22, H23, H24, H25, H26, H27, H28, H29, H30, H31, H32, H33, H34, H35, H36, H37, H38, H39, H40, H41 : serverType H43 : votedFor st' = Some cid Unable to unify \"votedFor st'\" with \"votedFor st1\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros h cid st out st' m H1 H2.", "inversion H1; subst.", "qsimpl time: 1 use: type.", "destruct (type st') eqn:E'; try discriminate.", "inversion H2; subst.", "constructor; intuition.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type."], "tactic": "right; split; try reflexivity.", "exn": "Not an inductive goal with 2 constructors.", "type": "not_inductive_goal", "handled": true}, {"ctx": ["intros h cid st out st' m H1 H2.", "inversion H1; subst.", "qsimpl time: 1 use: type.", "destruct (type st') eqn:E'; try discriminate.", "inversion H2; subst.", "constructor; intuition.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type."], "tactic": "constructor; intuition.", "exn": "In environment orig_base_params : BaseParams raft_params : RaftParams orig_base_params one_node_params : OneNodeParams orig_base_params h, cid : name st1 : raft_data out : list raft_output st' : raft_data m : list (name * msg) H1 : handleTimeout h st1 = (out, st', m) H2 : votedFor st' = Some cid refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (GhostSimulations.deghost net) E' : type st' = Follower H, H3 : serverType votes : list (term * name) votesWithLog : list (term * name * list entry) cronies : term -> list name leaderLogs : list (term * list entry) allEntries : list (term * entry) H0, H4, H5, H6, H7, H8, H9, H10, H11, H12, H13, H14, H15, H16, H17, H18, H19, H20, H21, H22, H23, H24, H25, H26, H27, H28, H29, H30, H31, H32, H33, H34, H35, H36, H37, H38, H39, H40, H41, H42, H43 : serverType Unable to unify \"votedFor st'\" with \"votedFor st1\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros h cid st out st' m H1 H2.", "inversion H1; subst.", "qsimpl time: 1 use: type.", "destruct (type st') eqn:E'; try discriminate.", "inversion H2; subst.", "constructor; intuition.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst."], "tactic": "constructor; intuition.", "exn": "In environment orig_base_params : BaseParams raft_params : RaftParams orig_base_params one_node_params : OneNodeParams orig_base_params h, cid : name st1 : raft_data out : list raft_output st' : raft_data m : list (name * msg) H1 : handleTimeout h st1 = (out, st', m) H2 : votedFor st' = Some cid refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (GhostSimulations.deghost net) E' : type st' = Follower H, H3 : serverType votes : list (term * name) votesWithLog : list (term * name * list entry) cronies : term -> list name leaderLogs : list (term * list entry) allEntries : list (term * entry) H0, H4, H5, H6, H7, H8, H9, H10, H11, H12, H13, H14, H15, H16, H17, H18, H19, H20, H21, H22, H23, H24, H25, H26, H27, H28, H29, H30, H31, H32, H33, H34, H35, H36, H37, H38, H39, H40, H41, H42, H43, H44 : serverType H46 : votedFor st' = Some cid Unable to unify \"votedFor st'\" with \"votedFor st1\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros h cid st out st' m H1 H2.", "inversion H1; subst.", "qsimpl time: 1 use: type.", "destruct (type st') eqn:E'; try discriminate.", "inversion H2; subst.", "constructor; intuition.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type."], "tactic": "right; split; try reflexivity.", "exn": "Not an inductive goal with 2 constructors.", "type": "not_inductive_goal", "handled": true}, {"ctx": ["intros h cid st out st' m H1 H2.", "inversion H1; subst.", "qsimpl time: 1 use: type.", "destruct (type st') eqn:E'; try discriminate.", "inversion H2; subst.", "constructor; intuition.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type."], "tactic": "constructor; intuition.", "exn": "In environment orig_base_params : BaseParams raft_params : RaftParams orig_base_params one_node_params : OneNodeParams orig_base_params h, cid : name st1 : raft_data out : list raft_output st' : raft_data m : list (name * msg) H1 : handleTimeout h st1 = (out, st', m) H2 : votedFor st' = Some cid refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (GhostSimulations.deghost net) E' : type st' = Follower H, H3 : serverType votes : list (term * name) votesWithLog : list (term * name * list entry) cronies : term -> list name leaderLogs : list (term * list entry) allEntries : list (term * entry) H0, H4, H5, H6, H7, H8, H9, H10, H11, H12, H13, H14, H15, H16, H17, H18, H19, H20, H21, H22, H23, H24, H25, H26, H27, H28, H29, H30, H31, H32, H33, H34, H35, H36, H37, H38, H39, H40, H41, H42, H43, H44, H45, H46 : serverType Unable to unify \"votedFor st'\" with \"votedFor st1\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros h cid st out st' m H1 H2.", "inversion H1; subst.", "qsimpl time: 1 use: type.", "destruct (type st') eqn:E'; try discriminate.", "inversion H2; subst.", "constructor; intuition.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst."], "tactic": "constructor; intuition.", "exn": "In environment orig_base_params : BaseParams raft_params : RaftParams orig_base_params one_node_params : OneNodeParams orig_base_params h, cid : name st1 : raft_data out : list raft_output st' : raft_data m : list (name * msg) H1 : handleTimeout h st1 = (out, st', m) H2 : votedFor st' = Some cid refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (GhostSimulations.deghost net) E' : type st' = Follower H, H3 : serverType votes : list (term * name) votesWithLog : list (term * name * list entry) cronies : term -> list name leaderLogs : list (term * list entry) allEntries : list (term * entry) H0, H4, H5, H6, H7, H8, H9, H10, H11, H12, H13, H14, H15, H16, H17, H18, H19, H20, H21, H22, H23, H24, H25, H26, H27, H28, H29, H30, H31, H32, H33, H34, H35, H36, H37, H38, H39, H40, H41, H42, H43, H44, H45, H46, H47 : serverType H49 : votedFor st' = Some cid Unable to unify \"votedFor st'\" with \"votedFor st1\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros h cid st out st' m H1 H2.", "inversion H1; subst.", "qsimpl time: 1 use: type.", "destruct (type st') eqn:E'; try discriminate.", "inversion H2; subst.", "constructor; intuition.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type."], "tactic": "right; split; try reflexivity.", "exn": "Not an inductive goal with 2 constructors.", "type": "not_inductive_goal", "handled": true}, {"ctx": ["intros h cid st out st' m H1 H2.", "inversion H1; subst.", "qsimpl time: 1 use: type.", "destruct (type st') eqn:E'; try discriminate.", "inversion H2; subst.", "constructor; intuition.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type."], "tactic": "constructor; intuition.", "exn": "In environment orig_base_params : BaseParams raft_params : RaftParams orig_base_params one_node_params : OneNodeParams orig_base_params h, cid : name st1 : raft_data out : list raft_output st' : raft_data m : list (name * msg) H1 : handleTimeout h st1 = (out, st', m) H2 : votedFor st' = Some cid refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (GhostSimulations.deghost net) E' : type st' = Follower H, H3 : serverType votes : list (term * name) votesWithLog : list (term * name * list entry) cronies : term -> list name leaderLogs : list (term * list entry) allEntries : list (term * entry) H0, H4, H5, H6, H7, H8, H9, H10, H11, H12, H13, H14, H15, H16, H17, H18, H19, H20, H21, H22, H23, H24, H25, H26, H27, H28, H29, H30, H31, H32, H33, H34, H35, H36, H37, H38, H39, H40, H41, H42, H43, H44, H45, H46, H47, H48, H49 : serverType Unable to unify \"votedFor st'\" with \"votedFor st1\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros h cid st out st' m H1 H2.", "inversion H1; subst.", "qsimpl time: 1 use: type.", "destruct (type st') eqn:E'; try discriminate.", "inversion H2; subst.", "constructor; intuition.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst."], "tactic": "constructor; intuition.", "exn": "In environment orig_base_params : BaseParams raft_params : RaftParams orig_base_params one_node_params : OneNodeParams orig_base_params h, cid : name st1 : raft_data out : list raft_output st' : raft_data m : list (name * msg) H1 : handleTimeout h st1 = (out, st', m) H2 : votedFor st' = Some cid refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (GhostSimulations.deghost net) E' : type st' = Follower H, H3 : serverType votes : list (term * name) votesWithLog : list (term * name * list entry) cronies : term -> list name leaderLogs : list (term * list entry) allEntries : list (term * entry) H0, H4, H5, H6, H7, H8, H9, H10, H11, H12, H13, H14, H15, H16, H17, H18, H19, H20, H21, H22, H23, H24, H25, H26, H27, H28, H29, H30, H31, H32, H33, H34, H35, H36, H37, H38, H39, H40, H41, H42, H43, H44, H45, H46, H47, H48, H49, H50 : serverType H52 : votedFor st' = Some cid Unable to unify \"votedFor st'\" with \"votedFor st1\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros h cid st out st' m H1 H2.", "inversion H1; subst.", "qsimpl time: 1 use: type.", "destruct (type st') eqn:E'; try discriminate.", "inversion H2; subst.", "constructor; intuition.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type."], "tactic": "right; split; try reflexivity.", "exn": "Not an inductive goal with 2 constructors.", "type": "not_inductive_goal", "handled": true}, {"ctx": ["intros h cid st out st' m H1 H2.", "inversion H1; subst.", "qsimpl time: 1 use: type.", "destruct (type st') eqn:E'; try discriminate.", "inversion H2; subst.", "constructor; intuition.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type."], "tactic": "constructor; intuition.", "exn": "In environment orig_base_params : BaseParams raft_params : RaftParams orig_base_params one_node_params : OneNodeParams orig_base_params h, cid : name st1 : raft_data out : list raft_output st' : raft_data m : list (name * msg) H1 : handleTimeout h st1 = (out, st', m) H2 : votedFor st' = Some cid refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (GhostSimulations.deghost net) E' : type st' = Follower H, H3 : serverType votes : list (term * name) votesWithLog : list (term * name * list entry) cronies : term -> list name leaderLogs : list (term * list entry) allEntries : list (term * entry) H0, H4, H5, H6, H7, H8, H9, H10, H11, H12, H13, H14, H15, H16, H17, H18, H19, H20, H21, H22, H23, H24, H25, H26, H27, H28, H29, H30, H31, H32, H33, H34, H35, H36, H37, H38, H39, H40, H41, H42, H43, H44, H45, H46, H47, H48, H49, H50, H51, H52 : serverType Unable to unify \"votedFor st'\" with \"votedFor st1\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros h cid st out st' m H1 H2.", "inversion H1; subst.", "qsimpl time: 1 use: type.", "destruct (type st') eqn:E'; try discriminate.", "inversion H2; subst.", "constructor; intuition.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst."], "tactic": "constructor; intuition.", "exn": "In environment orig_base_params : BaseParams raft_params : RaftParams orig_base_params one_node_params : OneNodeParams orig_base_params h, cid : name st1 : raft_data out : list raft_output st' : raft_data m : list (name * msg) H1 : handleTimeout h st1 = (out, st', m) H2 : votedFor st' = Some cid refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (GhostSimulations.deghost net) E' : type st' = Follower H, H3 : serverType votes : list (term * name) votesWithLog : list (term * name * list entry) cronies : term -> list name leaderLogs : list (term * list entry) allEntries : list (term * entry) H0, H4, H5, H6, H7, H8, H9, H10, H11, H12, H13, H14, H15, H16, H17, H18, H19, H20, H21, H22, H23, H24, H25, H26, H27, H28, H29, H30, H31, H32, H33, H34, H35, H36, H37, H38, H39, H40, H41, H42, H43, H44, H45, H46, H47, H48, H49, H50, H51, H52, H53 : serverType H55 : votedFor st' = Some cid Unable to unify \"votedFor st'\" with \"votedFor st1\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros h cid st out st' m H1 H2.", "inversion H1; subst.", "qsimpl time: 1 use: type.", "destruct (type st') eqn:E'; try discriminate.", "inversion H2; subst.", "constructor; intuition.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type."], "tactic": "right; split; try reflexivity.", "exn": "Not an inductive goal with 2 constructors.", "type": "not_inductive_goal", "handled": true}, {"ctx": ["intros h cid st out st' m H1 H2.", "inversion H1; subst.", "qsimpl time: 1 use: type.", "destruct (type st') eqn:E'; try discriminate.", "inversion H2; subst.", "constructor; intuition.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type."], "tactic": "constructor; intuition.", "exn": "In environment orig_base_params : BaseParams raft_params : RaftParams orig_base_params one_node_params : OneNodeParams orig_base_params h, cid : name st1 : raft_data out : list raft_output st' : raft_data m : list (name * msg) H1 : handleTimeout h st1 = (out, st', m) H2 : votedFor st' = Some cid refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (GhostSimulations.deghost net) E' : type st' = Follower H, H3 : serverType votes : list (term * name) votesWithLog : list (term * name * list entry) cronies : term -> list name leaderLogs : list (term * list entry) allEntries : list (term * entry) H0, H4, H5, H6, H7, H8, H9, H10, H11, H12, H13, H14, H15, H16, H17, H18, H19, H20, H21, H22, H23, H24, H25, H26, H27, H28, H29, H30, H31, H32, H33, H34, H35, H36, H37, H38, H39, H40, H41, H42, H43, H44, H45, H46, H47, H48, H49, H50, H51, H52, H53, H54, H55 : serverType Unable to unify \"votedFor st'\" with \"votedFor st1\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros h cid st out st' m H1 H2.", "inversion H1; subst.", "qsimpl time: 1 use: type.", "destruct (type st') eqn:E'; try discriminate.", "inversion H2; subst.", "constructor; intuition.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst."], "tactic": "constructor; intuition.", "exn": "In environment orig_base_params : BaseParams raft_params : RaftParams orig_base_params one_node_params : OneNodeParams orig_base_params h, cid : name st1 : raft_data out : list raft_output st' : raft_data m : list (name * msg) H1 : handleTimeout h st1 = (out, st', m) H2 : votedFor st' = Some cid refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (GhostSimulations.deghost net) E' : type st' = Follower H, H3 : serverType votes : list (term * name) votesWithLog : list (term * name * list entry) cronies : term -> list name leaderLogs : list (term * list entry) allEntries : list (term * entry) H0, H4, H5, H6, H7, H8, H9, H10, H11, H12, H13, H14, H15, H16, H17, H18, H19, H20, H21, H22, H23, H24, H25, H26, H27, H28, H29, H30, H31, H32, H33, H34, H35, H36, H37, H38, H39, H40, H41, H42, H43, H44, H45, H46, H47, H48, H49, H50, H51, H52, H53, H54, H55, H56 : serverType H58 : votedFor st' = Some cid Unable to unify \"votedFor st'\" with \"votedFor st1\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros h cid st out st' m H1 H2.", "inversion H1; subst.", "qsimpl time: 1 use: type.", "destruct (type st') eqn:E'; try discriminate.", "inversion H2; subst.", "constructor; intuition.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type."], "tactic": "right; split; try reflexivity.", "exn": "Not an inductive goal with 2 constructors.", "type": "not_inductive_goal", "handled": true}, {"ctx": ["intros h cid st out st' m H1 H2.", "inversion H1; subst.", "qsimpl time: 1 use: type.", "destruct (type st') eqn:E'; try discriminate.", "inversion H2; subst.", "constructor; intuition.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type."], "tactic": "constructor; intuition.", "exn": "In environment orig_base_params : BaseParams raft_params : RaftParams orig_base_params one_node_params : OneNodeParams orig_base_params h, cid : name st1 : raft_data out : list raft_output st' : raft_data m : list (name * msg) H1 : handleTimeout h st1 = (out, st', m) H2 : votedFor st' = Some cid refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (GhostSimulations.deghost net) E' : type st' = Follower H, H3 : serverType votes : list (term * name) votesWithLog : list (term * name * list entry) cronies : term -> list name leaderLogs : list (term * list entry) allEntries : list (term * entry) H0, H4, H5, H6, H7, H8, H9, H10, H11, H12, H13, H14, H15, H16, H17, H18, H19, H20, H21, H22, H23, H24, H25, H26, H27, H28, H29, H30, H31, H32, H33, H34, H35, H36, H37, H38, H39, H40, H41, H42, H43, H44, H45, H46, H47, H48, H49, H50, H51, H52, H53, H54, H55, H56, H57, H58 : serverType Unable to unify \"votedFor st'\" with \"votedFor st1\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros h cid st out st' m H1 H2.", "inversion H1; subst.", "qsimpl time: 1 use: type.", "destruct (type st') eqn:E'; try discriminate.", "inversion H2; subst.", "constructor; intuition.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst."], "tactic": "constructor; intuition.", "exn": "In environment orig_base_params : BaseParams raft_params : RaftParams orig_base_params one_node_params : OneNodeParams orig_base_params h, cid : name st1 : raft_data out : list raft_output st' : raft_data m : list (name * msg) H1 : handleTimeout h st1 = (out, st', m) H2 : votedFor st' = Some cid refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (GhostSimulations.deghost net) E' : type st' = Follower H, H3 : serverType votes : list (term * name) votesWithLog : list (term * name * list entry) cronies : term -> list name leaderLogs : list (term * list entry) allEntries : list (term * entry) H0, H4, H5, H6, H7, H8, H9, H10, H11, H12, H13, H14, H15, H16, H17, H18, H19, H20, H21, H22, H23, H24, H25, H26, H27, H28, H29, H30, H31, H32, H33, H34, H35, H36, H37, H38, H39, H40, H41, H42, H43, H44, H45, H46, H47, H48, H49, H50, H51, H52, H53, H54, H55, H56, H57, H58, H59 : serverType H61 : votedFor st' = Some cid Unable to unify \"votedFor st'\" with \"votedFor st1\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros h cid st out st' m H1 H2.", "inversion H1; subst.", "qsimpl time: 1 use: type.", "destruct (type st') eqn:E'; try discriminate.", "inversion H2; subst.", "constructor; intuition.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type."], "tactic": "right; split; try reflexivity.", "exn": "Not an inductive goal with 2 constructors.", "type": "not_inductive_goal", "handled": true}, {"ctx": ["intros h cid st out st' m H1 H2.", "inversion H1; subst.", "qsimpl time: 1 use: type.", "destruct (type st') eqn:E'; try discriminate.", "inversion H2; subst.", "constructor; intuition.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type."], "tactic": "constructor; intuition.", "exn": "In environment orig_base_params : BaseParams raft_params : RaftParams orig_base_params one_node_params : OneNodeParams orig_base_params h, cid : name st1 : raft_data out : list raft_output st' : raft_data m : list (name * msg) H1 : handleTimeout h st1 = (out, st', m) H2 : votedFor st' = Some cid refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (GhostSimulations.deghost net) E' : type st' = Follower H, H3 : serverType votes : list (term * name) votesWithLog : list (term * name * list entry) cronies : term -> list name leaderLogs : list (term * list entry) allEntries : list (term * entry) H0, H4, H5, H6, H7, H8, H9, H10, H11, H12, H13, H14, H15, H16, H17, H18, H19, H20, H21, H22, H23, H24, H25, H26, H27, H28, H29, H30, H31, H32, H33, H34, H35, H36, H37, H38, H39, H40, H41, H42, H43, H44, H45, H46, H47, H48, H49, H50, H51, H52, H53, H54, H55, H56, H57, H58, H59, H60, H61 : serverType Unable to unify \"votedFor st'\" with \"votedFor st1\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros h cid st out st' m H1 H2.", "inversion H1; subst.", "qsimpl time: 1 use: type.", "destruct (type st') eqn:E'; try discriminate.", "inversion H2; subst.", "constructor; intuition.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst."], "tactic": "constructor; intuition.", "exn": "In environment orig_base_params : BaseParams raft_params : RaftParams orig_base_params one_node_params : OneNodeParams orig_base_params h, cid : name st1 : raft_data out : list raft_output st' : raft_data m : list (name * msg) H1 : handleTimeout h st1 = (out, st', m) H2 : votedFor st' = Some cid refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (GhostSimulations.deghost net) E' : type st' = Follower H, H3 : serverType votes : list (term * name) votesWithLog : list (term * name * list entry) cronies : term -> list name leaderLogs : list (term * list entry) allEntries : list (term * entry) H0, H4, H5, H6, H7, H8, H9, H10, H11, H12, H13, H14, H15, H16, H17, H18, H19, H20, H21, H22, H23, H24, H25, H26, H27, H28, H29, H30, H31, H32, H33, H34, H35, H36, H37, H38, H39, H40, H41, H42, H43, H44, H45, H46, H47, H48, H49, H50, H51, H52, H53, H54, H55, H56, H57, H58, H59, H60, H61, H62 : serverType H64 : votedFor st' = Some cid Unable to unify \"votedFor st'\" with \"votedFor st1\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros h cid st out st' m H1 H2.", "inversion H1; subst.", "qsimpl time: 1 use: type.", "destruct (type st') eqn:E'; try discriminate.", "inversion H2; subst.", "constructor; intuition.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type."], "tactic": "right; split; try reflexivity.", "exn": "Not an inductive goal with 2 constructors.", "type": "not_inductive_goal", "handled": true}, {"ctx": ["intros h cid st out st' m H1 H2.", "inversion H1; subst.", "qsimpl time: 1 use: type.", "destruct (type st') eqn:E'; try discriminate.", "inversion H2; subst.", "constructor; intuition.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type."], "tactic": "constructor; intuition.", "exn": "In environment orig_base_params : BaseParams raft_params : RaftParams orig_base_params one_node_params : OneNodeParams orig_base_params h, cid : name st1 : raft_data out : list raft_output st' : raft_data m : list (name * msg) H1 : handleTimeout h st1 = (out, st', m) H2 : votedFor st' = Some cid refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (GhostSimulations.deghost net) E' : type st' = Follower H, H3 : serverType votes : list (term * name) votesWithLog : list (term * name * list entry) cronies : term -> list name leaderLogs : list (term * list entry) allEntries : list (term * entry) H0, H4, H5, H6, H7, H8, H9, H10, H11, H12, H13, H14, H15, H16, H17, H18, H19, H20, H21, H22, H23, H24, H25, H26, H27, H28, H29, H30, H31, H32, H33, H34, H35, H36, H37, H38, H39, H40, H41, H42, H43, H44, H45, H46, H47, H48, H49, H50, H51, H52, H53, H54, H55, H56, H57, H58, H59, H60, H61, H62, H63, H64 : serverType Unable to unify \"votedFor st'\" with \"votedFor st1\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros h cid st out st' m H1 H2.", "inversion H1; subst.", "qsimpl time: 1 use: type.", "destruct (type st') eqn:E'; try discriminate.", "inversion H2; subst.", "constructor; intuition.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst."], "tactic": "constructor; intuition.", "exn": "In environment orig_base_params : BaseParams raft_params : RaftParams orig_base_params one_node_params : OneNodeParams orig_base_params h, cid : name st1 : raft_data out : list raft_output st' : raft_data m : list (name * msg) H1 : handleTimeout h st1 = (out, st', m) H2 : votedFor st' = Some cid refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (GhostSimulations.deghost net) E' : type st' = Follower H, H3 : serverType votes : list (term * name) votesWithLog : list (term * name * list entry) cronies : term -> list name leaderLogs : list (term * list entry) allEntries : list (term * entry) H0, H4, H5, H6, H7, H8, H9, H10, H11, H12, H13, H14, H15, H16, H17, H18, H19, H20, H21, H22, H23, H24, H25, H26, H27, H28, H29, H30, H31, H32, H33, H34, H35, H36, H37, H38, H39, H40, H41, H42, H43, H44, H45, H46, H47, H48, H49, H50, H51, H52, H53, H54, H55, H56, H57, H58, H59, H60, H61, H62, H63, H64, H65 : serverType H67 : votedFor st' = Some cid Unable to unify \"votedFor st'\" with \"votedFor st1\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros h cid st out st' m H1 H2.", "inversion H1; subst.", "qsimpl time: 1 use: type.", "destruct (type st') eqn:E'; try discriminate.", "inversion H2; subst.", "constructor; intuition.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type."], "tactic": "right; split; try reflexivity.", "exn": "Not an inductive goal with 2 constructors.", "type": "not_inductive_goal", "handled": true}, {"ctx": ["intros h cid st out st' m H1 H2.", "inversion H1; subst.", "qsimpl time: 1 use: type.", "destruct (type st') eqn:E'; try discriminate.", "inversion H2; subst.", "constructor; intuition.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type."], "tactic": "constructor; intuition.", "exn": "In environment orig_base_params : BaseParams raft_params : RaftParams orig_base_params one_node_params : OneNodeParams orig_base_params h, cid : name st1 : raft_data out : list raft_output st' : raft_data m : list (name * msg) H1 : handleTimeout h st1 = (out, st', m) H2 : votedFor st' = Some cid refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (GhostSimulations.deghost net) E' : type st' = Follower H, H3 : serverType votes : list (term * name) votesWithLog : list (term * name * list entry) cronies : term -> list name leaderLogs : list (term * list entry) allEntries : list (term * entry) H0, H4, H5, H6, H7, H8, H9, H10, H11, H12, H13, H14, H15, H16, H17, H18, H19, H20, H21, H22, H23, H24, H25, H26, H27, H28, H29, H30, H31, H32, H33, H34, H35, H36, H37, H38, H39, H40, H41, H42, H43, H44, H45, H46, H47, H48, H49, H50, H51, H52, H53, H54, H55, H56, H57, H58, H59, H60, H61, H62, H63, H64, H65, H66, H67 : serverType Unable to unify \"votedFor st'\" with \"votedFor st1\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros h cid st out st' m H1 H2.", "inversion H1; subst.", "qsimpl time: 1 use: type.", "destruct (type st') eqn:E'; try discriminate.", "inversion H2; subst.", "constructor; intuition.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst."], "tactic": "constructor; intuition.", "exn": "In environment orig_base_params : BaseParams raft_params : RaftParams orig_base_params one_node_params : OneNodeParams orig_base_params h, cid : name st1 : raft_data out : list raft_output st' : raft_data m : list (name * msg) H1 : handleTimeout h st1 = (out, st', m) H2 : votedFor st' = Some cid refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (GhostSimulations.deghost net) E' : type st' = Follower H, H3 : serverType votes : list (term * name) votesWithLog : list (term * name * list entry) cronies : term -> list name leaderLogs : list (term * list entry) allEntries : list (term * entry) H0, H4, H5, H6, H7, H8, H9, H10, H11, H12, H13, H14, H15, H16, H17, H18, H19, H20, H21, H22, H23, H24, H25, H26, H27, H28, H29, H30, H31, H32, H33, H34, H35, H36, H37, H38, H39, H40, H41, H42, H43, H44, H45, H46, H47, H48, H49, H50, H51, H52, H53, H54, H55, H56, H57, H58, H59, H60, H61, H62, H63, H64, H65, H66, H67, H68 : serverType H70 : votedFor st' = Some cid Unable to unify \"votedFor st'\" with \"votedFor st1\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros h cid st out st' m H1 H2.", "inversion H1; subst.", "qsimpl time: 1 use: type.", "destruct (type st') eqn:E'; try discriminate.", "inversion H2; subst.", "constructor; intuition.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type."], "tactic": "right; split; try reflexivity.", "exn": "Not an inductive goal with 2 constructors.", "type": "not_inductive_goal", "handled": true}, {"ctx": ["intros h cid st out st' m H1 H2.", "inversion H1; subst.", "qsimpl time: 1 use: type.", "destruct (type st') eqn:E'; try discriminate.", "inversion H2; subst.", "constructor; intuition.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type."], "tactic": "constructor; intuition.", "exn": "In environment orig_base_params : BaseParams raft_params : RaftParams orig_base_params one_node_params : OneNodeParams orig_base_params h, cid : name st1 : raft_data out : list raft_output st' : raft_data m : list (name * msg) H1 : handleTimeout h st1 = (out, st', m) H2 : votedFor st' = Some cid refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (GhostSimulations.deghost net) E' : type st' = Follower H, H3 : serverType votes : list (term * name) votesWithLog : list (term * name * list entry) cronies : term -> list name leaderLogs : list (term * list entry) allEntries : list (term * entry) H0, H4, H5, H6, H7, H8, H9, H10, H11, H12, H13, H14, H15, H16, H17, H18, H19, H20, H21, H22, H23, H24, H25, H26, H27, H28, H29, H30, H31, H32, H33, H34, H35, H36, H37, H38, H39, H40, H41, H42, H43, H44, H45, H46, H47, H48, H49, H50, H51, H52, H53, H54, H55, H56, H57, H58, H59, H60, H61, H62, H63, H64, H65, H66, H67, H68, H69, H70 : serverType Unable to unify \"votedFor st'\" with \"votedFor st1\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros h cid st out st' m H1 H2.", "inversion H1; subst.", "qsimpl time: 1 use: type.", "destruct (type st') eqn:E'; try discriminate.", "inversion H2; subst.", "constructor; intuition.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst."], "tactic": "constructor; intuition.", "exn": "In environment orig_base_params : BaseParams raft_params : RaftParams orig_base_params one_node_params : OneNodeParams orig_base_params h, cid : name st1 : raft_data out : list raft_output st' : raft_data m : list (name * msg) H1 : handleTimeout h st1 = (out, st', m) H2 : votedFor st' = Some cid refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (GhostSimulations.deghost net) E' : type st' = Follower H, H3 : serverType votes : list (term * name) votesWithLog : list (term * name * list entry) cronies : term -> list name leaderLogs : list (term * list entry) allEntries : list (term * entry) H0, H4, H5, H6, H7, H8, H9, H10, H11, H12, H13, H14, H15, H16, H17, H18, H19, H20, H21, H22, H23, H24, H25, H26, H27, H28, H29, H30, H31, H32, H33, H34, H35, H36, H37, H38, H39, H40, H41, H42, H43, H44, H45, H46, H47, H48, H49, H50, H51, H52, H53, H54, H55, H56, H57, H58, H59, H60, H61, H62, H63, H64, H65, H66, H67, H68, H69, H70, H71 : serverType H73 : votedFor st' = Some cid Unable to unify \"votedFor st'\" with \"votedFor st1\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros h cid st out st' m H1 H2.", "inversion H1; subst.", "qsimpl time: 1 use: type.", "destruct (type st') eqn:E'; try discriminate.", "inversion H2; subst.", "constructor; intuition.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type."], "tactic": "right; split; try reflexivity.", "exn": "Not an inductive goal with 2 constructors.", "type": "not_inductive_goal", "handled": true}, {"ctx": ["intros h cid st out st' m H1 H2.", "inversion H1; subst.", "qsimpl time: 1 use: type.", "destruct (type st') eqn:E'; try discriminate.", "inversion H2; subst.", "constructor; intuition.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type."], "tactic": "constructor; intuition.", "exn": "In environment orig_base_params : BaseParams raft_params : RaftParams orig_base_params one_node_params : OneNodeParams orig_base_params h, cid : name st1 : raft_data out : list raft_output st' : raft_data m : list (name * msg) H1 : handleTimeout h st1 = (out, st', m) H2 : votedFor st' = Some cid refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (GhostSimulations.deghost net) E' : type st' = Follower H, H3 : serverType votes : list (term * name) votesWithLog : list (term * name * list entry) cronies : term -> list name leaderLogs : list (term * list entry) allEntries : list (term * entry) H0, H4, H5, H6, H7, H8, H9, H10, H11, H12, H13, H14, H15, H16, H17, H18, H19, H20, H21, H22, H23, H24, H25, H26, H27, H28, H29, H30, H31, H32, H33, H34, H35, H36, H37, H38, H39, H40, H41, H42, H43, H44, H45, H46, H47, H48, H49, H50, H51, H52, H53, H54, H55, H56, H57, H58, H59, H60, H61, H62, H63, H64, H65, H66, H67, H68, H69, H70, H71, H72, H73 : serverType Unable to unify \"votedFor st'\" with \"votedFor st1\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros h cid st out st' m H1 H2.", "inversion H1; subst.", "qsimpl time: 1 use: type.", "destruct (type st') eqn:E'; try discriminate.", "inversion H2; subst.", "constructor; intuition.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst."], "tactic": "constructor; intuition.", "exn": "In environment orig_base_params : BaseParams raft_params : RaftParams orig_base_params one_node_params : OneNodeParams orig_base_params h, cid : name st1 : raft_data out : list raft_output st' : raft_data m : list (name * msg) H1 : handleTimeout h st1 = (out, st', m) H2 : votedFor st' = Some cid refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (GhostSimulations.deghost net) E' : type st' = Follower H, H3 : serverType votes : list (term * name) votesWithLog : list (term * name * list entry) cronies : term -> list name leaderLogs : list (term * list entry) allEntries : list (term * entry) H0, H4, H5, H6, H7, H8, H9, H10, H11, H12, H13, H14, H15, H16, H17, H18, H19, H20, H21, H22, H23, H24, H25, H26, H27, H28, H29, H30, H31, H32, H33, H34, H35, H36, H37, H38, H39, H40, H41, H42, H43, H44, H45, H46, H47, H48, H49, H50, H51, H52, H53, H54, H55, H56, H57, H58, H59, H60, H61, H62, H63, H64, H65, H66, H67, H68, H69, H70, H71, H72, H73, H74 : serverType H76 : votedFor st' = Some cid Unable to unify \"votedFor st'\" with \"votedFor st1\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros h cid st out st' m H1 H2.", "inversion H1; subst.", "qsimpl time: 1 use: type.", "destruct (type st') eqn:E'; try discriminate.", "inversion H2; subst.", "constructor; intuition.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type."], "tactic": "right; split; try reflexivity.", "exn": "Not an inductive goal with 2 constructors.", "type": "not_inductive_goal", "handled": true}, {"ctx": ["intros h cid st out st' m H1 H2.", "inversion H1; subst.", "qsimpl time: 1 use: type.", "destruct (type st') eqn:E'; try discriminate.", "inversion H2; subst.", "constructor; intuition.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type."], "tactic": "constructor; intuition.", "exn": "In environment orig_base_params : BaseParams raft_params : RaftParams orig_base_params one_node_params : OneNodeParams orig_base_params h, cid : name st1 : raft_data out : list raft_output st' : raft_data m : list (name * msg) H1 : handleTimeout h st1 = (out, st', m) H2 : votedFor st' = Some cid refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (GhostSimulations.deghost net) E' : type st' = Follower H, H3 : serverType votes : list (term * name) votesWithLog : list (term * name * list entry) cronies : term -> list name leaderLogs : list (term * list entry) allEntries : list (term * entry) H0, H4, H5, H6, H7, H8, H9, H10, H11, H12, H13, H14, H15, H16, H17, H18, H19, H20, H21, H22, H23, H24, H25, H26, H27, H28, H29, H30, H31, H32, H33, H34, H35, H36, H37, H38, H39, H40, H41, H42, H43, H44, H45, H46, H47, H48, H49, H50, H51, H52, H53, H54, H55, H56, H57, H58, H59, H60, H61, H62, H63, H64, H65, H66, H67, H68, H69, H70, H71, H72, H73, H74, H75, H76 : serverType Unable to unify \"votedFor st'\" with \"votedFor st1\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros h cid st out st' m H1 H2.", "inversion H1; subst.", "qsimpl time: 1 use: type.", "destruct (type st') eqn:E'; try discriminate.", "inversion H2; subst.", "constructor; intuition.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst."], "tactic": "constructor; intuition.", "exn": "In environment orig_base_params : BaseParams raft_params : RaftParams orig_base_params one_node_params : OneNodeParams orig_base_params h, cid : name st1 : raft_data out : list raft_output st' : raft_data m : list (name * msg) H1 : handleTimeout h st1 = (out, st', m) H2 : votedFor st' = Some cid refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (GhostSimulations.deghost net) E' : type st' = Follower H, H3 : serverType votes : list (term * name) votesWithLog : list (term * name * list entry) cronies : term -> list name leaderLogs : list (term * list entry) allEntries : list (term * entry) H0, H4, H5, H6, H7, H8, H9, H10, H11, H12, H13, H14, H15, H16, H17, H18, H19, H20, H21, H22, H23, H24, H25, H26, H27, H28, H29, H30, H31, H32, H33, H34, H35, H36, H37, H38, H39, H40, H41, H42, H43, H44, H45, H46, H47, H48, H49, H50, H51, H52, H53, H54, H55, H56, H57, H58, H59, H60, H61, H62, H63, H64, H65, H66, H67, H68, H69, H70, H71, H72, H73, H74, H75, H76, H77 : serverType H79 : votedFor st' = Some cid Unable to unify \"votedFor st'\" with \"votedFor st1\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros h cid st out st' m H1 H2.", "inversion H1; subst.", "qsimpl time: 1 use: type.", "destruct (type st') eqn:E'; try discriminate.", "inversion H2; subst.", "constructor; intuition.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type."], "tactic": "right; split; try reflexivity.", "exn": "Not an inductive goal with 2 constructors.", "type": "not_inductive_goal", "handled": true}, {"ctx": ["intros h cid st out st' m H1 H2.", "inversion H1; subst.", "qsimpl time: 1 use: type.", "destruct (type st') eqn:E'; try discriminate.", "inversion H2; subst.", "constructor; intuition.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type."], "tactic": "constructor; intuition.", "exn": "In environment orig_base_params : BaseParams raft_params : RaftParams orig_base_params one_node_params : OneNodeParams orig_base_params h, cid : name st1 : raft_data out : list raft_output st' : raft_data m : list (name * msg) H1 : handleTimeout h st1 = (out, st', m) H2 : votedFor st' = Some cid refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (GhostSimulations.deghost net) E' : type st' = Follower H, H3 : serverType votes : list (term * name) votesWithLog : list (term * name * list entry) cronies : term -> list name leaderLogs : list (term * list entry) allEntries : list (term * entry) H0, H4, H5, H6, H7, H8, H9, H10, H11, H12, H13, H14, H15, H16, H17, H18, H19, H20, H21, H22, H23, H24, H25, H26, H27, H28, H29, H30, H31, H32, H33, H34, H35, H36, H37, H38, H39, H40, H41, H42, H43, H44, H45, H46, H47, H48, H49, H50, H51, H52, H53, H54, H55, H56, H57, H58, H59, H60, H61, H62, H63, H64, H65, H66, H67, H68, H69, H70, H71, H72, H73, H74, H75, H76, H77, H78, H79 : serverType Unable to unify \"votedFor st'\" with \"votedFor st1\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros h cid st out st' m H1 H2.", "inversion H1; subst.", "qsimpl time: 1 use: type.", "destruct (type st') eqn:E'; try discriminate.", "inversion H2; subst.", "constructor; intuition.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst."], "tactic": "constructor; intuition.", "exn": "In environment orig_base_params : BaseParams raft_params : RaftParams orig_base_params one_node_params : OneNodeParams orig_base_params h, cid : name st1 : raft_data out : list raft_output st' : raft_data m : list (name * msg) H1 : handleTimeout h st1 = (out, st', m) H2 : votedFor st' = Some cid refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (GhostSimulations.deghost net) E' : type st' = Follower H, H3 : serverType votes : list (term * name) votesWithLog : list (term * name * list entry) cronies : term -> list name leaderLogs : list (term * list entry) allEntries : list (term * entry) H0, H4, H5, H6, H7, H8, H9, H10, H11, H12, H13, H14, H15, H16, H17, H18, H19, H20, H21, H22, H23, H24, H25, H26, H27, H28, H29, H30, H31, H32, H33, H34, H35, H36, H37, H38, H39, H40, H41, H42, H43, H44, H45, H46, H47, H48, H49, H50, H51, H52, H53, H54, H55, H56, H57, H58, H59, H60, H61, H62, H63, H64, H65, H66, H67, H68, H69, H70, H71, H72, H73, H74, H75, H76, H77, H78, H79, H80 : serverType H82 : votedFor st' = Some cid Unable to unify \"votedFor st'\" with \"votedFor st1\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros h cid st out st' m H1 H2.", "inversion H1; subst.", "qsimpl time: 1 use: type.", "destruct (type st') eqn:E'; try discriminate.", "inversion H2; subst.", "constructor; intuition.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type."], "tactic": "right; split; try reflexivity.", "exn": "Not an inductive goal with 2 constructors.", "type": "not_inductive_goal", "handled": true}, {"ctx": ["intros h cid st out st' m H1 H2.", "inversion H1; subst.", "qsimpl time: 1 use: type.", "destruct (type st') eqn:E'; try discriminate.", "inversion H2; subst.", "constructor; intuition.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type."], "tactic": "constructor; intuition.", "exn": "In environment orig_base_params : BaseParams raft_params : RaftParams orig_base_params one_node_params : OneNodeParams orig_base_params h, cid : name st1 : raft_data out : list raft_output st' : raft_data m : list (name * msg) H1 : handleTimeout h st1 = (out, st', m) H2 : votedFor st' = Some cid refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (GhostSimulations.deghost net) E' : type st' = Follower H, H3 : serverType votes : list (term * name) votesWithLog : list (term * name * list entry) cronies : term -> list name leaderLogs : list (term * list entry) allEntries : list (term * entry) H0, H4, H5, H6, H7, H8, H9, H10, H11, H12, H13, H14, H15, H16, H17, H18, H19, H20, H21, H22, H23, H24, H25, H26, H27, H28, H29, H30, H31, H32, H33, H34, H35, H36, H37, H38, H39, H40, H41, H42, H43, H44, H45, H46, H47, H48, H49, H50, H51, H52, H53, H54, H55, H56, H57, H58, H59, H60, H61, H62, H63, H64, H65, H66, H67, H68, H69, H70, H71, H72, H73, H74, H75, H76, H77, H78, H79, H80, H81, H82 : serverType Unable to unify \"votedFor st'\" with \"votedFor st1\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros h cid st out st' m H1 H2.", "inversion H1; subst.", "qsimpl time: 1 use: type.", "destruct (type st') eqn:E'; try discriminate.", "inversion H2; subst.", "constructor; intuition.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst."], "tactic": "constructor; intuition.", "exn": "In environment orig_base_params : BaseParams raft_params : RaftParams orig_base_params one_node_params : OneNodeParams orig_base_params h, cid : name st1 : raft_data out : list raft_output st' : raft_data m : list (name * msg) H1 : handleTimeout h st1 = (out, st', m) H2 : votedFor st' = Some cid refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (GhostSimulations.deghost net) E' : type st' = Follower H, H3 : serverType votes : list (term * name) votesWithLog : list (term * name * list entry) cronies : term -> list name leaderLogs : list (term * list entry) allEntries : list (term * entry) H0, H4, H5, H6, H7, H8, H9, H10, H11, H12, H13, H14, H15, H16, H17, H18, H19, H20, H21, H22, H23, H24, H25, H26, H27, H28, H29, H30, H31, H32, H33, H34, H35, H36, H37, H38, H39, H40, H41, H42, H43, H44, H45, H46, H47, H48, H49, H50, H51, H52, H53, H54, H55, H56, H57, H58, H59, H60, H61, H62, H63, H64, H65, H66, H67, H68, H69, H70, H71, H72, H73, H74, H75, H76, H77, H78, H79, H80, H81, H82, H83 : serverType H85 : votedFor st' = Some cid Unable to unify \"votedFor st'\" with \"votedFor st1\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros h cid st out st' m H1 H2.", "inversion H1; subst.", "qsimpl time: 1 use: type.", "destruct (type st') eqn:E'; try discriminate.", "inversion H2; subst.", "constructor; intuition.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type."], "tactic": "right; split; try reflexivity.", "exn": "Not an inductive goal with 2 constructors.", "type": "not_inductive_goal", "handled": true}, {"ctx": ["intros h cid st out st' m H1 H2.", "inversion H1; subst.", "qsimpl time: 1 use: type.", "destruct (type st') eqn:E'; try discriminate.", "inversion H2; subst.", "constructor; intuition.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type."], "tactic": "constructor; intuition.", "exn": "In environment orig_base_params : BaseParams raft_params : RaftParams orig_base_params one_node_params : OneNodeParams orig_base_params h, cid : name st1 : raft_data out : list raft_output st' : raft_data m : list (name * msg) H1 : handleTimeout h st1 = (out, st', m) H2 : votedFor st' = Some cid refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (GhostSimulations.deghost net) E' : type st' = Follower H, H3 : serverType votes : list (term * name) votesWithLog : list (term * name * list entry) cronies : term -> list name leaderLogs : list (term * list entry) allEntries : list (term * entry) H0, H4, H5, H6, H7, H8, H9, H10, H11, H12, H13, H14, H15, H16, H17, H18, H19, H20, H21, H22, H23, H24, H25, H26, H27, H28, H29, H30, H31, H32, H33, H34, H35, H36, H37, H38, H39, H40, H41, H42, H43, H44, H45, H46, H47, H48, H49, H50, H51, H52, H53, H54, H55, H56, H57, H58, H59, H60, H61, H62, H63, H64, H65, H66, H67, H68, H69, H70, H71, H72, H73, H74, H75, H76, H77, H78, H79, H80, H81, H82, H83, H84, H85 : serverType Unable to unify \"votedFor st'\" with \"votedFor st1\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros h cid st out st' m H1 H2.", "inversion H1; subst.", "qsimpl time: 1 use: type.", "destruct (type st') eqn:E'; try discriminate.", "inversion H2; subst.", "constructor; intuition.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst."], "tactic": "constructor; intuition.", "exn": "In environment orig_base_params : BaseParams raft_params : RaftParams orig_base_params one_node_params : OneNodeParams orig_base_params h, cid : name st1 : raft_data out : list raft_output st' : raft_data m : list (name * msg) H1 : handleTimeout h st1 = (out, st', m) H2 : votedFor st' = Some cid refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (GhostSimulations.deghost net) E' : type st' = Follower H, H3 : serverType votes : list (term * name) votesWithLog : list (term * name * list entry) cronies : term -> list name leaderLogs : list (term * list entry) allEntries : list (term * entry) H0, H4, H5, H6, H7, H8, H9, H10, H11, H12, H13, H14, H15, H16, H17, H18, H19, H20, H21, H22, H23, H24, H25, H26, H27, H28, H29, H30, H31, H32, H33, H34, H35, H36, H37, H38, H39, H40, H41, H42, H43, H44, H45, H46, H47, H48, H49, H50, H51, H52, H53, H54, H55, H56, H57, H58, H59, H60, H61, H62, H63, H64, H65, H66, H67, H68, H69, H70, H71, H72, H73, H74, H75, H76, H77, H78, H79, H80, H81, H82, H83, H84, H85, H86 : serverType H88 : votedFor st' = Some cid Unable to unify \"votedFor st'\" with \"votedFor st1\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros h cid st out st' m H1 H2.", "inversion H1; subst.", "qsimpl time: 1 use: type.", "destruct (type st') eqn:E'; try discriminate.", "inversion H2; subst.", "constructor; intuition.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type."], "tactic": "right; split; try reflexivity.", "exn": "Not an inductive goal with 2 constructors.", "type": "not_inductive_goal", "handled": true}, {"ctx": ["intros h cid st out st' m H1 H2.", "inversion H1; subst.", "qsimpl time: 1 use: type.", "destruct (type st') eqn:E'; try discriminate.", "inversion H2; subst.", "constructor; intuition.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type."], "tactic": "constructor; intuition.", "exn": "In environment orig_base_params : BaseParams raft_params : RaftParams orig_base_params one_node_params : OneNodeParams orig_base_params h, cid : name st1 : raft_data out : list raft_output st' : raft_data m : list (name * msg) H1 : handleTimeout h st1 = (out, st', m) H2 : votedFor st' = Some cid refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (GhostSimulations.deghost net) E' : type st' = Follower H, H3 : serverType votes : list (term * name) votesWithLog : list (term * name * list entry) cronies : term -> list name leaderLogs : list (term * list entry) allEntries : list (term * entry) H0, H4, H5, H6, H7, H8, H9, H10, H11, H12, H13, H14, H15, H16, H17, H18, H19, H20, H21, H22, H23, H24, H25, H26, H27, H28, H29, H30, H31, H32, H33, H34, H35, H36, H37, H38, H39, H40, H41, H42, H43, H44, H45, H46, H47, H48, H49, H50, H51, H52, H53, H54, H55, H56, H57, H58, H59, H60, H61, H62, H63, H64, H65, H66, H67, H68, H69, H70, H71, H72, H73, H74, H75, H76, H77, H78, H79, H80, H81, H82, H83, H84, H85, H86, H87, H88 : serverType Unable to unify \"votedFor st'\" with \"votedFor st1\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros h cid st out st' m H1 H2.", "inversion H1; subst.", "qsimpl time: 1 use: type.", "destruct (type st') eqn:E'; try discriminate.", "inversion H2; subst.", "constructor; intuition.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst."], "tactic": "constructor; intuition.", "exn": "In environment orig_base_params : BaseParams raft_params : RaftParams orig_base_params one_node_params : OneNodeParams orig_base_params h, cid : name st1 : raft_data out : list raft_output st' : raft_data m : list (name * msg) H1 : handleTimeout h st1 = (out, st', m) H2 : votedFor st' = Some cid refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (GhostSimulations.deghost net) E' : type st' = Follower H, H3 : serverType votes : list (term * name) votesWithLog : list (term * name * list entry) cronies : term -> list name leaderLogs : list (term * list entry) allEntries : list (term * entry) H0, H4, H5, H6, H7, H8, H9, H10, H11, H12, H13, H14, H15, H16, H17, H18, H19, H20, H21, H22, H23, H24, H25, H26, H27, H28, H29, H30, H31, H32, H33, H34, H35, H36, H37, H38, H39, H40, H41, H42, H43, H44, H45, H46, H47, H48, H49, H50, H51, H52, H53, H54, H55, H56, H57, H58, H59, H60, H61, H62, H63, H64, H65, H66, H67, H68, H69, H70, H71, H72, H73, H74, H75, H76, H77, H78, H79, H80, H81, H82, H83, H84, H85, H86, H87, H88, H89 : serverType H91 : votedFor st' = Some cid Unable to unify \"votedFor st'\" with \"votedFor st1\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros h cid st out st' m H1 H2.", "inversion H1; subst.", "qsimpl time: 1 use: type.", "destruct (type st') eqn:E'; try discriminate.", "inversion H2; subst.", "constructor; intuition.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type."], "tactic": "right; split; try reflexivity.", "exn": "Not an inductive goal with 2 constructors.", "type": "not_inductive_goal", "handled": true}, {"ctx": ["intros h cid st out st' m H1 H2.", "inversion H1; subst.", "qsimpl time: 1 use: type.", "destruct (type st') eqn:E'; try discriminate.", "inversion H2; subst.", "constructor; intuition.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type."], "tactic": "constructor; intuition.", "exn": "In environment orig_base_params : BaseParams raft_params : RaftParams orig_base_params one_node_params : OneNodeParams orig_base_params h, cid : name st1 : raft_data out : list raft_output st' : raft_data m : list (name * msg) H1 : handleTimeout h st1 = (out, st', m) H2 : votedFor st' = Some cid refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (GhostSimulations.deghost net) E' : type st' = Follower H, H3 : serverType votes : list (term * name) votesWithLog : list (term * name * list entry) cronies : term -> list name leaderLogs : list (term * list entry) allEntries : list (term * entry) H0, H4, H5, H6, H7, H8, H9, H10, H11, H12, H13, H14, H15, H16, H17, H18, H19, H20, H21, H22, H23, H24, H25, H26, H27, H28, H29, H30, H31, H32, H33, H34, H35, H36, H37, H38, H39, H40, H41, H42, H43, H44, H45, H46, H47, H48, H49, H50, H51, H52, H53, H54, H55, H56, H57, H58, H59, H60, H61, H62, H63, H64, H65, H66, H67, H68, H69, H70, H71, H72, H73, H74, H75, H76, H77, H78, H79, H80, H81, H82, H83, H84, H85, H86, H87, H88, H89, H90, H91 : serverType Unable to unify \"votedFor st'\" with \"votedFor st1\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros h cid st out st' m H1 H2.", "inversion H1; subst.", "qsimpl time: 1 use: type.", "destruct (type st') eqn:E'; try discriminate.", "inversion H2; subst.", "constructor; intuition.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst."], "tactic": "constructor; intuition.", "exn": "In environment orig_base_params : BaseParams raft_params : RaftParams orig_base_params one_node_params : OneNodeParams orig_base_params h, cid : name st1 : raft_data out : list raft_output st' : raft_data m : list (name * msg) H1 : handleTimeout h st1 = (out, st', m) H2 : votedFor st' = Some cid refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (GhostSimulations.deghost net) E' : type st' = Follower H, H3 : serverType votes : list (term * name) votesWithLog : list (term * name * list entry) cronies : term -> list name leaderLogs : list (term * list entry) allEntries : list (term * entry) H0, H4, H5, H6, H7, H8, H9, H10, H11, H12, H13, H14, H15, H16, H17, H18, H19, H20, H21, H22, H23, H24, H25, H26, H27, H28, H29, H30, H31, H32, H33, H34, H35, H36, H37, H38, H39, H40, H41, H42, H43, H44, H45, H46, H47, H48, H49, H50, H51, H52, H53, H54, H55, H56, H57, H58, H59, H60, H61, H62, H63, H64, H65, H66, H67, H68, H69, H70, H71, H72, H73, H74, H75, H76, H77, H78, H79, H80, H81, H82, H83, H84, H85, H86, H87, H88, H89, H90, H91, H92 : serverType H94 : votedFor st' = Some cid Unable to unify \"votedFor st'\" with \"votedFor st1\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros h cid st out st' m H1 H2.", "inversion H1; subst.", "qsimpl time: 1 use: type.", "destruct (type st') eqn:E'; try discriminate.", "inversion H2; subst.", "constructor; intuition.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type."], "tactic": "right; split; try reflexivity.", "exn": "Not an inductive goal with 2 constructors.", "type": "not_inductive_goal", "handled": true}, {"ctx": ["intros h cid st out st' m H1 H2.", "inversion H1; subst.", "qsimpl time: 1 use: type.", "destruct (type st') eqn:E'; try discriminate.", "inversion H2; subst.", "constructor; intuition.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type."], "tactic": "constructor; intuition.", "exn": "In environment orig_base_params : BaseParams raft_params : RaftParams orig_base_params one_node_params : OneNodeParams orig_base_params h, cid : name st1 : raft_data out : list raft_output st' : raft_data m : list (name * msg) H1 : handleTimeout h st1 = (out, st', m) H2 : votedFor st' = Some cid refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (GhostSimulations.deghost net) E' : type st' = Follower H, H3 : serverType votes : list (term * name) votesWithLog : list (term * name * list entry) cronies : term -> list name leaderLogs : list (term * list entry) allEntries : list (term * entry) H0, H4, H5, H6, H7, H8, H9, H10, H11, H12, H13, H14, H15, H16, H17, H18, H19, H20, H21, H22, H23, H24, H25, H26, H27, H28, H29, H30, H31, H32, H33, H34, H35, H36, H37, H38, H39, H40, H41, H42, H43, H44, H45, H46, H47, H48, H49, H50, H51, H52, H53, H54, H55, H56, H57, H58, H59, H60, H61, H62, H63, H64, H65, H66, H67, H68, H69, H70, H71, H72, H73, H74, H75, H76, H77, H78, H79, H80, H81, H82, H83, H84, H85, H86, H87, H88, H89, H90, H91, H92, H93, H94 : serverType Unable to unify \"votedFor st'\" with \"votedFor st1\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros h cid st out st' m H1 H2.", "inversion H1; subst.", "qsimpl time: 1 use: type.", "destruct (type st') eqn:E'; try discriminate.", "inversion H2; subst.", "constructor; intuition.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst."], "tactic": "constructor; intuition.", "exn": "In environment orig_base_params : BaseParams raft_params : RaftParams orig_base_params one_node_params : OneNodeParams orig_base_params h, cid : name st1 : raft_data out : list raft_output st' : raft_data m : list (name * msg) H1 : handleTimeout h st1 = (out, st', m) H2 : votedFor st' = Some cid refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (GhostSimulations.deghost net) E' : type st' = Follower H, H3 : serverType votes : list (term * name) votesWithLog : list (term * name * list entry) cronies : term -> list name leaderLogs : list (term * list entry) allEntries : list (term * entry) H0, H4, H5, H6, H7, H8, H9, H10, H11, H12, H13, H14, H15, H16, H17, H18, H19, H20, H21, H22, H23, H24, H25, H26, H27, H28, H29, H30, H31, H32, H33, H34, H35, H36, H37, H38, H39, H40, H41, H42, H43, H44, H45, H46, H47, H48, H49, H50, H51, H52, H53, H54, H55, H56, H57, H58, H59, H60, H61, H62, H63, H64, H65, H66, H67, H68, H69, H70, H71, H72, H73, H74, H75, H76, H77, H78, H79, H80, H81, H82, H83, H84, H85, H86, H87, H88, H89, H90, H91, H92, H93, H94, H95 : serverType H97 : votedFor st' = Some cid Unable to unify \"votedFor st'\" with \"votedFor st1\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros h cid st out st' m H1 H2.", "inversion H1; subst.", "qsimpl time: 1 use: type.", "destruct (type st') eqn:E'; try discriminate.", "inversion H2; subst.", "constructor; intuition.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type."], "tactic": "right; split; try reflexivity.", "exn": "Not an inductive goal with 2 constructors.", "type": "not_inductive_goal", "handled": true}, {"ctx": ["intros h cid st out st' m H1 H2.", "inversion H1; subst.", "qsimpl time: 1 use: type.", "destruct (type st') eqn:E'; try discriminate.", "inversion H2; subst.", "constructor; intuition.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type."], "tactic": "constructor; intuition.", "exn": "In environment orig_base_params : BaseParams raft_params : RaftParams orig_base_params one_node_params : OneNodeParams orig_base_params h, cid : name st1 : raft_data out : list raft_output st' : raft_data m : list (name * msg) H1 : handleTimeout h st1 = (out, st', m) H2 : votedFor st' = Some cid refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (GhostSimulations.deghost net) E' : type st' = Follower H, H3 : serverType votes : list (term * name) votesWithLog : list (term * name * list entry) cronies : term -> list name leaderLogs : list (term * list entry) allEntries : list (term * entry) H0, H4, H5, H6, H7, H8, H9, H10, H11, H12, H13, H14, H15, H16, H17, H18, H19, H20, H21, H22, H23, H24, H25, H26, H27, H28, H29, H30, H31, H32, H33, H34, H35, H36, H37, H38, H39, H40, H41, H42, H43, H44, H45, H46, H47, H48, H49, H50, H51, H52, H53, H54, H55, H56, H57, H58, H59, H60, H61, H62, H63, H64, H65, H66, H67, H68, H69, H70, H71, H72, H73, H74, H75, H76, H77, H78, H79, H80, H81, H82, H83, H84, H85, H86, H87, H88, H89, H90, H91, H92, H93, H94, H95, H96, H97 : serverType Unable to unify \"votedFor st'\" with \"votedFor st1\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros h cid st out st' m H1 H2.", "inversion H1; subst.", "qsimpl time: 1 use: type.", "destruct (type st') eqn:E'; try discriminate.", "inversion H2; subst.", "constructor; intuition.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst."], "tactic": "constructor; intuition.", "exn": "In environment orig_base_params : BaseParams raft_params : RaftParams orig_base_params one_node_params : OneNodeParams orig_base_params h, cid : name st1 : raft_data out : list raft_output st' : raft_data m : list (name * msg) H1 : handleTimeout h st1 = (out, st', m) H2 : votedFor st' = Some cid refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (GhostSimulations.deghost net) E' : type st' = Follower H, H3 : serverType votes : list (term * name) votesWithLog : list (term * name * list entry) cronies : term -> list name leaderLogs : list (term * list entry) allEntries : list (term * entry) H0, H4, H5, H6, H7, H8, H9, H10, H11, H12, H13, H14, H15, H16, H17, H18, H19, H20, H21, H22, H23, H24, H25, H26, H27, H28, H29, H30, H31, H32, H33, H34, H35, H36, H37, H38, H39, H40, H41, H42, H43, H44, H45, H46, H47, H48, H49, H50, H51, H52, H53, H54, H55, H56, H57, H58, H59, H60, H61, H62, H63, H64, H65, H66, H67, H68, H69, H70, H71, H72, H73, H74, H75, H76, H77, H78, H79, H80, H81, H82, H83, H84, H85, H86, H87, H88, H89, H90, H91, H92, H93, H94, H95, H96, H97, H98 : serverType H100 : votedFor st' = Some cid Unable to unify \"votedFor st'\" with \"votedFor st1\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros h cid st out st' m H1 H2.", "inversion H1; subst.", "qsimpl time: 1 use: type.", "destruct (type st') eqn:E'; try discriminate.", "inversion H2; subst.", "constructor; intuition.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type."], "tactic": "right; split; try reflexivity.", "exn": "Not an inductive goal with 2 constructors.", "type": "not_inductive_goal", "handled": true}, {"ctx": ["intros h cid st out st' m H1 H2.", "inversion H1; subst.", "qsimpl time: 1 use: type.", "destruct (type st') eqn:E'; try discriminate.", "inversion H2; subst.", "constructor; intuition.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type."], "tactic": "constructor; intuition.", "exn": "In environment orig_base_params : BaseParams raft_params : RaftParams orig_base_params one_node_params : OneNodeParams orig_base_params h, cid : name st1 : raft_data out : list raft_output st' : raft_data m : list (name * msg) H1 : handleTimeout h st1 = (out, st', m) H2 : votedFor st' = Some cid refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (GhostSimulations.deghost net) E' : type st' = Follower H, H3 : serverType votes : list (term * name) votesWithLog : list (term * name * list entry) cronies : term -> list name leaderLogs : list (term * list entry) allEntries : list (term * entry) H0, H4, H5, H6, H7, H8, H9, H10, H11, H12, H13, H14, H15, H16, H17, H18, H19, H20, H21, H22, H23, H24, H25, H26, H27, H28, H29, H30, H31, H32, H33, H34, H35, H36, H37, H38, H39, H40, H41, H42, H43, H44, H45, H46, H47, H48, H49, H50, H51, H52, H53, H54, H55, H56, H57, H58, H59, H60, H61, H62, H63, H64, H65, H66, H67, H68, H69, H70, H71, H72, H73, H74, H75, H76, H77, H78, H79, H80, H81, H82, H83, H84, H85, H86, H87, H88, H89, H90, H91, H92, H93, H94, H95, H96, H97, H98, H99, H100 : serverType Unable to unify \"votedFor st'\" with \"votedFor st1\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros h cid st out st' m H1 H2.", "inversion H1; subst.", "qsimpl time: 1 use: type.", "destruct (type st') eqn:E'; try discriminate.", "inversion H2; subst.", "constructor; intuition.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst."], "tactic": "constructor; intuition.", "exn": "In environment orig_base_params : BaseParams raft_params : RaftParams orig_base_params one_node_params : OneNodeParams orig_base_params h, cid : name st1 : raft_data out : list raft_output st' : raft_data m : list (name * msg) H1 : handleTimeout h st1 = (out, st', m) H2 : votedFor st' = Some cid refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (GhostSimulations.deghost net) E' : type st' = Follower H, H3 : serverType votes : list (term * name) votesWithLog : list (term * name * list entry) cronies : term -> list name leaderLogs : list (term * list entry) allEntries : list (term * entry) H0, H4, H5, H6, H7, H8, H9, H10, H11, H12, H13, H14, H15, H16, H17, H18, H19, H20, H21, H22, H23, H24, H25, H26, H27, H28, H29, H30, H31, H32, H33, H34, H35, H36, H37, H38, H39, H40, H41, H42, H43, H44, H45, H46, H47, H48, H49, H50, H51, H52, H53, H54, H55, H56, H57, H58, H59, H60, H61, H62, H63, H64, H65, H66, H67, H68, H69, H70, H71, H72, H73, H74, H75, H76, H77, H78, H79, H80, H81, H82, H83, H84, H85, H86, H87, H88, H89, H90, H91, H92, H93, H94, H95, H96, H97, H98, H99, H100, H101 : serverType H103 : votedFor st' = Some cid Unable to unify \"votedFor st'\" with \"votedFor st1\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros h cid st out st' m H1 H2.", "inversion H1; subst.", "qsimpl time: 1 use: type.", "destruct (type st') eqn:E'; try discriminate.", "inversion H2; subst.", "constructor; intuition.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type."], "tactic": "right; split; try reflexivity.", "exn": "Not an inductive goal with 2 constructors.", "type": "not_inductive_goal", "handled": true}, {"ctx": ["intros h cid st out st' m H1 H2.", "inversion H1; subst.", "qsimpl time: 1 use: type.", "destruct (type st') eqn:E'; try discriminate.", "inversion H2; subst.", "constructor; intuition.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type."], "tactic": "constructor; intuition.", "exn": "In environment orig_base_params : BaseParams raft_params : RaftParams orig_base_params one_node_params : OneNodeParams orig_base_params h, cid : name st1 : raft_data out : list raft_output st' : raft_data m : list (name * msg) H1 : handleTimeout h st1 = (out, st', m) H2 : votedFor st' = Some cid refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (GhostSimulations.deghost net) E' : type st' = Follower H, H3 : serverType votes : list (term * name) votesWithLog : list (term * name * list entry) cronies : term -> list name leaderLogs : list (term * list entry) allEntries : list (term * entry) H0, H4, H5, H6, H7, H8, H9, H10, H11, H12, H13, H14, H15, H16, H17, H18, H19, H20, H21, H22, H23, H24, H25, H26, H27, H28, H29, H30, H31, H32, H33, H34, H35, H36, H37, H38, H39, H40, H41, H42, H43, H44, H45, H46, H47, H48, H49, H50, H51, H52, H53, H54, H55, H56, H57, H58, H59, H60, H61, H62, H63, H64, H65, H66, H67, H68, H69, H70, H71, H72, H73, H74, H75, H76, H77, H78, H79, H80, H81, H82, H83, H84, H85, H86, H87, H88, H89, H90, H91, H92, H93, H94, H95, H96, H97, H98, H99, H100, H101, H102, H103 : serverType Unable to unify \"votedFor st'\" with \"votedFor st1\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros h cid st out st' m H1 H2.", "inversion H1; subst.", "qsimpl time: 1 use: type.", "destruct (type st') eqn:E'; try discriminate.", "inversion H2; subst.", "constructor; intuition.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst."], "tactic": "constructor; intuition.", "exn": "In environment orig_base_params : BaseParams raft_params : RaftParams orig_base_params one_node_params : OneNodeParams orig_base_params h, cid : name st1 : raft_data out : list raft_output st' : raft_data m : list (name * msg) H1 : handleTimeout h st1 = (out, st', m) H2 : votedFor st' = Some cid refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (GhostSimulations.deghost net) E' : type st' = Follower H, H3 : serverType votes : list (term * name) votesWithLog : list (term * name * list entry) cronies : term -> list name leaderLogs : list (term * list entry) allEntries : list (term * entry) H0, H4, H5, H6, H7, H8, H9, H10, H11, H12, H13, H14, H15, H16, H17, H18, H19, H20, H21, H22, H23, H24, H25, H26, H27, H28, H29, H30, H31, H32, H33, H34, H35, H36, H37, H38, H39, H40, H41, H42, H43, H44, H45, H46, H47, H48, H49, H50, H51, H52, H53, H54, H55, H56, H57, H58, H59, H60, H61, H62, H63, H64, H65, H66, H67, H68, H69, H70, H71, H72, H73, H74, H75, H76, H77, H78, H79, H80, H81, H82, H83, H84, H85, H86, H87, H88, H89, H90, H91, H92, H93, H94, H95, H96, H97, H98, H99, H100, H101, H102, H103, H104 : serverType H106 : votedFor st' = Some cid Unable to unify \"votedFor st'\" with \"votedFor st1\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros h cid st out st' m H1 H2.", "inversion H1; subst.", "qsimpl time: 1 use: type.", "destruct (type st') eqn:E'; try discriminate.", "inversion H2; subst.", "constructor; intuition.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type."], "tactic": "right; split; try reflexivity.", "exn": "Not an inductive goal with 2 constructors.", "type": "not_inductive_goal", "handled": true}, {"ctx": ["intros h cid st out st' m H1 H2.", "inversion H1; subst.", "qsimpl time: 1 use: type.", "destruct (type st') eqn:E'; try discriminate.", "inversion H2; subst.", "constructor; intuition.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type."], "tactic": "constructor; intuition.", "exn": "In environment orig_base_params : BaseParams raft_params : RaftParams orig_base_params one_node_params : OneNodeParams orig_base_params h, cid : name st1 : raft_data out : list raft_output st' : raft_data m : list (name * msg) H1 : handleTimeout h st1 = (out, st', m) H2 : votedFor st' = Some cid refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (GhostSimulations.deghost net) E' : type st' = Follower H, H3 : serverType votes : list (term * name) votesWithLog : list (term * name * list entry) cronies : term -> list name leaderLogs : list (term * list entry) allEntries : list (term * entry) H0, H4, H5, H6, H7, H8, H9, H10, H11, H12, H13, H14, H15, H16, H17, H18, H19, H20, H21, H22, H23, H24, H25, H26, H27, H28, H29, H30, H31, H32, H33, H34, H35, H36, H37, H38, H39, H40, H41, H42, H43, H44, H45, H46, H47, H48, H49, H50, H51, H52, H53, H54, H55, H56, H57, H58, H59, H60, H61, H62, H63, H64, H65, H66, H67, H68, H69, H70, H71, H72, H73, H74, H75, H76, H77, H78, H79, H80, H81, H82, H83, H84, H85, H86, H87, H88, H89, H90, H91, H92, H93, H94, H95, H96, H97, H98, H99, H100, H101, H102, H103, H104, H105, H106 : serverType Unable to unify \"votedFor st'\" with \"votedFor st1\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros h cid st out st' m H1 H2.", "inversion H1; subst.", "qsimpl time: 1 use: type.", "destruct (type st') eqn:E'; try discriminate.", "inversion H2; subst.", "constructor; intuition.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst."], "tactic": "constructor; intuition.", "exn": "In environment orig_base_params : BaseParams raft_params : RaftParams orig_base_params one_node_params : OneNodeParams orig_base_params h, cid : name st1 : raft_data out : list raft_output st' : raft_data m : list (name * msg) H1 : handleTimeout h st1 = (out, st', m) H2 : votedFor st' = Some cid refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (GhostSimulations.deghost net) E' : type st' = Follower H, H3 : serverType votes : list (term * name) votesWithLog : list (term * name * list entry) cronies : term -> list name leaderLogs : list (term * list entry) allEntries : list (term * entry) H0, H4, H5, H6, H7, H8, H9, H10, H11, H12, H13, H14, H15, H16, H17, H18, H19, H20, H21, H22, H23, H24, H25, H26, H27, H28, H29, H30, H31, H32, H33, H34, H35, H36, H37, H38, H39, H40, H41, H42, H43, H44, H45, H46, H47, H48, H49, H50, H51, H52, H53, H54, H55, H56, H57, H58, H59, H60, H61, H62, H63, H64, H65, H66, H67, H68, H69, H70, H71, H72, H73, H74, H75, H76, H77, H78, H79, H80, H81, H82, H83, H84, H85, H86, H87, H88, H89, H90, H91, H92, H93, H94, H95, H96, H97, H98, H99, H100, H101, H102, H103, H104, H105, H106, H107 : serverType H109 : votedFor st' = Some cid Unable to unify \"votedFor st'\" with \"votedFor st1\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros h cid st out st' m H1 H2.", "inversion H1; subst.", "qsimpl time: 1 use: type.", "destruct (type st') eqn:E'; try discriminate.", "inversion H2; subst.", "constructor; intuition.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type."], "tactic": "right; split; try reflexivity.", "exn": "Not an inductive goal with 2 constructors.", "type": "not_inductive_goal", "handled": true}, {"ctx": ["intros h cid st out st' m H1 H2.", "inversion H1; subst.", "qsimpl time: 1 use: type.", "destruct (type st') eqn:E'; try discriminate.", "inversion H2; subst.", "constructor; intuition.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type."], "tactic": "constructor; intuition.", "exn": "In environment orig_base_params : BaseParams raft_params : RaftParams orig_base_params one_node_params : OneNodeParams orig_base_params h, cid : name st1 : raft_data out : list raft_output st' : raft_data m : list (name * msg) H1 : handleTimeout h st1 = (out, st', m) H2 : votedFor st' = Some cid refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (GhostSimulations.deghost net) E' : type st' = Follower H, H3 : serverType votes : list (term * name) votesWithLog : list (term * name * list entry) cronies : term -> list name leaderLogs : list (term * list entry) allEntries : list (term * entry) H0, H4, H5, H6, H7, H8, H9, H10, H11, H12, H13, H14, H15, H16, H17, H18, H19, H20, H21, H22, H23, H24, H25, H26, H27, H28, H29, H30, H31, H32, H33, H34, H35, H36, H37, H38, H39, H40, H41, H42, H43, H44, H45, H46, H47, H48, H49, H50, H51, H52, H53, H54, H55, H56, H57, H58, H59, H60, H61, H62, H63, H64, H65, H66, H67, H68, H69, H70, H71, H72, H73, H74, H75, H76, H77, H78, H79, H80, H81, H82, H83, H84, H85, H86, H87, H88, H89, H90, H91, H92, H93, H94, H95, H96, H97, H98, H99, H100, H101, H102, H103, H104, H105, H106, H107, H108, H109 : serverType Unable to unify \"votedFor st'\" with \"votedFor st1\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros h cid st out st' m H1 H2.", "inversion H1; subst.", "qsimpl time: 1 use: type.", "destruct (type st') eqn:E'; try discriminate.", "inversion H2; subst.", "constructor; intuition.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst."], "tactic": "constructor; intuition.", "exn": "In environment orig_base_params : BaseParams raft_params : RaftParams orig_base_params one_node_params : OneNodeParams orig_base_params h, cid : name st1 : raft_data out : list raft_output st' : raft_data m : list (name * msg) H1 : handleTimeout h st1 = (out, st', m) H2 : votedFor st' = Some cid refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (GhostSimulations.deghost net) E' : type st' = Follower H, H3 : serverType votes : list (term * name) votesWithLog : list (term * name * list entry) cronies : term -> list name leaderLogs : list (term * list entry) allEntries : list (term * entry) H0, H4, H5, H6, H7, H8, H9, H10, H11, H12, H13, H14, H15, H16, H17, H18, H19, H20, H21, H22, H23, H24, H25, H26, H27, H28, H29, H30, H31, H32, H33, H34, H35, H36, H37, H38, H39, H40, H41, H42, H43, H44, H45, H46, H47, H48, H49, H50, H51, H52, H53, H54, H55, H56, H57, H58, H59, H60, H61, H62, H63, H64, H65, H66, H67, H68, H69, H70, H71, H72, H73, H74, H75, H76, H77, H78, H79, H80, H81, H82, H83, H84, H85, H86, H87, H88, H89, H90, H91, H92, H93, H94, H95, H96, H97, H98, H99, H100, H101, H102, H103, H104, H105, H106, H107, H108, H109, H110 : serverType H112 : votedFor st' = Some cid Unable to unify \"votedFor st'\" with \"votedFor st1\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros h cid st out st' m H1 H2.", "inversion H1; subst.", "qsimpl time: 1 use: type.", "destruct (type st') eqn:E'; try discriminate.", "inversion H2; subst.", "constructor; intuition.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type."], "tactic": "right; split; try reflexivity.", "exn": "Not an inductive goal with 2 constructors.", "type": "not_inductive_goal", "handled": true}, {"ctx": ["intros h cid st out st' m H1 H2.", "inversion H1; subst.", "qsimpl time: 1 use: type.", "destruct (type st') eqn:E'; try discriminate.", "inversion H2; subst.", "constructor; intuition.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type.", "inversion H2; subst.", "qsimpl time: 1 use: type.", "qsimpl time: 1 use: type."], "tactic": "constructor; intuition.", "exn": "In environment orig_base_params : BaseParams raft_params : RaftParams orig_base_params one_node_params : OneNodeParams orig_base_params h, cid : name st1 : raft_data out : list raft_output st' : raft_data m : list (name * msg) H1 : handleTimeout h st1 = (out, st', m) H2 : votedFor st' = Some cid refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (GhostSimulations.deghost net) E' : type st' = Follower H, H3 : serverType votes : list (term * name) votesWithLog : list (term * name * list entry) cronies : term -> list name leaderLogs : list (term * list entry) allEntries : list (term * entry) H0, H4, H5, H6, H7, H8, H9, H10, H11, H12, H13, H14, H15, H16, H17, H18, H19, H20, H21, H22, H23, H24, H25, H26, H27, H28, H29, H30, H31, H32, H33, H34, H35, H36, H37, H38, H39, H40, H41, H42, H43, H44, H45, H46, H47, H48, H49, H50, H51, H52, H53, H54, H55, H56, H57, H58, H59, H60, H61, H62, H63, H64, H65, H66, H67, H68, H69, H70, H71, H72, H73, H74, H75, H76, H77, H78, H79, H80, H81, H82, H83, H84, H85, H86, H87, H88, H89, H90, H91, H92, H93, H94, H95, H96, H97, H98, H99, H100, H101, H102, H103, H104, H105, H106, H107, H108, H109, H110, H111, H112 : serverType Unable to unify \"votedFor st'\" with \"votedFor st1\".", "type": "cannot_unify", "handled": true}]}, "chat": [{"role": "user", "content": "I will give you a Coq proof state, including both hypotheses and a specific goal and your need to prove it. Your response should be a singular code block of Coq proof starting with \"```coq\n\", ending with \"Qed.```\", without any additional explanation or commentary. Follow to these guidelines:\nIntroduce variables using unique names to avoid any conflicts.\nKeep each command distinct and separated, avoid concatenations like ';' or '[cmd|cmd]'.\nOrganize your proof with bullets like '-', '+', and '*' instead of braces ({, }). Shift to their double symbols like '--' and '++', when necessary.\nEffectively use given premises, follow the syntax and structure demonstrated in the examples provided.\n\nExample 1:\n\nHypotheses:\nn, m: nat\nIHn: m + n = n + m\n\nGoal:\nm + S n = S n + m\n\nProof:\n```coq\nsimpl. rewrite <- IHn. auto.\nQed.```\n\nExample 2:\nHypotheses:\n\nGoal:\nforall n m : nat, m + n = n + m\n\n```coq\nintros n m. induction n.\n- simpl. auto.\n- simpl. rewrite <- IHn. auto.\nQed.```\n\nSolve This Proof State:\n\nHypotheses:\norig_base_params: BaseParams\none_node_params: OneNodeParams orig_base_params\nraft_params: RaftParams orig_base_params\nrri: raft_refinement_interface\n\nGoal:\nforall (h cid : name) (st : electionsData * raft_data) (out : list raft_output) (st' : raft_data) (m : list (name * msg)), handleTimeout h (snd st) = (out, st', m) -> votedFor st' = Some cid -> votedFor (snd st) = Some cid /\\ currentTerm st' = currentTerm (snd st) /\\ type st' = type (snd st) /\\ votesWithLog (update_elections_data_timeout h st) = votesWithLog (fst st) \\/ cid = h /\\ currentTerm st' = S (currentTerm (snd st)) /\\ votesWithLog (update_elections_data_timeout h st) = (currentTerm st', cid, log st') :: votesWithLog (fst st)\n\nPremises:\nInductive nat : Set := O : nat | S : nat -> nat Arguments S _%nat_scope\nInductive list (A : Type) : Type := nil : list A | cons : A -> list A -> list A Arguments list _%type_scope Arguments nil {A}%type_scope Arguments cons {A}%type_scope a l%list_scope : rename\nRecord RaftParams (orig_base_params : BaseParams) : Type := Build_RaftParams { N : nat; input_eq_dec : forall x y : input, {x = y} + {x <> y}; output_eq_dec : forall x y : output, {x = y} + {x <> y}; clientId : Type; clientId_eq_dec : forall x y : clientId, {x = y} + {x <> y} } Arguments Build_RaftParams _ _%nat_scope (_ _)%function_scope [clientId]%type_scope _%function_scope\nNotation currentTerm := (RaftState.currentTerm term name entry logIndex serverType data clientId output)\nraft_data = fun (orig_base_params : BaseParams) (raft_params : RaftParams orig_base_params) => RaftState.raft_data term name entry logIndex serverType data clientId output : forall orig_base_params : BaseParams, RaftParams orig_base_params -> Type Arguments raft_data {orig_base_params raft_params}\nRecord electionsData (orig_base_params : BaseParams) (raft_params : RaftParams orig_base_params) : Type := mkElectionsData { votes : list (term * name); votesWithLog : list (term * name * list entry); cronies : term -> list name; leaderLogs : list (term * list entry); allEntries : list (term * entry) } Arguments electionsData {orig_base_params raft_params} Arguments mkElectionsData {orig_base_params raft_params} (_ _)%list_scope _%function_scope (_ _)%list_scope\nname = fun (orig_base_params : BaseParams) (raft_params : RaftParams orig_base_params) => fin N : forall orig_base_params : BaseParams, RaftParams orig_base_params -> Type Arguments name {orig_base_params raft_params}\nNotation votedFor := (RaftState.votedFor term name entry logIndex serverType data clientId output)\nupdate_elections_data_timeout = fun (orig_base_params : BaseParams) (raft_params : RaftParams orig_base_params) (me : name) (st : electionsData * raft_data) => let '(_, st', _) := handleTimeout me (snd st) in match votedFor st' with | Some cid => if serverType_eq_dec (type (snd st)) Leader then fst st else {| votes := (currentTerm st', cid) :: votes (fst st); votesWithLog := (currentTerm st', cid, log st') :: votesWithLog (fst st); cronies := if serverType_eq_dec (type st') Candidate then fun tm\nInductive msg (orig_base_params : BaseParams) (raft_params : RaftParams orig_base_params) : Type := RequestVote : term -> name -> logIndex -> term -> msg | RequestVoteReply : term -> bool -> msg | AppendEntries : term -> name -> logIndex -> term -> list entry -> logIndex -> msg | AppendEntriesReply : term -> list entry -> bool -> msg Arguments msg {orig_base_params raft_params} Arguments RequestVote {orig_base_params raft_params} Arguments RequestVoteReply {orig_base_params raft_params} _ _%bool_scope Arguments AppendEntries {orig_base_params raft_params} _ _ _ _ _%list_scope Arguments Append\nInductive option (A : Type) : Type := Some : A -> option A | None : option A Arguments option _%type_scope Arguments Some {A}%type_scope a : rename Arguments None {A}%type_scope\nRecord OneNodeParams (P : BaseParams) : Type := Build_OneNodeParams { init : data; handler : input -> data -> output * data } Arguments Build_OneNodeParams _ _ _%function_scope\nsnd = fun (A B : Type) (p : A * B) => let (_, y) := p in y : forall A B : Type, A * B -> B Arguments snd {A B}%type_scope\nNotation log := (RaftState.log term name entry logIndex serverType data clientId output)\nhandleTimeout = fun (orig_base_params : BaseParams) (raft_params : RaftParams orig_base_params) (me : name) (state : raft_data) => match type state with | Leader => ([], RaftState.set_raft_data_shouldSend term name entry logIndex serverType data clientId output state true, []) | _ => tryToBecomeLeader me state end : forall (orig_base_params : BaseParams) (raft_params : RaftParams orig_base_params), name -> raft_data -> list raft_output * raft_data * list (name * msg) Arguments handleTimeout {orig_base_params raft_params}\nvotesWithLog = fun (orig_base_params : BaseParams) (raft_params : RaftParams orig_base_params) (e : electionsData) => let (_, votesWithLog, _, _, _) := e in votesWithLog : forall (orig_base_params : BaseParams) (raft_params : RaftParams orig_base_params), electionsData -> list (term * name * list entry) Arguments votesWithLog {orig_base_params raft_params}\nfst = fun (A B : Type) (p : A * B) => let (x, _) := p in x : forall A B : Type, A * B -> A Arguments fst {A B}%type_scope\nNotation type := (RaftState.type term name entry logIndex serverType data clientId output)\nInductive raft_output (orig_base_params : BaseParams) (raft_params : RaftParams orig_base_params) : Type := NotLeader : clientId -> nat -> raft_output | ClientResponse : clientId -> nat -> output -> raft_output Arguments raft_output {orig_base_params raft_params} Arguments NotLeader {orig_base_params raft_params} _ _%nat_scope Arguments ClientResponse {orig_base_params raft_params} _ _%nat_scope\nupdate_elections_data_timeout_votesWithLog_votesReceived : forall (h : name) (st : electionsData * raft_data) (out : list raft_output) (st' : raft_data) (ps : list (name * msg)), handleTimeout h (snd st) = (out, st', ps) -> votesReceived st' = votesReceived (snd st) /\\ votesWithLog (update_elections_data_timeout h st) = votesWithLog (fst st) /\\ type st' = Leader \\/ votesReceived st' = [h] /\\ votesWithLog (update_elections_data_timeout h st) = (currentTerm st', h, log st') :: votesWithLog (fst st) /\\ currentTerm st' = S (currentTerm (snd st))\nvotes_update_elections_data_timeout_votedFor : forall (h : name) (st : electionsData * raft_data) (out : list raft_output) (st' : raft_data) (ps : list (name * msg)) (t' : term) (h' : name), handleTimeout h (snd st) = (out, st', ps) -> In (t', h') (votes (update_elections_data_timeout h st)) -> In (t', h') (votes (fst st)) \\/ t' = currentTerm st' /\\ t' = S (currentTerm (snd st)) /\\ votedFor st' = Some h'\nupdate_elections_data_client_request_log_allEntries : forall (h : name) (st : electionsData * raft_data) (client : clientId) (id : nat) (c : input) (out : list raft_output) (st' : raft_data) (ms : list (name * msg)), handleClientRequest h (snd st) client id c = (out, st', ms) -> allEntries (update_elections_data_client_request h st client id c) = allEntries (fst st) /\\ log st' = log (snd st) \\/ type (snd st) = Leader /\\ (exists e : entry, eIndex e = S (maxIndex (log (snd st))) /\\ eTerm e = currentTerm (snd st) /\\ eClient e = client /\\ eInput e = c /\\ eId e = id /\\ type (snd st...\nupdate_elections_data_timeout_votes_intro_new : forall (h : name) (st : electionsData * raft_data) (out : list raft_output) (st' : raft_data) (ps : list (name * msg)) (t' : term) (h' : name), handleTimeout h (snd st) = (out, st', ps) -> (forall (t : term) (h0 : name), t = currentTerm (snd st) -> votedFor (snd st) = Some h0 -> In (t, h0) (votes (fst st))) -> t' = currentTerm st' -> votedFor st' = Some h' -> In (t', h') (votes (update_elections_data_timeout h st))\nupdate_elections_data_client_request_allEntries : forall (h : name) (st : electionsData * raft_data) (client : clientId) (id : nat) (c : input) (out : list raft_output) (st' : raft_data) (ms : list (name * msg)), handleClientRequest h (snd st) client id c = (out, st', ms) -> allEntries (update_elections_data_client_request h st client id c) = allEntries (fst st) \\/ (exists e : entry, eIndex e = S (maxIndex (log (snd st))) /\\ eTerm e = currentTerm (snd st) /\\ eClient e = client /\\ eInput e = c /\\ eId e = id /\\ type (snd st) = Leader /\\ allEntries (update_elections_data_client_request h st client id c)...\nhandleTimeout_log_term_type : forall (h : name) (st : raft_data) (out : list raft_output) (st' : raft_data) (ps : list (name * msg)), handleTimeout h st = (out, st', ps) -> log st' = log st /\\ currentTerm st' = currentTerm st /\\ type st' = type st \\/ currentTerm st' = S (currentTerm st)\nhandleTimeout_type_strong : forall (h : name) (st : raft_data) (out : list raft_output) (st' : raft_data) (l : list (name * msg)), handleTimeout h st = (out, st', l) -> type st' = type st /\\ currentTerm st' = currentTerm st \\/ type st' = Candidate /\\ currentTerm st' = S (currentTerm st)\nupdate_elections_data_appendEntries_log_allEntries : forall (h : name) (st : electionsData * raft_data) (t : term) (n : name) (pli : logIndex) (plt : term) (es : list entry) (ci : logIndex) (st' : raft_data) (h' : name) (ps : msg), handleAppendEntries h (snd st) t n pli plt es ci = (st', ps) -> log st' = log (snd st) /\\ allEntries (update_elections_data_appendEntries h st t h' pli plt es ci) = allEntries (fst st) \\/ allEntries (update_elections_data_appendEntries h st t h' pli plt es ci) = map (fun e : entry => (t, e)) es ++ allEntries (fst st)...\nupdate_elections_data_timeout_cronies : forall (h : name) (st : electionsData * raft_data) (t : term), cronies (update_elections_data_timeout h st) t = cronies (fst st) t \\/ cronies (update_elections_data_timeout h st) t = [h] /\\ t = S (currentTerm (snd st))\nvotesWithLog_update_elections_data_timeout : forall (h : name) (st : electionsData * raft_data) (out : list raft_output) (st' : raft_data) (ps : list (name * msg)) (t' : term) (h' : name) (l' : list entry), handleTimeout h (snd st) = (out, st', ps) -> In (t', h', l') (votesWithLog (update_elections_data_timeout h st)) -> In (t', h', l') (votesWithLog (fst st)) \\/ t' = currentTerm st' /\\ l' = log st'\nvotes_update_elections_data_request_vote_intro : forall (h : name) (st : electionsData * RaftState.raft_data term name entry logIndex serverType data clientId output) (t : nat) (src : fin N) (lli llt : nat) (st' : raft_data) (m : msg) (h' : name), handleRequestVote h (snd st) t src lli llt = (st', m) -> votedFor st' = Some h' -> currentTerm (snd st) < currentTerm st' \\/ votedFor (snd st) = None -> In (currentTerm st', h') (votes (update_elections_data_requestVote h src t src lli llt st))\nupdate_elections_data_requestVote = fun (orig_base_params : BaseParams) (raft_params : RaftParams orig_base_params) (me _ : name) (t : nat) (candidateId : fin N) (lastLogIndex lastLogTerm : nat) (st : electionsData * RaftState.raft_data term name entry logIndex serverType data clientId output) => let (st', _) := handleRequestVote me (snd st) t candidateId lastLogIndex lastLogTerm in let (o, o0) := (votedFor (snd st), votedFor st') in match o with | Some cid => match o0 with | Some cid' => if (currentTerm (snd st) =? currentTerm st') && (if name_eq_dec cid cid' then true else false) then fst st else {| votes := (currentTerm...\nvotes_update_elections_data_timeout : forall (h : name) (st : electionsData * raft_data) (out : list raft_output) (st' : raft_data) (ps : list (name * msg)) (t' : term) (h' : name), handleTimeout h (snd st) = (out, st', ps) -> In (t', h') (votes (update_elections_data_timeout h st)) -> In (t', h') (votes (fst st)) \\/ t' = currentTerm st'\nleaderLogs_update_elections_data_RVR : forall (h src : name) (t1 : nat) (v : bool) (st : electionsData * RaftState.raft_data term name entry logIndex serverType data clientId output) (t2 : term) (ll : list entry) (st' : raft_data), handleRequestVoteReply h (snd st) src t1 v = st' -> In (t2, ll) (leaderLogs (update_elections_data_requestVoteReply h src t1 v st)) -> In (t2, ll) (leaderLogs (fst st)) \\/ type st' = Leader /\\ type (snd st) = Candidate /\\ t2 = currentTerm st' /\\ ll = log st'\nupdate_elections_data_appendEntries_allEntries_detailed : forall (h : name) (st : electionsData * raft_data) (t : term) (h' : name) (pli : logIndex) (plt : term) (es : list entry) (ci : logIndex) (st' : raft_data) (m : msg) (te : term) (e : entry), handleAppendEntries h (snd st) t h' pli plt es ci = (st', m) -> In (te, e) (allEntries (update_elections_data_appendEntries h st t h' pli plt es ci)) -> In (te, e) (allEntries (fst st)) \\/ In e (log st') \\/ In e es /\\ haveNewEntries (snd st) es = false /\\ log st' = log (snd st)\ndoGenericServer_log_type_term_votesReceived : forall (h : name) (st : raft_data) (os : list raft_output) (st' : raft_data) (ps : list (name * msg)), doGenericServer h st = (os, st', ps) -> log st' = log st /\\ type st' = type st /\\ currentTerm st' = currentTerm st /\\ votesReceived st' = votesReceived st /\\ votedFor st' = votedFor st\nupdate_elections_data_clientRequest_allEntries_new : forall (h : name) (st : electionsData * raft_data) (client : clientId) (id : nat) (c : input) (e : entry), In e (map snd (allEntries (update_elections_data_client_request h st client id c))) -> In e (map snd (allEntries (fst st))) \\/ eIndex e = S (maxIndex (log (snd st))) /\\ eTerm e = currentTerm (snd st) /\\ type (snd st) = Leader\nhandleTimeout_type : forall (h : name) (st : raft_data) (out : list raft_output) (st' : raft_data) (l : list (name * msg)), handleTimeout h st = (out, st', l) -> type st' = type st /\\ currentTerm st' = currentTerm st \\/ type st' = Candidate\nhandleClientRequest_term_votedFor : forall (h : name) (st : raft_data) (client : clientId) (id : nat) (c : input) (os : list raft_output) (st' : raft_data) (m : list (name * msg)), handleClientRequest h st client id c = (os, st', m) -> type st' = type st /\\ currentTerm st' = currentTerm st /\\ votedFor st' = votedFor st\nvotes_update_elections_data_request_vote : forall (h : name) (st : electionsData * RaftState.raft_data term name entry logIndex serverType data clientId output) (t : nat) (src : fin N) (lli llt : nat) (st' : raft_data) (m : msg) (t' : term) (h' : name), handleRequestVote h (snd st) t src lli llt = (st', m) -> In (t', h') (votes (update_elections_data_requestVote h src t src lli llt st)) -> In (t', h') (votes (fst st)) \\/ t' = currentTerm st' /\\ votedFor st' = Some h'\nupdate_elections_data_client_request_cronies : forall (h : name) (st : electionsData * raft_data) (client : clientId) (id : nat) (c : input) (out : list raft_output) (st' : raft_data) (ms : list (name * msg)), handleClientRequest h (snd st) client id c = (out, st', ms) -> cronies (update_elections_data_client_request h st client id c) = cronies (fst st)\nupdate_elections_data_requestVoteReply = fun (orig_base_params : BaseParams) (raft_params : RaftParams orig_base_params) (me src : name) (t : nat) (voteGranted : bool) (st : electionsData * RaftState.raft_data term name entry logIndex serverType data clientId output) => let st' := handleRequestVoteReply me (snd st) src t voteGranted in match type st' with | Follower => fst st | Candidate => {| votes := votes (fst st); votesWithLog := votesWithLog (fst st); cronies := fun tm : term => if Nat.eq_dec tm (currentTerm st') then votesReceived st' else cronies (fst st) tm; leaderLogs := leaderLogs (fst st); allEntries := allEntries (fst st) |} | Leader => {| votes :=...\nhandleTimeout_same_term_votedFor_preserved : forall (h : name) (st : raft_data) (out : list raft_output) (st' : raft_data) (ps : list (name * msg)), handleTimeout h st = (out, st', ps) -> currentTerm st' = currentTerm st -> votedFor st' = votedFor st\nhandleAppendEntries_log_detailed : forall (h : name) (st : raft_data) (t : term) (n : name) (pli : logIndex) (plt : term) (es : list entry) (ci : logIndex) (st' : raft_data) (ps : msg), handleAppendEntries h st t n pli plt es ci = (st', ps) -> commitIndex st' = commitIndex st /\\ log st' = log st \\/ leaderId st' <> None /\\ currentTerm st' = t /\\ commitIndex st' = Init.Nat.max (commitIndex st) (Init.Nat.min ci (maxIndex es)) /\\ es <> [] /\\ pli = 0 /\\ t >= currentTerm st /\\ log st' = es /\\ (findAtIndex (log st) (maxIndex es) = None \\/ (...\nupdate_elections_data_client_request = fun (orig_base_params : BaseParams) (raft_params : RaftParams orig_base_params) (me : name) (st : electionsData * raft_data) (client : clientId) (id : nat) (c : input) => let '(_, st', _) := handleClientRequest me (snd st) client id c in if length (log (snd st)) <? length (log st') then match log st' with | [] => fst st | e :: _ => {| votes := votes (fst st); votesWithLog := votesWithLog (fst st); cronies := cronies (fst st); leaderLogs := leaderLogs (fst st); allEntries := (currentTerm st', e) :: allEntries (fst st) |} end else fst st : forall (orig_base_params : BaseParams) (raft...\nhandleClientRequest_log : forall (h : name) (st : raft_data) (client : clientId) (id : nat) (c : input) (out : list raft_output) (st' : raft_data) (ps : list (name * msg)), handleClientRequest h st client id c = (out, st', ps) -> ps = [] /\\ (log st' = log st \\/ (exists e : entry, log st' = e :: log st /\\ eIndex e = S (maxIndex (log st)) /\\ eTerm e = currentTerm st /\\ eClient e = client /\\ eInput e = c /\\ eId e = id /\\ type st = Leader))\ndoLeader_term_votedFor : forall (st : raft_data) (h : name) (os : list raft_output) (st' : raft_data) (ms : list (name * msg)), doLeader st h = (os, st', ms) -> currentTerm st' = currentTerm st /\\ votedFor st' = votedFor st\nvotesWithLog_update_elections_data_request_vote : forall (h : name) (st : electionsData * RaftState.raft_data term name entry logIndex serverType data clientId output) (t : nat) (src : fin N) (lli llt : nat) (st' : raft_data) (m : msg) (t' : term) (h' : name) (l' : list entry), handleRequestVote h (snd st) t src lli llt = (st', m) -> In (t', h', l') (votesWithLog (update_elections_data_requestVote h src t src lli llt st)) -> In (t', h', l') (votesWithLog (fst st)) \\/ t' = currentTerm st' /\\ l' = log st'\ndoLeader_messages : forall (st : raft_data) (h : name) (os : list raft_output) (st' : raft_data) (ms : list (name * msg)) (m : name * msg) (t : term) (n : name) (pli : logIndex) (plt : term) (es : list entry) (ci : logIndex), doLeader st h = (os, st', ms) -> In m ms -> snd m = AppendEntries t n pli plt es ci -> t = currentTerm st /\\ log st' = log st /\\ type st = Leader /\\ (plt = 0 \\/ (exists e : entry, findAtIndex (log st) pli = Some e /\\ eTerm e = plt))\nhandleRequestVoteReply_spec' : forall (h : name) (st : RaftState.raft_data term name entry logIndex serverType data clientId output) (h' : name) (t : nat) (r : bool) (st' : raft_data), st' = handleRequestVoteReply h st h' t r -> log st' = log st /\\ (forall v : name, In v (votesReceived st) -> In v (votesReceived st')) /\\ (type st <> Leader /\\ type st' = Leader -> (type st = Candidate /\\ wonElection (dedup name_eq_dec (votesReceived st')) = true) /\\ r = true /\\ currentTerm st' = currentTerm st /\\ currentTerm st = t /\\ votesReceived st' = h' :: votesReceived st)"}, {"role": "assistant", "content": "```coq\nProof.\n  intros h cid st out st' m H1 H2.\n  inversion H1; subst.\n  destruct (type st) eqn:E; try discriminate.\n  destruct (type st') eqn:E'; try discriminate.\n  inversion H2; subst.\n  constructor; intuition.\n  left; split; try reflexivity.\n  constructor; intuition.\n  right; split; try reflexivity.\n  constructor; intuition.\n  inversion H2; subst.\n  constructor; intuition.\n  right; split; try reflexivity.\n  constructor; intuition.\n  inversion H2; subst.\n  constructor; intuition.\n  right; split; try reflexivity.\n  constructor; intuition.\n  inversion H2; subst.\n  constructor; intuition.\n  right; split; try reflexivity.\n  constructor; intuition.\n  inversion H2; subst.\n  constructor; intuition.\n  right; split; try reflexivity.\n  constructor; intuition.\n  inversion H2; subst.\n  constructor; intuition.\n  right; split; try reflexivity.\n  constructor; intuition.\n  inversion H2; subst.\n  constructor; intuition.\n  right; split; try reflexivity.\n  constructor; intuition.\n  inversion H2; subst.\n  constructor; intuition.\n  right; split; try reflexivity.\n  constructor; intuition.\n  inversion H2; subst.\n  constructor; intuition.\n  right; split; try reflexivity.\n  constructor; intuition.\n  inversion H2; subst.\n  constructor; intuition.\n  right; split; try reflexivity.\n  constructor; intuition.\n  inversion H2; subst.\n  constructor; intuition.\n  right; split; try reflexivity.\n  constructor; intuition.\n  inversion H2; subst.\n  constructor; intuition.\n  right; split; try reflexivity.\n  constructor; intuition.\n  inversion H2; subst.\n  constructor; intuition.\n  right; split; try reflexivity.\n  constructor; intuition.\n  inversion H2; subst.\n  constructor; intuition.\n  right; split; try reflexivity.\n  constructor; intuition.\n  inversion H2; subst.\n  constructor; intuition.\n  right; split; try reflexivity.\n  constructor; intuition.\n  inversion H2; subst.\n  constructor; intuition.\n  right; split; try reflexivity.\n  constructor; intuition.\n  inversion H2; subst.\n  constructor; intuition.\n  right; split; try reflexivity.\n  constructor; intuition.\n  inversion H2; subst.\n  constructor; intuition.\n  right; split; try reflexivity.\n  constructor; intuition.\n  inversion H2; subst.\n  constructor; intuition.\n  right; split; try reflexivity.\n  constructor; intuition.\n  inversion H2; subst.\n  constructor; intuition.\n  right; split; try reflexivity.\n  constructor; intuition.\n  inversion H2; subst.\n  constructor; intuition.\n  right; split; try reflexivity.\n  constructor; intuition.\n  inversion H2; subst.\n  constructor; intuition.\n  right; split; try reflexivity.\n  constructor; intuition.\n  inversion H2; subst.\n  constructor; intuition.\n  right; split; try reflexivity.\n  constructor; intuition.\n  inversion H2; subst.\n  constructor; intuition.\n  right; split; try reflexivity.\n  constructor; intuition.\n  inversion H2; subst.\n  constructor; intuition.\n  right; split; try reflexivity.\n  constructor; intuition.\n  inversion H2; subst.\n  constructor; intuition.\n  right; split; try reflexivity.\n  constructor; intuition.\n  inversion H2; subst.\n  constructor; intuition.\n  right; split; try reflexivity.\n  constructor; intuition.\n  inversion H2; subst.\n  constructor; intuition.\n  right; split; try reflexivity.\n  constructor; intuition.\n  inversion H2; subst.\n  constructor; intuition.\n  right; split; try reflexivity.\n  constructor; intuition.\n  inversion H2; subst.\n  constructor; intuition.\n  right; split; try reflexivity.\n  constructor; intuition.\n  inversion H2; subst.\n  constructor; intuition.\n  right; split; try reflexivity.\n  constructor; intuition.\n  inversion H2; subst.\n  constructor; intuition.\n  right; split; try reflexivity.\n  constructor; intuition.\n  inversion H2; subst.\n  constructor; intuition.\n  right; split; try reflexivity.\n  constructor; intuition.\n  inversion H2; subst.\n  constructor; intuition.\n  right; split; try reflexivity.\n  constructor; intuition.\n  inversion H2; subst.\n  constructor; intuition.\n  right; split; try reflexivity.\n  constructor; intuition.\n  inversion H2; subst.\n  constructor; intuition.\n  right; split; try reflexivity.\n  constructor; intuition.\n  inversion H2; subst.\n  constructor; intuition.\n  right; split; try reflexivity.\n  constructor; intuition.\n  inversion H2; subst.\n  constructor"}], "original": "intros h cid st out st' m H1 H2. inversion H1; subst. destruct (type st) eqn:E; try discriminate. destruct (type st') eqn:E'; try discriminate. inversion H2; subst. constructor; intuition. left; split; try reflexivity. constructor; intuition. right; split; try reflexivity. constructor; intuition. inversion H2; subst. constructor; intuition. right; split; try reflexivity. constructor; intuition. inversion H2; subst. constructor; intuition. right; split; try reflexivity. constructor; intuition. inversion H2; subst. constructor; intuition. right; split; try reflexivity. constructor; intuition. inversion H2; subst. constructor; intuition. right; split; try reflexivity. constructor; intuition. inversion H2; subst. constructor; intuition. right; split; try reflexivity. constructor; intuition. inversion H2; subst. constructor; intuition. right; split; try reflexivity. constructor; intuition. inversion H2; subst. constructor; intuition. right; split; try reflexivity. constructor; intuition. inversion H2; subst. constructor; intuition. right; split; try reflexivity. constructor; intuition. inversion H2; subst. constructor; intuition. right; split; try reflexivity. constructor; intuition. inversion H2; subst. constructor; intuition. right; split; try reflexivity. constructor; intuition. inversion H2; subst. constructor; intuition. right; split; try reflexivity. constructor; intuition. inversion H2; subst. constructor; intuition. right; split; try reflexivity. constructor; intuition. inversion H2; subst. constructor; intuition. right; split; try reflexivity. constructor; intuition. inversion H2; subst. constructor; intuition. right; split; try reflexivity. constructor; intuition. inversion H2; subst. constructor; intuition. right; split; try reflexivity. constructor; intuition. inversion H2; subst. constructor; intuition. right; split; try reflexivity. constructor; intuition. inversion H2; subst. constructor; intuition. right; split; try reflexivity. constructor; intuition. inversion H2; subst. constructor; intuition. right; split; try reflexivity. constructor; intuition. inversion H2; subst. constructor; intuition. right; split; try reflexivity. constructor; intuition. inversion H2; subst. constructor; intuition. right; split; try reflexivity. constructor; intuition. inversion H2; subst. constructor; intuition. right; split; try reflexivity. constructor; intuition. inversion H2; subst. constructor; intuition. right; split; try reflexivity. constructor; intuition. inversion H2; subst. constructor; intuition. right; split; try reflexivity. constructor; intuition. inversion H2; subst. constructor; intuition. right; split; try reflexivity. constructor; intuition. inversion H2; subst. constructor; intuition. right; split; try reflexivity. constructor; intuition. inversion H2; subst. constructor; intuition. right; split; try reflexivity. constructor; intuition. inversion H2; subst. constructor; intuition. right; split; try reflexivity. constructor; intuition. inversion H2; subst. constructor; intuition. right; split; try reflexivity. constructor; intuition. inversion H2; subst. constructor; intuition. right; split; try reflexivity. constructor; intuition. inversion H2; subst. constructor; intuition. right; split; try reflexivity. constructor; intuition. inversion H2; subst. constructor; intuition. right; split; try reflexivity. constructor; intuition. inversion H2; subst. constructor; intuition. right; split; try reflexivity. constructor; intuition. inversion H2; subst. constructor; intuition. right; split; try reflexivity. constructor; intuition. inversion H2; subst. constructor; intuition. right; split; try reflexivity. constructor; intuition. inversion H2; subst. constructor; intuition. right; split; try reflexivity. constructor; intuition. inversion H2; subst. constructor; intuition. right; split; try reflexivity. constructor; intuition. inversion H2; subst.", "succ": false}]