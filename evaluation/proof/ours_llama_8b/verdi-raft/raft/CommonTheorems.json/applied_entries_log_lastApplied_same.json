[{"history": {"proof": "shelve.", "repairs": [""], "exceptions": []}, "chat": [{"role": "user", "content": "I will give you a Coq proof state, including both hypotheses and a specific goal and your need to prove it. Your response should be a singular code block of Coq proof starting with \"```coq\n\", ending with \"Qed.```\", without any additional explanation or commentary. Follow to these guidelines:\nIntroduce variables using unique names to avoid any conflicts.\nKeep each command distinct and separated, avoid concatenations like ';' or '[cmd|cmd]'.\nOrganize your proof with bullets like '-', '+', and '*' instead of braces ({, }). Shift to their double symbols like '--' and '++', when necessary.\nEffectively use given premises, follow the syntax and structure demonstrated in the examples provided.\n\nExample 1:\n\nHypotheses:\nn, m: nat\nIHn: m + n = n + m\n\nGoal:\nm + S n = S n + m\n\nProof:\n```coq\nsimpl. rewrite <- IHn. auto.\nQed.```\n\nExample 2:\nHypotheses:\n\nGoal:\nforall n m : nat, m + n = n + m\n\n```coq\nintros n m. induction n.\n- simpl. auto.\n- simpl. rewrite <- IHn. auto.\nQed.```\n\nSolve This Proof State:\n\nHypotheses:\norig_base_params: BaseParams\none_node_params: OneNodeParams orig_base_params\nraft_params: RaftParams orig_base_params\n\nGoal:\nforall sigma sigma' : name -> RaftState.raft_data term name entry logIndex serverType data clientId output, (forall h : name, log (sigma' h) = log (sigma h)) -> (forall h : name, lastApplied (sigma' h) = lastApplied (sigma h)) -> applied_entries sigma' = applied_entries sigma\n\nPremises:\napplied_entries = fun (orig_base_params : BaseParams) (raft_params : RaftParams orig_base_params) (sigma : name -> raft_data) => match argmax (fun h : name => lastApplied (sigma h)) (all_fin N) with | Some h => rev (removeAfterIndex (log (sigma h)) (lastApplied (sigma h))) | None => [] end : forall (orig_base_params : BaseParams) (raft_params : RaftParams orig_base_params), (name -> raft_data) -> list entry Arguments applied_entries {orig_base_params raft_params} _%function_scope\nModule RaftState := Struct Record raft_data (term name entry logIndex serverType stateMachineData clientId output : Type) : Type := mkRaft_data { currentTerm : term; votedFor : option name; leaderId : option name; log : list entry; commitIndex : logIndex; lastApplied : logIndex; stateMachine : stateMachineData; nextIndex : list (name * logIndex); matchIndex : list (name * logIndex); shouldSend : bool; votesReceived : list name; type : serverType; clientCache : list (clientId * (nat * output)); electoralVictories : list (term * list name * list entry) } Definition currentTerm : forall term name entry logIndex serverType state\nRecord OneNodeParams (P : BaseParams) : Type := Build_OneNodeParams { init : data; handler : input -> data -> output * data } Arguments Build_OneNodeParams _ _ _%function_scope\nclientId = fun (orig_base_params : BaseParams) (RaftParams0 : RaftParams orig_base_params) => let (_, _, _, clientId, _) := RaftParams0 in clientId : forall orig_base_params : BaseParams, RaftParams orig_base_params -> Type Arguments clientId {orig_base_params RaftParams}\nraft_data = fun (orig_base_params : BaseParams) (raft_params : RaftParams orig_base_params) => RaftState.raft_data term name entry logIndex serverType data clientId output : forall orig_base_params : BaseParams, RaftParams orig_base_params -> Type Arguments raft_data {orig_base_params raft_params}\nNotation lastApplied := (RaftState.lastApplied term name entry logIndex serverType data clientId output)\nNotation log := (RaftState.log term name entry logIndex serverType data clientId output)\ndata = fun BaseParams0 : BaseParams => let (data, _, _) := BaseParams0 in data : BaseParams -> Type Arguments data {BaseParams}\nlogIndex = nat : Set\nname = fun (orig_base_params : BaseParams) (raft_params : RaftParams orig_base_params) => fin N : forall orig_base_params : BaseParams, RaftParams orig_base_params -> Type Arguments name {orig_base_params raft_params}\noutput = fun BaseParams0 : BaseParams => let (_, _, output) := BaseParams0 in output : BaseParams -> Type Arguments output {BaseParams}\nRecord entry (orig_base_params : BaseParams) (raft_params : RaftParams orig_base_params) : Type := mkEntry { eAt : name; eClient : clientId; eId : nat; eIndex : logIndex; eTerm : term; eInput : input } Arguments entry {orig_base_params raft_params} Arguments mkEntry {orig_base_params raft_params} _ _ _%nat_scope\nRecord RaftParams (orig_base_params : BaseParams) : Type := Build_RaftParams { N : nat; input_eq_dec : forall x y : input, {x = y} + {x <> y}; output_eq_dec : forall x y : output, {x = y} + {x <> y}; clientId : Type; clientId_eq_dec : forall x y : clientId, {x = y} + {x <> y} } Arguments Build_RaftParams _ _%nat_scope (_ _)%function_scope [clientId]%type_scope _%function_scope\nterm = nat : Set\nInductive serverType : Set := Follower : serverType | Candidate : serverType | Leader : serverType\napplied_entries_safe_update : forall (sigma : name -> RaftState.raft_data term name entry logIndex serverType data clientId output) (h : name) (st : RaftState.raft_data term name entry logIndex serverType data clientId output), lastApplied st = lastApplied (sigma h) -> removeAfterIndex (log st) (lastApplied (sigma h)) = removeAfterIndex (log (sigma h)) (lastApplied (sigma h)) -> applied_entries (update name_eq_dec sigma h st) = applied_entries sigma\napplied_entries_update : forall (sigma : name -> RaftState.raft_data term name entry logIndex serverType data clientId output) (h : name) (st : RaftState.raft_data term name entry logIndex serverType data clientId output), lastApplied st >= lastApplied (sigma h) -> applied_entries (update name_eq_dec sigma h st) = applied_entries sigma /\\ (exists h' : name, argmax (fun h0 : name => lastApplied (sigma h0)) (all_fin N) = Some h' /\\ lastApplied (sigma h') >= lastApplied st) \\/ argmax (fun h' : name => lastApplied (update name_eq_dec sigma h st h')) (all_fin N) = Some h /\\ applied_entries (update name_eq_dec sigma h st) = rev (removeAfterIndex (log st) (lastApplied st))\ncommit_recorded = fun (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params) (net : network) (h : Net.name) (e : entry) => In e (log (nwState net h)) /\\ (eIndex e <= lastApplied (nwState net h) \\/ eIndex e <= commitIndex (nwState net h)) : forall (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params), network -> Net.name -> entry -> Prop Arguments commit_recorded {orig_base_params one_node_params raft_params}\nraft_intermediate_reachable_sind : forall P : network -> SProp, P step_async_init -> (forall (failed : list Net.name) (net : network) (failed' : list Net.name) (net' : network) (out : list (Net.name * (input + list output))), raft_intermediate_reachable net -> P net -> step_failure (failed, net) (failed', net') out -> P net') ->...-> P n\nraft_intermediate_reachable_ind : forall P : network -> Prop, P step_async_init -> (forall (failed : list Net.name) (net : network) (failed' : list Net.name) (net' : network) (out : list (Net.name * (input + list output))), raft_intermediate_reachable net -> P net -> step_failure (failed, net) (failed', net') out -> P net') ->...-> P n\nraft_net_invariant_reboot = fun (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params) (P : network -> Prop) => forall (net net' : network) (d : RaftState.raft_data term name entry logIndex serverType data clientId output) (h : Net.name) (d' : raft_data), reboot d = d' -> P net -> raft_intermediate_reachable net -> nwState net h = d -> (forall h' : Net.name, nwState net' h' = update name_eq_dec (nwState net) h d' h') -> nwPackets net = nwPackets net' ->...-> Prop Arguments raft_net_invariant_reboot {orig_base_params one_node_params raft_params} _%function_scope\nraft_net_invariant_client_request = fun (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params) (P : network -> Prop) => forall (h : name) (net : network) (st' : name -> data) (ps' : list packet) (out : list raft_output) (d : raft_data) (l : list (name * msg)) (client : clientId) (id : nat) (c : input), handleClientRequest h (nwState net h) client id c = (out, d, l) -> P net -> raft_intermediate_reachable net -> (forall h' : name, st' h' = update name_eq_dec (nwState net) h d h') ->...-> Prop Arguments raft_net_invariant_client_request {orig_base_params one_node_params raft_params} _%function_scope\ngetNextIndex = fun (orig_base_params : BaseParams) (raft_params : RaftParams orig_base_params) (state : RaftState.raft_data term name entry logIndex serverType data clientId output) (h : name) => assoc_default name_eq_dec (nextIndex state) h (maxIndex (log state)) : forall (orig_base_params : BaseParams) (raft_params : RaftParams orig_base_params), RaftState.raft_data term name entry logIndex serverType data clientId output -> name -> logIndex Arguments getNextIndex {orig_base_params raft_params}\nInductive raft_intermediate_reachable (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params) : network -> Prop := RIR_init : raft_intermediate_reachable step_async_init | RIR_step_failure : forall (failed : list Net.name) (net : network) (failed' : list Net.name) (net' : network) (out : list (Net.name * (input + list output))), raft_intermediate_reachable net -> step_failure (failed, net) (failed', net') out -> raft_intermediate_reachable net' | RIR_handleInput : forall (net : network) (h : name) (inp : raft_input) (out : list raft_output) (d : raft_data) (l : list (name * msg)) (ps' : list packet) (st' : name -> data), raft_intermediate_reachable...\nadvanceCurrentTerm_same_log : forall (st : RaftState.raft_data term name entry logIndex serverType data clientId output) (t : nat), log (advanceCurrentTerm st t) = log st\nadvanceCurrentTerm_same_lastApplied : forall (st : RaftState.raft_data term name entry logIndex serverType data clientId output) (t : nat), lastApplied (advanceCurrentTerm st t) = lastApplied st\napplyEntry = fun (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params) (st : RaftState.raft_data term name entry logIndex serverType data clientId output) (e : entry) => let (out, d) := handler (eInput e) (stateMachine st) in ([out], {[{[st with clientCache := assoc_set clientId_eq_dec (clientCache st) (eClient e) (eId e, out)]} with stateMachine := d]}) : forall orig_base_params : BaseParams, OneNodeParams orig_base_params -> forall raft_params : RaftParams orig_base_params, RaftState.raft_data term name entry logIndex serverType data clientId output ->...-> list output * RaftState.raft_data term name entry logIndex serverType data clientId output Arguments applyEntry {orig_base_params one_node_params raft_params}\nraft_net_invariant_append_entries_reply = fun (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params) (P : network -> Prop) => forall (xs : list packet) (p : packet) (ys : list packet) (net : network) (st' : name -> data) (ps' : list packet) (d : raft_data) (m : list (name * msg)) (t : nat) (es : list entry) (res : bool), handleAppendEntriesReply (pDst p) (nwState net (pDst p)) (pSrc p) t es res = (d, m) -> pBody p = AppendEntriesReply t es res -> P net -> raft_intermediate_reachable net ->...-> Prop Arguments raft_net_invariant_append_entries_reply {orig_base_params one_node_params raft_params} _%function_scope\nhandleRequestVote_same_log : forall (n : name) (st : RaftState.raft_data term name entry logIndex serverType data clientId output) (t : nat) (c : fin N) (li lt : nat) (st' : raft_data) (ms : msg), handleRequestVote n st t c li lt = (st', ms) -> log st' = log st\nhandleRequestVote_same_lastApplied : forall (n : name) (st : RaftState.raft_data term name entry logIndex serverType data clientId output) (t : nat) (c : fin N) (li lt : nat) (st' : raft_data) (ms : msg), handleRequestVote n st t c li lt = (st', ms) -> lastApplied st' = lastApplied st\ncacheApplyEntry = fun (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params) (st : RaftState.raft_data term name entry logIndex serverType data clientId output) (e : entry) => match getLastId st (eClient e) with | Some (id, o) => if eId e <? id then ([], st) else if eId e =? id then ([o], st) else applyEntry st e | None => applyEntry st e end : forall orig_base_params : BaseParams, OneNodeParams orig_base_params -> forall raft_params : RaftParams orig_base_params, RaftState.raft_data term name entry logIndex serverType data clientId output -> entry -> list output * RaftState.raft_data term name entry logIndex serverType data clientId output Arguments cacheApplyEntry {orig_base_params one_node_params raft_params}\nraft_net_invariant_append_entries = fun (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params) (P : network -> Prop) => forall (xs : list packet) (p : packet) (ys : list packet) (net : network) (st' : name -> data) (ps' : list packet) (d : raft_data) (m : msg) (t : term) (n : name) (pli : logIndex) (plt : term) (es : list entry) (ci : logIndex), handleAppendEntries (pDst p) (nwState net (pDst p)) t n pli plt es ci = (d, m) -> pBody p = AppendEntries t n pli plt es ci ->...-> Prop Arguments raft_net_invariant_append_entries {orig_base_params one_node_params raft_params} _%function_scope\nhandleAppendEntriesReply_same_lastApplied : forall (n : name) (st : RaftState.raft_data term name entry logIndex serverType data clientId output) (src : name) (t : nat) (es : list entry) (b : bool) (st' : raft_data) (l : list (name * msg)), handleAppendEntriesReply n st src t es b = (st', l) -> lastApplied st' = lastApplied st\nhandleAppendEntriesReply_same_log : forall (n : name) (st : RaftState.raft_data term name entry logIndex serverType data clientId output) (src : name) (t : nat) (es : list entry) (b : bool) (st' : raft_data) (l : list (name * msg)), handleAppendEntriesReply n st src t es b = (st', l) -> log st' = log st\nexecute_log = fun (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params) (log : list entry) => execute_log' log init [] : forall orig_base_params : BaseParams, OneNodeParams orig_base_params -> forall raft_params : RaftParams orig_base_params, list entry -> list (input * output) * data Arguments execute_log {orig_base_params one_node_params raft_params} _%list_scope\nreboot_idem : forall d : RaftState.raft_data term name entry logIndex serverType data clientId output, reboot (reboot d) = reboot d\ndoGenericServer = fun (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params) (h : name) (state : raft_data) => let (out, state0) := applyEntries h state (rev (filter (fun x : entry => (lastApplied state <? eIndex x) && (eIndex x <=? commitIndex state)) (findGtIndex (log state) (lastApplied state)))) in (out, {[state0 with lastApplied := if lastApplied state0 <? commitIndex state0 then commitIndex state0 else lastApplied state0]}, []) : forall orig_base_params : BaseParams, OneNodeParams orig_base_params -> forall raft_params : RaftParams orig_base_params, name -> raft_data -> list raft_output * raft_data * list (name * msg) Arguments doGenericServer {orig_base_params one_node_params raft_params}\nhandleRequestVoteReply_same_lastApplied : forall (n : name) (st : RaftState.raft_data term name entry logIndex serverType data clientId output) (src : name) (t : nat) (v : bool), lastApplied (handleRequestVoteReply n st src t v) = lastApplied st\nhandleRequestVoteReply_same_log : forall (n : name) (st : RaftState.raft_data term name entry logIndex serverType data clientId output) (src : name) (t : nat) (v : bool), log (handleRequestVoteReply n st src t v) = log st\ngetLastId = fun (orig_base_params : BaseParams) (raft_params : RaftParams orig_base_params) (state : RaftState.raft_data term name entry logIndex serverType data clientId output) (client : clientId) => assoc clientId_eq_dec (clientCache state) client : forall (orig_base_params : BaseParams) (raft_params : RaftParams orig_base_params), RaftState.raft_data term name entry logIndex serverType data clientId output -> clientId -> option (nat * output) Arguments getLastId {orig_base_params raft_params}\nhandleTimeout_lastApplied : forall (h : name) (st : raft_data) (out : list raft_output) (st' : raft_data) (ps : list (name * msg)), handleTimeout h st = (out, st', ps) -> lastApplied st' = lastApplied st\nupdate_diff : forall (A B : Type) (A_eq_dec : forall x y : A, {x = y} + {x <> y}) (sigma : A -> B) (x : A) (v : B) (y : A), x <> y -> update A_eq_dec sigma x v y = sigma y\nupdate_eq : forall (A B : Type) (A_eq_dec : forall x y : A, {x = y} + {x <> y}) (sigma : A -> B) (x y : A) (v : B), x = y -> update A_eq_dec sigma x v y = v\nupdate : (forall x y : ?A, {x = y} + {x <> y}) -> (?A -> ?B) -> ?A -> ?B -> ?A -> ?B where ?A : [orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params |- Type] ?B : [orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params |- Type]\nadvanceCurrentTerm = fun (orig_base_params : BaseParams) (raft_params : RaftParams orig_base_params) (state : RaftState.raft_data term name entry logIndex serverType data clientId output) (newTerm : nat) => if currentTerm state <? newTerm then {[{[{[{[state with currentTerm := newTerm]} with votedFor := None]} with type := Follower]} with leaderId := None]} else state : forall (orig_base_params : BaseParams) (raft_params : RaftParams orig_base_params), RaftState.raft_data term name entry logIndex serverType data clientId output -> nat -> RaftState.raft_data term name entry logIndex serverType data clientId output Arguments advanceCurrentTerm {orig_base_params raft_params} _ _%nat_scope"}, {"role": "assistant", "content": "```coq\n```"}], "original": "", "succ": false}]