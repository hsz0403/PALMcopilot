[{"history": {"proof": "shelve.", "repairs": [""], "exceptions": []}, "chat": [{"role": "user", "content": "I will give you a Coq proof state, including both hypotheses and a specific goal and your need to prove it. Your response should be a singular code block of Coq proof starting with \"```coq\n\", ending with \"Qed.```\", without any additional explanation or commentary. Follow to these guidelines:\nIntroduce variables using unique names to avoid any conflicts.\nKeep each command distinct and separated, avoid concatenations like ';' or '[cmd|cmd]'.\nOrganize your proof with bullets like '-', '+', and '*' instead of braces ({, }). Shift to their double symbols like '--' and '++', when necessary.\nEffectively use given premises, follow the syntax and structure demonstrated in the examples provided.\n\nExample 1:\n\nHypotheses:\nn, m: nat\nIHn: m + n = n + m\n\nGoal:\nm + S n = S n + m\n\nProof:\n```coq\nsimpl. rewrite <- IHn. auto.\nQed.```\n\nExample 2:\nHypotheses:\n\nGoal:\nforall n m : nat, m + n = n + m\n\n```coq\nintros n m. induction n.\n- simpl. auto.\n- simpl. rewrite <- IHn. auto.\nQed.```\n\nSolve This Proof State:\n\nHypotheses:\norig_base_params: BaseParams\none_node_params: OneNodeParams orig_base_params\nraft_params: RaftParams orig_base_params\n\nGoal:\nforall x y : nat, moreUpToDate x y x y = true\n\nPremises:\nRecord RaftParams (orig_base_params : BaseParams) : Type := Build_RaftParams { N : nat; input_eq_dec : forall x y : input, {x = y} + {x <> y}; output_eq_dec : forall x y : output, {x = y} + {x <> y}; clientId : Type; clientId_eq_dec : forall x y : clientId, {x = y} + {x <> y} } Arguments Build_RaftParams _ _%nat_scope (_ _)%function_scope [clientId]%type_scope _%function_scope\nInductive nat : Set := O : nat | S : nat -> nat Arguments S _%nat_scope\nRecord OneNodeParams (P : BaseParams) : Type := Build_OneNodeParams { init : data; handler : input -> data -> output * data } Arguments Build_OneNodeParams _ _ _%function_scope\nmoreUpToDate = fun t1 i1 t2 i2 : nat => (t2 <? t1) || (t1 =? t2) && (i2 <=? i1) : nat -> nat -> nat -> nat -> bool Arguments moreUpToDate (_ _ _ _)%nat_scope\nBuild_RaftParams : forall orig_base_params : BaseParams, nat -> (forall x y : input, {x = y} + {x <> y}) -> (forall x y : output, {x = y} + {x <> y}) -> forall clientId : Type, (forall x y : clientId, {x = y} + {x <> y}) -> RaftParams orig_base_params\nin_map_iff : forall (A B : Type) (f : A -> B) (l : list A) (y : B), In y (map f l) < -> (exists x : A, f x = y /\\ In x l)\nrefl_trans_1n_n1_trace : forall (A trace : Type) (step : step_relation A trace) (x y : A) (l : list trace), refl_trans_1n_trace step x y l -> refl_trans_n1_trace step x y l\nrefl_trans_1n_trace_n1_ind : forall (A trace : Type) (step : step_relation A trace) (P : A -> A -> list trace -> Prop), (forall x : A, P x x []) -> (forall (x x' x'' : A) (tr1 tr2 : list trace), refl_trans_1n_trace step x x' tr1 -> step x' x'' tr2 -> P x x' tr1 -> refl_trans_1n_trace step x x'' (tr1 ++ tr2) -> P x x'' (tr1 ++ tr2)) -> forall (x y : A) (l : list trace), refl_trans_1n_trace step x y l -> P x y l\nInit.Nat.div = fun x y : nat => match y with | 0 => y | S y' => fst (Init.Nat.divmod x y' 0 y') end : nat -> nat -> nat Arguments Init.Nat.div (_ _)%nat_scope\nInit.Nat.modulo = fun x y : nat => match y with | 0 => y | S y' => y' - snd (Init.Nat.divmod x y' 0 y') end : nat -> nat -> nat Arguments Init.Nat.modulo (_ _)%nat_scope\nmsg_eq_dec : forall x y : msg, {x = y} + {x <> y}\noutput_eq_dec : forall x y : output, {x = y} + {x <> y}\ninput_eq_dec : forall x y : input, {x = y} + {x <> y}\nterm_eq_dec : forall x y : term, {x = y} + {x <> y}\nkey_eq_dec : forall x y : key, {x = y} + {x <> y}\nname_eq_dec : forall x y : name, {x = y} + {x <> y}\nNet.name_eq_dec : forall x y : Net.name, {x = y} + {x <> y}\nentry_eq_dec : forall x y : entry, {x = y} + {x <> y}\nclientId_eq_dec : forall x y : clientId, {x = y} + {x <> y}\ndedup : forall A : Type, (forall x y : A, {x = y} + {x <> y}) -> list A -> list A\nremove : forall A : Type, (forall x y : A, {x = y} + {x <> y}) -> A -> list A -> list A\nlist_eq_dec : forall A : Type, (forall x y : A, {x = y} + {x <> y}) -> forall l l' : list A, {l = l'} + {l <> l'}\nupdate : (forall x y : ?A, {x = y} + {x <> y}) -> (?A -> ?B) -> ?A -> ?B -> ?A -> ?B where ?A : [orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params |- Type] ?B : [orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params |- Type]\nBuild_MultiParams : forall (P : BaseParams) (name msg : Type), (forall x y : msg, {x = y} + {x <> y}) -> (forall x y : name, {x = y} + {x <> y}) -> forall nodes : list name, (forall n : name, In n nodes) -> NoDup nodes -> (name -> data) -> (name -> name -> msg -> data -> list output * data * list (name * msg)) -> (name -> input -> data -> list output * data * list (name * msg)) -> MultiParams P\nRecord MultiParams (P : BaseParams) : Type := Build_MultiParams { name : Type; msg : Type; msg_eq_dec : forall x y : msg, {x = y} + {x <> y}; name_eq_dec : forall x y : name, {x = y} + {x <> y}; nodes : list name; all_names_nodes : forall n : name, In n nodes; no_dup_nodes : NoDup nodes; init_handlers : name -> data; net_handlers : name -> name -> msg -> data -> list output * data * list (name * msg); input_handlers : name -> input -> data -> list output * data * list (name * msg) } Arguments Build_MultiParams _ [name msg]%type_scope (_ _)%function_scope [nodes]%list_scope _%function_scope _ (_ _ _)%function_scope\nInductive refl_trans_n1_trace (A trace : Type) (step : step_relation A trace) : step_relation A trace := RTn1TBase : forall x : A, refl_trans_n1_trace step x x [] | RTn1TStep : forall (x x' x'' : A) (cs cs' : list trace), refl_trans_n1_trace step x x' cs -> step x' x'' cs' -> refl_trans_n1_trace step x x'' (cs ++ cs') Arguments refl_trans_n1_trace [A trace]%type_scope Arguments RTn1TBase [A trace]%type_scope Arguments RTn1TStep [A trace]%type_scope [step x x'] _ [cs]%list_scope _%list_scope\nrefl_trans_n1_trace_ind : forall (A trace : Type) (step : step_relation A trace) (P : A -> A -> list trace -> Prop), (forall x : A, P x x []) -> (forall (x x' x'' : A) (cs cs' : list trace), refl_trans_n1_trace step x x' cs -> P x x' cs -> step x' x'' cs' -> P x x'' (cs ++ cs')) -> forall (a a0 : A) (l : list trace), refl_trans_n1_trace step a a0 l -> P a a0 l\nInductive refl_trans_1n_trace (A trace : Type) (step : step_relation A trace) : step_relation A trace := RT1nTBase : forall x : A, refl_trans_1n_trace step x x [] | RT1nTStep : forall (x x' x'' : A) (cs cs' : list trace), step x x' cs -> refl_trans_1n_trace step x' x'' cs' -> refl_trans_1n_trace step x x'' (cs ++ cs') Arguments refl_trans_1n_trace [A trace]%type_scope Arguments RT1nTBase [A trace]%type_scope Arguments RT1nTStep [A trace]%type_scope [step] _ [x' x''] _%list_scope [cs']%list_scope\ndoGenericServer = fun (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params) (h : name) (state : raft_data) => let (out, state0) := applyEntries h state (rev (filter (fun x : entry => (lastApplied state <? eIndex x) && (eIndex x <=? commitIndex state)) (findGtIndex (log state) (lastApplied state)))) in (out, {[state0 with lastApplied := if lastApplied state0 <? commitIndex state0 then commitIndex state0 else lastApplied state0]}, []) : forall orig_base_params : BaseParams, OneNodeParams orig_base_params -> forall raft_params : RaftParams orig_base_params, name -> raft_data -> list raft_output * raft_data * list (name * msg) Arguments doGenericServer {orig_base_params one_node_params raft_params}\nNat.odd_spec : forall n : nat, Nat.odd n = true < -> Nat.Odd n\nNat.testbit_odd_0 : forall a : nat, Nat.testbit (2 * a + 1) 0 = true\nNat.bit_log2 : forall a : nat, a <> 0 -> Nat.testbit a (Nat.log2 a) = true\nall_fin_all : forall (n : nat) (x : fin n), In x (all_fin n)\nsnd = fun (A B : Type) (p : A * B) => let (_, y) := p in y : forall A B : Type, A * B -> B Arguments snd {A B}%type_scope"}, {"role": "assistant", "content": "```coq\n```"}], "original": "", "succ": false}]