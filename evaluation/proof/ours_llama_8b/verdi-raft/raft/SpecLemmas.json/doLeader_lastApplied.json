[{"history": {"proof": "qsimpl time: 1 use: doLeader.", "repairs": ["no_hypos"], "exceptions": [{"ctx": [], "tactic": "unfold doLeader in e.", "exn": "No such hypothesis: e", "type": "no_hypos", "handled": true}, {"ctx": ["qsimpl time: 1 use: doLeader.", "destruct (type st) eqn:Etype.", "-"], "tactic": "destruct (shouldSend state') eqn:EshouldSend.", "exn": "The reference state' was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["qsimpl time: 1 use: doLeader.", "destruct (type st) eqn:Etype.", "-", "destruct (shouldSend st) eqn:EshouldSend.", "+"], "tactic": "rewrite EshouldSend.", "exn": "Found no subterm matching \"shouldSend st\" in the current goal.", "type": "no_subterm", "handled": true}, {"ctx": ["qsimpl time: 1 use: doLeader.", "destruct (type st) eqn:Etype.", "-", "destruct (shouldSend st) eqn:EshouldSend.", "+", "qsimpl time: 1 use: doLeader."], "tactic": "destruct (map (replicaMessage state'0 h) (filter (fun h0 : name => if name_eq_dec h h0 then false else true) nodes)) eqn:EreplicaMessages.", "exn": "The reference state'0 was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["qsimpl time: 1 use: doLeader.", "destruct (type st) eqn:Etype.", "-", "destruct (shouldSend st) eqn:EshouldSend.", "+", "qsimpl time: 1 use: doLeader.", "destruct (map (replicaMessage st h) (filter (fun h0 : name => if name_eq_dec h h0 then false else true) nodes)) eqn:EreplicaMessages.", "*"], "tactic": "simpl in e.", "exn": "No such hypothesis: e", "type": "no_hypos", "handled": true}, {"ctx": ["qsimpl time: 1 use: doLeader.", "destruct (type st) eqn:Etype.", "-", "destruct (shouldSend st) eqn:EshouldSend.", "+", "qsimpl time: 1 use: doLeader.", "destruct (map (replicaMessage st h) (filter (fun h0 : name => if name_eq_dec h h0 then false else true) nodes)) eqn:EreplicaMessages.", "*", "qsimpl time: 1 use: doLeader."], "tactic": "rewrite <- Etype, <- EshouldSend.", "exn": "Found no subterm matching \"Follower\" in the current goal.", "type": "no_subterm", "handled": true}, {"ctx": ["qsimpl time: 1 use: doLeader.", "destruct (type st) eqn:Etype.", "-", "destruct (shouldSend st) eqn:EshouldSend.", "+", "qsimpl time: 1 use: doLeader.", "destruct (map (replicaMessage st h) (filter (fun h0 : name => if name_eq_dec h h0 then false else true) nodes)) eqn:EreplicaMessages.", "*", "qsimpl time: 1 use: doLeader.", "qsimpl time: 1 use: doLeader."], "tactic": "apply doLeader_log.", "exn": "In environment orig_base_params : BaseParams raft_params : RaftParams orig_base_params p : raft_data -> name -> list raft_output * raft_data * list (name * msg) st : raft_data h : name os : list raft_output st' : raft_data ms : list (name * msg) H : p st h = (os, st', ms) init : data handler : input -> data -> output * data Etype : type st = Follower EshouldSend : shouldSend st = true X2 : list raft_output X3 : raft_data X1 : list (name * msg) EreplicaMessages : map (replicaMessage st h) (filter (fun h0 : name => if name_eq_dec h h0 then false else true) nodes) = [] X5 : list raft_output X6 : raft_data X4 : list (name * msg) X8 : list raft_output X9 : raft_data X7 : list (name * msg) Unable to unify \"log ?M4385 = log ?M4382\" with \"lastApplied st' = lastApplied st\".", "type": "cannot_unify", "handled": true}, {"ctx": ["qsimpl time: 1 use: doLeader.", "destruct (type st) eqn:Etype.", "-", "destruct (shouldSend st) eqn:EshouldSend.", "+", "qsimpl time: 1 use: doLeader.", "destruct (map (replicaMessage st h) (filter (fun h0 : name => if name_eq_dec h h0 then false else true) nodes)) eqn:EreplicaMessages.", "*", "qsimpl time: 1 use: doLeader.", "qsimpl time: 1 use: doLeader.", "qsimpl time: 1 use: doLeader_log,doLeader."], "tactic": "apply doLeader_clientCache.", "exn": "In environment orig_base_params : BaseParams raft_params : RaftParams orig_base_params H0 : forall (st : raft_data) (h : name) (os : list raft_output) (st' : raft_data) (ms : list (name * msg)), doLeader st h = (os, st', ms) -> log st' = log st p : raft_data -> name -> list raft_output * raft_data * list (name * msg) st : raft_data h : name os : list raft_output st' : raft_data ms : list (name * msg) H : p st h = (os, st', ms) init : data handler : input -> data -> output * data Etype : type st = Follower EshouldSend : shouldSend st = true X2 : list raft_output X3 : raft_data X1 : list (name * msg) EreplicaMessages : map (replicaMessage st h) (filter (fun h0 : name => if name_eq_dec h h0 then false else true) nodes) = [] X5 : list raft_output X6 : raft_data X4 : list (name * msg) X8 : list raft_output X9 : raft_data X7 : list (name * msg) X11 : list raft_output X12 : raft_data X10 : list (name * msg) Unable to unify \"clientCache ?M5410 = clientCache ?M5407\" with \"lastApplied st' = lastApplied st\".", "type": "cannot_unify", "handled": true}, {"ctx": ["qsimpl time: 1 use: doLeader.", "destruct (type st) eqn:Etype.", "-", "destruct (shouldSend st) eqn:EshouldSend.", "+", "qsimpl time: 1 use: doLeader.", "destruct (map (replicaMessage st h) (filter (fun h0 : name => if name_eq_dec h h0 then false else true) nodes)) eqn:EreplicaMessages.", "*", "qsimpl time: 1 use: doLeader.", "qsimpl time: 1 use: doLeader.", "qsimpl time: 1 use: doLeader_log,doLeader.", "qsimpl time: 1 use: doLeader_log,doLeader_clientCache,doLeader."], "tactic": "apply doLeader_stateMachine.", "exn": "In environment orig_base_params : BaseParams raft_params : RaftParams orig_base_params H2 : forall (st : raft_data) (h : name) (os : list raft_output) (st' : raft_data) (ms : list (name * msg)), doLeader st h = (os, st', ms) -> clientCache st' = clientCache st H1 : forall (st : raft_data) (h : name) (os : list raft_output) (st' : raft_data) (ms : list (name * msg)), doLeader st h = (os, st', ms) -> log st' = log st p : raft_data -> name -> list raft_output * raft_data * list (name * msg) st : raft_data h : name os : list raft_output st' : raft_data ms : list (name * msg) H : p st h = (os, st', ms) init : data handler : input -> data -> output * data Etype : type st = Follower EshouldSend : shouldSend st = true X2 : list raft_output X3 : raft_data X1 : list (name * msg) EreplicaMessages : map (replicaMessage st h) (filter (fun h0 : name => if name_eq_dec h h0 then false else true) nodes) = [] X5 : list raft_output X6 : raft_data X4 : list (name * msg) X8 : list raft_output X9 : raft_data X7 : list (name * msg) X11 : list raft_output X12 : raft_data X10 : list (name * msg) X14 : list raft_output X15 : raft_data X13 : list (name * msg) Unable to unify \"stateMachine ?M6674 = stateMachine ?M6671\" with \"lastApplied st' = lastApplied st\".", "type": "cannot_unify", "handled": true}, {"ctx": ["qsimpl time: 1 use: doLeader.", "destruct (type st) eqn:Etype.", "-", "destruct (shouldSend st) eqn:EshouldSend.", "+", "qsimpl time: 1 use: doLeader.", "destruct (map (replicaMessage st h) (filter (fun h0 : name => if name_eq_dec h h0 then false else true) nodes)) eqn:EreplicaMessages.", "*", "qsimpl time: 1 use: doLeader.", "qsimpl time: 1 use: doLeader.", "qsimpl time: 1 use: doLeader_log,doLeader.", "qsimpl time: 1 use: doLeader_log,doLeader_clientCache,doLeader.", "qsimpl time: 1 use: doLeader_stateMachine,doLeader_log,doLeader_clientCache,doLeader."], "tactic": "apply doLeader_currentTerm.", "exn": "In environment orig_base_params : BaseParams raft_params : RaftParams orig_base_params H4 : forall (st : raft_data) (h : name) (os : list raft_output) (st' : raft_data) (ms : list (name * msg)), doLeader st h = (os, st', ms) -> clientCache st' = clientCache st H3 : forall (st : raft_data) (h : name) (os : list raft_output) (st' : raft_data) (ms : list (name * msg)), doLeader st h = (os, st', ms) -> log st' = log st H0 : forall (st : raft_data) (h : name) (os : list raft_output) (st' : raft_data) (ms : list (name * msg)), doLeader st h = (os, st', ms) -> stateMachine st' = stateMachine st p : raft_data -> name -> list raft_output * raft_data * list (name * msg) st : raft_data h : name os : list raft_output st' : raft_data ms : list (name * msg) H : p st h = (os, st', ms) init : data handler : input -> data -> output * data Etype : type st = Follower EshouldSend : shouldSend st = true X2 : list raft_output X3 : raft_data X1 : list (name * msg) EreplicaMessages : map (replicaMessage st h) (filter (fun h0 : name => if name_eq_dec h h0 then false else true) nodes) = [] X5 : list raft_output X6 : raft_data X4 : list (name * msg) X8 : list raft_output X9 : raft_data X7 : list (name * msg) X11 : list raft_output X12 : raft_data X10 : list (name * msg) X14 : list raft_output X15 : raft_data X13 : list (name * msg) X17 : list raft_output X18 : raft_data X16 : list (name * msg) Unable to unify \"currentTerm ?M8179 = currentTerm ?M8176\" with \"lastApplied st' = lastApplied st\".", "type": "cannot_unify", "handled": true}, {"ctx": ["qsimpl time: 1 use: doLeader.", "destruct (type st) eqn:Etype.", "-", "destruct (shouldSend st) eqn:EshouldSend.", "+", "qsimpl time: 1 use: doLeader.", "destruct (map (replicaMessage st h) (filter (fun h0 : name => if name_eq_dec h h0 then false else true) nodes)) eqn:EreplicaMessages.", "*", "qsimpl time: 1 use: doLeader.", "qsimpl time: 1 use: doLeader.", "qsimpl time: 1 use: doLeader_log,doLeader.", "qsimpl time: 1 use: doLeader_log,doLeader_clientCache,doLeader.", "qsimpl time: 1 use: doLeader_stateMachine,doLeader_log,doLeader_clientCache,doLeader.", "qsimpl time: 1 use: doLeader_stateMachine,doLeader_currentTerm,doLeader_clientCache,doLeader_log,doLeader."], "tactic": "apply doLeader_matchIndex_preserved.", "exn": "In environment orig_base_params : BaseParams raft_params : RaftParams orig_base_params H6 : forall (st : raft_data) (h : name) (os : list raft_output) (st' : raft_data) (ms : list (name * msg)), doLeader st h = (os, st', ms) -> log st' = log st H5 : forall (st : raft_data) (h : name) (os : list raft_output) (st' : raft_data) (ms : list (name * msg)), doLeader st h = (os, st', ms) -> clientCache st' = clientCache st H2 : forall (st : raft_data) (h : name) (os : list raft_output) (st' : raft_data) (ms : list (name * msg)), doLeader st h = (os, st', ms) -> currentTerm st' = currentTerm st H1 : forall (st : raft_data) (h : name) (os : list raft_output) (st' : raft_data) (ms : list (name * msg)), doLeader st h = (os, st', ms) -> stateMachine st' = stateMachine st p : raft_data -> name -> list raft_output * raft_data * list (name * msg) st : raft_data h : name os : list raft_output st' : raft_data ms : list (name * msg) H : p st h = (os, st', ms) init : data handler : input -> data -> output * data Etype : type st = Follower EshouldSend : shouldSend st = true X2 : list raft_output X3 : raft_data X1 : list (name * msg) EreplicaMessages : map (replicaMessage st h) (filter (fun h0 : name => if name_eq_dec h h0 then false else true) nodes) = [] X5 : list raft_output X6 : raft_data X4 : list (name * msg) X8 : list raft_output X9 : raft_data X7 : list (name * msg) X11 : list raft_output X12 : raft_data X10 : list (name * msg) X14 : list raft_output X15 : raft_data X13 : list (name * msg) X17 : list raft_output X18 : raft_data X16 : list (name * msg) X20 : list raft_output X21 : raft_data X19 : list (name * msg) Unable to unify \"type ?M9927 = Leader -> type ?M9924 = Leader /\\\\ matchIndex ?M9927 = matchIndex ?M9924 /\\\\ log ?M9927 = log ?M9924\" with \"lastApplied st' = lastApplied st\".", "type": "cannot_unify", "handled": true}, {"ctx": ["qsimpl time: 1 use: doLeader.", "destruct (type st) eqn:Etype.", "-", "destruct (shouldSend st) eqn:EshouldSend.", "+", "qsimpl time: 1 use: doLeader.", "destruct (map (replicaMessage st h) (filter (fun h0 : name => if name_eq_dec h h0 then false else true) nodes)) eqn:EreplicaMessages.", "*", "qsimpl time: 1 use: doLeader.", "qsimpl time: 1 use: doLeader.", "qsimpl time: 1 use: doLeader_log,doLeader.", "qsimpl time: 1 use: doLeader_log,doLeader_clientCache,doLeader.", "qsimpl time: 1 use: doLeader_stateMachine,doLeader_log,doLeader_clientCache,doLeader.", "qsimpl time: 1 use: doLeader_stateMachine,doLeader_currentTerm,doLeader_clientCache,doLeader_log,doLeader.", "qsimpl time: 1 use: doLeader_stateMachine,doLeader_currentTerm,doLeader_clientCache,doLeader_log,doLeader_matchIndex_preserved,doLeader."], "tactic": "+", "exn": "Wrong bullet +: Current bullet * is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["qsimpl time: 1 use: doLeader.", "destruct (type st) eqn:Etype.", "-", "destruct (shouldSend st) eqn:EshouldSend.", "+", "qsimpl time: 1 use: doLeader.", "destruct (map (replicaMessage st h) (filter (fun h0 : name => if name_eq_dec h h0 then false else true) nodes)) eqn:EreplicaMessages.", "*", "qsimpl time: 1 use: doLeader.", "qsimpl time: 1 use: doLeader.", "qsimpl time: 1 use: doLeader_log,doLeader.", "qsimpl time: 1 use: doLeader_log,doLeader_clientCache,doLeader.", "qsimpl time: 1 use: doLeader_stateMachine,doLeader_log,doLeader_clientCache,doLeader.", "qsimpl time: 1 use: doLeader_stateMachine,doLeader_currentTerm,doLeader_clientCache,doLeader_log,doLeader.", "qsimpl time: 1 use: doLeader_stateMachine,doLeader_currentTerm,doLeader_clientCache,doLeader_log,doLeader_matchIndex_preserved,doLeader.", "shelve."], "tactic": "+", "exn": "Wrong bullet +: Expecting *.", "type": "wrong_bullet", "handled": true}, {"ctx": ["qsimpl time: 1 use: doLeader.", "destruct (type st) eqn:Etype.", "-", "destruct (shouldSend st) eqn:EshouldSend.", "+", "qsimpl time: 1 use: doLeader.", "destruct (map (replicaMessage st h) (filter (fun h0 : name => if name_eq_dec h h0 then false else true) nodes)) eqn:EreplicaMessages.", "*", "qsimpl time: 1 use: doLeader.", "qsimpl time: 1 use: doLeader.", "qsimpl time: 1 use: doLeader_log,doLeader.", "qsimpl time: 1 use: doLeader_log,doLeader_clientCache,doLeader.", "qsimpl time: 1 use: doLeader_stateMachine,doLeader_log,doLeader_clientCache,doLeader.", "qsimpl time: 1 use: doLeader_stateMachine,doLeader_currentTerm,doLeader_clientCache,doLeader_log,doLeader.", "qsimpl time: 1 use: doLeader_stateMachine,doLeader_currentTerm,doLeader_clientCache,doLeader_log,doLeader_matchIndex_preserved,doLeader.", "shelve.", "*"], "tactic": "rewrite EshouldSend.", "exn": "Found no subterm matching \"shouldSend st\" in the current goal.", "type": "no_subterm", "handled": true}, {"ctx": ["qsimpl time: 1 use: doLeader.", "destruct (type st) eqn:Etype.", "-", "destruct (shouldSend st) eqn:EshouldSend.", "+", "qsimpl time: 1 use: doLeader.", "destruct (map (replicaMessage st h) (filter (fun h0 : name => if name_eq_dec h h0 then false else true) nodes)) eqn:EreplicaMessages.", "*", "qsimpl time: 1 use: doLeader.", "qsimpl time: 1 use: doLeader.", "qsimpl time: 1 use: doLeader_log,doLeader.", "qsimpl time: 1 use: doLeader_log,doLeader_clientCache,doLeader.", "qsimpl time: 1 use: doLeader_stateMachine,doLeader_log,doLeader_clientCache,doLeader.", "qsimpl time: 1 use: doLeader_stateMachine,doLeader_currentTerm,doLeader_clientCache,doLeader_log,doLeader.", "qsimpl time: 1 use: doLeader_stateMachine,doLeader_currentTerm,doLeader_clientCache,doLeader_log,doLeader_matchIndex_preserved,doLeader.", "shelve.", "*", "qsimpl time: 1 use: doLeader_stateMachine,doLeader_currentTerm,doLeader_clientCache,doLeader_log,doLeader_matchIndex_preserved,doLeader."], "tactic": "simpl in e.", "exn": "No such hypothesis: e", "type": "no_hypos", "handled": true}, {"ctx": ["qsimpl time: 1 use: doLeader.", "destruct (type st) eqn:Etype.", "-", "destruct (shouldSend st) eqn:EshouldSend.", "+", "qsimpl time: 1 use: doLeader.", "destruct (map (replicaMessage st h) (filter (fun h0 : name => if name_eq_dec h h0 then false else true) nodes)) eqn:EreplicaMessages.", "*", "qsimpl time: 1 use: doLeader.", "qsimpl time: 1 use: doLeader.", "qsimpl time: 1 use: doLeader_log,doLeader.", "qsimpl time: 1 use: doLeader_log,doLeader_clientCache,doLeader.", "qsimpl time: 1 use: doLeader_stateMachine,doLeader_log,doLeader_clientCache,doLeader.", "qsimpl time: 1 use: doLeader_stateMachine,doLeader_currentTerm,doLeader_clientCache,doLeader_log,doLeader.", "qsimpl time: 1 use: doLeader_stateMachine,doLeader_currentTerm,doLeader_clientCache,doLeader_log,doLeader_matchIndex_preserved,doLeader.", "shelve.", "*", "qsimpl time: 1 use: doLeader_stateMachine,doLeader_currentTerm,doLeader_clientCache,doLeader_log,doLeader_matchIndex_preserved,doLeader.", "qsimpl time: 1 use: doLeader_stateMachine,doLeader_currentTerm,doLeader_clientCache,doLeader_log,doLeader_matchIndex_preserved,doLeader."], "tactic": "rewrite <- Etype, <- EshouldSend.", "exn": "Found no subterm matching \"Follower\" in the current goal.", "type": "no_subterm", "handled": true}, {"ctx": ["qsimpl time: 1 use: doLeader.", "destruct (type st) eqn:Etype.", "-", "destruct (shouldSend st) eqn:EshouldSend.", "+", "qsimpl time: 1 use: doLeader.", "destruct (map (replicaMessage st h) (filter (fun h0 : name => if name_eq_dec h h0 then false else true) nodes)) eqn:EreplicaMessages.", "*", "qsimpl time: 1 use: doLeader.", "qsimpl time: 1 use: doLeader.", "qsimpl time: 1 use: doLeader_log,doLeader.", "qsimpl time: 1 use: doLeader_log,doLeader_clientCache,doLeader.", "qsimpl time: 1 use: doLeader_stateMachine,doLeader_log,doLeader_clientCache,doLeader.", "qsimpl time: 1 use: doLeader_stateMachine,doLeader_currentTerm,doLeader_clientCache,doLeader_log,doLeader.", "qsimpl time: 1 use: doLeader_stateMachine,doLeader_currentTerm,doLeader_clientCache,doLeader_log,doLeader_matchIndex_preserved,doLeader.", "shelve.", "*", "qsimpl time: 1 use: doLeader_stateMachine,doLeader_currentTerm,doLeader_clientCache,doLeader_log,doLeader_matchIndex_preserved,doLeader.", "qsimpl time: 1 use: doLeader_stateMachine,doLeader_currentTerm,doLeader_clientCache,doLeader_log,doLeader_matchIndex_preserved,doLeader.", "qsimpl time: 1 use: doLeader_stateMachine,doLeader_currentTerm,doLeader_clientCache,doLeader_log,doLeader_matchIndex_preserved,doLeader."], "tactic": "apply doLeader_log.", "exn": "In environment orig_base_params : BaseParams raft_params : RaftParams orig_base_params H3 : forall (st : raft_data) (h : name) (os : list raft_output) (st' : raft_data) (ms : list (name * msg)), doLeader st h = (os, st', ms) -> log st' = log st H2 : forall (st : raft_data) (h : name) (os : list raft_output) (st' : raft_data) (ms : list (name * msg)), doLeader st h = (os, st', ms) -> clientCache st' = clientCache st H1 : forall (st : raft_data) (h : name) (os : list raft_output) (st' : raft_data) (ms : list (name * msg)), doLeader st h = (os, st', ms) -> currentTerm st' = currentTerm st H0 : forall (st : raft_data) (h : name) (os : list raft_output) (st' : raft_data) (ms : list (name * msg)), doLeader st h = (os, st', ms) -> stateMachine st' = stateMachine st p : raft_data -> name -> list raft_output * raft_data * list (name * msg) st : raft_data h : name os : list raft_output st' : raft_data ms : list (name * msg) H : p st h = (os, st', ms) init : data handler : input -> data -> output * data Etype : type st = Follower EshouldSend : shouldSend st = true X2 : list raft_output X3 : raft_data X1 : list (name * msg) p1 : name p2 : msg l : list (name * msg) EreplicaMessages : map (replicaMessage st h) (filter (fun h0 : name => if name_eq_dec h h0 then false else true) nodes) = (p1, p2) :: l X5 : list raft_output X6 : raft_data X4 : list (name * msg) H5 : forall (st : raft_data) (h : name) (os : list raft_output) (st' : raft_data) (ms : list (name * msg)), doLeader st h = (os, st', ms) -> type st' = Leader -> log st' = log st H6 : forall (st : raft_data) (h : name) (os : list raft_output) (st' : raft_data) (ms : list (name * msg)), doLeader st h = (os, st', ms) -> type st' = Leader -> matchIndex st' = matchIndex st H4 : forall (st : raft_data) (h : name) (os : list raft_output) (st' : raft_data) (ms : list (name * msg)), doLeader st h = (os, st', ms) -> type st' = Leader -> type st = Leader X8 : list raft_output X9 : raft_data X7 : list (name * msg) X11 : list raft_output X12 : raft_data X10 : list (name * msg) Unable to unify \"log ?M22093 = log ?M22090\" with \"lastApplied st' = lastApplied st\".", "type": "cannot_unify", "handled": true}, {"ctx": ["qsimpl time: 1 use: doLeader.", "destruct (type st) eqn:Etype.", "-", "destruct (shouldSend st) eqn:EshouldSend.", "+", "qsimpl time: 1 use: doLeader.", "destruct (map (replicaMessage st h) (filter (fun h0 : name => if name_eq_dec h h0 then false else true) nodes)) eqn:EreplicaMessages.", "*", "qsimpl time: 1 use: doLeader.", "qsimpl time: 1 use: doLeader.", "qsimpl time: 1 use: doLeader_log,doLeader.", "qsimpl time: 1 use: doLeader_log,doLeader_clientCache,doLeader.", "qsimpl time: 1 use: doLeader_stateMachine,doLeader_log,doLeader_clientCache,doLeader.", "qsimpl time: 1 use: doLeader_stateMachine,doLeader_currentTerm,doLeader_clientCache,doLeader_log,doLeader.", "qsimpl time: 1 use: doLeader_stateMachine,doLeader_currentTerm,doLeader_clientCache,doLeader_log,doLeader_matchIndex_preserved,doLeader.", "shelve.", "*", "qsimpl time: 1 use: doLeader_stateMachine,doLeader_currentTerm,doLeader_clientCache,doLeader_log,doLeader_matchIndex_preserved,doLeader.", "qsimpl time: 1 use: doLeader_stateMachine,doLeader_currentTerm,doLeader_clientCache,doLeader_log,doLeader_matchIndex_preserved,doLeader.", "qsimpl time: 1 use: doLeader_stateMachine,doLeader_currentTerm,doLeader_clientCache,doLeader_log,doLeader_matchIndex_preserved,doLeader.", "qsimpl time: 1 use: doLeader_stateMachine,doLeader_currentTerm,doLeader_clientCache,doLeader_log,doLeader_matchIndex_preserved,doLeader."], "tactic": "apply doLeader_clientCache.", "exn": "In environment orig_base_params : BaseParams raft_params : RaftParams orig_base_params H10 : forall (st : raft_data) (h : name) (os : list raft_output) (st' : raft_data) (ms : list (name * msg)), doLeader st h = (os, st', ms) -> log st' = log st H9 : forall (st : raft_data) (h : name) (os : list raft_output) (st' : raft_data) (ms : list (name * msg)), doLeader st h = (os, st', ms) -> clientCache st' = clientCache st H8 : forall (st : raft_data) (h : name) (os : list raft_output) (st' : raft_data) (ms : list (name * msg)), doLeader st h = (os, st', ms) -> currentTerm st' = currentTerm st H7 : forall (st : raft_data) (h : name) (os : list raft_output) (st' : raft_data) (ms : list (name * msg)), doLeader st h = (os, st', ms) -> stateMachine st' = stateMachine st p : raft_data -> name -> list raft_output * raft_data * list (name * msg) st : raft_data h : name os : list raft_output st' : raft_data ms : list (name * msg) H : p st h = (os, st', ms) init : data handler : input -> data -> output * data Etype : type st = Follower EshouldSend : shouldSend st = true X2 : list raft_output X3 : raft_data X1 : list (name * msg) p1 : name p2 : msg l : list (name * msg) EreplicaMessages : map (replicaMessage st h) (filter (fun h0 : name => if name_eq_dec h h0 then false else true) nodes) = (p1, p2) :: l X5 : list raft_output X6 : raft_data X4 : list (name * msg) H5 : forall (st : raft_data) (h : name) (os : list raft_output) (st' : raft_data) (ms : list (name * msg)), doLeader st h = (os, st', ms) -> type st' = Leader -> log st' = log st H6 : forall (st : raft_data) (h : name) (os : list raft_output) (st' : raft_data) (ms : list (name * msg)), doLeader st h = (os, st', ms) -> type st' = Leader -> matchIndex st' = matchIndex st H4 : forall (st : raft_data) (h : name) (os : list raft_output) (st' : raft_data) (ms : list (name * msg)), doLeader st h = (os, st', ms) -> type st' = Leader -> type st = Leader X8 : list raft_output X9 : raft_data X7 : list (name * msg) X11 : list raft_output X12 : raft_data X10 : list (name * msg) X14 : list raft_output X15 : raft_data X13 : list (name * msg) Unable to unify \"clientCache ?M25365 = clientCache ?M25362\" with \"lastApplied st' = lastApplied st\".", "type": "cannot_unify", "handled": true}, {"ctx": ["qsimpl time: 1 use: doLeader.", "destruct (type st) eqn:Etype.", "-", "destruct (shouldSend st) eqn:EshouldSend.", "+", "qsimpl time: 1 use: doLeader.", "destruct (map (replicaMessage st h) (filter (fun h0 : name => if name_eq_dec h h0 then false else true) nodes)) eqn:EreplicaMessages.", "*", "qsimpl time: 1 use: doLeader.", "qsimpl time: 1 use: doLeader.", "qsimpl time: 1 use: doLeader_log,doLeader.", "qsimpl time: 1 use: doLeader_log,doLeader_clientCache,doLeader.", "qsimpl time: 1 use: doLeader_stateMachine,doLeader_log,doLeader_clientCache,doLeader.", "qsimpl time: 1 use: doLeader_stateMachine,doLeader_currentTerm,doLeader_clientCache,doLeader_log,doLeader.", "qsimpl time: 1 use: doLeader_stateMachine,doLeader_currentTerm,doLeader_clientCache,doLeader_log,doLeader_matchIndex_preserved,doLeader.", "shelve.", "*", "qsimpl time: 1 use: doLeader_stateMachine,doLeader_currentTerm,doLeader_clientCache,doLeader_log,doLeader_matchIndex_preserved,doLeader.", "qsimpl time: 1 use: doLeader_stateMachine,doLeader_currentTerm,doLeader_clientCache,doLeader_log,doLeader_matchIndex_preserved,doLeader.", "qsimpl time: 1 use: doLeader_stateMachine,doLeader_currentTerm,doLeader_clientCache,doLeader_log,doLeader_matchIndex_preserved,doLeader.", "qsimpl time: 1 use: doLeader_stateMachine,doLeader_currentTerm,doLeader_clientCache,doLeader_log,doLeader_matchIndex_preserved,doLeader.", "qsimpl time: 1 use: doLeader_stateMachine,doLeader_currentTerm,doLeader_clientCache,doLeader_log,doLeader_matchIndex_preserved,doLeader."], "tactic": "apply doLeader_stateMachine.", "exn": "In environment orig_base_params : BaseParams raft_params : RaftParams orig_base_params H3 : forall (st : raft_data) (h : name) (os : list raft_output) (st' : raft_data) (ms : list (name * msg)), doLeader st h = (os, st', ms) -> log st' = log st H2 : forall (st : raft_data) (h : name) (os : list raft_output) (st' : raft_data) (ms : list (name * msg)), doLeader st h = (os, st', ms) -> clientCache st' = clientCache st H1 : forall (st : raft_data) (h : name) (os : list raft_output) (st' : raft_data) (ms : list (name * msg)), doLeader st h = (os, st', ms) -> currentTerm st' = currentTerm st H0 : forall (st : raft_data) (h : name) (os : list raft_output) (st' : raft_data) (ms : list (name * msg)), doLeader st h = (os, st', ms) -> stateMachine st' = stateMachine st p : raft_data -> name -> list raft_output * raft_data * list (name * msg) st : raft_data h : name os : list raft_output st' : raft_data ms : list (name * msg) H : p st h = (os, st', ms) init : data handler : input -> data -> output * data Etype : type st = Follower EshouldSend : shouldSend st = true X2 : list raft_output X3 : raft_data X1 : list (name * msg) p1 : name p2 : msg l : list (name * msg) EreplicaMessages : map (replicaMessage st h) (filter (fun h0 : name => if name_eq_dec h h0 then false else true) nodes) = (p1, p2) :: l X5 : list raft_output X6 : raft_data X4 : list (name * msg) H5 : forall (st : raft_data) (h : name) (os : list raft_output) (st' : raft_data) (ms : list (name * msg)), doLeader st h = (os, st', ms) -> type st' = Leader -> log st' = log st H6 : forall (st : raft_data) (h : name) (os : list raft_output) (st' : raft_data) (ms : list (name * msg)), doLeader st h = (os, st', ms) -> type st' = Leader -> matchIndex st' = matchIndex st H4 : forall (st : raft_data) (h : name) (os : list raft_output) (st' : raft_data) (ms : list (name * msg)), doLeader st h = (os, st', ms) -> type st' = Leader -> type st = Leader X8 : list raft_output X9 : raft_data X7 : list (name * msg) X11 : list raft_output X12 : raft_data X10 : list (name * msg) X14 : list raft_output X15 : raft_data X13 : list (name * msg) X17 : list raft_output X18 : raft_data X16 : list (name * msg) Unable to unify \"stateMachine ?M28755 = stateMachine ?M28752\" with \"lastApplied st' = lastApplied st\".", "type": "cannot_unify", "handled": true}, {"ctx": ["qsimpl time: 1 use: doLeader.", "destruct (type st) eqn:Etype.", "-", "destruct (shouldSend st) eqn:EshouldSend.", "+", "qsimpl time: 1 use: doLeader.", "destruct (map (replicaMessage st h) (filter (fun h0 : name => if name_eq_dec h h0 then false else true) nodes)) eqn:EreplicaMessages.", "*", "qsimpl time: 1 use: doLeader.", "qsimpl time: 1 use: doLeader.", "qsimpl time: 1 use: doLeader_log,doLeader.", "qsimpl time: 1 use: doLeader_log,doLeader_clientCache,doLeader.", "qsimpl time: 1 use: doLeader_stateMachine,doLeader_log,doLeader_clientCache,doLeader.", "qsimpl time: 1 use: doLeader_stateMachine,doLeader_currentTerm,doLeader_clientCache,doLeader_log,doLeader.", "qsimpl time: 1 use: doLeader_stateMachine,doLeader_currentTerm,doLeader_clientCache,doLeader_log,doLeader_matchIndex_preserved,doLeader.", "shelve.", "*", "qsimpl time: 1 use: doLeader_stateMachine,doLeader_currentTerm,doLeader_clientCache,doLeader_log,doLeader_matchIndex_preserved,doLeader.", "qsimpl time: 1 use: doLeader_stateMachine,doLeader_currentTerm,doLeader_clientCache,doLeader_log,doLeader_matchIndex_preserved,doLeader.", "qsimpl time: 1 use: doLeader_stateMachine,doLeader_currentTerm,doLeader_clientCache,doLeader_log,doLeader_matchIndex_preserved,doLeader.", "qsimpl time: 1 use: doLeader_stateMachine,doLeader_currentTerm,doLeader_clientCache,doLeader_log,doLeader_matchIndex_preserved,doLeader.", "qsimpl time: 1 use: doLeader_stateMachine,doLeader_currentTerm,doLeader_clientCache,doLeader_log,doLeader_matchIndex_preserved,doLeader.", "qsimpl time: 1 use: doLeader_stateMachine,doLeader_currentTerm,doLeader_clientCache,doLeader_log,doLeader_matchIndex_preserved,doLeader."], "tactic": "apply doLeader_currentTerm.", "exn": "In environment orig_base_params : BaseParams raft_params : RaftParams orig_base_params H10 : forall (st : raft_data) (h : name) (os : list raft_output) (st' : raft_data) (ms : list (name * msg)), doLeader st h = (os, st', ms) -> log st' = log st H9 : forall (st : raft_data) (h : name) (os : list raft_output) (st' : raft_data) (ms : list (name * msg)), doLeader st h = (os, st', ms) -> clientCache st' = clientCache st H8 : forall (st : raft_data) (h : name) (os : list raft_output) (st' : raft_data) (ms : list (name * msg)), doLeader st h = (os, st', ms) -> currentTerm st' = currentTerm st H7 : forall (st : raft_data) (h : name) (os : list raft_output) (st' : raft_data) (ms : list (name * msg)), doLeader st h = (os, st', ms) -> stateMachine st' = stateMachine st p : raft_data -> name -> list raft_output * raft_data * list (name * msg) st : raft_data h : name os : list raft_output st' : raft_data ms : list (name * msg) H : p st h = (os, st', ms) init : data handler : input -> data -> output * data Etype : type st = Follower EshouldSend : shouldSend st = true X2 : list raft_output X3 : raft_data X1 : list (name * msg) p1 : name p2 : msg l : list (name * msg) EreplicaMessages : map (replicaMessage st h) (filter (fun h0 : name => if name_eq_dec h h0 then false else true) nodes) = (p1, p2) :: l X5 : list raft_output X6 : raft_data X4 : list (name * msg) H5 : forall (st : raft_data) (h : name) (os : list raft_output) (st' : raft_data) (ms : list (name * msg)), doLeader st h = (os, st', ms) -> type st' = Leader -> log st' = log st H6 : forall (st : raft_data) (h : name) (os : list raft_output) (st' : raft_data) (ms : list (name * msg)), doLeader st h = (os, st', ms) -> type st' = Leader -> matchIndex st' = matchIndex st H4 : forall (st : raft_data) (h : name) (os : list raft_output) (st' : raft_data) (ms : list (name * msg)), doLeader st h = (os, st', ms) -> type st' = Leader -> type st = Leader X8 : list raft_output X9 : raft_data X7 : list (name * msg) X11 : list raft_output X12 : raft_data X10 : list (name * msg) X14 : list raft_output X15 : raft_data X13 : list (name * msg) X17 : list raft_output X18 : raft_data X16 : list (name * msg) X20 : list raft_output X21 : raft_data X19 : list (name * msg) Unable to unify \"currentTerm ?M32263 = currentTerm ?M32260\" with \"lastApplied st' = lastApplied st\".", "type": "cannot_unify", "handled": true}, {"ctx": ["qsimpl time: 1 use: doLeader.", "destruct (type st) eqn:Etype.", "-", "destruct (shouldSend st) eqn:EshouldSend.", "+", "qsimpl time: 1 use: doLeader.", "destruct (map (replicaMessage st h) (filter (fun h0 : name => if name_eq_dec h h0 then false else true) nodes)) eqn:EreplicaMessages.", "*", "qsimpl time: 1 use: doLeader.", "qsimpl time: 1 use: doLeader.", "qsimpl time: 1 use: doLeader_log,doLeader.", "qsimpl time: 1 use: doLeader_log,doLeader_clientCache,doLeader.", "qsimpl time: 1 use: doLeader_stateMachine,doLeader_log,doLeader_clientCache,doLeader.", "qsimpl time: 1 use: doLeader_stateMachine,doLeader_currentTerm,doLeader_clientCache,doLeader_log,doLeader.", "qsimpl time: 1 use: doLeader_stateMachine,doLeader_currentTerm,doLeader_clientCache,doLeader_log,doLeader_matchIndex_preserved,doLeader.", "shelve.", "*", "qsimpl time: 1 use: doLeader_stateMachine,doLeader_currentTerm,doLeader_clientCache,doLeader_log,doLeader_matchIndex_preserved,doLeader.", "qsimpl time: 1 use: doLeader_stateMachine,doLeader_currentTerm,doLeader_clientCache,doLeader_log,doLeader_matchIndex_preserved,doLeader.", "qsimpl time: 1 use: doLeader_stateMachine,doLeader_currentTerm,doLeader_clientCache,doLeader_log,doLeader_matchIndex_preserved,doLeader.", "qsimpl time: 1 use: doLeader_stateMachine,doLeader_currentTerm,doLeader_clientCache,doLeader_log,doLeader_matchIndex_preserved,doLeader.", "qsimpl time: 1 use: doLeader_stateMachine,doLeader_currentTerm,doLeader_clientCache,doLeader_log,doLeader_matchIndex_preserved,doLeader.", "qsimpl time: 1 use: doLeader_stateMachine,doLeader_currentTerm,doLeader_clientCache,doLeader_log,doLeader_matchIndex_preserved,doLeader.", "qsimpl time: 1 use: doLeader_stateMachine,doLeader_currentTerm,doLeader_clientCache,doLeader_log,doLeader_matchIndex_preserved,doLeader."], "tactic": "apply doLeader_matchIndex_preserved.", "exn": "In environment orig_base_params : BaseParams raft_params : RaftParams orig_base_params H3 : forall (st : raft_data) (h : name) (os : list raft_output) (st' : raft_data) (ms : list (name * msg)), doLeader st h = (os, st', ms) -> log st' = log st H2 : forall (st : raft_data) (h : name) (os : list raft_output) (st' : raft_data) (ms : list (name * msg)), doLeader st h = (os, st', ms) -> clientCache st' = clientCache st H1 : forall (st : raft_data) (h : name) (os : list raft_output) (st' : raft_data) (ms : list (name * msg)), doLeader st h = (os, st', ms) -> currentTerm st' = currentTerm st H0 : forall (st : raft_data) (h : name) (os : list raft_output) (st' : raft_data) (ms : list (name * msg)), doLeader st h = (os, st', ms) -> stateMachine st' = stateMachine st p : raft_data -> name -> list raft_output * raft_data * list (name * msg) st : raft_data h : name os : list raft_output st' : raft_data ms : list (name * msg) H : p st h = (os, st', ms) init : data handler : input -> data -> output * data Etype : type st = Follower EshouldSend : shouldSend st = true X2 : list raft_output X3 : raft_data X1 : list (name * msg) p1 : name p2 : msg l : list (name * msg) EreplicaMessages : map (replicaMessage st h) (filter (fun h0 : name => if name_eq_dec h h0 then false else true) nodes) = (p1, p2) :: l X5 : list raft_output X6 : raft_data X4 : list (name * msg) H5 : forall (st : raft_data) (h : name) (os : list raft_output) (st' : raft_data) (ms : list (name * msg)), doLeader st h = (os, st', ms) -> type st' = Leader -> log st' = log st H6 : forall (st : raft_data) (h : name) (os : list raft_output) (st' : raft_data) (ms : list (name * msg)), doLeader st h = (os, st', ms) -> type st' = Leader -> matchIndex st' = matchIndex st H4 : forall (st : raft_data) (h : name) (os : list raft_output) (st' : raft_data) (ms : list (name * msg)), doLeader st h = (os, st', ms) -> type st' = Leader -> type st = Leader X8 : list raft_output X9 : raft_data X7 : list (name * msg) X11 : list raft_output X12 : raft_data X10 : list (name * msg) X14 : list raft_output X15 : raft_data X13 : list (name * msg) X17 : list raft_output X18 : raft_data X16 : list (name * msg) X20 : list raft_output X21 : raft_data X19 : list (name * msg) X23 : list raft_output X24 : raft_data X22 : list (name * msg) Unable to unify \"type ?M35889 = Leader -> type ?M35886 = Leader /\\\\ matchIndex ?M35889 = matchIndex ?M35886 /\\\\ log ?M35889 = log ?M35886\" with \"lastApplied st' = lastApplied st\".", "type": "cannot_unify", "handled": true}, {"ctx": ["qsimpl time: 1 use: doLeader.", "destruct (type st) eqn:Etype.", "-", "destruct (shouldSend st) eqn:EshouldSend.", "+", "qsimpl time: 1 use: doLeader.", "destruct (map (replicaMessage st h) (filter (fun h0 : name => if name_eq_dec h h0 then false else true) nodes)) eqn:EreplicaMessages.", "*", "qsimpl time: 1 use: doLeader.", "qsimpl time: 1 use: doLeader.", "qsimpl time: 1 use: doLeader_log,doLeader.", "qsimpl time: 1 use: doLeader_log,doLeader_clientCache,doLeader.", "qsimpl time: 1 use: doLeader_stateMachine,doLeader_log,doLeader_clientCache,doLeader.", "qsimpl time: 1 use: doLeader_stateMachine,doLeader_currentTerm,doLeader_clientCache,doLeader_log,doLeader.", "qsimpl time: 1 use: doLeader_stateMachine,doLeader_currentTerm,doLeader_clientCache,doLeader_log,doLeader_matchIndex_preserved,doLeader.", "shelve.", "*", "qsimpl time: 1 use: doLeader_stateMachine,doLeader_currentTerm,doLeader_clientCache,doLeader_log,doLeader_matchIndex_preserved,doLeader.", "qsimpl time: 1 use: doLeader_stateMachine,doLeader_currentTerm,doLeader_clientCache,doLeader_log,doLeader_matchIndex_preserved,doLeader.", "qsimpl time: 1 use: doLeader_stateMachine,doLeader_currentTerm,doLeader_clientCache,doLeader_log,doLeader_matchIndex_preserved,doLeader.", "qsimpl time: 1 use: doLeader_stateMachine,doLeader_currentTerm,doLeader_clientCache,doLeader_log,doLeader_matchIndex_preserved,doLeader.", "qsimpl time: 1 use: doLeader_stateMachine,doLeader_currentTerm,doLeader_clientCache,doLeader_log,doLeader_matchIndex_preserved,doLeader.", "qsimpl time: 1 use: doLeader_stateMachine,doLeader_currentTerm,doLeader_clientCache,doLeader_log,doLeader_matchIndex_preserved,doLeader.", "qsimpl time: 1 use: doLeader_stateMachine,doLeader_currentTerm,doLeader_clientCache,doLeader_log,doLeader_matchIndex_preserved,doLeader.", "qsimpl time: 1 use: doLeader_stateMachine,doLeader_currentTerm,doLeader_clientCache,doLeader_log,doLeader_matchIndex_preserved,doLeader."], "tactic": "-", "exn": "Wrong bullet -: Current bullet * is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["qsimpl time: 1 use: doLeader.", "destruct (type st) eqn:Etype.", "-", "destruct (shouldSend st) eqn:EshouldSend.", "+", "qsimpl time: 1 use: doLeader.", "destruct (map (replicaMessage st h) (filter (fun h0 : name => if name_eq_dec h h0 then false else true) nodes)) eqn:EreplicaMessages.", "*", "qsimpl time: 1 use: doLeader.", "qsimpl time: 1 use: doLeader.", "qsimpl time: 1 use: doLeader_log,doLeader.", "qsimpl time: 1 use: doLeader_log,doLeader_clientCache,doLeader.", "qsimpl time: 1 use: doLeader_stateMachine,doLeader_log,doLeader_clientCache,doLeader.", "qsimpl time: 1 use: doLeader_stateMachine,doLeader_currentTerm,doLeader_clientCache,doLeader_log,doLeader.", "qsimpl time: 1 use: doLeader_stateMachine,doLeader_currentTerm,doLeader_clientCache,doLeader_log,doLeader_matchIndex_preserved,doLeader.", "shelve.", "*", "qsimpl time: 1 use: doLeader_stateMachine,doLeader_currentTerm,doLeader_clientCache,doLeader_log,doLeader_matchIndex_preserved,doLeader.", "qsimpl time: 1 use: doLeader_stateMachine,doLeader_currentTerm,doLeader_clientCache,doLeader_log,doLeader_matchIndex_preserved,doLeader.", "qsimpl time: 1 use: doLeader_stateMachine,doLeader_currentTerm,doLeader_clientCache,doLeader_log,doLeader_matchIndex_preserved,doLeader.", "qsimpl time: 1 use: doLeader_stateMachine,doLeader_currentTerm,doLeader_clientCache,doLeader_log,doLeader_matchIndex_preserved,doLeader.", "qsimpl time: 1 use: doLeader_stateMachine,doLeader_currentTerm,doLeader_clientCache,doLeader_log,doLeader_matchIndex_preserved,doLeader.", "qsimpl time: 1 use: doLeader_stateMachine,doLeader_currentTerm,doLeader_clientCache,doLeader_log,doLeader_matchIndex_preserved,doLeader.", "qsimpl time: 1 use: doLeader_stateMachine,doLeader_currentTerm,doLeader_clientCache,doLeader_log,doLeader_matchIndex_preserved,doLeader.", "qsimpl time: 1 use: doLeader_stateMachine,doLeader_currentTerm,doLeader_clientCache,doLeader_log,doLeader_matchIndex_preserved,doLeader.", "shelve."], "tactic": "-", "exn": "Wrong bullet -: Expecting +.", "type": "wrong_bullet", "handled": true}, {"ctx": ["qsimpl time: 1 use: doLeader.", "destruct (type st) eqn:Etype.", "-", "destruct (shouldSend st) eqn:EshouldSend.", "+", "qsimpl time: 1 use: doLeader.", "destruct (map (replicaMessage st h) (filter (fun h0 : name => if name_eq_dec h h0 then false else true) nodes)) eqn:EreplicaMessages.", "*", "qsimpl time: 1 use: doLeader.", "qsimpl time: 1 use: doLeader.", "qsimpl time: 1 use: doLeader_log,doLeader.", "qsimpl time: 1 use: doLeader_log,doLeader_clientCache,doLeader.", "qsimpl time: 1 use: doLeader_stateMachine,doLeader_log,doLeader_clientCache,doLeader.", "qsimpl time: 1 use: doLeader_stateMachine,doLeader_currentTerm,doLeader_clientCache,doLeader_log,doLeader.", "qsimpl time: 1 use: doLeader_stateMachine,doLeader_currentTerm,doLeader_clientCache,doLeader_log,doLeader_matchIndex_preserved,doLeader.", "shelve.", "*", "qsimpl time: 1 use: doLeader_stateMachine,doLeader_currentTerm,doLeader_clientCache,doLeader_log,doLeader_matchIndex_preserved,doLeader.", "qsimpl time: 1 use: doLeader_stateMachine,doLeader_currentTerm,doLeader_clientCache,doLeader_log,doLeader_matchIndex_preserved,doLeader.", "qsimpl time: 1 use: doLeader_stateMachine,doLeader_currentTerm,doLeader_clientCache,doLeader_log,doLeader_matchIndex_preserved,doLeader.", "qsimpl time: 1 use: doLeader_stateMachine,doLeader_currentTerm,doLeader_clientCache,doLeader_log,doLeader_matchIndex_preserved,doLeader.", "qsimpl time: 1 use: doLeader_stateMachine,doLeader_currentTerm,doLeader_clientCache,doLeader_log,doLeader_matchIndex_preserved,doLeader.", "qsimpl time: 1 use: doLeader_stateMachine,doLeader_currentTerm,doLeader_clientCache,doLeader_log,doLeader_matchIndex_preserved,doLeader.", "qsimpl time: 1 use: doLeader_stateMachine,doLeader_currentTerm,doLeader_clientCache,doLeader_log,doLeader_matchIndex_preserved,doLeader.", "qsimpl time: 1 use: doLeader_stateMachine,doLeader_currentTerm,doLeader_clientCache,doLeader_log,doLeader_matchIndex_preserved,doLeader.", "shelve.", "+"], "tactic": "rewrite Etype.", "exn": "Found no subterm matching \"type st\" in the current goal.", "type": "no_subterm", "handled": true}, {"ctx": ["qsimpl time: 1 use: doLeader.", "destruct (type st) eqn:Etype.", "-", "destruct (shouldSend st) eqn:EshouldSend.", "+", "qsimpl time: 1 use: doLeader.", "destruct (map (replicaMessage st h) (filter (fun h0 : name => if name_eq_dec h h0 then false else true) nodes)) eqn:EreplicaMessages.", "*", "qsimpl time: 1 use: doLeader.", "qsimpl time: 1 use: doLeader.", "qsimpl time: 1 use: doLeader_log,doLeader.", "qsimpl time: 1 use: doLeader_log,doLeader_clientCache,doLeader.", "qsimpl time: 1 use: doLeader_stateMachine,doLeader_log,doLeader_clientCache,doLeader.", "qsimpl time: 1 use: doLeader_stateMachine,doLeader_currentTerm,doLeader_clientCache,doLeader_log,doLeader.", "qsimpl time: 1 use: doLeader_stateMachine,doLeader_currentTerm,doLeader_clientCache,doLeader_log,doLeader_matchIndex_preserved,doLeader.", "shelve.", "*", "qsimpl time: 1 use: doLeader_stateMachine,doLeader_currentTerm,doLeader_clientCache,doLeader_log,doLeader_matchIndex_preserved,doLeader.", "qsimpl time: 1 use: doLeader_stateMachine,doLeader_currentTerm,doLeader_clientCache,doLeader_log,doLeader_matchIndex_preserved,doLeader.", "qsimpl time: 1 use: doLeader_stateMachine,doLeader_currentTerm,doLeader_clientCache,doLeader_log,doLeader_matchIndex_preserved,doLeader.", "qsimpl time: 1 use: doLeader_stateMachine,doLeader_currentTerm,doLeader_clientCache,doLeader_log,doLeader_matchIndex_preserved,doLeader.", "qsimpl time: 1 use: doLeader_stateMachine,doLeader_currentTerm,doLeader_clientCache,doLeader_log,doLeader_matchIndex_preserved,doLeader.", "qsimpl time: 1 use: doLeader_stateMachine,doLeader_currentTerm,doLeader_clientCache,doLeader_log,doLeader_matchIndex_preserved,doLeader.", "qsimpl time: 1 use: doLeader_stateMachine,doLeader_currentTerm,doLeader_clientCache,doLeader_log,doLeader_matchIndex_preserved,doLeader.", "qsimpl time: 1 use: doLeader_stateMachine,doLeader_currentTerm,doLeader_clientCache,doLeader_log,doLeader_matchIndex_preserved,doLeader.", "shelve.", "+", "qsimpl time: 1 use: doLeader_stateMachine,doLeader_currentTerm,doLeader_clientCache,doLeader_log,doLeader_matchIndex_preserved,doLeader."], "tactic": "simpl in e.", "exn": "No such hypothesis: e", "type": "no_hypos", "handled": true}, {"ctx": ["qsimpl time: 1 use: doLeader.", "destruct (type st) eqn:Etype.", "-", "destruct (shouldSend st) eqn:EshouldSend.", "+", "qsimpl time: 1 use: doLeader.", "destruct (map (replicaMessage st h) (filter (fun h0 : name => if name_eq_dec h h0 then false else true) nodes)) eqn:EreplicaMessages.", "*", "qsimpl time: 1 use: doLeader.", "qsimpl time: 1 use: doLeader.", "qsimpl time: 1 use: doLeader_log,doLeader.", "qsimpl time: 1 use: doLeader_log,doLeader_clientCache,doLeader.", "qsimpl time: 1 use: doLeader_stateMachine,doLeader_log,doLeader_clientCache,doLeader.", "qsimpl time: 1 use: doLeader_stateMachine,doLeader_currentTerm,doLeader_clientCache,doLeader_log,doLeader.", "qsimpl time: 1 use: doLeader_stateMachine,doLeader_currentTerm,doLeader_clientCache,doLeader_log,doLeader_matchIndex_preserved,doLeader.", "shelve.", "*", "qsimpl time: 1 use: doLeader_stateMachine,doLeader_currentTerm,doLeader_clientCache,doLeader_log,doLeader_matchIndex_preserved,doLeader.", "qsimpl time: 1 use: doLeader_stateMachine,doLeader_currentTerm,doLeader_clientCache,doLeader_log,doLeader_matchIndex_preserved,doLeader.", "qsimpl time: 1 use: doLeader_stateMachine,doLeader_currentTerm,doLeader_clientCache,doLeader_log,doLeader_matchIndex_preserved,doLeader.", "qsimpl time: 1 use: doLeader_stateMachine,doLeader_currentTerm,doLeader_clientCache,doLeader_log,doLeader_matchIndex_preserved,doLeader.", "qsimpl time: 1 use: doLeader_stateMachine,doLeader_currentTerm,doLeader_clientCache,doLeader_log,doLeader_matchIndex_preserved,doLeader.", "qsimpl time: 1 use: doLeader_stateMachine,doLeader_currentTerm,doLeader_clientCache,doLeader_log,doLeader_matchIndex_preserved,doLeader.", "qsimpl time: 1 use: doLeader_stateMachine,doLeader_currentTerm,doLeader_clientCache,doLeader_log,doLeader_matchIndex_preserved,doLeader.", "qsimpl time: 1 use: doLeader_stateMachine,doLeader_currentTerm,doLeader_clientCache,doLeader_log,doLeader_matchIndex_preserved,doLeader.", "shelve.", "+", "qsimpl time: 1 use: doLeader_stateMachine,doLeader_currentTerm,doLeader_clientCache,doLeader_log,doLeader_matchIndex_preserved,doLeader.", "qsimpl time: 1 use: doLeader_stateMachine,doLeader_currentTerm,doLeader_clientCache,doLeader_log,doLeader_matchIndex_preserved,doLeader."], "tactic": "rewrite <- Etype.", "exn": "Found no subterm matching \"Follower\" in the current goal.", "type": "no_subterm", "handled": true}, {"ctx": ["qsimpl time: 1 use: doLeader.", "destruct (type st) eqn:Etype.", "-", "destruct (shouldSend st) eqn:EshouldSend.", "+", "qsimpl time: 1 use: doLeader.", "destruct (map (replicaMessage st h) (filter (fun h0 : name => if name_eq_dec h h0 then false else true) nodes)) eqn:EreplicaMessages.", "*", "qsimpl time: 1 use: doLeader.", "qsimpl time: 1 use: doLeader.", "qsimpl time: 1 use: doLeader_log,doLeader.", "qsimpl time: 1 use: doLeader_log,doLeader_clientCache,doLeader.", "qsimpl time: 1 use: doLeader_stateMachine,doLeader_log,doLeader_clientCache,doLeader.", "qsimpl time: 1 use: doLeader_stateMachine,doLeader_currentTerm,doLeader_clientCache,doLeader_log,doLeader.", "qsimpl time: 1 use: doLeader_stateMachine,doLeader_currentTerm,doLeader_clientCache,doLeader_log,doLeader_matchIndex_preserved,doLeader.", "shelve.", "*", "qsimpl time: 1 use: doLeader_stateMachine,doLeader_currentTerm,doLeader_clientCache,doLeader_log,doLeader_matchIndex_preserved,doLeader.", "qsimpl time: 1 use: doLeader_stateMachine,doLeader_currentTerm,doLeader_clientCache,doLeader_log,doLeader_matchIndex_preserved,doLeader.", "qsimpl time: 1 use: doLeader_stateMachine,doLeader_currentTerm,doLeader_clientCache,doLeader_log,doLeader_matchIndex_preserved,doLeader.", "qsimpl time: 1 use: doLeader_stateMachine,doLeader_currentTerm,doLeader_clientCache,doLeader_log,doLeader_matchIndex_preserved,doLeader.", "qsimpl time: 1 use: doLeader_stateMachine,doLeader_currentTerm,doLeader_clientCache,doLeader_log,doLeader_matchIndex_preserved,doLeader.", "qsimpl time: 1 use: doLeader_stateMachine,doLeader_currentTerm,doLeader_clientCache,doLeader_log,doLeader_matchIndex_preserved,doLeader.", "qsimpl time: 1 use: doLeader_stateMachine,doLeader_currentTerm,doLeader_clientCache,doLeader_log,doLeader_matchIndex_preserved,doLeader.", "qsimpl time: 1 use: doLeader_stateMachine,doLeader_currentTerm,doLeader_clientCache,doLeader_log,doLeader_matchIndex_preserved,doLeader.", "shelve.", "+", "qsimpl time: 1 use: doLeader_stateMachine,doLeader_currentTerm,doLeader_clientCache,doLeader_log,doLeader_matchIndex_preserved,doLeader.", "qsimpl time: 1 use: doLeader_stateMachine,doLeader_currentTerm,doLeader_clientCache,doLeader_log,doLeader_matchIndex_preserved,doLeader.", "qsimpl time: 1 use: doLeader_stateMachine,doLeader_currentTerm,doLeader_clientCache,doLeader_log,doLeader_matchIndex_preserved,doLeader."], "tactic": "apply doLeader_log.", "exn": "In environment orig_base_params : BaseParams raft_params : RaftParams orig_base_params H3 : forall (st : raft_data) (h : name) (os : list raft_output) (st' : raft_data) (ms : list (name * msg)), doLeader st h = (os, st', ms) -> log st' = log st H2 : forall (st : raft_data) (h : name) (os : list raft_output) (st' : raft_data) (ms : list (name * msg)), doLeader st h = (os, st', ms) -> clientCache st' = clientCache st H1 : forall (st : raft_data) (h : name) (os : list raft_output) (st' : raft_data) (ms : list (name * msg)), doLeader st h = (os, st', ms) -> currentTerm st' = currentTerm st H0 : forall (st : raft_data) (h : name) (os : list raft_output) (st' : raft_data) (ms : list (name * msg)), doLeader st h = (os, st', ms) -> stateMachine st' = stateMachine st p : raft_data -> name -> list raft_output * raft_data * list (name * msg) st : raft_data h : name os : list raft_output st' : raft_data ms : list (name * msg) H : p st h = (os, st', ms) init : data handler : input -> data -> output * data Etype : type st = Follower EshouldSend : shouldSend st = false X2 : list raft_output X3 : raft_data X1 : list (name * msg) H5 : forall (st : raft_data) (h : name) (os : list raft_output) (st' : raft_data) (ms : list (name * msg)), doLeader st h = (os, st', ms) -> type st' = Leader -> log st' = log st H6 : forall (st : raft_data) (h : name) (os : list raft_output) (st' : raft_data) (ms : list (name * msg)), doLeader st h = (os, st', ms) -> type st' = Leader -> matchIndex st' = matchIndex st H4 : forall (st : raft_data) (h : name) (os : list raft_output) (st' : raft_data) (ms : list (name * msg)), doLeader st h = (os, st', ms) -> type st' = Leader -> type st = Leader X5 : list raft_output X6 : raft_data X4 : list (name * msg) X8 : list raft_output X9 : raft_data X7 : list (name * msg) Unable to unify \"log ?M47743 = log ?M47740\" with \"lastApplied st' = lastApplied st\".", "type": "cannot_unify", "handled": true}, {"ctx": ["qsimpl time: 1 use: doLeader.", "destruct (type st) eqn:Etype.", "-", "destruct (shouldSend st) eqn:EshouldSend.", "+", "qsimpl time: 1 use: doLeader.", "destruct (map (replicaMessage st h) (filter (fun h0 : name => if name_eq_dec h h0 then false else true) nodes)) eqn:EreplicaMessages.", "*", "qsimpl time: 1 use: doLeader.", "qsimpl time: 1 use: doLeader.", "qsimpl time: 1 use: doLeader_log,doLeader.", "qsimpl time: 1 use: doLeader_log,doLeader_clientCache,doLeader.", "qsimpl time: 1 use: doLeader_stateMachine,doLeader_log,doLeader_clientCache,doLeader.", "qsimpl time: 1 use: doLeader_stateMachine,doLeader_currentTerm,doLeader_clientCache,doLeader_log,doLeader.", "qsimpl time: 1 use: doLeader_stateMachine,doLeader_currentTerm,doLeader_clientCache,doLeader_log,doLeader_matchIndex_preserved,doLeader.", "shelve.", "*", "qsimpl time: 1 use: doLeader_stateMachine,doLeader_currentTerm,doLeader_clientCache,doLeader_log,doLeader_matchIndex_preserved,doLeader.", "qsimpl time: 1 use: doLeader_stateMachine,doLeader_currentTerm,doLeader_clientCache,doLeader_log,doLeader_matchIndex_preserved,doLeader.", "qsimpl time: 1 use: doLeader_stateMachine,doLeader_currentTerm,doLeader_clientCache,doLeader_log,doLeader_matchIndex_preserved,doLeader.", "qsimpl time: 1 use: doLeader_stateMachine,doLeader_currentTerm,doLeader_clientCache,doLeader_log,doLeader_matchIndex_preserved,doLeader.", "qsimpl time: 1 use: doLeader_stateMachine,doLeader_currentTerm,doLeader_clientCache,doLeader_log,doLeader_matchIndex_preserved,doLeader.", "qsimpl time: 1 use: doLeader_stateMachine,doLeader_currentTerm,doLeader_clientCache,doLeader_log,doLeader_matchIndex_preserved,doLeader.", "qsimpl time: 1 use: doLeader_stateMachine,doLeader_currentTerm,doLeader_clientCache,doLeader_log,doLeader_matchIndex_preserved,doLeader.", "qsimpl time: 1 use: doLeader_stateMachine,doLeader_currentTerm,doLeader_clientCache,doLeader_log,doLeader_matchIndex_preserved,doLeader.", "shelve.", "+", "qsimpl time: 1 use: doLeader_stateMachine,doLeader_currentTerm,doLeader_clientCache,doLeader_log,doLeader_matchIndex_preserved,doLeader.", "qsimpl time: 1 use: doLeader_stateMachine,doLeader_currentTerm,doLeader_clientCache,doLeader_log,doLeader_matchIndex_preserved,doLeader.", "qsimpl time: 1 use: doLeader_stateMachine,doLeader_currentTerm,doLeader_clientCache,doLeader_log,doLeader_matchIndex_preserved,doLeader.", "qsimpl time: 1 use: doLeader_stateMachine,doLeader_currentTerm,doLeader_clientCache,doLeader_log,doLeader_matchIndex_preserved,doLeader."], "tactic": "apply doLeader_clientCache.", "exn": "In environment orig_base_params : BaseParams raft_params : RaftParams orig_base_params H10 : forall (st : raft_data) (h : name) (os : list raft_output) (st' : raft_data) (ms : list (name * msg)), doLeader st h = (os, st', ms) -> log st' = log st H9 : forall (st : raft_data) (h : name) (os : list raft_output) (st' : raft_data) (ms : list (name * msg)), doLeader st h = (os, st', ms) -> clientCache st' = clientCache st H8 : forall (st : raft_data) (h : name) (os : list raft_output) (st' : raft_data) (ms : list (name * msg)), doLeader st h = (os, st', ms) -> currentTerm st' = currentTerm st H7 : forall (st : raft_data) (h : name) (os : list raft_output) (st' : raft_data) (ms : list (name * msg)), doLeader st h = (os, st', ms) -> stateMachine st' = stateMachine st p : raft_data -> name -> list raft_output * raft_data * list (name * msg) st : raft_data h : name os : list raft_output st' : raft_data ms : list (name * msg) H : p st h = (os, st', ms) init : data handler : input -> data -> output * data Etype : type st = Follower EshouldSend : shouldSend st = false X2 : list raft_output X3 : raft_data X1 : list (name * msg) H5 : forall (st : raft_data) (h : name) (os : list raft_output) (st' : raft_data) (ms : list (name * msg)), doLeader st h = (os, st', ms) -> type st' = Leader -> log st' = log st H6 : forall (st : raft_data) (h : name) (os : list raft_output) (st' : raft_data) (ms : list (name * msg)), doLeader st h = (os, st', ms) -> type st' = Leader -> matchIndex st' = matchIndex st H4 : forall (st : raft_data) (h : name) (os : list raft_output) (st' : raft_data) (ms : list (name * msg)), doLeader st h = (os, st', ms) -> type st' = Leader -> type st = Leader X5 : list raft_output X6 : raft_data X4 : list (name * msg) X8 : list raft_output X9 : raft_data X7 : list (name * msg) X11 : list raft_output X12 : raft_data X10 : list (name * msg) Unable to unify \"clientCache ?M50769 = clientCache ?M50766\" with \"lastApplied st' = lastApplied st\".", "type": "cannot_unify", "handled": true}, {"ctx": ["qsimpl time: 1 use: doLeader.", "destruct (type st) eqn:Etype.", "-", "destruct (shouldSend st) eqn:EshouldSend.", "+", "qsimpl time: 1 use: doLeader.", "destruct (map (replicaMessage st h) (filter (fun h0 : name => if name_eq_dec h h0 then false else true) nodes)) eqn:EreplicaMessages.", "*", "qsimpl time: 1 use: doLeader.", "qsimpl time: 1 use: doLeader.", "qsimpl time: 1 use: doLeader_log,doLeader.", "qsimpl time: 1 use: doLeader_log,doLeader_clientCache,doLeader.", "qsimpl time: 1 use: doLeader_stateMachine,doLeader_log,doLeader_clientCache,doLeader.", "qsimpl time: 1 use: doLeader_stateMachine,doLeader_currentTerm,doLeader_clientCache,doLeader_log,doLeader.", "qsimpl time: 1 use: doLeader_stateMachine,doLeader_currentTerm,doLeader_clientCache,doLeader_log,doLeader_matchIndex_preserved,doLeader.", "shelve.", "*", "qsimpl time: 1 use: doLeader_stateMachine,doLeader_currentTerm,doLeader_clientCache,doLeader_log,doLeader_matchIndex_preserved,doLeader.", "qsimpl time: 1 use: doLeader_stateMachine,doLeader_currentTerm,doLeader_clientCache,doLeader_log,doLeader_matchIndex_preserved,doLeader.", "qsimpl time: 1 use: doLeader_stateMachine,doLeader_currentTerm,doLeader_clientCache,doLeader_log,doLeader_matchIndex_preserved,doLeader.", "qsimpl time: 1 use: doLeader_stateMachine,doLeader_currentTerm,doLeader_clientCache,doLeader_log,doLeader_matchIndex_preserved,doLeader.", "qsimpl time: 1 use: doLeader_stateMachine,doLeader_currentTerm,doLeader_clientCache,doLeader_log,doLeader_matchIndex_preserved,doLeader.", "qsimpl time: 1 use: doLeader_stateMachine,doLeader_currentTerm,doLeader_clientCache,doLeader_log,doLeader_matchIndex_preserved,doLeader.", "qsimpl time: 1 use: doLeader_stateMachine,doLeader_currentTerm,doLeader_clientCache,doLeader_log,doLeader_matchIndex_preserved,doLeader.", "qsimpl time: 1 use: doLeader_stateMachine,doLeader_currentTerm,doLeader_clientCache,doLeader_log,doLeader_matchIndex_preserved,doLeader.", "shelve.", "+", "qsimpl time: 1 use: doLeader_stateMachine,doLeader_currentTerm,doLeader_clientCache,doLeader_log,doLeader_matchIndex_preserved,doLeader.", "qsimpl time: 1 use: doLeader_stateMachine,doLeader_currentTerm,doLeader_clientCache,doLeader_log,doLeader_matchIndex_preserved,doLeader.", "qsimpl time: 1 use: doLeader_stateMachine,doLeader_currentTerm,doLeader_clientCache,doLeader_log,doLeader_matchIndex_preserved,doLeader.", "qsimpl time: 1 use: doLeader_stateMachine,doLeader_currentTerm,doLeader_clientCache,doLeader_log,doLeader_matchIndex_preserved,doLeader.", "qsimpl time: 1 use: doLeader_stateMachine,doLeader_currentTerm,doLeader_clientCache,doLeader_log,doLeader_matchIndex_preserved,doLeader."], "tactic": "apply doLeader_stateMachine.", "exn": "In environment orig_base_params : BaseParams raft_params : RaftParams orig_base_params H3 : forall (st : raft_data) (h : name) (os : list raft_output) (st' : raft_data) (ms : list (name * msg)), doLeader st h = (os, st', ms) -> log st' = log st H2 : forall (st : raft_data) (h : name) (os : list raft_output) (st' : raft_data) (ms : list (name * msg)), doLeader st h = (os, st', ms) -> clientCache st' = clientCache st H1 : forall (st : raft_data) (h : name) (os : list raft_output) (st' : raft_data) (ms : list (name * msg)), doLeader st h = (os, st', ms) -> currentTerm st' = currentTerm st H0 : forall (st : raft_data) (h : name) (os : list raft_output) (st' : raft_data) (ms : list (name * msg)), doLeader st h = (os, st', ms) -> stateMachine st' = stateMachine st p : raft_data -> name -> list raft_output * raft_data * list (name * msg) st : raft_data h : name os : list raft_output st' : raft_data ms : list (name * msg) H : p st h = (os, st', ms) init : data handler : input -> data -> output * data Etype : type st = Follower EshouldSend : shouldSend st = false X2 : list raft_output X3 : raft_data X1 : list (name * msg) H5 : forall (st : raft_data) (h : name) (os : list raft_output) (st' : raft_data) (ms : list (name * msg)), doLeader st h = (os, st', ms) -> type st' = Leader -> log st' = log st H6 : forall (st : raft_data) (h : name) (os : list raft_output) (st' : raft_data) (ms : list (name * msg)), doLeader st h = (os, st', ms) -> type st' = Leader -> matchIndex st' = matchIndex st H4 : forall (st : raft_data) (h : name) (os : list raft_output) (st' : raft_data) (ms : list (name * msg)), doLeader st h = (os, st', ms) -> type st' = Leader -> type st = Leader X5 : list raft_output X6 : raft_data X4 : list (name * msg) X8 : list raft_output X9 : raft_data X7 : list (name * msg) X11 : list raft_output X12 : raft_data X10 : list (name * msg) X14 : list raft_output X15 : raft_data X13 : list (name * msg) Unable to unify \"stateMachine ?M53913 = stateMachine ?M53910\" with \"lastApplied st' = lastApplied st\".", "type": "cannot_unify", "handled": true}, {"ctx": ["qsimpl time: 1 use: doLeader.", "destruct (type st) eqn:Etype.", "-", "destruct (shouldSend st) eqn:EshouldSend.", "+", "qsimpl time: 1 use: doLeader.", "destruct (map (replicaMessage st h) (filter (fun h0 : name => if name_eq_dec h h0 then false else true) nodes)) eqn:EreplicaMessages.", "*", "qsimpl time: 1 use: doLeader.", "qsimpl time: 1 use: doLeader.", "qsimpl time: 1 use: doLeader_log,doLeader.", "qsimpl time: 1 use: doLeader_log,doLeader_clientCache,doLeader.", "qsimpl time: 1 use: doLeader_stateMachine,doLeader_log,doLeader_clientCache,doLeader.", "qsimpl time: 1 use: doLeader_stateMachine,doLeader_currentTerm,doLeader_clientCache,doLeader_log,doLeader.", "qsimpl time: 1 use: doLeader_stateMachine,doLeader_currentTerm,doLeader_clientCache,doLeader_log,doLeader_matchIndex_preserved,doLeader.", "shelve.", "*", "qsimpl time: 1 use: doLeader_stateMachine,doLeader_currentTerm,doLeader_clientCache,doLeader_log,doLeader_matchIndex_preserved,doLeader.", "qsimpl time: 1 use: doLeader_stateMachine,doLeader_currentTerm,doLeader_clientCache,doLeader_log,doLeader_matchIndex_preserved,doLeader.", "qsimpl time: 1 use: doLeader_stateMachine,doLeader_currentTerm,doLeader_clientCache,doLeader_log,doLeader_matchIndex_preserved,doLeader.", "qsimpl time: 1 use: doLeader_stateMachine,doLeader_currentTerm,doLeader_clientCache,doLeader_log,doLeader_matchIndex_preserved,doLeader.", "qsimpl time: 1 use: doLeader_stateMachine,doLeader_currentTerm,doLeader_clientCache,doLeader_log,doLeader_matchIndex_preserved,doLeader.", "qsimpl time: 1 use: doLeader_stateMachine,doLeader_currentTerm,doLeader_clientCache,doLeader_log,doLeader_matchIndex_preserved,doLeader.", "qsimpl time: 1 use: doLeader_stateMachine,doLeader_currentTerm,doLeader_clientCache,doLeader_log,doLeader_matchIndex_preserved,doLeader.", "qsimpl time: 1 use: doLeader_stateMachine,doLeader_currentTerm,doLeader_clientCache,doLeader_log,doLeader_matchIndex_preserved,doLeader.", "shelve.", "+", "qsimpl time: 1 use: doLeader_stateMachine,doLeader_currentTerm,doLeader_clientCache,doLeader_log,doLeader_matchIndex_preserved,doLeader.", "qsimpl time: 1 use: doLeader_stateMachine,doLeader_currentTerm,doLeader_clientCache,doLeader_log,doLeader_matchIndex_preserved,doLeader.", "qsimpl time: 1 use: doLeader_stateMachine,doLeader_currentTerm,doLeader_clientCache,doLeader_log,doLeader_matchIndex_preserved,doLeader.", "qsimpl time: 1 use: doLeader_stateMachine,doLeader_currentTerm,doLeader_clientCache,doLeader_log,doLeader_matchIndex_preserved,doLeader.", "qsimpl time: 1 use: doLeader_stateMachine,doLeader_currentTerm,doLeader_clientCache,doLeader_log,doLeader_matchIndex_preserved,doLeader.", "qsimpl time: 1 use: doLeader_stateMachine,doLeader_currentTerm,doLeader_clientCache,doLeader_log,doLeader_matchIndex_preserved,doLeader."], "tactic": "apply doLeader_currentTerm.", "exn": "In environment orig_base_params : BaseParams raft_params : RaftParams orig_base_params H10 : forall (st : raft_data) (h : name) (os : list raft_output) (st' : raft_data) (ms : list (name * msg)), doLeader st h = (os, st', ms) -> log st' = log st H9 : forall (st : raft_data) (h : name) (os : list raft_output) (st' : raft_data) (ms : list (name * msg)), doLeader st h = (os, st', ms) -> clientCache st' = clientCache st H8 : forall (st : raft_data) (h : name) (os : list raft_output) (st' : raft_data) (ms : list (name * msg)), doLeader st h = (os, st', ms) -> currentTerm st' = currentTerm st H7 : forall (st : raft_data) (h : name) (os : list raft_output) (st' : raft_data) (ms : list (name * msg)), doLeader st h = (os, st', ms) -> stateMachine st' = stateMachine st p : raft_data -> name -> list raft_output * raft_data * list (name * msg) st : raft_data h : name os : list raft_output st' : raft_data ms : list (name * msg) H : p st h = (os, st', ms) init : data handler : input -> data -> output * data Etype : type st = Follower EshouldSend : shouldSend st = false X2 : list raft_output X3 : raft_data X1 : list (name * msg) H5 : forall (st : raft_data) (h : name) (os : list raft_output) (st' : raft_data) (ms : list (name * msg)), doLeader st h = (os, st', ms) -> type st' = Leader -> log st' = log st H6 : forall (st : raft_data) (h : name) (os : list raft_output) (st' : raft_data) (ms : list (name * msg)), doLeader st h = (os, st', ms) -> type st' = Leader -> matchIndex st' = matchIndex st H4 : forall (st : raft_data) (h : name) (os : list raft_output) (st' : raft_data) (ms : list (name * msg)), doLeader st h = (os, st', ms) -> type st' = Leader -> type st = Leader X5 : list raft_output X6 : raft_data X4 : list (name * msg) X8 : list raft_output X9 : raft_data X7 : list (name * msg) X11 : list raft_output X12 : raft_data X10 : list (name * msg) X14 : list raft_output X15 : raft_data X13 : list (name * msg) X17 : list raft_output X18 : raft_data X16 : list (name * msg) Unable to unify \"currentTerm ?M57175 = currentTerm ?M57172\" with \"lastApplied st' = lastApplied st\".", "type": "cannot_unify", "handled": true}, {"ctx": ["qsimpl time: 1 use: doLeader.", "destruct (type st) eqn:Etype.", "-", "destruct (shouldSend st) eqn:EshouldSend.", "+", "qsimpl time: 1 use: doLeader.", "destruct (map (replicaMessage st h) (filter (fun h0 : name => if name_eq_dec h h0 then false else true) nodes)) eqn:EreplicaMessages.", "*", "qsimpl time: 1 use: doLeader.", "qsimpl time: 1 use: doLeader.", "qsimpl time: 1 use: doLeader_log,doLeader.", "qsimpl time: 1 use: doLeader_log,doLeader_clientCache,doLeader.", "qsimpl time: 1 use: doLeader_stateMachine,doLeader_log,doLeader_clientCache,doLeader.", "qsimpl time: 1 use: doLeader_stateMachine,doLeader_currentTerm,doLeader_clientCache,doLeader_log,doLeader.", "qsimpl time: 1 use: doLeader_stateMachine,doLeader_currentTerm,doLeader_clientCache,doLeader_log,doLeader_matchIndex_preserved,doLeader.", "shelve.", "*", "qsimpl time: 1 use: doLeader_stateMachine,doLeader_currentTerm,doLeader_clientCache,doLeader_log,doLeader_matchIndex_preserved,doLeader.", "qsimpl time: 1 use: doLeader_stateMachine,doLeader_currentTerm,doLeader_clientCache,doLeader_log,doLeader_matchIndex_preserved,doLeader.", "qsimpl time: 1 use: doLeader_stateMachine,doLeader_currentTerm,doLeader_clientCache,doLeader_log,doLeader_matchIndex_preserved,doLeader.", "qsimpl time: 1 use: doLeader_stateMachine,doLeader_currentTerm,doLeader_clientCache,doLeader_log,doLeader_matchIndex_preserved,doLeader.", "qsimpl time: 1 use: doLeader_stateMachine,doLeader_currentTerm,doLeader_clientCache,doLeader_log,doLeader_matchIndex_preserved,doLeader.", "qsimpl time: 1 use: doLeader_stateMachine,doLeader_currentTerm,doLeader_clientCache,doLeader_log,doLeader_matchIndex_preserved,doLeader.", "qsimpl time: 1 use: doLeader_stateMachine,doLeader_currentTerm,doLeader_clientCache,doLeader_log,doLeader_matchIndex_preserved,doLeader.", "qsimpl time: 1 use: doLeader_stateMachine,doLeader_currentTerm,doLeader_clientCache,doLeader_log,doLeader_matchIndex_preserved,doLeader.", "shelve.", "+", "qsimpl time: 1 use: doLeader_stateMachine,doLeader_currentTerm,doLeader_clientCache,doLeader_log,doLeader_matchIndex_preserved,doLeader.", "qsimpl time: 1 use: doLeader_stateMachine,doLeader_currentTerm,doLeader_clientCache,doLeader_log,doLeader_matchIndex_preserved,doLeader.", "qsimpl time: 1 use: doLeader_stateMachine,doLeader_currentTerm,doLeader_clientCache,doLeader_log,doLeader_matchIndex_preserved,doLeader.", "qsimpl time: 1 use: doLeader_stateMachine,doLeader_currentTerm,doLeader_clientCache,doLeader_log,doLeader_matchIndex_preserved,doLeader.", "qsimpl time: 1 use: doLeader_stateMachine,doLeader_currentTerm,doLeader_clientCache,doLeader_log,doLeader_matchIndex_preserved,doLeader.", "qsimpl time: 1 use: doLeader_stateMachine,doLeader_currentTerm,doLeader_clientCache,doLeader_log,doLeader_matchIndex_preserved,doLeader.", "qsimpl time: 1 use: doLeader_stateMachine,doLeader_currentTerm,doLeader_clientCache,doLeader_log,doLeader_matchIndex_preserved,doLeader."], "tactic": "apply doLeader_matchIndex_preserved.", "exn": "In environment orig_base_params : BaseParams raft_params : RaftParams orig_base_params H3 : forall (st : raft_data) (h : name) (os : list raft_output) (st' : raft_data) (ms : list (name * msg)), doLeader st h = (os, st', ms) -> log st' = log st H2 : forall (st : raft_data) (h : name) (os : list raft_output) (st' : raft_data) (ms : list (name * msg)), doLeader st h = (os, st', ms) -> clientCache st' = clientCache st H1 : forall (st : raft_data) (h : name) (os : list raft_output) (st' : raft_data) (ms : list (name * msg)), doLeader st h = (os, st', ms) -> currentTerm st' = currentTerm st H0 : forall (st : raft_data) (h : name) (os : list raft_output) (st' : raft_data) (ms : list (name * msg)), doLeader st h = (os, st', ms) -> stateMachine st' = stateMachine st p : raft_data -> name -> list raft_output * raft_data * list (name * msg) st : raft_data h : name os : list raft_output st' : raft_data ms : list (name * msg) H : p st h = (os, st', ms) init : data handler : input -> data -> output * data Etype : type st = Follower EshouldSend : shouldSend st = false X2 : list raft_output X3 : raft_data X1 : list (name * msg) H5 : forall (st : raft_data) (h : name) (os : list raft_output) (st' : raft_data) (ms : list (name * msg)), doLeader st h = (os, st', ms) -> type st' = Leader -> log st' = log st H6 : forall (st : raft_data) (h : name) (os : list raft_output) (st' : raft_data) (ms : list (name * msg)), doLeader st h = (os, st', ms) -> type st' = Leader -> matchIndex st' = matchIndex st H4 : forall (st : raft_data) (h : name) (os : list raft_output) (st' : raft_data) (ms : list (name * msg)), doLeader st h = (os, st', ms) -> type st' = Leader -> type st = Leader X5 : list raft_output X6 : raft_data X4 : list (name * msg) X8 : list raft_output X9 : raft_data X7 : list (name * msg) X11 : list raft_output X12 : raft_data X10 : list (name * msg) X14 : list raft_output X15 : raft_data X13 : list (name * msg) X17 : list raft_output X18 : raft_data X16 : list (name * msg) X20 : list raft_output X21 : raft_data X19 : list (name * msg) Unable to unify \"type ?M60555 = Leader -> type ?M60552 = Leader /\\\\ matchIndex ?M60555 = matchIndex ?M60552 /\\\\ log ?M60555 = log ?M60552\" with \"lastApplied st' = lastApplied st\".", "type": "cannot_unify", "handled": true}]}, "chat": [{"role": "user", "content": "I will give you a Coq proof state, including both hypotheses and a specific goal and your need to prove it. Your response should be a singular code block of Coq proof starting with \"```coq\n\", ending with \"Qed.```\", without any additional explanation or commentary. Follow to these guidelines:\nIntroduce variables using unique names to avoid any conflicts.\nKeep each command distinct and separated, avoid concatenations like ';' or '[cmd|cmd]'.\nOrganize your proof with bullets like '-', '+', and '*' instead of braces ({, }). Shift to their double symbols like '--' and '++', when necessary.\nEffectively use given premises, follow the syntax and structure demonstrated in the examples provided.\n\nExample 1:\n\nHypotheses:\nn, m: nat\nIHn: m + n = n + m\n\nGoal:\nm + S n = S n + m\n\nProof:\n```coq\nsimpl. rewrite <- IHn. auto.\nQed.```\n\nExample 2:\nHypotheses:\n\nGoal:\nforall n m : nat, m + n = n + m\n\n```coq\nintros n m. induction n.\n- simpl. auto.\n- simpl. rewrite <- IHn. auto.\nQed.```\n\nSolve This Proof State:\n\nHypotheses:\norig_base_params: BaseParams\none_node_params: OneNodeParams orig_base_params\nraft_params: RaftParams orig_base_params\n\nGoal:\nforall (st : raft_data) (h : name) (os : list raft_output) (st' : raft_data) (ms : list (name * msg)), doLeader st h = (os, st', ms) -> lastApplied st' = lastApplied st\n\nPremises:\ndoLeader = fun (orig_base_params : BaseParams) (raft_params : RaftParams orig_base_params) (state : raft_data) (me : name) => match type state with | Leader => let state' := advanceCommitIndex state me in if shouldSend state' then let state'0 := {[state' with shouldSend := false]} in let replicaMessages := map (replicaMessage state'0 me) (filter (fun h : name => if name_eq_dec me h then false else true) nodes) in ([], state'0, replicaMessages) else ([], state', []) | _ => ([], state, []) end : forall (orig_base_params : BaseParams) (raft_params : RaftParams orig_base_params), raft_data -> name -> list raft_output * raft_data * list (name * msg) Arguments do\nname = fun (orig_base_params : BaseParams) (raft_params : RaftParams orig_base_params) => fin N : forall orig_base_params : BaseParams, RaftParams orig_base_params -> Type Arguments name {orig_base_params raft_params}\nNotation lastApplied := (RaftState.lastApplied term name entry logIndex serverType data clientId output)\nInductive list (A : Type) : Type := nil : list A | cons : A -> list A -> list A Arguments list _%type_scope Arguments nil {A}%type_scope Arguments cons {A}%type_scope a l%list_scope : rename\nraft_data = fun (orig_base_params : BaseParams) (raft_params : RaftParams orig_base_params) => RaftState.raft_data term name entry logIndex serverType data clientId output : forall orig_base_params : BaseParams, RaftParams orig_base_params -> Type Arguments raft_data {orig_base_params raft_params}\nInductive msg (orig_base_params : BaseParams) (raft_params : RaftParams orig_base_params) : Type := RequestVote : term -> name -> logIndex -> term -> msg | RequestVoteReply : term -> bool -> msg | AppendEntries : term -> name -> logIndex -> term -> list entry -> logIndex -> msg | AppendEntriesReply : term -> list entry -> bool -> msg Arguments msg {orig_base_params raft_params} Arguments RequestVote {orig_base_params raft_params} Arguments RequestVoteReply {orig_base_params raft_params} _ _%bool_scope Arguments AppendEntries {orig_base_params raft_params} _ _ _ _ _%list_scope Arguments AppendEntriesReply {orig_base_params raft_params} _ _%list_scope _%bool_scope\nRecord RaftParams (orig_base_params : BaseParams) : Type := Build_RaftParams { N : nat; input_eq_dec : forall x y : input, {x = y} + {x <> y}; output_eq_dec : forall x y : output, {x = y} + {x <> y}; clientId : Type; clientId_eq_dec : forall x y : clientId, {x = y} + {x <> y} } Arguments Build_RaftParams _ _%nat_scope (_ _)%function_scope [clientId]%type_scope _%function_scope\nRecord OneNodeParams (P : BaseParams) : Type := Build_OneNodeParams { init : data; handler : input -> data -> output * data } Arguments Build_OneNodeParams _ _ _%function_scope\nInductive raft_output (orig_base_params : BaseParams) (raft_params : RaftParams orig_base_params) : Type := NotLeader : clientId -> nat -> raft_output | ClientResponse : clientId -> nat -> output -> raft_output Arguments raft_output {orig_base_params raft_params} Arguments NotLeader {orig_base_params raft_params} _ _%nat_scope Arguments ClientResponse {orig_base_params raft_params} _ _%nat_scope\ndoLeader_log : forall (st : raft_data) (h : name) (os : list raft_output) (st' : raft_data) (ms : list (name * msg)), doLeader st h = (os, st', ms) -> log st' = log st\ndoLeader_clientCache : forall (st : raft_data) (h : name) (os : list raft_output) (st' : raft_data) (ms : list (name * msg)), doLeader st h = (os, st', ms) -> clientCache st' = clientCache st\ndoLeader_stateMachine : forall (st : raft_data) (h : name) (os : list raft_output) (st' : raft_data) (ms : list (name * msg)), doLeader st h = (os, st', ms) -> stateMachine st' = stateMachine st\ndoLeader_currentTerm : forall (st : raft_data) (h : name) (os : list raft_output) (st' : raft_data) (ms : list (name * msg)), doLeader st h = (os, st', ms) -> currentTerm st' = currentTerm st\ndoLeader_matchIndex_preserved : forall (st : raft_data) (h : name) (os : list raft_output) (st' : raft_data) (ms : list (name * msg)), doLeader st h = (os, st', ms) -> matchIndex_preserved st st'\ndoLeader_type : forall (st : raft_data) (h : name) (os : list raft_output) (st' : raft_data) (ms : list (name * msg)), doLeader st h = (os, st', ms) -> type st' = type st /\\ currentTerm st' = currentTerm st\ndoLeader_same_log : forall (st : raft_data) (n : name) (os : list raft_output) (st' : raft_data) (ms : list (name * msg)), doLeader st n = (os, st', ms) -> log st' = log st\ntryToBecomeLeader_same_lastApplied : forall (n : name) (st : raft_data) (out : list raft_output) (st' : raft_data) (ms : list (name * msg)), tryToBecomeLeader n st = (out, st', ms) -> lastApplied st' = lastApplied st\ndoGenericServer_currentTerm : forall (h : name) (st : raft_data) (os : list raft_output) (st' : raft_data) (ms : list (name * msg)), doGenericServer h st = (os, st', ms) -> currentTerm st' = currentTerm st\ndoGenericServer_type : forall (h : name) (st : raft_data) (os : list raft_output) (st' : raft_data) (ms : list (name * msg)), doGenericServer h st = (os, st', ms) -> type st' = type st /\\ currentTerm st' = currentTerm st\nhandleTimeout_lastApplied : forall (h : name) (st : raft_data) (out : list raft_output) (st' : raft_data) (ps : list (name * msg)), handleTimeout h st = (out, st', ps) -> lastApplied st' = lastApplied st\ndoLeader_appliedEntries : forall (sigma : name -> raft_data) (h : name) (os : list raft_output) (st' : raft_data) (ms : list (name * msg)), doLeader (sigma h) h = (os, st', ms) -> applied_entries (update name_eq_dec sigma h st') = applied_entries sigma\nhandleClientRequest_lastApplied : forall (h : name) (st : raft_data) (client : clientId) (id : nat) (c : input) (out : list raft_output) (st' : raft_data) (ps : list (name * msg)), handleClientRequest h st client id c = (out, st', ps) -> lastApplied st' = lastApplied st\ndoGenericServer_log : forall (h : name) (st : raft_data) (os : list raft_output) (st' : raft_data) (ps : list (name * msg)), doGenericServer h st = (os, st', ps) -> log st' = log st\ndoGenericServer_matchIndex_preserved : forall (h : name) (st : raft_data) (os : list raft_output) (st' : raft_data) (ps : list (name * msg)), doGenericServer h st = (os, st', ps) -> matchIndex_preserved st st'\ndoGenericServer_commitIndex : forall (h : name) (st : raft_data) (out : list raft_output) (st' : raft_data) (ms : list (name * msg)), doGenericServer h st = (out, st', ms) -> commitIndex st' = commitIndex st\ndoGenericServer_packets : forall (h : name) (st : raft_data) (os : list raft_output) (st' : raft_data) (ps : list (name * msg)), doGenericServer h st = (os, st', ps) -> ps = []\ntryToBecomeLeader_stateMachine : forall (n : name) (st : raft_data) (out : list raft_output) (st' : raft_data) (ms : list (name * msg)), tryToBecomeLeader n st = (out, st', ms) -> stateMachine st' = stateMachine st\ntryToBecomeLeader_same_log : forall (n : name) (st : raft_data) (out : list raft_output) (st' : raft_data) (ms : list (name * msg)), tryToBecomeLeader n st = (out, st', ms) -> log st' = log st\ntryToBecomeLeader_clientCache : forall (n : name) (st : raft_data) (out : list raft_output) (st' : raft_data) (ms : list (name * msg)), tryToBecomeLeader n st = (out, st', ms) -> clientCache st' = clientCache st\ntryToBecomeLeader_matchIndex_preserved : forall (n : name) (st : raft_data) (out : list raft_output) (st' : raft_data) (ms : list (name * msg)), tryToBecomeLeader n st = (out, st', ms) -> matchIndex_preserved st st'\nhandleRequestVote_same_lastApplied : forall (n : name) (st : RaftState.raft_data term name entry logIndex serverType data clientId output) (t : nat) (c : fin N) (li lt : nat) (st' : raft_data) (ms : msg), handleRequestVote n st t c li lt = (st', ms) -> lastApplied st' = lastApplied st\nhandleTimeout_clientCache : forall (h : name) (st : raft_data) (out : list raft_output) (st' : raft_data) (ps : list (name * msg)), handleTimeout h st = (out, st', ps) -> clientCache st' = clientCache st\nhandleTimeout_commitIndex : forall (h : name) (st : raft_data) (out : list raft_output) (st' : raft_data) (l : list (name * msg)), handleTimeout h st = (out, st', l) -> commitIndex st' = commitIndex st\nhandleTimeout_stateMachine : forall (h : name) (st : raft_data) (out : list raft_output) (st' : raft_data) (ps : list (name * msg)), handleTimeout h st = (out, st', ps) -> stateMachine st' = stateMachine st\nraft_net_invariant_do_leader = fun (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params) (P : network -> Prop) => forall (net : network) (st' : name -> data) (ps' : list packet) (d : raft_data) (h : name) (os : list raft_output) (d' : raft_data) (ms : list (name * msg)), doLeader d h = (os, d', ms) -> P net -> raft_intermediate_reachable net -> nwState net h = d -> (forall h' : name, st' h' = update name_eq_dec (nwState net) h d' h') ->...-> Prop Arguments raft_net_invariant_do_leader {orig_base_params one_node_params raft_params} _%function_scope\nhandleTimeout_matchIndex_preserved : forall (h : name) (st : raft_data) (out : list raft_output) (st' : raft_data) (ps : list (name * msg)), handleTimeout h st = (out, st', ps) -> matchIndex_preserved st st'\nhandleAppendEntries_same_lastApplied : forall (h : name) (st : raft_data) (t : term) (n : name) (pli : logIndex) (plt : term) (es : list entry) (ci : logIndex) (st' : raft_data) (ps : msg), handleAppendEntries h st t n pli plt es ci = (st', ps) -> lastApplied st' = lastApplied st\nhandleTimeout_type : forall (h : name) (st : raft_data) (out : list raft_output) (st' : raft_data) (l : list (name * msg)), handleTimeout h st = (out, st', l) -> type st' = type st /\\ currentTerm st' = currentTerm st \\/ type st' = Candidate\ntryToBecomeLeader_currentTerm : forall (h : name) (st : raft_data) (out : list raft_output) (st' : raft_data) (l : list (name * msg)), tryToBecomeLeader h st = (out, st', l) -> currentTerm st <= currentTerm st'"}, {"role": "assistant", "content": "```coq\nProof.\nunfold doLeader in e.\ndestruct (type st) eqn:Etype.\n- destruct (shouldSend state') eqn:EshouldSend.\n  + rewrite EshouldSend.\n    destruct (map (replicaMessage state'0 h) (filter (fun h0 : name => if name_eq_dec h h0 then false else true) nodes)) eqn:EreplicaMessages.\n    * simpl in e.\n      rewrite <- Etype, <- EshouldSend.\n      apply doLeader_log.\n      apply doLeader_clientCache.\n      apply doLeader_stateMachine.\n      apply doLeader_currentTerm.\n      apply doLeader_matchIndex_preserved.\n  + rewrite EshouldSend.\n    simpl in e.\n    rewrite <- Etype, <- EshouldSend.\n    apply doLeader_log.\n    apply doLeader_clientCache.\n    apply doLeader_stateMachine.\n    apply doLeader_currentTerm.\n    apply doLeader_matchIndex_preserved.\n- rewrite Etype.\n  simpl in e.\n  rewrite <- Etype.\n  apply doLeader_log.\n  apply doLeader_clientCache.\n  apply doLeader_stateMachine.\n  apply doLeader_currentTerm.\n  apply doLeader_matchIndex_preserved.\nQed."}], "original": "unfold doLeader in e. destruct (type st) eqn:Etype. - destruct (shouldSend state') eqn:EshouldSend. + rewrite EshouldSend. destruct (map (replicaMessage state'0 h) (filter (fun h0 : name => if name_eq_dec h h0 then false else true) nodes)) eqn:EreplicaMessages. * simpl in e. rewrite <- Etype, <- EshouldSend. apply doLeader_log. apply doLeader_clientCache. apply doLeader_stateMachine. apply doLeader_currentTerm. apply doLeader_matchIndex_preserved. + rewrite EshouldSend. simpl in e. rewrite <- Etype, <- EshouldSend. apply doLeader_log. apply doLeader_clientCache. apply doLeader_stateMachine. apply doLeader_currentTerm. apply doLeader_matchIndex_preserved. - rewrite Etype. simpl in e. rewrite <- Etype. apply doLeader_log. apply doLeader_clientCache. apply doLeader_stateMachine. apply doLeader_currentTerm. apply doLeader_matchIndex_preserved.", "succ": false}]