[{"history": {"proof": "qsimpl time: 1 use: nwPackets. qsimpl time: 1 use: in_or_app,nwPackets. qsimpl time: 1 use: in_or_app,nwPackets. qsimpl time: 1 use: in_eq,in_or_app,nwPackets. qsimpl time: 1 use: in_eq,in_or_app,nwPackets. qsimpl time: 1 use: in_eq,in_or_app,nwPackets. qsimpl time: 1 use: in_eq,in_or_app,nwPackets. qsimpl time: 1 use: in_eq,in_or_app,nwPackets. qsimpl time: 1 use: in_eq,in_or_app,nwPackets. qsimpl time: 1 use: in_eq,in_or_app,nwPackets. qsimpl time: 1 use: in_eq,in_or_app,nwPackets. qsimpl time: 1 use: in_eq,in_or_app,nwPackets. qsimpl time: 1 use: in_eq,in_or_app,nwPackets. qsimpl time: 1 use: in_eq,in_or_app,nwPackets. qsimpl time: 1 use: in_eq,in_or_app,nwPackets. qsimpl time: 1 use: in_eq,in_or_app,nwPackets. qsimpl time: 1 use: in_eq,in_or_app,nwPackets. qsimpl time: 1 use: in_eq,in_or_app,nwPackets. qsimpl time: 1 use: in_eq,in_or_app,nwPackets. qsimpl time: 1 use: in_eq,in_or_app,nwPackets. qsimpl time: 1 use: in_eq,in_or_app,nwPackets. qsimpl time: 1 use: in_eq,in_or_app,nwPackets. qsimpl time: 1 use: in_eq,in_or_app,nwPackets. qsimpl time: 1 use: in_eq,in_or_app,nwPackets. qsimpl time: 1 use: in_eq,in_or_app,nwPackets. qsimpl time: 1 use: in_eq,in_or_app,nwPackets. qsimpl time: 1 use: in_eq,in_or_app,nwPackets. qsimpl time: 1 use: in_eq,in_or_app,nwPackets. qsimpl time: 1 use: in_eq,in_or_app,nwPackets. qsimpl time: 1 use: in_eq,in_or_app,nwPackets. qsimpl time: 1 use: in_eq,in_or_app,nwPackets. qsimpl time: 1 use: in_eq,in_or_app,nwPackets. qsimpl time: 1 use: in_eq,in_or_app,nwPackets. qsimpl time: 1 use: in_eq,in_or_app,nwPackets. qsimpl time: 1 use: in_eq,in_or_app,nwPackets. qsimpl time: 1 use: in_eq,in_or_app,nwPackets. qsimpl time: 1 use: in_eq,in_or_app,nwPackets. qsimpl time: 1 use: in_eq,in_or_app,nwPackets. qsimpl time: 1 use: in_eq,in_or_app,nwPackets. qsimpl time: 1 use: in_eq,in_or_app,nwPackets. qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "repairs": ["not_inductive_product", "cannot_unify", "not_inductive_product", "cannot_unify", "cannot_unify", "not_inductive_product", "cannot_unify", "not_inductive_product", "cannot_unify", "not_inductive_product", "cannot_unify", "not_inductive_product", "cannot_unify", "not_inductive_product", "cannot_unify", "not_inductive_product", "cannot_unify", "not_inductive_product", "cannot_unify", "not_inductive_product", "cannot_unify", "not_inductive_product", "cannot_unify", "not_inductive_product", "cannot_unify", "not_inductive_product", "cannot_unify", "not_inductive_product", "cannot_unify", "not_inductive_product", "cannot_unify", "not_inductive_product", "cannot_unify", "not_inductive_product", "cannot_unify", "not_inductive_product", "cannot_unify", "not_inductive_product", "cannot_unify", "not_inductive_product", "cannot_unify"], "exceptions": [{"ctx": [], "tactic": "intros net p t n pli plt es ci.", "exn": "No product even after head-reduction.", "type": "no_product", "handled": true}, {"ctx": ["intros.", "unfold In in *."], "tactic": "destruct (nwPackets net) as [| p' ps]; [left | right].", "exn": "Not an inductive product.", "type": "not_inductive_product", "handled": true}, {"ctx": ["intros.", "unfold In in *.", "qsimpl time: 1 use: nwPackets."], "tactic": "apply in_or_app.", "exn": "In environment orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params net : network p : packet H : (fix In (a : packet) (l : list packet) {struct l} : Prop := match l with | [] => False | b :: m => b = a \\\\/ In a m end) p (nwPackets net) X0 : list packet allEntries_indices_gt_0_invariant : forall net : network, refined_raft_intermediate_reachable net -> allEntries_indices_gt_0 net handleAppendEntries_logs_sorted : forall (net : network) (p : packet) (t : term) (n : name) (pli : logIndex) (plt : term) (es : list entry) (ci : logIndex) (st' : raft_data) (m : msg), raft_intermediate_reachable net -> logs_sorted net -> handleAppendEntries (pDst p) (nwState net (pDst p)) t n pli plt es ci = (st', m) -> pBody p = AppendEntries t n pli plt es ci -> In p (nwPackets net) -> sorted (log st') handleClientRequest_logs_sorted : forall (h : name) (client : clientId) (id : nat) (c : input) (out : list raft_output) (st : raft_data) (l : list (name * msg)) (net : network), handleClientRequest h (nwState net h) client id c = (out, st, l) -> raft_intermediate_reachable net -> logs_sorted_host net -> sorted (log st) logs_sorted_invariant : forall net : network, raft_intermediate_reachable net -> logs_sorted net log_matching_invariant : forall net : network, raft_intermediate_reachable net -> log_matching net refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (deghost net) Unable to unify \"(fix In (a : ?M3398) (l : list ?M3398) {struct l} : Prop := match l with | [] => False | b :: m => b = a \\\\/ In a m end) ?M3401 (?M3399 ++ ?M3400)\" with \"(fix In (a : packet) (l : list packet) {struct l} : Prop := match l with | [] => False | b :: m => b = a \\\\/ In a m end) {| pSrc := pSrc p; pDst := pDst p; pBody := pBody p |} (map (fun p : packet => {| pSrc := pSrc p; pDst := pDst p; pBody := pBody p |}) (nwPackets net))\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros.", "unfold In in *.", "qsimpl time: 1 use: nwPackets.", "qsimpl time: 1 use: in_or_app,nwPackets."], "tactic": "left.", "exn": "Not an inductive product.", "type": "not_inductive_product", "handled": true}, {"ctx": ["intros.", "unfold In in *.", "qsimpl time: 1 use: nwPackets.", "qsimpl time: 1 use: in_or_app,nwPackets.", "qsimpl time: 1 use: in_or_app,nwPackets."], "tactic": "apply in_eq.", "exn": "In environment orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params net : network p : packet H : (fix In (a : packet) (l : list packet) {struct l} : Prop := match l with | [] => False | b :: m => b = a \\\\/ In a m end) p (nwPackets net) X0 : list packet allEntries_indices_gt_0_invariant : forall net : network, refined_raft_intermediate_reachable net -> allEntries_indices_gt_0 net handleAppendEntries_logs_sorted : forall (net : network) (p : packet) (t : term) (n : name) (pli : logIndex) (plt : term) (es : list entry) (ci : logIndex) (st' : raft_data) (m : msg), raft_intermediate_reachable net -> logs_sorted net -> handleAppendEntries (pDst p) (nwState net (pDst p)) t n pli plt es ci = (st', m) -> pBody p = AppendEntries t n pli plt es ci -> In p (nwPackets net) -> sorted (log st') handleClientRequest_logs_sorted : forall (h : name) (client : clientId) (id : nat) (c : input) (out : list raft_output) (st : raft_data) (l : list (name * msg)) (net : network), handleClientRequest h (nwState net h) client id c = (out, st, l) -> raft_intermediate_reachable net -> logs_sorted_host net -> sorted (log st) logs_sorted_invariant : forall net : network, raft_intermediate_reachable net -> logs_sorted net log_matching_invariant : forall net : network, raft_intermediate_reachable net -> log_matching net refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (deghost net) X1 : list packet H0 : forall (A : Type) (l m : list A) (a : A), In a m -> In a (l ++ m) H1 : forall (A : Type) (l m : list A) (a : A), In a l -> In a (l ++ m) X2 : list packet Unable to unify \"?M6797 = ?M6797 \\\\/ (fix In (a : ?M6796) (l : list ?M6796) {struct l} : Prop := match l with | [] => False | b :: m => b = a \\\\/ In a m end) ?M6797 ?M6798\" with \"(fix In (a : packet) (l : list packet) {struct l} : Prop := match l with | [] => False | b :: m => b = a \\\\/ In a m end) {| pSrc := pSrc p; pDst := pDst p; pBody := pBody p |} (map (fun p : packet => {| pSrc := pSrc p; pDst := pDst p; pBody := pBody p |}) (nwPackets net))\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros.", "unfold In in *.", "qsimpl time: 1 use: nwPackets.", "qsimpl time: 1 use: in_or_app,nwPackets.", "qsimpl time: 1 use: in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets."], "tactic": "apply in_or_app.", "exn": "In environment orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params H2 : forall (A : Type) (a : A) (l : list A), a = a \\\\/ In a l net : network p : packet H : (fix In (a : packet) (l : list packet) {struct l} : Prop := match l with | [] => False | b :: m => b = a \\\\/ In a m end) p (nwPackets net) X0 : list packet allEntries_indices_gt_0_invariant : forall net : network, refined_raft_intermediate_reachable net -> allEntries_indices_gt_0 net handleAppendEntries_logs_sorted : forall (net : network) (p : packet) (t : term) (n : name) (pli : logIndex) (plt : term) (es : list entry) (ci : logIndex) (st' : raft_data) (m : msg), raft_intermediate_reachable net -> logs_sorted net -> handleAppendEntries (pDst p) (nwState net (pDst p)) t n pli plt es ci = (st', m) -> pBody p = AppendEntries t n pli plt es ci -> In p (nwPackets net) -> sorted (log st') handleClientRequest_logs_sorted : forall (h : name) (client : clientId) (id : nat) (c : input) (out : list raft_output) (st : raft_data) (l : list (name * msg)) (net : network), handleClientRequest h (nwState net h) client id c = (out, st, l) -> raft_intermediate_reachable net -> logs_sorted_host net -> sorted (log st) logs_sorted_invariant : forall net : network, raft_intermediate_reachable net -> logs_sorted net log_matching_invariant : forall net : network, raft_intermediate_reachable net -> log_matching net refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (deghost net) X1 : list packet H0 : forall (A : Type) (l m : list A) (a : A), In a m -> In a (l ++ m) H1 : forall (A : Type) (l m : list A) (a : A), In a l -> In a (l ++ m) X2, X3 : list packet Unable to unify \"(fix In (a : ?M8579) (l : list ?M8579) {struct l} : Prop := match l with | [] => False | b :: m => b = a \\\\/ In a m end) ?M8582 (?M8580 ++ ?M8581)\" with \"(fix In (a : packet) (l : list packet) {struct l} : Prop := match l with | [] => False | b :: m => b = a \\\\/ In a m end) {| pSrc := pSrc p; pDst := pDst p; pBody := pBody p |} (map (fun p : packet => {| pSrc := pSrc p; pDst := pDst p; pBody := pBody p |}) (nwPackets net))\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros.", "unfold In in *.", "qsimpl time: 1 use: nwPackets.", "qsimpl time: 1 use: in_or_app,nwPackets.", "qsimpl time: 1 use: in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets."], "tactic": "right.", "exn": "Not an inductive product.", "type": "not_inductive_product", "handled": true}, {"ctx": ["intros.", "unfold In in *.", "qsimpl time: 1 use: nwPackets.", "qsimpl time: 1 use: in_or_app,nwPackets.", "qsimpl time: 1 use: in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets."], "tactic": "apply in_or_app.", "exn": "In environment orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params H2 : forall (A : Type) (a : A) (l : list A), a = a \\\\/ In a l net : network p : packet H : (fix In (a : packet) (l : list packet) {struct l} : Prop := match l with | [] => False | b :: m => b = a \\\\/ In a m end) p (nwPackets net) X0 : list packet allEntries_indices_gt_0_invariant : forall net : network, refined_raft_intermediate_reachable net -> allEntries_indices_gt_0 net handleAppendEntries_logs_sorted : forall (net : network) (p : packet) (t : term) (n : name) (pli : logIndex) (plt : term) (es : list entry) (ci : logIndex) (st' : raft_data) (m : msg), raft_intermediate_reachable net -> logs_sorted net -> handleAppendEntries (pDst p) (nwState net (pDst p)) t n pli plt es ci = (st', m) -> pBody p = AppendEntries t n pli plt es ci -> In p (nwPackets net) -> sorted (log st') handleClientRequest_logs_sorted : forall (h : name) (client : clientId) (id : nat) (c : input) (out : list raft_output) (st : raft_data) (l : list (name * msg)) (net : network), handleClientRequest h (nwState net h) client id c = (out, st, l) -> raft_intermediate_reachable net -> logs_sorted_host net -> sorted (log st) logs_sorted_invariant : forall net : network, raft_intermediate_reachable net -> logs_sorted net log_matching_invariant : forall net : network, raft_intermediate_reachable net -> log_matching net refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (deghost net) X1 : list packet H0 : forall (A : Type) (l m : list A) (a : A), In a m -> In a (l ++ m) H1 : forall (A : Type) (l m : list A) (a : A), In a l -> In a (l ++ m) X2, X3, X4, X5 : list packet Unable to unify \"(fix In (a : ?M12205) (l : list ?M12205) {struct l} : Prop := match l with | [] => False | b :: m => b = a \\\\/ In a m end) ?M12208 (?M12206 ++ ?M12207)\" with \"(fix In (a : packet) (l : list packet) {struct l} : Prop := match l with | [] => False | b :: m => b = a \\\\/ In a m end) {| pSrc := pSrc p; pDst := pDst p; pBody := pBody p |} (map (fun p : packet => {| pSrc := pSrc p; pDst := pDst p; pBody := pBody p |}) (nwPackets net))\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros.", "unfold In in *.", "qsimpl time: 1 use: nwPackets.", "qsimpl time: 1 use: in_or_app,nwPackets.", "qsimpl time: 1 use: in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets."], "tactic": "right.", "exn": "Not an inductive product.", "type": "not_inductive_product", "handled": true}, {"ctx": ["intros.", "unfold In in *.", "qsimpl time: 1 use: nwPackets.", "qsimpl time: 1 use: in_or_app,nwPackets.", "qsimpl time: 1 use: in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets."], "tactic": "apply in_or_app.", "exn": "In environment orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params H2 : forall (A : Type) (a : A) (l : list A), a = a \\\\/ In a l net : network p : packet H : (fix In (a : packet) (l : list packet) {struct l} : Prop := match l with | [] => False | b :: m => b = a \\\\/ In a m end) p (nwPackets net) X0 : list packet allEntries_indices_gt_0_invariant : forall net : network, refined_raft_intermediate_reachable net -> allEntries_indices_gt_0 net handleAppendEntries_logs_sorted : forall (net : network) (p : packet) (t : term) (n : name) (pli : logIndex) (plt : term) (es : list entry) (ci : logIndex) (st' : raft_data) (m : msg), raft_intermediate_reachable net -> logs_sorted net -> handleAppendEntries (pDst p) (nwState net (pDst p)) t n pli plt es ci = (st', m) -> pBody p = AppendEntries t n pli plt es ci -> In p (nwPackets net) -> sorted (log st') handleClientRequest_logs_sorted : forall (h : name) (client : clientId) (id : nat) (c : input) (out : list raft_output) (st : raft_data) (l : list (name * msg)) (net : network), handleClientRequest h (nwState net h) client id c = (out, st, l) -> raft_intermediate_reachable net -> logs_sorted_host net -> sorted (log st) logs_sorted_invariant : forall net : network, raft_intermediate_reachable net -> logs_sorted net log_matching_invariant : forall net : network, raft_intermediate_reachable net -> log_matching net refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (deghost net) X1 : list packet H0 : forall (A : Type) (l m : list A) (a : A), In a m -> In a (l ++ m) H1 : forall (A : Type) (l m : list A) (a : A), In a l -> In a (l ++ m) X2, X3, X4, X5, X6, X7 : list packet Unable to unify \"(fix In (a : ?M15911) (l : list ?M15911) {struct l} : Prop := match l with | [] => False | b :: m => b = a \\\\/ In a m end) ?M15914 (?M15912 ++ ?M15913)\" with \"(fix In (a : packet) (l : list packet) {struct l} : Prop := match l with | [] => False | b :: m => b = a \\\\/ In a m end) {| pSrc := pSrc p; pDst := pDst p; pBody := pBody p |} (map (fun p : packet => {| pSrc := pSrc p; pDst := pDst p; pBody := pBody p |}) (nwPackets net))\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros.", "unfold In in *.", "qsimpl time: 1 use: nwPackets.", "qsimpl time: 1 use: in_or_app,nwPackets.", "qsimpl time: 1 use: in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets."], "tactic": "right.", "exn": "Not an inductive product.", "type": "not_inductive_product", "handled": true}, {"ctx": ["intros.", "unfold In in *.", "qsimpl time: 1 use: nwPackets.", "qsimpl time: 1 use: in_or_app,nwPackets.", "qsimpl time: 1 use: in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets."], "tactic": "apply in_or_app.", "exn": "In environment orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params H2 : forall (A : Type) (a : A) (l : list A), a = a \\\\/ In a l net : network p : packet H : (fix In (a : packet) (l : list packet) {struct l} : Prop := match l with | [] => False | b :: m => b = a \\\\/ In a m end) p (nwPackets net) X0 : list packet allEntries_indices_gt_0_invariant : forall net : network, refined_raft_intermediate_reachable net -> allEntries_indices_gt_0 net handleAppendEntries_logs_sorted : forall (net : network) (p : packet) (t : term) (n : name) (pli : logIndex) (plt : term) (es : list entry) (ci : logIndex) (st' : raft_data) (m : msg), raft_intermediate_reachable net -> logs_sorted net -> handleAppendEntries (pDst p) (nwState net (pDst p)) t n pli plt es ci = (st', m) -> pBody p = AppendEntries t n pli plt es ci -> In p (nwPackets net) -> sorted (log st') handleClientRequest_logs_sorted : forall (h : name) (client : clientId) (id : nat) (c : input) (out : list raft_output) (st : raft_data) (l : list (name * msg)) (net : network), handleClientRequest h (nwState net h) client id c = (out, st, l) -> raft_intermediate_reachable net -> logs_sorted_host net -> sorted (log st) logs_sorted_invariant : forall net : network, raft_intermediate_reachable net -> logs_sorted net log_matching_invariant : forall net : network, raft_intermediate_reachable net -> log_matching net refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (deghost net) X1 : list packet H0 : forall (A : Type) (l m : list A) (a : A), In a m -> In a (l ++ m) H1 : forall (A : Type) (l m : list A) (a : A), In a l -> In a (l ++ m) X2, X3, X4, X5, X6, X7, X8, X9 : list packet Unable to unify \"(fix In (a : ?M19697) (l : list ?M19697) {struct l} : Prop := match l with | [] => False | b :: m => b = a \\\\/ In a m end) ?M19700 (?M19698 ++ ?M19699)\" with \"(fix In (a : packet) (l : list packet) {struct l} : Prop := match l with | [] => False | b :: m => b = a \\\\/ In a m end) {| pSrc := pSrc p; pDst := pDst p; pBody := pBody p |} (map (fun p : packet => {| pSrc := pSrc p; pDst := pDst p; pBody := pBody p |}) (nwPackets net))\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros.", "unfold In in *.", "qsimpl time: 1 use: nwPackets.", "qsimpl time: 1 use: in_or_app,nwPackets.", "qsimpl time: 1 use: in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets."], "tactic": "right.", "exn": "Not an inductive product.", "type": "not_inductive_product", "handled": true}, {"ctx": ["intros.", "unfold In in *.", "qsimpl time: 1 use: nwPackets.", "qsimpl time: 1 use: in_or_app,nwPackets.", "qsimpl time: 1 use: in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets."], "tactic": "apply in_or_app.", "exn": "In environment orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params H2 : forall (A : Type) (a : A) (l : list A), a = a \\\\/ In a l net : network p : packet H : (fix In (a : packet) (l : list packet) {struct l} : Prop := match l with | [] => False | b :: m => b = a \\\\/ In a m end) p (nwPackets net) X0 : list packet allEntries_indices_gt_0_invariant : forall net : network, refined_raft_intermediate_reachable net -> allEntries_indices_gt_0 net handleAppendEntries_logs_sorted : forall (net : network) (p : packet) (t : term) (n : name) (pli : logIndex) (plt : term) (es : list entry) (ci : logIndex) (st' : raft_data) (m : msg), raft_intermediate_reachable net -> logs_sorted net -> handleAppendEntries (pDst p) (nwState net (pDst p)) t n pli plt es ci = (st', m) -> pBody p = AppendEntries t n pli plt es ci -> In p (nwPackets net) -> sorted (log st') handleClientRequest_logs_sorted : forall (h : name) (client : clientId) (id : nat) (c : input) (out : list raft_output) (st : raft_data) (l : list (name * msg)) (net : network), handleClientRequest h (nwState net h) client id c = (out, st, l) -> raft_intermediate_reachable net -> logs_sorted_host net -> sorted (log st) logs_sorted_invariant : forall net : network, raft_intermediate_reachable net -> logs_sorted net log_matching_invariant : forall net : network, raft_intermediate_reachable net -> log_matching net refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (deghost net) X1 : list packet H0 : forall (A : Type) (l m : list A) (a : A), In a m -> In a (l ++ m) H1 : forall (A : Type) (l m : list A) (a : A), In a l -> In a (l ++ m) X2, X3, X4, X5, X6, X7, X8, X9, X10, X11 : list packet Unable to unify \"(fix In (a : ?M23563) (l : list ?M23563) {struct l} : Prop := match l with | [] => False | b :: m => b = a \\\\/ In a m end) ?M23566 (?M23564 ++ ?M23565)\" with \"(fix In (a : packet) (l : list packet) {struct l} : Prop := match l with | [] => False | b :: m => b = a \\\\/ In a m end) {| pSrc := pSrc p; pDst := pDst p; pBody := pBody p |} (map (fun p : packet => {| pSrc := pSrc p; pDst := pDst p; pBody := pBody p |}) (nwPackets net))\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros.", "unfold In in *.", "qsimpl time: 1 use: nwPackets.", "qsimpl time: 1 use: in_or_app,nwPackets.", "qsimpl time: 1 use: in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets."], "tactic": "right.", "exn": "Not an inductive product.", "type": "not_inductive_product", "handled": true}, {"ctx": ["intros.", "unfold In in *.", "qsimpl time: 1 use: nwPackets.", "qsimpl time: 1 use: in_or_app,nwPackets.", "qsimpl time: 1 use: in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets."], "tactic": "apply in_or_app.", "exn": "In environment orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params H2 : forall (A : Type) (a : A) (l : list A), a = a \\\\/ In a l net : network p : packet H : (fix In (a : packet) (l : list packet) {struct l} : Prop := match l with | [] => False | b :: m => b = a \\\\/ In a m end) p (nwPackets net) X0 : list packet allEntries_indices_gt_0_invariant : forall net : network, refined_raft_intermediate_reachable net -> allEntries_indices_gt_0 net handleAppendEntries_logs_sorted : forall (net : network) (p : packet) (t : term) (n : name) (pli : logIndex) (plt : term) (es : list entry) (ci : logIndex) (st' : raft_data) (m : msg), raft_intermediate_reachable net -> logs_sorted net -> handleAppendEntries (pDst p) (nwState net (pDst p)) t n pli plt es ci = (st', m) -> pBody p = AppendEntries t n pli plt es ci -> In p (nwPackets net) -> sorted (log st') handleClientRequest_logs_sorted : forall (h : name) (client : clientId) (id : nat) (c : input) (out : list raft_output) (st : raft_data) (l : list (name * msg)) (net : network), handleClientRequest h (nwState net h) client id c = (out, st, l) -> raft_intermediate_reachable net -> logs_sorted_host net -> sorted (log st) logs_sorted_invariant : forall net : network, raft_intermediate_reachable net -> logs_sorted net log_matching_invariant : forall net : network, raft_intermediate_reachable net -> log_matching net refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (deghost net) X1 : list packet H0 : forall (A : Type) (l m : list A) (a : A), In a m -> In a (l ++ m) H1 : forall (A : Type) (l m : list A) (a : A), In a l -> In a (l ++ m) X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13 : list packet Unable to unify \"(fix In (a : ?M27509) (l : list ?M27509) {struct l} : Prop := match l with | [] => False | b :: m => b = a \\\\/ In a m end) ?M27512 (?M27510 ++ ?M27511)\" with \"(fix In (a : packet) (l : list packet) {struct l} : Prop := match l with | [] => False | b :: m => b = a \\\\/ In a m end) {| pSrc := pSrc p; pDst := pDst p; pBody := pBody p |} (map (fun p : packet => {| pSrc := pSrc p; pDst := pDst p; pBody := pBody p |}) (nwPackets net))\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros.", "unfold In in *.", "qsimpl time: 1 use: nwPackets.", "qsimpl time: 1 use: in_or_app,nwPackets.", "qsimpl time: 1 use: in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets."], "tactic": "right.", "exn": "Not an inductive product.", "type": "not_inductive_product", "handled": true}, {"ctx": ["intros.", "unfold In in *.", "qsimpl time: 1 use: nwPackets.", "qsimpl time: 1 use: in_or_app,nwPackets.", "qsimpl time: 1 use: in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets."], "tactic": "apply in_or_app.", "exn": "In environment orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params H2 : forall (A : Type) (a : A) (l : list A), a = a \\\\/ In a l net : network p : packet H : (fix In (a : packet) (l : list packet) {struct l} : Prop := match l with | [] => False | b :: m => b = a \\\\/ In a m end) p (nwPackets net) X0 : list packet allEntries_indices_gt_0_invariant : forall net : network, refined_raft_intermediate_reachable net -> allEntries_indices_gt_0 net handleAppendEntries_logs_sorted : forall (net : network) (p : packet) (t : term) (n : name) (pli : logIndex) (plt : term) (es : list entry) (ci : logIndex) (st' : raft_data) (m : msg), raft_intermediate_reachable net -> logs_sorted net -> handleAppendEntries (pDst p) (nwState net (pDst p)) t n pli plt es ci = (st', m) -> pBody p = AppendEntries t n pli plt es ci -> In p (nwPackets net) -> sorted (log st') handleClientRequest_logs_sorted : forall (h : name) (client : clientId) (id : nat) (c : input) (out : list raft_output) (st : raft_data) (l : list (name * msg)) (net : network), handleClientRequest h (nwState net h) client id c = (out, st, l) -> raft_intermediate_reachable net -> logs_sorted_host net -> sorted (log st) logs_sorted_invariant : forall net : network, raft_intermediate_reachable net -> logs_sorted net log_matching_invariant : forall net : network, raft_intermediate_reachable net -> log_matching net refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (deghost net) X1 : list packet H0 : forall (A : Type) (l m : list A) (a : A), In a m -> In a (l ++ m) H1 : forall (A : Type) (l m : list A) (a : A), In a l -> In a (l ++ m) X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15 : list packet Unable to unify \"(fix In (a : ?M31535) (l : list ?M31535) {struct l} : Prop := match l with | [] => False | b :: m => b = a \\\\/ In a m end) ?M31538 (?M31536 ++ ?M31537)\" with \"(fix In (a : packet) (l : list packet) {struct l} : Prop := match l with | [] => False | b :: m => b = a \\\\/ In a m end) {| pSrc := pSrc p; pDst := pDst p; pBody := pBody p |} (map (fun p : packet => {| pSrc := pSrc p; pDst := pDst p; pBody := pBody p |}) (nwPackets net))\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros.", "unfold In in *.", "qsimpl time: 1 use: nwPackets.", "qsimpl time: 1 use: in_or_app,nwPackets.", "qsimpl time: 1 use: in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets."], "tactic": "right.", "exn": "Not an inductive product.", "type": "not_inductive_product", "handled": true}, {"ctx": ["intros.", "unfold In in *.", "qsimpl time: 1 use: nwPackets.", "qsimpl time: 1 use: in_or_app,nwPackets.", "qsimpl time: 1 use: in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets."], "tactic": "apply in_or_app.", "exn": "In environment orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params H2 : forall (A : Type) (a : A) (l : list A), a = a \\\\/ In a l net : network p : packet H : (fix In (a : packet) (l : list packet) {struct l} : Prop := match l with | [] => False | b :: m => b = a \\\\/ In a m end) p (nwPackets net) X0 : list packet allEntries_indices_gt_0_invariant : forall net : network, refined_raft_intermediate_reachable net -> allEntries_indices_gt_0 net handleAppendEntries_logs_sorted : forall (net : network) (p : packet) (t : term) (n : name) (pli : logIndex) (plt : term) (es : list entry) (ci : logIndex) (st' : raft_data) (m : msg), raft_intermediate_reachable net -> logs_sorted net -> handleAppendEntries (pDst p) (nwState net (pDst p)) t n pli plt es ci = (st', m) -> pBody p = AppendEntries t n pli plt es ci -> In p (nwPackets net) -> sorted (log st') handleClientRequest_logs_sorted : forall (h : name) (client : clientId) (id : nat) (c : input) (out : list raft_output) (st : raft_data) (l : list (name * msg)) (net : network), handleClientRequest h (nwState net h) client id c = (out, st, l) -> raft_intermediate_reachable net -> logs_sorted_host net -> sorted (log st) logs_sorted_invariant : forall net : network, raft_intermediate_reachable net -> logs_sorted net log_matching_invariant : forall net : network, raft_intermediate_reachable net -> log_matching net refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (deghost net) X1 : list packet H0 : forall (A : Type) (l m : list A) (a : A), In a m -> In a (l ++ m) H1 : forall (A : Type) (l m : list A) (a : A), In a l -> In a (l ++ m) X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17 : list packet Unable to unify \"(fix In (a : ?M35641) (l : list ?M35641) {struct l} : Prop := match l with | [] => False | b :: m => b = a \\\\/ In a m end) ?M35644 (?M35642 ++ ?M35643)\" with \"(fix In (a : packet) (l : list packet) {struct l} : Prop := match l with | [] => False | b :: m => b = a \\\\/ In a m end) {| pSrc := pSrc p; pDst := pDst p; pBody := pBody p |} (map (fun p : packet => {| pSrc := pSrc p; pDst := pDst p; pBody := pBody p |}) (nwPackets net))\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros.", "unfold In in *.", "qsimpl time: 1 use: nwPackets.", "qsimpl time: 1 use: in_or_app,nwPackets.", "qsimpl time: 1 use: in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets."], "tactic": "right.", "exn": "Not an inductive product.", "type": "not_inductive_product", "handled": true}, {"ctx": ["intros.", "unfold In in *.", "qsimpl time: 1 use: nwPackets.", "qsimpl time: 1 use: in_or_app,nwPackets.", "qsimpl time: 1 use: in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets."], "tactic": "apply in_or_app.", "exn": "In environment orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params H2 : forall (A : Type) (a : A) (l : list A), a = a \\\\/ In a l net : network p : packet H : (fix In (a : packet) (l : list packet) {struct l} : Prop := match l with | [] => False | b :: m => b = a \\\\/ In a m end) p (nwPackets net) X0 : list packet allEntries_indices_gt_0_invariant : forall net : network, refined_raft_intermediate_reachable net -> allEntries_indices_gt_0 net handleAppendEntries_logs_sorted : forall (net : network) (p : packet) (t : term) (n : name) (pli : logIndex) (plt : term) (es : list entry) (ci : logIndex) (st' : raft_data) (m : msg), raft_intermediate_reachable net -> logs_sorted net -> handleAppendEntries (pDst p) (nwState net (pDst p)) t n pli plt es ci = (st', m) -> pBody p = AppendEntries t n pli plt es ci -> In p (nwPackets net) -> sorted (log st') handleClientRequest_logs_sorted : forall (h : name) (client : clientId) (id : nat) (c : input) (out : list raft_output) (st : raft_data) (l : list (name * msg)) (net : network), handleClientRequest h (nwState net h) client id c = (out, st, l) -> raft_intermediate_reachable net -> logs_sorted_host net -> sorted (log st) logs_sorted_invariant : forall net : network, raft_intermediate_reachable net -> logs_sorted net log_matching_invariant : forall net : network, raft_intermediate_reachable net -> log_matching net refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (deghost net) X1 : list packet H0 : forall (A : Type) (l m : list A) (a : A), In a m -> In a (l ++ m) H1 : forall (A : Type) (l m : list A) (a : A), In a l -> In a (l ++ m) X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19 : list packet Unable to unify \"(fix In (a : ?M39827) (l : list ?M39827) {struct l} : Prop := match l with | [] => False | b :: m => b = a \\\\/ In a m end) ?M39830 (?M39828 ++ ?M39829)\" with \"(fix In (a : packet) (l : list packet) {struct l} : Prop := match l with | [] => False | b :: m => b = a \\\\/ In a m end) {| pSrc := pSrc p; pDst := pDst p; pBody := pBody p |} (map (fun p : packet => {| pSrc := pSrc p; pDst := pDst p; pBody := pBody p |}) (nwPackets net))\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros.", "unfold In in *.", "qsimpl time: 1 use: nwPackets.", "qsimpl time: 1 use: in_or_app,nwPackets.", "qsimpl time: 1 use: in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets."], "tactic": "right.", "exn": "Not an inductive product.", "type": "not_inductive_product", "handled": true}, {"ctx": ["intros.", "unfold In in *.", "qsimpl time: 1 use: nwPackets.", "qsimpl time: 1 use: in_or_app,nwPackets.", "qsimpl time: 1 use: in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets."], "tactic": "apply in_or_app.", "exn": "In environment orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params H2 : forall (A : Type) (a : A) (l : list A), a = a \\\\/ In a l net : network p : packet H : (fix In (a : packet) (l : list packet) {struct l} : Prop := match l with | [] => False | b :: m => b = a \\\\/ In a m end) p (nwPackets net) X0 : list packet allEntries_indices_gt_0_invariant : forall net : network, refined_raft_intermediate_reachable net -> allEntries_indices_gt_0 net handleAppendEntries_logs_sorted : forall (net : network) (p : packet) (t : term) (n : name) (pli : logIndex) (plt : term) (es : list entry) (ci : logIndex) (st' : raft_data) (m : msg), raft_intermediate_reachable net -> logs_sorted net -> handleAppendEntries (pDst p) (nwState net (pDst p)) t n pli plt es ci = (st', m) -> pBody p = AppendEntries t n pli plt es ci -> In p (nwPackets net) -> sorted (log st') handleClientRequest_logs_sorted : forall (h : name) (client : clientId) (id : nat) (c : input) (out : list raft_output) (st : raft_data) (l : list (name * msg)) (net : network), handleClientRequest h (nwState net h) client id c = (out, st, l) -> raft_intermediate_reachable net -> logs_sorted_host net -> sorted (log st) logs_sorted_invariant : forall net : network, raft_intermediate_reachable net -> logs_sorted net log_matching_invariant : forall net : network, raft_intermediate_reachable net -> log_matching net refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (deghost net) X1 : list packet H0 : forall (A : Type) (l m : list A) (a : A), In a m -> In a (l ++ m) H1 : forall (A : Type) (l m : list A) (a : A), In a l -> In a (l ++ m) X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21 : list packet Unable to unify \"(fix In (a : ?M44093) (l : list ?M44093) {struct l} : Prop := match l with | [] => False | b :: m => b = a \\\\/ In a m end) ?M44096 (?M44094 ++ ?M44095)\" with \"(fix In (a : packet) (l : list packet) {struct l} : Prop := match l with | [] => False | b :: m => b = a \\\\/ In a m end) {| pSrc := pSrc p; pDst := pDst p; pBody := pBody p |} (map (fun p : packet => {| pSrc := pSrc p; pDst := pDst p; pBody := pBody p |}) (nwPackets net))\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros.", "unfold In in *.", "qsimpl time: 1 use: nwPackets.", "qsimpl time: 1 use: in_or_app,nwPackets.", "qsimpl time: 1 use: in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets."], "tactic": "right.", "exn": "Not an inductive product.", "type": "not_inductive_product", "handled": true}, {"ctx": ["intros.", "unfold In in *.", "qsimpl time: 1 use: nwPackets.", "qsimpl time: 1 use: in_or_app,nwPackets.", "qsimpl time: 1 use: in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets."], "tactic": "apply in_or_app.", "exn": "In environment orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params H2 : forall (A : Type) (a : A) (l : list A), a = a \\\\/ In a l net : network p : packet H : (fix In (a : packet) (l : list packet) {struct l} : Prop := match l with | [] => False | b :: m => b = a \\\\/ In a m end) p (nwPackets net) X0 : list packet allEntries_indices_gt_0_invariant : forall net : network, refined_raft_intermediate_reachable net -> allEntries_indices_gt_0 net handleAppendEntries_logs_sorted : forall (net : network) (p : packet) (t : term) (n : name) (pli : logIndex) (plt : term) (es : list entry) (ci : logIndex) (st' : raft_data) (m : msg), raft_intermediate_reachable net -> logs_sorted net -> handleAppendEntries (pDst p) (nwState net (pDst p)) t n pli plt es ci = (st', m) -> pBody p = AppendEntries t n pli plt es ci -> In p (nwPackets net) -> sorted (log st') handleClientRequest_logs_sorted : forall (h : name) (client : clientId) (id : nat) (c : input) (out : list raft_output) (st : raft_data) (l : list (name * msg)) (net : network), handleClientRequest h (nwState net h) client id c = (out, st, l) -> raft_intermediate_reachable net -> logs_sorted_host net -> sorted (log st) logs_sorted_invariant : forall net : network, raft_intermediate_reachable net -> logs_sorted net log_matching_invariant : forall net : network, raft_intermediate_reachable net -> log_matching net refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (deghost net) X1 : list packet H0 : forall (A : Type) (l m : list A) (a : A), In a m -> In a (l ++ m) H1 : forall (A : Type) (l m : list A) (a : A), In a l -> In a (l ++ m) X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23 : list packet Unable to unify \"(fix In (a : ?M48439) (l : list ?M48439) {struct l} : Prop := match l with | [] => False | b :: m => b = a \\\\/ In a m end) ?M48442 (?M48440 ++ ?M48441)\" with \"(fix In (a : packet) (l : list packet) {struct l} : Prop := match l with | [] => False | b :: m => b = a \\\\/ In a m end) {| pSrc := pSrc p; pDst := pDst p; pBody := pBody p |} (map (fun p : packet => {| pSrc := pSrc p; pDst := pDst p; pBody := pBody p |}) (nwPackets net))\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros.", "unfold In in *.", "qsimpl time: 1 use: nwPackets.", "qsimpl time: 1 use: in_or_app,nwPackets.", "qsimpl time: 1 use: in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets."], "tactic": "right.", "exn": "Not an inductive product.", "type": "not_inductive_product", "handled": true}, {"ctx": ["intros.", "unfold In in *.", "qsimpl time: 1 use: nwPackets.", "qsimpl time: 1 use: in_or_app,nwPackets.", "qsimpl time: 1 use: in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets."], "tactic": "apply in_or_app.", "exn": "In environment orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params H2 : forall (A : Type) (a : A) (l : list A), a = a \\\\/ In a l net : network p : packet H : (fix In (a : packet) (l : list packet) {struct l} : Prop := match l with | [] => False | b :: m => b = a \\\\/ In a m end) p (nwPackets net) X0 : list packet allEntries_indices_gt_0_invariant : forall net : network, refined_raft_intermediate_reachable net -> allEntries_indices_gt_0 net handleAppendEntries_logs_sorted : forall (net : network) (p : packet) (t : term) (n : name) (pli : logIndex) (plt : term) (es : list entry) (ci : logIndex) (st' : raft_data) (m : msg), raft_intermediate_reachable net -> logs_sorted net -> handleAppendEntries (pDst p) (nwState net (pDst p)) t n pli plt es ci = (st', m) -> pBody p = AppendEntries t n pli plt es ci -> In p (nwPackets net) -> sorted (log st') handleClientRequest_logs_sorted : forall (h : name) (client : clientId) (id : nat) (c : input) (out : list raft_output) (st : raft_data) (l : list (name * msg)) (net : network), handleClientRequest h (nwState net h) client id c = (out, st, l) -> raft_intermediate_reachable net -> logs_sorted_host net -> sorted (log st) logs_sorted_invariant : forall net : network, raft_intermediate_reachable net -> logs_sorted net log_matching_invariant : forall net : network, raft_intermediate_reachable net -> log_matching net refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (deghost net) X1 : list packet H0 : forall (A : Type) (l m : list A) (a : A), In a m -> In a (l ++ m) H1 : forall (A : Type) (l m : list A) (a : A), In a l -> In a (l ++ m) X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25 : list packet Unable to unify \"(fix In (a : ?M52865) (l : list ?M52865) {struct l} : Prop := match l with | [] => False | b :: m => b = a \\\\/ In a m end) ?M52868 (?M52866 ++ ?M52867)\" with \"(fix In (a : packet) (l : list packet) {struct l} : Prop := match l with | [] => False | b :: m => b = a \\\\/ In a m end) {| pSrc := pSrc p; pDst := pDst p; pBody := pBody p |} (map (fun p : packet => {| pSrc := pSrc p; pDst := pDst p; pBody := pBody p |}) (nwPackets net))\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros.", "unfold In in *.", "qsimpl time: 1 use: nwPackets.", "qsimpl time: 1 use: in_or_app,nwPackets.", "qsimpl time: 1 use: in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets."], "tactic": "right.", "exn": "Not an inductive product.", "type": "not_inductive_product", "handled": true}, {"ctx": ["intros.", "unfold In in *.", "qsimpl time: 1 use: nwPackets.", "qsimpl time: 1 use: in_or_app,nwPackets.", "qsimpl time: 1 use: in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets."], "tactic": "apply in_or_app.", "exn": "In environment orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params H2 : forall (A : Type) (a : A) (l : list A), a = a \\\\/ In a l net : network p : packet H : (fix In (a : packet) (l : list packet) {struct l} : Prop := match l with | [] => False | b :: m => b = a \\\\/ In a m end) p (nwPackets net) X0 : list packet allEntries_indices_gt_0_invariant : forall net : network, refined_raft_intermediate_reachable net -> allEntries_indices_gt_0 net handleAppendEntries_logs_sorted : forall (net : network) (p : packet) (t : term) (n : name) (pli : logIndex) (plt : term) (es : list entry) (ci : logIndex) (st' : raft_data) (m : msg), raft_intermediate_reachable net -> logs_sorted net -> handleAppendEntries (pDst p) (nwState net (pDst p)) t n pli plt es ci = (st', m) -> pBody p = AppendEntries t n pli plt es ci -> In p (nwPackets net) -> sorted (log st') handleClientRequest_logs_sorted : forall (h : name) (client : clientId) (id : nat) (c : input) (out : list raft_output) (st : raft_data) (l : list (name * msg)) (net : network), handleClientRequest h (nwState net h) client id c = (out, st, l) -> raft_intermediate_reachable net -> logs_sorted_host net -> sorted (log st) logs_sorted_invariant : forall net : network, raft_intermediate_reachable net -> logs_sorted net log_matching_invariant : forall net : network, raft_intermediate_reachable net -> log_matching net refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (deghost net) X1 : list packet H0 : forall (A : Type) (l m : list A) (a : A), In a m -> In a (l ++ m) H1 : forall (A : Type) (l m : list A) (a : A), In a l -> In a (l ++ m) X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27 : list packet Unable to unify \"(fix In (a : ?M57371) (l : list ?M57371) {struct l} : Prop := match l with | [] => False | b :: m => b = a \\\\/ In a m end) ?M57374 (?M57372 ++ ?M57373)\" with \"(fix In (a : packet) (l : list packet) {struct l} : Prop := match l with | [] => False | b :: m => b = a \\\\/ In a m end) {| pSrc := pSrc p; pDst := pDst p; pBody := pBody p |} (map (fun p : packet => {| pSrc := pSrc p; pDst := pDst p; pBody := pBody p |}) (nwPackets net))\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros.", "unfold In in *.", "qsimpl time: 1 use: nwPackets.", "qsimpl time: 1 use: in_or_app,nwPackets.", "qsimpl time: 1 use: in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets."], "tactic": "right.", "exn": "Not an inductive product.", "type": "not_inductive_product", "handled": true}, {"ctx": ["intros.", "unfold In in *.", "qsimpl time: 1 use: nwPackets.", "qsimpl time: 1 use: in_or_app,nwPackets.", "qsimpl time: 1 use: in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets."], "tactic": "apply in_or_app.", "exn": "In environment orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params H2 : forall (A : Type) (a : A) (l : list A), a = a \\\\/ In a l net : network p : packet H : (fix In (a : packet) (l : list packet) {struct l} : Prop := match l with | [] => False | b :: m => b = a \\\\/ In a m end) p (nwPackets net) X0 : list packet allEntries_indices_gt_0_invariant : forall net : network, refined_raft_intermediate_reachable net -> allEntries_indices_gt_0 net handleAppendEntries_logs_sorted : forall (net : network) (p : packet) (t : term) (n : name) (pli : logIndex) (plt : term) (es : list entry) (ci : logIndex) (st' : raft_data) (m : msg), raft_intermediate_reachable net -> logs_sorted net -> handleAppendEntries (pDst p) (nwState net (pDst p)) t n pli plt es ci = (st', m) -> pBody p = AppendEntries t n pli plt es ci -> In p (nwPackets net) -> sorted (log st') handleClientRequest_logs_sorted : forall (h : name) (client : clientId) (id : nat) (c : input) (out : list raft_output) (st : raft_data) (l : list (name * msg)) (net : network), handleClientRequest h (nwState net h) client id c = (out, st, l) -> raft_intermediate_reachable net -> logs_sorted_host net -> sorted (log st) logs_sorted_invariant : forall net : network, raft_intermediate_reachable net -> logs_sorted net log_matching_invariant : forall net : network, raft_intermediate_reachable net -> log_matching net refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (deghost net) X1 : list packet H0 : forall (A : Type) (l m : list A) (a : A), In a m -> In a (l ++ m) H1 : forall (A : Type) (l m : list A) (a : A), In a l -> In a (l ++ m) X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29 : list packet Unable to unify \"(fix In (a : ?M61957) (l : list ?M61957) {struct l} : Prop := match l with | [] => False | b :: m => b = a \\\\/ In a m end) ?M61960 (?M61958 ++ ?M61959)\" with \"(fix In (a : packet) (l : list packet) {struct l} : Prop := match l with | [] => False | b :: m => b = a \\\\/ In a m end) {| pSrc := pSrc p; pDst := pDst p; pBody := pBody p |} (map (fun p : packet => {| pSrc := pSrc p; pDst := pDst p; pBody := pBody p |}) (nwPackets net))\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros.", "unfold In in *.", "qsimpl time: 1 use: nwPackets.", "qsimpl time: 1 use: in_or_app,nwPackets.", "qsimpl time: 1 use: in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets."], "tactic": "right.", "exn": "Not an inductive product.", "type": "not_inductive_product", "handled": true}, {"ctx": ["intros.", "unfold In in *.", "qsimpl time: 1 use: nwPackets.", "qsimpl time: 1 use: in_or_app,nwPackets.", "qsimpl time: 1 use: in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets."], "tactic": "apply in_or_app.", "exn": "In environment orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params H2 : forall (A : Type) (a : A) (l : list A), a = a \\\\/ In a l net : network p : packet H : (fix In (a : packet) (l : list packet) {struct l} : Prop := match l with | [] => False | b :: m => b = a \\\\/ In a m end) p (nwPackets net) X0 : list packet allEntries_indices_gt_0_invariant : forall net : network, refined_raft_intermediate_reachable net -> allEntries_indices_gt_0 net handleAppendEntries_logs_sorted : forall (net : network) (p : packet) (t : term) (n : name) (pli : logIndex) (plt : term) (es : list entry) (ci : logIndex) (st' : raft_data) (m : msg), raft_intermediate_reachable net -> logs_sorted net -> handleAppendEntries (pDst p) (nwState net (pDst p)) t n pli plt es ci = (st', m) -> pBody p = AppendEntries t n pli plt es ci -> In p (nwPackets net) -> sorted (log st') handleClientRequest_logs_sorted : forall (h : name) (client : clientId) (id : nat) (c : input) (out : list raft_output) (st : raft_data) (l : list (name * msg)) (net : network), handleClientRequest h (nwState net h) client id c = (out, st, l) -> raft_intermediate_reachable net -> logs_sorted_host net -> sorted (log st) logs_sorted_invariant : forall net : network, raft_intermediate_reachable net -> logs_sorted net log_matching_invariant : forall net : network, raft_intermediate_reachable net -> log_matching net refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (deghost net) X1 : list packet H0 : forall (A : Type) (l m : list A) (a : A), In a m -> In a (l ++ m) H1 : forall (A : Type) (l m : list A) (a : A), In a l -> In a (l ++ m) X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31 : list packet Unable to unify \"(fix In (a : ?M66623) (l : list ?M66623) {struct l} : Prop := match l with | [] => False | b :: m => b = a \\\\/ In a m end) ?M66626 (?M66624 ++ ?M66625)\" with \"(fix In (a : packet) (l : list packet) {struct l} : Prop := match l with | [] => False | b :: m => b = a \\\\/ In a m end) {| pSrc := pSrc p; pDst := pDst p; pBody := pBody p |} (map (fun p : packet => {| pSrc := pSrc p; pDst := pDst p; pBody := pBody p |}) (nwPackets net))\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros.", "unfold In in *.", "qsimpl time: 1 use: nwPackets.", "qsimpl time: 1 use: in_or_app,nwPackets.", "qsimpl time: 1 use: in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets."], "tactic": "right.", "exn": "Not an inductive product.", "type": "not_inductive_product", "handled": true}, {"ctx": ["intros.", "unfold In in *.", "qsimpl time: 1 use: nwPackets.", "qsimpl time: 1 use: in_or_app,nwPackets.", "qsimpl time: 1 use: in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets."], "tactic": "apply in_or_app.", "exn": "In environment orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params H2 : forall (A : Type) (a : A) (l : list A), a = a \\\\/ In a l net : network p : packet H : (fix In (a : packet) (l : list packet) {struct l} : Prop := match l with | [] => False | b :: m => b = a \\\\/ In a m end) p (nwPackets net) X0 : list packet allEntries_indices_gt_0_invariant : forall net : network, refined_raft_intermediate_reachable net -> allEntries_indices_gt_0 net handleAppendEntries_logs_sorted : forall (net : network) (p : packet) (t : term) (n : name) (pli : logIndex) (plt : term) (es : list entry) (ci : logIndex) (st' : raft_data) (m : msg), raft_intermediate_reachable net -> logs_sorted net -> handleAppendEntries (pDst p) (nwState net (pDst p)) t n pli plt es ci = (st', m) -> pBody p = AppendEntries t n pli plt es ci -> In p (nwPackets net) -> sorted (log st') handleClientRequest_logs_sorted : forall (h : name) (client : clientId) (id : nat) (c : input) (out : list raft_output) (st : raft_data) (l : list (name * msg)) (net : network), handleClientRequest h (nwState net h) client id c = (out, st, l) -> raft_intermediate_reachable net -> logs_sorted_host net -> sorted (log st) logs_sorted_invariant : forall net : network, raft_intermediate_reachable net -> logs_sorted net log_matching_invariant : forall net : network, raft_intermediate_reachable net -> log_matching net refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (deghost net) X1 : list packet H0 : forall (A : Type) (l m : list A) (a : A), In a m -> In a (l ++ m) H1 : forall (A : Type) (l m : list A) (a : A), In a l -> In a (l ++ m) X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33 : list packet Unable to unify \"(fix In (a : ?M71369) (l : list ?M71369) {struct l} : Prop := match l with | [] => False | b :: m => b = a \\\\/ In a m end) ?M71372 (?M71370 ++ ?M71371)\" with \"(fix In (a : packet) (l : list packet) {struct l} : Prop := match l with | [] => False | b :: m => b = a \\\\/ In a m end) {| pSrc := pSrc p; pDst := pDst p; pBody := pBody p |} (map (fun p : packet => {| pSrc := pSrc p; pDst := pDst p; pBody := pBody p |}) (nwPackets net))\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros.", "unfold In in *.", "qsimpl time: 1 use: nwPackets.", "qsimpl time: 1 use: in_or_app,nwPackets.", "qsimpl time: 1 use: in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets."], "tactic": "right.", "exn": "Not an inductive product.", "type": "not_inductive_product", "handled": true}, {"ctx": ["intros.", "unfold In in *.", "qsimpl time: 1 use: nwPackets.", "qsimpl time: 1 use: in_or_app,nwPackets.", "qsimpl time: 1 use: in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets."], "tactic": "apply in_or_app.", "exn": "In environment orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params H2 : forall (A : Type) (a : A) (l : list A), a = a \\\\/ In a l net : network p : packet H : (fix In (a : packet) (l : list packet) {struct l} : Prop := match l with | [] => False | b :: m => b = a \\\\/ In a m end) p (nwPackets net) X0 : list packet allEntries_indices_gt_0_invariant : forall net : network, refined_raft_intermediate_reachable net -> allEntries_indices_gt_0 net handleAppendEntries_logs_sorted : forall (net : network) (p : packet) (t : term) (n : name) (pli : logIndex) (plt : term) (es : list entry) (ci : logIndex) (st' : raft_data) (m : msg), raft_intermediate_reachable net -> logs_sorted net -> handleAppendEntries (pDst p) (nwState net (pDst p)) t n pli plt es ci = (st', m) -> pBody p = AppendEntries t n pli plt es ci -> In p (nwPackets net) -> sorted (log st') handleClientRequest_logs_sorted : forall (h : name) (client : clientId) (id : nat) (c : input) (out : list raft_output) (st : raft_data) (l : list (name * msg)) (net : network), handleClientRequest h (nwState net h) client id c = (out, st, l) -> raft_intermediate_reachable net -> logs_sorted_host net -> sorted (log st) logs_sorted_invariant : forall net : network, raft_intermediate_reachable net -> logs_sorted net log_matching_invariant : forall net : network, raft_intermediate_reachable net -> log_matching net refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (deghost net) X1 : list packet H0 : forall (A : Type) (l m : list A) (a : A), In a m -> In a (l ++ m) H1 : forall (A : Type) (l m : list A) (a : A), In a l -> In a (l ++ m) X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35 : list packet Unable to unify \"(fix In (a : ?M76195) (l : list ?M76195) {struct l} : Prop := match l with | [] => False | b :: m => b = a \\\\/ In a m end) ?M76198 (?M76196 ++ ?M76197)\" with \"(fix In (a : packet) (l : list packet) {struct l} : Prop := match l with | [] => False | b :: m => b = a \\\\/ In a m end) {| pSrc := pSrc p; pDst := pDst p; pBody := pBody p |} (map (fun p : packet => {| pSrc := pSrc p; pDst := pDst p; pBody := pBody p |}) (nwPackets net))\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros.", "unfold In in *.", "qsimpl time: 1 use: nwPackets.", "qsimpl time: 1 use: in_or_app,nwPackets.", "qsimpl time: 1 use: in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets."], "tactic": "right.", "exn": "Not an inductive product.", "type": "not_inductive_product", "handled": true}, {"ctx": ["intros.", "unfold In in *.", "qsimpl time: 1 use: nwPackets.", "qsimpl time: 1 use: in_or_app,nwPackets.", "qsimpl time: 1 use: in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets."], "tactic": "apply in_or_app.", "exn": "In environment orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params H2 : forall (A : Type) (a : A) (l : list A), a = a \\\\/ In a l net : network p : packet H : (fix In (a : packet) (l : list packet) {struct l} : Prop := match l with | [] => False | b :: m => b = a \\\\/ In a m end) p (nwPackets net) X0 : list packet allEntries_indices_gt_0_invariant : forall net : network, refined_raft_intermediate_reachable net -> allEntries_indices_gt_0 net handleAppendEntries_logs_sorted : forall (net : network) (p : packet) (t : term) (n : name) (pli : logIndex) (plt : term) (es : list entry) (ci : logIndex) (st' : raft_data) (m : msg), raft_intermediate_reachable net -> logs_sorted net -> handleAppendEntries (pDst p) (nwState net (pDst p)) t n pli plt es ci = (st', m) -> pBody p = AppendEntries t n pli plt es ci -> In p (nwPackets net) -> sorted (log st') handleClientRequest_logs_sorted : forall (h : name) (client : clientId) (id : nat) (c : input) (out : list raft_output) (st : raft_data) (l : list (name * msg)) (net : network), handleClientRequest h (nwState net h) client id c = (out, st, l) -> raft_intermediate_reachable net -> logs_sorted_host net -> sorted (log st) logs_sorted_invariant : forall net : network, raft_intermediate_reachable net -> logs_sorted net log_matching_invariant : forall net : network, raft_intermediate_reachable net -> log_matching net refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (deghost net) X1 : list packet H0 : forall (A : Type) (l m : list A) (a : A), In a m -> In a (l ++ m) H1 : forall (A : Type) (l m : list A) (a : A), In a l -> In a (l ++ m) X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37 : list packet Unable to unify \"(fix In (a : ?M81101) (l : list ?M81101) {struct l} : Prop := match l with | [] => False | b :: m => b = a \\\\/ In a m end) ?M81104 (?M81102 ++ ?M81103)\" with \"(fix In (a : packet) (l : list packet) {struct l} : Prop := match l with | [] => False | b :: m => b = a \\\\/ In a m end) {| pSrc := pSrc p; pDst := pDst p; pBody := pBody p |} (map (fun p : packet => {| pSrc := pSrc p; pDst := pDst p; pBody := pBody p |}) (nwPackets net))\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros.", "unfold In in *.", "qsimpl time: 1 use: nwPackets.", "qsimpl time: 1 use: in_or_app,nwPackets.", "qsimpl time: 1 use: in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets."], "tactic": "right.", "exn": "Not an inductive product.", "type": "not_inductive_product", "handled": true}, {"ctx": ["intros.", "unfold In in *.", "qsimpl time: 1 use: nwPackets.", "qsimpl time: 1 use: in_or_app,nwPackets.", "qsimpl time: 1 use: in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets."], "tactic": "apply in_or_app.", "exn": "In environment orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params H2 : forall (A : Type) (a : A) (l : list A), a = a \\\\/ In a l net : network p : packet H : (fix In (a : packet) (l : list packet) {struct l} : Prop := match l with | [] => False | b :: m => b = a \\\\/ In a m end) p (nwPackets net) X0 : list packet allEntries_indices_gt_0_invariant : forall net : network, refined_raft_intermediate_reachable net -> allEntries_indices_gt_0 net handleAppendEntries_logs_sorted : forall (net : network) (p : packet) (t : term) (n : name) (pli : logIndex) (plt : term) (es : list entry) (ci : logIndex) (st' : raft_data) (m : msg), raft_intermediate_reachable net -> logs_sorted net -> handleAppendEntries (pDst p) (nwState net (pDst p)) t n pli plt es ci = (st', m) -> pBody p = AppendEntries t n pli plt es ci -> In p (nwPackets net) -> sorted (log st') handleClientRequest_logs_sorted : forall (h : name) (client : clientId) (id : nat) (c : input) (out : list raft_output) (st : raft_data) (l : list (name * msg)) (net : network), handleClientRequest h (nwState net h) client id c = (out, st, l) -> raft_intermediate_reachable net -> logs_sorted_host net -> sorted (log st) logs_sorted_invariant : forall net : network, raft_intermediate_reachable net -> logs_sorted net log_matching_invariant : forall net : network, raft_intermediate_reachable net -> log_matching net refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (deghost net) X1 : list packet H0 : forall (A : Type) (l m : list A) (a : A), In a m -> In a (l ++ m) H1 : forall (A : Type) (l m : list A) (a : A), In a l -> In a (l ++ m) X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39 : list packet Unable to unify \"(fix In (a : ?M86087) (l : list ?M86087) {struct l} : Prop := match l with | [] => False | b :: m => b = a \\\\/ In a m end) ?M86090 (?M86088 ++ ?M86089)\" with \"(fix In (a : packet) (l : list packet) {struct l} : Prop := match l with | [] => False | b :: m => b = a \\\\/ In a m end) {| pSrc := pSrc p; pDst := pDst p; pBody := pBody p |} (map (fun p : packet => {| pSrc := pSrc p; pDst := pDst p; pBody := pBody p |}) (nwPackets net))\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros.", "unfold In in *.", "qsimpl time: 1 use: nwPackets.", "qsimpl time: 1 use: in_or_app,nwPackets.", "qsimpl time: 1 use: in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets.", "qsimpl time: 1 use: in_eq,in_or_app,nwPackets."], "tactic": "right.", "exn": "Not an inductive product.", "type": "not_inductive_product", "handled": true}]}, "chat": [{"role": "user", "content": "I will give you a Coq proof state, including both hypotheses and a specific goal and your need to prove it. Your response should be a singular code block of Coq proof starting with \"```coq\n\", ending with \"Qed.```\", without any additional explanation or commentary. Follow to these guidelines:\nIntroduce variables using unique names to avoid any conflicts.\nKeep each command distinct and separated, avoid concatenations like ';' or '[cmd|cmd]'.\nOrganize your proof with bullets like '-', '+', and '*' instead of braces ({, }). Shift to their double symbols like '--' and '++', when necessary.\nEffectively use given premises, follow the syntax and structure demonstrated in the examples provided.\n\nExample 1:\n\nHypotheses:\nn, m: nat\nIHn: m + n = n + m\n\nGoal:\nm + S n = S n + m\n\nProof:\n```coq\nsimpl. rewrite <- IHn. auto.\nQed.```\n\nExample 2:\nHypotheses:\n\nGoal:\nforall n m : nat, m + n = n + m\n\n```coq\nintros n m. induction n.\n- simpl. auto.\n- simpl. rewrite <- IHn. auto.\nQed.```\n\nSolve This Proof State:\n\nHypotheses:\norig_base_params: BaseParams\none_node_params: OneNodeParams orig_base_params\nraft_params: RaftParams orig_base_params\nrri: raft_refinement_interface\nlmi: log_matching_interface\nsi: sorted_interface\naeigt0: allEntries_indices_gt_0_interface\n\nGoal:\nforall (net : network) (p : packet), In p (nwPackets net) -> In (deghost_packet p) (nwPackets (deghost net))\n\nPremises:\ndeghost = fun (base_params : BaseParams) (multi_params : MultiParams base_params) (ghost_params : GhostMultiParams multi_params) (net : network) => {| nwPackets := map deghost_packet (nwPackets net); nwState := fun X : Net.name => match net with | {| nwState := nwState |} => let H := X in let nwState0 := nwState H in let (_, d) := nwState0 in d end |} : forall (base_params : BaseParams) (multi_params : MultiParams base_params) (ghost_params : GhostMultiParams multi_params), network -> network Arguments deghost {base_params multi_params ghost_params}\nRecord network (P : BaseParams) (params : MultiParams P) : Type := mkNetwork { nwPackets : list packet; nwState : Net.name -> data } Arguments network {P params} Arguments mkNetwork {P params} _%list_scope _%function_scope\ndeghost_packet = fun (base_params : BaseParams) (multi_params : MultiParams base_params) (ghost_params : GhostMultiParams multi_params) (p : packet) => {| pSrc := pSrc p; pDst := pDst p; pBody := pBody p |} : forall (base_params : BaseParams) (multi_params : MultiParams base_params) (ghost_params : GhostMultiParams multi_params), packet -> packet Arguments deghost_packet / {base_params multi_params ghost_params}\nnwPackets = fun (P : BaseParams) (params : MultiParams P) (n : network) => let (nwPackets, _) := n in nwPackets : forall (P : BaseParams) (params : MultiParams P), network -> list packet Arguments nwPackets {P params}\nRecord RaftParams (orig_base_params : BaseParams) : Type := Build_RaftParams { N : nat; input_eq_dec : forall x y : input, {x = y} + {x <> y}; output_eq_dec : forall x y : output, {x = y} + {x <> y}; clientId : Type; clientId_eq_dec : forall x y : clientId, {x = y} + {x <> y} } Arguments Build_RaftParams _ _%nat_scope (_ _)%function_scope [clientId]%type_scope _%function_scope\nRecord OneNodeParams (P : BaseParams) : Type := Build_OneNodeParams { init : data; handler : input -> data -> output * data } Arguments Build_OneNodeParams _ _ _%function_scope\nRecord packet (P : BaseParams) (params : MultiParams P) : Type := mkPacket { pSrc : Net.name; pDst : Net.name; pBody : Net.msg } Arguments packet {P params} Arguments mkPacket {P params}\nIn : forall A : Type, A -> list A -> Prop\nentries_match_nw_1 = fun (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params) (net : network) => forall (p : packet) (t : term) (n : name) (pli : logIndex) (plt : term) (es : list entry) (ci : logIndex) (p' : packet) (t' : term) (n' : name) (pli' : logIndex) (plt' : term) (es' : list entry) (ci' : logIndex) (e e' e'' : entry), In p (nwPackets net) -> In p' (nwPackets net) -> pBody p = AppendEntries t n pli plt es ci ->...-> Prop Arguments entries_match_nw_1 {orig_base_params one_node_params raft_params}\npackets_gt_prevIndex = fun (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params) (net : network) => forall (p : packet) (t : term) (n : name) (pli : logIndex) (plt : term) (entries : list entry) (c : logIndex) (e : entry), In p (nwPackets net) -> pBody p = AppendEntries t n pli plt entries c -> In e entries -> eIndex e > pli : forall (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params), network -> Prop Arguments packets_gt_prevIndex {orig_base_params one_node_params raft_params}\npackets_ge_prevTerm = fun (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params) (net : network) => forall (p : packet) (t : term) (n : name) (pli : logIndex) (plt : term) (entries : list entry) (c : logIndex) (e : entry), In p (nwPackets net) -> pBody p = AppendEntries t n pli plt entries c -> In e entries -> eTerm e >= plt : forall (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params), network -> Prop Arguments packets_ge_prevTerm {orig_base_params one_node_params raft_params}\nentries_gt_0_nw = fun (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params) (net : network) => forall (p : packet) (t : term) (n : name) (pli : logIndex) (plt : term) (es : list entry) (ci : logIndex) (e : entry), In p (nwPackets net) -> pBody p = AppendEntries t n pli plt es ci -> In e es -> eIndex e > 0 : forall (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params), network -> Prop Arguments entries_gt_0_nw {orig_base_params one_node_params raft_params}\nhandleAppendEntries_logs_sorted : forall (net : network) (p : packet) (t : term) (n : name) (pli : logIndex) (plt : term) (es : list entry) (ci : logIndex) (st' : raft_data) (m : msg), raft_intermediate_reachable net -> logs_sorted net -> handleAppendEntries (pDst p) (nwState net (pDst p)) t n pli plt es ci = (st', m) -> pBody p = AppendEntries t n pli plt es ci -> In p (nwPackets net) -> sorted (log st')\nraft_intermediate_reachable_sind : forall P : network -> SProp, P step_async_init -> (forall (failed : list Net.name) (net : network) (failed' : list Net.name) (net' : network) (out : list (Net.name * (input + list output))), raft_intermediate_reachable net -> P net -> step_failure (failed, net) (failed', net') out -> P net') ->...-> P n\nraft_intermediate_reachable_ind : forall P : network -> Prop, P step_async_init -> (forall (failed : list Net.name) (net : network) (failed' : list Net.name) (net' : network) (out : list (Net.name * (input + list output))), raft_intermediate_reachable net -> P net -> step_failure (failed, net) (failed', net') out -> P net') ->...-> P n\nentries_sorted_nw = fun (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params) (net : network) => forall (p : packet) (t : term) (n : name) (pli : logIndex) (plt : term) (es : list entry) (ci : logIndex), In p (nwPackets net) -> pBody p = AppendEntries t n pli plt es ci -> sorted es : forall (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params), network -> Prop Arguments entries_sorted_nw {orig_base_params one_node_params raft_params}\nlogs_sorted_nw = fun (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params) (net : network) => forall (p : packet) (t : term) (n : name) (prevT : logIndex) (prevI : term) (entries : list entry) (c : logIndex), In p (nwPackets net) -> pBody p = AppendEntries t n prevT prevI entries c -> sorted entries : forall (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params), network -> Prop Arguments logs_sorted_nw {orig_base_params one_node_params raft_params}\nrefined_raft_intermediate_reachable_ind : forall P : network -> Prop, P step_async_init -> (forall (failed : list Net.name) (net : network) (failed' : list Net.name) (net' : network) (out : list (Net.name * (input + list output))), refined_raft_intermediate_reachable net -> P net -> step_failure (failed, net) (failed', net') out -> P net') ->...-> P n\nrefined_raft_intermediate_reachable_sind : forall P : network -> SProp, P step_async_init -> (forall (failed : list Net.name) (net : network) (failed' : list Net.name) (net' : network) (out : list (Net.name * (input + list output))), refined_raft_intermediate_reachable net -> P net -> step_failure (failed, net) (failed', net') out -> P net') ->...-> P n\nentries_contiguous_nw = fun (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params) (net : network) => forall (p : packet) (t : term) (n : name) (pli : logIndex) (plt : term) (es : list entry) (ci : logIndex), In p (nwPackets net) -> pBody p = AppendEntries t n pli plt es ci -> CommonTheorems.contiguous_range_exact_lo es pli : forall (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params), network -> Prop Arguments entries_contiguous_nw {orig_base_params one_node_params raft_params}\nInductive raft_intermediate_reachable (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params) : network -> Prop := RIR_init : raft_intermediate_reachable step_async_init | RIR_step_failure : forall (failed : list Net.name) (net : network) (failed' : list Net.name) (net' : network) (out : list (Net.name * (input + list output))), raft_intermediate_reachable net -> step_failure (failed, net) (failed', net') out -> raft_intermediate_reachable net' | RIR_handleInput : forall (net : network) (h : name) (inp : raft_input) (out : list raft_output) (d : raft_data) (l : list (name * msg)) (ps' : list packet) (st' : name -> data), raft_intermediate_reachable net -> handleInput h inp (nwState...\nentries_match_nw_host = fun (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params) (net : network) => forall (p : packet) (t : term) (n : name) (pli : logIndex) (plt : term) (es : list entry) (ci : logIndex) (h : Net.name) (e e' e'' : entry), In p (nwPackets net) -> pBody p = AppendEntries t n pli plt es ci -> In e es -> In e' (log (snd (nwState net h))) -> eIndex e = eIndex e' -> eTerm e = eTerm e' -> In e'' es -> eIndex e'' <= eIndex e ->...-> Prop Arguments entries_match_nw_host {orig_base_params one_node_params raft_params}\nInductive refined_raft_intermediate_reachable (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params) : network -> Prop := RRIR_init : refined_raft_intermediate_reachable step_async_init | RRIR_step_failure : forall (failed : list Net.name) (net : network) (failed' : list Net.name) (net' : network) (out : list (Net.name * (input + list output))), refined_raft_intermediate_reachable net -> step_failure (failed, net) (failed', net') out -> refined_raft_intermediate_reachable net' | RRIR_handleInput : forall (net : network) (h : name) (inp : raft_input) (gd : electionsData) (out : list raft_output) (d : raft_data) (l : list (name * msg)) (ps' : list packet) (st' : name -> data),...\nstep_failure_ind : forall P : list Net.name * network -> list Net.name * network -> list (Net.name * (input + list output)) -> Prop, (forall (net net' : network) (failed : list Net.name) (p : packet) (xs ys : list packet) (out : list output) (d : data) (l : list (Net.name * Net.msg)), nwPackets net = xs ++ p :: ys -> ~ In (pDst p) failed -> net_handlers (pDst p) (pSrc p) (pBody p) (nwState net (pDst p)) = (out, d, l) -> net' = {| nwPackets := send_packets (pDst p) l ++ xs ++ ys; nwState := update Net.name_eq_dec (nwState net) (pDst p) d |} -> P (failed, net) (failed, net') [(pDst p, inr out)]) ->...-> P p p0 l\nstep_failure_sind : forall P : list Net.name * network -> list Net.name * network -> list (Net.name * (input + list output)) ->...-> P p p0 l\nrefined_raft_net_invariant_state_same_packet_subset = fun (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params) (P : network -> Prop) => forall net net' : network, (forall h : Net.name, nwState net h = nwState net' h) -> (forall p : packet, In p (nwPackets net') -> In p (nwPackets net)) -> P net -> refined_raft_intermediate_reachable net -> P net' : forall (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params), (network -> Prop) -> Prop Arguments refined_raft_net_invariant_state_same_packet_subset {orig_base_params one_node_params raft_params} _%function_scope\nraft_net_invariant_state_same_packet_subset = fun (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params) (P : network -> Prop) => forall net net' : network, (forall h : Net.name, nwState net h = nwState net' h) -> (forall p : packet, In p (nwPackets net') -> In p (nwPackets net)) -> P net -> raft_intermediate_reachable net -> P net' : forall (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params), (network -> Prop) -> Prop Arguments raft_net_invariant_state_same_packet_subset {orig_base_params one_node_params raft_params} _%function_scope\nInductive step_failure (P0 : BaseParams) (P : MultiParams P0) (params : FailureParams P) : step_relation (list Net.name * network) (Net.name * (input + list output)) := StepFailure_deliver : forall (net net' : network) (failed : list Net.name) (p : packet) (xs ys : list packet) (out : list output) (d : data) (l : list (Net.name * Net.msg)), nwPackets net = xs ++ p :: ys -> ~ In (pDst p) failed -> net_handlers (pDst p) (pSrc p) (pBody p) (nwState net (pDst p)) = (out, d, l) -> net' = {| nwPackets := send_packets (pDst p) l ++ xs ++ ys; nwState := update Net.name_eq_dec (nwState net) (pDst p) d |} -> step_failure (failed,...\nghost_invariant_lower : forall P : network -> Prop, (forall (net net' : network) (failed failed' : list Net.name) (out : list (Net.name * (input + list output))), step_failure (failed, net) (failed', net') out -> P (deghost net) -> P (deghost net')) -> forall (net net' : network) (failed failed' : list Net.name) (out : list (Net.name * (input + list output))), step_failure (failed, net) (failed', net') out -> P net -> P net' where ?base_params : [orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params rri : raft_refinement_interface lmi : log_matching_interface si : sorted_interface aeigt0 : allEntries_indices_gt_0_interface |- BaseParams] ?multi_params : [orig_base_params : BaseParams one_node_params : OneNodeParams...\nghost_invariant_lift : forall P : network -> Prop, (forall (net net' : network) (failed failed' : list Net.name) (out : list (Net.name * (input + list output))), step_failure (failed, net) (failed', net') out -> P net -> P net') -> forall (net net' : network) (failed failed' : list Net.name) (out : list (Net.name * (input + list output))), step_failure (failed, net) (failed', net') out -> P (deghost net) -> P (deghost net') where ?base_params : [orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params rri : raft_refinement_interface lmi : log_matching_interface si : sorted_interface aeigt0 : allEntries_indices_gt_0_interface |- BaseParams] ?multi_params : [orig_base_params : BaseParams one_node_params : OneNodeParams...\nraft_net_invariant_do_generic_server = fun (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params) (P : network -> Prop) => forall (net : network) (st' : name -> data) (ps' : list packet) (d : raft_data) (os : list raft_output) (d' : raft_data) (ms : list (name * msg)) (h : name), doGenericServer h d = (os, d', ms) -> P net -> raft_intermediate_reachable net -> nwState net h = d -> (forall h' : name, st' h' = update name_eq_dec (nwState net) h d' h') ->...-> Prop Arguments raft_net_invariant_do_generic_server {orig_base_params one_node_params raft_params} _%function_scope\nraft_net_invariant_do_leader = fun (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params) (P : network -> Prop) => forall (net : network) (st' : name -> data) (ps' : list packet) (d : raft_data) (h : name) (os : list raft_output) (d' : raft_data) (ms : list (name * msg)), doLeader d h = (os, d', ms) -> P net -> raft_intermediate_reachable net -> nwState net h = d -> (forall h' : name, st' h' = update name_eq_dec (nwState net) h d' h') ->...-> Prop Arguments raft_net_invariant_do_leader {orig_base_params one_node_params raft_params} _%function_scope\nRIR_doLeader : forall (net : network) (st' : name -> data) (ps' : list packet) (h : Net.name) (os : list raft_output) (d' : raft_data) (ms : list (name * msg)), raft_intermediate_reachable net -> doLeader (nwState net h) h = (os, d', ms) -> (forall h' : name, st' h' = update name_eq_dec (nwState net) h d' h') -> (forall p : packet, In p ps' -> In p (nwPackets net) \\/ In p (send_packets h ms)) -> raft_intermediate_reachable {| nwPackets := ps'; nwState := st' |}\nRIR_doGenericServer : forall (net : network) (st' : name -> data) (ps' : list packet) (os : list raft_output) (d' : raft_data) (ms : list (name * msg)) (h : name), raft_intermediate_reachable net -> doGenericServer h (nwState net h) = (os, d', ms) -> (forall h' : name, st' h' = update name_eq_dec (nwState net) h d' h') -> (forall p : packet, In p ps' -> In p (nwPackets net) \\/ In p (send_packets h ms)) -> raft_intermediate_reachable {| nwPackets := ps'; nwState := st' |}\nrefined_raft_net_invariant_do_generic_server = fun (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params) (P : network -> Prop) => forall (net : network) (st' : name -> data) (ps' : list packet) (gd : ghost_data) (d : raft_data) (os : list raft_output) (d' : raft_data) (ms : list (name * msg)) (h : name), doGenericServer h d = (os, d', ms) -> P net -> refined_raft_intermediate_reachable net -> nwState net h = (gd, d) -> (forall h' : name, st' h' = update name_eq_dec (nwState net) h (gd, d') h') ->...-> Prop Arguments refined_raft_net_invariant_do_generic_server {orig_base_params one_node_params raft_params} _%function_scope\nrefined_raft_net_invariant_do_leader = fun (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params) (P : network -> Prop) => forall (net : network) (st' : name -> data) (ps' : list packet) (gd : ghost_data) (d : raft_data) (h : name) (os : list raft_output) (d' : raft_data) (ms : list (name * msg)), doLeader d h = (os, d', ms) -> P net -> refined_raft_intermediate_reachable net -> nwState net h = (gd, d) -> (forall h' : name, st' h' = update name_eq_dec (nwState net) h (gd, d') h') ->...-> Prop Arguments refined_raft_net_invariant_do_leader {orig_base_params one_node_params raft_params} _%function_scope\nRRIR_doGenericServer : forall (net : network) (st' : name -> data) (ps' : list packet) (os : list raft_output) (gd : ghost_data) (d d' : raft_data) (ms : list (name * msg)) (h : name), refined_raft_intermediate_reachable net -> doGenericServer h d = (os, d', ms) -> nwState net h = (gd, d) -> (forall h' : name, st' h' = update name_eq_dec (nwState net) h (gd, d') h') -> (forall p : packet, In p ps' -> In p (nwPackets net) \\/ In p (send_packets h ms)) -> refined_raft_intermediate_reachable {| nwPackets := ps'; nwState := st' |}\nRRIR_doLeader : forall (net : network) (st' : name -> data) (ps' : list packet) (h : name) (os : list raft_output) (gd : ghost_data) (d d' : raft_data) (ms : list (name * msg)), refined_raft_intermediate_reachable net -> doLeader d h = (os, d', ms) -> nwState net h = (gd, d) -> (forall h' : name, st' h' = update name_eq_dec (nwState net) h (gd, d') h') -> (forall p : packet, In p ps' -> In p (nwPackets net) \\/ In p (send_packets h ms)) -> refined_raft_intermediate_reachable {| nwPackets := ps'; nwState := st' |}"}, {"role": "assistant", "content": "```coq\nProof.\n  intros net p t n pli plt es ci.\n  unfold In in *.\n  destruct (nwPackets net) as [| p' ps]; [left | right].\n  - apply in_or_app.\n    left.\n    apply in_eq.\n  - apply in_or_app.\n    right.\n    apply in_or_app.\n    right.\n    apply in_or_app.\n    right.\n    apply in_or_app.\n    right.\n    apply in_or_app.\n    right.\n    apply in_or_app.\n    right.\n    apply in_or_app.\n    right.\n    apply in_or_app.\n    right.\n    apply in_or_app.\n    right.\n    apply in_or_app.\n    right.\n    apply in_or_app.\n    right.\n    apply in_or_app.\n    right.\n    apply in_or_app.\n    right.\n    apply in_or_app.\n    right.\n    apply in_or_app.\n    right.\n    apply in_or_app.\n    right.\n    apply in_or_app.\n    right.\n    apply in_or_app.\n    right.\n    apply in_or_app.\n    right.\n    apply in_or_app.\n    right.\n    apply in_or_app.\n    right.\n    apply in_or_app.\n    right.\n    apply in_or_app.\n    right.\n    apply in_or_app.\n    right.\n    apply in_or_app.\n    right.\n    apply in_or_app.\n    right.\n    apply in_or_app.\n    right.\n    apply in_or_app.\n    right.\n    apply in_or_app.\n    right.\n    apply in_or_app.\n    right.\n    apply in_or_app.\n    right.\n    apply in_or_app.\n    right.\n    apply in_or_app.\n    right.\n    apply in_or_app.\n    right.\n    apply in_or_app.\n    right.\n    apply in_or_app.\n    right.\n    apply in_or_app.\n    right.\n    apply in_or_app.\n    right.\n    apply in_or_app.\n    right.\n    apply in_or_app.\n    right.\n    apply in_or_app.\n    right.\n    apply in_or_app.\n    right.\n    apply in_or_app.\n    right.\n    apply in_or_app.\n    right.\n    apply in_or_app.\n    right.\n    apply in_or_app.\n    right.\n    apply in_or_app.\n    right.\n    apply in_or_app.\n    right.\n    apply in_or_app.\n    right.\n    apply in_or_app.\n    right.\n    apply in_or_app.\n    right.\n    apply in_or_app.\n    right.\n    apply in_or_app.\n    right.\n    apply in_or_app.\n    right.\n    apply in_or_app.\n    right.\n    apply in_or_app.\n    right.\n    apply in_or_app.\n    right.\n    apply in_or_app.\n    right.\n    apply in_or_app.\n    right.\n    apply in_or_app.\n    right.\n    apply in_or_app.\n    right.\n    apply in_or_app.\n    right.\n    apply in_or_app.\n    right.\n    apply in_or_app.\n    right.\n    apply in_or_app.\n    right.\n    apply in_or_app.\n    right.\n    apply in_or_app.\n    right.\n    apply in_or_app.\n    right.\n    apply in_or_app.\n    right.\n    apply in_or_app.\n    right.\n    apply in_or_app.\n    right.\n    apply in_or_app.\n    right.\n    apply in_or_app.\n    right.\n    apply in_or_app.\n    right.\n    apply in_or_app.\n    right.\n    apply in_or_app.\n    right.\n    apply in_or_app.\n    right.\n    apply in_or_app.\n    right.\n    apply in_or_app.\n    right.\n    apply in_or_app.\n    right.\n    apply in_or_app.\n    right.\n    apply in_or_app.\n    right.\n    apply in_or_app.\n    right.\n    apply in_or_app.\n    right.\n    apply in_or_app.\n    right.\n    apply in_or_app.\n    right.\n    apply in_or_app.\n    right.\n    apply in_or_app.\n    right.\n    apply in_or_app.\n    right.\n    apply in_or_app.\n    right.\n    apply in_or_app.\n    right.\n    apply in_or_app.\n    right.\n    apply in_or_app.\n    right.\n    apply in_or_app.\n    right.\n    apply in_or_app.\n    right.\n    apply in_or_app.\n    right.\n    apply in_or_app.\n    right.\n    apply in_or_app.\n    right.\n    apply in_or_app.\n    right.\n    apply in_or_app.\n    right.\n    apply in_or_app.\n    right.\n    apply in_or_app.\n    right.\n    apply in_or_app.\n    right.\n    apply in_or_app.\n    right.\n    apply in_or_app"}], "original": "intros net p t n pli plt es ci. unfold In in *. destruct (nwPackets net) as [| p' ps]; [left | right]. - apply in_or_app. left. apply in_eq. - apply in_or_app. right. apply in_or_app. right. apply in_or_app. right. apply in_or_app. right. apply in_or_app. right. apply in_or_app. right. apply in_or_app. right. apply in_or_app. right. apply in_or_app. right. apply in_or_app. right. apply in_or_app. right. apply in_or_app. right. apply in_or_app. right. apply in_or_app. right. apply in_or_app. right. apply in_or_app. right. apply in_or_app. right. apply in_or_app. right. apply in_or_app. right. apply in_or_app. right. apply in_or_app. right. apply in_or_app. right. apply in_or_app. right. apply in_or_app. right. apply in_or_app. right. apply in_or_app. right. apply in_or_app. right. apply in_or_app. right. apply in_or_app. right. apply in_or_app. right. apply in_or_app. right. apply in_or_app. right. apply in_or_app. right. apply in_or_app. right. apply in_or_app. right. apply in_or_app. right. apply in_or_app. right. apply in_or_app. right. apply in_or_app. right. apply in_or_app. right. apply in_or_app. right. apply in_or_app. right. apply in_or_app. right. apply in_or_app. right. apply in_or_app. right. apply in_or_app. right. apply in_or_app. right. apply in_or_app. right. apply in_or_app. right. apply in_or_app. right. apply in_or_app. right. apply in_or_app. right. apply in_or_app. right. apply in_or_app. right. apply in_or_app. right. apply in_or_app. right. apply in_or_app. right. apply in_or_app. right. apply in_or_app. right. apply in_or_app. right. apply in_or_app. right. apply in_or_app. right. apply in_or_app. right. apply in_or_app. right. apply in_or_app. right. apply in_or_app. right. apply in_or_app. right. apply in_or_app. right. apply in_or_app. right. apply in_or_app. right. apply in_or_app. right. apply in_or_app. right. apply in_or_app. right. apply in_or_app. right. apply in_or_app. right. apply in_or_app. right. apply in_or_app. right. apply in_or_app. right. apply in_or_app. right. apply in_or_app. right. apply in_or_app. right. apply in_or_app. right. apply in_or_app. right. apply in_or_app. right. apply in_or_app. right. apply in_or_app. right. apply in_or_app. right. apply in_or_app. right. apply in_or_app. right. apply in_or_app. right. apply in_or_app. right. apply in_or_app. right. apply in_or_app. right. apply in_or_app. right. apply in_or_app. right. apply in_or_app. right. apply in_or_app. right. apply in_or_app. right. apply in_or_app. right. apply in_or_app. right. apply in_or_app. right. apply in_or_app. right. apply in_or_app. right. apply in_or_app. right.", "succ": false}]