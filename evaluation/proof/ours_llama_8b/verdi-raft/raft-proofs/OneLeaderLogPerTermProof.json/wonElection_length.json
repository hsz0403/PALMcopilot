[{"history": {"proof": "", "repairs": [], "exceptions": []}, "chat": [{"role": "user", "content": "I will give you a Coq proof state, including both hypotheses and a specific goal and your need to prove it. Your response should be a singular code block of Coq proof starting with \"```coq\n\", ending with \"Qed.```\", without any additional explanation or commentary. Follow to these guidelines:\nIntroduce variables using unique names to avoid any conflicts.\nKeep each command distinct and separated, avoid concatenations like ';' or '[cmd|cmd]'.\nOrganize your proof with bullets like '-', '+', and '*' instead of braces ({, }). Shift to their double symbols like '--' and '++', when necessary.\nEffectively use given premises, follow the syntax and structure demonstrated in the examples provided.\n\nExample 1:\n\nHypotheses:\nn, m: nat\nIHn: m + n = n + m\n\nGoal:\nm + S n = S n + m\n\nProof:\n```coq\nsimpl. rewrite <- IHn. auto.\nQed.```\n\nExample 2:\nHypotheses:\n\nGoal:\nforall n m : nat, m + n = n + m\n\n```coq\nintros n m. induction n.\n- simpl. auto.\n- simpl. rewrite <- IHn. auto.\nQed.```\n\nSolve This Proof State:\n\nHypotheses:\norig_base_params: BaseParams\none_node_params: OneNodeParams orig_base_params\nraft_params: RaftParams orig_base_params\nrri: raft_refinement_interface\nllvwli: leaderLogs_votesWithLog_interface\nvci: votes_correct_interface\ncci: cronies_correct_interface\nvvci: votes_votesWithLog_correspond_interface\nlltsi: leaderLogs_term_sanity_interface\n\nGoal:\nforall votes : list name, wonElection votes = true -> length votes > div2 (length nodes)\n\nPremises:\nname = fun (orig_base_params : BaseParams) (raft_params : RaftParams orig_base_params) => fin N : forall orig_base_params : BaseParams, RaftParams orig_base_params -> Type Arguments name {orig_base_params raft_params}\nwonElection = fun (orig_base_params : BaseParams) (raft_params : RaftParams orig_base_params) (votes : list name) => S (div2 (length nodes)) <=? length votes : forall (orig_base_params : BaseParams) (raft_params : RaftParams orig_base_params), list name -> bool Arguments wonElection {orig_base_params raft_params} _%list_scope\nInductive list (A : Type) : Type := nil : list A | cons : A -> list A -> list A Arguments list _%type_scope Arguments nil {A}%type_scope Arguments cons {A}%type_scope a l%list_scope : rename\ndiv2 = fix div2 (a : nat) : nat := match a with | S (S n) => S (div2 n) | _ => 0 end : nat -> nat Arguments div2 _%nat_scope\nlength : forall A : Type, list A -> nat\nInductive bool : Set := true : bool | false : bool\nnodes = fun (orig_base_params : BaseParams) (raft_params : RaftParams orig_base_params) => all_fin N : forall (orig_base_params : BaseParams) (raft_params : RaftParams orig_base_params), list name Arguments nodes {orig_base_params raft_params}\nRecord RaftParams (orig_base_params : BaseParams) : Type := Build_RaftParams { N : nat; input_eq_dec : forall x y : input, {x = y} + {x <> y}; output_eq_dec : forall x y : output, {x = y} + {x <> y}; clientId : Type; clientId_eq_dec : forall x y : clientId, {x = y} + {x <> y} } Arguments Build_RaftParams _ _%nat_scope (_ _)%function_scope [clientId]%type_scope _%function_scope\nvotes = fun (orig_base_params : BaseParams) (raft_params : RaftParams orig_base_params) (e : electionsData) => let (votes, _, _, _, _) := e in votes : forall (orig_base_params : BaseParams) (raft_params : RaftParams orig_base_params), electionsData -> list (term * name) Arguments votes {orig_base_params raft_params}\nRecord OneNodeParams (P : BaseParams) : Type := Build_OneNodeParams { init : data; handler : input -> data -> output * data } Arguments Build_OneNodeParams _ _ _%function_scope\nwonElection_dedup_spec : forall l : list name, wonElection (dedup name_eq_dec l) = true -> exists quorum : list name, NoDup quorum /\\ length quorum > div2 (length nodes) /\\ (forall h : name, In h quorum -> In h l)\nwonElection_length : forall l1 l2 : list name, wonElection l1 = true -> length l1 <= length l2 -> wonElection l2 = true\nleaderLogs_votesWithLog = fun (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params) (net : network) => forall (t : term) (ll : list entry) (leader : Net.name), In (t, ll) (leaderLogs (fst (nwState net leader))) ->...-> Prop Arguments leaderLogs_votesWithLog {orig_base_params one_node_params raft_params}\nwonElection_no_dup_in : forall l1 l2 : list name, wonElection l1 = true -> NoDup l1 -> (forall x : name, In x l1 -> In x l2) -> wonElection l2 = true\nwonElection_one_in_common : forall l l' : list name, wonElection (dedup name_eq_dec l) = true -> wonElection (dedup name_eq_dec l') = true -> exists h : name, In h l /\\ In h l'\nupdate_elections_data_requestVoteReply = fun (orig_base_params : BaseParams) (raft_params : RaftParams orig_base_params) (me src : name) (t : nat) (voteGranted : bool) (st : electionsData * RaftState.raft_data term name entry logIndex serverType data clientId output) => let st' := handleRequestVoteReply me (snd st) src t voteGranted in match type st' with | Follower => fst st | Candidate => {| votes := votes (fst st); votesWithLog := votesWithLog (fst st); cronies := fun tm : term => if Nat.eq_dec tm (currentTerm st') then votesReceived st' else cronies (fst st) tm; leaderLogs := leaderLogs (fst st); allEntries := allEntries (fst st) |} | Leader => {| votes := votes (fst st); votesWithLog := votesWithLog (fst st); cronies := fun tm : term => if Nat...\nwonElection_exists_voter : forall l : list name, wonElection l = true -> exists x : name, In x l\nelections_ghost_params = fun (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params) => {| ghost_data := electionsData; ghost_init := {| votes := []; votesWithLog := []; cronies := fun _ : term => []; leaderLogs := []; allEntries := [] |}; ghost_net_handlers := update_elections_data_net; ghost_input_handlers := update_elections_data_input |} : forall (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params), GhostMultiParams multi_params Arguments elections_ghost_params {orig_base_params one_node_params raft_params}\nRecord electionsData (orig_base_params : BaseParams) (raft_params : RaftParams orig_base_params) : Type := mkElectionsData { votes : list (term * name); votesWithLog : list (term * name * list entry); cronies : term -> list name; leaderLogs : list (term * list entry); allEntries : list (term * entry) } Arguments electionsData {orig_base_params raft_params} Arguments mkElectionsData {orig_base_params raft_params} (_ _)%list_scope _%function_scope (_ _)%list_scope\nhaveQuorum = fun (orig_base_params : BaseParams) (raft_params : RaftParams orig_base_params) (state : raft_data) (_ : name) (N : logIndex) => div2 (length nodes) <? length (filter (fun h : name => N <=? assoc_default name_eq_dec (matchIndex state) h 0) nodes) : forall (orig_base_params : BaseParams) (raft_params : RaftParams orig_base_params), raft_data -> name -> logIndex -> bool Arguments haveQuorum {orig_base_params raft_params}\ndiv2_correct : forall c a b : nat, a > div2 c -> b > div2 c -> a + b > c\nremove_length_lt : forall (A : Type) (x : A) (xs : list A) (eq_dec : forall x0 y : A, {x0 = y} + {x0 <> y}), In x xs -> length xs > length (remove eq_dec x xs)\nvotes_received_leaders = fun (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params) (net : network) => forall h : Net.name, type (snd (nwState net h)) = Leader -> wonElection (dedup name_eq_dec (votesReceived (snd (nwState net h)))) = true : forall (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params), network -> Prop Arguments votes_received_leaders {orig_base_params one_node_params raft_params}\npigeon : forall A : Type, (forall x y : A, {x = y} + {x <> y}) -> forall l sub1 sub2 : list A, (forall a : A, In a sub1 -> In a l) -> (forall a : A, In a sub2 -> In a l) -> NoDup l -> NoDup sub1 -> NoDup sub2 -> length sub1 + length sub2 > length l -> exists a : A, In a sub1 /\\ In a sub2\nRecord leaderLogs_term_sanity_interface (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params) : Prop := Build_leaderLogs_term_sanity_interface { leaderLogs_term_sanity_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaderLogs_term_sanity net; leaderLogs_currentTerm_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaderLogs_currentTerm_sanity net; leaderLogs_currentTerm_sanity_candidate_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaderLogs_currentTerm_sanity_candidate net } Arguments leaderLogs_term_sanity_interface {orig_base_params one_node_params raft_params} Arguments Build_leaderLogs_term_sanity_interface {orig_base_params one_node_params raft_params} (_ _ _)%function_scope\ncandidateEntriesTerm = fun (orig_base_params : BaseParams) (raft_params : RaftParams orig_base_params) (t : term) (sigma : name -> electionsData * RaftState.raft_data term name entry logIndex serverType data clientId output) => exists h : name, wonElection (dedup name_eq_dec (cronies (fst (sigma h)) t)) = true /\\ (currentTerm (snd (sigma h)) = t -> type (snd (sigma h)) <> Candidate) : forall (orig_base_params : BaseParams) (raft_params : RaftParams orig_base_params), term -> (name -> electionsData * RaftState.raft_data term name entry logIndex serverType data clientId output) -> Prop Arguments candidateEntriesTerm {orig_base_params raft_params} _ _%function_scope\ncandidateEntries = fun (orig_base_params : BaseParams) (raft_params : RaftParams orig_base_params) (e : entry) (sigma : name -> electionsData * RaftState.raft_data term name entry logIndex serverType data clientId output) => exists h : name, wonElection (dedup name_eq_dec (cronies (fst (sigma h)) (eTerm e))) = true /\\ (currentTerm (snd (sigma h)) = eTerm e -> type (snd (sigma h)) <> Candidate) : forall (orig_base_params : BaseParams) (raft_params : RaftParams orig_base_params), entry -> (name -> electionsData * RaftState.raft_data term name entry logIndex serverType data clientId output) -> Prop Arguments candidateEntries {orig_base_params raft_params} _ _%function_scope\nupdate : (forall x y : ?A, {x = y} + {x <> y}) -> (?A -> ?B) -> ?A -> ?B -> ?A -> ?B where ?A : [orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params rri : raft_refinement_interface llvwli : leaderLogs_votesWithLog_interface vci : votes_correct_interface cci : cronies_correct_interface vvci : votes_votesWithLog_correspond_interface lltsi : leaderLogs_term_sanity_interface |- Type] ?B : [orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params rri : raft_refinement_interface llvwli : leaderLogs_votesWithLog_interface vci : votes_correct_interface cci : cronies_correct_interface vvci : votes_votesWithLog_correspond_interface lltsi : leaderLogs_term_sanity_interface |- Type]\nwon_election_cronies : forall (net : network) (h : Net.name), cronies_correct net -> type (snd (nwState net h)) = Leader -> wonElection (dedup name_eq_dec (cronies (fst (nwState net h)) (currentTerm (snd (nwState net h))))) = true\nremove_length_not_in : forall (A : Type) (A_eq_dec : forall x y : A, {x = y} + {x <> y}) (x : A) (xs : list A), ~ In x xs -> length (remove A_eq_dec x xs) = length xs\nsubset_length : forall A : Type, (forall x y : A, {x = y} + {x <> y}) -> forall xs ys : list A, NoDup xs -> (forall x : A, In x xs -> In x ys) -> length ys >= length xs\nremove_length_ge : forall (A : Type) (A_eq_dec : forall x y : A, {x = y} + {x <> y}) (x : A) (xs : list A), NoDup xs -> length (remove A_eq_dec x xs) >= length xs - 1\nwonElection_candidateEntries_rvr : forall (net : network) (p : packet) (e : entry), votes_correct net -> cronies_correct net -> candidateEntries e (nwState net) -> In p (nwPackets net) -> pBody p = RequestVoteReply (eTerm e) true -> currentTerm (snd (nwState net (pDst p))) = eTerm e -> wonElection (dedup name_eq_dec (pSrc p :: votesReceived (snd (nwState net (pDst p))))) = true -> type (snd (nwState net (pDst p))) <> Candidate\nvotes_nw = fun (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params) (net : network) => forall (p : packet) (t : term), pBody p = RequestVoteReply t true -> In p (nwPackets net) -> In (t, pDst p) (votes (fst (nwState net (pSrc p)))) : forall (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params), network -> Prop Arguments votes_nw {orig_base_params one_node_params raft_params}\ncandidateEntries_wonElection : forall (net : network) (e : entry) (h : Net.name), one_vote_per_term net -> cronies_votes net -> votes_received_cronies net -> candidateEntries e (nwState net) -> currentTerm (snd (nwState net h)) = eTerm e -> wonElection (dedup name_eq_dec (votesReceived (snd (nwState net h)))) = true -> type (snd (nwState net h)) <> Candidate\nBuild_MultiParams : forall (P : BaseParams) (name msg : Type), (forall x y : msg, {x = y} + {x <> y}) -> (forall x y : name, {x = y} + {x <> y}) -> forall nodes : list name, (forall n : name, In n nodes) -> NoDup nodes -> (name -> data) -> (name -> name -> msg -> data -> list output * data * list (name * msg)) -> (name -> input -> data -> list output * data * list (name * msg)) -> MultiParams P\nhandleRequestVoteReply_spec' : forall (h : name) (st : RaftState.raft_data term name entry logIndex serverType data clientId output) (h' : name) (t : nat) (r : bool) (st' : raft_data), st' = handleRequestVoteReply h st h' t r -> log st' = log st /\\ (forall v : name, In v (votesReceived st) -> In v (votesReceived st')) /\\ (type st <> Leader /\\ type st' = Leader -> (type st = Candidate /\\ wonElection (dedup name_eq_dec (votesReceived st')) = true) /\\ r = true /\\ currentTerm st' = currentTerm st /\\ currentTerm st = t /\\ votesReceived st' = h' :: votesReceived st)\nremove_length_le : forall (A : Type) (x : A) (xs : list A) (eq_dec : forall x0 y : A, {x0 = y} + {x0 <> y}), length xs >= length (remove eq_dec x xs)\nrefined_raft_net_invariant_do_generic_server = fun (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params) (P : network -> Prop) => forall (net : network) (st' : name -> data) (ps' : list packet) (gd : ghost_data) (d : raft_data) (os : list raft_output) (d' : raft_data) (ms : list (name * msg)) (h : name), doGenericServer h d = (os, d', ms) -> P net -> refined_raft_intermediate_reachable net -> nwState net h = (gd, d) -> (forall h' : name, st' h' = update name_eq_dec (nwState net) h (gd, d') h') ->...-> Prop Arguments refined_raft_net_invariant_do_generic_server {orig_base_params one_node_params raft_params} _%function_scope\nrefined_raft_net_invariant_do_leader = fun (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params) (P : network -> Prop) => forall (net : network) (st' : name -> data) (ps' : list packet) (gd : ghost_data) (d : raft_data) (h : name) (os : list raft_output) (d' : raft_data) (ms : list (name * msg)), doLeader d h = (os, d', ms) -> P net -> refined_raft_intermediate_reachable net -> nwState net h = (gd, d) -> (forall h' : name, st' h' = update name_eq_dec (nwState net) h (gd, d') h') ->...-> Prop Arguments refined_raft_net_invariant_do_leader {orig_base_params one_node_params raft_params} _%function_scope"}, {"role": "assistant", "content": "```coq\nintros.\napply (wonElection_one_in_common _ _ _ _ _ _).\napply (wonElection_dedup_spec _ _ _ _ _).\napply (wonElection_length _ _ _ _ _).\nrewrite <- H.\nauto.\nQed.```"}], "original": "intros. apply (wonElection_one_in_common _ _ _ _ _ _). apply (wonElection_dedup_spec _ _ _ _ _). apply (wonElection_length _ _ _ _ _). rewrite <- H. auto.", "succ": false}]