[{"history": {"proof": "qsimpl time: 1. qsimpl time: 1 use: raft_data. qsimpl time: 1 use: raft_data,handleAppendEntries_log. qsimpl time: 1 use: raft_data,handleAppendEntries_log. qsimpl time: 1 use: raft_data,handleAppendEntries_log. qsimpl time: 1 use: raft_data,handleAppendEntries_log. qsimpl time: 1 use: raft_data,handleAppendEntries_log. qsimpl time: 1 use: raft_data,handleAppendEntries_log. qsimpl time: 1 use: raft_data,handleAppendEntries_log. qsimpl time: 1 use: raft_data,handleAppendEntries_log. qsimpl time: 1 use: raft_data,handleAppendEntries_log. qsimpl time: 1 use: raft_data,handleAppendEntries_log. qsimpl time: 1 use: raft_data,handleAppendEntries_log. qsimpl time: 1 use: raft_data,handleAppendEntries_log. qsimpl time: 1 use: raft_data,handleAppendEntries_log. qsimpl time: 1 use: raft_data,handleAppendEntries_log. qsimpl time: 1 use: raft_data,handleAppendEntries_log. qsimpl time: 1 use: raft_data,handleAppendEntries_log. qsimpl time: 1 use: raft_data,handleAppendEntries_log. qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "repairs": ["no_subterm", "not_evaluable", "no_hypos", "not_evaluable", "no_hypos", "not_evaluable", "no_hypos", "not_evaluable", "no_hypos", "not_evaluable", "no_hypos", "not_evaluable", "no_hypos", "not_evaluable", "no_hypos", "not_evaluable", "no_hypos", "not_evaluable", "no_hypos", "not_evaluable"], "exceptions": [{"ctx": ["intro h.", "intro st.", "intro t.", "intro n.", "intro pli.", "intro plt.", "intro es.", "intro ci.", "intro st'.", "intro ps.", "destruct (handleAppendEntries h st t n pli plt es ci) as [st'' ps'] eqn:E.", "apply handleAppendEntries_log in E."], "tactic": "rewrite <- E.", "exn": "Found no subterm matching \"currentTerm st <= t /\\\\ es <> [] /\\\\ pli = 0 /\\\\ log st'' = es \\\\/ (currentTerm st <= t /\\\\ es <> [] /\\\\ pli <> 0 /\\\\ (exists e : entry, In e (log st) /\\\\ eIndex e = pli /\\\\ eTerm e = plt)) /\\\\ log st'' = es ++ removeAfterIndex (log st) pli\" in the current goal.", "type": "no_subterm", "handled": true}, {"ctx": ["intro h.", "intro st.", "intro t.", "intro n.", "intro pli.", "intro plt.", "intro es.", "intro ci.", "intro st'.", "intro ps.", "destruct (handleAppendEntries h st t n pli plt es ci) as [st'' ps'] eqn:E.", "apply handleAppendEntries_log in E.", "qsimpl time: 1.", "unfold nextIndex_preserved in *."], "tactic": "unfold RaftState.raft_data in *.", "exn": "Cannot coerce RaftState.raft_data to an evaluable reference.", "type": "not_evaluable", "handled": true}, {"ctx": ["intro h.", "intro st.", "intro t.", "intro n.", "intro pli.", "intro plt.", "intro es.", "intro ci.", "intro st'.", "intro ps.", "destruct (handleAppendEntries h st t n pli plt es ci) as [st'' ps'] eqn:E.", "apply handleAppendEntries_log in E.", "qsimpl time: 1.", "unfold nextIndex_preserved in *.", "qsimpl time: 1 use: raft_data."], "tactic": "unfold RaftState.set_raft_data_commit in *.", "exn": "The reference RaftState.set_raft_data_commit was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intro h.", "intro st.", "intro t.", "intro n.", "intro pli.", "intro plt.", "intro es.", "intro ci.", "intro st'.", "intro ps.", "destruct (handleAppendEntries h st t n pli plt es ci) as [st'' ps'] eqn:E.", "apply handleAppendEntries_log in E.", "qsimpl time: 1.", "unfold nextIndex_preserved in *.", "qsimpl time: 1 use: raft_data.", "destruct st' as [log' type' currentTerm' votesReceived' votedFor']."], "tactic": "destruct st as [log type currentTerm votesReceived votedFor].", "exn": "type is already used.", "type": "used_var", "handled": true}, {"ctx": ["intro h.", "intro st.", "intro t.", "intro n.", "intro pli.", "intro plt.", "intro es.", "intro ci.", "intro st'.", "intro ps.", "destruct (handleAppendEntries h st t n pli plt es ci) as [st'' ps'] eqn:E.", "apply handleAppendEntries_log in E.", "qsimpl time: 1.", "unfold nextIndex_preserved in *.", "qsimpl time: 1 use: raft_data.", "destruct st' as [log' type' currentTerm' votesReceived' votedFor']."], "tactic": "destruct st as [log type' currentTerm votesReceived votedFor].", "exn": "type' is already used.", "type": "used_var", "handled": true}, {"ctx": ["intro h.", "intro st.", "intro t.", "intro n.", "intro pli.", "intro plt.", "intro es.", "intro ci.", "intro st'.", "intro ps.", "destruct (handleAppendEntries h st t n pli plt es ci) as [st'' ps'] eqn:E.", "apply handleAppendEntries_log in E.", "qsimpl time: 1.", "unfold nextIndex_preserved in *.", "qsimpl time: 1 use: raft_data.", "destruct st' as [log' type' currentTerm' votesReceived' votedFor']."], "tactic": "destruct st as [log type'' currentTerm votesReceived votedFor].", "exn": "votesReceived is already used.", "type": "used_var", "handled": true}, {"ctx": ["intro h.", "intro st.", "intro t.", "intro n.", "intro pli.", "intro plt.", "intro es.", "intro ci.", "intro st'.", "intro ps.", "destruct (handleAppendEntries h st t n pli plt es ci) as [st'' ps'] eqn:E.", "apply handleAppendEntries_log in E.", "qsimpl time: 1.", "unfold nextIndex_preserved in *.", "qsimpl time: 1 use: raft_data.", "destruct st' as [log' type' currentTerm' votesReceived' votedFor']."], "tactic": "destruct st as [log type'' currentTerm votesReceived' votedFor].", "exn": "votesReceived' is already used.", "type": "used_var", "handled": true}, {"ctx": ["intro h.", "intro st.", "intro t.", "intro n.", "intro pli.", "intro plt.", "intro es.", "intro ci.", "intro st'.", "intro ps.", "destruct (handleAppendEntries h st t n pli plt es ci) as [st'' ps'] eqn:E.", "apply handleAppendEntries_log in E.", "qsimpl time: 1.", "unfold nextIndex_preserved in *.", "qsimpl time: 1 use: raft_data.", "destruct st' as [log' type' currentTerm' votesReceived' votedFor'].", "destruct st as [log type'' currentTerm votesReceived'' votedFor]."], "tactic": "rewrite <- handleAppendEntries_log in E.", "exn": "No such hypothesis: E", "type": "no_hypos", "handled": true}, {"ctx": ["intro h.", "intro st.", "intro t.", "intro n.", "intro pli.", "intro plt.", "intro es.", "intro ci.", "intro st'.", "intro ps.", "destruct (handleAppendEntries h st t n pli plt es ci) as [st'' ps'] eqn:E.", "apply handleAppendEntries_log in E.", "qsimpl time: 1.", "unfold nextIndex_preserved in *.", "qsimpl time: 1 use: raft_data.", "destruct st' as [log' type' currentTerm' votesReceived' votedFor'].", "destruct st as [log type'' currentTerm votesReceived'' votedFor].", "qsimpl time: 1 use: raft_data,handleAppendEntries_log."], "tactic": "rewrite <- E.", "exn": "The reference E was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intro h.", "intro st.", "intro t.", "intro n.", "intro pli.", "intro plt.", "intro es.", "intro ci.", "intro st'.", "intro ps.", "destruct (handleAppendEntries h st t n pli plt es ci) as [st'' ps'] eqn:E.", "apply handleAppendEntries_log in E.", "qsimpl time: 1.", "unfold nextIndex_preserved in *.", "qsimpl time: 1 use: raft_data.", "destruct st' as [log' type' currentTerm' votesReceived' votedFor'].", "destruct st as [log type'' currentTerm votesReceived'' votedFor].", "qsimpl time: 1 use: raft_data,handleAppendEntries_log."], "tactic": "unfold RaftState.raft_data in *.", "exn": "Cannot coerce RaftState.raft_data to an evaluable reference.", "type": "not_evaluable", "handled": true}, {"ctx": ["intro h.", "intro st.", "intro t.", "intro n.", "intro pli.", "intro plt.", "intro es.", "intro ci.", "intro st'.", "intro ps.", "destruct (handleAppendEntries h st t n pli plt es ci) as [st'' ps'] eqn:E.", "apply handleAppendEntries_log in E.", "qsimpl time: 1.", "unfold nextIndex_preserved in *.", "qsimpl time: 1 use: raft_data.", "destruct st' as [log' type' currentTerm' votesReceived' votedFor'].", "destruct st as [log type'' currentTerm votesReceived'' votedFor].", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log."], "tactic": "unfold RaftState.set_raft_data_commit in *.", "exn": "The reference RaftState.set_raft_data_commit was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intro h.", "intro st.", "intro t.", "intro n.", "intro pli.", "intro plt.", "intro es.", "intro ci.", "intro st'.", "intro ps.", "destruct (handleAppendEntries h st t n pli plt es ci) as [st'' ps'] eqn:E.", "apply handleAppendEntries_log in E.", "qsimpl time: 1.", "unfold nextIndex_preserved in *.", "qsimpl time: 1 use: raft_data.", "destruct st' as [log' type' currentTerm' votesReceived' votedFor'].", "destruct st as [log type'' currentTerm votesReceived'' votedFor].", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log."], "tactic": "destruct st' as [log' type' currentTerm' votesReceived' votedFor'].", "exn": "The reference st' was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intro h.", "intro st.", "intro t.", "intro n.", "intro pli.", "intro plt.", "intro es.", "intro ci.", "intro st'.", "intro ps.", "destruct (handleAppendEntries h st t n pli plt es ci) as [st'' ps'] eqn:E.", "apply handleAppendEntries_log in E.", "qsimpl time: 1.", "unfold nextIndex_preserved in *.", "qsimpl time: 1 use: raft_data.", "destruct st' as [log' type' currentTerm' votesReceived' votedFor'].", "destruct st as [log type'' currentTerm votesReceived'' votedFor].", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log."], "tactic": "destruct st as [log type currentTerm votesReceived votedFor].", "exn": "The reference st was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intro h.", "intro st.", "intro t.", "intro n.", "intro pli.", "intro plt.", "intro es.", "intro ci.", "intro st'.", "intro ps.", "destruct (handleAppendEntries h st t n pli plt es ci) as [st'' ps'] eqn:E.", "apply handleAppendEntries_log in E.", "qsimpl time: 1.", "unfold nextIndex_preserved in *.", "qsimpl time: 1 use: raft_data.", "destruct st' as [log' type' currentTerm' votesReceived' votedFor'].", "destruct st as [log type'' currentTerm votesReceived'' votedFor].", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log."], "tactic": "rewrite <- handleAppendEntries_log in E.", "exn": "No such hypothesis: E", "type": "no_hypos", "handled": true}, {"ctx": ["intro h.", "intro st.", "intro t.", "intro n.", "intro pli.", "intro plt.", "intro es.", "intro ci.", "intro st'.", "intro ps.", "destruct (handleAppendEntries h st t n pli plt es ci) as [st'' ps'] eqn:E.", "apply handleAppendEntries_log in E.", "qsimpl time: 1.", "unfold nextIndex_preserved in *.", "qsimpl time: 1 use: raft_data.", "destruct st' as [log' type' currentTerm' votesReceived' votedFor'].", "destruct st as [log type'' currentTerm votesReceived'' votedFor].", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log."], "tactic": "rewrite <- E.", "exn": "The reference E was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intro h.", "intro st.", "intro t.", "intro n.", "intro pli.", "intro plt.", "intro es.", "intro ci.", "intro st'.", "intro ps.", "destruct (handleAppendEntries h st t n pli plt es ci) as [st'' ps'] eqn:E.", "apply handleAppendEntries_log in E.", "qsimpl time: 1.", "unfold nextIndex_preserved in *.", "qsimpl time: 1 use: raft_data.", "destruct st' as [log' type' currentTerm' votesReceived' votedFor'].", "destruct st as [log type'' currentTerm votesReceived'' votedFor].", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log."], "tactic": "unfold RaftState.raft_data in *.", "exn": "Cannot coerce RaftState.raft_data to an evaluable reference.", "type": "not_evaluable", "handled": true}, {"ctx": ["intro h.", "intro st.", "intro t.", "intro n.", "intro pli.", "intro plt.", "intro es.", "intro ci.", "intro st'.", "intro ps.", "destruct (handleAppendEntries h st t n pli plt es ci) as [st'' ps'] eqn:E.", "apply handleAppendEntries_log in E.", "qsimpl time: 1.", "unfold nextIndex_preserved in *.", "qsimpl time: 1 use: raft_data.", "destruct st' as [log' type' currentTerm' votesReceived' votedFor'].", "destruct st as [log type'' currentTerm votesReceived'' votedFor].", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log."], "tactic": "unfold RaftState.set_raft_data_commit in *.", "exn": "The reference RaftState.set_raft_data_commit was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intro h.", "intro st.", "intro t.", "intro n.", "intro pli.", "intro plt.", "intro es.", "intro ci.", "intro st'.", "intro ps.", "destruct (handleAppendEntries h st t n pli plt es ci) as [st'' ps'] eqn:E.", "apply handleAppendEntries_log in E.", "qsimpl time: 1.", "unfold nextIndex_preserved in *.", "qsimpl time: 1 use: raft_data.", "destruct st' as [log' type' currentTerm' votesReceived' votedFor'].", "destruct st as [log type'' currentTerm votesReceived'' votedFor].", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log."], "tactic": "destruct st' as [log' type' currentTerm' votesReceived' votedFor'].", "exn": "The reference st' was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intro h.", "intro st.", "intro t.", "intro n.", "intro pli.", "intro plt.", "intro es.", "intro ci.", "intro st'.", "intro ps.", "destruct (handleAppendEntries h st t n pli plt es ci) as [st'' ps'] eqn:E.", "apply handleAppendEntries_log in E.", "qsimpl time: 1.", "unfold nextIndex_preserved in *.", "qsimpl time: 1 use: raft_data.", "destruct st' as [log' type' currentTerm' votesReceived' votedFor'].", "destruct st as [log type'' currentTerm votesReceived'' votedFor].", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log."], "tactic": "destruct st as [log type currentTerm votesReceived votedFor].", "exn": "The reference st was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intro h.", "intro st.", "intro t.", "intro n.", "intro pli.", "intro plt.", "intro es.", "intro ci.", "intro st'.", "intro ps.", "destruct (handleAppendEntries h st t n pli plt es ci) as [st'' ps'] eqn:E.", "apply handleAppendEntries_log in E.", "qsimpl time: 1.", "unfold nextIndex_preserved in *.", "qsimpl time: 1 use: raft_data.", "destruct st' as [log' type' currentTerm' votesReceived' votedFor'].", "destruct st as [log type'' currentTerm votesReceived'' votedFor].", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log."], "tactic": "rewrite <- handleAppendEntries_log in E.", "exn": "No such hypothesis: E", "type": "no_hypos", "handled": true}, {"ctx": ["intro h.", "intro st.", "intro t.", "intro n.", "intro pli.", "intro plt.", "intro es.", "intro ci.", "intro st'.", "intro ps.", "destruct (handleAppendEntries h st t n pli plt es ci) as [st'' ps'] eqn:E.", "apply handleAppendEntries_log in E.", "qsimpl time: 1.", "unfold nextIndex_preserved in *.", "qsimpl time: 1 use: raft_data.", "destruct st' as [log' type' currentTerm' votesReceived' votedFor'].", "destruct st as [log type'' currentTerm votesReceived'' votedFor].", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log."], "tactic": "rewrite <- E.", "exn": "The reference E was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intro h.", "intro st.", "intro t.", "intro n.", "intro pli.", "intro plt.", "intro es.", "intro ci.", "intro st'.", "intro ps.", "destruct (handleAppendEntries h st t n pli plt es ci) as [st'' ps'] eqn:E.", "apply handleAppendEntries_log in E.", "qsimpl time: 1.", "unfold nextIndex_preserved in *.", "qsimpl time: 1 use: raft_data.", "destruct st' as [log' type' currentTerm' votesReceived' votedFor'].", "destruct st as [log type'' currentTerm votesReceived'' votedFor].", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log."], "tactic": "unfold RaftState.raft_data in *.", "exn": "Cannot coerce RaftState.raft_data to an evaluable reference.", "type": "not_evaluable", "handled": true}, {"ctx": ["intro h.", "intro st.", "intro t.", "intro n.", "intro pli.", "intro plt.", "intro es.", "intro ci.", "intro st'.", "intro ps.", "destruct (handleAppendEntries h st t n pli plt es ci) as [st'' ps'] eqn:E.", "apply handleAppendEntries_log in E.", "qsimpl time: 1.", "unfold nextIndex_preserved in *.", "qsimpl time: 1 use: raft_data.", "destruct st' as [log' type' currentTerm' votesReceived' votedFor'].", "destruct st as [log type'' currentTerm votesReceived'' votedFor].", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log."], "tactic": "unfold RaftState.set_raft_data_commit in *.", "exn": "The reference RaftState.set_raft_data_commit was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intro h.", "intro st.", "intro t.", "intro n.", "intro pli.", "intro plt.", "intro es.", "intro ci.", "intro st'.", "intro ps.", "destruct (handleAppendEntries h st t n pli plt es ci) as [st'' ps'] eqn:E.", "apply handleAppendEntries_log in E.", "qsimpl time: 1.", "unfold nextIndex_preserved in *.", "qsimpl time: 1 use: raft_data.", "destruct st' as [log' type' currentTerm' votesReceived' votedFor'].", "destruct st as [log type'' currentTerm votesReceived'' votedFor].", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log."], "tactic": "destruct st' as [log' type' currentTerm' votesReceived' votedFor'].", "exn": "The reference st' was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intro h.", "intro st.", "intro t.", "intro n.", "intro pli.", "intro plt.", "intro es.", "intro ci.", "intro st'.", "intro ps.", "destruct (handleAppendEntries h st t n pli plt es ci) as [st'' ps'] eqn:E.", "apply handleAppendEntries_log in E.", "qsimpl time: 1.", "unfold nextIndex_preserved in *.", "qsimpl time: 1 use: raft_data.", "destruct st' as [log' type' currentTerm' votesReceived' votedFor'].", "destruct st as [log type'' currentTerm votesReceived'' votedFor].", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log."], "tactic": "destruct st as [log type currentTerm votesReceived votedFor].", "exn": "The reference st was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intro h.", "intro st.", "intro t.", "intro n.", "intro pli.", "intro plt.", "intro es.", "intro ci.", "intro st'.", "intro ps.", "destruct (handleAppendEntries h st t n pli plt es ci) as [st'' ps'] eqn:E.", "apply handleAppendEntries_log in E.", "qsimpl time: 1.", "unfold nextIndex_preserved in *.", "qsimpl time: 1 use: raft_data.", "destruct st' as [log' type' currentTerm' votesReceived' votedFor'].", "destruct st as [log type'' currentTerm votesReceived'' votedFor].", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log."], "tactic": "rewrite <- handleAppendEntries_log in E.", "exn": "No such hypothesis: E", "type": "no_hypos", "handled": true}, {"ctx": ["intro h.", "intro st.", "intro t.", "intro n.", "intro pli.", "intro plt.", "intro es.", "intro ci.", "intro st'.", "intro ps.", "destruct (handleAppendEntries h st t n pli plt es ci) as [st'' ps'] eqn:E.", "apply handleAppendEntries_log in E.", "qsimpl time: 1.", "unfold nextIndex_preserved in *.", "qsimpl time: 1 use: raft_data.", "destruct st' as [log' type' currentTerm' votesReceived' votedFor'].", "destruct st as [log type'' currentTerm votesReceived'' votedFor].", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log."], "tactic": "rewrite <- E.", "exn": "The reference E was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intro h.", "intro st.", "intro t.", "intro n.", "intro pli.", "intro plt.", "intro es.", "intro ci.", "intro st'.", "intro ps.", "destruct (handleAppendEntries h st t n pli plt es ci) as [st'' ps'] eqn:E.", "apply handleAppendEntries_log in E.", "qsimpl time: 1.", "unfold nextIndex_preserved in *.", "qsimpl time: 1 use: raft_data.", "destruct st' as [log' type' currentTerm' votesReceived' votedFor'].", "destruct st as [log type'' currentTerm votesReceived'' votedFor].", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log."], "tactic": "unfold RaftState.raft_data in *.", "exn": "Cannot coerce RaftState.raft_data to an evaluable reference.", "type": "not_evaluable", "handled": true}, {"ctx": ["intro h.", "intro st.", "intro t.", "intro n.", "intro pli.", "intro plt.", "intro es.", "intro ci.", "intro st'.", "intro ps.", "destruct (handleAppendEntries h st t n pli plt es ci) as [st'' ps'] eqn:E.", "apply handleAppendEntries_log in E.", "qsimpl time: 1.", "unfold nextIndex_preserved in *.", "qsimpl time: 1 use: raft_data.", "destruct st' as [log' type' currentTerm' votesReceived' votedFor'].", "destruct st as [log type'' currentTerm votesReceived'' votedFor].", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log."], "tactic": "unfold RaftState.set_raft_data_commit in *.", "exn": "The reference RaftState.set_raft_data_commit was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intro h.", "intro st.", "intro t.", "intro n.", "intro pli.", "intro plt.", "intro es.", "intro ci.", "intro st'.", "intro ps.", "destruct (handleAppendEntries h st t n pli plt es ci) as [st'' ps'] eqn:E.", "apply handleAppendEntries_log in E.", "qsimpl time: 1.", "unfold nextIndex_preserved in *.", "qsimpl time: 1 use: raft_data.", "destruct st' as [log' type' currentTerm' votesReceived' votedFor'].", "destruct st as [log type'' currentTerm votesReceived'' votedFor].", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log."], "tactic": "destruct st' as [log' type' currentTerm' votesReceived' votedFor'].", "exn": "The reference st' was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intro h.", "intro st.", "intro t.", "intro n.", "intro pli.", "intro plt.", "intro es.", "intro ci.", "intro st'.", "intro ps.", "destruct (handleAppendEntries h st t n pli plt es ci) as [st'' ps'] eqn:E.", "apply handleAppendEntries_log in E.", "qsimpl time: 1.", "unfold nextIndex_preserved in *.", "qsimpl time: 1 use: raft_data.", "destruct st' as [log' type' currentTerm' votesReceived' votedFor'].", "destruct st as [log type'' currentTerm votesReceived'' votedFor].", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log."], "tactic": "destruct st as [log type currentTerm votesReceived votedFor].", "exn": "The reference st was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intro h.", "intro st.", "intro t.", "intro n.", "intro pli.", "intro plt.", "intro es.", "intro ci.", "intro st'.", "intro ps.", "destruct (handleAppendEntries h st t n pli plt es ci) as [st'' ps'] eqn:E.", "apply handleAppendEntries_log in E.", "qsimpl time: 1.", "unfold nextIndex_preserved in *.", "qsimpl time: 1 use: raft_data.", "destruct st' as [log' type' currentTerm' votesReceived' votedFor'].", "destruct st as [log type'' currentTerm votesReceived'' votedFor].", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log."], "tactic": "rewrite <- handleAppendEntries_log in E.", "exn": "No such hypothesis: E", "type": "no_hypos", "handled": true}, {"ctx": ["intro h.", "intro st.", "intro t.", "intro n.", "intro pli.", "intro plt.", "intro es.", "intro ci.", "intro st'.", "intro ps.", "destruct (handleAppendEntries h st t n pli plt es ci) as [st'' ps'] eqn:E.", "apply handleAppendEntries_log in E.", "qsimpl time: 1.", "unfold nextIndex_preserved in *.", "qsimpl time: 1 use: raft_data.", "destruct st' as [log' type' currentTerm' votesReceived' votedFor'].", "destruct st as [log type'' currentTerm votesReceived'' votedFor].", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log."], "tactic": "rewrite <- E.", "exn": "The reference E was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intro h.", "intro st.", "intro t.", "intro n.", "intro pli.", "intro plt.", "intro es.", "intro ci.", "intro st'.", "intro ps.", "destruct (handleAppendEntries h st t n pli plt es ci) as [st'' ps'] eqn:E.", "apply handleAppendEntries_log in E.", "qsimpl time: 1.", "unfold nextIndex_preserved in *.", "qsimpl time: 1 use: raft_data.", "destruct st' as [log' type' currentTerm' votesReceived' votedFor'].", "destruct st as [log type'' currentTerm votesReceived'' votedFor].", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log."], "tactic": "unfold RaftState.raft_data in *.", "exn": "Cannot coerce RaftState.raft_data to an evaluable reference.", "type": "not_evaluable", "handled": true}, {"ctx": ["intro h.", "intro st.", "intro t.", "intro n.", "intro pli.", "intro plt.", "intro es.", "intro ci.", "intro st'.", "intro ps.", "destruct (handleAppendEntries h st t n pli plt es ci) as [st'' ps'] eqn:E.", "apply handleAppendEntries_log in E.", "qsimpl time: 1.", "unfold nextIndex_preserved in *.", "qsimpl time: 1 use: raft_data.", "destruct st' as [log' type' currentTerm' votesReceived' votedFor'].", "destruct st as [log type'' currentTerm votesReceived'' votedFor].", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log."], "tactic": "unfold RaftState.set_raft_data_commit in *.", "exn": "The reference RaftState.set_raft_data_commit was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intro h.", "intro st.", "intro t.", "intro n.", "intro pli.", "intro plt.", "intro es.", "intro ci.", "intro st'.", "intro ps.", "destruct (handleAppendEntries h st t n pli plt es ci) as [st'' ps'] eqn:E.", "apply handleAppendEntries_log in E.", "qsimpl time: 1.", "unfold nextIndex_preserved in *.", "qsimpl time: 1 use: raft_data.", "destruct st' as [log' type' currentTerm' votesReceived' votedFor'].", "destruct st as [log type'' currentTerm votesReceived'' votedFor].", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log."], "tactic": "destruct st' as [log' type' currentTerm' votesReceived' votedFor'].", "exn": "The reference st' was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intro h.", "intro st.", "intro t.", "intro n.", "intro pli.", "intro plt.", "intro es.", "intro ci.", "intro st'.", "intro ps.", "destruct (handleAppendEntries h st t n pli plt es ci) as [st'' ps'] eqn:E.", "apply handleAppendEntries_log in E.", "qsimpl time: 1.", "unfold nextIndex_preserved in *.", "qsimpl time: 1 use: raft_data.", "destruct st' as [log' type' currentTerm' votesReceived' votedFor'].", "destruct st as [log type'' currentTerm votesReceived'' votedFor].", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log."], "tactic": "destruct st as [log type currentTerm votesReceived votedFor].", "exn": "The reference st was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intro h.", "intro st.", "intro t.", "intro n.", "intro pli.", "intro plt.", "intro es.", "intro ci.", "intro st'.", "intro ps.", "destruct (handleAppendEntries h st t n pli plt es ci) as [st'' ps'] eqn:E.", "apply handleAppendEntries_log in E.", "qsimpl time: 1.", "unfold nextIndex_preserved in *.", "qsimpl time: 1 use: raft_data.", "destruct st' as [log' type' currentTerm' votesReceived' votedFor'].", "destruct st as [log type'' currentTerm votesReceived'' votedFor].", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log."], "tactic": "rewrite <- handleAppendEntries_log in E.", "exn": "No such hypothesis: E", "type": "no_hypos", "handled": true}, {"ctx": ["intro h.", "intro st.", "intro t.", "intro n.", "intro pli.", "intro plt.", "intro es.", "intro ci.", "intro st'.", "intro ps.", "destruct (handleAppendEntries h st t n pli plt es ci) as [st'' ps'] eqn:E.", "apply handleAppendEntries_log in E.", "qsimpl time: 1.", "unfold nextIndex_preserved in *.", "qsimpl time: 1 use: raft_data.", "destruct st' as [log' type' currentTerm' votesReceived' votedFor'].", "destruct st as [log type'' currentTerm votesReceived'' votedFor].", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log."], "tactic": "rewrite <- E.", "exn": "The reference E was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intro h.", "intro st.", "intro t.", "intro n.", "intro pli.", "intro plt.", "intro es.", "intro ci.", "intro st'.", "intro ps.", "destruct (handleAppendEntries h st t n pli plt es ci) as [st'' ps'] eqn:E.", "apply handleAppendEntries_log in E.", "qsimpl time: 1.", "unfold nextIndex_preserved in *.", "qsimpl time: 1 use: raft_data.", "destruct st' as [log' type' currentTerm' votesReceived' votedFor'].", "destruct st as [log type'' currentTerm votesReceived'' votedFor].", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log."], "tactic": "unfold RaftState.raft_data in *.", "exn": "Cannot coerce RaftState.raft_data to an evaluable reference.", "type": "not_evaluable", "handled": true}, {"ctx": ["intro h.", "intro st.", "intro t.", "intro n.", "intro pli.", "intro plt.", "intro es.", "intro ci.", "intro st'.", "intro ps.", "destruct (handleAppendEntries h st t n pli plt es ci) as [st'' ps'] eqn:E.", "apply handleAppendEntries_log in E.", "qsimpl time: 1.", "unfold nextIndex_preserved in *.", "qsimpl time: 1 use: raft_data.", "destruct st' as [log' type' currentTerm' votesReceived' votedFor'].", "destruct st as [log type'' currentTerm votesReceived'' votedFor].", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log."], "tactic": "unfold RaftState.set_raft_data_commit in *.", "exn": "The reference RaftState.set_raft_data_commit was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intro h.", "intro st.", "intro t.", "intro n.", "intro pli.", "intro plt.", "intro es.", "intro ci.", "intro st'.", "intro ps.", "destruct (handleAppendEntries h st t n pli plt es ci) as [st'' ps'] eqn:E.", "apply handleAppendEntries_log in E.", "qsimpl time: 1.", "unfold nextIndex_preserved in *.", "qsimpl time: 1 use: raft_data.", "destruct st' as [log' type' currentTerm' votesReceived' votedFor'].", "destruct st as [log type'' currentTerm votesReceived'' votedFor].", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log."], "tactic": "destruct st' as [log' type' currentTerm' votesReceived' votedFor'].", "exn": "The reference st' was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intro h.", "intro st.", "intro t.", "intro n.", "intro pli.", "intro plt.", "intro es.", "intro ci.", "intro st'.", "intro ps.", "destruct (handleAppendEntries h st t n pli plt es ci) as [st'' ps'] eqn:E.", "apply handleAppendEntries_log in E.", "qsimpl time: 1.", "unfold nextIndex_preserved in *.", "qsimpl time: 1 use: raft_data.", "destruct st' as [log' type' currentTerm' votesReceived' votedFor'].", "destruct st as [log type'' currentTerm votesReceived'' votedFor].", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log."], "tactic": "destruct st as [log type currentTerm votesReceived votedFor].", "exn": "The reference st was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intro h.", "intro st.", "intro t.", "intro n.", "intro pli.", "intro plt.", "intro es.", "intro ci.", "intro st'.", "intro ps.", "destruct (handleAppendEntries h st t n pli plt es ci) as [st'' ps'] eqn:E.", "apply handleAppendEntries_log in E.", "qsimpl time: 1.", "unfold nextIndex_preserved in *.", "qsimpl time: 1 use: raft_data.", "destruct st' as [log' type' currentTerm' votesReceived' votedFor'].", "destruct st as [log type'' currentTerm votesReceived'' votedFor].", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log."], "tactic": "rewrite <- handleAppendEntries_log in E.", "exn": "No such hypothesis: E", "type": "no_hypos", "handled": true}, {"ctx": ["intro h.", "intro st.", "intro t.", "intro n.", "intro pli.", "intro plt.", "intro es.", "intro ci.", "intro st'.", "intro ps.", "destruct (handleAppendEntries h st t n pli plt es ci) as [st'' ps'] eqn:E.", "apply handleAppendEntries_log in E.", "qsimpl time: 1.", "unfold nextIndex_preserved in *.", "qsimpl time: 1 use: raft_data.", "destruct st' as [log' type' currentTerm' votesReceived' votedFor'].", "destruct st as [log type'' currentTerm votesReceived'' votedFor].", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log."], "tactic": "rewrite <- E.", "exn": "The reference E was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intro h.", "intro st.", "intro t.", "intro n.", "intro pli.", "intro plt.", "intro es.", "intro ci.", "intro st'.", "intro ps.", "destruct (handleAppendEntries h st t n pli plt es ci) as [st'' ps'] eqn:E.", "apply handleAppendEntries_log in E.", "qsimpl time: 1.", "unfold nextIndex_preserved in *.", "qsimpl time: 1 use: raft_data.", "destruct st' as [log' type' currentTerm' votesReceived' votedFor'].", "destruct st as [log type'' currentTerm votesReceived'' votedFor].", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log."], "tactic": "unfold RaftState.raft_data in *.", "exn": "Cannot coerce RaftState.raft_data to an evaluable reference.", "type": "not_evaluable", "handled": true}, {"ctx": ["intro h.", "intro st.", "intro t.", "intro n.", "intro pli.", "intro plt.", "intro es.", "intro ci.", "intro st'.", "intro ps.", "destruct (handleAppendEntries h st t n pli plt es ci) as [st'' ps'] eqn:E.", "apply handleAppendEntries_log in E.", "qsimpl time: 1.", "unfold nextIndex_preserved in *.", "qsimpl time: 1 use: raft_data.", "destruct st' as [log' type' currentTerm' votesReceived' votedFor'].", "destruct st as [log type'' currentTerm votesReceived'' votedFor].", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log."], "tactic": "unfold RaftState.set_raft_data_commit in *.", "exn": "The reference RaftState.set_raft_data_commit was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intro h.", "intro st.", "intro t.", "intro n.", "intro pli.", "intro plt.", "intro es.", "intro ci.", "intro st'.", "intro ps.", "destruct (handleAppendEntries h st t n pli plt es ci) as [st'' ps'] eqn:E.", "apply handleAppendEntries_log in E.", "qsimpl time: 1.", "unfold nextIndex_preserved in *.", "qsimpl time: 1 use: raft_data.", "destruct st' as [log' type' currentTerm' votesReceived' votedFor'].", "destruct st as [log type'' currentTerm votesReceived'' votedFor].", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log."], "tactic": "destruct st' as [log' type' currentTerm' votesReceived' votedFor'].", "exn": "The reference st' was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intro h.", "intro st.", "intro t.", "intro n.", "intro pli.", "intro plt.", "intro es.", "intro ci.", "intro st'.", "intro ps.", "destruct (handleAppendEntries h st t n pli plt es ci) as [st'' ps'] eqn:E.", "apply handleAppendEntries_log in E.", "qsimpl time: 1.", "unfold nextIndex_preserved in *.", "qsimpl time: 1 use: raft_data.", "destruct st' as [log' type' currentTerm' votesReceived' votedFor'].", "destruct st as [log type'' currentTerm votesReceived'' votedFor].", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log."], "tactic": "destruct st as [log type currentTerm votesReceived votedFor].", "exn": "The reference st was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intro h.", "intro st.", "intro t.", "intro n.", "intro pli.", "intro plt.", "intro es.", "intro ci.", "intro st'.", "intro ps.", "destruct (handleAppendEntries h st t n pli plt es ci) as [st'' ps'] eqn:E.", "apply handleAppendEntries_log in E.", "qsimpl time: 1.", "unfold nextIndex_preserved in *.", "qsimpl time: 1 use: raft_data.", "destruct st' as [log' type' currentTerm' votesReceived' votedFor'].", "destruct st as [log type'' currentTerm votesReceived'' votedFor].", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log."], "tactic": "rewrite <- handleAppendEntries_log in E.", "exn": "No such hypothesis: E", "type": "no_hypos", "handled": true}, {"ctx": ["intro h.", "intro st.", "intro t.", "intro n.", "intro pli.", "intro plt.", "intro es.", "intro ci.", "intro st'.", "intro ps.", "destruct (handleAppendEntries h st t n pli plt es ci) as [st'' ps'] eqn:E.", "apply handleAppendEntries_log in E.", "qsimpl time: 1.", "unfold nextIndex_preserved in *.", "qsimpl time: 1 use: raft_data.", "destruct st' as [log' type' currentTerm' votesReceived' votedFor'].", "destruct st as [log type'' currentTerm votesReceived'' votedFor].", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log."], "tactic": "rewrite <- E.", "exn": "The reference E was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intro h.", "intro st.", "intro t.", "intro n.", "intro pli.", "intro plt.", "intro es.", "intro ci.", "intro st'.", "intro ps.", "destruct (handleAppendEntries h st t n pli plt es ci) as [st'' ps'] eqn:E.", "apply handleAppendEntries_log in E.", "qsimpl time: 1.", "unfold nextIndex_preserved in *.", "qsimpl time: 1 use: raft_data.", "destruct st' as [log' type' currentTerm' votesReceived' votedFor'].", "destruct st as [log type'' currentTerm votesReceived'' votedFor].", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log."], "tactic": "unfold RaftState.raft_data in *.", "exn": "Cannot coerce RaftState.raft_data to an evaluable reference.", "type": "not_evaluable", "handled": true}, {"ctx": ["intro h.", "intro st.", "intro t.", "intro n.", "intro pli.", "intro plt.", "intro es.", "intro ci.", "intro st'.", "intro ps.", "destruct (handleAppendEntries h st t n pli plt es ci) as [st'' ps'] eqn:E.", "apply handleAppendEntries_log in E.", "qsimpl time: 1.", "unfold nextIndex_preserved in *.", "qsimpl time: 1 use: raft_data.", "destruct st' as [log' type' currentTerm' votesReceived' votedFor'].", "destruct st as [log type'' currentTerm votesReceived'' votedFor].", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log."], "tactic": "unfold RaftState.set_raft_data_commit in *.", "exn": "The reference RaftState.set_raft_data_commit was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intro h.", "intro st.", "intro t.", "intro n.", "intro pli.", "intro plt.", "intro es.", "intro ci.", "intro st'.", "intro ps.", "destruct (handleAppendEntries h st t n pli plt es ci) as [st'' ps'] eqn:E.", "apply handleAppendEntries_log in E.", "qsimpl time: 1.", "unfold nextIndex_preserved in *.", "qsimpl time: 1 use: raft_data.", "destruct st' as [log' type' currentTerm' votesReceived' votedFor'].", "destruct st as [log type'' currentTerm votesReceived'' votedFor].", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log."], "tactic": "destruct st' as [log' type' currentTerm' votesReceived' votedFor'].", "exn": "The reference st' was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intro h.", "intro st.", "intro t.", "intro n.", "intro pli.", "intro plt.", "intro es.", "intro ci.", "intro st'.", "intro ps.", "destruct (handleAppendEntries h st t n pli plt es ci) as [st'' ps'] eqn:E.", "apply handleAppendEntries_log in E.", "qsimpl time: 1.", "unfold nextIndex_preserved in *.", "qsimpl time: 1 use: raft_data.", "destruct st' as [log' type' currentTerm' votesReceived' votedFor'].", "destruct st as [log type'' currentTerm votesReceived'' votedFor].", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log."], "tactic": "destruct st as [log type currentTerm votesReceived votedFor].", "exn": "The reference st was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intro h.", "intro st.", "intro t.", "intro n.", "intro pli.", "intro plt.", "intro es.", "intro ci.", "intro st'.", "intro ps.", "destruct (handleAppendEntries h st t n pli plt es ci) as [st'' ps'] eqn:E.", "apply handleAppendEntries_log in E.", "qsimpl time: 1.", "unfold nextIndex_preserved in *.", "qsimpl time: 1 use: raft_data.", "destruct st' as [log' type' currentTerm' votesReceived' votedFor'].", "destruct st as [log type'' currentTerm votesReceived'' votedFor].", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log."], "tactic": "rewrite <- handleAppendEntries_log in E.", "exn": "No such hypothesis: E", "type": "no_hypos", "handled": true}, {"ctx": ["intro h.", "intro st.", "intro t.", "intro n.", "intro pli.", "intro plt.", "intro es.", "intro ci.", "intro st'.", "intro ps.", "destruct (handleAppendEntries h st t n pli plt es ci) as [st'' ps'] eqn:E.", "apply handleAppendEntries_log in E.", "qsimpl time: 1.", "unfold nextIndex_preserved in *.", "qsimpl time: 1 use: raft_data.", "destruct st' as [log' type' currentTerm' votesReceived' votedFor'].", "destruct st as [log type'' currentTerm votesReceived'' votedFor].", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log."], "tactic": "rewrite <- E.", "exn": "The reference E was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intro h.", "intro st.", "intro t.", "intro n.", "intro pli.", "intro plt.", "intro es.", "intro ci.", "intro st'.", "intro ps.", "destruct (handleAppendEntries h st t n pli plt es ci) as [st'' ps'] eqn:E.", "apply handleAppendEntries_log in E.", "qsimpl time: 1.", "unfold nextIndex_preserved in *.", "qsimpl time: 1 use: raft_data.", "destruct st' as [log' type' currentTerm' votesReceived' votedFor'].", "destruct st as [log type'' currentTerm votesReceived'' votedFor].", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log."], "tactic": "unfold RaftState.raft_data in *.", "exn": "Cannot coerce RaftState.raft_data to an evaluable reference.", "type": "not_evaluable", "handled": true}, {"ctx": ["intro h.", "intro st.", "intro t.", "intro n.", "intro pli.", "intro plt.", "intro es.", "intro ci.", "intro st'.", "intro ps.", "destruct (handleAppendEntries h st t n pli plt es ci) as [st'' ps'] eqn:E.", "apply handleAppendEntries_log in E.", "qsimpl time: 1.", "unfold nextIndex_preserved in *.", "qsimpl time: 1 use: raft_data.", "destruct st' as [log' type' currentTerm' votesReceived' votedFor'].", "destruct st as [log type'' currentTerm votesReceived'' votedFor].", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log."], "tactic": "unfold RaftState.set_raft_data_commit in *.", "exn": "The reference RaftState.set_raft_data_commit was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intro h.", "intro st.", "intro t.", "intro n.", "intro pli.", "intro plt.", "intro es.", "intro ci.", "intro st'.", "intro ps.", "destruct (handleAppendEntries h st t n pli plt es ci) as [st'' ps'] eqn:E.", "apply handleAppendEntries_log in E.", "qsimpl time: 1.", "unfold nextIndex_preserved in *.", "qsimpl time: 1 use: raft_data.", "destruct st' as [log' type' currentTerm' votesReceived' votedFor'].", "destruct st as [log type'' currentTerm votesReceived'' votedFor].", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log."], "tactic": "destruct st' as [log' type' currentTerm' votesReceived' votedFor'].", "exn": "The reference st' was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intro h.", "intro st.", "intro t.", "intro n.", "intro pli.", "intro plt.", "intro es.", "intro ci.", "intro st'.", "intro ps.", "destruct (handleAppendEntries h st t n pli plt es ci) as [st'' ps'] eqn:E.", "apply handleAppendEntries_log in E.", "qsimpl time: 1.", "unfold nextIndex_preserved in *.", "qsimpl time: 1 use: raft_data.", "destruct st' as [log' type' currentTerm' votesReceived' votedFor'].", "destruct st as [log type'' currentTerm votesReceived'' votedFor].", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log."], "tactic": "destruct st as [log type currentTerm votesReceived votedFor].", "exn": "The reference st was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intro h.", "intro st.", "intro t.", "intro n.", "intro pli.", "intro plt.", "intro es.", "intro ci.", "intro st'.", "intro ps.", "destruct (handleAppendEntries h st t n pli plt es ci) as [st'' ps'] eqn:E.", "apply handleAppendEntries_log in E.", "qsimpl time: 1.", "unfold nextIndex_preserved in *.", "qsimpl time: 1 use: raft_data.", "destruct st' as [log' type' currentTerm' votesReceived' votedFor'].", "destruct st as [log type'' currentTerm votesReceived'' votedFor].", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log.", "qsimpl time: 1 use: raft_data,handleAppendEntries_log."], "tactic": "rewrite <- handleAppendEntries_log in E.", "exn": "No such hypothesis: E", "type": "no_hypos", "handled": true}]}, "chat": [{"role": "user", "content": "I will give you a Coq proof state, including both hypotheses and a specific goal and your need to prove it. Your response should be a singular code block of Coq proof starting with \"```coq\n\", ending with \"Qed.```\", without any additional explanation or commentary. Follow to these guidelines:\nIntroduce variables using unique names to avoid any conflicts.\nKeep each command distinct and separated, avoid concatenations like ';' or '[cmd|cmd]'.\nOrganize your proof with bullets like '-', '+', and '*' instead of braces ({, }). Shift to their double symbols like '--' and '++', when necessary.\nEffectively use given premises, follow the syntax and structure demonstrated in the examples provided.\n\nExample 1:\n\nHypotheses:\nn, m: nat\nIHn: m + n = n + m\n\nGoal:\nm + S n = S n + m\n\nProof:\n```coq\nsimpl. rewrite <- IHn. auto.\nQed.```\n\nExample 2:\nHypotheses:\n\nGoal:\nforall n m : nat, m + n = n + m\n\n```coq\nintros n m. induction n.\n- simpl. auto.\n- simpl. rewrite <- IHn. auto.\nQed.```\n\nSolve This Proof State:\n\nHypotheses:\norig_base_params: BaseParams\none_node_params: OneNodeParams orig_base_params\nraft_params: RaftParams orig_base_params\naersi: append_entries_reply_sublog_interface\nsi: sorted_interface\n\nGoal:\nforall (h : name) (st : raft_data) (t : term) (n : name) (pli : logIndex) (plt : term) (es : list entry) (ci : logIndex) (st' : raft_data) (ps : msg), handleAppendEntries h st t n pli plt es ci = (st', ps) -> nextIndex_preserved st st'\n\nPremises:\nterm = nat : Set\nname = fun (orig_base_params : BaseParams) (raft_params : RaftParams orig_base_params) => fin N : forall orig_base_params : BaseParams, RaftParams orig_base_params -> Type Arguments name {orig_base_params raft_params}\nnextIndex_preserved = fun st st' : RaftState.raft_data term name entry logIndex serverType data clientId output => type st' = Leader -> type st = Leader /\\ maxIndex (log st) <= maxIndex (log st') /\\ nextIndex st' = nextIndex st : RaftState.raft_data term name entry logIndex serverType data clientId output -> RaftState.raft_data term name entry logIndex serverType data clientId output -> Prop\nInductive list (A : Type) : Type := nil : list A | cons : A -> list A -> list A Arguments list _%type_scope Arguments nil {A}%type_scope Arguments cons {A}%type_scope a l%list_scope : rename\nhandleAppendEntries = fun (orig_base_params : BaseParams) (raft_params : RaftParams orig_base_params) (_ : name) (state : raft_data) (t : term) (leaderId : name) (prevLogIndex : logIndex) (prevLogTerm : term) (entries : list entry) (leaderCommit : logIndex) => if t <? currentTerm state then (state, AppendEntriesReply (currentTerm state) entries false) else if prevLogIndex =? 0 then if haveNewEntries state entries then (RaftState.set_raft_data_leaderId term name entry logIndex serverType data clientId output (RaftState.set_raft_data_type term name entry logIndex serverType data clientId output (RaftState.set_raft_data_commit\nraft_data = fun (orig_base_params : BaseParams) (raft_params : RaftParams orig_base_params) => RaftState.raft_data term name entry logIndex serverType data clientId output : forall orig_base_params : BaseParams, RaftParams orig_base_params -> Type Arguments raft_data {orig_base_params raft_params}\nInductive msg (orig_base_params : BaseParams) (raft_params : RaftParams orig_base_params) : Type := RequestVote : term -> name -> logIndex -> term -> msg | RequestVoteReply : term -> bool -> msg | AppendEntries : term -> name -> logIndex -> term -> list entry -> logIndex -> msg | AppendEntriesReply : term -> list entry -> bool -> msg Arguments msg {orig_base_params raft_params} Arguments RequestVote {orig_base_params raft_params} Arguments RequestVoteReply {orig_base_params raft_params} _ _%bool_scope Arguments AppendEntries {orig_base_params raft_params} _ _ _ _ _%list_scope Arguments AppendEntriesReply {orig_base_params raft_params} _ _%list_scope _%bool_scope\n*** [ Core.ByteListReader.t : Type -> Type ] Arguments Core.ByteListReader.t _%type_scope\nRecord entry (orig_base_params : BaseParams) (raft_params : RaftParams orig_base_params) : Type := mkEntry { eAt : name; eClient : clientId; eId : nat; eIndex : logIndex; eTerm : term; eInput : input } Arguments entry {orig_base_params raft_params} Arguments mkEntry {orig_base_params raft_params} _ _ _%nat_scope\nRecord RaftParams (orig_base_params : BaseParams) : Type := Build_RaftParams { N : nat; input_eq_dec : forall x y : input, {x = y} + {x <> y}; output_eq_dec : forall x y : output, {x = y} + {x <> y}; clientId : Type; clientId_eq_dec : forall x y : clientId, {x = y} + {x <> y} } Arguments Build_RaftParams _ _%nat_scope (_ _)%function_scope [clientId]%type_scope _%function_scope\nRecord OneNodeParams (P : BaseParams) : Type := Build_OneNodeParams { init : data; handler : input -> data -> output * data } Arguments Build_OneNodeParams _ _ _%function_scope\nlogIndex = nat : Set\nhandleAppendEntries_same_lastApplied : forall (h : name) (st : raft_data) (t : term) (n : name) (pli : logIndex) (plt : term) (es : list entry) (ci : logIndex) (st' : raft_data) (ps : msg), handleAppendEntries h st t n pli plt es ci = (st', ps) -> lastApplied st' = lastApplied st\nhandleAppendEntries_votesReceived : forall (h : name) (st : raft_data) (t : term) (n : name) (pli : logIndex) (plt : term) (es : list entry) (ci : logIndex) (st' : raft_data) (ps : msg), handleAppendEntries h st t n pli plt es ci = (st', ps) -> votesReceived st' = votesReceived st\nhandleAppendEntries_currentTerm : forall (h : name) (st : raft_data) (t : term) (n : name) (pli : logIndex) (plt : term) (es : list entry) (ci : logIndex) (st' : raft_data) (ps : msg), handleAppendEntries h st t n pli plt es ci = (st', ps) -> currentTerm st <= currentTerm st'\nhandleAppendEntries_same_term_votedFor_preserved : forall (h : name) (st : raft_data) (t : term) (n : name) (pli : logIndex) (plt : term) (es : list entry) (ci : logIndex) (st' : raft_data) (ps : msg), handleAppendEntries h st t n pli plt es ci = (st', ps) -> currentTerm st' = currentTerm st -> votedFor st' = votedFor st\nhandleAppendEntries_type : forall (h : name) (st : raft_data) (t : term) (n : name) (pli : logIndex) (plt : term) (es : list entry) (ci : logIndex) (st' : raft_data) (ps : msg), handleAppendEntries h st t n pli plt es ci = (st', ps) -> type st' = type st /\\ currentTerm st' = currentTerm st \\/ type st' = Follower\nhandleAppendEntries_log_term_type : forall (h : name) (st : raft_data) (t : term) (n : name) (pli : logIndex) (plt : term) (es : list entry) (ci : logIndex) (st' : raft_data) (ps : msg), handleAppendEntries h st t n pli plt es ci = (st', ps) -> log st' = log st /\\ currentTerm st' = currentTerm st /\\ type st' = type st \\/ type st' = Follower\nhandleAppendEntries_type_term : forall (h : name) (st : raft_data) (t : term) (n : name) (pli : logIndex) (plt : term) (es : list entry) (ci : logIndex) (st' : raft_data) (ps : msg), handleAppendEntries h st t n pli plt es ci = (st', ps) -> type st' = type st /\\ currentTerm st' = currentTerm st \\/ type st' = Follower /\\ currentTerm st' >= currentTerm st\nhandleAppendEntries_currentTerm_leaderId : forall (h : name) (st : raft_data) (t : term) (n : name) (pli : logIndex) (plt : term) (es : list entry) (ci : logIndex) (st' : raft_data) (ps : msg), handleAppendEntries h st t n pli plt es ci = (st', ps) -> currentTerm st < currentTerm st' \\/ currentTerm st <= currentTerm st' /\\ (leaderId st' = leaderId st \\/ leaderId st' <> None)\nhandleAppendEntries_term_votedFor : forall (h : name) (st : raft_data) (t : term) (n : name) (pli : logIndex) (plt : term) (es : list entry) (ci : logIndex) (st' : raft_data) (ps : msg) (h' : name), handleAppendEntries h st t n pli plt es ci = (st', ps) -> votedFor st' = Some h' -> currentTerm st' = currentTerm st /\\ votedFor st' = votedFor st\nhandleAppendEntries_not_append_entries : forall (h : name) (st : raft_data) (t : term) (n : name) (pli : logIndex) (plt : term) (es : list entry) (ci : logIndex) (st' : raft_data) (m : msg), handleAppendEntries h st t n pli plt es ci = (st', m) -> ~ is_append_entries m\nhandleAppendEntries_matchIndex_preserved : forall (h : name) (st d : raft_data) (m : msg) (t : term) (n : name) (pli : logIndex) (plt : term) (es : list entry) (ci : logIndex), handleAppendEntries h st t n pli plt es ci = (d, m) -> matchIndex_preserved st d\nhandleAppendEntries_stateMachine : forall (h : name) (st d : raft_data) (m : msg) (t : term) (n : name) (pli : logIndex) (plt : term) (es : list entry) (ci : logIndex), handleAppendEntries h st t n pli plt es ci = (d, m) -> stateMachine d = stateMachine st\nhandleAppendEntries_clientCache : forall (h : name) (st d : raft_data) (m : msg) (t : term) (n : name) (pli : logIndex) (plt : term) (es : list entry) (ci : logIndex), handleAppendEntries h st t n pli plt es ci = (d, m) -> clientCache d = clientCache st\nhandleAppendEntries_log : forall (h : name) (st : raft_data) (t : term) (n : name) (pli : logIndex) (plt : term) (es : list entry) (ci : logIndex) (st' : raft_data) (ps : msg), handleAppendEntries h st t n pli plt es ci = (st', ps) -> log st' = log st \\/ currentTerm st <= t /\\ es <> [] /\\ pli = 0 /\\ log st' = es \\/ (currentTerm st <= t /\\ es <> [] /\\ pli <> 0 /\\ (exists e : entry, In e (log st) /\\ eIndex e = pli /\\ eTerm e = plt)) /\\ log st' = es ++ removeAfterIndex (log st) pli\nhandleAppendEntries_logs_sorted : forall (net : network) (p : packet) (t : term) (n : name) (pli : logIndex) (plt : term) (es : list entry) (ci : logIndex) (st' : raft_data) (m : msg), raft_intermediate_reachable net -> logs_sorted net -> handleAppendEntries (pDst p) (nwState net (pDst p)) t n pli plt es ci = (st', m) -> pBody p = AppendEntries t n pli plt es ci -> In p (nwPackets net) -> sorted (log st')\nBuild_sorted_interface : (forall (net : network) (p : packet) (t : term) (n : name) (pli : logIndex) (plt : term) (es : list entry) (ci : logIndex) (st' : raft_data) (m : msg), raft_intermediate_reachable net -> logs_sorted net -> handleAppendEntries (pDst p) (nwState net (pDst p)) t n pli plt es ci = (st', m) -> pBody p = AppendEntries t n pli plt es ci -> In p (nwPackets net) -> sorted (log st')) ->...-> sorted_interface\nRecord sorted_interface (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params) : Prop := Build_sorted_interface { handleAppendEntries_logs_sorted : forall (net : network) (p : packet) (t : term) (n : name) (pli : logIndex) (plt : term) (es : list entry) (ci : logIndex) (st' : raft_data) (m : msg), raft_intermediate_reachable net -> logs_sorted net -> handleAppendEntries (pDst p) (nwState net (pDst p)) t n pli plt es ci = (st', m) -> pBody p = AppendEntries t n pli plt es ci ->...-> logs_sorted net } Arguments sorted_interface {orig_base_params one_node_params raft_params} Arguments Build_sorted_interface {orig_base_params one_node_params raft_params} (_ _ _)%function_scope\nhandleAppendEntries_log_detailed : forall (h : name) (st : raft_data) (t : term) (n : name) (pli : logIndex) (plt : term) (es : list entry) (ci : logIndex) (st' : raft_data) (ps : msg), handleAppendEntries h st t n pli plt es ci = (st', ps) -> commitIndex st' = commitIndex st /\\ log st' = log st \\/ leaderId st' <> None /\\ currentTerm st' = t /\\ commitIndex st' = Init.Nat.max (commitIndex st) (Init.Nat.min ci (maxIndex es)) /\\ es <> [] /\\ pli = 0 /\\ t >= currentTerm st /\\ log st' = es /\\ (findAtIndex (log st) (maxIndex es) = None \\/ (exists e : entry, findAtIndex (log st) (maxIndex es)...\nraft_net_invariant_append_entries = fun (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params) (P : network -> Prop) => forall (xs : list packet) (p : packet) (ys : list packet) (net : network) (st' : name -> data) (ps' : list packet) (d : raft_data) (m : msg) (t : term) (n : name) (pli : logIndex) (plt : term) (es : list entry) (ci : logIndex), handleAppendEntries (pDst p) (nwState net (pDst p)) t n pli plt es ci = (d, m) -> pBody p = AppendEntries t n pli plt es ci ->...-> Prop Arguments raft_net_invariant_append_entries {orig_base_params one_node_params raft_params} _%function_scope\nhandleClientRequest_nextIndex_preserved : forall (h : name) (st : raft_data) (client : clientId) (id : nat) (c : input) (out : list raft_output) (st' : raft_data) (ps : list (name * msg)), handleClientRequest h st client id c = (out, st', ps) -> nextIndex_preserved st st'\ndoGenericServer_matchIndex_preserved : forall (h : name) (st : raft_data) (os : list raft_output) (st' : raft_data) (ps : list (name * msg)), doGenericServer h st = (os, st', ps) -> matchIndex_preserved st st'\ndoGenericServer_log : forall (h : name) (st : raft_data) (os : list raft_output) (st' : raft_data) (ps : list (name * msg)), doGenericServer h st = (os, st', ps) -> log st' = log st\ndoGenericServer_packets : forall (h : name) (st : raft_data) (os : list raft_output) (st' : raft_data) (ps : list (name * msg)), doGenericServer h st = (os, st', ps) -> ps = []\ndoGenericServer_log_type_term_votesReceived : forall (h : name) (st : raft_data) (os : list raft_output) (st' : raft_data) (ps : list (name * msg)), doGenericServer h st = (os, st', ps) -> log st' = log st /\\ type st' = type st /\\ currentTerm st' = currentTerm st /\\ votesReceived st' = votesReceived st /\\ votedFor st' = votedFor st\nhandleRequestVote_matchIndex_preserved : forall (n : name) (st : RaftState.raft_data term name entry logIndex serverType data clientId output) (t : nat) (c : fin N) (li lt : nat) (st' : raft_data) (ms : msg), handleRequestVote n st t c li lt = (st', ms) -> matchIndex_preserved st st'\nhandleRequestVote_stateMachine : forall (n : name) (st : RaftState.raft_data term name entry logIndex serverType data clientId output) (t : nat) (c : fin N) (li lt : nat) (st' : raft_data) (ms : msg), handleRequestVote n st t c li lt = (st', ms) -> stateMachine st' = stateMachine st\nhandleRequestVote_same_lastApplied : forall (n : name) (st : RaftState.raft_data term name entry logIndex serverType data clientId output) (t : nat) (c : fin N) (li lt : nat) (st' : raft_data) (ms : msg), handleRequestVote n st t c li lt = (st', ms) -> lastApplied st' = lastApplied st\nhandleRequestVote_same_log : forall (n : name) (st : RaftState.raft_data term name entry logIndex serverType data clientId output) (t : nat) (c : fin N) (li lt : nat) (st' : raft_data) (ms : msg), handleRequestVote n st t c li lt = (st', ms) -> log st' = log st\nhandleRequestVote_clientCache : forall (n : name) (st : RaftState.raft_data term name entry logIndex serverType data clientId output) (t : nat) (c : fin N) (li lt : nat) (st' : raft_data) (ms : msg), handleRequestVote n st t c li lt = (st', ms) -> clientCache st' = clientCache st\nhandleRequestVote_same_commitIndex : forall (n : name) (st : RaftState.raft_data term name entry logIndex serverType data clientId output) (t : nat) (c : fin N) (li lt : nat) (st' : raft_data) (ms : msg), handleRequestVote n st t c li lt = (st', ms) -> commitIndex st' = commitIndex st"}, {"role": "assistant", "content": "```coq\nProof.\nintro h.\nintro st.\nintro t.\nintro n.\nintro pli.\nintro plt.\nintro es.\nintro ci.\nintro st'.\nintro ps.\ndestruct (handleAppendEntries h st t n pli plt es ci) as [st'' ps'] eqn:E.\napply handleAppendEntries_log in E.\nrewrite <- E.\nunfold nextIndex_preserved in *.\nunfold RaftState.raft_data in *.\nunfold RaftState.set_raft_data_leaderId in *.\nunfold RaftState.set_raft_data_type in *.\nunfold RaftState.set_raft_data_commit in *.\ndestruct st' as [log' type' currentTerm' votesReceived' votedFor'].\ndestruct st as [log type currentTerm votesReceived votedFor].\nrewrite <- handleAppendEntries_log in E.\nrewrite <- E.\nunfold RaftState.raft_data in *.\nunfold RaftState.set_raft_data_leaderId in *.\nunfold RaftState.set_raft_data_type in *.\nunfold RaftState.set_raft_data_commit in *.\ndestruct st' as [log' type' currentTerm' votesReceived' votedFor'].\ndestruct st as [log type currentTerm votesReceived votedFor].\nrewrite <- handleAppendEntries_log in E.\nrewrite <- E.\nunfold RaftState.raft_data in *.\nunfold RaftState.set_raft_data_leaderId in *.\nunfold RaftState.set_raft_data_type in *.\nunfold RaftState.set_raft_data_commit in *.\ndestruct st' as [log' type' currentTerm' votesReceived' votedFor'].\ndestruct st as [log type currentTerm votesReceived votedFor].\nrewrite <- handleAppendEntries_log in E.\nrewrite <- E.\nunfold RaftState.raft_data in *.\nunfold RaftState.set_raft_data_leaderId in *.\nunfold RaftState.set_raft_data_type in *.\nunfold RaftState.set_raft_data_commit in *.\ndestruct st' as [log' type' currentTerm' votesReceived' votedFor'].\ndestruct st as [log type currentTerm votesReceived votedFor].\nrewrite <- handleAppendEntries_log in E.\nrewrite <- E.\nunfold RaftState.raft_data in *.\nunfold RaftState.set_raft_data_leaderId in *.\nunfold RaftState.set_raft_data_type in *.\nunfold RaftState.set_raft_data_commit in *.\ndestruct st' as [log' type' currentTerm' votesReceived' votedFor'].\ndestruct st as [log type currentTerm votesReceived votedFor].\nrewrite <- handleAppendEntries_log in E.\nrewrite <- E.\nunfold RaftState.raft_data in *.\nunfold RaftState.set_raft_data_leaderId in *.\nunfold RaftState.set_raft_data_type in *.\nunfold RaftState.set_raft_data_commit in *.\ndestruct st' as [log' type' currentTerm' votesReceived' votedFor'].\ndestruct st as [log type currentTerm votesReceived votedFor].\nrewrite <- handleAppendEntries_log in E.\nrewrite <- E.\nunfold RaftState.raft_data in *.\nunfold RaftState.set_raft_data_leaderId in *.\nunfold RaftState.set_raft_data_type in *.\nunfold RaftState.set_raft_data_commit in *.\ndestruct st' as [log' type' currentTerm' votesReceived' votedFor'].\ndestruct st as [log type currentTerm votesReceived votedFor].\nrewrite <- handleAppendEntries_log in E.\nrewrite <- E.\nunfold RaftState.raft_data in *.\nunfold RaftState.set_raft_data_leaderId in *.\nunfold RaftState.set_raft_data_type in *.\nunfold RaftState.set_raft_data_commit in *.\ndestruct st' as [log' type' currentTerm' votesReceived' votedFor'].\ndestruct st as [log type currentTerm votesReceived votedFor].\nrewrite <- handleAppendEntries_log in E.\nrewrite <- E.\nunfold RaftState.raft_data in *.\nunfold RaftState.set_raft_data_leaderId in *.\nunfold RaftState.set_raft_data_type in *.\nunfold RaftState.set_raft_data_commit in *.\ndestruct st' as [log' type' currentTerm' votesReceived' votedFor'].\ndestruct st as [log type currentTerm votesReceived votedFor].\nrewrite <- handleAppendEntries_log in E.\nrewrite <- E.\nunfold RaftState.raft_data in *.\nunfold RaftState.set_raft_data_leaderId in *.\nunfold RaftState.set_raft_data_type in *.\nunfold RaftState.set_raft_data_commit in *.\ndestruct st' as [log' type' currentTerm' votesReceived' votedFor'].\ndestruct st as [log type currentTerm votesReceived votedFor].\nrewrite <- handleAppendEntries_log in E.\nrewrite <-"}], "original": "intro h. intro st. intro t. intro n. intro pli. intro plt. intro es. intro ci. intro st'. intro ps. destruct (handleAppendEntries h st t n pli plt es ci) as [st'' ps'] eqn:E. apply handleAppendEntries_log in E. rewrite <- E. unfold nextIndex_preserved in *. unfold RaftState.raft_data in *. unfold RaftState.set_raft_data_leaderId in *. unfold RaftState.set_raft_data_type in *. unfold RaftState.set_raft_data_commit in *. destruct st' as [log' type' currentTerm' votesReceived' votedFor']. destruct st as [log type currentTerm votesReceived votedFor]. rewrite <- handleAppendEntries_log in E. rewrite <- E. unfold RaftState.raft_data in *. unfold RaftState.set_raft_data_leaderId in *. unfold RaftState.set_raft_data_type in *. unfold RaftState.set_raft_data_commit in *. destruct st' as [log' type' currentTerm' votesReceived' votedFor']. destruct st as [log type currentTerm votesReceived votedFor]. rewrite <- handleAppendEntries_log in E. rewrite <- E. unfold RaftState.raft_data in *. unfold RaftState.set_raft_data_leaderId in *. unfold RaftState.set_raft_data_type in *. unfold RaftState.set_raft_data_commit in *. destruct st' as [log' type' currentTerm' votesReceived' votedFor']. destruct st as [log type currentTerm votesReceived votedFor]. rewrite <- handleAppendEntries_log in E. rewrite <- E. unfold RaftState.raft_data in *. unfold RaftState.set_raft_data_leaderId in *. unfold RaftState.set_raft_data_type in *. unfold RaftState.set_raft_data_commit in *. destruct st' as [log' type' currentTerm' votesReceived' votedFor']. destruct st as [log type currentTerm votesReceived votedFor]. rewrite <- handleAppendEntries_log in E. rewrite <- E. unfold RaftState.raft_data in *. unfold RaftState.set_raft_data_leaderId in *. unfold RaftState.set_raft_data_type in *. unfold RaftState.set_raft_data_commit in *. destruct st' as [log' type' currentTerm' votesReceived' votedFor']. destruct st as [log type currentTerm votesReceived votedFor]. rewrite <- handleAppendEntries_log in E. rewrite <- E. unfold RaftState.raft_data in *. unfold RaftState.set_raft_data_leaderId in *. unfold RaftState.set_raft_data_type in *. unfold RaftState.set_raft_data_commit in *. destruct st' as [log' type' currentTerm' votesReceived' votedFor']. destruct st as [log type currentTerm votesReceived votedFor]. rewrite <- handleAppendEntries_log in E. rewrite <- E. unfold RaftState.raft_data in *. unfold RaftState.set_raft_data_leaderId in *. unfold RaftState.set_raft_data_type in *. unfold RaftState.set_raft_data_commit in *. destruct st' as [log' type' currentTerm' votesReceived' votedFor']. destruct st as [log type currentTerm votesReceived votedFor]. rewrite <- handleAppendEntries_log in E. rewrite <- E. unfold RaftState.raft_data in *. unfold RaftState.set_raft_data_leaderId in *. unfold RaftState.set_raft_data_type in *. unfold RaftState.set_raft_data_commit in *. destruct st' as [log' type' currentTerm' votesReceived' votedFor']. destruct st as [log type currentTerm votesReceived votedFor]. rewrite <- handleAppendEntries_log in E. rewrite <- E. unfold RaftState.raft_data in *. unfold RaftState.set_raft_data_leaderId in *. unfold RaftState.set_raft_data_type in *. unfold RaftState.set_raft_data_commit in *. destruct st' as [log' type' currentTerm' votesReceived' votedFor']. destruct st as [log type currentTerm votesReceived votedFor]. rewrite <- handleAppendEntries_log in E. rewrite <- E. unfold RaftState.raft_data in *. unfold RaftState.set_raft_data_leaderId in *. unfold RaftState.set_raft_data_type in *. unfold RaftState.set_raft_data_commit in *. destruct st' as [log' type' currentTerm' votesReceived' votedFor']. destruct st as [log type currentTerm votesReceived votedFor]. rewrite <- handleAppendEntries_log in E.", "succ": false}]