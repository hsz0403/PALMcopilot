[{"history": {"proof": "shelve.", "repairs": [""], "exceptions": []}, "chat": [{"role": "user", "content": "I will give you a Coq proof state, including both hypotheses and a specific goal and your need to prove it. Your response should be a singular code block of Coq proof starting with \"```coq\n\", ending with \"Qed.```\", without any additional explanation or commentary. Follow to these guidelines:\nIntroduce variables using unique names to avoid any conflicts.\nKeep each command distinct and separated, avoid concatenations like ';' or '[cmd|cmd]'.\nOrganize your proof with bullets like '-', '+', and '*' instead of braces ({, }). Shift to their double symbols like '--' and '++', when necessary.\nEffectively use given premises, follow the syntax and structure demonstrated in the examples provided.\n\nExample 1:\n\nHypotheses:\nn, m: nat\nIHn: m + n = n + m\n\nGoal:\nm + S n = S n + m\n\nProof:\n```coq\nsimpl. rewrite <- IHn. auto.\nQed.```\n\nExample 2:\nHypotheses:\n\nGoal:\nforall n m : nat, m + n = n + m\n\n```coq\nintros n m. induction n.\n- simpl. auto.\n- simpl. rewrite <- IHn. auto.\nQed.```\n\nSolve This Proof State:\n\nHypotheses:\norig_base_params: BaseParams\none_node_params: OneNodeParams orig_base_params\nraft_params: RaftParams orig_base_params\naemi: applied_entries_monotonic_interface\nsmci: state_machine_correct_interface\nsi: sorted_interface\nlacimi: lastApplied_commitIndex_match_interface\nlmi: log_matching_interface\nclient: clientId\nid: nat\nout: output\n\nGoal:\nforall (st : RaftState.raft_data term name entry logIndex serverType data clientId output) (e : entry) (l : list output) (st' : RaftState.raft_data term name entry logIndex serverType data clientId output) (c : clientId) (i : nat) (o : output), cacheApplyEntry st e = (l, st') -> getLastId st c = Some (i, o) -> exists (i' : nat) (o' : output), getLastId st' c = Some (i', o') /\\ i <= i'\n\nPremises:\noutput = fun BaseParams0 : BaseParams => let (_, _, output) := BaseParams0 in output : BaseParams -> Type Arguments output {BaseParams}\nterm = nat : Set\ngetLastId = fun (orig_base_params : BaseParams) (raft_params : RaftParams orig_base_params) (state : RaftState.raft_data term name entry logIndex serverType data clientId output) (client : clientId) => assoc clientId_eq_dec (clientCache state) client : forall (orig_base_params : BaseParams) (raft_params : RaftParams orig_base_params), RaftState.raft_data term name entry logIndex serverType data clientId output -> clientId -> option (nat * output) Arguments getLastId {orig_base_params raft_params}\ncacheApplyEntry = fun (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params) (st : RaftState.raft_data term name entry logIndex serverType data clientId output) (e : entry) => match getLastId st (eClient e) with | Some (id, o) => if eId e <? id then ([], st) else if eId e =? id then ([o], st) else applyEntry st e | None => applyEntry st e end : forall orig_base_params : BaseParams, OneNodeParams orig_base_params -> forall raft_params : RaftParams\nname = fun (orig_base_params : BaseParams) (raft_params : RaftParams orig_base_params) => fin N : forall orig_base_params : BaseParams, RaftParams orig_base_params -> Type Arguments name {orig_base_params raft_params}\nInductive nat : Set := O : nat | S : nat -> nat Arguments S _%nat_scope\nInductive serverType : Set := Follower : serverType | Candidate : serverType | Leader : serverType\nInductive list (A : Type) : Type := nil : list A | cons : A -> list A -> list A Arguments list _%type_scope Arguments nil {A}%type_scope Arguments cons {A}%type_scope a l%list_scope : rename\ndata = fun BaseParams0 : BaseParams => let (data, _, _) := BaseParams0 in data : BaseParams -> Type Arguments data {BaseParams}\nModule RaftState := Struct Record raft_data (term name entry logIndex serverType stateMachineData clientId output : Type) : Type := mkRaft_data { currentTerm : term; votedFor : option name; leaderId : option name; log : list entry; commitIndex : logIndex; lastApplied : logIndex; stateMachine : stateMachineData; nextIndex : list (name * logIndex); matchIndex : list (name * logIndex); shouldSend : bool; votesReceived : list name; type : serverType; clientCache : list (clientId * (nat * output)); electoralVictories : list (term * list name * list entry) } Definition currentTerm :\nclientId = fun (orig_base_params : BaseParams) (RaftParams0 : RaftParams orig_base_params) => let (_, _, _, clientId, _) := RaftParams0 in clientId : forall orig_base_params : BaseParams, RaftParams orig_base_params -> Type Arguments clientId {orig_base_params RaftParams}\nraft_data = fun (orig_base_params : BaseParams) (raft_params : RaftParams orig_base_params) => RaftState.raft_data term name entry logIndex serverType data clientId output : forall orig_base_params : BaseParams, RaftParams orig_base_params -> Type Arguments raft_data {orig_base_params raft_params}\nRecord entry (orig_base_params : BaseParams) (raft_params : RaftParams orig_base_params) : Type := mkEntry { eAt : name; eClient : clientId; eId : nat; eIndex : logIndex; eTerm : term; eInput : input } Arguments entry {orig_base_params raft_params} Arguments mkEntry {orig_base_params raft_params} _ _ _%nat_scope\nRecord RaftParams (orig_base_params : BaseParams) : Type := Build_RaftParams { N : nat; input_eq_dec : forall x y : input, {x = y} + {x <> y}; output_eq_dec : forall x y : output, {x = y} + {x <> y}; clientId : Type; clientId_eq_dec : forall x y : clientId, {x = y} + {x <> y} } Arguments Build_RaftParams _ _%nat_scope (_ _)%function_scope [clientId]%type_scope _%function_scope\nInductive option (A : Type) : Type := Some : A -> option A | None : option A Arguments option _%type_scope Arguments Some {A}%type_scope a : rename Arguments None {A}%type_scope\nRecord OneNodeParams (P : BaseParams) : Type := Build_OneNodeParams { init : data; handler : input -> data -> output * data } Arguments Build_OneNodeParams _ _ _%function_scope\nlogIndex = nat : Set\ncacheApplyEntry_stateMachine_correct : forall (st : RaftState.raft_data term name entry logIndex serverType data clientId output) (e : entry) (l : list output) (st' : RaftState.raft_data term name entry logIndex serverType data clientId output) (es : list entry), cacheApplyEntry st e = (l, st') -> stateMachine st = snd (execute_log (deduplicate_log es)) -> (forall (c : clientId) (i : nat) (o : output), getLastId st c = Some (i, o) -> exists e0 : entry, In e0 es /\\ eClient e0 = c /\\ eId e0 = i) ->...-> stateMachine st' = snd (execute_log (deduplicate_log (es ++ [e])))\ncacheApplyEntry_output_correct : forall (e : entry) (es : list entry) (st : RaftState.raft_data term name entry logIndex serverType data clientId output) (l : list output) (st' : RaftState.raft_data term name entry logIndex serverType data clientId output) (o : output), cacheApplyEntry st e = (l, st') -> In o l -> (forall (c : clientId) (i : nat) (o0 : output), getLastId st c = Some (i, o0) -> output_correct c i o0 es) -> stateMachine st = snd (execute_log (deduplicate_log es)) ->...-> output_correct (eClient e) (eId e) o (es ++ [e])\ncacheApplyEntry_clientCache : forall (st : RaftState.raft_data term name entry logIndex serverType data clientId output) (e : entry) (l : list output) (st' : RaftState.raft_data term name entry logIndex serverType data clientId output), cacheApplyEntry st e = (l, st') -> clientCache st' = clientCache st /\\ (exists (i : nat) (o : output), getLastId st (eClient e) = Some (i, o) /\\ eId e <= i) \\/ (let (out, _) := handler (eInput e) (stateMachine st) in clientCache st' = assoc_set clientId_eq_dec (clientCache st) (eClient e) (eId e, out) /\\ In out l) /\\ (getLastId st (eClient e) = None \\/ (exists (i : nat...\ngetLastId_Some_In : forall (st : RaftState.raft_data term name entry logIndex serverType data clientId output) (c : clientId) (n : nat) (o : output), getLastId st c = Some (n, o) -> In (c, (n, o)) (clientCache st)\ngetLastId_None : forall (st : RaftState.raft_data term name entry logIndex serverType data clientId output) (c : clientId) (i : nat) (o : output), getLastId st c = None -> In (c, (i, o)) (clientCache st) -> False\ngetLastId_ext : forall (st st' : RaftState.raft_data term name entry logIndex serverType data clientId output) (c : clientId), clientCache st' = clientCache st -> getLastId st' c = getLastId st c\napplyEntry_clientCache : forall (st : RaftState.raft_data term name entry logIndex serverType data clientId output) (e : entry) (l : list output) (st' : RaftState.raft_data term name entry logIndex serverType data clientId output), applyEntry st e = (l, st') -> let (out, _) := handler (eInput e) (stateMachine st) in clientCache st' = assoc_set clientId_eq_dec (clientCache st) (eClient e) (eId e, out) /\\ In out l\napplyEntry_stateMachine_correct : forall (st : RaftState.raft_data term name entry logIndex serverType data clientId output) (e : entry) (l : list output) (st' : RaftState.raft_data term name entry logIndex serverType data clientId output) (es : list entry), applyEntry st e = (l, st') -> stateMachine st = snd (execute_log (deduplicate_log es)) -> (forall e' : entry, In e' es -> eClient e' = eClient e -> eId e' < eId e) -> stateMachine st' = snd (execute_log (deduplicate_log es ++ [e]))\napplyEntry_output_correct : forall (st : RaftState.raft_data term name entry logIndex serverType data clientId output) (e : entry) (l : list output) (st' : RaftState.raft_data term name entry logIndex serverType data clientId output) (o : output) (es : list entry), applyEntry st e = (l, st') -> In o l -> stateMachine st = snd (execute_log (deduplicate_log es)) -> (forall e' : entry, In e' es -> eClient e' = eClient e -> eId e' < eId e) -> output_correct (eClient e) (eId e) o (es ++ [e])\nhandleRequestVote_same_lastApplied : forall (n : name) (st : RaftState.raft_data term name entry logIndex serverType data clientId output) (t : nat) (c : fin N) (li lt : nat) (st' : raft_data) (ms : msg), handleRequestVote n st t c li lt = (st', ms) -> lastApplied st' = lastApplied st\nhandleRequestVote_same_log : forall (n : name) (st : RaftState.raft_data term name entry logIndex serverType data clientId output) (t : nat) (c : fin N) (li lt : nat) (st' : raft_data) (ms : msg), handleRequestVote n st t c li lt = (st', ms) -> log st' = log st\nhandleRequestVote_same_commitIndex : forall (n : name) (st : RaftState.raft_data term name entry logIndex serverType data clientId output) (t : nat) (c : fin N) (li lt : nat) (st' : raft_data) (ms : msg), handleRequestVote n st t c li lt = (st', ms) -> commitIndex st' = commitIndex st\nhandleAppendEntriesReply_same_commitIndex : forall (n : name) (st : RaftState.raft_data term name entry logIndex serverType data clientId output) (src : name) (t : nat) (es : list entry) (b : bool) (st' : raft_data) (l : list (name * msg)), handleAppendEntriesReply n st src t es b = (st', l) -> commitIndex st' = commitIndex st\nhandleAppendEntriesReply_same_log : forall (n : name) (st : RaftState.raft_data term name entry logIndex serverType data clientId output) (src : name) (t : nat) (es : list entry) (b : bool) (st' : raft_data) (l : list (name * msg)), handleAppendEntriesReply n st src t es b = (st', l) -> log st' = log st\nhandleAppendEntriesReply_same_lastApplied : forall (n : name) (st : RaftState.raft_data term name entry logIndex serverType data clientId output) (src : name) (t : nat) (es : list entry) (b : bool) (st' : raft_data) (l : list (name * msg)), handleAppendEntriesReply n st src t es b = (st', l) -> lastApplied st' = lastApplied st\napplied_entries_log_lastApplied_update_same : forall (sigma : name -> RaftState.raft_data term name entry logIndex serverType data clientId output) (h : name) (st : RaftState.raft_data term name entry logIndex serverType data clientId output), log st = log (sigma h) -> lastApplied st = lastApplied (sigma h) -> applied_entries (update name_eq_dec sigma h st) = applied_entries sigma\napplied_entries_update : forall (sigma : name -> RaftState.raft_data term name entry logIndex serverType data clientId output) (h : name) (st : RaftState.raft_data term name entry logIndex serverType data clientId output), lastApplied st >= lastApplied (sigma h) -> applied_entries (update name_eq_dec sigma h st) = applied_entries sigma /\\ (exists h' : name, argmax (fun h0 : name => lastApplied (sigma h0)) (all_fin N) = Some h' /\\ lastApplied (sigma h') >= lastApplied st) \\/ argmax (fun h' : name => lastApplied (update name_eq_dec sigma h st h')) (all_fin N) = Some h /\\ applied_entries (update name_eq_dec sigma h st) = rev (removeAfterIndex (log st) (lastApplied st))\nclient_cache_complete = fun (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params) (net : network) => forall (h : Net.name) (e : entry), In e (removeAfterIndex (log (nwState net h)) (lastApplied (nwState net h))) -> exists (id : nat) (o : output), getLastId (nwState net h) (eClient e) = Some (id, o) /\\ eId e <= id : forall (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params), network -> Prop Arguments client_cache_complete {orig_base_params one_node_params raft_params}\napplied_entries_safe_update : forall (sigma : name -> RaftState.raft_data term name entry logIndex serverType data clientId output) (h : name) (st : RaftState.raft_data term name entry logIndex serverType data clientId output), lastApplied st = lastApplied (sigma h) -> removeAfterIndex (log st) (lastApplied (sigma h)) = removeAfterIndex (log (sigma h)) (lastApplied (sigma h)) -> applied_entries (update name_eq_dec sigma h st) = applied_entries sigma\noutput_correct_monotonic : forall (c : clientId) (i : nat) (o : output) (xs ys : list entry), output_correct c i o xs -> output_correct c i o (xs ++ ys)\napplyEntry = fun (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params) (st : RaftState.raft_data term name entry logIndex serverType data clientId output) (e : entry) => let (out, d) := handler (eInput e) (stateMachine st) in ([out], RaftState.set_raft_data_stateMachine term name entry logIndex serverType data clientId output (RaftState.set_raft_data_clientCache term name entry logIndex serverType data clientId output st (assoc_set clientId_eq_dec (clientCache st) (eClient e) (eId e, out))) d) : forall orig_base_params : BaseParams, OneNodeParams orig_base_params -> forall raft_params : RaftParams orig_base_params, RaftState.raft_data term name entry log...\noutput_correct = fun (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params) (client : clientId) (id : nat) (out : output) (aes : list entry) => exists (xs : list entry) (e : entry) (ys : list entry) (tr' : list (input * output)) (st' : data), deduplicate_log aes = xs ++ e :: ys /\\ eClient e = client /\\ eId e = id /\\ execute_log (xs ++ [e]) = (tr', st') /\\ hd_error (rev tr') = Some (eInput e, out) : forall orig_base_params : BaseParams, OneNodeParams orig_base_params ->...-> Prop Arguments output_correct {orig_base_params one_node_params raft_params} _ _%nat_scope _ _%list_scope\nhandleRequestVoteReply_same_log : forall (n : name) (st : RaftState.raft_data term name entry logIndex serverType data clientId output) (src : name) (t : nat) (v : bool), log (handleRequestVoteReply n st src t v) = log st\nhandleRequestVoteReply_same_lastApplied : forall (n : name) (st : RaftState.raft_data term name entry logIndex serverType data clientId output) (src : name) (t : nat) (v : bool), lastApplied (handleRequestVoteReply n st src t v) = lastApplied st\nhandleRequestVoteReply_same_commitIndex : forall (n : name) (st : RaftState.raft_data term name entry logIndex serverType data clientId output) (src : name) (t : nat) (v : bool), commitIndex (handleRequestVoteReply n st src t v) = commitIndex st\nadvanceCurrentTerm_same_log : forall (st : RaftState.raft_data term name entry logIndex serverType data clientId output) (t : nat), log (advanceCurrentTerm st t) = log st\nadvanceCurrentTerm_same_lastApplied : forall (st : RaftState.raft_data term name entry logIndex serverType data clientId output) (t : nat), lastApplied (advanceCurrentTerm st t) = lastApplied st\nadvanceCurrentTerm = fun (orig_base_params : BaseParams) (raft_params : RaftParams orig_base_params) (state : RaftState.raft_data term name entry logIndex serverType data clientId output) (newTerm : nat) => if currentTerm state <? newTerm then RaftState.set_raft_data_leaderId term name entry logIndex serverType data clientId output (RaftState.set_raft_data_type term name entry logIndex serverType data clientId output (RaftState.set_raft_data_votedFor term name entry logIndex serverType data clientId output (RaftState.set_raft_data_currentTerm term name entry logIndex serverType data clientId output state newTerm) None) Follower) None else state : forall (orig_base_params : BaseParams) (raft_params : RaftParams orig_base_params), RaftState.raft_data term name entry logIndex serverType data...\nexecute_log' = fun (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params) => fix execute_log' (log : list entry) (st : data) (l : list (input * output)) {struct log} : list (input * output) * data := match log with | [] => (l, st) | e :: log' => let '(o, st') := handler (eInput e) st in execute_log' log' st' (l ++ [(eInput e, o)]) end : forall orig_base_params : BaseParams, OneNodeParams orig_base_params -> forall raft_params : RaftParams orig_base_params, list entry -> data ->...-> list (input * output) * data Arguments execute_log' {orig_base_params one_node_params raft_params} _%list_scope _ _%list_scope\ngetNextIndex = fun (orig_base_params : BaseParams) (raft_params : RaftParams orig_base_params) (state : RaftState.raft_data term name entry logIndex serverType data clientId output) (h : name) => assoc_default name_eq_dec (nextIndex state) h (maxIndex (log state)) : forall (orig_base_params : BaseParams) (raft_params : RaftParams orig_base_params), RaftState.raft_data term name entry logIndex serverType data clientId output -> name -> logIndex Arguments getNextIndex {orig_base_params raft_params}"}, {"role": "assistant", "content": "```coq\n```"}], "original": "", "succ": false}]