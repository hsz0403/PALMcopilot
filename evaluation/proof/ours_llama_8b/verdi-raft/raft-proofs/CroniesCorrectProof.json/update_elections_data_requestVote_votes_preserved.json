[{"history": {"proof": "shelve.", "repairs": [""], "exceptions": []}, "chat": [{"role": "user", "content": "I will give you a Coq proof state, including both hypotheses and a specific goal and your need to prove it. Your response should be a singular code block of Coq proof starting with \"```coq\n\", ending with \"Qed.```\", without any additional explanation or commentary. Follow to these guidelines:\nIntroduce variables using unique names to avoid any conflicts.\nKeep each command distinct and separated, avoid concatenations like ';' or '[cmd|cmd]'.\nOrganize your proof with bullets like '-', '+', and '*' instead of braces ({, }). Shift to their double symbols like '--' and '++', when necessary.\nEffectively use given premises, follow the syntax and structure demonstrated in the examples provided.\n\nExample 1:\n\nHypotheses:\nn, m: nat\nIHn: m + n = n + m\n\nGoal:\nm + S n = S n + m\n\nProof:\n```coq\nsimpl. rewrite <- IHn. auto.\nQed.```\n\nExample 2:\nHypotheses:\n\nGoal:\nforall n m : nat, m + n = n + m\n\n```coq\nintros n m. induction n.\n- simpl. auto.\n- simpl. rewrite <- IHn. auto.\nQed.```\n\nSolve This Proof State:\n\nHypotheses:\norig_base_params: BaseParams\none_node_params: OneNodeParams orig_base_params\nraft_params: RaftParams orig_base_params\nrri: raft_refinement_interface\nvci: votes_correct_interface\ncvfsi: candidates_vote_for_selves_interface\n\nGoal:\nforall (t : term) (c h h' : name) (t' : nat) (h'' : fin N) (lli llt : nat) (st : electionsData * RaftState.raft_data term name entry logIndex serverType data clientId output), In (t, c) (votes (fst st)) -> In (t, c) (votes (update_elections_data_requestVote h h' t' h'' lli llt st))\n\nPremises:\nInductive nat : Set := O : nat | S : nat -> nat Arguments S _%nat_scope\nRecord RaftParams (orig_base_params : BaseParams) : Type := Build_RaftParams { N : nat; input_eq_dec : forall x y : input, {x = y} + {x <> y}; output_eq_dec : forall x y : output, {x = y} + {x <> y}; clientId : Type; clientId_eq_dec : forall x y : clientId, {x = y} + {x <> y} } Arguments Build_RaftParams _ _%nat_scope (_ _)%function_scope [clientId]%type_scope _%function_scope\nterm = nat : Set\nN = fun (orig_base_params : BaseParams) (RaftParams0 : RaftParams orig_base_params) => let (N, _, _, clientId, _) := RaftParams0 in N : forall orig_base_params : BaseParams, RaftParams orig_base_params -> nat Arguments N {orig_base_params RaftParams}\nraft_data = fun (orig_base_params : BaseParams) (raft_params : RaftParams orig_base_params) => RaftState.raft_data term name entry logIndex serverType data clientId output : forall orig_base_params : BaseParams, RaftParams orig_base_params -> Type Arguments raft_data {orig_base_params raft_params}\nclientId = fun (orig_base_params : BaseParams) (RaftParams0 : RaftParams orig_base_params) => let (_, _, _, clientId, _) := RaftParams0 in clientId : forall orig_base_params : BaseParams, RaftParams orig_base_params -> Type Arguments clientId {orig_base_params RaftParams}\nRecord electionsData (orig_base_params : BaseParams) (raft_params : RaftParams orig_base_params) : Type := mkElectionsData { votes : list (term * name); votesWithLog : list (term * name * list entry); cronies : term -> list name; leaderLogs : list (term * list entry); allEntries : list (term * entry) } Arguments electionsData {orig_base_params raft_params} Arguments mkElectionsData {orig_base_params raft_params} (_ _)%list_scope _%function_scope (_ _)%list_scope\nlogIndex = nat : Set\nname = fun (orig_base_params : BaseParams) (raft_params : RaftParams orig_base_params) => fin N : forall orig_base_params : BaseParams, RaftParams orig_base_params -> Type Arguments name {orig_base_params raft_params}\nInductive serverType : Set := Follower : serverType | Candidate : serverType | Leader : serverType\nfin = fix fin (n : nat) : Type := match n with | 0 => False | S n' => option (fin n') end : nat -> Type Arguments fin _%nat_scope\nvotes = fun (orig_base_params : BaseParams) (raft_params : RaftParams orig_base_params) (e : electionsData) => let (votes, _, _, _, _) := e in votes : forall (orig_base_params : BaseParams) (raft_params : RaftParams orig_base_params), electionsData -> list (term * name) Arguments votes {orig_base_params raft_params}\nRecord OneNodeParams (P : BaseParams) : Type := Build_OneNodeParams { init : data; handler : input -> data -> output * data } Arguments Build_OneNodeParams _ _ _%function_scope\nIn : forall A : Type, A -> list A -> Prop\noutput = fun BaseParams0 : BaseParams => let (_, _, output) := BaseParams0 in output : BaseParams -> Type Arguments output {BaseParams}\nupdate_elections_data_requestVote = fun (orig_base_params : BaseParams) (raft_params : RaftParams orig_base_params) (me _ : name) (t : nat) (candidateId : fin N) (lastLogIndex lastLogTerm : nat) (st : electionsData * RaftState.raft_data term name entry logIndex serverType data clientId output) => let (st', _) := handleRequestVote me (snd st) t candidateId lastLogIndex lastLogTerm in let (o, o0) := (votedFor (snd st), votedFor st') in match o with | Some cid =>\ndata = fun BaseParams0 : BaseParams => let (data, _, _) := BaseParams0 in data : BaseParams -> Type Arguments data {BaseParams}\nModule RaftState := Struct Record raft_data (term name entry logIndex serverType stateMachineData clientId output : Type) : Type := mkRaft_data { currentTerm : term; votedFor : option name; leaderId : option name; log : list entry; commitIndex : logIndex; lastApplied : logIndex; stateMachine : stateMachineData; nextIndex : list (name * logIndex); matchIndex : list (name * logIndex); shouldSend : bool; votesReceived : list name; type : serverType; clientCache : list (clientId * (nat * output)); electoralVictories : list (term * list\nfst = fun (A B : Type) (p : A * B) => let (x, _) := p in x : forall A B : Type, A * B -> A Arguments fst {A B}%type_scope\n*** [ Core.ByteListReader.t : Type -> Type ] Arguments Core.ByteListReader.t _%type_scope\nRecord entry (orig_base_params : BaseParams) (raft_params : RaftParams orig_base_params) : Type := mkEntry { eAt : name; eClient : clientId; eId : nat; eIndex : logIndex; eTerm : term; eInput : input } Arguments entry {orig_base_params raft_params} Arguments mkEntry {orig_base_params raft_params} _ _ _%nat_scope\nupdate_elections_data_requestVote_cronies : forall (h h' : name) (t : nat) (h'' : fin N) (lli llt : nat) (st : electionsData * RaftState.raft_data term name entry logIndex serverType data clientId output), cronies (update_elections_data_requestVote h h' t h'' lli llt st) = cronies (fst st)\nhandleRequestVote_true_votedFor : forall (h : name) (st : RaftState.raft_data term name entry logIndex serverType data clientId output) (t : nat) (src : fin N) (lli llt : nat) (d : raft_data) (t' : term), handleRequestVote h st t src lli llt = (d, RequestVoteReply t' true) -> currentTerm d = t' /\\ votedFor d = Some src\nhandleRequestVote_votesReceived : forall (h : name) (st : RaftState.raft_data term name entry logIndex serverType data clientId output) (t : nat) (h' : fin N) (lli llt : nat) (st' : raft_data) (m : msg), handleRequestVote h st t h' lli llt = (st', m) -> votesReceived st' = votesReceived st\nhandleRequestVote_currentTerm_same_or_follower : forall (h : name) (st : RaftState.raft_data term name entry logIndex serverType data clientId output) (t : nat) (h' : fin N) (lli llt : nat) (st' : raft_data) (m : msg), handleRequestVote h st t h' lli llt = (st', m) -> currentTerm st' = currentTerm st /\\ type st' = type st \\/ type st' = Follower\none_vote_per_term = fun (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params) (net : network) => forall (h : Net.name) (t : term) (n n' : name), In (t, n) (votes (fst (nwState net h))) -> In (t, n') (votes (fst (nwState net h))) -> n = n' : forall (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params), network -> Prop Arguments one_vote_per_term {orig_base_params one_node_params raft_params}\napplied_entries_update : forall (sigma : name -> RaftState.raft_data term name entry logIndex serverType data clientId output) (h : name) (st : RaftState.raft_data term name entry logIndex serverType data clientId output), lastApplied st >= lastApplied (sigma h) -> applied_entries (update name_eq_dec sigma h st) = applied_entries sigma /\\ (exists h' : name, argmax (fun h0 : name => lastApplied (sigma h0)) (all_fin N) = Some h' /\\ lastApplied (sigma h') >= lastApplied st) \\/ argmax (fun h' : name => lastApplied (update name_eq_dec sigma h st h')) (all_fin N) = Some h /\\ applied_entries (update name_eq_dec sigma h st) = rev (removeAfterIndex (log st) (lastApplied st))\ncronies_votes = fun (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params) (net : network) => forall (t : term) (candidate : Net.name) (crony : name), In crony (cronies (fst (nwState net candidate)) t) -> In (t, candidate) (votes (fst (nwState net crony))) : forall (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params), network -> Prop Arguments cronies_votes {orig_base_params one_node_params raft_params}\nhandleRequestVote_same_lastApplied : forall (n : name) (st : RaftState.raft_data term name entry logIndex serverType data clientId output) (t : nat) (c : fin N) (li lt : nat) (st' : raft_data) (ms : msg), handleRequestVote n st t c li lt = (st', ms) -> lastApplied st' = lastApplied st\nhandleRequestVote_same_log : forall (n : name) (st : RaftState.raft_data term name entry logIndex serverType data clientId output) (t : nat) (c : fin N) (li lt : nat) (st' : raft_data) (ms : msg), handleRequestVote n st t c li lt = (st', ms) -> log st' = log st\nhandleRequestVote_same_commitIndex : forall (n : name) (st : RaftState.raft_data term name entry logIndex serverType data clientId output) (t : nat) (c : fin N) (li lt : nat) (st' : raft_data) (ms : msg), handleRequestVote n st t c li lt = (st', ms) -> commitIndex st' = commitIndex st\ncurrentTerm_votedFor_votes_correct = fun (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params) (net : network) => forall (h : Net.name) (t : term) (n : name), currentTerm (snd (nwState net h)) = t -> votedFor (snd (nwState net h)) = Some n -> In (t, n) (votes (fst (nwState net h))) : forall (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params), network -> Prop Arguments currentTerm_votedFor_votes_correct {orig_base_params one_node_params raft_params}\nvotes_currentTerm_votedFor_correct = fun (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params) (net : network) => forall (h : Net.name) (t : term) (n : name), In (t, n) (votes (fst (nwState net h))) -> currentTerm (snd (nwState net h)) = t -> votedFor (snd (nwState net h)) = Some n : forall (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params), network -> Prop Arguments votes_currentTerm_votedFor_correct {orig_base_params one_node_params raft_params}\nvotes_nw = fun (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params) (net : network) => forall (p : packet) (t : term), pBody p = RequestVoteReply t true -> In p (nwPackets net) -> In (t, pDst p) (votes (fst (nwState net (pSrc p)))) : forall (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params), network -> Prop Arguments votes_nw {orig_base_params one_node_params raft_params}\nrefined_raft_net_invariant_request_vote = fun (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params) (P : network -> Prop) => forall (xs : list packet) (p : packet) (ys : list packet) (net : network) (st' : name -> data) (ps' : list packet) (gd : electionsData) (d : raft_data) (m : msg) (t : nat) (cid : name) (lli llt : nat), handleRequestVote (pDst p) (snd (nwState net (pDst p))) t (pSrc p) lli llt = (d, m) ->...-> Prop Arguments refined_raft_net_invariant_request_vote {orig_base_params one_node_params raft_params} _%function_scope\nrefined_raft_net_invariant_request_vote' = fun (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params) (P : network -> Prop) => forall (xs : list packet) (p : packet) (ys : list packet) (net : network) (st' : Net.name -> data) (ps' : list packet) (gd : electionsData) (d : raft_data) (m : msg) (t : nat) (cid : name) (lli llt : nat), handleRequestVote (pDst p) (snd (nwState net (pDst p))) t (pSrc p) lli llt = (d, m) -> gd = update_elections_data_requestVote (pDst p) (pSrc p) t (p...\nhandleAppendEntriesReply_rvr : forall (h : name) (s : RaftState.raft_data term name entry logIndex serverType data clientId output) (src : name) (ps ps' : list packet) (p : packet) (d : raft_data) (l : list (name * msg)) (tae : nat) (es : list entry) (res : bool) (t : term) (v : bool), handleAppendEntriesReply h s src tae es res = (d, l) -> (forall p' : packet, In p' ps -> In p' ps' \\/ In p' (send_packets h l)) -> pBody p = RequestVoteReply t v -> In p ps -> In p ps'\nupdate_elections_data_requestVoteReply = fun (orig_base_params : BaseParams) (raft_params : RaftParams orig_base_params) (me src : name) (t : nat) (voteGranted : bool) (st : electionsData * RaftState.raft_data term name entry logIndex serverType data clientId output) => let st' := handleRequestVoteReply me (snd st) src t voteGranted in match type st' with | Follower => fst st | Candidate => {| votes := votes (fst st); votesWithLog := votesWithLog (fst st); cronies := fun tm : term => if Nat.eq_dec tm (currentTerm st') then votesReceived st' else cronies (fst st) tm; leaderLogs := leaderLogs (fst st); allEntries := allEntries (fst st) |} | Leader => {| votes := votes (fst...\nupdate_elections_data_client_request = fun (orig_base_params : BaseParams) (raft_params : RaftParams orig_base_params) (me : name) (st : electionsData * raft_data) (client : clientId) (id : nat) (c : input) => let '(_, st', _) := handleClientRequest me (snd st) client id c in if length (log (snd st)) <? length (log st') then match log st' with | [] => fst st | e :: _ => {| votes := votes (fst st); votesWithLog := votesWithLog (fst st); cronies := cronies (fst st); leaderLogs := leaderLogs (fst st); allEntries := (currentTerm st', e) :: allEntries (fst st) |} end else fst st : forall (orig_base_params : BaseParams) (raft_params : Ra...\napplied_entries_log_lastApplied_update_same : forall (sigma : name -> RaftState.raft_data term name entry logIndex serverType data clientId output) (h : name) (st : RaftState.raft_data term name entry logIndex serverType data clientId output), log st = log (sigma h) -> lastApplied st = lastApplied (sigma h) -> applied_entries (update name_eq_dec sigma h st) = applied_entries sigma\nrefined_raft_net_invariant_client_request = fun (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params) (P : network -> Prop) => forall (h : name) (net : network) (st' : name -> data) (ps' : list packet) (gd : electionsData) (out : list raft_output) (d : raft_data) (l : list (name * msg)) (client : clientId) (id : nat) (c : input), handleClientRequest h (snd (nwState net h)) client id c = (out, d, l) ->...-> Prop Arguments refined_raft_net_invariant_client_request {orig_base_params one_node_params raft_params} _%function_scope\nrefined_raft_net_invariant_client_request' = fun (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params) (P : network -> Prop) => forall (h : name) (net : network) (st' : Net.name -> data) (ps' : list packet) (gd : electionsData) (out : list raft_output) (d : raft_data) (l : list (name * msg)) (client : clientId) (id : nat) (c : input), handleClientRequest h (snd (nwState net h)) client id c = (out, d, l) ->...-> Prop Arguments refined_raft_net_invariant_client_request' {orig_base_params one_node_params raft_params} _%function_scope\napplied_entries_safe_update : forall (sigma : name -> RaftState.raft_data term name entry logIndex serverType data clientId output) (h : name) (st : RaftState.raft_data term name entry logIndex serverType data clientId output), lastApplied st = lastApplied (sigma h) -> removeAfterIndex (log st) (lastApplied (sigma h)) = removeAfterIndex (log (sigma h)) (lastApplied (sigma h)) -> applied_entries (update name_eq_dec sigma h st) = applied_entries sigma\nupdate_elections_data_appendEntries = fun (orig_base_params : BaseParams) (raft_params : RaftParams orig_base_params) (me : name) (st : electionsData * raft_data) (t : term) (leaderId : name) (prevLogIndex : logIndex) (prevLogTerm : term) (entries : list entry) (leaderCommit : logIndex) => let (_, m) := handleAppendEntries me (snd st) t leaderId prevLogIndex prevLogTerm entries leaderCommit in match m with | AppendEntriesReply t0 entries0 true => {| votes := votes (fst st); votesWithLog := votesWithLog (fst st); cronies := cronies (fst st); leaderLogs := leaderLogs (fst st); allEntries := map (fun e : entry => (t0, e)) entries0 ++ allEntries (fst st...\nhandleRequestVoteReply_same_lastApplied : forall (n : name) (st : RaftState.raft_data term name entry logIndex serverType data clientId output) (src : name) (t : nat) (v : bool), lastApplied (handleRequestVoteReply n st src t v) = lastApplied st\nhandleRequestVoteReply_same_log : forall (n : name) (st : RaftState.raft_data term name entry logIndex serverType data clientId output) (src : name) (t : nat) (v : bool), log (handleRequestVoteReply n st src t v) = log st\nhandleRequestVoteReply_same_commitIndex : forall (n : name) (st : RaftState.raft_data term name entry logIndex serverType data clientId output) (src : name) (t : nat) (v : bool), commitIndex (handleRequestVoteReply n st src t v) = commitIndex st\nhandleAppendEntriesReply_same_log : forall (n : name) (st : RaftState.raft_data term name entry logIndex serverType data clientId output) (src : name) (t : nat) (es : list entry) (b : bool) (st' : raft_data) (l : list (name * msg)), handleAppendEntriesReply n st src t es b = (st', l) -> log st' = log st\nhandleAppendEntriesReply_same_lastApplied : forall (n : name) (st : RaftState.raft_data term name entry logIndex serverType data clientId output) (src : name) (t : nat) (es : list entry) (b : bool) (st' : raft_data) (l : list (name * msg)), handleAppendEntriesReply n st src t es b = (st', l) -> lastApplied st' = lastApplied st\nhandleAppendEntriesReply_same_commitIndex : forall (n : name) (st : RaftState.raft_data term name entry logIndex serverType data clientId output) (src : name) (t : nat) (es : list entry) (b : bool) (st' : raft_data) (l : list (name * msg)), handleAppendEntriesReply n st src t es b = (st', l) -> commitIndex st' = commitIndex st\nhandleRequestVote = fun (orig_base_params : BaseParams) (raft_params : RaftParams orig_base_params) (_ : name) (state : RaftState.raft_data term name entry logIndex serverType data clientId output) (t : nat) (candidateId : fin N) (lastLogIndex lastLogTerm : nat) => if t <? currentTerm state then (state, RequestVoteReply (currentTerm state) false) else let state0 := advanceCurrentTerm state t in if (if leaderId state0 then false else true) && moreUpToDate lastLogTerm lastLogIndex (maxTerm (log state0)) (maxIndex (log state0)) then match votedFor state0 with | Some candidateId' => (state0, RequestVoteReply (currentTerm state0) (if fin_eq_dec N candidateId candidateId' then true else false))..."}, {"role": "assistant", "content": "```coq\n```"}], "original": "", "succ": false}]