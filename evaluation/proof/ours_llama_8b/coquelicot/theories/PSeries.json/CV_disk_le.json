[{"history": {"proof": "qsimpl time: 1 use: Rle_ge. qsimpl time: 1 use: Rabs_left1,Rle_ge. qsimpl time: 1 use: Rabs_left1,Rle_ge. qsimpl time: 1 use: Rabs_left1,Rle_ge. qsimpl time: 1 use: Rabs_left1,Rle_ge,Rabs_right. qsimpl time: 1 use: Rabs_left1,Rle_ge,Rabs_right. qsimpl time: 1 use: Rabs_left1,Rle_ge,Rabs_right. qsimpl time: 1 use: Rabs_left1,Rle_ge,Rabs_right. qsimpl time: 1 use: Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l. qsimpl time: 1 use: Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l,Rle_refl. qsimpl time: 1 use: Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l,Rle_refl. qsimpl time: 1 use: Rmult_le_compat_r,Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l,Rle_refl. qsimpl time: 1 use: Rmult_le_compat_r,Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l,Rle_refl. qsimpl time: 1 use: Rmult_le_compat_r,Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l,Rle_refl. qsimpl time: 1 use: Rmult_le_compat_r,Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l,Rle_refl. qsimpl time: 1 use: Rmult_le_compat_r,Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l,Rle_refl. qsimpl time: 1 use: Rmult_le_compat_r,Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l,Rle_refl. qsimpl time: 1 use: Rmult_le_compat_r,Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l,Rle_refl. qsimpl time: 1 use: Rmult_le_compat_r,Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l,Rle_refl. qsimpl time: 1 use: Rmult_le_compat_r,Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l,Rle_refl. qsimpl time: 1 use: Rmult_le_compat_r,Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l,Rle_refl. qsimpl time: 1 use: Rmult_le_compat_r,Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l,Rle_refl. qsimpl time: 1 use: Rmult_le_compat_r,Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l,Rle_refl. qsimpl time: 1 use: Rmult_le_compat_r,Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l,Rle_refl. qsimpl time: 1 use: Rmult_le_compat_r,Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l,Rle_refl. qsimpl time: 1 use: Rmult_le_compat_r,Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l,Rle_refl. qsimpl time: 1 use: Rmult_le_compat_r,Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l,Rle_refl.", "repairs": ["no_hypos", "no_hypos", "cannot_unify", "cannot_unify", "cannot_unify", "cannot_unify", "cannot_unify", "cannot_unify", "cannot_unify", "cannot_unify", "cannot_unify", "cannot_unify", "cannot_unify", "cannot_unify", "cannot_unify", "cannot_unify", "cannot_unify", "cannot_unify", "cannot_unify", "cannot_unify", "cannot_unify", "cannot_unify", "cannot_unify", "cannot_unify", "cannot_unify", "cannot_unify", "cannot_unify"], "exceptions": [{"ctx": [], "tactic": "intros a r2 r1 Hle Hdisk.", "exn": "a is already used.", "type": "used_var", "handled": true}, {"ctx": [], "tactic": "intros a' r2 r1 Hle Hdisk.", "exn": "r2 is already used.", "type": "used_var", "handled": true}, {"ctx": [], "tactic": "intros a' r2' r1 Hle Hdisk.", "exn": "r1 is already used.", "type": "used_var", "handled": true}, {"ctx": [], "tactic": "intros a' r2' r1' Hle Hdisk.", "exn": "No product even after head-reduction.", "type": "no_product", "handled": true}, {"ctx": ["intros."], "tactic": "apply Rle_ge in Hle.", "exn": "No such hypothesis: Hle", "type": "no_hypos", "handled": true}, {"ctx": ["intros.", "qsimpl time: 1 use: Rle_ge."], "tactic": "apply Rabs_left1 in Hle.", "exn": "No such hypothesis: Hle", "type": "no_hypos", "handled": true}, {"ctx": ["intros.", "qsimpl time: 1 use: Rle_ge.", "qsimpl time: 1 use: Rabs_left1,Rle_ge."], "tactic": "rewrite Hle.", "exn": "The reference Hle was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros.", "qsimpl time: 1 use: Rle_ge.", "qsimpl time: 1 use: Rabs_left1,Rle_ge."], "tactic": "apply Rle_ge.", "exn": "In environment H3 : forall r1 r2 : R, r1 <= r2 -> r2 >= r1 H0 : forall a : R, a <= 0 -> Rabs a = - a a : nat -> R r1, r2 : R H : Rabs r1 <= Rabs r2 x : R H2 : is_series (fun n : nat => Rabs (a n * r2 ^ n)) x Unable to unify \"?M2993 > ?M2992 \\\\/ ?M2993 = ?M2992\" with \"exists l : R_NormedModule, is_series (fun n : nat => Rabs (a n * r1 ^ n)) l\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros.", "qsimpl time: 1 use: Rle_ge.", "qsimpl time: 1 use: Rabs_left1,Rle_ge.", "qsimpl time: 1 use: Rabs_left1,Rle_ge."], "tactic": "apply Rabs_left1.", "exn": "In environment H4 : forall r1 r2 : R, r1 <= r2 -> r2 >= r1 H1 : forall a : R, a <= 0 -> Rabs a = - a a : nat -> R r1, r2 : R H : Rabs r1 <= Rabs r2 x : R H2 : is_series (fun n : nat => Rabs (a n * r2 ^ n)) x Unable to unify \"Rabs ?M3258 = - ?M3258\" with \"exists l : R_NormedModule, is_series (fun n : nat => Rabs (a n * r1 ^ n)) l\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros.", "qsimpl time: 1 use: Rle_ge.", "qsimpl time: 1 use: Rabs_left1,Rle_ge.", "qsimpl time: 1 use: Rabs_left1,Rle_ge.", "qsimpl time: 1 use: Rabs_left1,Rle_ge."], "tactic": "apply Rabs_right.", "exn": "In environment H3 : forall r1 r2 : R, r1 <= r2 -> r2 >= r1 H0 : forall a : R, a <= 0 -> Rabs a = - a a : nat -> R r1, r2 : R H : Rabs r1 <= Rabs r2 x : R H2 : is_series (fun n : nat => Rabs (a n * r2 ^ n)) x Unable to unify \"Rabs ?M3524 = ?M3524\" with \"exists l : R_NormedModule, is_series (fun n : nat => Rabs (a n * r1 ^ n)) l\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros.", "qsimpl time: 1 use: Rle_ge.", "qsimpl time: 1 use: Rabs_left1,Rle_ge.", "qsimpl time: 1 use: Rabs_left1,Rle_ge.", "qsimpl time: 1 use: Rabs_left1,Rle_ge.", "qsimpl time: 1 use: Rabs_left1,Rle_ge,Rabs_right."], "tactic": "rewrite <- Hdisk.", "exn": "The reference Hdisk was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros.", "qsimpl time: 1 use: Rle_ge.", "qsimpl time: 1 use: Rabs_left1,Rle_ge.", "qsimpl time: 1 use: Rabs_left1,Rle_ge.", "qsimpl time: 1 use: Rabs_left1,Rle_ge.", "qsimpl time: 1 use: Rabs_left1,Rle_ge,Rabs_right.", "rewrite <- Rabs_right."], "tactic": "apply Rle_ge.", "exn": "In environment H5 : forall r : R, r >= 0 -> Rabs r = r H4 : forall r1 r2 : R, r1 <= r2 -> r2 >= r1 H1 : forall a : R, a <= 0 -> Rabs a = - a a : nat -> R r1, r2 : R H : Rabs r1 <= Rabs r2 x : R H2 : is_series (fun n : nat => Rabs (a n * r2 ^ n)) x Unable to unify \"?M3847 > ?M3846 \\\\/ ?M3847 = ?M3846\" with \"exists l : R_NormedModule, is_series (fun n : nat => Rabs (a n * Rabs r1 ^ n)) l\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros.", "qsimpl time: 1 use: Rle_ge.", "qsimpl time: 1 use: Rabs_left1,Rle_ge.", "qsimpl time: 1 use: Rabs_left1,Rle_ge.", "qsimpl time: 1 use: Rabs_left1,Rle_ge.", "qsimpl time: 1 use: Rabs_left1,Rle_ge,Rabs_right.", "rewrite <- Rabs_right.", "qsimpl time: 1 use: Rabs_left1,Rle_ge,Rabs_right."], "tactic": "apply Rabs_left1.", "exn": "In environment H6 : forall r : R, r >= 0 -> Rabs r = r H3 : forall r1 r2 : R, r1 <= r2 -> r2 >= r1 H0 : forall a : R, a <= 0 -> Rabs a = - a a : nat -> R r1, r2 : R H : Rabs r1 <= Rabs r2 x : R H2 : is_series (fun n : nat => Rabs (a n * r2 ^ n)) x Unable to unify \"Rabs ?M4160 = - ?M4160\" with \"exists l : R_NormedModule, is_series (fun n : nat => Rabs (a n * Rabs r1 ^ n)) l\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros.", "qsimpl time: 1 use: Rle_ge.", "qsimpl time: 1 use: Rabs_left1,Rle_ge.", "qsimpl time: 1 use: Rabs_left1,Rle_ge.", "qsimpl time: 1 use: Rabs_left1,Rle_ge.", "qsimpl time: 1 use: Rabs_left1,Rle_ge,Rabs_right.", "rewrite <- Rabs_right.", "qsimpl time: 1 use: Rabs_left1,Rle_ge,Rabs_right.", "qsimpl time: 1 use: Rabs_left1,Rle_ge,Rabs_right."], "tactic": "apply Rabs_right.", "exn": "In environment H5 : forall r : R, r >= 0 -> Rabs r = r H4 : forall r1 r2 : R, r1 <= r2 -> r2 >= r1 H1 : forall a : R, a <= 0 -> Rabs a = - a a : nat -> R r1, r2 : R H : Rabs r1 <= Rabs r2 x : R H2 : is_series (fun n : nat => Rabs (a n * r2 ^ n)) x Unable to unify \"Rabs ?M4474 = ?M4474\" with \"exists l : R_NormedModule, is_series (fun n : nat => Rabs (a n * Rabs r1 ^ n)) l\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros.", "qsimpl time: 1 use: Rle_ge.", "qsimpl time: 1 use: Rabs_left1,Rle_ge.", "qsimpl time: 1 use: Rabs_left1,Rle_ge.", "qsimpl time: 1 use: Rabs_left1,Rle_ge.", "qsimpl time: 1 use: Rabs_left1,Rle_ge,Rabs_right.", "rewrite <- Rabs_right.", "qsimpl time: 1 use: Rabs_left1,Rle_ge,Rabs_right.", "qsimpl time: 1 use: Rabs_left1,Rle_ge,Rabs_right.", "qsimpl time: 1 use: Rabs_left1,Rle_ge,Rabs_right."], "tactic": "apply Rmult_le_compat_l with (r:=1) (r1:=Rabs r1) (r2:=Rabs r2).", "exn": "In environment H6 : forall r : R, r >= 0 -> Rabs r = r H3 : forall r1 r2 : R, r1 <= r2 -> r2 >= r1 H0 : forall a : R, a <= 0 -> Rabs a = - a a : nat -> R r1, r2 : R H : Rabs r1 <= Rabs r2 x : R H2 : is_series (fun n : nat => Rabs (a n * r2 ^ n)) x Unable to unify \"1 * Rabs r1 <= 1 * Rabs r2\" with \"CV_disk a (Rabs r1)\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros.", "qsimpl time: 1 use: Rle_ge.", "qsimpl time: 1 use: Rabs_left1,Rle_ge.", "qsimpl time: 1 use: Rabs_left1,Rle_ge.", "qsimpl time: 1 use: Rabs_left1,Rle_ge.", "qsimpl time: 1 use: Rabs_left1,Rle_ge,Rabs_right.", "rewrite <- Rabs_right.", "qsimpl time: 1 use: Rabs_left1,Rle_ge,Rabs_right.", "qsimpl time: 1 use: Rabs_left1,Rle_ge,Rabs_right.", "qsimpl time: 1 use: Rabs_left1,Rle_ge,Rabs_right.", "qsimpl time: 1 use: Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l."], "tactic": "apply Rle_refl.", "exn": "In environment H7 : forall r r1 r2 : R, 0 <= r -> r1 <= r2 -> r * r1 <= r * r2 r : R -> R H5 : forall r0 : R, r0 >= 0 -> r r0 = r0 H4 : forall a : R, a <= 0 -> r a = - a H1 : forall r1 r2 : R, r1 <= r2 -> r2 >= r1 H6 : forall r : R, r >= 0 -> Rabs r = r H0 : forall a : R, a <= 0 -> Rabs a = - a a : nat -> R r1, r2 : R H : Rabs r1 <= Rabs r2 x : R H2 : is_series (fun n : nat => Rabs (a n * r2 ^ n)) x Unable to unify \"?M5366 < ?M5366 \\\\/ ?M5366 = ?M5366\" with \"exists l : R_NormedModule, is_series (fun n : nat => Rabs (a n * r r1 ^ n)) l\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros.", "qsimpl time: 1 use: Rle_ge.", "qsimpl time: 1 use: Rabs_left1,Rle_ge.", "qsimpl time: 1 use: Rabs_left1,Rle_ge.", "qsimpl time: 1 use: Rabs_left1,Rle_ge.", "qsimpl time: 1 use: Rabs_left1,Rle_ge,Rabs_right.", "rewrite <- Rabs_right.", "qsimpl time: 1 use: Rabs_left1,Rle_ge,Rabs_right.", "qsimpl time: 1 use: Rabs_left1,Rle_ge,Rabs_right.", "qsimpl time: 1 use: Rabs_left1,Rle_ge,Rabs_right.", "qsimpl time: 1 use: Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l.", "qsimpl time: 1 use: Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l,Rle_refl."], "tactic": "apply Rle_refl.", "exn": "In environment H11 : forall r : R, r <= r H10 : forall r r1 r2 : R, 0 <= r -> r1 <= r2 -> r * r1 <= r * r2 r0 : R -> R H9 : forall r : R, r >= 0 -> r0 r = r H8 : forall a : R, a <= 0 -> r0 a = - a H3 : forall r1 r2 : R, r1 <= r2 -> r2 >= r1 r : R -> R H5 : forall r0 : R, r0 >= 0 -> r r0 = r0 H4 : forall a : R, a <= 0 -> r a = - a H6 : forall r : R, r >= 0 -> Rabs r = r H0 : forall a : R, a <= 0 -> Rabs a = - a a : nat -> R r1, r2 : R H : Rabs r1 <= Rabs r2 x : R H2 : is_series (fun n : nat => Rabs (a n * r2 ^ n)) x Unable to unify \"?M6118 < ?M6118 \\\\/ ?M6118 = ?M6118\" with \"exists l : R_NormedModule, is_series (fun n : nat => Rabs (a n * r r1 ^ n)) l\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros.", "qsimpl time: 1 use: Rle_ge.", "qsimpl time: 1 use: Rabs_left1,Rle_ge.", "qsimpl time: 1 use: Rabs_left1,Rle_ge.", "qsimpl time: 1 use: Rabs_left1,Rle_ge.", "qsimpl time: 1 use: Rabs_left1,Rle_ge,Rabs_right.", "rewrite <- Rabs_right.", "qsimpl time: 1 use: Rabs_left1,Rle_ge,Rabs_right.", "qsimpl time: 1 use: Rabs_left1,Rle_ge,Rabs_right.", "qsimpl time: 1 use: Rabs_left1,Rle_ge,Rabs_right.", "qsimpl time: 1 use: Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l.", "qsimpl time: 1 use: Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l,Rle_refl.", "qsimpl time: 1 use: Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l,Rle_refl."], "tactic": "apply Rmult_le_compat_r with (r:=Rabs r1) (r1:=Rabs r2) (r2:=1).", "exn": "In environment H14 : forall r : R, r <= r H13 : forall r r1 r2 : R, 0 <= r -> r1 <= r2 -> r * r1 <= r * r2 r3 : R -> R H12 : forall r : R, r >= 0 -> r3 r = r H7 : forall a : R, a <= 0 -> r3 a = - a H1 : forall r1 r2 : R, r1 <= r2 -> r2 >= r1 r0 : R -> R H9 : forall r : R, r >= 0 -> r0 r = r H8 : forall a : R, a <= 0 -> r0 a = - a r : R -> R H5 : forall r0 : R, r0 >= 0 -> r r0 = r0 H4 : forall a : R, a <= 0 -> r a = - a H6 : forall r : R, r >= 0 -> Rabs r = r H0 : forall a : R, a <= 0 -> Rabs a = - a a : nat -> R r1, r2 : R H : Rabs r1 <= Rabs r2 x : R H2 : is_series (fun n : nat => Rabs (a n * r2 ^ n)) x Unable to unify \"Rabs r2 * Rabs r1 <= 1 * Rabs r1\" with \"CV_disk a (r r1)\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros.", "qsimpl time: 1 use: Rle_ge.", "qsimpl time: 1 use: Rabs_left1,Rle_ge.", "qsimpl time: 1 use: Rabs_left1,Rle_ge.", "qsimpl time: 1 use: Rabs_left1,Rle_ge.", "qsimpl time: 1 use: Rabs_left1,Rle_ge,Rabs_right.", "rewrite <- Rabs_right.", "qsimpl time: 1 use: Rabs_left1,Rle_ge,Rabs_right.", "qsimpl time: 1 use: Rabs_left1,Rle_ge,Rabs_right.", "qsimpl time: 1 use: Rabs_left1,Rle_ge,Rabs_right.", "qsimpl time: 1 use: Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l.", "qsimpl time: 1 use: Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l,Rle_refl.", "qsimpl time: 1 use: Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l,Rle_refl.", "qsimpl time: 1 use: Rmult_le_compat_r,Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l,Rle_refl."], "tactic": "apply Rle_refl.", "exn": "In environment H17 : forall r : R, r <= r H16 : forall r r1 r2 : R, 0 <= r -> r1 <= r2 -> r * r1 <= r * r2 r4 : R -> R H15 : forall r : R, r >= 0 -> r4 r = r H11 : forall a : R, a <= 0 -> r4 a = - a H10 : forall r1 r2 : R, r1 <= r2 -> r2 >= r1 H3 : forall r r1 r2 : R, 0 <= r -> r1 <= r2 -> r1 * r <= r2 * r r3 : R -> R H12 : forall r : R, r >= 0 -> r3 r = r H7 : forall a : R, a <= 0 -> r3 a = - a r0 : R -> R H9 : forall r : R, r >= 0 -> r0 r = r H8 : forall a : R, a <= 0 -> r0 a = - a r : R -> R H5 : forall r0 : R, r0 >= 0 -> r r0 = r0 H4 : forall a : R, a <= 0 -> r a = - a H6 : forall r : R, r >= 0 -> Rabs r = r H0 : forall a : R, a <= 0 -> Rabs a = - a a : nat -> R r1, r2 : R H : Rabs r1 <= Rabs r2 x : R H2 : is_series (fun n : nat => Rabs (a n * r2 ^ n)) x Unable to unify \"?M8204 < ?M8204 \\\\/ ?M8204 = ?M8204\" with \"exists l : R_NormedModule, is_series (fun n : nat => Rabs (a n * r r1 ^ n)) l\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros.", "qsimpl time: 1 use: Rle_ge.", "qsimpl time: 1 use: Rabs_left1,Rle_ge.", "qsimpl time: 1 use: Rabs_left1,Rle_ge.", "qsimpl time: 1 use: Rabs_left1,Rle_ge.", "qsimpl time: 1 use: Rabs_left1,Rle_ge,Rabs_right.", "rewrite <- Rabs_right.", "qsimpl time: 1 use: Rabs_left1,Rle_ge,Rabs_right.", "qsimpl time: 1 use: Rabs_left1,Rle_ge,Rabs_right.", "qsimpl time: 1 use: Rabs_left1,Rle_ge,Rabs_right.", "qsimpl time: 1 use: Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l.", "qsimpl time: 1 use: Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l,Rle_refl.", "qsimpl time: 1 use: Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l,Rle_refl.", "qsimpl time: 1 use: Rmult_le_compat_r,Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l,Rle_refl.", "qsimpl time: 1 use: Rmult_le_compat_r,Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l,Rle_refl."], "tactic": "apply Rle_refl.", "exn": "In environment H20 : forall r : R, r <= r H19 : forall r r1 r2 : R, 0 <= r -> r1 <= r2 -> r * r1 <= r * r2 r5 : R -> R H18 : forall r : R, r >= 0 -> r5 r = r H14 : forall a : R, a <= 0 -> r5 a = - a H13 : forall r1 r2 : R, r1 <= r2 -> r2 >= r1 H1 : forall r r1 r2 : R, 0 <= r -> r1 <= r2 -> r1 * r <= r2 * r r4 : R -> R H15 : forall r : R, r >= 0 -> r4 r = r H11 : forall a : R, a <= 0 -> r4 a = - a r3 : R -> R H12 : forall r : R, r >= 0 -> r3 r = r H7 : forall a : R, a <= 0 -> r3 a = - a r0 : R -> R H9 : forall r : R, r >= 0 -> r0 r = r H8 : forall a : R, a <= 0 -> r0 a = - a r : R -> R H5 : forall r0 : R, r0 >= 0 -> r r0 = r0 H4 : forall a : R, a <= 0 -> r a = - a H6 : forall r : R, r >= 0 -> Rabs r = r H0 : forall a : R, a <= 0 -> Rabs a = - a a : nat -> R r1, r2 : R H : Rabs r1 <= Rabs r2 x : R H2 : is_series (fun n : nat => Rabs (a n * r2 ^ n)) x Unable to unify \"?M9547 < ?M9547 \\\\/ ?M9547 = ?M9547\" with \"exists l : R_NormedModule, is_series (fun n : nat => Rabs (a n * r r1 ^ n)) l\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros.", "qsimpl time: 1 use: Rle_ge.", "qsimpl time: 1 use: Rabs_left1,Rle_ge.", "qsimpl time: 1 use: Rabs_left1,Rle_ge.", "qsimpl time: 1 use: Rabs_left1,Rle_ge.", "qsimpl time: 1 use: Rabs_left1,Rle_ge,Rabs_right.", "rewrite <- Rabs_right.", "qsimpl time: 1 use: Rabs_left1,Rle_ge,Rabs_right.", "qsimpl time: 1 use: Rabs_left1,Rle_ge,Rabs_right.", "qsimpl time: 1 use: Rabs_left1,Rle_ge,Rabs_right.", "qsimpl time: 1 use: Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l.", "qsimpl time: 1 use: Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l,Rle_refl.", "qsimpl time: 1 use: Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l,Rle_refl.", "qsimpl time: 1 use: Rmult_le_compat_r,Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l,Rle_refl.", "qsimpl time: 1 use: Rmult_le_compat_r,Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l,Rle_refl.", "qsimpl time: 1 use: Rmult_le_compat_r,Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l,Rle_refl."], "tactic": "apply Rle_refl.", "exn": "In environment H22 : forall r : R, r <= r H21 : forall r r1 r2 : R, 0 <= r -> r1 <= r2 -> r * r1 <= r * r2 r6 : R -> R H17 : forall r : R, r >= 0 -> r6 r = r H16 : forall a : R, a <= 0 -> r6 a = - a H10 : forall r1 r2 : R, r1 <= r2 -> r2 >= r1 H3 : forall r r1 r2 : R, 0 <= r -> r1 <= r2 -> r1 * r <= r2 * r r5 : R -> R H18 : forall r : R, r >= 0 -> r5 r = r H14 : forall a : R, a <= 0 -> r5 a = - a r4 : R -> R H15 : forall r : R, r >= 0 -> r4 r = r H11 : forall a : R, a <= 0 -> r4 a = - a r3 : R -> R H12 : forall r : R, r >= 0 -> r3 r = r H7 : forall a : R, a <= 0 -> r3 a = - a r0 : R -> R H9 : forall r : R, r >= 0 -> r0 r = r H8 : forall a : R, a <= 0 -> r0 a = - a r : R -> R H5 : forall r0 : R, r0 >= 0 -> r r0 = r0 H4 : forall a : R, a <= 0 -> r a = - a H6 : forall r : R, r >= 0 -> Rabs r = r H0 : forall a : R, a <= 0 -> Rabs a = - a a : nat -> R r1, r2 : R H : Rabs r1 <= Rabs r2 x : R H2 : is_series (fun n : nat => Rabs (a n * r2 ^ n)) x Unable to unify \"?M11043 < ?M11043 \\\\/ ?M11043 = ?M11043\" with \"exists l : R_NormedModule, is_series (fun n : nat => Rabs (a n * r r1 ^ n)) l\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros.", "qsimpl time: 1 use: Rle_ge.", "qsimpl time: 1 use: Rabs_left1,Rle_ge.", "qsimpl time: 1 use: Rabs_left1,Rle_ge.", "qsimpl time: 1 use: Rabs_left1,Rle_ge.", "qsimpl time: 1 use: Rabs_left1,Rle_ge,Rabs_right.", "rewrite <- Rabs_right.", "qsimpl time: 1 use: Rabs_left1,Rle_ge,Rabs_right.", "qsimpl time: 1 use: Rabs_left1,Rle_ge,Rabs_right.", "qsimpl time: 1 use: Rabs_left1,Rle_ge,Rabs_right.", "qsimpl time: 1 use: Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l.", "qsimpl time: 1 use: Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l,Rle_refl.", "qsimpl time: 1 use: Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l,Rle_refl.", "qsimpl time: 1 use: Rmult_le_compat_r,Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l,Rle_refl.", "qsimpl time: 1 use: Rmult_le_compat_r,Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l,Rle_refl.", "qsimpl time: 1 use: Rmult_le_compat_r,Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l,Rle_refl.", "qsimpl time: 1 use: Rmult_le_compat_r,Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l,Rle_refl."], "tactic": "apply Rle_ge.", "exn": "In environment H24 : forall r : R, r <= r H23 : forall r r1 r2 : R, 0 <= r -> r1 <= r2 -> r * r1 <= r * r2 r7 : R -> R H20 : forall r : R, r >= 0 -> r7 r = r H19 : forall a : R, a <= 0 -> r7 a = - a H13 : forall r1 r2 : R, r1 <= r2 -> r2 >= r1 H1 : forall r r1 r2 : R, 0 <= r -> r1 <= r2 -> r1 * r <= r2 * r r6 : R -> R H17 : forall r : R, r >= 0 -> r6 r = r H16 : forall a : R, a <= 0 -> r6 a = - a r5 : R -> R H18 : forall r : R, r >= 0 -> r5 r = r H14 : forall a : R, a <= 0 -> r5 a = - a r4 : R -> R H15 : forall r : R, r >= 0 -> r4 r = r H11 : forall a : R, a <= 0 -> r4 a = - a r3 : R -> R H12 : forall r : R, r >= 0 -> r3 r = r H7 : forall a : R, a <= 0 -> r3 a = - a r0 : R -> R H9 : forall r : R, r >= 0 -> r0 r = r H8 : forall a : R, a <= 0 -> r0 a = - a r : R -> R H5 : forall r0 : R, r0 >= 0 -> r r0 = r0 H4 : forall a : R, a <= 0 -> r a = - a H6 : forall r : R, r >= 0 -> Rabs r = r H0 : forall a : R, a <= 0 -> Rabs a = - a a : nat -> R r1, r2 : R H : Rabs r1 <= Rabs r2 x : R H2 : is_series (fun n : nat => Rabs (a n * r2 ^ n)) x Unable to unify \"?M12693 > ?M12692 \\\\/ ?M12693 = ?M12692\" with \"exists l : R_NormedModule, is_series (fun n : nat => Rabs (a n * r r1 ^ n)) l\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros.", "qsimpl time: 1 use: Rle_ge.", "qsimpl time: 1 use: Rabs_left1,Rle_ge.", "qsimpl time: 1 use: Rabs_left1,Rle_ge.", "qsimpl time: 1 use: Rabs_left1,Rle_ge.", "qsimpl time: 1 use: Rabs_left1,Rle_ge,Rabs_right.", "rewrite <- Rabs_right.", "qsimpl time: 1 use: Rabs_left1,Rle_ge,Rabs_right.", "qsimpl time: 1 use: Rabs_left1,Rle_ge,Rabs_right.", "qsimpl time: 1 use: Rabs_left1,Rle_ge,Rabs_right.", "qsimpl time: 1 use: Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l.", "qsimpl time: 1 use: Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l,Rle_refl.", "qsimpl time: 1 use: Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l,Rle_refl.", "qsimpl time: 1 use: Rmult_le_compat_r,Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l,Rle_refl.", "qsimpl time: 1 use: Rmult_le_compat_r,Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l,Rle_refl.", "qsimpl time: 1 use: Rmult_le_compat_r,Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l,Rle_refl.", "qsimpl time: 1 use: Rmult_le_compat_r,Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l,Rle_refl.", "qsimpl time: 1 use: Rmult_le_compat_r,Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l,Rle_refl."], "tactic": "apply Rabs_left1.", "exn": "In environment H26 : forall r : R, r <= r H25 : forall r r1 r2 : R, 0 <= r -> r1 <= r2 -> r * r1 <= r * r2 r8 : R -> R H22 : forall r : R, r >= 0 -> r8 r = r H21 : forall a : R, a <= 0 -> r8 a = - a H10 : forall r1 r2 : R, r1 <= r2 -> r2 >= r1 H3 : forall r r1 r2 : R, 0 <= r -> r1 <= r2 -> r1 * r <= r2 * r r7 : R -> R H20 : forall r : R, r >= 0 -> r7 r = r H19 : forall a : R, a <= 0 -> r7 a = - a r6 : R -> R H17 : forall r : R, r >= 0 -> r6 r = r H16 : forall a : R, a <= 0 -> r6 a = - a r5 : R -> R H18 : forall r : R, r >= 0 -> r5 r = r H14 : forall a : R, a <= 0 -> r5 a = - a r4 : R -> R H15 : forall r : R, r >= 0 -> r4 r = r H11 : forall a : R, a <= 0 -> r4 a = - a r3 : R -> R H12 : forall r : R, r >= 0 -> r3 r = r H7 : forall a : R, a <= 0 -> r3 a = - a r0 : R -> R H9 : forall r : R, r >= 0 -> r0 r = r H8 : forall a : R, a <= 0 -> r0 a = - a r : R -> R H5 : forall r0 : R, r0 >= 0 -> r r0 = r0 H4 : forall a : R, a <= 0 -> r a = - a H6 : forall r : R, r >= 0 -> Rabs r = r H0 : forall a : R, a <= 0 -> Rabs a = - a a : nat -> R r1, r2 : R H : Rabs r1 <= Rabs r2 x : R H2 : is_series (fun n : nat => Rabs (a n * r2 ^ n)) x Unable to unify \"Rabs ?M14494 = - ?M14494\" with \"exists l : R_NormedModule, is_series (fun n : nat => Rabs (a n * r r1 ^ n)) l\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros.", "qsimpl time: 1 use: Rle_ge.", "qsimpl time: 1 use: Rabs_left1,Rle_ge.", "qsimpl time: 1 use: Rabs_left1,Rle_ge.", "qsimpl time: 1 use: Rabs_left1,Rle_ge.", "qsimpl time: 1 use: Rabs_left1,Rle_ge,Rabs_right.", "rewrite <- Rabs_right.", "qsimpl time: 1 use: Rabs_left1,Rle_ge,Rabs_right.", "qsimpl time: 1 use: Rabs_left1,Rle_ge,Rabs_right.", "qsimpl time: 1 use: Rabs_left1,Rle_ge,Rabs_right.", "qsimpl time: 1 use: Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l.", "qsimpl time: 1 use: Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l,Rle_refl.", "qsimpl time: 1 use: Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l,Rle_refl.", "qsimpl time: 1 use: Rmult_le_compat_r,Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l,Rle_refl.", "qsimpl time: 1 use: Rmult_le_compat_r,Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l,Rle_refl.", "qsimpl time: 1 use: Rmult_le_compat_r,Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l,Rle_refl.", "qsimpl time: 1 use: Rmult_le_compat_r,Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l,Rle_refl.", "qsimpl time: 1 use: Rmult_le_compat_r,Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l,Rle_refl.", "qsimpl time: 1 use: Rmult_le_compat_r,Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l,Rle_refl."], "tactic": "apply Rabs_right.", "exn": "In environment H28 : forall r : R, r <= r H27 : forall r r1 r2 : R, 0 <= r -> r1 <= r2 -> r * r1 <= r * r2 r9 : R -> R H24 : forall r : R, r >= 0 -> r9 r = r H23 : forall a : R, a <= 0 -> r9 a = - a H13 : forall r1 r2 : R, r1 <= r2 -> r2 >= r1 H1 : forall r r1 r2 : R, 0 <= r -> r1 <= r2 -> r1 * r <= r2 * r r8 : R -> R H22 : forall r : R, r >= 0 -> r8 r = r H21 : forall a : R, a <= 0 -> r8 a = - a r7 : R -> R H20 : forall r : R, r >= 0 -> r7 r = r H19 : forall a : R, a <= 0 -> r7 a = - a r6 : R -> R H17 : forall r : R, r >= 0 -> r6 r = r H16 : forall a : R, a <= 0 -> r6 a = - a r5 : R -> R H18 : forall r : R, r >= 0 -> r5 r = r H14 : forall a : R, a <= 0 -> r5 a = - a r4 : R -> R H15 : forall r : R, r >= 0 -> r4 r = r H11 : forall a : R, a <= 0 -> r4 a = - a r3 : R -> R H12 : forall r : R, r >= 0 -> r3 r = r H7 : forall a : R, a <= 0 -> r3 a = - a r0 : R -> R H9 : forall r : R, r >= 0 -> r0 r = r H8 : forall a : R, a <= 0 -> r0 a = - a r : R -> R H5 : forall r0 : R, r0 >= 0 -> r r0 = r0 H4 : forall a : R, a <= 0 -> r a = - a H6 : forall r : R, r >= 0 -> Rabs r = r H0 : forall a : R, a <= 0 -> Rabs a = - a a : nat -> R r1, r2 : R H : Rabs r1 <= Rabs r2 x : R H2 : is_series (fun n : nat => Rabs (a n * r2 ^ n)) x Unable to unify \"Rabs ?M16449 = ?M16449\" with \"exists l : R_NormedModule, is_series (fun n : nat => Rabs (a n * r r1 ^ n)) l\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros.", "qsimpl time: 1 use: Rle_ge.", "qsimpl time: 1 use: Rabs_left1,Rle_ge.", "qsimpl time: 1 use: Rabs_left1,Rle_ge.", "qsimpl time: 1 use: Rabs_left1,Rle_ge.", "qsimpl time: 1 use: Rabs_left1,Rle_ge,Rabs_right.", "rewrite <- Rabs_right.", "qsimpl time: 1 use: Rabs_left1,Rle_ge,Rabs_right.", "qsimpl time: 1 use: Rabs_left1,Rle_ge,Rabs_right.", "qsimpl time: 1 use: Rabs_left1,Rle_ge,Rabs_right.", "qsimpl time: 1 use: Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l.", "qsimpl time: 1 use: Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l,Rle_refl.", "qsimpl time: 1 use: Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l,Rle_refl.", "qsimpl time: 1 use: Rmult_le_compat_r,Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l,Rle_refl.", "qsimpl time: 1 use: Rmult_le_compat_r,Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l,Rle_refl.", "qsimpl time: 1 use: Rmult_le_compat_r,Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l,Rle_refl.", "qsimpl time: 1 use: Rmult_le_compat_r,Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l,Rle_refl.", "qsimpl time: 1 use: Rmult_le_compat_r,Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l,Rle_refl.", "qsimpl time: 1 use: Rmult_le_compat_r,Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l,Rle_refl.", "qsimpl time: 1 use: Rmult_le_compat_r,Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l,Rle_refl."], "tactic": "apply Rmult_le_compat_l with (r:=1) (r1:=Rabs r2) (r2:=Rabs r1).", "exn": "In environment H30 : forall r : R, r <= r H29 : forall r r1 r2 : R, 0 <= r -> r1 <= r2 -> r * r1 <= r * r2 r10 : R -> R H26 : forall r : R, r >= 0 -> r10 r = r H25 : forall a : R, a <= 0 -> r10 a = - a H10 : forall r1 r2 : R, r1 <= r2 -> r2 >= r1 H3 : forall r r1 r2 : R, 0 <= r -> r1 <= r2 -> r1 * r <= r2 * r r9 : R -> R H24 : forall r : R, r >= 0 -> r9 r = r H23 : forall a : R, a <= 0 -> r9 a = - a r8 : R -> R H22 : forall r : R, r >= 0 -> r8 r = r H21 : forall a : R, a <= 0 -> r8 a = - a r7 : R -> R H20 : forall r : R, r >= 0 -> r7 r = r H19 : forall a : R, a <= 0 -> r7 a = - a r6 : R -> R H17 : forall r : R, r >= 0 -> r6 r = r H16 : forall a : R, a <= 0 -> r6 a = - a r5 : R -> R H18 : forall r : R, r >= 0 -> r5 r = r H14 : forall a : R, a <= 0 -> r5 a = - a r4 : R -> R H15 : forall r : R, r >= 0 -> r4 r = r H11 : forall a : R, a <= 0 -> r4 a = - a r3 : R -> R H12 : forall r : R, r >= 0 -> r3 r = r H7 : forall a : R, a <= 0 -> r3 a = - a r0 : R -> R H9 : forall r : R, r >= 0 -> r0 r = r H8 : forall a : R, a <= 0 -> r0 a = - a r : R -> R H5 : forall r0 : R, r0 >= 0 -> r r0 = r0 H4 : forall a : R, a <= 0 -> r a = - a H6 : forall r : R, r >= 0 -> Rabs r = r H0 : forall a : R, a <= 0 -> Rabs a = - a a : nat -> R r1, r2 : R H : Rabs r1 <= Rabs r2 x : R H2 : is_series (fun n : nat => Rabs (a n * r2 ^ n)) x Unable to unify \"1 * Rabs r2 <= 1 * Rabs r1\" with \"CV_disk a (r r1)\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros.", "qsimpl time: 1 use: Rle_ge.", "qsimpl time: 1 use: Rabs_left1,Rle_ge.", "qsimpl time: 1 use: Rabs_left1,Rle_ge.", "qsimpl time: 1 use: Rabs_left1,Rle_ge.", "qsimpl time: 1 use: Rabs_left1,Rle_ge,Rabs_right.", "rewrite <- Rabs_right.", "qsimpl time: 1 use: Rabs_left1,Rle_ge,Rabs_right.", "qsimpl time: 1 use: Rabs_left1,Rle_ge,Rabs_right.", "qsimpl time: 1 use: Rabs_left1,Rle_ge,Rabs_right.", "qsimpl time: 1 use: Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l.", "qsimpl time: 1 use: Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l,Rle_refl.", "qsimpl time: 1 use: Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l,Rle_refl.", "qsimpl time: 1 use: Rmult_le_compat_r,Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l,Rle_refl.", "qsimpl time: 1 use: Rmult_le_compat_r,Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l,Rle_refl.", "qsimpl time: 1 use: Rmult_le_compat_r,Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l,Rle_refl.", "qsimpl time: 1 use: Rmult_le_compat_r,Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l,Rle_refl.", "qsimpl time: 1 use: Rmult_le_compat_r,Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l,Rle_refl.", "qsimpl time: 1 use: Rmult_le_compat_r,Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l,Rle_refl.", "qsimpl time: 1 use: Rmult_le_compat_r,Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l,Rle_refl.", "qsimpl time: 1 use: Rmult_le_compat_r,Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l,Rle_refl."], "tactic": "apply Rle_refl.", "exn": "In environment H32 : forall r : R, r <= r H31 : forall r r1 r2 : R, 0 <= r -> r1 <= r2 -> r * r1 <= r * r2 r11 : R -> R H28 : forall r : R, r >= 0 -> r11 r = r H27 : forall a : R, a <= 0 -> r11 a = - a H13 : forall r1 r2 : R, r1 <= r2 -> r2 >= r1 H1 : forall r r1 r2 : R, 0 <= r -> r1 <= r2 -> r1 * r <= r2 * r r10 : R -> R H26 : forall r : R, r >= 0 -> r10 r = r H25 : forall a : R, a <= 0 -> r10 a = - a r9 : R -> R H24 : forall r : R, r >= 0 -> r9 r = r H23 : forall a : R, a <= 0 -> r9 a = - a r8 : R -> R H22 : forall r : R, r >= 0 -> r8 r = r H21 : forall a : R, a <= 0 -> r8 a = - a r7 : R -> R H20 : forall r : R, r >= 0 -> r7 r = r H19 : forall a : R, a <= 0 -> r7 a = - a r6 : R -> R H17 : forall r : R, r >= 0 -> r6 r = r H16 : forall a : R, a <= 0 -> r6 a = - a r5 : R -> R H18 : forall r : R, r >= 0 -> r5 r = r H14 : forall a : R, a <= 0 -> r5 a = - a r4 : R -> R H15 : forall r : R, r >= 0 -> r4 r = r H11 : forall a : R, a <= 0 -> r4 a = - a r3 : R -> R H12 : forall r : R, r >= 0 -> r3 r = r H7 : forall a : R, a <= 0 -> r3 a = - a r0 : R -> R H9 : forall r : R, r >= 0 -> r0 r = r H8 : forall a : R, a <= 0 -> r0 a = - a r : R -> R H5 : forall r0 : R, r0 >= 0 -> r r0 = r0 H4 : forall a : R, a <= 0 -> r a = - a H6 : forall r : R, r >= 0 -> Rabs r = r H0 : forall a : R, a <= 0 -> Rabs a = - a a : nat -> R r1, r2 : R H : Rabs r1 <= Rabs r2 x : R H2 : is_series (fun n : nat => Rabs (a n * r2 ^ n)) x Unable to unify \"?M20818 < ?M20818 \\\\/ ?M20818 = ?M20818\" with \"exists l : R_NormedModule, is_series (fun n : nat => Rabs (a n * r r1 ^ n)) l\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros.", "qsimpl time: 1 use: Rle_ge.", "qsimpl time: 1 use: Rabs_left1,Rle_ge.", "qsimpl time: 1 use: Rabs_left1,Rle_ge.", "qsimpl time: 1 use: Rabs_left1,Rle_ge.", "qsimpl time: 1 use: Rabs_left1,Rle_ge,Rabs_right.", "rewrite <- Rabs_right.", "qsimpl time: 1 use: Rabs_left1,Rle_ge,Rabs_right.", "qsimpl time: 1 use: Rabs_left1,Rle_ge,Rabs_right.", "qsimpl time: 1 use: Rabs_left1,Rle_ge,Rabs_right.", "qsimpl time: 1 use: Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l.", "qsimpl time: 1 use: Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l,Rle_refl.", "qsimpl time: 1 use: Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l,Rle_refl.", "qsimpl time: 1 use: Rmult_le_compat_r,Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l,Rle_refl.", "qsimpl time: 1 use: Rmult_le_compat_r,Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l,Rle_refl.", "qsimpl time: 1 use: Rmult_le_compat_r,Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l,Rle_refl.", "qsimpl time: 1 use: Rmult_le_compat_r,Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l,Rle_refl.", "qsimpl time: 1 use: Rmult_le_compat_r,Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l,Rle_refl.", "qsimpl time: 1 use: Rmult_le_compat_r,Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l,Rle_refl.", "qsimpl time: 1 use: Rmult_le_compat_r,Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l,Rle_refl.", "qsimpl time: 1 use: Rmult_le_compat_r,Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l,Rle_refl.", "qsimpl time: 1 use: Rmult_le_compat_r,Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l,Rle_refl."], "tactic": "apply Rle_refl.", "exn": "In environment H34 : forall r : R, r <= r H33 : forall r r1 r2 : R, 0 <= r -> r1 <= r2 -> r * r1 <= r * r2 r12 : R -> R H30 : forall r : R, r >= 0 -> r12 r = r H29 : forall a : R, a <= 0 -> r12 a = - a H10 : forall r1 r2 : R, r1 <= r2 -> r2 >= r1 H3 : forall r r1 r2 : R, 0 <= r -> r1 <= r2 -> r1 * r <= r2 * r r11 : R -> R H28 : forall r : R, r >= 0 -> r11 r = r H27 : forall a : R, a <= 0 -> r11 a = - a r10 : R -> R H26 : forall r : R, r >= 0 -> r10 r = r H25 : forall a : R, a <= 0 -> r10 a = - a r9 : R -> R H24 : forall r : R, r >= 0 -> r9 r = r H23 : forall a : R, a <= 0 -> r9 a = - a r8 : R -> R H22 : forall r : R, r >= 0 -> r8 r = r H21 : forall a : R, a <= 0 -> r8 a = - a r7 : R -> R H20 : forall r : R, r >= 0 -> r7 r = r H19 : forall a : R, a <= 0 -> r7 a = - a r6 : R -> R H17 : forall r : R, r >= 0 -> r6 r = r H16 : forall a : R, a <= 0 -> r6 a = - a r5 : R -> R H18 : forall r : R, r >= 0 -> r5 r = r H14 : forall a : R, a <= 0 -> r5 a = - a r4 : R -> R H15 : forall r : R, r >= 0 -> r4 r = r H11 : forall a : R, a <= 0 -> r4 a = - a r3 : R -> R H12 : forall r : R, r >= 0 -> r3 r = r H7 : forall a : R, a <= 0 -> r3 a = - a r0 : R -> R H9 : forall r : R, r >= 0 -> r0 r = r H8 : forall a : R, a <= 0 -> r0 a = - a r : R -> R H5 : forall r0 : R, r0 >= 0 -> r r0 = r0 H4 : forall a : R, a <= 0 -> r a = - a H6 : forall r : R, r >= 0 -> Rabs r = r H0 : forall a : R, a <= 0 -> Rabs a = - a a : nat -> R r1, r2 : R H : Rabs r1 <= Rabs r2 x : R H2 : is_series (fun n : nat => Rabs (a n * r2 ^ n)) x Unable to unify \"?M23232 < ?M23232 \\\\/ ?M23232 = ?M23232\" with \"exists l : R_NormedModule, is_series (fun n : nat => Rabs (a n * r r1 ^ n)) l\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros.", "qsimpl time: 1 use: Rle_ge.", "qsimpl time: 1 use: Rabs_left1,Rle_ge.", "qsimpl time: 1 use: Rabs_left1,Rle_ge.", "qsimpl time: 1 use: Rabs_left1,Rle_ge.", "qsimpl time: 1 use: Rabs_left1,Rle_ge,Rabs_right.", "rewrite <- Rabs_right.", "qsimpl time: 1 use: Rabs_left1,Rle_ge,Rabs_right.", "qsimpl time: 1 use: Rabs_left1,Rle_ge,Rabs_right.", "qsimpl time: 1 use: Rabs_left1,Rle_ge,Rabs_right.", "qsimpl time: 1 use: Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l.", "qsimpl time: 1 use: Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l,Rle_refl.", "qsimpl time: 1 use: Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l,Rle_refl.", "qsimpl time: 1 use: Rmult_le_compat_r,Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l,Rle_refl.", "qsimpl time: 1 use: Rmult_le_compat_r,Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l,Rle_refl.", "qsimpl time: 1 use: Rmult_le_compat_r,Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l,Rle_refl.", "qsimpl time: 1 use: Rmult_le_compat_r,Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l,Rle_refl.", "qsimpl time: 1 use: Rmult_le_compat_r,Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l,Rle_refl.", "qsimpl time: 1 use: Rmult_le_compat_r,Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l,Rle_refl.", "qsimpl time: 1 use: Rmult_le_compat_r,Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l,Rle_refl.", "qsimpl time: 1 use: Rmult_le_compat_r,Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l,Rle_refl.", "qsimpl time: 1 use: Rmult_le_compat_r,Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l,Rle_refl.", "qsimpl time: 1 use: Rmult_le_compat_r,Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l,Rle_refl."], "tactic": "apply Rmult_le_compat_r with (r:=Rabs r2) (r1:=Rabs r1) (r2:=1).", "exn": "In environment H36 : forall r : R, r <= r H35 : forall r r1 r2 : R, 0 <= r -> r1 <= r2 -> r * r1 <= r * r2 r13 : R -> R H32 : forall r : R, r >= 0 -> r13 r = r H31 : forall a : R, a <= 0 -> r13 a = - a H13 : forall r1 r2 : R, r1 <= r2 -> r2 >= r1 H1 : forall r r1 r2 : R, 0 <= r -> r1 <= r2 -> r1 * r <= r2 * r r12 : R -> R H30 : forall r : R, r >= 0 -> r12 r = r H29 : forall a : R, a <= 0 -> r12 a = - a r11 : R -> R H28 : forall r : R, r >= 0 -> r11 r = r H27 : forall a : R, a <= 0 -> r11 a = - a r10 : R -> R H26 : forall r : R, r >= 0 -> r10 r = r H25 : forall a : R, a <= 0 -> r10 a = - a r9 : R -> R H24 : forall r : R, r >= 0 -> r9 r = r H23 : forall a : R, a <= 0 -> r9 a = - a r8 : R -> R H22 : forall r : R, r >= 0 -> r8 r = r H21 : forall a : R, a <= 0 -> r8 a = - a r7 : R -> R H20 : forall r : R, r >= 0 -> r7 r = r H19 : forall a : R, a <= 0 -> r7 a = - a r6 : R -> R H17 : forall r : R, r >= 0 -> r6 r = r H16 : forall a : R, a <= 0 -> r6 a = - a r5 : R -> R H18 : forall r : R, r >= 0 -> r5 r = r H14 : forall a : R, a <= 0 -> r5 a = - a r4 : R -> R H15 : forall r : R, r >= 0 -> r4 r = r H11 : forall a : R, a <= 0 -> r4 a = - a r3 : R -> R H12 : forall r : R, r >= 0 -> r3 r = r H7 : forall a : R, a <= 0 -> r3 a = - a r0 : R -> R H9 : forall r : R, r >= 0 -> r0 r = r H8 : forall a : R, a <= 0 -> r0 a = - a r : R -> R H5 : forall r0 : R, r0 >= 0 -> r r0 = r0 H4 : forall a : R, a <= 0 -> r a = - a H6 : forall r : R, r >= 0 -> Rabs r = r H0 : forall a : R, a <= 0 -> Rabs a = - a a : nat -> R r1, r2 : R H : Rabs r1 <= Rabs r2 x : R H2 : is_series (fun n : nat => Rabs (a n * r2 ^ n)) x Unable to unify \"Rabs r1 * Rabs r2 <= 1 * Rabs r2\" with \"CV_disk a (r r1)\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros.", "qsimpl time: 1 use: Rle_ge.", "qsimpl time: 1 use: Rabs_left1,Rle_ge.", "qsimpl time: 1 use: Rabs_left1,Rle_ge.", "qsimpl time: 1 use: Rabs_left1,Rle_ge.", "qsimpl time: 1 use: Rabs_left1,Rle_ge,Rabs_right.", "rewrite <- Rabs_right.", "qsimpl time: 1 use: Rabs_left1,Rle_ge,Rabs_right.", "qsimpl time: 1 use: Rabs_left1,Rle_ge,Rabs_right.", "qsimpl time: 1 use: Rabs_left1,Rle_ge,Rabs_right.", "qsimpl time: 1 use: Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l.", "qsimpl time: 1 use: Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l,Rle_refl.", "qsimpl time: 1 use: Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l,Rle_refl.", "qsimpl time: 1 use: Rmult_le_compat_r,Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l,Rle_refl.", "qsimpl time: 1 use: Rmult_le_compat_r,Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l,Rle_refl.", "qsimpl time: 1 use: Rmult_le_compat_r,Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l,Rle_refl.", "qsimpl time: 1 use: Rmult_le_compat_r,Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l,Rle_refl.", "qsimpl time: 1 use: Rmult_le_compat_r,Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l,Rle_refl.", "qsimpl time: 1 use: Rmult_le_compat_r,Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l,Rle_refl.", "qsimpl time: 1 use: Rmult_le_compat_r,Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l,Rle_refl.", "qsimpl time: 1 use: Rmult_le_compat_r,Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l,Rle_refl.", "qsimpl time: 1 use: Rmult_le_compat_r,Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l,Rle_refl.", "qsimpl time: 1 use: Rmult_le_compat_r,Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l,Rle_refl.", "qsimpl time: 1 use: Rmult_le_compat_r,Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l,Rle_refl."], "tactic": "apply Rle_refl.", "exn": "In environment H38 : forall r : R, r <= r H37 : forall r r1 r2 : R, 0 <= r -> r1 <= r2 -> r * r1 <= r * r2 r14 : R -> R H34 : forall r : R, r >= 0 -> r14 r = r H33 : forall a : R, a <= 0 -> r14 a = - a H10 : forall r1 r2 : R, r1 <= r2 -> r2 >= r1 H3 : forall r r1 r2 : R, 0 <= r -> r1 <= r2 -> r1 * r <= r2 * r r13 : R -> R H32 : forall r : R, r >= 0 -> r13 r = r H31 : forall a : R, a <= 0 -> r13 a = - a r12 : R -> R H30 : forall r : R, r >= 0 -> r12 r = r H29 : forall a : R, a <= 0 -> r12 a = - a r11 : R -> R H28 : forall r : R, r >= 0 -> r11 r = r H27 : forall a : R, a <= 0 -> r11 a = - a r10 : R -> R H26 : forall r : R, r >= 0 -> r10 r = r H25 : forall a : R, a <= 0 -> r10 a = - a r9 : R -> R H24 : forall r : R, r >= 0 -> r9 r = r H23 : forall a : R, a <= 0 -> r9 a = - a r8 : R -> R H22 : forall r : R, r >= 0 -> r8 r = r H21 : forall a : R, a <= 0 -> r8 a = - a r7 : R -> R H20 : forall r : R, r >= 0 -> r7 r = r H19 : forall a : R, a <= 0 -> r7 a = - a r6 : R -> R H17 : forall r : R, r >= 0 -> r6 r = r H16 : forall a : R, a <= 0 -> r6 a = - a r5 : R -> R H18 : forall r : R, r >= 0 -> r5 r = r H14 : forall a : R, a <= 0 -> r5 a = - a r4 : R -> R H15 : forall r : R, r >= 0 -> r4 r = r H11 : forall a : R, a <= 0 -> r4 a = - a r3 : R -> R H12 : forall r : R, r >= 0 -> r3 r = r H7 : forall a : R, a <= 0 -> r3 a = - a r0 : R -> R H9 : forall r : R, r >= 0 -> r0 r = r H8 : forall a : R, a <= 0 -> r0 a = - a r : R -> R H5 : forall r0 : R, r0 >= 0 -> r r0 = r0 H4 : forall a : R, a <= 0 -> r a = - a H6 : forall r : R, r >= 0 -> Rabs r = r H0 : forall a : R, a <= 0 -> Rabs a = - a a : nat -> R r1, r2 : R H : Rabs r1 <= Rabs r2 x : R H2 : is_series (fun n : nat => Rabs (a n * r2 ^ n)) x Unable to unify \"?M28519 < ?M28519 \\\\/ ?M28519 = ?M28519\" with \"exists l : R_NormedModule, is_series (fun n : nat => Rabs (a n * r r1 ^ n)) l\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros.", "qsimpl time: 1 use: Rle_ge.", "qsimpl time: 1 use: Rabs_left1,Rle_ge.", "qsimpl time: 1 use: Rabs_left1,Rle_ge.", "qsimpl time: 1 use: Rabs_left1,Rle_ge.", "qsimpl time: 1 use: Rabs_left1,Rle_ge,Rabs_right.", "rewrite <- Rabs_right.", "qsimpl time: 1 use: Rabs_left1,Rle_ge,Rabs_right.", "qsimpl time: 1 use: Rabs_left1,Rle_ge,Rabs_right.", "qsimpl time: 1 use: Rabs_left1,Rle_ge,Rabs_right.", "qsimpl time: 1 use: Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l.", "qsimpl time: 1 use: Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l,Rle_refl.", "qsimpl time: 1 use: Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l,Rle_refl.", "qsimpl time: 1 use: Rmult_le_compat_r,Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l,Rle_refl.", "qsimpl time: 1 use: Rmult_le_compat_r,Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l,Rle_refl.", "qsimpl time: 1 use: Rmult_le_compat_r,Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l,Rle_refl.", "qsimpl time: 1 use: Rmult_le_compat_r,Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l,Rle_refl.", "qsimpl time: 1 use: Rmult_le_compat_r,Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l,Rle_refl.", "qsimpl time: 1 use: Rmult_le_compat_r,Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l,Rle_refl.", "qsimpl time: 1 use: Rmult_le_compat_r,Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l,Rle_refl.", "qsimpl time: 1 use: Rmult_le_compat_r,Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l,Rle_refl.", "qsimpl time: 1 use: Rmult_le_compat_r,Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l,Rle_refl.", "qsimpl time: 1 use: Rmult_le_compat_r,Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l,Rle_refl.", "qsimpl time: 1 use: Rmult_le_compat_r,Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l,Rle_refl.", "qsimpl time: 1 use: Rmult_le_compat_r,Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l,Rle_refl."], "tactic": "apply Rle_refl.", "exn": "In environment H40 : forall r : R, r <= r H39 : forall r r1 r2 : R, 0 <= r -> r1 <= r2 -> r * r1 <= r * r2 r15 : R -> R H36 : forall r : R, r >= 0 -> r15 r = r H35 : forall a : R, a <= 0 -> r15 a = - a H13 : forall r1 r2 : R, r1 <= r2 -> r2 >= r1 H1 : forall r r1 r2 : R, 0 <= r -> r1 <= r2 -> r1 * r <= r2 * r r14 : R -> R H34 : forall r : R, r >= 0 -> r14 r = r H33 : forall a : R, a <= 0 -> r14 a = - a r13 : R -> R H32 : forall r : R, r >= 0 -> r13 r = r H31 : forall a : R, a <= 0 -> r13 a = - a r12 : R -> R H30 : forall r : R, r >= 0 -> r12 r = r H29 : forall a : R, a <= 0 -> r12 a = - a r11 : R -> R H28 : forall r : R, r >= 0 -> r11 r = r H27 : forall a : R, a <= 0 -> r11 a = - a r10 : R -> R H26 : forall r : R, r >= 0 -> r10 r = r H25 : forall a : R, a <= 0 -> r10 a = - a r9 : R -> R H24 : forall r : R, r >= 0 -> r9 r = r H23 : forall a : R, a <= 0 -> r9 a = - a r8 : R -> R H22 : forall r : R, r >= 0 -> r8 r = r H21 : forall a : R, a <= 0 -> r8 a = - a r7 : R -> R H20 : forall r : R, r >= 0 -> r7 r = r H19 : forall a : R, a <= 0 -> r7 a = - a r6 : R -> R H17 : forall r : R, r >= 0 -> r6 r = r H16 : forall a : R, a <= 0 -> r6 a = - a r5 : R -> R H18 : forall r : R, r >= 0 -> r5 r = r H14 : forall a : R, a <= 0 -> r5 a = - a r4 : R -> R H15 : forall r : R, r >= 0 -> r4 r = r H11 : forall a : R, a <= 0 -> r4 a = - a r3 : R -> R H12 : forall r : R, r >= 0 -> r3 r = r H7 : forall a : R, a <= 0 -> r3 a = - a r0 : R -> R H9 : forall r : R, r >= 0 -> r0 r = r H8 : forall a : R, a <= 0 -> r0 a = - a r : R -> R H5 : forall r0 : R, r0 >= 0 -> r r0 = r0 H4 : forall a : R, a <= 0 -> r a = - a H6 : forall r : R, r >= 0 -> Rabs r = r H0 : forall a : R, a <= 0 -> Rabs a = - a a : nat -> R r1, r2 : R H : Rabs r1 <= Rabs r2 x : R H2 : is_series (fun n : nat => Rabs (a n * r2 ^ n)) x Unable to unify \"?M31392 < ?M31392 \\\\/ ?M31392 = ?M31392\" with \"exists l : R_NormedModule, is_series (fun n : nat => Rabs (a n * r r1 ^ n)) l\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros.", "qsimpl time: 1 use: Rle_ge.", "qsimpl time: 1 use: Rabs_left1,Rle_ge.", "qsimpl time: 1 use: Rabs_left1,Rle_ge.", "qsimpl time: 1 use: Rabs_left1,Rle_ge.", "qsimpl time: 1 use: Rabs_left1,Rle_ge,Rabs_right.", "rewrite <- Rabs_right.", "qsimpl time: 1 use: Rabs_left1,Rle_ge,Rabs_right.", "qsimpl time: 1 use: Rabs_left1,Rle_ge,Rabs_right.", "qsimpl time: 1 use: Rabs_left1,Rle_ge,Rabs_right.", "qsimpl time: 1 use: Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l.", "qsimpl time: 1 use: Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l,Rle_refl.", "qsimpl time: 1 use: Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l,Rle_refl.", "qsimpl time: 1 use: Rmult_le_compat_r,Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l,Rle_refl.", "qsimpl time: 1 use: Rmult_le_compat_r,Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l,Rle_refl.", "qsimpl time: 1 use: Rmult_le_compat_r,Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l,Rle_refl.", "qsimpl time: 1 use: Rmult_le_compat_r,Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l,Rle_refl.", "qsimpl time: 1 use: Rmult_le_compat_r,Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l,Rle_refl.", "qsimpl time: 1 use: Rmult_le_compat_r,Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l,Rle_refl.", "qsimpl time: 1 use: Rmult_le_compat_r,Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l,Rle_refl.", "qsimpl time: 1 use: Rmult_le_compat_r,Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l,Rle_refl.", "qsimpl time: 1 use: Rmult_le_compat_r,Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l,Rle_refl.", "qsimpl time: 1 use: Rmult_le_compat_r,Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l,Rle_refl.", "qsimpl time: 1 use: Rmult_le_compat_r,Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l,Rle_refl.", "qsimpl time: 1 use: Rmult_le_compat_r,Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l,Rle_refl.", "qsimpl time: 1 use: Rmult_le_compat_r,Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l,Rle_refl."], "tactic": "apply Rle_refl.", "exn": "In environment H42 : forall r : R, r <= r H41 : forall r r1 r2 : R, 0 <= r -> r1 <= r2 -> r * r1 <= r * r2 r16 : R -> R H38 : forall r : R, r >= 0 -> r16 r = r H37 : forall a : R, a <= 0 -> r16 a = - a H10 : forall r1 r2 : R, r1 <= r2 -> r2 >= r1 H3 : forall r r1 r2 : R, 0 <= r -> r1 <= r2 -> r1 * r <= r2 * r r15 : R -> R H36 : forall r : R, r >= 0 -> r15 r = r H35 : forall a : R, a <= 0 -> r15 a = - a r14 : R -> R H34 : forall r : R, r >= 0 -> r14 r = r H33 : forall a : R, a <= 0 -> r14 a = - a r13 : R -> R H32 : forall r : R, r >= 0 -> r13 r = r H31 : forall a : R, a <= 0 -> r13 a = - a r12 : R -> R H30 : forall r : R, r >= 0 -> r12 r = r H29 : forall a : R, a <= 0 -> r12 a = - a r11 : R -> R H28 : forall r : R, r >= 0 -> r11 r = r H27 : forall a : R, a <= 0 -> r11 a = - a r10 : R -> R H26 : forall r : R, r >= 0 -> r10 r = r H25 : forall a : R, a <= 0 -> r10 a = - a r9 : R -> R H24 : forall r : R, r >= 0 -> r9 r = r H23 : forall a : R, a <= 0 -> r9 a = - a r8 : R -> R H22 : forall r : R, r >= 0 -> r8 r = r H21 : forall a : R, a <= 0 -> r8 a = - a r7 : R -> R H20 : forall r : R, r >= 0 -> r7 r = r H19 : forall a : R, a <= 0 -> r7 a = - a r6 : R -> R H17 : forall r : R, r >= 0 -> r6 r = r H16 : forall a : R, a <= 0 -> r6 a = - a r5 : R -> R H18 : forall r : R, r >= 0 -> r5 r = r H14 : forall a : R, a <= 0 -> r5 a = - a r4 : R -> R H15 : forall r : R, r >= 0 -> r4 r = r H11 : forall a : R, a <= 0 -> r4 a = - a r3 : R -> R H12 : forall r : R, r >= 0 -> r3 r = r H7 : forall a : R, a <= 0 -> r3 a = - a r0 : R -> R H9 : forall r : R, r >= 0 -> r0 r = r H8 : forall a : R, a <= 0 -> r0 a = - a r : R -> R H5 : forall r0 : R, r0 >= 0 -> r r0 = r0 H4 : forall a : R, a <= 0 -> r a = - a H6 : forall r : R, r >= 0 -> Rabs r = r H0 : forall a : R, a <= 0 -> Rabs a = - a a : nat -> R r1, r2 : R H : Rabs r1 <= Rabs r2 x : R H2 : is_series (fun n : nat => Rabs (a n * r2 ^ n)) x Unable to unify \"?M34418 < ?M34418 \\\\/ ?M34418 = ?M34418\" with \"exists l : R_NormedModule, is_series (fun n : nat => Rabs (a n * r r1 ^ n)) l\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros.", "qsimpl time: 1 use: Rle_ge.", "qsimpl time: 1 use: Rabs_left1,Rle_ge.", "qsimpl time: 1 use: Rabs_left1,Rle_ge.", "qsimpl time: 1 use: Rabs_left1,Rle_ge.", "qsimpl time: 1 use: Rabs_left1,Rle_ge,Rabs_right.", "rewrite <- Rabs_right.", "qsimpl time: 1 use: Rabs_left1,Rle_ge,Rabs_right.", "qsimpl time: 1 use: Rabs_left1,Rle_ge,Rabs_right.", "qsimpl time: 1 use: Rabs_left1,Rle_ge,Rabs_right.", "qsimpl time: 1 use: Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l.", "qsimpl time: 1 use: Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l,Rle_refl.", "qsimpl time: 1 use: Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l,Rle_refl.", "qsimpl time: 1 use: Rmult_le_compat_r,Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l,Rle_refl.", "qsimpl time: 1 use: Rmult_le_compat_r,Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l,Rle_refl.", "qsimpl time: 1 use: Rmult_le_compat_r,Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l,Rle_refl.", "qsimpl time: 1 use: Rmult_le_compat_r,Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l,Rle_refl.", "qsimpl time: 1 use: Rmult_le_compat_r,Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l,Rle_refl.", "qsimpl time: 1 use: Rmult_le_compat_r,Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l,Rle_refl.", "qsimpl time: 1 use: Rmult_le_compat_r,Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l,Rle_refl.", "qsimpl time: 1 use: Rmult_le_compat_r,Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l,Rle_refl.", "qsimpl time: 1 use: Rmult_le_compat_r,Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l,Rle_refl.", "qsimpl time: 1 use: Rmult_le_compat_r,Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l,Rle_refl.", "qsimpl time: 1 use: Rmult_le_compat_r,Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l,Rle_refl.", "qsimpl time: 1 use: Rmult_le_compat_r,Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l,Rle_refl.", "qsimpl time: 1 use: Rmult_le_compat_r,Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l,Rle_refl.", "qsimpl time: 1 use: Rmult_le_compat_r,Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l,Rle_refl."], "tactic": "apply Rle_ge.", "exn": "In environment H44 : forall r : R, r <= r H43 : forall r r1 r2 : R, 0 <= r -> r1 <= r2 -> r * r1 <= r * r2 r17 : R -> R H40 : forall r : R, r >= 0 -> r17 r = r H39 : forall a : R, a <= 0 -> r17 a = - a H13 : forall r1 r2 : R, r1 <= r2 -> r2 >= r1 H1 : forall r r1 r2 : R, 0 <= r -> r1 <= r2 -> r1 * r <= r2 * r r16 : R -> R H38 : forall r : R, r >= 0 -> r16 r = r H37 : forall a : R, a <= 0 -> r16 a = - a r15 : R -> R H36 : forall r : R, r >= 0 -> r15 r = r H35 : forall a : R, a <= 0 -> r15 a = - a r14 : R -> R H34 : forall r : R, r >= 0 -> r14 r = r H33 : forall a : R, a <= 0 -> r14 a = - a r13 : R -> R H32 : forall r : R, r >= 0 -> r13 r = r H31 : forall a : R, a <= 0 -> r13 a = - a r12 : R -> R H30 : forall r : R, r >= 0 -> r12 r = r H29 : forall a : R, a <= 0 -> r12 a = - a r11 : R -> R H28 : forall r : R, r >= 0 -> r11 r = r H27 : forall a : R, a <= 0 -> r11 a = - a r10 : R -> R H26 : forall r : R, r >= 0 -> r10 r = r H25 : forall a : R, a <= 0 -> r10 a = - a r9 : R -> R H24 : forall r : R, r >= 0 -> r9 r = r H23 : forall a : R, a <= 0 -> r9 a = - a r8 : R -> R H22 : forall r : R, r >= 0 -> r8 r = r H21 : forall a : R, a <= 0 -> r8 a = - a r7 : R -> R H20 : forall r : R, r >= 0 -> r7 r = r H19 : forall a : R, a <= 0 -> r7 a = - a r6 : R -> R H17 : forall r : R, r >= 0 -> r6 r = r H16 : forall a : R, a <= 0 -> r6 a = - a r5 : R -> R H18 : forall r : R, r >= 0 -> r5 r = r H14 : forall a : R, a <= 0 -> r5 a = - a r4 : R -> R H15 : forall r : R, r >= 0 -> r4 r = r H11 : forall a : R, a <= 0 -> r4 a = - a r3 : R -> R H12 : forall r : R, r >= 0 -> r3 r = r H7 : forall a : R, a <= 0 -> r3 a = - a r0 : R -> R H9 : forall r : R, r >= 0 -> r0 r = r H8 : forall a : R, a <= 0 -> r0 a = - a r : R -> R H5 : forall r0 : R, r0 >= 0 -> r r0 = r0 H4 : forall a : R, a <= 0 -> r a = - a H6 : forall r : R, r >= 0 -> Rabs r = r H0 : forall a : R, a <= 0 -> Rabs a = - a a : nat -> R r1, r2 : R H : Rabs r1 <= Rabs r2 x : R H2 : is_series (fun n : nat => Rabs (a n * r2 ^ n)) x Unable to unify \"?M37598 > ?M37597 \\\\/ ?M37598 = ?M37597\" with \"exists l : R_NormedModule, is_series (fun n : nat => Rabs (a n * r r1 ^ n)) l\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros.", "qsimpl time: 1 use: Rle_ge.", "qsimpl time: 1 use: Rabs_left1,Rle_ge.", "qsimpl time: 1 use: Rabs_left1,Rle_ge.", "qsimpl time: 1 use: Rabs_left1,Rle_ge.", "qsimpl time: 1 use: Rabs_left1,Rle_ge,Rabs_right.", "rewrite <- Rabs_right.", "qsimpl time: 1 use: Rabs_left1,Rle_ge,Rabs_right.", "qsimpl time: 1 use: Rabs_left1,Rle_ge,Rabs_right.", "qsimpl time: 1 use: Rabs_left1,Rle_ge,Rabs_right.", "qsimpl time: 1 use: Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l.", "qsimpl time: 1 use: Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l,Rle_refl.", "qsimpl time: 1 use: Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l,Rle_refl.", "qsimpl time: 1 use: Rmult_le_compat_r,Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l,Rle_refl.", "qsimpl time: 1 use: Rmult_le_compat_r,Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l,Rle_refl.", "qsimpl time: 1 use: Rmult_le_compat_r,Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l,Rle_refl.", "qsimpl time: 1 use: Rmult_le_compat_r,Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l,Rle_refl.", "qsimpl time: 1 use: Rmult_le_compat_r,Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l,Rle_refl.", "qsimpl time: 1 use: Rmult_le_compat_r,Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l,Rle_refl.", "qsimpl time: 1 use: Rmult_le_compat_r,Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l,Rle_refl.", "qsimpl time: 1 use: Rmult_le_compat_r,Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l,Rle_refl.", "qsimpl time: 1 use: Rmult_le_compat_r,Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l,Rle_refl.", "qsimpl time: 1 use: Rmult_le_compat_r,Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l,Rle_refl.", "qsimpl time: 1 use: Rmult_le_compat_r,Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l,Rle_refl.", "qsimpl time: 1 use: Rmult_le_compat_r,Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l,Rle_refl.", "qsimpl time: 1 use: Rmult_le_compat_r,Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l,Rle_refl.", "qsimpl time: 1 use: Rmult_le_compat_r,Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l,Rle_refl.", "qsimpl time: 1 use: Rmult_le_compat_r,Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l,Rle_refl."], "tactic": "apply Rabs_left1.", "exn": "In environment H46 : forall r : R, r <= r H45 : forall r r1 r2 : R, 0 <= r -> r1 <= r2 -> r * r1 <= r * r2 r18 : R -> R H42 : forall r : R, r >= 0 -> r18 r = r H41 : forall a : R, a <= 0 -> r18 a = - a H10 : forall r1 r2 : R, r1 <= r2 -> r2 >= r1 H3 : forall r r1 r2 : R, 0 <= r -> r1 <= r2 -> r1 * r <= r2 * r r17 : R -> R H40 : forall r : R, r >= 0 -> r17 r = r H39 : forall a : R, a <= 0 -> r17 a = - a r16 : R -> R H38 : forall r : R, r >= 0 -> r16 r = r H37 : forall a : R, a <= 0 -> r16 a = - a r15 : R -> R H36 : forall r : R, r >= 0 -> r15 r = r H35 : forall a : R, a <= 0 -> r15 a = - a r14 : R -> R H34 : forall r : R, r >= 0 -> r14 r = r H33 : forall a : R, a <= 0 -> r14 a = - a r13 : R -> R H32 : forall r : R, r >= 0 -> r13 r = r H31 : forall a : R, a <= 0 -> r13 a = - a r12 : R -> R H30 : forall r : R, r >= 0 -> r12 r = r H29 : forall a : R, a <= 0 -> r12 a = - a r11 : R -> R H28 : forall r : R, r >= 0 -> r11 r = r H27 : forall a : R, a <= 0 -> r11 a = - a r10 : R -> R H26 : forall r : R, r >= 0 -> r10 r = r H25 : forall a : R, a <= 0 -> r10 a = - a r9 : R -> R H24 : forall r : R, r >= 0 -> r9 r = r H23 : forall a : R, a <= 0 -> r9 a = - a r8 : R -> R H22 : forall r : R, r >= 0 -> r8 r = r H21 : forall a : R, a <= 0 -> r8 a = - a r7 : R -> R H20 : forall r : R, r >= 0 -> r7 r = r H19 : forall a : R, a <= 0 -> r7 a = - a r6 : R -> R H17 : forall r : R, r >= 0 -> r6 r = r H16 : forall a : R, a <= 0 -> r6 a = - a r5 : R -> R H18 : forall r : R, r >= 0 -> r5 r = r H14 : forall a : R, a <= 0 -> r5 a = - a r4 : R -> R H15 : forall r : R, r >= 0 -> r4 r = r H11 : forall a : R, a <= 0 -> r4 a = - a r3 : R -> R H12 : forall r : R, r >= 0 -> r3 r = r H7 : forall a : R, a <= 0 -> r3 a = - a r0 : R -> R H9 : forall r : R, r >= 0 -> r0 r = r H8 : forall a : R, a <= 0 -> r0 a = - a r : R -> R H5 : forall r0 : R, r0 >= 0 -> r r0 = r0 H4 : forall a : R, a <= 0 -> r a = - a H6 : forall r : R, r >= 0 -> Rabs r = r H0 : forall a : R, a <= 0 -> Rabs a = - a a : nat -> R r1, r2 : R H : Rabs r1 <= Rabs r2 x : R H2 : is_series (fun n : nat => Rabs (a n * r2 ^ n)) x Unable to unify \"Rabs ?M40929 = - ?M40929\" with \"exists l : R_NormedModule, is_series (fun n : nat => Rabs (a n * r r1 ^ n)) l\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros.", "qsimpl time: 1 use: Rle_ge.", "qsimpl time: 1 use: Rabs_left1,Rle_ge.", "qsimpl time: 1 use: Rabs_left1,Rle_ge.", "qsimpl time: 1 use: Rabs_left1,Rle_ge.", "qsimpl time: 1 use: Rabs_left1,Rle_ge,Rabs_right.", "rewrite <- Rabs_right.", "qsimpl time: 1 use: Rabs_left1,Rle_ge,Rabs_right.", "qsimpl time: 1 use: Rabs_left1,Rle_ge,Rabs_right.", "qsimpl time: 1 use: Rabs_left1,Rle_ge,Rabs_right.", "qsimpl time: 1 use: Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l.", "qsimpl time: 1 use: Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l,Rle_refl.", "qsimpl time: 1 use: Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l,Rle_refl.", "qsimpl time: 1 use: Rmult_le_compat_r,Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l,Rle_refl.", "qsimpl time: 1 use: Rmult_le_compat_r,Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l,Rle_refl.", "qsimpl time: 1 use: Rmult_le_compat_r,Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l,Rle_refl.", "qsimpl time: 1 use: Rmult_le_compat_r,Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l,Rle_refl.", "qsimpl time: 1 use: Rmult_le_compat_r,Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l,Rle_refl.", "qsimpl time: 1 use: Rmult_le_compat_r,Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l,Rle_refl.", "qsimpl time: 1 use: Rmult_le_compat_r,Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l,Rle_refl.", "qsimpl time: 1 use: Rmult_le_compat_r,Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l,Rle_refl.", "qsimpl time: 1 use: Rmult_le_compat_r,Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l,Rle_refl.", "qsimpl time: 1 use: Rmult_le_compat_r,Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l,Rle_refl.", "qsimpl time: 1 use: Rmult_le_compat_r,Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l,Rle_refl.", "qsimpl time: 1 use: Rmult_le_compat_r,Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l,Rle_refl.", "qsimpl time: 1 use: Rmult_le_compat_r,Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l,Rle_refl.", "qsimpl time: 1 use: Rmult_le_compat_r,Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l,Rle_refl.", "qsimpl time: 1 use: Rmult_le_compat_r,Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l,Rle_refl.", "qsimpl time: 1 use: Rmult_le_compat_r,Rle_ge,Rabs,Rabs_left1,Rabs_right,Rmult_le_compat_l,Rle_refl."], "tactic": "apply Rabs_right.", "exn": "In environment H48 : forall r : R, r <= r H47 : forall r r1 r2 : R, 0 <= r -> r1 <= r2 -> r * r1 <= r * r2 r19 : R -> R H44 : forall r : R, r >= 0 -> r19 r = r H43 : forall a : R, a <= 0 -> r19 a = - a H13 : forall r1 r2 : R, r1 <= r2 -> r2 >= r1 H1 : forall r r1 r2 : R, 0 <= r -> r1 <= r2 -> r1 * r <= r2 * r r18 : R -> R H42 : forall r : R, r >= 0 -> r18 r = r H41 : forall a : R, a <= 0 -> r18 a = - a r17 : R -> R H40 : forall r : R, r >= 0 -> r17 r = r H39 : forall a : R, a <= 0 -> r17 a = - a r16 : R -> R H38 : forall r : R, r >= 0 -> r16 r = r H37 : forall a : R, a <= 0 -> r16 a = - a r15 : R -> R H36 : forall r : R, r >= 0 -> r15 r = r H35 : forall a : R, a <= 0 -> r15 a = - a r14 : R -> R H34 : forall r : R, r >= 0 -> r14 r = r H33 : forall a : R, a <= 0 -> r14 a = - a r13 : R -> R H32 : forall r : R, r >= 0 -> r13 r = r H31 : forall a : R, a <= 0 -> r13 a = - a r12 : R -> R H30 : forall r : R, r >= 0 -> r12 r = r H29 : forall a : R, a <= 0 -> r12 a = - a r11 : R -> R H28 : forall r : R, r >= 0 -> r11 r = r H27 : forall a : R, a <= 0 -> r11 a = - a r10 : R -> R H26 : forall r : R, r >= 0 -> r10 r = r H25 : forall a : R, a <= 0 -> r10 a = - a r9 : R -> R H24 : forall r : R, r >= 0 -> r9 r = r H23 : forall a : R, a <= 0 -> r9 a = - a r8 : R -> R H22 : forall r : R, r >= 0 -> r8 r = r H21 : forall a : R, a <= 0 -> r8 a = - a r7 : R -> R H20 : forall r : R, r >= 0 -> r7 r = r H19 : forall a : R, a <= 0 -> r7 a = - a r6 : R -> R H17 : forall r : R, r >= 0 -> r6 r = r H16 : forall a : R, a <= 0 -> r6 a = - a r5 : R -> R H18 : forall r : R, r >= 0 -> r5 r = r H14 : forall a : R, a <= 0 -> r5 a = - a r4 : R -> R H15 : forall r : R, r >= 0 -> r4 r = r H11 : forall a : R, a <= 0 -> r4 a = - a r3 : R -> R H12 : forall r : R, r >= 0 -> r3 r = r H7 : forall a : R, a <= 0 -> r3 a = - a r0 : R -> R H9 : forall r : R, r >= 0 -> r0 r = r H8 : forall a : R, a <= 0 -> r0 a = - a r : R -> R H5 : forall r0 : R, r0 >= 0 -> r r0 = r0 H4 : forall a : R, a <= 0 -> r a = - a H6 : forall r : R, r >= 0 -> Rabs r = r H0 : forall a : R, a <= 0 -> Rabs a = - a a : nat -> R r1, r2 : R H : Rabs r1 <= Rabs r2 x : R H2 : is_series (fun n : nat => Rabs (a n * r2 ^ n)) x Unable to unify \"Rabs ?M44414 = ?M44414\" with \"exists l : R_NormedModule, is_series (fun n : nat => Rabs (a n * r r1 ^ n)) l\".", "type": "cannot_unify", "handled": true}]}, "chat": [{"role": "user", "content": "I will give you a Coq proof state, including both hypotheses and a specific goal and your need to prove it. Your response should be a singular code block of Coq proof starting with \"```coq\n\", ending with \"Qed.```\", without any additional explanation or commentary. Follow to these guidelines:\nIntroduce variables using unique names to avoid any conflicts.\nKeep each command distinct and separated, avoid concatenations like ';' or '[cmd|cmd]'.\nOrganize your proof with bullets like '-', '+', and '*' instead of braces ({, }). Shift to their double symbols like '--' and '++', when necessary.\nEffectively use given premises, follow the syntax and structure demonstrated in the examples provided.\n\nExample 1:\n\nHypotheses:\nn, m: nat\nIHn: m + n = n + m\n\nGoal:\nm + S n = S n + m\n\nProof:\n```coq\nsimpl. rewrite <- IHn. auto.\nQed.```\n\nExample 2:\nHypotheses:\n\nGoal:\nforall n m : nat, m + n = n + m\n\n```coq\nintros n m. induction n.\n- simpl. auto.\n- simpl. rewrite <- IHn. auto.\nQed.```\n\nSolve This Proof State:\n\nHypotheses:\na: nat -> R\nr2: R\nr1: R\n\nGoal:\nRabs r1 <= Rabs r2 -> CV_disk a r2 -> CV_disk a r1\n\nPremises:\nRabs = fun r : R => if Rcase_abs r then - r else r : R -> R Argument scope is [R_scope]\nInductive nat : Set := O : nat | S : nat -> nat For S: Argument scope is [nat_scope]\nCV_disk = fun (a : nat -> R) (r : R) => ex_series (fun n : nat => Rabs (a n * r ^ n)) : (nat -> R) -> R -> Prop Argument scopes are [function_scope R_scope]\nSeries_Rabs : forall a : nat -> R, ex_series (fun n : nat => Rabs (a n)) -> Rabs (Series a) <= Series (fun n : nat => Rabs (a n))\nex_series_Rabs : forall a : nat -> R, ex_series (fun n : nat => Rabs (a n)) -> ex_series a\nRiemannInt_P2 : forall (f : R -> R) (a b : R) (un : nat -> posreal) (vn wn : nat -> StepFun a b), Un_cv (fun x : nat => un x) 0 -> a <= b -> (forall n : nat, (forall t : R, Rmin a b <= t <= Rmax a b -> Rabs (f t - vn n t) <= wn n t) /\\ Rabs (RiemannInt_SF (wn n)) < un n) -> {l : R | Un_cv (fun N : nat => RiemannInt_SF (vn N)) l}\nRabs_left1 : forall a : R, a <= 0 -> Rabs a = - a\nRiemannInt_P11 : forall (f : R -> R) (a b l : R) (un : nat -> posreal) (phi1 phi2 psi1 psi2 : nat -> StepFun a b), Un_cv (fun x : nat => un x) 0 -> (forall n : nat, (forall t : R, Rmin a b <= t <= Rmax a b -> Rabs (f t - phi1 n t) <= psi1 n t) /\\ Rabs (RiemannInt_SF (psi1 n)) < un n) -> (forall n : nat, (forall t : R, Rmin a b <= t <= Rmax a b -> Rabs (f t - phi2 n t) <= psi2 n t) /\\ Rabs (RiemannInt_SF (psi2 n)) < un n) -> Un_cv (fun N : nat => RiemannInt_SF (phi1 N)) l -> Un_cv (fun N : nat => RiemannInt_SF (phi2 N)) l\nRiemannInt_P17 : forall (f : R -> R) (a b : R) (pr1 : Riemann_integrable f a b) (pr2 : Riemann_integrable (fun x : R => Rabs (f x)) a b), a <= b -> Rabs (RiemannInt pr1) <= RiemannInt pr2\nRiemannInt_P3 : forall (f : R -> R) (a b : R) (un : nat -> posreal) (vn wn : nat -> StepFun a b), Un_cv (fun x : nat => un x) 0 -> (forall n : nat, (forall t : R, Rmin a b <= t <= Rmax a b -> Rabs (f t - vn n t) <= wn n t) /\\ Rabs (RiemannInt_SF (wn n)) < un n) -> {l : R | Un_cv (fun N : nat => RiemannInt_SF (vn N)) l}\nRiemann_integrable = fun (f : R -> R) (a b : R) => forall eps : posreal, {phi : StepFun a b & {psi : StepFun a b | (forall t : R, Rmin a b <= t <= Rmax a b -> Rabs (f t - phi t) <= psi t) /\\ Rabs (RiemannInt_SF psi) < eps}} : (R -> R) -> R -> R -> Type Argument scopes are [function_scope R_scope R_scope]\nphi_sequence_prop : forall (un : nat -> posreal) (f : R -> R) (a b : R) (pr : Riemann_integrable f a b) (N : nat), {psi : StepFun a b | (forall t : R, Rmin a b <= t <= Rmax a b -> Rabs (f t - phi_sequence un pr N t) <= psi t) /\\ Rabs (RiemannInt_SF psi) < un N}\nRle_antisym : forall r1 r2 : R, r1 <= r2 -> r2 <= r1 -> r1 = r2\nRle_trans : forall r1 r2 r3 : R, r1 <= r2 -> r2 <= r3 -> r1 <= r3\nRmult_le_compat_l : forall r r1 r2 : R, 0 <= r -> r1 <= r2 -> r * r1 <= r * r2\nRmult_le_compat_r : forall r r1 r2 : R, 0 <= r -> r1 <= r2 -> r1 * r <= r2 * r\nRle_lt_trans : forall r1 r2 r3 : R, r1 <= r2 -> r2 < r3 -> r1 < r3\nRplus_le_compat : forall r1 r2 r3 r4 : R, r1 <= r2 -> r3 <= r4 -> r1 + r3 <= r2 + r4\nStepFun_P34 : forall (a b : R) (f : StepFun a b), a <= b -> Rabs (RiemannInt_SF f) <= RiemannInt_SF {| fe := fun x : R => Rabs (f x); pre := StepFun_P32 f |}\nRge = fun r1 r2 : R => r1 > r2 \\/ r1 = r2 : R -> R -> Prop Argument scopes are [R_scope R_scope]\nRle = fun r1 r2 : R => r1 < r2 \\/ r1 = r2 : R -> R -> Prop Argument scopes are [R_scope R_scope]\nle_epsilon : forall r1 r2 : R, (forall eps : R, 0 < eps -> r1 <= r2 + eps) -> r1 <= r2\nMVT_cor4 : forall (f df : R -> R) (a eps : R), (forall c : R, Rabs (c - a) <= eps -> is_derive f c (df c)) -> forall b : R, Rabs (b - a) <= eps -> exists c : R, f b - f a = df c * (b - a) /\\ Rabs (c - a) <= Rabs (b - a)\nphi_sequence : (nat -> posreal) -> forall (f : R -> R) (a b : R), Riemann_integrable f a b -> nat -> StepFun a b\nRopp_le_contravar : forall r1 r2 : R, r2 <= r1 -> - r1 <= - r2\nRle_ge : forall r1 r2 : R, r1 <= r2 -> r2 >= r1\nRlt_le : forall r1 r2 : R, r1 < r2 -> r1 <= r2\nsum_cv_maj : forall (An : nat -> R) (fn : nat -> R -> R) (x l1 l2 : R), Un_cv (fun n : nat => SP fn n x) l1 -> Un_cv (fun n : nat => sum_f_R0 An n) l2 -> (forall n : nat, Rabs (fn n x) <= An n) -> Rabs l1 <= l2\nRgt = fun r1 r2 : R => r2 < r1 : R -> R -> Prop Argument scopes are [R_scope R_scope]\nRminus = fun r1 r2 : R => r1 + - r2 : R -> R -> R Argument scopes are [R_scope R_scope]\nRdiv = fun r1 r2 : R => r1 * / r2 : R -> R -> R Argument scopes are [R_scope R_scope]\nRnot_le_lt : forall r1 r2 : R, ~ r1 <= r2 -> r2 < r1\nRplus_le_reg_r : forall r r1 r2 : R, r1 + r <= r2 + r -> r1 <= r2"}, {"role": "assistant", "content": "```coq\nintros a r2 r1 Hle Hdisk.\napply Rle_ge in Hle.\napply Rabs_left1 in Hle.\nrewrite Hle.\napply Rle_ge.\napply Rabs_left1.\napply Rabs_right.\nrewrite <- Hdisk.\napply Rle_ge.\napply Rabs_left1.\napply Rabs_right.\napply Rmult_le_compat_l with (r:=1) (r1:=Rabs r1) (r2:=Rabs r2).\napply Rle_refl.\napply Rle_refl.\napply Rmult_le_compat_r with (r:=Rabs r1) (r1:=Rabs r2) (r2:=1).\napply Rle_refl.\napply Rle_refl.\napply Rle_refl.\napply Rle_ge.\napply Rabs_left1.\napply Rabs_right.\napply Rmult_le_compat_l with (r:=1) (r1:=Rabs r2) (r2:=Rabs r1).\napply Rle_refl.\napply Rle_refl.\napply Rmult_le_compat_r with (r:=Rabs r2) (r1:=Rabs r1) (r2:=1).\napply Rle_refl.\napply Rle_refl.\napply Rle_refl.\napply Rle_ge.\napply Rabs_left1.\napply Rabs_right.\nQed."}], "original": "intros a r2 r1 Hle Hdisk. apply Rle_ge in Hle. apply Rabs_left1 in Hle. rewrite Hle. apply Rle_ge. apply Rabs_left1. apply Rabs_right. rewrite <- Hdisk. apply Rle_ge. apply Rabs_left1. apply Rabs_right. apply Rmult_le_compat_l with (r:=1) (r1:=Rabs r1) (r2:=Rabs r2). apply Rle_refl. apply Rle_refl. apply Rmult_le_compat_r with (r:=Rabs r1) (r1:=Rabs r2) (r2:=1). apply Rle_refl. apply Rle_refl. apply Rle_refl. apply Rle_ge. apply Rabs_left1. apply Rabs_right. apply Rmult_le_compat_l with (r:=1) (r1:=Rabs r2) (r2:=Rabs r1). apply Rle_refl. apply Rle_refl. apply Rmult_le_compat_r with (r:=Rabs r2) (r1:=Rabs r1) (r2:=1). apply Rle_refl. apply Rle_refl. apply Rle_refl. apply Rle_ge. apply Rabs_left1. apply Rabs_right.", "succ": false}]