[{"history": {"proof": "shelve.", "repairs": [""], "exceptions": []}, "chat": [{"role": "user", "content": "I will give you a Coq proof state, including both hypotheses and a specific goal and your need to prove it. Your response should be a singular code block of Coq proof starting with \"```coq\n\", ending with \"Qed.```\", without any additional explanation or commentary. Follow to these guidelines:\nIntroduce variables using unique names to avoid any conflicts.\nKeep each command distinct and separated, avoid concatenations like ';' or '[cmd|cmd]'.\nOrganize your proof with bullets like '-', '+', and '*' instead of braces ({, }). Shift to their double symbols like '--' and '++', when necessary.\nEffectively use given premises, follow the syntax and structure demonstrated in the examples provided.\n\nExample 1:\n\nHypotheses:\nn, m: nat\nIHn: m + n = n + m\n\nGoal:\nm + S n = S n + m\n\nProof:\n```coq\nsimpl. rewrite <- IHn. auto.\nQed.```\n\nExample 2:\nHypotheses:\n\nGoal:\nforall n m : nat, m + n = n + m\n\n```coq\nintros n m. induction n.\n- simpl. auto.\n- simpl. rewrite <- IHn. auto.\nQed.```\n\nSolve This Proof State:\n\nHypotheses:\nb: nat -> R\na: nat -> R\nlb: R\nla: R\nx: R\n\nGoal:\nis_pseries a x la -> is_pseries b x lb -> Rbar_lt (Rabs x) (CV_radius a) -> Rbar_lt (Rabs x) (CV_radius b) -> is_pseries (PS_mult a b) x (la * lb)\n\nPremises:\nCV_radius = fun a : nat -> R => Lub_Rbar (CV_disk a) : (nat -> R) -> Rbar Argument scope is [function_scope]\nInductive nat : Set := O : nat | S : nat -> nat For S: Argument scope is [nat_scope]\nPS_mult = fun (a b : nat -> R) (n : nat) => sum_f_R0 (fun k : nat => a k * b (n - k)%nat) n : (nat -> R) -> (nat -> R) -> nat -> R Argument scopes are [function_scope function_scope nat_scope]\nRbar_lt = fun x y : Rbar => match x with | Finite x0 => match y with | Finite y0 => x0 < y0 | p_infty => True | m_infty => False end | p_infty => False | m_infty => match y with | m_infty => False | _ => True end end : Rbar -> Rbar -> Prop\nis_pseries = fun (K : AbsRing) (V : NormedModule K) (a : nat -> V) (x : K) (l : V) => is_series (fun k : nat => scal (pow_n x k) (a k)) l : forall (K : AbsRing) (V : NormedModule K), (nat -> V) -> K -> V -> Prop Arguments K, V are implicit and maximally inserted Argument scopes are [_ _ function_scope _ _]\nRabs = fun r : R => if Rcase_abs r then - r else r : R -> R Argument scope is [R_scope]\nCV_radius_inside : forall (a : nat -> R) (x : R), Rbar_lt (Rabs x) (CV_radius a) -> ex_pseries a x\nCV_disk_outside : forall (a : nat -> R) (x : R), Rbar_lt (CV_radius a) (Rabs x) -> ~ is_lim_seq (fun n : nat => a n * x ^ n) 0\nCV_disk_inside : forall (a : nat -> R) (x : R), Rbar_lt (Rabs x) (CV_radius a) -> ex_series (fun n : nat => Rabs (a n * x ^ n))\nCV_radius_Reals_2 : forall (a : nat -> R) (x : R), Rbar_lt (Rabs x) (CV_radius a) -> exists r : posreal, CVU (fun (n : nat) (x0 : R) => sum_f_R0 (fun k : nat => a k * x0 ^ k) n) (PSeries a) x r\nPSeries_correct : forall (a : nat -> R) (x : R), ex_pseries a x -> is_pseries a x (PSeries a x)\nRbar_lt_locally : forall (a b : Rbar) (x : R), Rbar_lt a x -> Rbar_lt x b -> exists delta : posreal, forall y : R, Rabs (y - x) < delta -> Rbar_lt a y /\\ Rbar_lt y b\nCV_radius_Reals_0 : forall (a : nat -> R) (r : posreal), Rbar_lt r (CV_radius a) -> CVN_r (fun (n : nat) (x : R) => a n * x ^ n) r\nincr_function : forall (f : R -> R) (a b : Rbar) (df : R -> R), (forall x : R, Rbar_lt a x -> Rbar_lt x b -> is_derive f x (df x)) -> (forall x : R, Rbar_lt a x -> Rbar_lt x b -> df x > 0) -> forall x y : R, Rbar_lt a x -> x < y -> Rbar_lt y b -> f x < f y\nis_pseries_plus : forall (a0 b0 : nat -> ?V) (x0 : ?K) (la0 lb0 : ?V), is_pseries a0 x0 la0 -> is_pseries b0 x0 lb0 -> is_pseries (PS_plus a0 b0) x0 (plus la0 lb0) where ?K : [a : nat -> R b : nat -> R x : R la : R lb : R |- AbsRing] ?V : [a : nat -> R b : nat -> R x : R la : R lb : R |- NormedModule ?K]\nis_pseries_unique : forall (a : nat -> R) (x l : R), is_pseries a x l -> PSeries a x = l\nis_pseries_incr_1 : forall (a0 : nat -> ?V) (x0 : ?K) (l : ?V), is_pseries a0 x0 l -> is_pseries (PS_incr_1 a0) x0 (scal x0 l) where ?K : [a : nat -> R b : nat -> R x : R la : R lb : R |- AbsRing] ?V : [a : nat -> R b : nat -> R x : R la : R lb : R |- NormedModule ?K]\nis_pseries_ext : forall (a0 b0 : nat -> ?V) (x0 : ?K) (l : ?V), (forall n : nat, a0 n = b0 n) -> is_pseries a0 x0 l -> is_pseries b0 x0 l where ?K : [a : nat -> R b : nat -> R x : R la : R lb : R |- AbsRing] ?V : [a : nat -> R b : nat -> R x : R la : R lb : R |- NormedModule ?K]\nis_pseries_incr_n : forall (a0 : nat -> ?V) (n : nat) (x0 : ?K) (l : ?V), is_pseries a0 x0 l -> is_pseries (PS_incr_n a0 n) x0 (scal (pow_n x0 n) l) where ?K : [a : nat -> R b : nat -> R x : R la : R lb : R |- AbsRing] ?V : [a : nat -> R b : nat -> R x : R la : R lb : R |- NormedModule ?K]\nis_pseries_Reals : forall (a : nat -> R) (x l : R), is_pseries a x l < -> Pser a x l\nis_pseries_decr_1 : forall (a0 : nat -> ?V) (x0 y : ?K) (l : ?V), mult y x0 = one -> is_pseries a0 x0 l -> is_pseries (PS_decr_1 a0) x0 (scal y (plus l (opp (a0 0%nat)))) where ?K : [a : nat -> R b : nat -> R x : R la : R lb : R |- AbsRing] ?V : [a : nat -> R b : nat -> R x : R la : R lb : R |- NormedModule ?K]\nis_pseries_scal : forall (c : ?K) (a0 : nat -> ?V) (x0 : ?K) (l : ?V), mult x0 c = mult c x0 -> is_pseries a0 x0 l -> is_pseries (PS_scal c a0) x0 (scal c l) where ?K : [a : nat -> R b : nat -> R x : R la : R lb : R |- AbsRing] ?V : [a : nat -> R b : nat -> R x : R la : R lb : R |- NormedModule ?K]\nis_pseries_R : forall (a : nat -> R) (x l : R), is_pseries a x l < -> is_series (fun n : nat => a n * x ^ n) l\nMVT_gen : forall (f : R -> R) (a b : R) (df : R -> R), let a0 := Rmin a b in let b0 := Rmax a b in (forall x : R, a0 < x < b0 -> is_derive f x (df x)) -> (forall x : R, a0 <= x <= b0 -> continuity_pt f x) -> exists c : R, a0 <= c <= b0 /\\ f b - f a = df c * (b - a)\nis_pseries_0 : forall a0 : nat -> ?V, is_pseries a0 zero (a0 0%nat) where ?K : [a : nat -> R b : nat -> R x : R la : R lb : R |- AbsRing] ?V : [a : nat -> R b : nat -> R x : R la : R lb : R |- NormedModule ?K]\nis_pseries_decr_n : forall (a0 : nat -> ?V) (n : nat) (x0 y : ?K) (l : ?V), mult y x0 = one -> (0 < n)%nat -> is_pseries a0 x0 l -> is_pseries (PS_decr_n a0 n) x0 (scal (pow_n y n) (plus l (opp (sum_n (fun k : nat => scal (pow_n x0 k) (a0 k)) (n - 1))))) where ?K : [a : nat -> R b : nat -> R x : R la : R lb : R |- AbsRing] ?V : [a : nat -> R b : nat -> R x : R la : R lb : R |- NormedModule ?K]\nCV_radius_bounded : forall a : nat -> R, is_lub_Rbar (fun r : R => exists M : R, forall n : nat, Rabs (a n * r ^ n) <= M) (CV_radius a)\nRbar_lt_le_trans : forall x y z : Rbar, Rbar_lt x y -> Rbar_le y z -> Rbar_lt x z\nRbar_le_lt_trans : forall x y z : Rbar, Rbar_le x y -> Rbar_lt y z -> Rbar_lt x z\nis_lub_Rbar = fun (E : R -> Prop) (l : Rbar) => is_ub_Rbar E l /\\ (forall b : Rbar, is_ub_Rbar E b -> Rbar_le l b) : (R -> Prop) -> Rbar -> Prop Argument scopes are [function_scope _]\nfilterlim_comp_2 : forall (f : ?T -> ?U) (g : ?T -> ?V) (h : ?U -> ?V -> ?W), filterlim f ?F ?G -> filterlim g ?F ?H -> filterlim (fun x0 : ?U * ?V => h (fst x0) (snd x0)) (filter_prod ?G ?H) ?I -> filterlim (fun x : ?T => h (f x) (g x)) ?F ?I where ?T : [a : nat -> R b : nat -> R x : R la : R lb : R |- Type] ?U : [a : nat -> R b : nat -> R x : R la : R lb : R |- Type] ?V : [a : nat -> R b : nat -> R x : R la : R lb : R |- Type] ?W : [a : nat ->...-> R x : R la : R lb : R |- Filter ?F]\nRabs_Rabsolu : forall x : R, Rabs (Rabs x) = Rabs x\nSeries_correct : forall a : nat -> R, ex_series a -> is_series a (Series a)\nfilterlim_ext : forall f g : ?T -> ?U, (forall x0 : ?T, f x0 = g x0) -> filterlim f ?F ?G -> filterlim g ?F ?G where ?T : [a : nat -> R b : nat -> R x : R la : R lb : R |- Type] ?U : [a : nat -> R b : nat -> R x : R la : R lb : R |- Type] ?F : [a : nat -> R b : nat -> R x : R la : R lb : R |- (?T -> Prop) -> Prop] ?G : [a : nat -> R b : nat -> R x : R la : R lb : R |- (?U -> Prop) -> Prop] ?FF : [a : nat -> R b : nat -> R x : R la : R lb : R |- Filter ?F]\nfilterlim_ext_loc : forall f g : ?T -> ?U, ?F (fun x0 : ?T => f x0 = g x0) -> filterlim f ?F ?G -> filterlim g ?F ?G where ?T : [a : nat -> R b : nat -> R x : R la : R lb : R |- Type] ?U : [a : nat -> R b : nat -> R x : R la : R lb : R |- Type] ?F : [a : nat -> R b : nat -> R x : R la : R lb : R |- (?T -> Prop) -> Prop] ?G : [a : nat -> R b : nat -> R x : R la : R lb : R |- (?U -> Prop) -> Prop] ?FF : [a : nat -> R b : nat -> R x : R la : R lb : R |- Filter ?F]\nfilterlim_const : forall a0 : ?U, filterlim (fun _ : ?T => a0) ?F (locally a0) where ?T : [a : nat -> R b : nat -> R x : R la : R lb : R |- Type] ?U : [a : nat -> R b : nat -> R x : R la : R lb : R |- UniformSpace] ?F : [a : nat -> R b : nat -> R x : R la : R lb : R |- (?T -> Prop) -> Prop] ?FF : [a : nat -> R b : nat -> R x : R la : R lb : R |- Filter ?F]"}, {"role": "assistant", "content": "```coq\n```"}], "original": "", "succ": false}]