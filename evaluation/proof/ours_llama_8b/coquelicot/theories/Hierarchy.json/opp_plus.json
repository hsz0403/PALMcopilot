[{"history": {"proof": "shelve.", "repairs": [""], "exceptions": []}, "chat": [{"role": "user", "content": "I will give you a Coq proof state, including both hypotheses and a specific goal and your need to prove it. Your response should be a singular code block of Coq proof starting with \"```coq\n\", ending with \"Qed.```\", without any additional explanation or commentary. Follow to these guidelines:\nIntroduce variables using unique names to avoid any conflicts.\nKeep each command distinct and separated, avoid concatenations like ';' or '[cmd|cmd]'.\nOrganize your proof with bullets like '-', '+', and '*' instead of braces ({, }). Shift to their double symbols like '--' and '++', when necessary.\nEffectively use given premises, follow the syntax and structure demonstrated in the examples provided.\n\nExample 1:\n\nHypotheses:\nn, m: nat\nIHn: m + n = n + m\n\nGoal:\nm + S n = S n + m\n\nProof:\n```coq\nsimpl. rewrite <- IHn. auto.\nQed.```\n\nExample 2:\nHypotheses:\n\nGoal:\nforall n m : nat, m + n = n + m\n\n```coq\nintros n m. induction n.\n- simpl. auto.\n- simpl. rewrite <- IHn. auto.\nQed.```\n\nSolve This Proof State:\n\nHypotheses:\nG: AbelianGroup\n\nGoal:\nforall x y : G, opp (plus x y) = plus (opp x) (opp y)\n\nPremises:\nplus = AbelianGroup.plus G (AbelianGroup.class G) : G -> G -> G\nopp = AbelianGroup.opp G (AbelianGroup.class G) : G -> G\nRecord mixin_of (G : Type) : Type := Mixin { plus : G -> G -> G; opp : G -> G; zero : G; ax1 : forall x y : G, plus x y = plus y x; ax2 : forall x y z : G, plus x (plus y z) = plus (plus x y) z; ax3 : forall x : G, plus x zero = x; ax4 : forall x : G, plus x (opp x) = zero } For mixin_of: Argument scope is [type_scope] For Mixin: Argument scopes are [type_scope function_scope function_scope _ function_scope function_scope function_scope function_scope]\nplus_assoc : forall x y z : G, plus x (plus y z) = plus (plus x y) z\nopp_opp : forall x : G, opp (opp x) = x\nplus_opp_r : forall x : G, plus x (opp x) = zero\nplus_opp_l : forall x : G, plus (opp x) x = zero\nminus = fun x y : G => plus x (opp y) : G -> G -> G\nopp_zero = eq_ind (plus (opp zero) zero) (fun s : G => s = zero) (plus_opp_l zero) (opp zero) (plus_zero_r (opp zero)) : opp zero = zero\nNat.min_monotone : forall f : nat -> nat, Morphisms.Proper (Morphisms.respectful le le) f -> forall x y : nat, Nat.min (f x) (f y) = f (Nat.min x y)\nNat.min_mono : forall f : nat -> nat, Morphisms.Proper (Morphisms.respectful eq eq) f -> Morphisms.Proper (Morphisms.respectful le le) f -> forall x y : nat, Nat.min (f x) (f y) = f (Nat.min x y)\nplus_comm : forall x y : G, plus x y = plus y x\nplus_reg_l : forall r x y : G, plus r x = plus r y -> x = y\nplus_reg_r : forall r x y : G, plus x r = plus y r -> x = y\nover : (forall (T : Type) (x y : T), 'Under[ x ] = Over_eq x y) * (forall x y : Prop, 'Under[ x ] = Over_iff x y)\nplus_zero_r : forall x : G, plus x zero = x\nplus_zero_l : forall x : G, plus zero x = x\nAbelianGroup.ax2 : forall (G : Type) (m : AbelianGroup.mixin_of G) (x y z : G), AbelianGroup.plus G m x (AbelianGroup.plus G m y z) = AbelianGroup.plus G m (AbelianGroup.plus G m x y) z\nPeanoNat.Nat.mod_wd_obligation_1 = fun (x y : nat) (H : x = y) (x0 y0 : nat) (H0 : x0 = y0) => eq_ind_r (fun x1 : nat => x mod x1 = y mod y0) (eq_ind_r (fun x1 : nat => x1 mod y0 = y mod y0) eq_refl H) H0 : Morphisms.respectful eq (Morphisms.respectful eq eq) Nat.modulo Nat.modulo\nminus_eq_zero : forall x : G, minus x x = zero\nminus_zero_r : forall x : G, minus x zero = x\nByte.of_nat_via_N : forall x : nat, Byte.of_nat x = Byte.of_N (N.of_nat x)\nRecord Metric_Space : Type := Build_Metric_Space { Base : Type; dist : Base -> Base -> R; dist_pos : forall x y : Base, dist x y >= 0; dist_sym : forall x y : Base, dist x y = dist y x; dist_refl : forall x y : Base, dist x y = 0 < -> x = y; dist_tri : forall x y z : Base, dist x y <= dist x z + dist z y } For Build_Metric_Space: Argument scopes are [type_scope function_scope function_scope function_scope function_scope function_scope]\nByte.byte_dec_lb : forall x y : Byte.byte, x = y -> Byte.eqb x y = true\nByte.eqb_false : forall x y : Byte.byte, Byte.eqb x y = false -> x <> y\nover_iff : forall x y : Prop, 'Under[ x ] = Over_iff x y\nPos.min_l : forall x y : positive, (x <= y)%positive -> Pos.min x y = x\nByte.to_of_nat_iff : forall (x : nat) (y : Byte.byte), Byte.of_nat x = Some y < -> Byte.to_nat y = x\nRinv_pow : forall (x : R) (n : nat), x <> 0 -> / x ^ n = (/ x) ^ n\npowerRZ_neg : forall (x : R) (alpha : Z), x <> R0 -> powerRZ x (- alpha) = powerRZ (/ x) alpha\nover_eq : forall (T : Type) (x y : T), 'Under[ x ] = Over_eq x y\nAbelianGroup.ax1 : forall (G : Type) (m : AbelianGroup.mixin_of G) (x y : G), AbelianGroup.plus G m x y = AbelianGroup.plus G m y x"}, {"role": "assistant", "content": "```coq\n```"}], "original": "", "succ": false}]