[{"history": {"proof": "shelve.", "repairs": [""], "exceptions": []}, "chat": [{"role": "user", "content": "I will give you a Coq proof state, including both hypotheses and a specific goal and your need to prove it. Your response should be a singular code block of Coq proof starting with \"```coq\n\", ending with \"Qed.```\", without any additional explanation or commentary. Follow to these guidelines:\nIntroduce variables using unique names to avoid any conflicts.\nKeep each command distinct and separated, avoid concatenations like ';' or '[cmd|cmd]'.\nOrganize your proof with bullets like '-', '+', and '*' instead of braces ({, }). Shift to their double symbols like '--' and '++', when necessary.\nEffectively use given premises, follow the syntax and structure demonstrated in the examples provided.\n\nExample 1:\n\nHypotheses:\nn, m: nat\nIHn: m + n = n + m\n\nGoal:\nm + S n = S n + m\n\nProof:\n```coq\nsimpl. rewrite <- IHn. auto.\nQed.```\n\nExample 2:\nHypotheses:\n\nGoal:\nforall n m : nat, m + n = n + m\n\n```coq\nintros n m. induction n.\n- simpl. auto.\n- simpl. rewrite <- IHn. auto.\nQed.```\n\nSolve This Proof State:\n\nHypotheses:\nK: Ring\nV: ModuleSpace K\n\nGoal:\nforall u : V, scal zero u = zero\n\nPremises:\nscal = ModuleSpace.scal K (AbelianGroup.Pack V (ModuleSpace.class K V) V) (ModuleSpace.class K V) : K -> V -> V\nzero = fun G : AbelianGroup => AbelianGroup.zero G (AbelianGroup.class G) : forall G : AbelianGroup, G Argument G is implicit and maximally inserted\nNotation ModuleSpace := ModuleSpace.type\nscal_one : forall u : V, scal one u = u\nModuleSpace.Mixin : forall (K : Ring) (V : AbelianGroup) (scal : K -> V -> V), (forall (x y : K) (u : V), scal x (scal y u) = scal (mult x y) u) -> (forall u : V, scal one u = u) -> (forall (x : K) (u v : V), scal x (plus u v) = plus (scal x u) (scal x v)) -> (forall (x y : K) (u : V), scal (plus x y) u = plus (scal x u) (scal y u)) -> ModuleSpace.mixin_of K V\nRecord mixin_of (K : Ring) (V : AbelianGroup) : Type := Mixin { scal : K -> V -> V; ax1 : forall (x y : K) (u : V), scal x (scal y u) = scal (mult x y) u; ax2 : forall u : V, scal one u = u; ax3 : forall (x : K) (u v : V), scal x (plus u v) = plus (scal x u) (scal x v); ax4 : forall (x y : K) (u : V), scal (plus x y) u = plus (scal x u) (scal y u) } For Mixin: Argument scopes are [_ _ function_scope function_scope function_scope function_scope function_scope]\nscal_assoc : forall (x y : K) (u : V), scal x (scal y u) = scal (mult x y) u\nscal_distr_r : forall (x y : K) (u : V), scal (plus x y) u = plus (scal x u) (scal y u)\nscal_distr_l : forall (x : K) (u v : V), scal x (plus u v) = plus (scal x u) (scal x v)\nscal_zero_r : forall x : K, scal x zero = zero\nModuleSpace.ax2 : forall (K : Ring) (V : AbelianGroup) (m : ModuleSpace.mixin_of K V) (u : V), ModuleSpace.scal K V m one u = u\nmult_zero_r : forall x : ?K, mult x zero = zero where ?K : [K : Ring V : ModuleSpace K |- Ring]\nmult_zero_l : forall x : ?K, mult zero x = zero where ?K : [K : Ring V : ModuleSpace K |- Ring]\nsum_n_mult_l : forall (a : ?K) (u : nat -> ?K) (n : nat), sum_n (fun k : nat => mult a (u k)) n = mult a (sum_n u n) where ?K : [K : Ring V : ModuleSpace K |- Ring]\nsum_n_mult_r : forall (a : ?K) (u : nat -> ?K) (n : nat), sum_n (fun k : nat => mult (u k) a) n = mult (sum_n u n) a where ?K : [K : Ring V : ModuleSpace K |- Ring]\nInit.Nat.pred = fun n : nat => match n with | 0%nat => n | S u => u end : nat -> nat Argument scope is [nat_scope]\nsum_n_m_mult_r : forall (a : ?K) (u : nat -> ?K) (n m : nat), sum_n_m (fun k : nat => mult (u k) a) n m = mult (sum_n_m u n m) a where ?K : [K : Ring V : ModuleSpace K |- Ring]\nsum_n_m_mult_l : forall (a : ?K) (u : nat -> ?K) (n m : nat), sum_n_m (fun k : nat => mult a (u k)) n m = mult a (sum_n_m u n m) where ?K : [K : Ring V : ModuleSpace K |- Ring]\nabs_eq_zero : forall x : ?K, abs x = 0 -> x = zero where ?K : [K : Ring V : ModuleSpace K |- AbsRing]\nminus_eq_zero : forall x : ?G, minus x x = zero where ?G : [K : Ring V : ModuleSpace K |- AbelianGroup]\nminus_zero_r : forall x : ?G, minus x zero = x where ?G : [K : Ring V : ModuleSpace K |- AbelianGroup]\nplus_zero_l : forall x : ?G, plus zero x = x where ?G : [K : Ring V : ModuleSpace K |- AbelianGroup]\nplus_zero_r : forall x : ?G, plus x zero = x where ?G : [K : Ring V : ModuleSpace K |- AbelianGroup]\nplus_opp_r : forall x : ?G, plus x (opp x) = zero where ?G : [K : Ring V : ModuleSpace K |- AbelianGroup]\nplus_opp_l : forall x : ?G, plus (opp x) x = zero where ?G : [K : Ring V : ModuleSpace K |- AbelianGroup]\nModuleSpace.ax1 : forall (K : Ring) (V : AbelianGroup) (m : ModuleSpace.mixin_of K V) (x y : K) (u : V), ModuleSpace.scal K V m x (ModuleSpace.scal K V m y u) = ModuleSpace.scal K V m (mult x y) u\nModuleSpace.ax3 : forall (K : Ring) (V : AbelianGroup) (m : ModuleSpace.mixin_of K V) (x : K) (u v : V), ModuleSpace.scal K V m x (plus u v) = plus (ModuleSpace.scal K V m x u) (ModuleSpace.scal K V m x v)\nModuleSpace.ax4 : forall (K : Ring) (V : AbelianGroup) (m : ModuleSpace.mixin_of K V) (x y : K) (u : V), ModuleSpace.scal K V m (plus x y) u = plus (ModuleSpace.scal K V m x u) (ModuleSpace.scal K V m y u)\nsum_n_m_const_zero : forall n m : nat, sum_n_m (fun _ : nat => zero) n m = zero where ?G : [K : Ring V : ModuleSpace K |- AbelianGroup]\nsum_n_m_zero : forall (a : nat -> ?G) (n m : nat), (m < n)%nat -> sum_n_m a n m = zero where ?G : [K : Ring V : ModuleSpace K |- AbelianGroup]\nAbsRing.ax1 : forall (K : Ring) (m : AbsRing.mixin_of K), AbsRing.abs K m zero = 0\nAbsRing.ax5 : forall (K : Ring) (m : AbsRing.mixin_of K) (x : K), AbsRing.abs K m x = 0 -> x = zero\nabs_zero = fun K : AbsRing => AbsRing.ax1 (Ring.Pack K (AbsRing.class K) K) (AbsRing.class K) : forall K : AbsRing, abs zero = 0 Argument K is implicit and maximally inserted"}, {"role": "assistant", "content": "```coq\n```"}], "original": "", "succ": false}]