[{"history": {"proof": "shelve.", "repairs": [""], "exceptions": []}, "chat": [{"role": "user", "content": "I will give you a Coq proof state, including both hypotheses and a specific goal and your need to prove it. Your response should be a singular code block of Coq proof starting with \"```coq\n\", ending with \"Qed.```\", without any additional explanation or commentary. Follow to these guidelines:\nIntroduce variables using unique names to avoid any conflicts.\nKeep each command distinct and separated, avoid concatenations like ';' or '[cmd|cmd]'.\nOrganize your proof with bullets like '-', '+', and '*' instead of braces ({, }). Shift to their double symbols like '--' and '++', when necessary.\nEffectively use given premises, follow the syntax and structure demonstrated in the examples provided.\n\nExample 1:\n\nHypotheses:\nn, m: nat\nIHn: m + n = n + m\n\nGoal:\nm + S n = S n + m\n\nProof:\n```coq\nsimpl. rewrite <- IHn. auto.\nQed.```\n\nExample 2:\nHypotheses:\n\nGoal:\nforall n m : nat, m + n = n + m\n\n```coq\nintros n m. induction n.\n- simpl. auto.\n- simpl. rewrite <- IHn. auto.\nQed.```\n\nSolve This Proof State:\n\nHypotheses:\nK: Ring\nV: ModuleSpace K\n\nGoal:\nforall (x : K) (u : V), scal x (opp u) = opp (scal x u)\n\nPremises:\nscal = ModuleSpace.scal K (AbelianGroup.Pack V (ModuleSpace.class K V) V) (ModuleSpace.class K V) : K -> V -> V\nNotation ModuleSpace := ModuleSpace.type\nopp = fun G : AbelianGroup => AbelianGroup.opp G (AbelianGroup.class G) : forall G : AbelianGroup, G -> G Argument G is implicit and maximally inserted\nscal_opp_l : forall (x : K) (u : V), scal (opp x) u = opp (scal x u)\nModuleSpace.Mixin : forall (K : Ring) (V : AbelianGroup) (scal : K -> V -> V), (forall (x y : K) (u : V), scal x (scal y u) = scal (mult x y) u) -> (forall u : V, scal one u = u) -> (forall (x : K) (u v : V), scal x (plus u v) = plus (scal x u) (scal x v)) -> (forall (x y : K) (u : V), scal (plus x y) u = plus (scal x u) (scal y u)) -> ModuleSpace.mixin_of K V\nscal_distr_r : forall (x y : K) (u : V), scal (plus x y) u = plus (scal x u) (scal y u)\nscal_assoc : forall (x y : K) (u : V), scal x (scal y u) = scal (mult x y) u\nRecord mixin_of (K : Ring) (V : AbelianGroup) : Type := Mixin { scal : K -> V -> V; ax1 : forall (x y : K) (u : V), scal x (scal y u) = scal (mult x y) u; ax2 : forall u : V, scal one u = u; ax3 : forall (x : K) (u v : V), scal x (plus u v) = plus (scal x u) (scal x v); ax4 : forall (x y : K) (u : V), scal (plus x y) u = plus (scal x u) (scal y u) } For Mixin: Argument scopes are [_ _ function_scope function_scope function_scope function_scope function_scope]\nscal_distr_l : forall (x : K) (u v : V), scal x (plus u v) = plus (scal x u) (scal x v)\nModuleSpace.ax4 : forall (K : Ring) (V : AbelianGroup) (m : ModuleSpace.mixin_of K V) (x y : K) (u : V), ModuleSpace.scal K V m (plus x y) u = plus (ModuleSpace.scal K V m x u) (ModuleSpace.scal K V m y u)\nModuleSpace.ax1 : forall (K : Ring) (V : AbelianGroup) (m : ModuleSpace.mixin_of K V) (x y : K) (u : V), ModuleSpace.scal K V m x (ModuleSpace.scal K V m y u) = ModuleSpace.scal K V m (mult x y) u\nModuleSpace.ax3 : forall (K : Ring) (V : AbelianGroup) (m : ModuleSpace.mixin_of K V) (x : K) (u v : V), ModuleSpace.scal K V m x (plus u v) = plus (ModuleSpace.scal K V m x u) (ModuleSpace.scal K V m x v)\nopp_opp : forall x : ?G, opp (opp x) = x where ?G : [K : Ring V : ModuleSpace K |- AbelianGroup]\nopp_mult_m1 : forall x : ?K, opp x = mult (opp one) x where ?K : [K : Ring V : ModuleSpace K |- Ring]\nopp_plus : forall x y : ?G, opp (plus x y) = plus (opp x) (opp y) where ?G : [K : Ring V : ModuleSpace K |- AbelianGroup]\nopp_mult_r : forall x y : ?K, opp (mult x y) = mult x (opp y) where ?K : [K : Ring V : ModuleSpace K |- Ring]\nopp_mult_l : forall x y : ?K, opp (mult x y) = mult (opp x) y where ?K : [K : Ring V : ModuleSpace K |- Ring]\nopp_minus : forall x y : ?G, opp (minus x y) = minus y x where ?G : [K : Ring V : ModuleSpace K |- AbelianGroup]\nabs_opp : forall x : ?K, abs (opp x) = abs x where ?K : [K : Ring V : ModuleSpace K |- AbsRing]\nplus_opp_l : forall x : ?G, plus (opp x) x = zero where ?G : [K : Ring V : ModuleSpace K |- AbelianGroup]\nplus_opp_r : forall x : ?G, plus x (opp x) = zero where ?G : [K : Ring V : ModuleSpace K |- AbelianGroup]\nRing.ax2 : forall (K : AbelianGroup) (m : Ring.mixin_of K) (x : K), Ring.mult K m x (Ring.one K m) = x\nRing.ax3 : forall (K : AbelianGroup) (m : Ring.mixin_of K) (x : K), Ring.mult K m (Ring.one K m) x = x\nAbsRing.ax5 : forall (K : Ring) (m : AbsRing.mixin_of K) (x : K), AbsRing.abs K m x = 0 -> x = zero\nscal_zero_r : forall x : K, scal x zero = zero\nModuleSpace.ax2 : forall (K : Ring) (V : AbelianGroup) (m : ModuleSpace.mixin_of K V) (u : V), ModuleSpace.scal K V m one u = u\nRing.ax5 : forall (K : AbelianGroup) (m : Ring.mixin_of K) (x y z : K), Ring.mult K m x (plus y z) = plus (Ring.mult K m x y) (Ring.mult K m x z)\npow_n_comm_1 : forall (x : ?K) (n : nat), mult (pow_n x n) x = mult x (pow_n x n) where ?K : [K : Ring V : ModuleSpace K |- Ring]\nRing.ax1 : forall (K : AbelianGroup) (m : Ring.mixin_of K) (x y z : K), Ring.mult K m x (Ring.mult K m y z) = Ring.mult K m (Ring.mult K m x y) z\nRing.ax4 : forall (K : AbelianGroup) (m : Ring.mixin_of K) (x y z : K), Ring.mult K m (plus x y) z = plus (Ring.mult K m x z) (Ring.mult K m y z)\nabs_opp_one = fun K : AbsRing => AbsRing.ax2 K (AbsRing.class K) : forall K : AbsRing, abs (opp one) = 1 Argument K is implicit and maximally inserted\nopp_zero = fun G : AbelianGroup => eq_ind (plus (opp zero) zero) (fun s : G => s = zero) (plus_opp_l zero) (opp zero) (plus_zero_r (opp zero)) : forall G : AbelianGroup, opp zero = zero Argument G is implicit and maximally inserted\npow_n_comm : forall (x : ?K) (n m : nat), mult (pow_n x n) (pow_n x m) = mult (pow_n x m) (pow_n x n) where ?K : [K : Ring V : ModuleSpace K |- Ring]"}, {"role": "assistant", "content": "```coq\n```"}], "original": "", "succ": false}]