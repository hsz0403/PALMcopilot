[{"history": {"proof": "shelve.", "repairs": [""], "exceptions": []}, "chat": [{"role": "user", "content": "I will give you a Coq proof state, including both hypotheses and a specific goal and your need to prove it. Your response should be a singular code block of Coq proof starting with \"```coq\n\", ending with \"Qed.```\", without any additional explanation or commentary. Follow to these guidelines:\nIntroduce variables using unique names to avoid any conflicts.\nKeep each command distinct and separated, avoid concatenations like ';' or '[cmd|cmd]'.\nOrganize your proof with bullets like '-', '+', and '*' instead of braces ({, }). Shift to their double symbols like '--' and '++', when necessary.\nEffectively use given premises, follow the syntax and structure demonstrated in the examples provided.\n\nExample 1:\n\nHypotheses:\nn, m: nat\nIHn: m + n = n + m\n\nGoal:\nm + S n = S n + m\n\nProof:\n```coq\nsimpl. rewrite <- IHn. auto.\nQed.```\n\nExample 2:\nHypotheses:\n\nGoal:\nforall n m : nat, m + n = n + m\n\n```coq\nintros n m. induction n.\n- simpl. auto.\n- simpl. rewrite <- IHn. auto.\nQed.```\n\nSolve This Proof State:\n\nHypotheses:\nK: Ring\n\nGoal:\nforall x : K, mult x one = x\n\nPremises:\none = Ring.one (AbelianGroup.Pack K (Ring.class K) K) (Ring.class K) : K\nmult = Ring.mult (AbelianGroup.Pack K (Ring.class K) K) (Ring.class K) : K -> K -> K\nmult_assoc : forall x y z : K, mult x (mult y z) = mult (mult x y) z\niter_comp : forall (op : ?T -> ?T -> ?T) (x0 : ?T) (l : list ?I) (f : ?I -> ?T) (g : ?I -> ?I), iter op x0 l (fun x : ?I => f (g x)) = iter op x0 (seq.map g l) f where ?I : [K : Ring |- Type] ?T : [K : Ring |- Type]\nByte.byte_dec_lb : forall x y : Byte.byte, x = y -> Byte.eqb x y = true\nRabs_Ropp : forall x : R, Rabs (- x) = Rabs x\nPos.min_l : forall x y : positive, (x <= y)%positive -> Pos.min x y = x\nRecord mixin_of (G : Type) : Type := Mixin { plus : G -> G -> G; opp : G -> G; zero : G; ax1 : forall x y : G, plus x y = plus y x; ax2 : forall x y z : G, plus x (plus y z) = plus (plus x y) z; ax3 : forall x : G, plus x zero = x; ax4 : forall x : G, plus x (opp x) = zero } For mixin_of: Argument scope is [type_scope] For Mixin: Argument scopes are [type_scope function_scope function_scope _ function_scope function_scope function_scope function_scope]\nOmegaLemmas.OMEGA8 : forall x y : Z, (0 <= x)%Z -> (0 <= y)%Z -> x = (- y)%Z -> x = 0%Z\nRing.sort = fun t : Ring => let (sort, _, _) := t in sort : Ring -> Type Ring.sort is a coercion\nFSetPositive.PositiveSet.singleton_1 : forall x y : FSetPositive.PositiveSet.elt, FSetPositive.PositiveSet.In y (FSetPositive.PositiveSet.singleton x) -> x = y\nZMicromega.Vars.Facts.MP.Dec.F.singleton_iff : forall x y : FSetPositive.PositiveSet.elt, FSetPositive.PositiveSet.In y (FSetPositive.PositiveSet.singleton x) < -> x = y\nFSetPositive.PositiveSet.singleton_2 : forall x y : FSetPositive.PositiveSet.elt, x = y -> FSetPositive.PositiveSet.In y (FSetPositive.PositiveSet.singleton x)\nf_equal_R : forall (B : Type) (f : R -> B) (x y : R), x = y -> f x = f y\nf_equal_nat : forall (B : Type) (f : nat -> B) (x y : nat), x = y -> f x = f y\nRing.Pack : forall sort : Type, Ring.class_of sort -> Type -> Ring\nPropExtensionalityFacts.PredExt_imp_PropFunExt : (forall (A : Type) (P Q : A -> Prop), (forall x : A, P x <-> Q x) -> P = Q) -> forall (A : Type) (P Q : A -> Prop), (forall x : A, P x = Q x) -> P = Q\nZMicromega.Vars.Facts.exists_mem_4 : forall f : FSetPositive.PositiveSet.elt -> bool, SetoidList.compat_bool eq f -> forall s : FSetPositive.PositiveSet.t, FSetPositive.PositiveSet.exists_ f s = true -> {x : FSetPositive.PositiveSet.elt | FSetPositive.PositiveSet.mem x s = true /\\ f x = true}\nZMicromega.Vars.Facts.for_all_mem_4 : forall f : FSetPositive.PositiveSet.elt -> bool, Morphisms.Proper (Morphisms.respectful eq eq) f -> forall s : FSetPositive.PositiveSet.t, FSetPositive.PositiveSet.for_all f s = false -> {x : FSetPositive.PositiveSet.elt | FSetPositive.PositiveSet.mem x s = true /\\ f x = false}\nRRle_abs : forall x : R, x <= Rabs x\nseq.last_cat : forall (T : Type) (x : T) (s1 s2 : list T), seq.last x (seq.cat s1 s2) = seq.last (seq.last x s1) s2\nAbelianGroup.ax1 : forall (G : Type) (m : AbelianGroup.mixin_of G) (x y : G), AbelianGroup.plus G m x y = AbelianGroup.plus G m y x\nRmin_l : forall x y : R, Rmin x y <= x\nPos.eq_dec : forall x y : positive, {x = y} + {x <> y}\ncontinuity = fun f : R -> R => forall x : R, continuity_pt f x : (R -> R) -> Prop Argument scope is [Rfun_scope]\nRing.AbelianGroup = fun cT : Ring => let xT := let '{| Ring.sort := T |} := cT in T in AbelianGroup.Pack cT (Ring.class cT : Ring.class_of xT) xT : Ring -> AbelianGroup Ring.AbelianGroup is a coercion\nRmin_r : forall x y : R, Rmin x y <= y\nRing.ax1 : forall (K : AbelianGroup) (m : Ring.mixin_of K) (x y z : K), Ring.mult K m x (Ring.mult K m y z) = Ring.mult K m (Ring.mult K m x y) z\nseq.last_rcons : forall (T : Type) (x : T) (s : list T) (z : T), seq.last x (seq.rcons s z) = z\nssrnat.addKn : forall n : nat, ssrfun.cancel (ssrnat.addn n) (fun x : nat => ssrnat.subn x n)\nZ.compare_spec : forall x y : Z, CompareSpec (x = y) (x < y)%Z (y < x)%Z (x ?= y)%Z\neqtype.pred1 = fun (T : eqtype.Equality.type) (a1 : eqtype.Equality.sort T) => ssrbool.SimplPred ((fun a2 x : eqtype.Equality.sort T => eqtype.eq_op x a2) a1) : forall T : eqtype.Equality.type, eqtype.Equality.sort T -> ssrbool.simpl_pred (eqtype.Equality.sort T) Argument T is implicit and maximally inserted"}, {"role": "assistant", "content": "```coq\n```"}], "original": "", "succ": false}]