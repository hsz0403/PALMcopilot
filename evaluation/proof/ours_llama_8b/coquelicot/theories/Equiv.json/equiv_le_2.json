[{"history": {"proof": "shelve.", "repairs": [""], "exceptions": []}, "chat": [{"role": "user", "content": "I will give you a Coq proof state, including both hypotheses and a specific goal and your need to prove it. Your response should be a singular code block of Coq proof starting with \"```coq\n\", ending with \"Qed.```\", without any additional explanation or commentary. Follow to these guidelines:\nIntroduce variables using unique names to avoid any conflicts.\nKeep each command distinct and separated, avoid concatenations like ';' or '[cmd|cmd]'.\nOrganize your proof with bullets like '-', '+', and '*' instead of braces ({, }). Shift to their double symbols like '--' and '++', when necessary.\nEffectively use given premises, follow the syntax and structure demonstrated in the examples provided.\n\nExample 1:\n\nHypotheses:\nn, m: nat\nIHn: m + n = n + m\n\nGoal:\nm + S n = S n + m\n\nProof:\n```coq\nsimpl. rewrite <- IHn. auto.\nQed.```\n\nExample 2:\nHypotheses:\n\nGoal:\nforall n m : nat, m + n = n + m\n\n```coq\nintros n m. induction n.\n- simpl. auto.\n- simpl. rewrite <- IHn. auto.\nQed.```\n\nSolve This Proof State:\n\nHypotheses:\nT: Type\nK: AbsRing\nV: NormedModule K\nF: (T -> Prop) -> Prop\nFF: Filter F\ng: T -> V\nf: T -> V\n\nGoal:\nis_equiv F f g -> F (fun x : T => norm (g x) <= 2 * norm (f x) /\\ norm (f x) <= 2 * norm (g x))\n\nPremises:\nnorm = fun (K : AbsRing) (V : NormedModule K) => NormedModule.norm K (NormedModuleAux.Pack K V (NormedModule.class K V) V) (NormedModule.class K V) : forall (K : AbsRing) (V : NormedModule K), V -> R Arguments K, V are implicit and maximally inserted\nRecord Filter (T : Type) (F : (T -> Prop) -> Prop) : Prop := Build_Filter { filter_true : F (fun _ : T => True); filter_and : forall P Q : T -> Prop, F P -> F Q -> F (fun x : T => P x /\\ Q x); filter_imp : forall P Q : T -> Prop, (forall x : T, P x -> Q x) -> F P -> F Q } For Filter: Argument T is implicit and maximally inserted For Filter: Argument scopes are [type_scope function_scope] For Build_Filter: Argument scopes are [type_scope function_scope _ function_scope function_scope]\nis_equiv = fun (T : Type) (K : AbsRing) (V : NormedModule K) (F : (T -> Prop) -> Prop) (f g : T -> V) => is_domin F g (fun x : T => minus (g x) (f x)) : forall (T : Type) (K : AbsRing) (V : NormedModule K), ((T -> Prop) -> Prop) -> (T -> V) -> (T -> V) -> Prop Arguments T, K, V are implicit and maximally inserted Argument scopes are [type_scope _ _ function_scope function_scope function_scope]\nNotation NormedModule := NormedModule.type\nis_domin = fun (T : Type) (Ku Kv : AbsRing) (U : NormedModule Ku) (V : NormedModule Kv) (F : (T -> Prop) -> Prop) (f : T -> U) (g : T -> V) => forall eps : posreal, F (fun x : T => norm (g x) <= eps * norm (f x)) : forall (T : Type) (Ku Kv : AbsRing) (U : NormedModule Ku) (V : NormedModule Kv), ((T -> Prop) -> Prop) -> (T -> U) -> (T -> V) -> Prop Arguments T, Ku, Kv, U, V are implicit and maximally inserted Argument scopes are [type_scope _ _ _ _ function_scope function_scope function_scope]\nnorm_scal : forall (l : ?K) (x : ?V), norm (scal l x) <= abs l * norm x where ?K : [T : Type K : AbsRing V : NormedModule K F : (T -> Prop) -> Prop FF : Filter F f : T -> V g : T -> V |- AbsRing] ?V : [T : Type K : AbsRing V : NormedModule K F : (T -> Prop) -> Prop FF : Filter F f : T -> V g : T -> V |- NormedModule ?K]\nnorm_prod : forall (x : ?U) (y : ?V), Rmax (norm x) (norm y) <= norm (x, y) <= sqrt 2 * Rmax (norm x) (norm y) where ?K : [T : Type K : AbsRing V : NormedModule K F : (T -> Prop) -> Prop FF : Filter F f : T -> V g : T -> V |- AbsRing] ?U : [T : Type K : AbsRing V : NormedModule K F : (T -> Prop) -> Prop FF : Filter F f : T -> V g : T -> V |- NormedModule ?K] ?V : [T : Type K : AbsRing V : NormedModule K F : (T -> Prop) -> Prop FF : Filter F f : T -> V g : T -> V |- NormedModule ?K]\nnorm_opp : forall x : ?V, norm (opp x) = norm x where ?K : [T : Type K : AbsRing V : NormedModule K F : (T -> Prop) -> Prop FF : Filter F f : T -> V g : T -> V |- AbsRing] ?V : [T : Type K : AbsRing V : NormedModule K F : (T -> Prop) -> Prop FF : Filter F f : T -> V g : T -> V |- NormedModule ?K]\nfilterlim_comp : forall (T U V : Type) (f : T -> U) (g : U -> V) (F : (T -> Prop) -> Prop) (G : (U -> Prop) -> Prop) (H : (V -> Prop) -> Prop), filterlim f F G -> filterlim g G H -> filterlim (fun x : T => g (f x)) F H\nnorm_triangle : forall x y : ?V, norm (plus x y) <= norm x + norm y where ?K : [T : Type K : AbsRing V : NormedModule K F : (T -> Prop) -> Prop FF : Filter F f : T -> V g : T -> V |- AbsRing] ?V : [T : Type K : AbsRing V : NormedModule K F : (T -> Prop) -> Prop FF : Filter F f : T -> V g : T -> V |- NormedModule ?K]\nnorm_triangle_inv : forall x y : ?V, Rabs (norm x - norm y) <= norm (minus x y) where ?K : [T : Type K : AbsRing V : NormedModule K F : (T -> Prop) -> Prop FF : Filter F f : T -> V g : T -> V |- AbsRing] ?V : [T : Type K : AbsRing V : NormedModule K F : (T -> Prop) -> Prop FF : Filter F f : T -> V g : T -> V |- NormedModule ?K]\nnorm_compat2 : forall (x y : ?V) (eps : posreal), ball x eps y -> norm (minus y x) < norm_factor * eps where ?K : [T : Type K : AbsRing V : NormedModule K F : (T -> Prop) -> Prop FF : Filter F f : T -> V g : T -> V |- AbsRing] ?V : [T : Type K : AbsRing V : NormedModule K F : (T -> Prop) -> Prop FF : Filter F f : T -> V g : T -> V |- NormedModule ?K]\nnorm_sum_n_m : forall (a : nat -> ?V) (n m : nat), norm (sum_n_m a n m) <= sum_n_m (fun n0 : nat => norm (a n0)) n m where ?K : [T : Type K : AbsRing V : NormedModule K F : (T -> Prop) -> Prop FF : Filter F f : T -> V g : T -> V |- AbsRing] ?V : [T : Type K : AbsRing V : NormedModule K F : (T -> Prop) -> Prop FF : Filter F f : T -> V g : T -> V |- NormedModule ?K]\nfilterlim_norm : forall x : ?V, filterlim norm (locally x) (locally (norm x)) where ?K : [T : Type K : AbsRing V : NormedModule K F : (T -> Prop) -> Prop FF : Filter F f : T -> V g : T -> V |- AbsRing] ?V : [T : Type K : AbsRing V : NormedModule K F : (T -> Prop) -> Prop FF : Filter F f : T -> V g : T -> V |- NormedModule ?K]\ndomin_antisym : forall f0 : R -> ?V, Rbar_locally ?x (fun x : R => norm (f0 x) <> 0) -> ~ is_domin (Rbar_locally ?x) f0 f0 where ?K : [T : Type K : AbsRing V : NormedModule K F : (T -> Prop) -> Prop FF : Filter F f : T -> V g : T -> V |- AbsRing] ?V : [T : Type K : AbsRing V : NormedModule K F : (T -> Prop) -> Prop FF : Filter F f : T -> V g : T -> V |- NormedModule ?K] ?x : [T : Type K : AbsRing V : NormedModule K F : (T -> Prop) -> Prop FF : Filter F f : T -> V g : T -> V |- Rbar]\nnorm_compat1 : forall (x y : ?V) (eps : R), norm (minus y x) < eps -> ball x eps y where ?K : [T : Type K : AbsRing V : NormedModule K F : (T -> Prop) -> Prop FF : Filter F f : T -> V g : T -> V |- AbsRing] ?V : [T : Type K : AbsRing V : NormedModule K F : (T -> Prop) -> Prop FF : Filter F f : T -> V g : T -> V |- NormedModule ?K]\nnorm_ge_0 : forall x : ?V, 0 <= norm x where ?K : [T : Type K : AbsRing V : NormedModule K F : (T -> Prop) -> Prop FF : Filter F f : T -> V g : T -> V |- AbsRing] ?V : [T : Type K : AbsRing V : NormedModule K F : (T -> Prop) -> Prop FF : Filter F f : T -> V g : T -> V |- NormedModule ?K]\nfilter_and : forall P Q : ?T -> Prop, ?F P -> ?F Q -> ?F (fun x : ?T => P x /\\ Q x) where ?T : [T : Type K : AbsRing V : NormedModule K F : (T -> Prop) -> Prop FF : Filter F f : T -> V g : T -> V |- Type] ?F : [T : Type K : AbsRing V : NormedModule K F : (T -> Prop) -> Prop FF : Filter F f : T -> V g : T -> V |- (?T -> Prop) -> Prop] ?Filter : [T : Type K : AbsRing V : NormedModule K F : (T -> Prop) -> Prop FF : Filter F f : T -> V g : T -> V |- Filter ?F]\nprod_norm = fun (K : AbsRing) (U V : NormedModule K) (x : U * V) => sqrt (norm (fst x) ^ 2 + norm (snd x) ^ 2) : forall (K : AbsRing) (U V : NormedModule K), U * V -> R Arguments K, U, V are implicit and maximally inserted\nprod_norm_scal : forall (l : ?K) (x : ?U * ?V), prod_norm (scal l x) <= abs l * prod_norm x where ?K : [T : Type K : AbsRing V : NormedModule K F : (T -> Prop) -> Prop FF : Filter F f : T -> V g : T -> V |- AbsRing] ?U : [T : Type K : AbsRing V : NormedModule K F : (T -> Prop) -> Prop FF : Filter F f : T -> V g : T -> V |- NormedModule ?K] ?V : [T : Type K : AbsRing V : NormedModule K F : (T -> Prop) -> Prop FF : Filter F f : T -> V g : T -> V |- NormedModule ?K]\nnorm_eq_zero : forall x : ?V, norm x = 0 -> x = zero where ?K : [T : Type K : AbsRing V : NormedModule K F : (T -> Prop) -> Prop FF : Filter F f : T -> V g : T -> V |- AbsRing] ?V : [T : Type K : AbsRing V : NormedModule K F : (T -> Prop) -> Prop FF : Filter F f : T -> V g : T -> V |- NormedModule ?K]\nlocally_norm_le_locally : forall x : ?V, filter_le (locally_norm x) (locally x) where ?K : [T : Type K : AbsRing V : NormedModule K F : (T -> Prop) -> Prop FF : Filter F f : T -> V g : T -> V |- AbsRing] ?V : [T : Type K : AbsRing V : NormedModule K F : (T -> Prop) -> Prop FF : Filter F f : T -> V g : T -> V |- NormedModule ?K]\nlocally_le_locally_norm : forall x : ?V, filter_le (locally x) (locally_norm x) where ?K : [T : Type K : AbsRing V : NormedModule K F : (T -> Prop) -> Prop FF : Filter F f : T -> V g : T -> V |- AbsRing] ?V : [T : Type K : AbsRing V : NormedModule K F : (T -> Prop) -> Prop FF : Filter F f : T -> V g : T -> V |- NormedModule ?K]\nfilterlim_bounded : forall a : nat -> ?V, (exists x : ?V, filterlim a eventually (locally x)) -> {M : R | forall n : nat, norm (a n) <= M} where ?K : [T : Type K : AbsRing V : NormedModule K F : (T -> Prop) -> Prop FF : Filter F f : T -> V g : T -> V |- AbsRing] ?V : [T : Type K : AbsRing V : NormedModule K F : (T -> Prop) -> Prop FF : Filter F f : T -> V g : T -> V |- NormedModule ?K]\nfilterlim_norm_zero : forall f0 : ?U -> ?V, filterlim (fun x : ?U => norm (f0 x)) ?F (locally 0) -> filterlim f0 ?F (locally zero) where ?U : [T : Type K : AbsRing V : NormedModule K F : (T -> Prop) -> Prop FF : Filter F f : T -> V g : T -> V |- Type] ?K : [T : Type K : AbsRing V : NormedModule K F : (T -> Prop) -> Prop FF : Filter F f : T -> V g : T -> V |- AbsRing] ?V : [T : Type K : AbsRing V : NormedModule K F : (T -> Prop) -> Prop FF : Filter F f : T -> V g : T ->...-> V |- Filter ?F]\nprod_norm_compat2 : forall (x y : ?U * ?V) (eps : posreal), ball x eps y -> prod_norm (minus y x) < prod_norm_factor * eps where ?K : [T : Type K : AbsRing V : NormedModule K F : (T -> Prop) -> Prop FF : Filter F f : T -> V g : T -> V |- AbsRing] ?U : [T : Type K : AbsRing V : NormedModule K F : (T -> Prop) -> Prop FF : Filter F f : T -> V g : T -> V |- NormedModule ?K] ?V : [T : Type K : AbsRing V : NormedModule K F : (T -> Prop) -> Prop FF : Filter F f : T -> V g : T -> V |- NormedModule ?K]\nnorm_zero = fun (K : AbsRing) (V : NormedModule K) => Rle_antisym (norm zero) 0 ((fun _evar_0_ : norm (scal zero zero) <= 0 => eq_ind (scal zero zero) (fun _pattern_value_ : V => norm _pattern_value_ <= 0) _evar_0_ zero (scal_zero_l zero)) ((fun _evar_0_ : norm (scal zero zero) <= 0 * norm zero => eq_ind (0 * norm zero) (fun _pattern_value_ : R => norm (scal zero zero) <= _pattern_value_) _evar_0_ 0 (Rmult_0_l (norm zero))) ((fun _evar_0_ : norm (scal zero zero) <= abs zero * norm zero => eq_ind (abs zero) (fun _pattern_value_ : R => norm (scal zero zero) <= _pattern_value_ * norm zero) _evar_0_...\nfilter_imp : forall P Q : ?T -> Prop, (forall x : ?T, P x -> Q x) -> ?F P -> ?F Q where ?T : [T : Type K : AbsRing V : NormedModule K F : (T -> Prop) -> Prop FF : Filter F f : T -> V g : T -> V |- Type] ?F : [T : Type K : AbsRing V : NormedModule K F : (T -> Prop) -> Prop FF : Filter F f : T -> V g : T -> V |- (?T -> Prop) -> Prop] ?Filter : [T : Type K : AbsRing V : NormedModule K F : (T -> Prop) -> Prop FF : Filter F f : T -> V g : T -> V |- Filter ?F]\nopp_opp : forall x : ?G, opp (opp x) = x where ?G : [T : Type K : AbsRing V : NormedModule K F : (T -> Prop) -> Prop FF : Filter F f : T -> V g : T -> V |- AbelianGroup]\nplus_opp_l : forall x : ?G, plus (opp x) x = zero where ?G : [T : Type K : AbsRing V : NormedModule K F : (T -> Prop) -> Prop FF : Filter F f : T -> V g : T -> V |- AbelianGroup]\nplus_opp_r : forall x : ?G, plus x (opp x) = zero where ?G : [T : Type K : AbsRing V : NormedModule K F : (T -> Prop) -> Prop FF : Filter F f : T -> V g : T -> V |- AbelianGroup]\nprod_norm_triangle : forall x y : ?U * ?V, prod_norm (plus x y) <= prod_norm x + prod_norm y where ?K : [T : Type K : AbsRing V : NormedModule K F : (T -> Prop) -> Prop FF : Filter F f : T -> V g : T -> V |- AbsRing] ?U : [T : Type K : AbsRing V : NormedModule K F : (T -> Prop) -> Prop FF : Filter F f : T -> V g : T -> V |- NormedModule ?K] ?V : [T : Type K : AbsRing V : NormedModule K F : (T -> Prop) -> Prop FF : Filter F f : T -> V g : T -> V |- NormedModule ?K]\nfiltermap = fun (T U : Type) (f : T -> U) (F : (T -> Prop) -> Prop) (P : U -> Prop) => F (fun x : T => P (f x)) : forall T U : Type, (T -> U) -> ((T -> Prop) -> Prop) -> (U -> Prop) -> Prop Arguments T, U are implicit and maximally inserted Argument scopes are [type_scope type_scope function_scope function_scope function_scope]\nopp_plus : forall x y : ?G, opp (plus x y) = plus (opp x) (opp y) where ?G : [T : Type K : AbsRing V : NormedModule K F : (T -> Prop) -> Prop FF : Filter F f : T -> V g : T -> V |- AbelianGroup]"}, {"role": "assistant", "content": "```coq\n```"}], "original": "", "succ": false}]