[{"history": {"proof": "shelve.", "repairs": [""], "exceptions": []}, "chat": [{"role": "user", "content": "I will give you a Coq proof state, including both hypotheses and a specific goal and your need to prove it. Your response should be a singular code block of Coq proof starting with \"```coq\n\", ending with \"Qed.```\", without any additional explanation or commentary. Follow to these guidelines:\nIntroduce variables using unique names to avoid any conflicts.\nKeep each command distinct and separated, avoid concatenations like ';' or '[cmd|cmd]'.\nOrganize your proof with bullets like '-', '+', and '*' instead of braces ({, }). Shift to their double symbols like '--' and '++', when necessary.\nEffectively use given premises, follow the syntax and structure demonstrated in the examples provided.\n\nExample 1:\n\nHypotheses:\nn, m: nat\nIHn: m + n = n + m\n\nGoal:\nm + S n = S n + m\n\nProof:\n```coq\nsimpl. rewrite <- IHn. auto.\nQed.```\n\nExample 2:\nHypotheses:\n\nGoal:\nforall n m : nat, m + n = n + m\n\n```coq\nintros n m. induction n.\n- simpl. auto.\n- simpl. rewrite <- IHn. auto.\nQed.```\n\nSolve This Proof State:\n\nHypotheses:\nK: AbsRing\nV: NormedModule K\n\nGoal:\nforall (c : K) (a : nat -> V) (l : V), is_series a l -> is_series (fun n : nat => scal c (a n)) (scal c l)\n\nPremises:\nscal = fun (K : Ring) (V : ModuleSpace K) => ModuleSpace.scal K (AbelianGroup.Pack V (ModuleSpace.class K V) V) (ModuleSpace.class K V) : forall (K : Ring) (V : ModuleSpace K), K -> V -> V Arguments K, V are implicit and maximally inserted\nNotation NormedModule := NormedModule.type\nInductive nat : Set := O : nat | S : nat -> nat For S: Argument scope is [nat_scope]\nis_series = fun (K : AbsRing) (V : NormedModule K) (a : nat -> V) (l : V) => filterlim (sum_n a) eventually (locally l) : forall (K : AbsRing) (V : NormedModule K), (nat -> V) -> V -> Prop Arguments K, V are implicit and maximally inserted Argument scopes are [_ _ function_scope _]\nis_series_scal : forall (c : K) (a : nat -> V) (l : V), is_series a l -> is_series (fun n : nat => scal c (a n)) (scal c l)\nis_series_incr_1 : forall (a : nat -> ?V) (l : ?V), is_series a (plus l (a 0%nat)) -> is_series (fun k : nat => a (S k)) l where ?K : [K : AbsRing V : NormedModule K |- AbsRing] ?V : [K : AbsRing V : NormedModule K |- NormedModule ?K]\nis_series_decr_1 : forall (a : nat -> ?V) (l : ?V), is_series (fun k : nat => a (S k)) (plus l (opp (a 0%nat))) -> is_series a l where ?K : [K : AbsRing V : NormedModule K |- AbsRing] ?V : [K : AbsRing V : NormedModule K |- NormedModule ?K]\nis_series_opp : forall (a : nat -> ?V) (la : ?V), is_series a la -> is_series (fun n : nat => opp (a n)) (opp la) where ?K : [K : AbsRing V : NormedModule K |- AbsRing] ?V : [K : AbsRing V : NormedModule K |- NormedModule ?K]\nis_series_plus : forall (a b : nat -> ?V) (la lb : ?V), is_series a la -> is_series b lb -> is_series (fun n : nat => plus (a n) (b n)) (plus la lb) where ?K : [K : AbsRing V : NormedModule K |- AbsRing] ?V : [K : AbsRing V : NormedModule K |- NormedModule ?K]\nis_series_unique : forall (a : nat -> R) (l : R), is_series a l -> Series a = l\nis_series_Reals : forall (a : nat -> R) (l : R), is_series a l < -> infinite_sum a l\nis_series_ext : forall (a b : nat -> ?V) (l : ?V), (forall n : nat, a n = b n) -> is_series a l -> is_series b l where ?K : [K : AbsRing V : NormedModule K |- AbsRing] ?V : [K : AbsRing V : NormedModule K |- NormedModule ?K]\nis_series_incr_n : forall (a : nat -> ?V) (n : nat) (l : ?V), (0 < n)%nat -> is_series a (plus l (sum_n a (Init.Nat.pred n))) -> is_series (fun k : nat => a (n + k)%nat) l where ?K : [K : AbsRing V : NormedModule K |- AbsRing] ?V : [K : AbsRing V : NormedModule K |- NormedModule ?K]\nis_series_decr_n : forall (a : nat -> ?V) (n : nat) (l : ?V), (0 < n)%nat -> is_series (fun k : nat => a (n + k)%nat) (plus l (opp (sum_n a (Init.Nat.pred n)))) -> is_series a l where ?K : [K : AbsRing V : NormedModule K |- AbsRing] ?V : [K : AbsRing V : NormedModule K |- NormedModule ?K]\nis_series_minus : forall (a b : nat -> ?V) (la lb : ?V), is_series a la -> is_series b lb -> is_series (fun n : nat => plus (a n) (opp (b n))) (plus la (opp lb)) where ?K : [K : AbsRing V : NormedModule K |- AbsRing] ?V : [K : AbsRing V : NormedModule K |- NormedModule ?K]\nex_series = fun (K : AbsRing) (V : NormedModule K) (a : nat -> V) => exists l : V, is_series a l : forall (K : AbsRing) (V : NormedModule K), (nat -> V) -> Prop Arguments K, V are implicit and maximally inserted Argument scopes are [_ _ function_scope]\nsum_Sn : forall (a : nat -> ?G) (n : nat), sum_n a (S n) = plus (sum_n a n) (a (S n)) where ?G : [K : AbsRing V : NormedModule K |- AbelianGroup]\nfast_OMEGA16 : forall (v c l k : Z) (P : Z -> Prop), P (v * (c * k) + l * k)%Z -> P ((v * c + l) * k)%Z\nsum_n_m_S : forall (a : nat -> ?G) (n m : nat), sum_n_m (fun n0 : nat => a (S n0)) n m = sum_n_m a (S n) (S m) where ?G : [K : AbsRing V : NormedModule K |- AbelianGroup]\nRlt_div_r : forall a b c : R, c > 0 -> a * c < b < -> a < b / c\nAbsRing.mixin : forall (K : Type) (c : AbsRing.class_of K), AbsRing.mixin_of (Ring.Pack K c K)\nSeries_correct : forall a : nat -> R, ex_series a -> is_series a (Series a)\nsum_Sn_m : forall (a : nat -> ?G) (n m : nat), (n <= m)%nat -> sum_n_m a n m = plus (a n) (sum_n_m a (S n) m) where ?G : [K : AbsRing V : NormedModule K |- AbelianGroup]\nNormedModule.ax2 : forall (K : AbsRing) (V : NormedModuleAux K) (m : NormedModule.mixin_of K V) (l : K) (x : V), NormedModule.norm K V m (scal l x) <= abs l * NormedModule.norm K V m x\nsum_n_m_ext : forall (a b : nat -> ?G) (n m : nat), (forall n0 : nat, a n0 = b n0) -> sum_n_m a n m = sum_n_m b n m where ?G : [K : AbsRing V : NormedModule K |- AbelianGroup]\nsum_n_Reals : forall (a : nat -> R_AbelianGroup) (N : nat), sum_n a N = sum_f_R0 a N\nis_lim_seq' = fun (u : nat -> R) (l : Rbar) => match l with | Finite l0 => forall eps : posreal, eventually (fun n : nat => Rabs (u n - l0) < eps) | p_infty => forall M : R, eventually (fun n : nat => M < u n) | m_infty => forall M : R, eventually (fun n : nat => u n < M) end : (nat -> R) -> Rbar -> Prop Argument scopes are [function_scope _]\nsum_n = fun (G : AbelianGroup) (a : nat -> G) (n : nat) => sum_n_m a 0 n : forall G : AbelianGroup, (nat -> G) -> nat -> G Argument G is implicit and maximally inserted Argument scopes are [_ function_scope nat_scope]\nsum_n_m = fun (G : AbelianGroup) (a : nat -> G) (n m : nat) => Iter.iter_nat plus zero a n m : forall G : AbelianGroup, (nat -> G) -> nat -> nat -> G Argument G is implicit and maximally inserted Argument scopes are [_ function_scope nat_scope nat_scope]\nnat_ind : forall P : nat -> Prop, P 0%nat -> (forall n : nat, P n -> P (S n)) -> forall n : nat, P n\nis_lim_seq_unique : forall (u : nat -> R) (l : Rbar), is_lim_seq u l -> Lim_seq u = l\nNormedModule.mixin : forall (K : AbsRing) (T : Type) (c : NormedModule.class_of K T), NormedModule.mixin_of K (NormedModuleAux.Pack K T c T)\nNormedModule.Mixin : forall (K : AbsRing) (V : NormedModuleAux K) (norm : V -> R) (norm_factor : R), (forall x y : V, norm (plus x y) <= norm x + norm y) -> (forall (l : K) (x : V), norm (scal l x) <= abs l * norm x) -> (forall (x y : V) (eps : R), norm (minus y x) < eps -> ball x eps y) -> (forall (x y : V) (eps : posreal), ball x eps y -> norm (minus y x) < norm_factor * eps) -> (forall x : V, norm x = 0 -> x = zero) -> NormedModule.mixin_of K V\nis_lim_seq_spec : forall (u : nat -> R) (l : Rbar), is_lim_seq' u l < -> is_lim_seq u l"}, {"role": "assistant", "content": "```coq\n```coq\nintro c a l.\napply is_series_scal.\nassumption.\nQed.```"}], "original": "", "succ": false}]