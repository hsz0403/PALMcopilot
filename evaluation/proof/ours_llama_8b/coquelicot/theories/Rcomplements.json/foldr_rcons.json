[{"history": {"proof": "shelve.", "repairs": [""], "exceptions": []}, "chat": [{"role": "user", "content": "I will give you a Coq proof state, including both hypotheses and a specific goal and your need to prove it. Your response should be a singular code block of Coq proof starting with \"```coq\n\", ending with \"Qed.```\", without any additional explanation or commentary. Follow to these guidelines:\nIntroduce variables using unique names to avoid any conflicts.\nKeep each command distinct and separated, avoid concatenations like ';' or '[cmd|cmd]'.\nOrganize your proof with bullets like '-', '+', and '*' instead of braces ({, }). Shift to their double symbols like '--' and '++', when necessary.\nEffectively use given premises, follow the syntax and structure demonstrated in the examples provided.\n\nExample 1:\n\nHypotheses:\nn, m: nat\nIHn: m + n = n + m\n\nGoal:\nm + S n = S n + m\n\nProof:\n```coq\nsimpl. rewrite <- IHn. auto.\nQed.```\n\nExample 2:\nHypotheses:\n\nGoal:\nforall n m : nat, m + n = n + m\n\n```coq\nintros n m. induction n.\n- simpl. auto.\n- simpl. rewrite <- IHn. auto.\nQed.```\n\nSolve This Proof State:\n\nHypotheses:\nT: Type\nT0: Type\n\nGoal:\nforall (f : T0 -> T -> T) (x0 : T) (s : seq T0) (t : T0), foldr f x0 (rcons s t) = foldr f (f t x0) s\n\nPremises:\nNotation seq := list\nrcons = fun T : Type => fix rcons (s : seq T) (z : T) {struct s} : seq T := match s with | [::] => [:: z] | x :: s' => x :: rcons s' z end : forall T : Type, seq T -> T -> seq T Argument T is implicit and maximally inserted Argument scopes are [type_scope seq_scope _]\nfoldr = fun (T R : Type) (f : T -> R -> R) (z0 : R) => fix foldr (s : seq T) : R := match s with | [::] => z0 | x :: s' => f x (foldr s') end : forall T R : Type, (T -> R -> R) -> R -> seq T -> R Arguments T, R are implicit and maximally inserted Argument scopes are [type_scope type_scope function_scope _ seq_scope]\nFSetPositive.PositiveSet.E.t = positive : Set\nf = fun f : family => let (ind, f0, _) := f in f0 : family -> R -> R -> Prop Argument scopes are [_ R_scope R_scope] f is a coercion\nfoldl_rev : forall (T R : Type) (f : R -> T -> R) (z : R) (s : seq T), foldl f z (rev s) = foldr (fun (x : T) (z0 : R) => f z0 x) z s\nfoldr_cat : forall (T2 R : Type) (f : T2 -> R -> R) (z0 : R) (s1 s2 : seq T2), foldr f z0 (s1 ++ s2) = foldr f (foldr f z0 s2) s1\nzip_rcons : forall (S T : Type) (s : seq S) (t : seq T) (x : S) (y : T), size s = size t -> zip (rcons s x) (rcons t y) = rcons (zip s t) (x, y)\nfoldr_map : forall (T1 T2 : Type) (h : T1 -> T2) (R : Type) (f : T2 -> R -> R) (z0 : R) (s : seq T1), foldr f z0 [seq h i | i <- s] = foldr (fun (x : T1) (z : R) => f (h x) z) z0 s\nnth_rcons : forall (T : Type) (x0 : T) (s : seq T) (x : T) (n : nat), nth x0 (rcons s x) n = (if ssrnat.leq (S n) (size s) then nth x0 s n else if eqtype.eq_op n (size s) then x else x0)\nunzip1_zip : forall (S T : Type) (s : seq S) (t : seq T), ssrnat.leq (size s) (size t) -> unzip1 (zip s t) = s\nmap_rcons : forall (T1 T2 : Type) (f : T1 -> T2) (s : seq T1) (x : T1), [seq f i | i <- rcons s x] = rcons [seq f i | i <- s] (f x)\nlast_map : forall (T1 T2 : Type) (f : T1 -> T2) (s : seq T1) (x : T1), last (f x) [seq f i | i <- s] = f (last x s)\nList.find_none : forall (A : Type) (f : A -> bool) (l : seq A), List.find f l = None -> forall x : A, List.In x l -> f x = false\nList.map_nth : forall (A B : Type) (f : A -> B) (l : seq A) (d : A) (n : nat), List.nth n (List.map f l) (f d) = f (List.nth n l d)\nList.forallb_forall : forall (A : Type) (f : A -> bool) (l : seq A), List.forallb f l = true < -> (forall x : A, List.In x l -> f x = true)\nnth_behead : forall (T : Type) (x0 : T) (s : seq T) (n : nat), nth x0 (behead s) n = nth x0 s (S n)\nrcons_ind : forall P : seq ?T -> Type, P [::] -> (forall (s : seq ?T) (t : ?T), P s -> P (rcons s t)) -> forall s : seq ?T, P s where ?T : [T : Type T0 : Type |- Type]\nrcons_dec : forall P : seq ?T -> Type, P [::] -> (forall (s : seq ?T) (t : ?T), P (rcons s t)) -> forall s : seq ?T, P s where ?T : [T : Type T0 : Type |- Type]\nhead = fun (T : Type) (x0 : T) (s : seq T) => match s with | [::] => x0 | x :: _ => x end : forall T : Type, T -> seq T -> T Argument T is implicit and maximally inserted Argument scopes are [type_scope _ seq_scope]\nssrfun.can_inj : forall (rT aT : Type) (f : aT -> rT) (g : rT -> aT), ssrfun.cancel f g -> ssrfun.injective f\nList.map_eq_nil : forall (A B : Type) (f : A -> B) (l : seq A), List.map f l = [::] -> l = [::]\nSetoidList.filter_InA : forall (A : Type) (eqA : A -> A -> Prop) (f : A -> bool), Morphisms.Proper (Morphisms.respectful eqA eq) f -> forall (l : seq A) (x : A), SetoidList.InA eqA x (List.filter f l) < -> SetoidList.InA eqA x l /\\ f x = true\neqtype.can_eq : forall (aT rT : eqtype.Equality.type) (f : eqtype.Equality.sort aT -> eqtype.Equality.sort rT) (g : eqtype.Equality.sort rT -> eqtype.Equality.sort aT), ssrfun.cancel f g -> forall x y : eqtype.Equality.sort aT, eqtype.eq_op (f x) (f y) = eqtype.eq_op x y\ntake_nth : forall (T : Type) (x0 : T) (n : nat) (s : seq T), ssrnat.leq (S n) (size s) -> take (S n) s = rcons (take n s) (nth x0 s n)\nList.filter_In : forall (A : Type) (f : A -> bool) (x : A) (l : seq A), List.In x (List.filter f l) < -> List.In x l /\\ f x = true\nList.partition_inv_nil : forall (A : Type) (f : A -> bool) (l : seq A), List.partition f l = ([::], [::]) < -> l = [::]\nrev_cat : forall (T : Type) (s t : seq T), rev (s ++ t) = rev t ++ rev s\nflatten = fun T : Type => foldr cat [::] : forall T : Type, seq (seq T) -> seq T Argument T is implicit and maximally inserted Argument scopes are [type_scope seq_scope]\nlast_ind : forall (T : Type) (P : seq T -> Type), P [::] -> (forall (s : seq T) (x : T), P s -> P (rcons s x)) -> forall s : seq T, P s\nmap_cat : forall (T1 T2 : Type) (f : T1 -> T2) (s1 s2 : seq T1), [seq f i | i <- s1 ++ s2] = [seq f i | i <- s1] ++ [seq f i | i <- s2]\nfoldl = fun (T R : Type) (f : R -> T -> R) => fix foldl (z : R) (s : seq T) {struct s} : R := match s with | [::] => z | x :: s' => foldl (f z x) s' end : forall T R : Type, (R -> T -> R) -> R -> seq T -> R Arguments T, R are implicit and maximally inserted Argument scopes are [type_scope type_scope function_scope _ seq_scope]\nnth = fun (T : Type) (x0 : T) => fix nth (s : seq T) (n : nat) {struct n} : T := match s with | [::] => x0 | x :: s' => match n with | 0%nat => x | S n' => nth s' n' end end : forall T : Type, T -> seq T -> nat -> T Argument T is implicit and maximally inserted Argument scopes are [type_scope _ seq_scope nat_scope]\nTauto.cnf_checker_sound : forall (Env Term' Annot : Type) (eval' : Env -> Term' -> Prop) (Witness : Type) (checker : seq (Term' * Annot) -> Witness -> bool), (forall (t : seq (Term' * Annot)) (w : Witness), checker t w = true -> forall env : Env, Refl.make_impl (Tauto.eval_tt eval' env) t False) -> forall (t : Tauto.cnf Term' Annot) (w : seq Witness), Tauto.cnf_checker checker t w = true -> forall env : Env, Tauto.eval_cnf eval' env t\nsize_rcons_pos : forall (s : seq ?T) (t : ?T), (0 < size (rcons s t))%nat where ?T : [T : Type T0 : Type |- Type]"}, {"role": "assistant", "content": "```coq\n```"}], "original": "", "succ": false}]