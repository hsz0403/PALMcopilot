[{"history": {"proof": "shelve.", "repairs": [""], "exceptions": []}, "chat": [{"role": "user", "content": "I will give you a Coq proof state, including both hypotheses and a specific goal and your need to prove it. Your response should be a singular code block of Coq proof starting with \"```coq\n\", ending with \"Qed.```\", without any additional explanation or commentary. Follow to these guidelines:\nIntroduce variables using unique names to avoid any conflicts.\nKeep each command distinct and separated, avoid concatenations like ';' or '[cmd|cmd]'.\nOrganize your proof with bullets like '-', '+', and '*' instead of braces ({, }). Shift to their double symbols like '--' and '++', when necessary.\nEffectively use given premises, follow the syntax and structure demonstrated in the examples provided.\n\nExample 1:\n\nHypotheses:\nn, m: nat\nIHn: m + n = n + m\n\nGoal:\nm + S n = S n + m\n\nProof:\n```coq\nsimpl. rewrite <- IHn. auto.\nQed.```\n\nExample 2:\nHypotheses:\n\nGoal:\nforall n m : nat, m + n = n + m\n\n```coq\nintros n m. induction n.\n- simpl. auto.\n- simpl. rewrite <- IHn. auto.\nQed.```\n\nSolve This Proof State:\n\nHypotheses:\n\n\nGoal:\nforall x m M : R, m < x < M -> Rabs x < Rmax M (- m)\n\nPremises:\n*** [ R : Set ]\nRabs = fun r : R => if Rcase_abs r then - r else r : R -> R Argument scope is [R_scope]\nRmax = fun x y : R => if Rle_dec x y then y else x : R -> R -> R Argument scopes are [R_scope R_scope]\nRabs_le_between_Rmax : forall x m M : R, m <= x <= M -> Rabs x <= Rmax M (- m)\npow_add : forall (x : R) (n m : nat), x ^ (n + m) = x ^ n * x ^ m\nRmax_neg : forall x y : R, x < 0 -> y < 0 -> Rmax x y < 0\nRmax_lub_lt : forall x y z : R, x < z -> y < z -> Rmax x y < z\nRabs_def1 : forall x a : R, x < a -> - a < x -> Rabs x < a\nRabs_def2 : forall x a : R, Rabs x < a -> x < a /\\ - a < x\nRsqr_lt_abs_0 : forall x y : R, x\u00b2 < y\u00b2 -> Rabs x < Rabs y\ntriangle_rectangle_lt : forall x y z : R, x\u00b2 + y\u00b2 < z\u00b2 -> Rabs x < Rabs z /\\ Rabs y < Rabs z\nRmax_Rlt : forall x y z : R, Rmax x y < z < -> x < z /\\ y < z\nRabs_pos_lt : forall x : R, x <> 0 -> 0 < Rabs x\nRabs_lt_between : forall x y : R, Rabs x < y < -> - y < x < y\nRopp_Rmin : forall x y : R, - Rmin x y = Rmax (- x) (- y)\nRopp_Rmax : forall x y : R, - Rmax x y = Rmin (- x) (- y)\nsin_gt_0 : forall x : R, 0 < x -> x < PI -> 0 < sin x\nCauchy_crit = fun Un : nat -> R => forall eps : R, eps > 0 -> exists N : nat, forall n m : nat, (n >= N)%nat -> (m >= N)%nat -> R_dist (Un n) (Un m) < eps : (nat -> R) -> Prop Argument scope is [function_scope]\nRmax_stable_in_negreal : forall x y : negreal, Rmax x y < 0\nRabs_Ropp : forall x : R, Rabs (- x) = Rabs x\nmaj_term4 : forall (x h eps l2 alp_f2 alp_f2c : R) (eps_f2 : posreal) (f1 f2 : R -> R), 0 < eps -> f2 x <> 0 -> f2 (x + h) <> 0 -> (forall a : R, Rabs a < alp_f2c -> Rabs (f2 (x + a) - f2 x) < Rabs ((f2 x)\u00b2 * f2 x * eps / (8 * f1 x * l2))) -> (forall a : R, Rabs a < Rmin eps_f2 alp_f2 -> / Rabs (f2 (x + a)) < 2 / Rabs (f2 x)) -> h <> 0 -> Rabs h < alp_f2c ->...-> Rabs (l2 * f1 x / ((f2 x)\u00b2 * f2 (x + h)) * (f2 (x + h) - f2 x)) < eps / 4\nmaj_term2 : forall (x h eps l1 alp_f2 alp_f2t2 : R) (eps_f2 : posreal) (f2 : R -> R), 0 < eps -> f2 x <> 0 -> f2 (x + h) <> 0 -> (forall a : R, Rabs a < alp_f2t2 -> Rabs (f2 (x + a) - f2 x) < Rabs (eps * (f2 x)\u00b2 / (8 * l1))) -> (forall a : R, Rabs a < Rmin eps_f2 alp_f2 -> / Rabs (f2 (x + a)) < 2 / Rabs (f2 x)) -> h <> 0 -> Rabs h < alp_f2t2 -> Rabs h < Rmin eps_f2 alp_f2 ->...-> Rabs (l1 / (f2 x * f2 (x + h)) * (f2 x - f2 (x + h))) < eps / 4\nmaj_term3 : forall (x h eps l2 alp_f2 : R) (eps_f2 alp_f2d : posreal) (f1 f2 : R -> R), 0 < eps -> f2 x <> 0 -> f2 (x + h) <> 0 -> (forall h0 : R, h0 <> 0 -> Rabs h0 < alp_f2d -> Rabs ((f2 (x + h0) - f2 x) / h0 - l2) < Rabs ((f2 x)\u00b2 * eps / (8 * f1 x))) -> (forall a : R, Rabs a < Rmin eps_f2 alp_f2 -> / Rabs (f2 (x + a)) < 2 / Rabs (f2 x)) -> h <> 0 ->...-> Rabs (f1 x / (f2 x * f2 (x + h)) * ((f2 (x + h) - f2 x) / h - l2)) < eps / 4\nRsqr_incrst_0 : forall x y : R, x\u00b2 < y\u00b2 -> 0 <= x -> 0 <= y -> x < y\npow_lt : forall (x : R) (n : nat), 0 < x -> 0 < x ^ n\nmaj_term1 : forall (x h eps l1 alp_f2 : R) (eps_f2 alp_f1d : posreal) (f1 f2 : R -> R), 0 < eps -> f2 x <> 0 -> f2 (x + h) <> 0 -> (forall h0 : R, h0 <> 0 -> Rabs h0 < alp_f1d -> Rabs ((f1 (x + h0) - f1 x) / h0 - l1) < Rabs (eps * f2 x / 8)) -> (forall a : R, Rabs a < Rmin eps_f2 alp_f2 -> / Rabs (f2 (x + a)) < 2 / Rabs (f2 x)) -> h <> 0 -> Rabs h < alp_f1d ->...-> Rabs (/ f2 (x + h) * ((f1 (x + h) - f1 x) / h - l1)) < eps / 4\nframe_tan : forall y : R, {x : R | 0 < x < PI / 2 /\\ Rabs y < tan x}\nStepFun_P37 : forall (a b : R) (f g : StepFun a b), a <= b -> (forall x : R, a < x < b -> f x <= g x) -> RiemannInt_SF f <= RiemannInt_SF g\nInit.Nat.add = fix add (n m : nat) {struct n} : nat := match n with | 0%nat => m | S p => S (add p m) end : nat -> nat -> nat Argument scopes are [nat_scope nat_scope]\nRmax_left : forall x y : R, y <= x -> Rmax x y = x\nRmax_right : forall x y : R, x <= y -> Rmax x y = y\nRabs_pos_eq : forall x : R, 0 <= x -> Rabs x = x\nRmax_comm : forall x y : R, Rmax x y = Rmax y x"}, {"role": "assistant", "content": "```coq\n```"}], "original": "", "succ": false}]