[{"history": {"proof": "shelve.", "repairs": [""], "exceptions": []}, "chat": [{"role": "user", "content": "I will give you a Coq proof state, including both hypotheses and a specific goal and your need to prove it. Your response should be a singular code block of Coq proof starting with \"```coq\n\", ending with \"Qed.```\", without any additional explanation or commentary. Follow to these guidelines:\nIntroduce variables using unique names to avoid any conflicts.\nKeep each command distinct and separated, avoid concatenations like ';' or '[cmd|cmd]'.\nOrganize your proof with bullets like '-', '+', and '*' instead of braces ({, }). Shift to their double symbols like '--' and '++', when necessary.\nEffectively use given premises, follow the syntax and structure demonstrated in the examples provided.\n\nExample 1:\n\nHypotheses:\nn, m: nat\nIHn: m + n = n + m\n\nGoal:\nm + S n = S n + m\n\nProof:\n```coq\nsimpl. rewrite <- IHn. auto.\nQed.```\n\nExample 2:\nHypotheses:\n\nGoal:\nforall n m : nat, m + n = n + m\n\n```coq\nintros n m. induction n.\n- simpl. auto.\n- simpl. rewrite <- IHn. auto.\nQed.```\n\nSolve This Proof State:\n\nHypotheses:\ny: R\nx: R\n\nGoal:\nx <= y -> sign x <= sign y\n\nPremises:\nsign = fun x : R => match total_order_T 0 x with | inleft (left _) => 1 | inleft (right _) => 0 | inright _ => -1 end : R -> R Argument scope is [R_scope]\nsign_opp : forall x : R, sign (- x) = - sign x\nsign_eq_m1 : forall x : R, x < 0 -> sign x = -1\nsign_eq_1 : forall x : R, 0 < x -> sign x = 1\ncos_incr_1 : forall x y : R, PI <= x -> x <= 2 * PI -> PI <= y -> y <= 2 * PI -> x <= y -> cos x <= cos y\nsqrt_le_0 : forall x y : R, 0 <= x -> 0 <= y -> sqrt x <= sqrt y -> x <= y\nRsqr_neg_pos_le_1 : forall x y : R, - y <= x -> x <= y -> 0 <= y -> x\u00b2 <= y\u00b2\ncos_increasing_0 : forall x y : R, PI <= x -> x <= 2 * PI -> PI <= y -> y <= 2 * PI -> cos x < cos y -> x < y\ncos_increasing_1 : forall x y : R, PI <= x -> x <= 2 * PI -> PI <= y -> y <= 2 * PI -> x < y -> cos x < cos y\nsin_incr_1 : forall x y : R, - (PI / 2) <= x -> x <= PI / 2 -> - (PI / 2) <= y -> y <= PI / 2 -> x <= y -> sin x <= sin y\ntan_incr_0 : forall x y : R, - (PI / 4) <= x -> x <= PI / 4 -> - (PI / 4) <= y -> y <= PI / 4 -> tan x <= tan y -> x <= y\nRsqr_incr_1 : forall x y : R, x <= y -> 0 <= x -> 0 <= y -> x\u00b2 <= y\u00b2\nsin_decr_1 : forall x y : R, x <= 3 * (PI / 2) -> PI / 2 <= x -> y <= 3 * (PI / 2) -> PI / 2 <= y -> x <= y -> sin y <= sin x\ntan_increasing_1 : forall x y : R, - (PI / 4) <= x -> x <= PI / 4 -> - (PI / 4) <= y -> y <= PI / 4 -> x < y -> tan x < tan y\nsin_increasing_0 : forall x y : R, - (PI / 2) <= x -> x <= PI / 2 -> - (PI / 2) <= y -> y <= PI / 2 -> sin x < sin y -> x < y\ntan_increasing_0 : forall x y : R, - (PI / 4) <= x -> x <= PI / 4 -> - (PI / 4) <= y -> y <= PI / 4 -> tan x < tan y -> x < y\nsin_increasing_1 : forall x y : R, - (PI / 2) <= x -> x <= PI / 2 -> - (PI / 2) <= y -> y <= PI / 2 -> x < y -> sin x < sin y\nsin_decreasing_0 : forall x y : R, x <= 3 * (PI / 2) -> PI / 2 <= x -> y <= 3 * (PI / 2) -> PI / 2 <= y -> sin x < sin y -> y < x\nsin_decreasing_1 : forall x y : R, x <= 3 * (PI / 2) -> PI / 2 <= x -> y <= 3 * (PI / 2) -> PI / 2 <= y -> x < y -> sin y < sin x\nsqrt_le_1_alt : forall x y : R, x <= y -> sqrt x <= sqrt y\nRle_max_compat_r : forall x y z : R, x <= y -> Rmax x z <= Rmax y z\nRle_max_compat_l : forall x y z : R, x <= y -> Rmax z x <= Rmax z y\nIVT_cor : forall (f : R -> R) (x y : R), continuity f -> x <= y -> f x * f y <= 0 -> {z : R | x <= z <= y /\\ f z = 0}\nRanalysis5.IVT_interv : forall (f : R -> R) (x y : R), (forall a : R, x <= a <= y -> continuity_pt f a) -> x < y -> f x < 0 -> 0 < f y -> {z : R | x <= z <= y /\\ f z = 0}\ndicho_comp : forall (x y : R) (P : R -> bool) (n : nat), x <= y -> dicho_lb x y P n <= dicho_up x y P n\nsqrt_lt_1_alt : forall x y : R, 0 <= x < y -> sqrt x < sqrt y\npow_maj_Rabs : forall (x y : R) (n : nat), Rabs y <= x -> y ^ n <= x ^ n\nIVT : forall (f : R -> R) (x y : R), continuity f -> x < y -> f x < 0 -> 0 < f y -> {z : R | x <= z <= y /\\ f z = 0}\nRmax_r : forall x y : R, y <= Rmax x y\nRanalysis5.f_interv_is_interv : forall (f : R -> R) (lb ub y : R), lb < ub -> f lb <= y <= f ub -> (forall x : R, lb <= x <= ub -> continuity_pt f x) -> {x : R | lb <= x <= ub /\\ f x = y}\nRmax_l : forall x y : R, x <= Rmax x y"}, {"role": "assistant", "content": "```coq\n```"}], "original": "", "succ": false}]