[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": ["unfold fold_right, fold_left.", "intro x1; intro x2; intro xs."], "tactic": "rewrite <- (deduction_impp_intros Phi (multi_imp xs x1) x2).", "exn": "The reference Phi was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["unfold fold_right, fold_left.", "intro x1; intro x2; intro xs."], "tactic": "apply deduction_modus_ponens with (x := multi_imp xs x1).", "exn": "In environment L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr Mono : Monotonicity L Gamma prodp x1, x2 : expr xs : list expr Unable to unify \"(let (derivable) := ?Gamma in derivable) ?M1985 (multi_imp xs x1 --> ?M1987)\" with \"(let (provable) := Gamma in provable) (x1 --> x2)\".", "type": "cannot_unify", "handled": true}, {"ctx": ["unfold fold_right, fold_left.", "intro x1; intro x2; intro xs.", "qsimpl time: 1 use: multi_imp,deduction_modus_ponens.", "-"], "tactic": "apply deduction_weaken with (Phi := Phi) (Psi := Union expr Phi (fun x : expr => In x xs)).", "exn": "The reference Phi was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["unfold fold_right, fold_left.", "intro x1; intro x2; intro xs.", "qsimpl time: 1 use: multi_imp,deduction_modus_ponens.", "-"], "tactic": "apply deduction_impp_arg_switch with (y := x2).", "exn": "In environment L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr Mono : Monotonicity L Gamma prodp x1, x2 : expr xs : list expr H : forall (Phi : context) (x y : expr), Phi |-- x -> Phi |-- x --> y -> Phi |-- y H0 : |-- x1 --> x2 X : expr Unable to unify \"(let (derivable) := ?GammaD in derivable) ?M2435 (x2 --> ?M2436 --> ?M2438)\" with \"(let (provable) := Gamma in provable) ((fix fold_right (l : list expr) : expr := match l with | nil => x1 | b :: t => prodp b (fold_right t) end) xs --> (fix fold_right (l : list expr) : expr := match l with | nil => x2 | b :: t => prodp b (fold_right t) end) xs)\".", "type": "cannot_unify", "handled": true}, {"ctx": ["unfold fold_right, fold_left.", "intro x1; intro x2; intro xs.", "qsimpl time: 1 use: multi_imp,deduction_modus_ponens.", "-", "qsimpl time: 1 use: multi_imp,deduction_impp_arg_switch,deduction_modus_ponens.", "*"], "tactic": "apply deduction_impp_trans with (z := x2).", "exn": "In environment L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr Mono : Monotonicity L Gamma prodp x1, x2 : expr xs : list expr H : forall (Phi : context) (x y : expr), Phi x -> Phi (x --> y) -> Phi y H0 : |-- x1 --> x2 X : expr H2 : forall (Phi : context) (x y : expr), Phi |-- x -> Phi |-- x --> y -> Phi |-- y H1 : forall (Phi : context) (x y z : expr), Phi |-- x --> y --> z -> Phi |-- y --> x --> z X0 : expr Unable to unify \"(let (derivable) := ?GammaD in derivable) ?M3803 (?M3804 --> x2)\" with \"(let (provable) := Gamma in provable) ((fix fold_right (l : list expr) : expr := match l with | nil => x1 | b :: t => prodp b (fold_right t) end) xs --> (fix fold_right (l : list expr) : expr := match l with | nil => x2 | b :: t => prodp b (fold_right t) end) xs)\".", "type": "cannot_unify", "handled": true}, {"ctx": ["unfold fold_right, fold_left.", "intro x1; intro x2; intro xs.", "qsimpl time: 1 use: multi_imp,deduction_modus_ponens.", "-", "qsimpl time: 1 use: multi_imp,deduction_impp_arg_switch,deduction_modus_ponens.", "*", "qsimpl time: 1 use: multi_imp,deduction_impp_arg_switch,deduction_impp_trans,deduction_modus_ponens.", "**"], "tactic": "apply deduction_impp_intros with (y := x2).", "exn": "In environment L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr Mono : Monotonicity L Gamma prodp x1, x2 : expr xs : list expr H : forall (Phi : context) (x y : expr), Phi x -> Phi (x --> y) -> Phi y H0 : |-- x1 --> x2 X : expr H1 : forall (Phi : context) (x y z : expr), Phi (x --> y --> z) -> Phi (y --> x --> z) X0 : expr H5 : forall (Phi : context) (x y : expr), Phi |-- x -> Phi |-- x --> y -> Phi |-- y H4 : forall (Phi : context) (x y z : expr), Phi |-- x --> y -> Phi |-- y --> z -> Phi |-- x --> z H3 : forall (Phi : context) (x y z : expr), Phi |-- x --> y --> z -> Phi |-- y --> x --> z X1 : expr Unable to unify \"(let (derivable) := ?Gamma in derivable) ?M7509 (?M7510 --> x2)\" with \"(let (provable) := Gamma in provable) ((fix fold_right (l : list expr) : expr := match l with | nil => x1 | b :: t => prodp b (fold_right t) end) xs --> (fix fold_right (l : list expr) : expr := match l with | nil => x2 | b :: t => prodp b (fold_right t) end) xs)\".", "type": "cannot_unify", "handled": true}, {"ctx": ["unfold fold_right, fold_left.", "intro x1; intro x2; intro xs.", "qsimpl time: 1 use: multi_imp,deduction_modus_ponens.", "-", "qsimpl time: 1 use: multi_imp,deduction_impp_arg_switch,deduction_modus_ponens.", "*", "qsimpl time: 1 use: multi_imp,deduction_impp_arg_switch,deduction_impp_trans,deduction_modus_ponens.", "**", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "***"], "tactic": "apply deduction_axiom2 with (x := x1) (y := x2) (z := x2).", "exn": "The reference deduction_axiom2 was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["unfold fold_right, fold_left.", "intro x1; intro x2; intro xs.", "qsimpl time: 1 use: multi_imp,deduction_modus_ponens.", "-", "qsimpl time: 1 use: multi_imp,deduction_impp_arg_switch,deduction_modus_ponens.", "*", "qsimpl time: 1 use: multi_imp,deduction_impp_arg_switch,deduction_impp_trans,deduction_modus_ponens.", "**", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "***"], "tactic": "apply deduction_axiom1 with (x := x1) (y := x2).", "exn": "The reference deduction_axiom1 was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["unfold fold_right, fold_left.", "intro x1; intro x2; intro xs.", "qsimpl time: 1 use: multi_imp,deduction_modus_ponens.", "-", "qsimpl time: 1 use: multi_imp,deduction_impp_arg_switch,deduction_modus_ponens.", "*", "qsimpl time: 1 use: multi_imp,deduction_impp_arg_switch,deduction_impp_trans,deduction_modus_ponens.", "**", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "***", "apply H with (x := x1) (y := x2).", "****"], "tactic": "apply deduction_axiom2 with (x := x2) (y := x2) (z := x2).", "exn": "The reference deduction_axiom2 was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["unfold fold_right, fold_left.", "intro x1; intro x2; intro xs.", "qsimpl time: 1 use: multi_imp,deduction_modus_ponens.", "-", "qsimpl time: 1 use: multi_imp,deduction_impp_arg_switch,deduction_modus_ponens.", "*", "qsimpl time: 1 use: multi_imp,deduction_impp_arg_switch,deduction_impp_trans,deduction_modus_ponens.", "**", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "***", "apply H with (x := x1) (y := x2).", "****"], "tactic": "***", "exn": "Wrong bullet ***: Current bullet **** is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["unfold fold_right, fold_left.", "intro x1; intro x2; intro xs.", "qsimpl time: 1 use: multi_imp,deduction_modus_ponens.", "-", "qsimpl time: 1 use: multi_imp,deduction_impp_arg_switch,deduction_modus_ponens.", "*", "qsimpl time: 1 use: multi_imp,deduction_impp_arg_switch,deduction_impp_trans,deduction_modus_ponens.", "**", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "***", "apply H with (x := x1) (y := x2).", "****", "shelve."], "tactic": "***", "exn": "Wrong bullet ***: Expecting ****.", "type": "wrong_bullet", "handled": true}, {"ctx": ["unfold fold_right, fold_left.", "intro x1; intro x2; intro xs.", "qsimpl time: 1 use: multi_imp,deduction_modus_ponens.", "-", "qsimpl time: 1 use: multi_imp,deduction_impp_arg_switch,deduction_modus_ponens.", "*", "qsimpl time: 1 use: multi_imp,deduction_impp_arg_switch,deduction_impp_trans,deduction_modus_ponens.", "**", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "***", "apply H with (x := x1) (y := x2).", "****", "shelve.", "****"], "tactic": "apply deduction_impp_arg_switch with (y := x2).", "exn": "In environment L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr Mono : Monotonicity L Gamma prodp x1, x2 : expr xs : list expr H : forall (Phi : context) (x y : expr), Phi x -> Phi (x --> y) -> Phi y H0 : |-- x1 --> x2 X : expr H1 : forall (Phi : context) (x y z : expr), Phi (x --> y --> z) -> Phi (y --> x --> z) X0 : expr H4 : forall (Phi : context) (x y z : expr), Phi (x --> y) -> Phi (y --> z) -> Phi (x --> z) X1 : expr H8 : forall (Phi : Ensemble expr) (x y : expr), Phi;; x |-- y -> Phi |-- x --> y H7 : forall (Phi : context) (x y : expr), Phi |-- x -> Phi |-- x --> y -> Phi |-- y H6 : forall (Phi : context) (x y z : expr), Phi |-- x --> y --> z -> Phi |-- y --> x --> z H2 : forall (Phi : context) (x y z : expr), Phi |-- x --> y -> Phi |-- y --> z -> Phi |-- x --> z X2 : expr Unable to unify \"(let (derivable) := ?GammaD in derivable) ?M13740 (x2 --> ?M13741 --> ?M13743)\" with \"(let (provable) := Gamma in provable) ((fix fold_right (l : list expr) : expr := match l with | nil => x1 | b :: t => prodp b (fold_right t) end) xs --> (fix fold_right (l : list expr) : expr := match l with | nil => x1 --> x2 | b :: t => prodp b (fold_right t) end) xs)\".", "type": "cannot_unify", "handled": true}, {"ctx": ["unfold fold_right, fold_left.", "intro x1; intro x2; intro xs.", "qsimpl time: 1 use: multi_imp,deduction_modus_ponens.", "-", "qsimpl time: 1 use: multi_imp,deduction_impp_arg_switch,deduction_modus_ponens.", "*", "qsimpl time: 1 use: multi_imp,deduction_impp_arg_switch,deduction_impp_trans,deduction_modus_ponens.", "**", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "***", "apply H with (x := x1) (y := x2).", "****", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp."], "tactic": "**", "exn": "Wrong bullet **: Current bullet **** is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["unfold fold_right, fold_left.", "intro x1; intro x2; intro xs.", "qsimpl time: 1 use: multi_imp,deduction_modus_ponens.", "-", "qsimpl time: 1 use: multi_imp,deduction_impp_arg_switch,deduction_modus_ponens.", "*", "qsimpl time: 1 use: multi_imp,deduction_impp_arg_switch,deduction_impp_trans,deduction_modus_ponens.", "**", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "***", "apply H with (x := x1) (y := x2).", "****", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve."], "tactic": "**", "exn": "Wrong bullet **: Expecting ***.", "type": "wrong_bullet", "handled": true}, {"ctx": ["unfold fold_right, fold_left.", "intro x1; intro x2; intro xs.", "qsimpl time: 1 use: multi_imp,deduction_modus_ponens.", "-", "qsimpl time: 1 use: multi_imp,deduction_impp_arg_switch,deduction_modus_ponens.", "*", "qsimpl time: 1 use: multi_imp,deduction_impp_arg_switch,deduction_impp_trans,deduction_modus_ponens.", "**", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "***", "apply H with (x := x1) (y := x2).", "****", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "***"], "tactic": "apply deduction_impp_trans with (z := x2).", "exn": "In environment L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr Mono : Monotonicity L Gamma prodp x1, x2 : expr xs : list expr H : forall (Phi : context) (x y : expr), Phi x -> Phi (x --> y) -> Phi y H0 : |-- x1 --> x2 X : expr H1 : forall (Phi : context) (x y z : expr), Phi (x --> y --> z) -> Phi (y --> x --> z) X0 : expr H5 : forall (Phi : context) (x y : expr), Phi |-- x -> Phi |-- x --> y -> Phi |-- y H4 : forall (Phi : context) (x y z : expr), Phi |-- x --> y -> Phi |-- y --> z -> Phi |-- x --> z H3 : forall (Phi : context) (x y z : expr), Phi |-- x --> y --> z -> Phi |-- y --> x --> z X1 : expr Unable to unify \"(let (derivable) := ?GammaD in derivable) ?M21410 (?M21411 --> x2)\" with \"BasicSequentCalculus L {| derivable := fun X2 : context => X2 |}\".", "type": "cannot_unify", "handled": true}, {"ctx": ["unfold fold_right, fold_left.", "intro x1; intro x2; intro xs.", "qsimpl time: 1 use: multi_imp,deduction_modus_ponens.", "-", "qsimpl time: 1 use: multi_imp,deduction_impp_arg_switch,deduction_modus_ponens.", "*", "qsimpl time: 1 use: multi_imp,deduction_impp_arg_switch,deduction_impp_trans,deduction_modus_ponens.", "**", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "***", "apply H with (x := x1) (y := x2).", "****", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "***", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp."], "tactic": "***", "exn": "Wrong bullet ***: Current bullet *** is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["unfold fold_right, fold_left.", "intro x1; intro x2; intro xs.", "qsimpl time: 1 use: multi_imp,deduction_modus_ponens.", "-", "qsimpl time: 1 use: multi_imp,deduction_impp_arg_switch,deduction_modus_ponens.", "*", "qsimpl time: 1 use: multi_imp,deduction_impp_arg_switch,deduction_impp_trans,deduction_modus_ponens.", "**", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "***", "apply H with (x := x1) (y := x2).", "****", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "***", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "***"], "tactic": "apply deduction_impp_intros with (y := x2).", "exn": "In environment L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr Mono : Monotonicity L Gamma prodp x1, x2 : expr xs : list expr H : forall (Phi : context) (x y : expr), Phi x -> Phi (x --> y) -> Phi y H0 : |-- x1 --> x2 X : expr H1 : forall (Phi : context) (x y z : expr), Phi (x --> y --> z) -> Phi (y --> x --> z) X0 : expr H5 : forall (Phi : context) (x y : expr), Phi |-- x -> Phi |-- x --> y -> Phi |-- y H4 : forall (Phi : context) (x y z : expr), Phi |-- x --> y -> Phi |-- y --> z -> Phi |-- x --> z H3 : forall (Phi : context) (x y z : expr), Phi |-- x --> y --> z -> Phi |-- y --> x --> z X1 : expr Unable to unify \"(let (derivable) := ?Gamma in derivable) ?M28839 (?M28840 --> x2)\" with \"MinimumSequentCalculus L {| derivable := fun X2 : context => X2 |}\".", "type": "cannot_unify", "handled": true}, {"ctx": ["unfold fold_right, fold_left.", "intro x1; intro x2; intro xs.", "qsimpl time: 1 use: multi_imp,deduction_modus_ponens.", "-", "qsimpl time: 1 use: multi_imp,deduction_impp_arg_switch,deduction_modus_ponens.", "*", "qsimpl time: 1 use: multi_imp,deduction_impp_arg_switch,deduction_impp_trans,deduction_modus_ponens.", "**", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "***", "apply H with (x := x1) (y := x2).", "****", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "***", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "***", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "****"], "tactic": "apply deduction_axiom2 with (x := x1) (y := x2) (z := x2).", "exn": "The reference deduction_axiom2 was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["unfold fold_right, fold_left.", "intro x1; intro x2; intro xs.", "qsimpl time: 1 use: multi_imp,deduction_modus_ponens.", "-", "qsimpl time: 1 use: multi_imp,deduction_impp_arg_switch,deduction_modus_ponens.", "*", "qsimpl time: 1 use: multi_imp,deduction_impp_arg_switch,deduction_impp_trans,deduction_modus_ponens.", "**", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "***", "apply H with (x := x1) (y := x2).", "****", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "***", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "***", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "****"], "tactic": "****", "exn": "Wrong bullet ****: Current bullet **** is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["unfold fold_right, fold_left.", "intro x1; intro x2; intro xs.", "qsimpl time: 1 use: multi_imp,deduction_modus_ponens.", "-", "qsimpl time: 1 use: multi_imp,deduction_impp_arg_switch,deduction_modus_ponens.", "*", "qsimpl time: 1 use: multi_imp,deduction_impp_arg_switch,deduction_impp_trans,deduction_modus_ponens.", "**", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "***", "apply H with (x := x1) (y := x2).", "****", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "***", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "***", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "****", "shelve.", "****"], "tactic": "apply deduction_axiom1 with (x := x1) (y := x2).", "exn": "The reference deduction_axiom1 was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["unfold fold_right, fold_left.", "intro x1; intro x2; intro xs.", "qsimpl time: 1 use: multi_imp,deduction_modus_ponens.", "-", "qsimpl time: 1 use: multi_imp,deduction_impp_arg_switch,deduction_modus_ponens.", "*", "qsimpl time: 1 use: multi_imp,deduction_impp_arg_switch,deduction_impp_trans,deduction_modus_ponens.", "**", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "***", "apply H with (x := x1) (y := x2).", "****", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "***", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "***", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "****", "shelve.", "****"], "tactic": "****", "exn": "Wrong bullet ****: Current bullet **** is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["unfold fold_right, fold_left.", "intro x1; intro x2; intro xs.", "qsimpl time: 1 use: multi_imp,deduction_modus_ponens.", "-", "qsimpl time: 1 use: multi_imp,deduction_impp_arg_switch,deduction_modus_ponens.", "*", "qsimpl time: 1 use: multi_imp,deduction_impp_arg_switch,deduction_impp_trans,deduction_modus_ponens.", "**", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "***", "apply H with (x := x1) (y := x2).", "****", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "***", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "***", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "****", "shelve.", "****", "shelve.", "****"], "tactic": "apply deduction_axiom2 with (x := x2) (y := x2) (z := x2).", "exn": "The reference deduction_axiom2 was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["unfold fold_right, fold_left.", "intro x1; intro x2; intro xs.", "qsimpl time: 1 use: multi_imp,deduction_modus_ponens.", "-", "qsimpl time: 1 use: multi_imp,deduction_impp_arg_switch,deduction_modus_ponens.", "*", "qsimpl time: 1 use: multi_imp,deduction_impp_arg_switch,deduction_impp_trans,deduction_modus_ponens.", "**", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "***", "apply H with (x := x1) (y := x2).", "****", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "***", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "***", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "****", "shelve.", "****", "shelve.", "****"], "tactic": "**", "exn": "Wrong bullet **: Current bullet **** is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["unfold fold_right, fold_left.", "intro x1; intro x2; intro xs.", "qsimpl time: 1 use: multi_imp,deduction_modus_ponens.", "-", "qsimpl time: 1 use: multi_imp,deduction_impp_arg_switch,deduction_modus_ponens.", "*", "qsimpl time: 1 use: multi_imp,deduction_impp_arg_switch,deduction_impp_trans,deduction_modus_ponens.", "**", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "***", "apply H with (x := x1) (y := x2).", "****", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "***", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "***", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "****", "shelve.", "****", "shelve.", "****", "shelve."], "tactic": "**", "exn": "Wrong bullet **: Expecting ****.", "type": "wrong_bullet", "handled": true}, {"ctx": ["unfold fold_right, fold_left.", "intro x1; intro x2; intro xs.", "qsimpl time: 1 use: multi_imp,deduction_modus_ponens.", "-", "qsimpl time: 1 use: multi_imp,deduction_impp_arg_switch,deduction_modus_ponens.", "*", "qsimpl time: 1 use: multi_imp,deduction_impp_arg_switch,deduction_impp_trans,deduction_modus_ponens.", "**", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "***", "apply H with (x := x1) (y := x2).", "****", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "***", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "***", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "****", "shelve.", "****", "shelve.", "****", "shelve.", "****"], "tactic": "apply deduction_impp_arg_switch with (y := x2).", "exn": "In environment L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr Mono : Monotonicity L Gamma prodp x1, x2 : expr xs : list expr H : forall (Phi : context) (x y : expr), Phi x -> Phi (x --> y) -> Phi y H0 : |-- x1 --> x2 X : expr H1 : forall (Phi : context) (x y z : expr), Phi (x --> y --> z) -> Phi (y --> x --> z) X0 : expr H5 : forall (Phi : context) (x y : expr), Phi |-- x -> Phi |-- x --> y -> Phi |-- y H4 : forall (Phi : context) (x y z : expr), Phi |-- x --> y -> Phi |-- y --> z -> Phi |-- x --> z H3 : forall (Phi : context) (x y z : expr), Phi |-- x --> y --> z -> Phi |-- y --> x --> z X1 : expr Unable to unify \"(let (derivable) := ?GammaD in derivable) ?M35730 (x2 --> ?M35731 --> ?M35733)\" with \"BasicSequentCalculus L {| derivable := fun X2 : context => X2 |}\".", "type": "cannot_unify", "handled": true}, {"ctx": ["unfold fold_right, fold_left.", "intro x1; intro x2; intro xs.", "qsimpl time: 1 use: multi_imp,deduction_modus_ponens.", "-", "qsimpl time: 1 use: multi_imp,deduction_impp_arg_switch,deduction_modus_ponens.", "*", "qsimpl time: 1 use: multi_imp,deduction_impp_arg_switch,deduction_impp_trans,deduction_modus_ponens.", "**", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "***", "apply H with (x := x1) (y := x2).", "****", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "***", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "***", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "****", "shelve.", "****", "shelve.", "****", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp."], "tactic": "***", "exn": "Wrong bullet ***: Current bullet **** is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["unfold fold_right, fold_left.", "intro x1; intro x2; intro xs.", "qsimpl time: 1 use: multi_imp,deduction_modus_ponens.", "-", "qsimpl time: 1 use: multi_imp,deduction_impp_arg_switch,deduction_modus_ponens.", "*", "qsimpl time: 1 use: multi_imp,deduction_impp_arg_switch,deduction_impp_trans,deduction_modus_ponens.", "**", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "***", "apply H with (x := x1) (y := x2).", "****", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "***", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "***", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "****", "shelve.", "****", "shelve.", "****", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve."], "tactic": "***", "exn": "Wrong bullet ***: Expecting ****.", "type": "wrong_bullet", "handled": true}, {"ctx": ["unfold fold_right, fold_left.", "intro x1; intro x2; intro xs.", "qsimpl time: 1 use: multi_imp,deduction_modus_ponens.", "-", "qsimpl time: 1 use: multi_imp,deduction_impp_arg_switch,deduction_modus_ponens.", "*", "qsimpl time: 1 use: multi_imp,deduction_impp_arg_switch,deduction_impp_trans,deduction_modus_ponens.", "**", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "***", "apply H with (x := x1) (y := x2).", "****", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "***", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "***", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "****", "shelve.", "****", "shelve.", "****", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "****"], "tactic": "apply deduction_impp_trans with (z := x2).", "exn": "In environment L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr Mono : Monotonicity L Gamma prodp x1, x2 : expr xs : list expr H : forall (Phi : context) (x y : expr), Phi x -> Phi (x --> y) -> Phi y H0 : |-- x1 --> x2 X : expr H1 : forall (Phi : context) (x y z : expr), Phi (x --> y --> z) -> Phi (y --> x --> z) X0 : expr H5 : forall (Phi : context) (x y : expr), Phi |-- x -> Phi |-- x --> y -> Phi |-- y H4 : forall (Phi : context) (x y z : expr), Phi |-- x --> y -> Phi |-- y --> z -> Phi |-- x --> z H3 : forall (Phi : context) (x y z : expr), Phi |-- x --> y --> z -> Phi |-- y --> x --> z X1 : expr Unable to unify \"(let (derivable) := ?GammaD in derivable) ?M43159 (?M43160 --> x2)\" with \"MinimumSequentCalculus L {| derivable := fun X2 : context => X2 |}\".", "type": "cannot_unify", "handled": true}, {"ctx": ["unfold fold_right, fold_left.", "intro x1; intro x2; intro xs.", "qsimpl time: 1 use: multi_imp,deduction_modus_ponens.", "-", "qsimpl time: 1 use: multi_imp,deduction_impp_arg_switch,deduction_modus_ponens.", "*", "qsimpl time: 1 use: multi_imp,deduction_impp_arg_switch,deduction_impp_trans,deduction_modus_ponens.", "**", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "***", "apply H with (x := x1) (y := x2).", "****", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "***", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "***", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "****", "shelve.", "****", "shelve.", "****", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp."], "tactic": "****", "exn": "Wrong bullet ****: Current bullet **** is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["unfold fold_right, fold_left.", "intro x1; intro x2; intro xs.", "qsimpl time: 1 use: multi_imp,deduction_modus_ponens.", "-", "qsimpl time: 1 use: multi_imp,deduction_impp_arg_switch,deduction_modus_ponens.", "*", "qsimpl time: 1 use: multi_imp,deduction_impp_arg_switch,deduction_impp_trans,deduction_modus_ponens.", "**", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "***", "apply H with (x := x1) (y := x2).", "****", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "***", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "***", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "****", "shelve.", "****", "shelve.", "****", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "****"], "tactic": "apply deduction_impp_intros with (y := x2).", "exn": "In environment L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr Mono : Monotonicity L Gamma prodp x1, x2 : expr xs : list expr H : forall (Phi : context) (x y : expr), Phi x -> Phi (x --> y) -> Phi y H0 : |-- x1 --> x2 X : expr H1 : forall (Phi : context) (x y z : expr), Phi (x --> y --> z) -> Phi (y --> x --> z) X0 : expr H5 : forall (Phi : context) (x y : expr), Phi |-- x -> Phi |-- x --> y -> Phi |-- y H4 : forall (Phi : context) (x y z : expr), Phi |-- x --> y -> Phi |-- y --> z -> Phi |-- x --> z H3 : forall (Phi : context) (x y z : expr), Phi |-- x --> y --> z -> Phi |-- y --> x --> z X1 : expr Unable to unify \"(let (derivable) := ?Gamma in derivable) ?M50050 (?M50051 --> x2)\" with \"MinimumSequentCalculus L {| derivable := fun X2 : context => X2 |}\".", "type": "cannot_unify", "handled": true}, {"ctx": ["unfold fold_right, fold_left.", "intro x1; intro x2; intro xs.", "qsimpl time: 1 use: multi_imp,deduction_modus_ponens.", "-", "qsimpl time: 1 use: multi_imp,deduction_impp_arg_switch,deduction_modus_ponens.", "*", "qsimpl time: 1 use: multi_imp,deduction_impp_arg_switch,deduction_impp_trans,deduction_modus_ponens.", "**", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "***", "apply H with (x := x1) (y := x2).", "****", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "***", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "***", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "****", "shelve.", "****", "shelve.", "****", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "*****"], "tactic": "apply deduction_axiom2 with (x := x1) (y := x2) (z := x2).", "exn": "The reference deduction_axiom2 was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["unfold fold_right, fold_left.", "intro x1; intro x2; intro xs.", "qsimpl time: 1 use: multi_imp,deduction_modus_ponens.", "-", "qsimpl time: 1 use: multi_imp,deduction_impp_arg_switch,deduction_modus_ponens.", "*", "qsimpl time: 1 use: multi_imp,deduction_impp_arg_switch,deduction_impp_trans,deduction_modus_ponens.", "**", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "***", "apply H with (x := x1) (y := x2).", "****", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "***", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "***", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "****", "shelve.", "****", "shelve.", "****", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "*****"], "tactic": "*****", "exn": "Wrong bullet *****: Current bullet ***** is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["unfold fold_right, fold_left.", "intro x1; intro x2; intro xs.", "qsimpl time: 1 use: multi_imp,deduction_modus_ponens.", "-", "qsimpl time: 1 use: multi_imp,deduction_impp_arg_switch,deduction_modus_ponens.", "*", "qsimpl time: 1 use: multi_imp,deduction_impp_arg_switch,deduction_impp_trans,deduction_modus_ponens.", "**", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "***", "apply H with (x := x1) (y := x2).", "****", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "***", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "***", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "****", "shelve.", "****", "shelve.", "****", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "*****", "shelve.", "*****"], "tactic": "apply deduction_axiom1 with (x := x1) (y := x2).", "exn": "The reference deduction_axiom1 was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["unfold fold_right, fold_left.", "intro x1; intro x2; intro xs.", "qsimpl time: 1 use: multi_imp,deduction_modus_ponens.", "-", "qsimpl time: 1 use: multi_imp,deduction_impp_arg_switch,deduction_modus_ponens.", "*", "qsimpl time: 1 use: multi_imp,deduction_impp_arg_switch,deduction_impp_trans,deduction_modus_ponens.", "**", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "***", "apply H with (x := x1) (y := x2).", "****", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "***", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "***", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "****", "shelve.", "****", "shelve.", "****", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "*****", "shelve.", "*****"], "tactic": "*****", "exn": "Wrong bullet *****: Current bullet ***** is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["unfold fold_right, fold_left.", "intro x1; intro x2; intro xs.", "qsimpl time: 1 use: multi_imp,deduction_modus_ponens.", "-", "qsimpl time: 1 use: multi_imp,deduction_impp_arg_switch,deduction_modus_ponens.", "*", "qsimpl time: 1 use: multi_imp,deduction_impp_arg_switch,deduction_impp_trans,deduction_modus_ponens.", "**", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "***", "apply H with (x := x1) (y := x2).", "****", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "***", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "***", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "****", "shelve.", "****", "shelve.", "****", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "*****", "shelve.", "*****", "shelve.", "*****"], "tactic": "apply deduction_axiom2 with (x := x2) (y := x2) (z := x2).", "exn": "The reference deduction_axiom2 was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["unfold fold_right, fold_left.", "intro x1; intro x2; intro xs.", "qsimpl time: 1 use: multi_imp,deduction_modus_ponens.", "-", "qsimpl time: 1 use: multi_imp,deduction_impp_arg_switch,deduction_modus_ponens.", "*", "qsimpl time: 1 use: multi_imp,deduction_impp_arg_switch,deduction_impp_trans,deduction_modus_ponens.", "**", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "***", "apply H with (x := x1) (y := x2).", "****", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "***", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "***", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "****", "shelve.", "****", "shelve.", "****", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "*****", "shelve.", "*****", "shelve.", "*****"], "tactic": "apply deduction_impp_arg_switch with (y := x2).", "exn": "In environment L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr Mono : Monotonicity L Gamma prodp x1, x2 : expr xs : list expr H : forall (Phi : context) (x y : expr), Phi x -> Phi (x --> y) -> Phi y H0 : |-- x1 --> x2 X : expr H1 : forall (Phi : context) (x y z : expr), Phi (x --> y --> z) -> Phi (y --> x --> z) X0 : expr H5 : forall (Phi : context) (x y : expr), Phi |-- x -> Phi |-- x --> y -> Phi |-- y H4 : forall (Phi : context) (x y z : expr), Phi |-- x --> y -> Phi |-- y --> z -> Phi |-- x --> z H3 : forall (Phi : context) (x y z : expr), Phi |-- x --> y --> z -> Phi |-- y --> x --> z X1 : expr Unable to unify \"(let (derivable) := ?GammaD in derivable) ?M56941 (x2 --> ?M56942 --> ?M56944)\" with \"MinimumSequentCalculus L {| derivable := fun X2 : context => X2 |}\".", "type": "cannot_unify", "handled": true}, {"ctx": ["unfold fold_right, fold_left.", "intro x1; intro x2; intro xs.", "qsimpl time: 1 use: multi_imp,deduction_modus_ponens.", "-", "qsimpl time: 1 use: multi_imp,deduction_impp_arg_switch,deduction_modus_ponens.", "*", "qsimpl time: 1 use: multi_imp,deduction_impp_arg_switch,deduction_impp_trans,deduction_modus_ponens.", "**", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "***", "apply H with (x := x1) (y := x2).", "****", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "***", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "***", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "****", "shelve.", "****", "shelve.", "****", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "*****", "shelve.", "*****", "shelve.", "*****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp."], "tactic": "*", "exn": "Wrong bullet *: Current bullet ***** is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["unfold fold_right, fold_left.", "intro x1; intro x2; intro xs.", "qsimpl time: 1 use: multi_imp,deduction_modus_ponens.", "-", "qsimpl time: 1 use: multi_imp,deduction_impp_arg_switch,deduction_modus_ponens.", "*", "qsimpl time: 1 use: multi_imp,deduction_impp_arg_switch,deduction_impp_trans,deduction_modus_ponens.", "**", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "***", "apply H with (x := x1) (y := x2).", "****", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "***", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "***", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "****", "shelve.", "****", "shelve.", "****", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "*****", "shelve.", "*****", "shelve.", "*****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve."], "tactic": "*", "exn": "Wrong bullet *: Expecting *****.", "type": "wrong_bullet", "handled": true}, {"ctx": ["unfold fold_right, fold_left.", "intro x1; intro x2; intro xs.", "qsimpl time: 1 use: multi_imp,deduction_modus_ponens.", "-", "qsimpl time: 1 use: multi_imp,deduction_impp_arg_switch,deduction_modus_ponens.", "*", "qsimpl time: 1 use: multi_imp,deduction_impp_arg_switch,deduction_impp_trans,deduction_modus_ponens.", "**", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "***", "apply H with (x := x1) (y := x2).", "****", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "***", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "***", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "****", "shelve.", "****", "shelve.", "****", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "*****", "shelve.", "*****", "shelve.", "*****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "*****"], "tactic": "apply deduction_impp_trans with (z := x2).", "exn": "In environment L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr Mono : Monotonicity L Gamma prodp x1, x2 : expr xs : list expr H : forall (Phi : context) (x y : expr), Phi x -> Phi (x --> y) -> Phi y H0 : |-- x1 --> x2 X : expr H1 : forall (Phi : context) (x y z : expr), Phi (x --> y --> z) -> Phi (y --> x --> z) X0 : expr H5 : forall (Phi : context) (x y : expr), Phi |-- x -> Phi |-- x --> y -> Phi |-- y H4 : forall (Phi : context) (x y z : expr), Phi |-- x --> y -> Phi |-- y --> z -> Phi |-- x --> z H3 : forall (Phi : context) (x y z : expr), Phi |-- x --> y --> z -> Phi |-- y --> x --> z X1 : expr Unable to unify \"(let (derivable) := ?GammaD in derivable) ?M63832 (?M63833 --> x2)\" with \"BasicSequentCalculus L {| derivable := fun X2 : context => X2 |}\".", "type": "cannot_unify", "handled": true}, {"ctx": ["unfold fold_right, fold_left.", "intro x1; intro x2; intro xs.", "qsimpl time: 1 use: multi_imp,deduction_modus_ponens.", "-", "qsimpl time: 1 use: multi_imp,deduction_impp_arg_switch,deduction_modus_ponens.", "*", "qsimpl time: 1 use: multi_imp,deduction_impp_arg_switch,deduction_impp_trans,deduction_modus_ponens.", "**", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "***", "apply H with (x := x1) (y := x2).", "****", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "***", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "***", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "****", "shelve.", "****", "shelve.", "****", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "*****", "shelve.", "*****", "shelve.", "*****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "*****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp."], "tactic": "**", "exn": "Wrong bullet **: Current bullet ***** is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["unfold fold_right, fold_left.", "intro x1; intro x2; intro xs.", "qsimpl time: 1 use: multi_imp,deduction_modus_ponens.", "-", "qsimpl time: 1 use: multi_imp,deduction_impp_arg_switch,deduction_modus_ponens.", "*", "qsimpl time: 1 use: multi_imp,deduction_impp_arg_switch,deduction_impp_trans,deduction_modus_ponens.", "**", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "***", "apply H with (x := x1) (y := x2).", "****", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "***", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "***", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "****", "shelve.", "****", "shelve.", "****", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "*****", "shelve.", "*****", "shelve.", "*****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "*****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve."], "tactic": "**", "exn": "Wrong bullet **: Expecting *****.", "type": "wrong_bullet", "handled": true}, {"ctx": ["unfold fold_right, fold_left.", "intro x1; intro x2; intro xs.", "qsimpl time: 1 use: multi_imp,deduction_modus_ponens.", "-", "qsimpl time: 1 use: multi_imp,deduction_impp_arg_switch,deduction_modus_ponens.", "*", "qsimpl time: 1 use: multi_imp,deduction_impp_arg_switch,deduction_impp_trans,deduction_modus_ponens.", "**", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "***", "apply H with (x := x1) (y := x2).", "****", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "***", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "***", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "****", "shelve.", "****", "shelve.", "****", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "*****", "shelve.", "*****", "shelve.", "*****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "*****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "*****"], "tactic": "apply deduction_impp_intros with (y := x2).", "exn": "In environment L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr Mono : Monotonicity L Gamma prodp x1, x2 : expr xs : list expr H : forall (Phi : context) (x y : expr), Phi x -> Phi (x --> y) -> Phi y H0 : |-- x1 --> x2 X : expr H1 : forall (Phi : context) (x y z : expr), Phi (x --> y --> z) -> Phi (y --> x --> z) X0 : expr H5 : forall (Phi : context) (x y : expr), Phi |-- x -> Phi |-- x --> y -> Phi |-- y H4 : forall (Phi : context) (x y z : expr), Phi |-- x --> y -> Phi |-- y --> z -> Phi |-- x --> z H3 : forall (Phi : context) (x y z : expr), Phi |-- x --> y --> z -> Phi |-- y --> x --> z X1 : expr Unable to unify \"(let (derivable) := ?Gamma in derivable) ?M71261 (?M71262 --> x2)\" with \"MinimumSequentCalculus L {| derivable := fun X2 : context => X2 |}\".", "type": "cannot_unify", "handled": true}, {"ctx": ["unfold fold_right, fold_left.", "intro x1; intro x2; intro xs.", "qsimpl time: 1 use: multi_imp,deduction_modus_ponens.", "-", "qsimpl time: 1 use: multi_imp,deduction_impp_arg_switch,deduction_modus_ponens.", "*", "qsimpl time: 1 use: multi_imp,deduction_impp_arg_switch,deduction_impp_trans,deduction_modus_ponens.", "**", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "***", "apply H with (x := x1) (y := x2).", "****", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "***", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "***", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "****", "shelve.", "****", "shelve.", "****", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "*****", "shelve.", "*****", "shelve.", "*****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "*****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "*****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp."], "tactic": "***", "exn": "Wrong bullet ***: Current bullet ***** is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["unfold fold_right, fold_left.", "intro x1; intro x2; intro xs.", "qsimpl time: 1 use: multi_imp,deduction_modus_ponens.", "-", "qsimpl time: 1 use: multi_imp,deduction_impp_arg_switch,deduction_modus_ponens.", "*", "qsimpl time: 1 use: multi_imp,deduction_impp_arg_switch,deduction_impp_trans,deduction_modus_ponens.", "**", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "***", "apply H with (x := x1) (y := x2).", "****", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "***", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "***", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "****", "shelve.", "****", "shelve.", "****", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "*****", "shelve.", "*****", "shelve.", "*****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "*****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "*****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve."], "tactic": "***", "exn": "Wrong bullet ***: Expecting *****.", "type": "wrong_bullet", "handled": true}, {"ctx": ["unfold fold_right, fold_left.", "intro x1; intro x2; intro xs.", "qsimpl time: 1 use: multi_imp,deduction_modus_ponens.", "-", "qsimpl time: 1 use: multi_imp,deduction_impp_arg_switch,deduction_modus_ponens.", "*", "qsimpl time: 1 use: multi_imp,deduction_impp_arg_switch,deduction_impp_trans,deduction_modus_ponens.", "**", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "***", "apply H with (x := x1) (y := x2).", "****", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "***", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "***", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "****", "shelve.", "****", "shelve.", "****", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "*****", "shelve.", "*****", "shelve.", "*****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "*****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "*****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "*****"], "tactic": "apply deduction_axiom2 with (x := x1) (y := x2) (z := x2).", "exn": "The reference deduction_axiom2 was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["unfold fold_right, fold_left.", "intro x1; intro x2; intro xs.", "qsimpl time: 1 use: multi_imp,deduction_modus_ponens.", "-", "qsimpl time: 1 use: multi_imp,deduction_impp_arg_switch,deduction_modus_ponens.", "*", "qsimpl time: 1 use: multi_imp,deduction_impp_arg_switch,deduction_impp_trans,deduction_modus_ponens.", "**", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "***", "apply H with (x := x1) (y := x2).", "****", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "***", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "***", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "****", "shelve.", "****", "shelve.", "****", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "*****", "shelve.", "*****", "shelve.", "*****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "*****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "*****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "*****"], "tactic": "****", "exn": "Wrong bullet ****: Current bullet ***** is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["unfold fold_right, fold_left.", "intro x1; intro x2; intro xs.", "qsimpl time: 1 use: multi_imp,deduction_modus_ponens.", "-", "qsimpl time: 1 use: multi_imp,deduction_impp_arg_switch,deduction_modus_ponens.", "*", "qsimpl time: 1 use: multi_imp,deduction_impp_arg_switch,deduction_impp_trans,deduction_modus_ponens.", "**", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "***", "apply H with (x := x1) (y := x2).", "****", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "***", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "***", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "****", "shelve.", "****", "shelve.", "****", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "*****", "shelve.", "*****", "shelve.", "*****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "*****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "*****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "*****", "shelve."], "tactic": "****", "exn": "Wrong bullet ****: Expecting *****.", "type": "wrong_bullet", "handled": true}, {"ctx": ["unfold fold_right, fold_left.", "intro x1; intro x2; intro xs.", "qsimpl time: 1 use: multi_imp,deduction_modus_ponens.", "-", "qsimpl time: 1 use: multi_imp,deduction_impp_arg_switch,deduction_modus_ponens.", "*", "qsimpl time: 1 use: multi_imp,deduction_impp_arg_switch,deduction_impp_trans,deduction_modus_ponens.", "**", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "***", "apply H with (x := x1) (y := x2).", "****", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "***", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "***", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "****", "shelve.", "****", "shelve.", "****", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "*****", "shelve.", "*****", "shelve.", "*****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "*****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "*****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "*****", "shelve.", "*****"], "tactic": "apply deduction_axiom1 with (x := x1) (y := x2).", "exn": "The reference deduction_axiom1 was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["unfold fold_right, fold_left.", "intro x1; intro x2; intro xs.", "qsimpl time: 1 use: multi_imp,deduction_modus_ponens.", "-", "qsimpl time: 1 use: multi_imp,deduction_impp_arg_switch,deduction_modus_ponens.", "*", "qsimpl time: 1 use: multi_imp,deduction_impp_arg_switch,deduction_impp_trans,deduction_modus_ponens.", "**", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "***", "apply H with (x := x1) (y := x2).", "****", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "***", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "***", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "****", "shelve.", "****", "shelve.", "****", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "*****", "shelve.", "*****", "shelve.", "*****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "*****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "*****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "*****", "shelve.", "*****"], "tactic": "****", "exn": "Wrong bullet ****: Current bullet ***** is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["unfold fold_right, fold_left.", "intro x1; intro x2; intro xs.", "qsimpl time: 1 use: multi_imp,deduction_modus_ponens.", "-", "qsimpl time: 1 use: multi_imp,deduction_impp_arg_switch,deduction_modus_ponens.", "*", "qsimpl time: 1 use: multi_imp,deduction_impp_arg_switch,deduction_impp_trans,deduction_modus_ponens.", "**", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "***", "apply H with (x := x1) (y := x2).", "****", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "***", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "***", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "****", "shelve.", "****", "shelve.", "****", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "*****", "shelve.", "*****", "shelve.", "*****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "*****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "*****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "*****", "shelve.", "*****", "shelve.", "****"], "tactic": "apply deduction_axiom2 with (x := x2) (y := x2) (z := x2).", "exn": "The reference deduction_axiom2 was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["unfold fold_right, fold_left.", "intro x1; intro x2; intro xs.", "qsimpl time: 1 use: multi_imp,deduction_modus_ponens.", "-", "qsimpl time: 1 use: multi_imp,deduction_impp_arg_switch,deduction_modus_ponens.", "*", "qsimpl time: 1 use: multi_imp,deduction_impp_arg_switch,deduction_impp_trans,deduction_modus_ponens.", "**", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "***", "apply H with (x := x1) (y := x2).", "****", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "***", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "***", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "****", "shelve.", "****", "shelve.", "****", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "*****", "shelve.", "*****", "shelve.", "*****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "*****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "*****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "*****", "shelve.", "*****", "shelve.", "****"], "tactic": "***", "exn": "Wrong bullet ***: Current bullet **** is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["unfold fold_right, fold_left.", "intro x1; intro x2; intro xs.", "qsimpl time: 1 use: multi_imp,deduction_modus_ponens.", "-", "qsimpl time: 1 use: multi_imp,deduction_impp_arg_switch,deduction_modus_ponens.", "*", "qsimpl time: 1 use: multi_imp,deduction_impp_arg_switch,deduction_impp_trans,deduction_modus_ponens.", "**", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "***", "apply H with (x := x1) (y := x2).", "****", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "***", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "***", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "****", "shelve.", "****", "shelve.", "****", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "*****", "shelve.", "*****", "shelve.", "*****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "*****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "*****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "*****", "shelve.", "*****", "shelve.", "****", "shelve.", "***"], "tactic": "apply deduction_impp_arg_switch with (y := x2).", "exn": "In environment L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr Mono : Monotonicity L Gamma prodp x1, x2 : expr xs : list expr H : forall (Phi : context) (x y : expr), Phi x -> Phi (x --> y) -> Phi y H0 : |-- x1 --> x2 X : expr H1 : forall (Phi : context) (x y z : expr), Phi (x --> y --> z) -> Phi (y --> x --> z) X0 : expr H5 : forall (Phi : context) (x y : expr), Phi |-- x -> Phi |-- x --> y -> Phi |-- y H4 : forall (Phi : context) (x y z : expr), Phi |-- x --> y -> Phi |-- y --> z -> Phi |-- x --> z H3 : forall (Phi : context) (x y z : expr), Phi |-- x --> y --> z -> Phi |-- y --> x --> z X1 : expr Unable to unify \"(let (derivable) := ?GammaD in derivable) ?M78152 (x2 --> ?M78153 --> ?M78155)\" with \"BasicSequentCalculus L {| derivable := fun X2 : context => X2 |}\".", "type": "cannot_unify", "handled": true}, {"ctx": ["unfold fold_right, fold_left.", "intro x1; intro x2; intro xs.", "qsimpl time: 1 use: multi_imp,deduction_modus_ponens.", "-", "qsimpl time: 1 use: multi_imp,deduction_impp_arg_switch,deduction_modus_ponens.", "*", "qsimpl time: 1 use: multi_imp,deduction_impp_arg_switch,deduction_impp_trans,deduction_modus_ponens.", "**", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "***", "apply H with (x := x1) (y := x2).", "****", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "***", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "***", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "****", "shelve.", "****", "shelve.", "****", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "*****", "shelve.", "*****", "shelve.", "*****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "*****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "*****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "*****", "shelve.", "*****", "shelve.", "****", "shelve.", "***", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp."], "tactic": "**", "exn": "Wrong bullet **: Current bullet *** is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["unfold fold_right, fold_left.", "intro x1; intro x2; intro xs.", "qsimpl time: 1 use: multi_imp,deduction_modus_ponens.", "-", "qsimpl time: 1 use: multi_imp,deduction_impp_arg_switch,deduction_modus_ponens.", "*", "qsimpl time: 1 use: multi_imp,deduction_impp_arg_switch,deduction_impp_trans,deduction_modus_ponens.", "**", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "***", "apply H with (x := x1) (y := x2).", "****", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "***", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "***", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "****", "shelve.", "****", "shelve.", "****", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "*****", "shelve.", "*****", "shelve.", "*****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "*****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "*****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "*****", "shelve.", "*****", "shelve.", "****", "shelve.", "***", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve."], "tactic": "**", "exn": "Wrong bullet **: Expecting ***.", "type": "wrong_bullet", "handled": true}, {"ctx": ["unfold fold_right, fold_left.", "intro x1; intro x2; intro xs.", "qsimpl time: 1 use: multi_imp,deduction_modus_ponens.", "-", "qsimpl time: 1 use: multi_imp,deduction_impp_arg_switch,deduction_modus_ponens.", "*", "qsimpl time: 1 use: multi_imp,deduction_impp_arg_switch,deduction_impp_trans,deduction_modus_ponens.", "**", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "***", "apply H with (x := x1) (y := x2).", "****", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "***", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "***", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "****", "shelve.", "****", "shelve.", "****", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "*****", "shelve.", "*****", "shelve.", "*****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "*****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "*****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "*****", "shelve.", "*****", "shelve.", "****", "shelve.", "***", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "***"], "tactic": "apply deduction_impp_trans with (z := x2).", "exn": "In environment L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr Mono : Monotonicity L Gamma prodp x1, x2 : expr xs : list expr H : forall (Phi : context) (x y : expr), Phi x -> Phi (x --> y) -> Phi y H0 : |-- x1 --> x2 X : expr H1 : forall (Phi : context) (x y z : expr), Phi (x --> y --> z) -> Phi (y --> x --> z) X0 : expr H5 : forall (Phi : context) (x y : expr), Phi |-- x -> Phi |-- x --> y -> Phi |-- y H4 : forall (Phi : context) (x y z : expr), Phi |-- x --> y -> Phi |-- y --> z -> Phi |-- x --> z H3 : forall (Phi : context) (x y z : expr), Phi |-- x --> y --> z -> Phi |-- y --> x --> z X1 : expr Unable to unify \"(let (derivable) := ?GammaD in derivable) ?M85581 (?M85582 --> x2)\" with \"MinimumSequentCalculus L {| derivable := fun X2 : context => X2 |}\".", "type": "cannot_unify", "handled": true}, {"ctx": ["unfold fold_right, fold_left.", "intro x1; intro x2; intro xs.", "qsimpl time: 1 use: multi_imp,deduction_modus_ponens.", "-", "qsimpl time: 1 use: multi_imp,deduction_impp_arg_switch,deduction_modus_ponens.", "*", "qsimpl time: 1 use: multi_imp,deduction_impp_arg_switch,deduction_impp_trans,deduction_modus_ponens.", "**", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "***", "apply H with (x := x1) (y := x2).", "****", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "***", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "***", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "****", "shelve.", "****", "shelve.", "****", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "*****", "shelve.", "*****", "shelve.", "*****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "*****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "*****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "*****", "shelve.", "*****", "shelve.", "****", "shelve.", "***", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "***", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp."], "tactic": "***", "exn": "Wrong bullet ***: Current bullet *** is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["unfold fold_right, fold_left.", "intro x1; intro x2; intro xs.", "qsimpl time: 1 use: multi_imp,deduction_modus_ponens.", "-", "qsimpl time: 1 use: multi_imp,deduction_impp_arg_switch,deduction_modus_ponens.", "*", "qsimpl time: 1 use: multi_imp,deduction_impp_arg_switch,deduction_impp_trans,deduction_modus_ponens.", "**", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "***", "apply H with (x := x1) (y := x2).", "****", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "***", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "***", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "****", "shelve.", "****", "shelve.", "****", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "*****", "shelve.", "*****", "shelve.", "*****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "*****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "*****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "*****", "shelve.", "*****", "shelve.", "****", "shelve.", "***", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "***", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "***"], "tactic": "apply deduction_impp_intros with (y := x2).", "exn": "In environment L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr Mono : Monotonicity L Gamma prodp x1, x2 : expr xs : list expr H : forall (Phi : context) (x y : expr), Phi x -> Phi (x --> y) -> Phi y H0 : |-- x1 --> x2 X : expr H1 : forall (Phi : context) (x y z : expr), Phi (x --> y --> z) -> Phi (y --> x --> z) X0 : expr H5 : forall (Phi : context) (x y : expr), Phi |-- x -> Phi |-- x --> y -> Phi |-- y H4 : forall (Phi : context) (x y z : expr), Phi |-- x --> y -> Phi |-- y --> z -> Phi |-- x --> z H3 : forall (Phi : context) (x y z : expr), Phi |-- x --> y --> z -> Phi |-- y --> x --> z X1 : expr Unable to unify \"(let (derivable) := ?Gamma in derivable) ?M92472 (?M92473 --> x2)\" with \"MinimumSequentCalculus L {| derivable := fun X2 : context => X2 |}\".", "type": "cannot_unify", "handled": true}, {"ctx": ["unfold fold_right, fold_left.", "intro x1; intro x2; intro xs.", "qsimpl time: 1 use: multi_imp,deduction_modus_ponens.", "-", "qsimpl time: 1 use: multi_imp,deduction_impp_arg_switch,deduction_modus_ponens.", "*", "qsimpl time: 1 use: multi_imp,deduction_impp_arg_switch,deduction_impp_trans,deduction_modus_ponens.", "**", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "***", "apply H with (x := x1) (y := x2).", "****", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "***", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "***", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "****", "shelve.", "****", "shelve.", "****", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "*****", "shelve.", "*****", "shelve.", "*****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "*****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "*****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "*****", "shelve.", "*****", "shelve.", "****", "shelve.", "***", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "***", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "***", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "****"], "tactic": "apply deduction_axiom2 with (x := x1) (y := x2) (z := x2).", "exn": "The reference deduction_axiom2 was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["unfold fold_right, fold_left.", "intro x1; intro x2; intro xs.", "qsimpl time: 1 use: multi_imp,deduction_modus_ponens.", "-", "qsimpl time: 1 use: multi_imp,deduction_impp_arg_switch,deduction_modus_ponens.", "*", "qsimpl time: 1 use: multi_imp,deduction_impp_arg_switch,deduction_impp_trans,deduction_modus_ponens.", "**", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "***", "apply H with (x := x1) (y := x2).", "****", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "***", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "***", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "****", "shelve.", "****", "shelve.", "****", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "*****", "shelve.", "*****", "shelve.", "*****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "*****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "*****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "*****", "shelve.", "*****", "shelve.", "****", "shelve.", "***", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "***", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "***", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "****"], "tactic": "****", "exn": "Wrong bullet ****: Current bullet **** is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["unfold fold_right, fold_left.", "intro x1; intro x2; intro xs.", "qsimpl time: 1 use: multi_imp,deduction_modus_ponens.", "-", "qsimpl time: 1 use: multi_imp,deduction_impp_arg_switch,deduction_modus_ponens.", "*", "qsimpl time: 1 use: multi_imp,deduction_impp_arg_switch,deduction_impp_trans,deduction_modus_ponens.", "**", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "***", "apply H with (x := x1) (y := x2).", "****", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "***", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "***", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "****", "shelve.", "****", "shelve.", "****", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "*****", "shelve.", "*****", "shelve.", "*****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "*****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "*****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "*****", "shelve.", "*****", "shelve.", "****", "shelve.", "***", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "***", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "***", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "****", "shelve.", "****"], "tactic": "apply deduction_axiom1 with (x := x1) (y := x2).", "exn": "The reference deduction_axiom1 was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["unfold fold_right, fold_left.", "intro x1; intro x2; intro xs.", "qsimpl time: 1 use: multi_imp,deduction_modus_ponens.", "-", "qsimpl time: 1 use: multi_imp,deduction_impp_arg_switch,deduction_modus_ponens.", "*", "qsimpl time: 1 use: multi_imp,deduction_impp_arg_switch,deduction_impp_trans,deduction_modus_ponens.", "**", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "***", "apply H with (x := x1) (y := x2).", "****", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "***", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "***", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "****", "shelve.", "****", "shelve.", "****", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "*****", "shelve.", "*****", "shelve.", "*****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "*****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "*****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "*****", "shelve.", "*****", "shelve.", "****", "shelve.", "***", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "***", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "***", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "****", "shelve.", "****"], "tactic": "****", "exn": "Wrong bullet ****: Current bullet **** is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["unfold fold_right, fold_left.", "intro x1; intro x2; intro xs.", "qsimpl time: 1 use: multi_imp,deduction_modus_ponens.", "-", "qsimpl time: 1 use: multi_imp,deduction_impp_arg_switch,deduction_modus_ponens.", "*", "qsimpl time: 1 use: multi_imp,deduction_impp_arg_switch,deduction_impp_trans,deduction_modus_ponens.", "**", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "***", "apply H with (x := x1) (y := x2).", "****", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "***", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "***", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "****", "shelve.", "****", "shelve.", "****", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "*****", "shelve.", "*****", "shelve.", "*****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "*****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "*****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "*****", "shelve.", "*****", "shelve.", "****", "shelve.", "***", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "***", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "***", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "****", "shelve.", "****", "shelve.", "****"], "tactic": "apply deduction_axiom2 with (x := x2) (y := x2) (z := x2).", "exn": "The reference deduction_axiom2 was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["unfold fold_right, fold_left.", "intro x1; intro x2; intro xs.", "qsimpl time: 1 use: multi_imp,deduction_modus_ponens.", "-", "qsimpl time: 1 use: multi_imp,deduction_impp_arg_switch,deduction_modus_ponens.", "*", "qsimpl time: 1 use: multi_imp,deduction_impp_arg_switch,deduction_impp_trans,deduction_modus_ponens.", "**", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "***", "apply H with (x := x1) (y := x2).", "****", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "***", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "***", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "****", "shelve.", "****", "shelve.", "****", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "*****", "shelve.", "*****", "shelve.", "*****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "*****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "*****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "*****", "shelve.", "*****", "shelve.", "****", "shelve.", "***", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "***", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "***", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "****", "shelve.", "****", "shelve.", "****"], "tactic": "**", "exn": "Wrong bullet **: Current bullet **** is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["unfold fold_right, fold_left.", "intro x1; intro x2; intro xs.", "qsimpl time: 1 use: multi_imp,deduction_modus_ponens.", "-", "qsimpl time: 1 use: multi_imp,deduction_impp_arg_switch,deduction_modus_ponens.", "*", "qsimpl time: 1 use: multi_imp,deduction_impp_arg_switch,deduction_impp_trans,deduction_modus_ponens.", "**", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "***", "apply H with (x := x1) (y := x2).", "****", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "***", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "***", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "****", "shelve.", "****", "shelve.", "****", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "*****", "shelve.", "*****", "shelve.", "*****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "*****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "*****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "*****", "shelve.", "*****", "shelve.", "****", "shelve.", "***", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "***", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "***", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "****", "shelve.", "****", "shelve.", "****", "shelve."], "tactic": "**", "exn": "Wrong bullet **: Expecting ****.", "type": "wrong_bullet", "handled": true}, {"ctx": ["unfold fold_right, fold_left.", "intro x1; intro x2; intro xs.", "qsimpl time: 1 use: multi_imp,deduction_modus_ponens.", "-", "qsimpl time: 1 use: multi_imp,deduction_impp_arg_switch,deduction_modus_ponens.", "*", "qsimpl time: 1 use: multi_imp,deduction_impp_arg_switch,deduction_impp_trans,deduction_modus_ponens.", "**", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "***", "apply H with (x := x1) (y := x2).", "****", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "***", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "***", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "****", "shelve.", "****", "shelve.", "****", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "*****", "shelve.", "*****", "shelve.", "*****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "*****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "*****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "*****", "shelve.", "*****", "shelve.", "****", "shelve.", "***", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "***", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "***", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "****", "shelve.", "****", "shelve.", "****", "shelve.", "****"], "tactic": "apply deduction_impp_arg_switch with (y := x2).", "exn": "In environment L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr Mono : Monotonicity L Gamma prodp x1, x2 : expr xs : list expr H : forall (Phi : context) (x y : expr), Phi x -> Phi (x --> y) -> Phi y H0 : |-- x1 --> x2 X : expr H1 : forall (Phi : context) (x y z : expr), Phi (x --> y --> z) -> Phi (y --> x --> z) X0 : expr H5 : forall (Phi : context) (x y : expr), Phi |-- x -> Phi |-- x --> y -> Phi |-- y H4 : forall (Phi : context) (x y z : expr), Phi |-- x --> y -> Phi |-- y --> z -> Phi |-- x --> z H3 : forall (Phi : context) (x y z : expr), Phi |-- x --> y --> z -> Phi |-- y --> x --> z X1 : expr Unable to unify \"(let (derivable) := ?GammaD in derivable) ?M99363 (x2 --> ?M99364 --> ?M99366)\" with \"BasicSequentCalculus L {| derivable := fun X2 : context => X2 |}\".", "type": "cannot_unify", "handled": true}, {"ctx": ["unfold fold_right, fold_left.", "intro x1; intro x2; intro xs.", "qsimpl time: 1 use: multi_imp,deduction_modus_ponens.", "-", "qsimpl time: 1 use: multi_imp,deduction_impp_arg_switch,deduction_modus_ponens.", "*", "qsimpl time: 1 use: multi_imp,deduction_impp_arg_switch,deduction_impp_trans,deduction_modus_ponens.", "**", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "***", "apply H with (x := x1) (y := x2).", "****", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "***", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "***", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "****", "shelve.", "****", "shelve.", "****", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "*****", "shelve.", "*****", "shelve.", "*****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "*****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "*****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "*****", "shelve.", "*****", "shelve.", "****", "shelve.", "***", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "***", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "***", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "****", "shelve.", "****", "shelve.", "****", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp."], "tactic": "***", "exn": "Wrong bullet ***: Current bullet **** is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["unfold fold_right, fold_left.", "intro x1; intro x2; intro xs.", "qsimpl time: 1 use: multi_imp,deduction_modus_ponens.", "-", "qsimpl time: 1 use: multi_imp,deduction_impp_arg_switch,deduction_modus_ponens.", "*", "qsimpl time: 1 use: multi_imp,deduction_impp_arg_switch,deduction_impp_trans,deduction_modus_ponens.", "**", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "***", "apply H with (x := x1) (y := x2).", "****", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "***", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "***", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "****", "shelve.", "****", "shelve.", "****", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "*****", "shelve.", "*****", "shelve.", "*****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "*****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "*****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "*****", "shelve.", "*****", "shelve.", "****", "shelve.", "***", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "***", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "***", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "****", "shelve.", "****", "shelve.", "****", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve."], "tactic": "***", "exn": "Wrong bullet ***: Expecting ****.", "type": "wrong_bullet", "handled": true}, {"ctx": ["unfold fold_right, fold_left.", "intro x1; intro x2; intro xs.", "qsimpl time: 1 use: multi_imp,deduction_modus_ponens.", "-", "qsimpl time: 1 use: multi_imp,deduction_impp_arg_switch,deduction_modus_ponens.", "*", "qsimpl time: 1 use: multi_imp,deduction_impp_arg_switch,deduction_impp_trans,deduction_modus_ponens.", "**", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "***", "apply H with (x := x1) (y := x2).", "****", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "***", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "***", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "****", "shelve.", "****", "shelve.", "****", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "*****", "shelve.", "*****", "shelve.", "*****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "*****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "*****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "*****", "shelve.", "*****", "shelve.", "****", "shelve.", "***", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "***", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "***", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "****", "shelve.", "****", "shelve.", "****", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "****"], "tactic": "apply deduction_impp_trans with (z := x2).", "exn": "In environment L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr Mono : Monotonicity L Gamma prodp x1, x2 : expr xs : list expr H : forall (Phi : context) (x y : expr), Phi x -> Phi (x --> y) -> Phi y H0 : |-- x1 --> x2 X : expr H1 : forall (Phi : context) (x y z : expr), Phi (x --> y --> z) -> Phi (y --> x --> z) X0 : expr H5 : forall (Phi : context) (x y : expr), Phi |-- x -> Phi |-- x --> y -> Phi |-- y H4 : forall (Phi : context) (x y z : expr), Phi |-- x --> y -> Phi |-- y --> z -> Phi |-- x --> z H3 : forall (Phi : context) (x y z : expr), Phi |-- x --> y --> z -> Phi |-- y --> x --> z X1 : expr Unable to unify \"(let (derivable) := ?GammaD in derivable) ?M106792 (?M106793 --> x2)\" with \"MinimumSequentCalculus L {| derivable := fun X2 : context => X2 |}\".", "type": "cannot_unify", "handled": true}, {"ctx": ["unfold fold_right, fold_left.", "intro x1; intro x2; intro xs.", "qsimpl time: 1 use: multi_imp,deduction_modus_ponens.", "-", "qsimpl time: 1 use: multi_imp,deduction_impp_arg_switch,deduction_modus_ponens.", "*", "qsimpl time: 1 use: multi_imp,deduction_impp_arg_switch,deduction_impp_trans,deduction_modus_ponens.", "**", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "***", "apply H with (x := x1) (y := x2).", "****", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "***", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "***", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "****", "shelve.", "****", "shelve.", "****", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "*****", "shelve.", "*****", "shelve.", "*****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "*****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "*****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "*****", "shelve.", "*****", "shelve.", "****", "shelve.", "***", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "***", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "***", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "****", "shelve.", "****", "shelve.", "****", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp."], "tactic": "****", "exn": "Wrong bullet ****: Current bullet **** is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["unfold fold_right, fold_left.", "intro x1; intro x2; intro xs.", "qsimpl time: 1 use: multi_imp,deduction_modus_ponens.", "-", "qsimpl time: 1 use: multi_imp,deduction_impp_arg_switch,deduction_modus_ponens.", "*", "qsimpl time: 1 use: multi_imp,deduction_impp_arg_switch,deduction_impp_trans,deduction_modus_ponens.", "**", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "***", "apply H with (x := x1) (y := x2).", "****", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "***", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "***", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "****", "shelve.", "****", "shelve.", "****", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "*****", "shelve.", "*****", "shelve.", "*****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "*****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "*****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "*****", "shelve.", "*****", "shelve.", "****", "shelve.", "***", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "***", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "***", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "****", "shelve.", "****", "shelve.", "****", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "****"], "tactic": "apply deduction_impp_intros with (y := x2).", "exn": "In environment L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr Mono : Monotonicity L Gamma prodp x1, x2 : expr xs : list expr H : forall (Phi : context) (x y : expr), Phi x -> Phi (x --> y) -> Phi y H0 : |-- x1 --> x2 X : expr H1 : forall (Phi : context) (x y z : expr), Phi (x --> y --> z) -> Phi (y --> x --> z) X0 : expr H5 : forall (Phi : context) (x y : expr), Phi |-- x -> Phi |-- x --> y -> Phi |-- y H4 : forall (Phi : context) (x y z : expr), Phi |-- x --> y -> Phi |-- y --> z -> Phi |-- x --> z H3 : forall (Phi : context) (x y z : expr), Phi |-- x --> y --> z -> Phi |-- y --> x --> z X1 : expr Unable to unify \"(let (derivable) := ?Gamma in derivable) ?M113683 (?M113684 --> x2)\" with \"MinimumSequentCalculus L {| derivable := fun X2 : context => X2 |}\".", "type": "cannot_unify", "handled": true}, {"ctx": ["unfold fold_right, fold_left.", "intro x1; intro x2; intro xs.", "qsimpl time: 1 use: multi_imp,deduction_modus_ponens.", "-", "qsimpl time: 1 use: multi_imp,deduction_impp_arg_switch,deduction_modus_ponens.", "*", "qsimpl time: 1 use: multi_imp,deduction_impp_arg_switch,deduction_impp_trans,deduction_modus_ponens.", "**", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "***", "apply H with (x := x1) (y := x2).", "****", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "***", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "***", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "****", "shelve.", "****", "shelve.", "****", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "*****", "shelve.", "*****", "shelve.", "*****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "*****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "*****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "*****", "shelve.", "*****", "shelve.", "****", "shelve.", "***", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "***", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "***", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "****", "shelve.", "****", "shelve.", "****", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "*****"], "tactic": "apply deduction_axiom2 with (x := x1) (y := x2) (z := x2).", "exn": "The reference deduction_axiom2 was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["unfold fold_right, fold_left.", "intro x1; intro x2; intro xs.", "qsimpl time: 1 use: multi_imp,deduction_modus_ponens.", "-", "qsimpl time: 1 use: multi_imp,deduction_impp_arg_switch,deduction_modus_ponens.", "*", "qsimpl time: 1 use: multi_imp,deduction_impp_arg_switch,deduction_impp_trans,deduction_modus_ponens.", "**", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "***", "apply H with (x := x1) (y := x2).", "****", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "***", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "***", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "****", "shelve.", "****", "shelve.", "****", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "*****", "shelve.", "*****", "shelve.", "*****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "*****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "*****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "*****", "shelve.", "*****", "shelve.", "****", "shelve.", "***", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "***", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "***", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "****", "shelve.", "****", "shelve.", "****", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "*****"], "tactic": "*****", "exn": "Wrong bullet *****: Current bullet ***** is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["unfold fold_right, fold_left.", "intro x1; intro x2; intro xs.", "qsimpl time: 1 use: multi_imp,deduction_modus_ponens.", "-", "qsimpl time: 1 use: multi_imp,deduction_impp_arg_switch,deduction_modus_ponens.", "*", "qsimpl time: 1 use: multi_imp,deduction_impp_arg_switch,deduction_impp_trans,deduction_modus_ponens.", "**", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "***", "apply H with (x := x1) (y := x2).", "****", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "***", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "***", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "****", "shelve.", "****", "shelve.", "****", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "*****", "shelve.", "*****", "shelve.", "*****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "*****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "*****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "*****", "shelve.", "*****", "shelve.", "****", "shelve.", "***", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "***", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "***", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "****", "shelve.", "****", "shelve.", "****", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "*****", "shelve.", "*****"], "tactic": "apply deduction_axiom1 with (x := x1) (y := x2).", "exn": "The reference deduction_axiom1 was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["unfold fold_right, fold_left.", "intro x1; intro x2; intro xs.", "qsimpl time: 1 use: multi_imp,deduction_modus_ponens.", "-", "qsimpl time: 1 use: multi_imp,deduction_impp_arg_switch,deduction_modus_ponens.", "*", "qsimpl time: 1 use: multi_imp,deduction_impp_arg_switch,deduction_impp_trans,deduction_modus_ponens.", "**", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "***", "apply H with (x := x1) (y := x2).", "****", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "***", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "***", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "****", "shelve.", "****", "shelve.", "****", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "*****", "shelve.", "*****", "shelve.", "*****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "*****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "*****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "*****", "shelve.", "*****", "shelve.", "****", "shelve.", "***", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "***", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "***", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "****", "shelve.", "****", "shelve.", "****", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "*****", "shelve.", "*****"], "tactic": "*****", "exn": "Wrong bullet *****: Current bullet ***** is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["unfold fold_right, fold_left.", "intro x1; intro x2; intro xs.", "qsimpl time: 1 use: multi_imp,deduction_modus_ponens.", "-", "qsimpl time: 1 use: multi_imp,deduction_impp_arg_switch,deduction_modus_ponens.", "*", "qsimpl time: 1 use: multi_imp,deduction_impp_arg_switch,deduction_impp_trans,deduction_modus_ponens.", "**", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "***", "apply H with (x := x1) (y := x2).", "****", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "***", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "***", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "****", "shelve.", "****", "shelve.", "****", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "*****", "shelve.", "*****", "shelve.", "*****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "*****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "*****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "------", "shelve.", "*****", "shelve.", "*****", "shelve.", "****", "shelve.", "***", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "***", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "----", "shelve.", "***", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "****", "shelve.", "****", "shelve.", "****", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "-----", "shelve.", "****", "qsimpl time: 1 use: deduction_impp_trans,deduction_impp_arg_switch,deduction_modus_ponens,deduction_impp_intros,multi_imp.", "*****", "shelve.", "*****", "shelve.", "*****"], "tactic": "apply deduction_axiom2 with (x := x2) (y := x2) (z := x2).", "exn": "The reference deduction_axiom2 was not found in the current environment.", "type": "ref_not_found", "handled": true}]}, "chat": [{"role": "user", "content": "I will give you a Coq proof state, including both hypotheses and a specific goal and your need to prove it. Your response should be a singular code block of Coq proof starting with \"```coq\n\", ending with \"Qed.```\", without any additional explanation or commentary. Follow to these guidelines:\nIntroduce variables using unique names to avoid any conflicts.\nKeep each command distinct and separated, avoid concatenations like ';' or '[cmd|cmd]'.\nOrganize your proof with bullets like '-', '+', and '*' instead of braces ({, }). Shift to their double symbols like '--' and '++', when necessary.\nEffectively use given premises, follow the syntax and structure demonstrated in the examples provided.\n\nExample 1:\n\nHypotheses:\nn, m: nat\nIHn: m + n = n + m\n\nGoal:\nm + S n = S n + m\n\nYour Response:\n```coq\nsimpl. rewrite <- IHn. auto.\nQed.```\n\nExample 2:\nHypotheses:\n\nGoal:\nforall n m : nat, m + n = n + m\n\nYour Response:\n```coq\nintros n m. induction n.\n- simpl. auto.\n- simpl. rewrite <- IHn. auto.\nQed.```\n\nSolve This Proof State:\n\nHypotheses:\nL: Language\nminL: MinimumLanguage L\nGamma: Provable L\nminAX: MinimumAxiomatization L Gamma\nprodp: expr -> expr -> expr\nMono: Monotonicity L Gamma prodp\n\nGoal:\nforall (x1 x2 : expr) (xs : list expr), |-- x1 --> x2 -> |-- fold_right prodp x1 xs --> fold_right prodp x2 xs\n\nPremises:\nMinimumAxiomatization : forall L : Language, MinimumLanguage L -> Provable L -> Prop\nRecord Provable (L : Language) : Type := Build_Provable { provable : expr -> Prop } For Build_Provable: Argument scopes are [_ function_scope]\nfold_right : forall A B : Type, (B -> A -> A) -> A -> list B -> A\nRecord MinimumLanguage (L : Language) : Type := Build_MinimumLanguage { impp : expr -> expr -> expr } For Build_MinimumLanguage: Argument scopes are [_ function_scope]\nMonotonicity : forall L : Language, MinimumLanguage L -> Provable L -> (expr -> expr -> expr) -> Prop\nInductive list (A : Type) : Type := nil : list A | cons : A -> list A -> list A For cons: Arguments are renamed to A, a, l For nil: Argument A is implicit and maximally inserted For cons: Argument A is implicit and maximally inserted For list: Argument scope is [type_scope] For nil: Argument scope is [type_scope] For cons: Argument scopes are [type_scope _ list_scope]\nexpr = fun Language0 : Language => let (expr) := Language0 in expr : Language -> Type Argument Language is implicit and maximally inserted\nfold_left_mono2 : forall (x1 x2 : expr) (xs : list expr), |-- x1 - -> x2 -> |-- fold_left prodp xs x1 - -> fold_left prodp xs x2\nfold_right_mono : forall (x1 x2 : expr) (xs1 xs2 : list expr), Forall2 (fun x3 x4 : expr => |-- x3 --> x4) xs1 xs2 -> |-- x1 - -> x2 -> |-- fold_right prodp x1 xs1 - -> fold_right prodp x2 xs2\nBuild_Monotonicity : forall (L : Language) (minL : MinimumLanguage L) (Gamma : Provable L) (prodp : expr -> expr -> expr), (forall x1 y1 x2 y2 : expr, |-- x1 --> x2 -> |-- y1 --> y2 -> |-- prodp x1 y1 --> prodp x2 y2) -> Monotonicity L Gamma prodp\nfold_left_mono : forall (x1 x2 : expr) (xs1 xs2 : list expr), Forall2 (fun x3 x4 : expr => |-- x3 --> x4) xs1 xs2 -> |-- x1 - -> x2 -> |-- fold_left prodp xs1 x1 - -> fold_left prodp xs2 x2\nTestInAxiomatization.Unnamed_thm0 : forall (Phi : context) (x1 y1 x2 y2 : expr), |-- x2 - -> x1 -> |-- y1 - -> y2 -> Phi |-- x1 - -> y1 -> Phi |-- x2 - -> y2 where ?L : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr Mono : Monotonicity L Gamma prodp |- Language] ?minL : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr ->...-> expr Mono : Monotonicity L Gamma prodp |- MinimumAxiomatization ?L ?GammaP]\nTestInAxiomatization.Unnamed_thm1 : context -> forall x1 y1 x2 y2 : expr, |-- x2 - -> x1 -> |-- y1 - -> y2 -> |-- (x1 --> y1) - -> x2 - -> y2 where ?L : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr Mono : Monotonicity L Gamma prodp |- Language] ?minL : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr Mono : Monotonicity L Gamma prodp |- MinimumLanguage ?L] ?GammaP : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr ->...-> expr Mono : Monotonicity L Gamma prodp |- MinimumAxiomatization ?L ?GammaP]\nprodp_mono : forall x1 y1 x2 y2 : expr, |-- x1 - -> x2 -> |-- y1 - -> y2 -> |-- prodp x1 y1 - -> prodp x2 y2\nTestInSequentCalculus.Unnamed_thm0 : forall (Phi : context) (x1 y1 x2 y2 : expr), |-- x2 - -> x1 -> |-- y1 - -> y2 -> Phi |-- x1 - -> y1 -> Phi |-- x2 - -> y2 where ?L : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr Mono : Monotonicity L Gamma prodp |- Language] ?minL : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr ->...-> expr Mono : Monotonicity L Gamma prodp |- MinimumSequentCalculus ?L ?GammaD]\nTestInSequentCalculus.Unnamed_thm1 : context -> forall x1 y1 x2 y2 : expr, |-- x2 - -> x1 -> |-- y1 - -> y2 -> |-- (x1 --> y1) - -> x2 - -> y2 where ?L : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr Mono : Monotonicity L Gamma prodp |- Language] ?minL : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr Mono : Monotonicity L Gamma prodp |- MinimumLanguage ?L] ?GammaP : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr ->...-> expr Mono : Monotonicity L Gamma prodp |- MinimumSequentCalculus ?L ?GammaD]\nAdjoint2Mono = fun (L : Language) (minL : MinimumLanguage L) (Gamma : Provable L) (minAX : MinimumAxiomatization L Gamma) (prodp funcp : expr -> expr -> expr) (Adj : Adjointness L Gamma prodp funcp) (Comm : Commutativity L Gamma prodp) => {| prodp_mono := fun (x1 y1 x2 y2 : expr) (H : |-- x1 --> x2) (H0 : |-- y1 --> y2) => aux_minimun_rule02 (prodp x1 y1) (prodp x2 y1) (prodp x2 y2) (prodp_mono1 x1 x2 y1 H) ((fun lemma : |-- prodp x2 y1 --> prodp y1 x2 => Morphisms.proper_normalizes_proper (expr -> Prop) (Morphisms.flip_arrow (Morphisms.flip_atom expr (Basics.flip (fun x y : expr => |--...\nimpp_proper_impp = fun (L : Language) (minL : MinimumLanguage L) (GammaP : Provable L) (minAX : MinimumAxiomatization L GammaP) (x1 x2 : expr) (H : Basics.flip (fun x y : expr => |-- x --> y) x1 x2) (y1 y2 : expr) (H0 : |-- y1 --> y2) => modus_ponens (x2 --> (x1 --> y1) --> y2) ((x1 --> y1) --> x2 --> y2) (provable_impp_arg_switch x2 (x1 --> y1) y2) (aux_minimun_rule02 x2 x1 ((x1 --> y1) --> y2) H (modus_ponens ((x1 --> y1) --> x1 --> y2) (x1 --> (x1 --> y1) --> y2) (provable_impp_arg_switch (x1 --> y...\nprodp_mono1 : forall x1 x2 y : expr, |-- x1 - -> x2 -> |-- ?prodp x1 y - -> ?prodp x2 y where ?L : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr Mono : Monotonicity L Gamma prodp |- Language] ?minL : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr Mono : Monotonicity L Gamma prodp |- MinimumLanguage ?L] ?Gamma : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr ->...-> expr Mono : Monotonicity L Gamma prodp |- Adjointness ?L ?Gamma ?prodp ?funcp]\nfuncp_mono : forall x1 y1 x2 y2 : expr, |-- x2 - -> x1 -> |-- y1 - -> y2 -> |-- ?funcp x1 y1 - -> ?funcp x2 y2 where ?L : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr Mono : Monotonicity L Gamma prodp |- Language] ?minL : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr Mono : Monotonicity L Gamma prodp |- MinimumLanguage ?L] ?Gamma : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr ->...-> expr Mono : Monotonicity L Gamma prodp |- Monotonicity ?L ?Gamma ?prodp]\nadjoint_iter : forall (x : expr) (xs : list expr) (y : expr), |-- fold_left ?prodp xs x - -> y < -> |-- x - -> fold_right ?funcp y xs where ?L : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr Mono : Monotonicity L Gamma prodp |- Language] ?minL : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr Mono : Monotonicity L Gamma prodp |- MinimumLanguage ?L] ?Gamma : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr ->...-> expr Mono : Monotonicity L Gamma prodp |- Adjointness ?L ?Gamma ?prodp ?funcp]\nderivable_proper_impp = fun (L : Language) (minL : MinimumLanguage L) (GammaP : Provable L) (GammaD : Derivable L) (SC : NormalSequentCalculus L GammaP GammaD) (bSC : BasicSequentCalculus L GammaD) (minSC : MinimumSequentCalculus L GammaD) (Phi Phi' : context) (H : Phi = Phi') => eq_ind Phi (fun Phi'0 : context => Morphisms.respectful (fun x y : expr => |-- x --> y) Basics.impl (derivable Phi) (derivable Phi'0)) (fun (x1 x2 : expr) (H0 : |-- x1 --> x2) (H1 : Phi |-- x1) => let H2 : Phi |-- x1 --> x2 := deduction_weaken0 Phi (x1 --> x2) H0 in deduction_modus_ponens Phi x1 x2 H1 H2) Phi' H : forall (L...\nmulti_imp = fun (L : Language) (minL : MinimumLanguage L) (xs : list expr) (y : expr) => fold_right impp y xs : forall L : Language, MinimumLanguage L -> list expr -> expr -> expr Arguments L, minL are implicit and maximally inserted Argument scopes are [_ _ list_scope _]\ndeduction_theorem_multi_imp : forall (Phi : context) (xs : list expr) (y : expr), Union expr Phi (fun x : expr => In x xs) |-- y < -> Phi |-- multi_imp xs y where ?L : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr Mono : Monotonicity L Gamma prodp |- Language] ?GammaD : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr Mono : Monotonicity L Gamma prodp |- Derivable ?L] ?bSC : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr ->...-> expr Mono : Monotonicity L Gamma prodp |- MinimumSequentCalculus ?L ?GammaD]\nderivable_provable : forall (Phi : context) (y : expr), Phi |-- y < -> (exists xs : list expr, Forall (fun x : expr => Phi x) xs /\\ |-- multi_imp xs y) where ?L : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr Mono : Monotonicity L Gamma prodp |- Language] ?minL : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr Mono : Monotonicity L Gamma prodp |- MinimumLanguage ?L] ?GammaP : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr ->...-> expr Mono : Monotonicity L Gamma prodp |- NormalAxiomatization ?L ?GammaP ?GammaD]\nderivable_finite_witnessed : forall (Phi : context) (y : expr), Phi |-- y -> exists xs : list expr, Forall Phi xs /\\ (fun x : expr => In x xs) |-- y where ?L : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr Mono : Monotonicity L Gamma prodp |- Language] ?Gamma : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr Mono : Monotonicity L Gamma prodp |- Derivable ?L] ?FiniteWitnessedSequentCalculus : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr Mono : Monotonicity L Gamma prodp |- FiniteWitnessedSequentCalculus ?L ?Gamma]\ncontextual_derivable_finite_witnessed : forall (Phi Psi : context) (y : expr), Union expr Phi Psi |-- y -> exists xs : list expr, Forall Psi xs /\\ Union expr Phi (fun x : expr => In x xs) |-- y where ?L : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr Mono : Monotonicity L Gamma prodp |- Language] ?Gamma : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr Mono : Monotonicity L Gamma prodp |- Derivable ?L] ?bSC : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr ->...-> expr Mono : Monotonicity L Gamma prodp |- FiniteWitnessedSequentCalculus ?L ?Gamma]\nprovable_multi_imp_weaken : forall (xs : list expr) (x y : expr), |-- x - -> y -> |-- multi_imp xs x - -> multi_imp xs y\ndeduction_impp_intros : forall (Phi : Ensemble expr) (x y : expr), Phi;; x |-- y -> Phi |-- x - -> y where ?L : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr Mono : Monotonicity L Gamma prodp |- Language] ?minL : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr Mono : Monotonicity L Gamma prodp |- MinimumLanguage ?L] ?Gamma : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr ->...-> expr Mono : Monotonicity L Gamma prodp |- MinimumSequentCalculus ?L ?Gamma]\nderivable_axiom2 : forall (Phi : context) (x y z : expr), Phi |-- (x --> y --> z) - -> (x --> y) - -> x - -> z where ?L : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr Mono : Monotonicity L Gamma prodp |- Language] ?GammaD : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr Mono : Monotonicity L Gamma prodp |- Derivable ?L] ?bSC : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr ->...-> expr Mono : Monotonicity L Gamma prodp |- MinimumSequentCalculus ?L ?GammaD]\ndeduction_impp_arg_switch : forall (Phi : context) (x y z : expr), Phi |-- x - -> y - -> z -> Phi |-- y - -> x - -> z where ?L : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr Mono : Monotonicity L Gamma prodp |- Language] ?GammaD : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr Mono : Monotonicity L Gamma prodp |- Derivable ?L] ?bSC : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr ->...-> expr Mono : Monotonicity L Gamma prodp |- MinimumSequentCalculus ?L ?GammaD]\ndeduction_impp_trans : forall (Phi : context) (x y z : expr), Phi |-- x - -> y -> Phi |-- y - -> z -> Phi |-- x - -> z where ?L : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr Mono : Monotonicity L Gamma prodp |- Language] ?GammaD : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr Mono : Monotonicity L Gamma prodp |- Derivable ?L] ?bSC : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr ->...-> expr Mono : Monotonicity L Gamma prodp |- MinimumSequentCalculus ?L ?GammaD]\nderivable_modus_ponens : forall (Phi : context) (x y : expr), Phi |-- x - -> (x --> y) - -> y where ?L : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr Mono : Monotonicity L Gamma prodp |- Language] ?GammaD : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr Mono : Monotonicity L Gamma prodp |- Derivable ?L] ?bSC : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr ->...-> expr Mono : Monotonicity L Gamma prodp |- MinimumSequentCalculus ?L ?GammaD]\nderivable_axiom1 : forall (Phi : context) (x y : expr), Phi |-- x - -> y - -> x where ?L : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr Mono : Monotonicity L Gamma prodp |- Language] ?GammaD : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr Mono : Monotonicity L Gamma prodp |- Derivable ?L] ?bSC : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr ->...-> expr Mono : Monotonicity L Gamma prodp |- MinimumSequentCalculus ?L ?GammaD]\ndeduction_modus_ponens : forall (Phi : context) (x y : expr), Phi |-- x -> Phi |-- x - -> y -> Phi |-- y where ?L : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr Mono : Monotonicity L Gamma prodp |- Language] ?minL : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr Mono : Monotonicity L Gamma prodp |- MinimumLanguage ?L] ?Gamma : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr ->...-> expr Mono : Monotonicity L Gamma prodp |- MinimumSequentCalculus ?L ?Gamma]\nTestInAxiomatization.Unnamed_thm : forall (Phi : context) (y1 y2 : expr), |-- y1 - -> y2 -> Phi |-- y1 -> Phi |-- y2 where ?L : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr Mono : Monotonicity L Gamma prodp |- Language] ?minL : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr Mono : Monotonicity L Gamma prodp |- MinimumLanguage ?L] ?GammaP : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr ->...-> expr Mono : Monotonicity L Gamma prodp |- MinimumAxiomatization ?L ?GammaP]\ndeduction_weaken : forall (Phi Psi : Ensemble expr) (x : expr), Included expr Phi Psi -> Phi |-- x -> Psi |-- x where ?L : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr Mono : Monotonicity L Gamma prodp |- Language] ?Gamma : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr Mono : Monotonicity L Gamma prodp |- Derivable ?L] ?BasicSequentCalculus : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr Mono : Monotonicity L Gamma prodp |- BasicSequentCalculus ?L ?Gamma]"}, {"role": "assistant", "content": "```coq\nunfold fold_right, fold_left.\nintro x1; intro x2; intro xs.\nrewrite <- (deduction_impp_intros Phi (multi_imp xs x1) x2).\napply deduction_modus_ponens with (x := multi_imp xs x1).\n- apply deduction_weaken with (Phi := Phi) (Psi := Union expr Phi (fun x : expr => In x xs)).\n  + apply deduction_impp_arg_switch with (y := x2).\n    * apply deduction_impp_trans with (z := x2).\n      ** apply deduction_impp_intros with (y := x2).\n         *** apply deduction_axiom2 with (x := x1) (y := x2) (z := x2).\n         **** apply deduction_axiom1 with (x := x1) (y := x2).\n         **** apply deduction_axiom2 with (x := x2) (y := x2) (z := x2).\n      *** apply deduction_impp_arg_switch with (y := x2).\n        ** apply deduction_impp_trans with (z := x2).\n          *** apply deduction_impp_intros with (y := x2).\n             **** apply deduction_axiom2 with (x := x1) (y := x2) (z := x2).\n             **** apply deduction_axiom1 with (x := x1) (y := x2).\n             **** apply deduction_axiom2 with (x := x2) (y := x2) (z := x2).\n        ** apply deduction_impp_arg_switch with (y := x2).\n          *** apply deduction_impp_trans with (z := x2).\n            **** apply deduction_impp_intros with (y := x2).\n               ***** apply deduction_axiom2 with (x := x1) (y := x2) (z := x2).\n               ***** apply deduction_axiom1 with (x := x1) (y := x2).\n               ***** apply deduction_axiom2 with (x := x2) (y := x2) (z := x2).\n  + apply deduction_impp_arg_switch with (y := x2).\n    * apply deduction_impp_trans with (z := x2).\n      ** apply deduction_impp_intros with (y := x2).\n         *** apply deduction_axiom2 with (x := x1) (y := x2) (z := x2).\n         **** apply deduction_axiom1 with (x := x1) (y := x2).\n         **** apply deduction_axiom2 with (x := x2) (y := x2) (z := x2).\n      *** apply deduction_impp_arg_switch with (y := x2).\n        ** apply deduction_impp_trans with (z := x2).\n          *** apply deduction_impp_intros with (y := x2).\n             **** apply deduction_axiom2 with (x := x1) (y := x2) (z := x2).\n             **** apply deduction_axiom1 with (x := x1) (y := x2).\n             **** apply deduction_axiom2 with (x := x2) (y := x2) (z := x2).\n        ** apply deduction_impp_arg_switch with (y := x2).\n          *** apply deduction_impp_trans with (z := x2).\n            **** apply deduction_impp_intros with (y := x2).\n               ***** apply deduction_axiom2 with (x := x1) (y := x2) (z := x2).\n               ***** apply deduction_axiom1 with (x := x1) (y := x2).\n               ***** apply deduction_axiom2 with (x := x2) (y := x2) (z := x2).\nQed.\n```"}], "original": "unfold fold_right, fold_left. intro x1; intro x2; intro xs. rewrite <- (deduction_impp_intros Phi (multi_imp xs x1) x2). apply deduction_modus_ponens with (x := multi_imp xs x1). - apply deduction_weaken with (Phi := Phi) (Psi := Union expr Phi (fun x : expr => In x xs)). + apply deduction_impp_arg_switch with (y := x2). * apply deduction_impp_trans with (z := x2). ** apply deduction_impp_intros with (y := x2). *** apply deduction_axiom2 with (x := x1) (y := x2) (z := x2). **** apply deduction_axiom1 with (x := x1) (y := x2). **** apply deduction_axiom2 with (x := x2) (y := x2) (z := x2). *** apply deduction_impp_arg_switch with (y := x2). ** apply deduction_impp_trans with (z := x2). *** apply deduction_impp_intros with (y := x2). **** apply deduction_axiom2 with (x := x1) (y := x2) (z := x2). **** apply deduction_axiom1 with (x := x1) (y := x2). **** apply deduction_axiom2 with (x := x2) (y := x2) (z := x2). ** apply deduction_impp_arg_switch with (y := x2). *** apply deduction_impp_trans with (z := x2). **** apply deduction_impp_intros with (y := x2). ***** apply deduction_axiom2 with (x := x1) (y := x2) (z := x2). ***** apply deduction_axiom1 with (x := x1) (y := x2). ***** apply deduction_axiom2 with (x := x2) (y := x2) (z := x2). + apply deduction_impp_arg_switch with (y := x2). * apply deduction_impp_trans with (z := x2). ** apply deduction_impp_intros with (y := x2). *** apply deduction_axiom2 with (x := x1) (y := x2) (z := x2). **** apply deduction_axiom1 with (x := x1) (y := x2). **** apply deduction_axiom2 with (x := x2) (y := x2) (z := x2). *** apply deduction_impp_arg_switch with (y := x2). ** apply deduction_impp_trans with (z := x2). *** apply deduction_impp_intros with (y := x2). **** apply deduction_axiom2 with (x := x1) (y := x2) (z := x2). **** apply deduction_axiom1 with (x := x1) (y := x2). **** apply deduction_axiom2 with (x := x2) (y := x2) (z := x2). ** apply deduction_impp_arg_switch with (y := x2). *** apply deduction_impp_trans with (z := x2). **** apply deduction_impp_intros with (y := x2). ***** apply deduction_axiom2 with (x := x1) (y := x2) (z := x2). ***** apply deduction_axiom1 with (x := x1) (y := x2). ***** apply deduction_axiom2 with (x := x2) (y := x2) (z := x2).", "succ": false}]