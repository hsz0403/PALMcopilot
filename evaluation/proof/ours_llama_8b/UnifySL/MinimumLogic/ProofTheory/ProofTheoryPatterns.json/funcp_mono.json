[{"history": {"proof": "qsimpl time: 1 use: funcp_mono2.", "repairs": ["not_evaluable"], "exceptions": [{"ctx": [], "tactic": "unfold funcp_mono2.", "exn": "Cannot coerce funcp_mono2 to an evaluable reference.", "type": "not_evaluable", "handled": true}, {"ctx": ["qsimpl time: 1 use: funcp_mono2."], "tactic": "intro x1.", "exn": "No product even after head-reduction.", "type": "no_product", "handled": true}, {"ctx": ["qsimpl time: 1 use: funcp_mono2."], "tactic": "intro y1.", "exn": "No product even after head-reduction.", "type": "no_product", "handled": true}, {"ctx": ["qsimpl time: 1 use: funcp_mono2."], "tactic": "intro y2.", "exn": "No product even after head-reduction.", "type": "no_product", "handled": true}, {"ctx": ["qsimpl time: 1 use: funcp_mono2."], "tactic": "intros H1 H2.", "exn": "H1 is already used.", "type": "used_var", "handled": true}, {"ctx": ["qsimpl time: 1 use: funcp_mono2."], "tactic": "intros H1' H2.", "exn": "H2 is already used.", "type": "used_var", "handled": true}, {"ctx": ["qsimpl time: 1 use: funcp_mono2."], "tactic": "intros H1' H2'.", "exn": "No product even after head-reduction.", "type": "no_product", "handled": true}, {"ctx": ["qsimpl time: 1 use: funcp_mono2."], "tactic": "apply prodp_mono2 in H1.", "exn": "The reference prodp_mono2 was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["qsimpl time: 1 use: funcp_mono2.", "apply Singleton in H1."], "tactic": "apply prodp_mono2 in H2.", "exn": "The reference prodp_mono2 was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["qsimpl time: 1 use: funcp_mono2.", "apply Singleton in H1.", "apply Ensembles_ext.Binart_set_list in H2."], "tactic": "rewrite <- prodp_assoc1 with (x := x1) (y := y1) (z := y2).", "exn": "Found no subterm matching \"?prodp (?prodp x1 y1) y2\" in the current goal.", "type": "no_subterm", "handled": true}]}, "chat": [{"role": "user", "content": "I will give you a Coq proof state, including both hypotheses and a specific goal and your need to prove it. Your response should be a singular code block of Coq proof starting with \"```coq\n\", ending with \"Qed.```\", without any additional explanation or commentary. Follow to these guidelines:\nIntroduce variables using unique names to avoid any conflicts.\nKeep each command distinct and separated, avoid concatenations like ';' or '[cmd|cmd]'.\nOrganize your proof with bullets like '-', '+', and '*' instead of braces ({, }). Shift to their double symbols like '--' and '++', when necessary.\nEffectively use given premises, follow the syntax and structure demonstrated in the examples provided.\n\nExample 1:\n\nHypotheses:\nn, m: nat\nIHn: m + n = n + m\n\nGoal:\nm + S n = S n + m\n\nYour Response:\n```coq\nsimpl. rewrite <- IHn. auto.\nQed.```\n\nExample 2:\nHypotheses:\n\nGoal:\nforall n m : nat, m + n = n + m\n\nYour Response:\n```coq\nintros n m. induction n.\n- simpl. auto.\n- simpl. rewrite <- IHn. auto.\nQed.```\n\nSolve This Proof State:\n\nHypotheses:\nL: Language\nminL: MinimumLanguage L\nGamma: Provable L\nminAX: MinimumAxiomatization L Gamma\nfuncp: expr -> expr -> expr\nprodp: expr -> expr -> expr\nAdj: Adjointness L Gamma prodp funcp\nMono: Monotonicity L Gamma prodp\n\nGoal:\nforall x1 y1 x2 y2 : expr, |-- x2 --> x1 -> |-- y1 --> y2 -> |-- funcp x1 y1 --> funcp x2 y2\n\nPremises:\nAdjointness : forall L : Language, MinimumLanguage L -> Provable L -> (expr -> expr -> expr) -> (expr -> expr -> expr) -> Prop\nMinimumAxiomatization : forall L : Language, MinimumLanguage L -> Provable L -> Prop\nRecord Provable (L : Language) : Type := Build_Provable { provable : expr -> Prop } For Build_Provable: Argument scopes are [_ function_scope]\nRecord MinimumLanguage (L : Language) : Type := Build_MinimumLanguage { impp : expr -> expr -> expr } For Build_MinimumLanguage: Argument scopes are [_ function_scope]\nMonotonicity : forall L : Language, MinimumLanguage L -> Provable L -> (expr -> expr -> expr) -> Prop\nexpr = fun Language0 : Language => let (expr) := Language0 in expr : Language -> Type Argument Language is implicit and maximally inserted\nBuild_Monotonicity : forall (L : Language) (minL : MinimumLanguage L) (Gamma : Provable L) (prodp : expr -> expr -> expr), (forall x1 y1 x2 y2 : expr, |-- x1 --> x2 -> |-- y1 --> y2 -> |-- prodp x1 y1 --> prodp x2 y2) -> Monotonicity L Gamma prodp\nprodp_mono : forall x1 y1 x2 y2 : expr, |-- x1 - -> x2 -> |-- y1 - -> y2 -> |-- prodp x1 y1 - -> prodp x2 y2\nTestInAxiomatization.Unnamed_thm0 : forall (Phi : context) (x1 y1 x2 y2 : expr), |-- x2 - -> x1 -> |-- y1 - -> y2 -> Phi |-- x1 - -> y1 -> Phi |-- x2 - -> y2 where ?L : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr funcp : expr -> expr -> expr Adj : Adjointness L Gamma prodp funcp Mono : Monotonicity L Gamma prodp |- Language] ?minL : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr funcp : expr -> expr ->...-> expr Adj : Adjointness L Gamma prodp funcp Mono : Monotonicity L Gamma prodp |- MinimumAxiomatization ?L ?GammaP]\nTestInAxiomatization.Unnamed_thm1 : context -> forall x1 y1 x2 y2 : expr, |-- x2 - -> x1 -> |-- y1 - -> y2 -> |-- (x1 --> y1) - -> x2 - -> y2 where ?L : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr funcp : expr -> expr -> expr Adj : Adjointness L Gamma prodp funcp Mono : Monotonicity L Gamma prodp |- Language] ?minL : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr funcp : expr -> expr ->...-> expr Adj : Adjointness L Gamma prodp funcp Mono : Monotonicity L Gamma prodp |- MinimumAxiomatization ?L ?GammaP]\nTestInSequentCalculus.Unnamed_thm0 : forall (Phi : context) (x1 y1 x2 y2 : expr), |-- x2 - -> x1 -> |-- y1 - -> y2 -> Phi |-- x1 - -> y1 -> Phi |-- x2 - -> y2 where ?L : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr funcp : expr -> expr -> expr Adj : Adjointness L Gamma prodp funcp Mono : Monotonicity L Gamma prodp |- Language] ?minL : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr funcp : expr -> expr ->...-> expr Adj : Adjointness L Gamma prodp funcp Mono : Monotonicity L Gamma prodp |- MinimumSequentCalculus ?L ?GammaD]\nAdjoint2Mono = fun Comm : Commutativity L Gamma prodp => {| prodp_mono := fun (x1 y1 x2 y2 : expr) (H : |-- x1 --> x2) (H0 : |-- y1 --> y2) => aux_minimun_rule02 (prodp x1 y1) (prodp x2 y1) (prodp x2 y2) (prodp_mono1 x1 x2 y1 H) ((fun lemma : |-- prodp x2 y1 --> prodp y1 x2 => Morphisms.proper_normalizes_proper (expr -> Prop) (Morphisms.flip_arrow (Morphisms.flip_atom expr (Basics.flip (fun x y : expr => |-- x --> y))) (Morphisms.flip_atom Prop (Basics.flip Basics.impl))) (Morphisms.proper_flip_proper (Morphisms.subrelation_proper provable_proper_impp tt (Morphisms.subrelation_respectful (Morphisms.flip1 (Morphisms...\nTestInSequentCalculus.Unnamed_thm1 : context -> forall x1 y1 x2 y2 : expr, |-- x2 - -> x1 -> |-- y1 - -> y2 -> |-- (x1 --> y1) - -> x2 - -> y2 where ?L : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr funcp : expr -> expr -> expr Adj : Adjointness L Gamma prodp funcp Mono : Monotonicity L Gamma prodp |- Language] ?minL : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr funcp : expr -> expr ->...-> expr Adj : Adjointness L Gamma prodp funcp Mono : Monotonicity L Gamma prodp |- MinimumSequentCalculus ?L ?GammaD]\nimpp_proper_impp = fun (L : Language) (minL : MinimumLanguage L) (GammaP : Provable L) (minAX : MinimumAxiomatization L GammaP) (x1 x2 : expr) (H : Basics.flip (fun x y : expr => |-- x --> y) x1 x2) (y1 y2 : expr) (H0 : |-- y1 --> y2) => modus_ponens (x2 --> (x1 --> y1) --> y2) ((x1 --> y1) --> x2 --> y2) (provable_impp_arg_switch x2 (x1 --> y1) y2) (aux_minimun_rule02 x2 x1 ((x1 --> y1) --> y2) H (modus_ponens ((x1 --> y1) --> x1 --> y2) (x1 --> (x1 --> y1) --> y2) (provable_impp_arg_switch (x1 --> y1)...\nfuncp_mono2 : forall x y1 y2 : expr, |-- y1 - -> y2 -> |-- funcp x y1 - -> funcp x y2\nTestInAxiomatization.Unnamed_thm : forall (Phi : context) (y1 y2 : expr), |-- y1 - -> y2 -> Phi |-- y1 -> Phi |-- y2 where ?L : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr funcp : expr -> expr -> expr Adj : Adjointness L Gamma prodp funcp Mono : Monotonicity L Gamma prodp |- Language] ?minL : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr funcp : expr -> expr ->...-> expr Adj : Adjointness L Gamma prodp funcp Mono : Monotonicity L Gamma prodp |- MinimumAxiomatization ?L ?GammaP]\nprodp_mono1 : forall x1 x2 y : expr, |-- x1 - -> x2 -> |-- prodp x1 y - -> prodp x2 y\nTestInSequentCalculus.Unnamed_thm : forall (Phi : context) (y1 y2 : expr), |-- y1 - -> y2 -> Phi |-- y1 -> Phi |-- y2 where ?L : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr funcp : expr -> expr -> expr Adj : Adjointness L Gamma prodp funcp Mono : Monotonicity L Gamma prodp |- Language] ?minL : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr funcp : expr -> expr ->...-> expr Adj : Adjointness L Gamma prodp funcp Mono : Monotonicity L Gamma prodp |- MinimumSequentCalculus ?L ?GammaD]\nderivable_axiom2 : forall (Phi : context) (x y z : expr), Phi |-- (x --> y --> z) - -> (x --> y) - -> x - -> z where ?L : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr funcp : expr -> expr -> expr Adj : Adjointness L Gamma prodp funcp Mono : Monotonicity L Gamma prodp |- Language] ?GammaD : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr funcp : expr -> expr ->...-> expr Adj : Adjointness L Gamma prodp funcp Mono : Monotonicity L Gamma prodp |- MinimumSequentCalculus ?L ?GammaD]\ndeduction_impp_arg_switch : forall (Phi : context) (x y z : expr), Phi |-- x - -> y - -> z -> Phi |-- y - -> x - -> z where ?L : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr funcp : expr -> expr -> expr Adj : Adjointness L Gamma prodp funcp Mono : Monotonicity L Gamma prodp |- Language] ?GammaD : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr funcp : expr -> expr ->...-> expr Adj : Adjointness L Gamma prodp funcp Mono : Monotonicity L Gamma prodp |- MinimumSequentCalculus ?L ?GammaD]\ndeduction_impp_trans : forall (Phi : context) (x y z : expr), Phi |-- x - -> y -> Phi |-- y - -> z -> Phi |-- x - -> z where ?L : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr funcp : expr -> expr -> expr Adj : Adjointness L Gamma prodp funcp Mono : Monotonicity L Gamma prodp |- Language] ?GammaD : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr funcp : expr -> expr ->...-> expr Adj : Adjointness L Gamma prodp funcp Mono : Monotonicity L Gamma prodp |- MinimumSequentCalculus ?L ?GammaD]\nderivable_proper_impp = fun (L : Language) (minL : MinimumLanguage L) (GammaP : Provable L) (GammaD : Derivable L) (SC : NormalSequentCalculus L GammaP GammaD) (bSC : BasicSequentCalculus L GammaD) (minSC : MinimumSequentCalculus L GammaD) (Phi Phi' : context) (H : Phi = Phi') => eq_ind Phi (fun Phi'0 : context => Morphisms.respectful (fun x y : expr => |-- x --> y) Basics.impl (derivable Phi) (derivable Phi'0)) (fun (x1 x2 : expr) (H0 : |-- x1 --> x2) (H1 : Phi |-- x1) => let H2 : Phi |-- x1 --> x2 := deduction_weaken0 Phi (x1 --> x2) H0 in deduction_modus_ponens Phi x1 x2 H1 H2) Phi' H : forall (L : Language...\nderivable_modus_ponens : forall (Phi : context) (x y : expr), Phi |-- x - -> (x --> y) - -> y where ?L : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr funcp : expr -> expr -> expr Adj : Adjointness L Gamma prodp funcp Mono : Monotonicity L Gamma prodp |- Language] ?GammaD : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr funcp : expr -> expr ->...-> expr Adj : Adjointness L Gamma prodp funcp Mono : Monotonicity L Gamma prodp |- MinimumSequentCalculus ?L ?GammaD]\nderivable_axiom1 : forall (Phi : context) (x y : expr), Phi |-- x - -> y - -> x where ?L : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr funcp : expr -> expr -> expr Adj : Adjointness L Gamma prodp funcp Mono : Monotonicity L Gamma prodp |- Language] ?GammaD : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr funcp : expr -> expr ->...-> expr Adj : Adjointness L Gamma prodp funcp Mono : Monotonicity L Gamma prodp |- MinimumSequentCalculus ?L ?GammaD]\nprodp_comm_impp : forall x y : expr, |-- ?prodp x y - -> ?prodp y x where ?L : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr funcp : expr -> expr -> expr Adj : Adjointness L Gamma prodp funcp Mono : Monotonicity L Gamma prodp |- Language] ?minL : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr funcp : expr -> expr ->...-> expr Adj : Adjointness L Gamma prodp funcp Mono : Monotonicity L Gamma prodp |- Commutativity ?L ?Gamma ?prodp]\nright_unit1 : forall x : expr, |-- ?prodp x ?e - -> x where ?L : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr funcp : expr -> expr -> expr Adj : Adjointness L Gamma prodp funcp Mono : Monotonicity L Gamma prodp |- Language] ?minL : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr funcp : expr -> expr ->...-> expr Adj : Adjointness L Gamma prodp funcp Mono : Monotonicity L Gamma prodp |- RightUnit ?L ?Gamma ?e ?prodp]\nleft_unit2 : forall x : expr, |-- x - -> ?prodp ?e x where ?L : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr funcp : expr -> expr -> expr Adj : Adjointness L Gamma prodp funcp Mono : Monotonicity L Gamma prodp |- Language] ?minL : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr funcp : expr -> expr ->...-> expr Adj : Adjointness L Gamma prodp funcp Mono : Monotonicity L Gamma prodp |- LeftUnit ?L ?Gamma ?e ?prodp]\nleft_unit1 : forall x : expr, |-- ?prodp ?e x - -> x where ?L : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr funcp : expr -> expr -> expr Adj : Adjointness L Gamma prodp funcp Mono : Monotonicity L Gamma prodp |- Language] ?minL : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr funcp : expr -> expr ->...-> expr Adj : Adjointness L Gamma prodp funcp Mono : Monotonicity L Gamma prodp |- LeftUnit ?L ?Gamma ?e ?prodp]\nright_unit2 : forall x : expr, |-- x - -> ?prodp x ?e where ?L : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr funcp : expr -> expr -> expr Adj : Adjointness L Gamma prodp funcp Mono : Monotonicity L Gamma prodp |- Language] ?minL : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr funcp : expr -> expr ->...-> expr Adj : Adjointness L Gamma prodp funcp Mono : Monotonicity L Gamma prodp |- RightUnit ?L ?Gamma ?e ?prodp]\nprodp_assoc1 : forall x y z : expr, |-- ?prodp x (?prodp y z) - -> ?prodp (?prodp x y) z where ?L : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr funcp : expr -> expr -> expr Adj : Adjointness L Gamma prodp funcp Mono : Monotonicity L Gamma prodp |- Language] ?minL : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr funcp : expr -> expr ->...-> expr Adj : Adjointness L Gamma prodp funcp Mono : Monotonicity L Gamma prodp |- Associativity ?L ?Gamma ?prodp]\nprodp_assoc2 : forall x y z : expr, |-- ?prodp (?prodp x y) z - -> ?prodp x (?prodp y z) where ?L : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr funcp : expr -> expr -> expr Adj : Adjointness L Gamma prodp funcp Mono : Monotonicity L Gamma prodp |- Language] ?minL : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr funcp : expr -> expr ->...-> expr Adj : Adjointness L Gamma prodp funcp Mono : Monotonicity L Gamma prodp |- Associativity ?L ?Gamma ?prodp]\ndeduction_modus_ponens : forall (Phi : context) (x y : expr), Phi |-- x -> Phi |-- x - -> y -> Phi |-- y where ?L : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr funcp : expr -> expr -> expr Adj : Adjointness L Gamma prodp funcp Mono : Monotonicity L Gamma prodp |- Language] ?minL : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr funcp : expr -> expr ->...-> expr Adj : Adjointness L Gamma prodp funcp Mono : Monotonicity L Gamma prodp |- MinimumSequentCalculus ?L ?Gamma]\nleft_distr1 : forall x y z : expr, |-- ?prodp x (?sump y z) - -> ?sump (?prodp x y) (?prodp x z) where ?L : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr funcp : expr -> expr -> expr Adj : Adjointness L Gamma prodp funcp Mono : Monotonicity L Gamma prodp |- Language] ?minL : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr funcp : expr -> expr ->...-> expr Adj : Adjointness L Gamma prodp funcp Mono : Monotonicity L Gamma prodp |- LeftDistr ?L ?Gamma ?prodp ?sump]\nright_distr1 : forall x y z : expr, |-- ?prodp (?sump y z) x - -> ?sump (?prodp y x) (?prodp z x) where ?L : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr funcp : expr -> expr -> expr Adj : Adjointness L Gamma prodp funcp Mono : Monotonicity L Gamma prodp |- Language] ?minL : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr funcp : expr -> expr ->...-> expr Adj : Adjointness L Gamma prodp funcp Mono : Monotonicity L Gamma prodp |- RightDistr ?L ?Gamma ?prodp ?sump]\nright_distr2 : forall x y z : expr, |-- ?sump (?prodp y x) (?prodp z x) - -> ?prodp (?sump y z) x where ?L : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr funcp : expr -> expr -> expr Adj : Adjointness L Gamma prodp funcp Mono : Monotonicity L Gamma prodp |- Language] ?minL : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr funcp : expr -> expr ->...-> expr Adj : Adjointness L Gamma prodp funcp Mono : Monotonicity L Gamma prodp |- RightDistr ?L ?Gamma ?prodp ?sump]\nleft_distr2 : forall x y z : expr, |-- ?sump (?prodp x y) (?prodp x z) - -> ?prodp x (?sump y z) where ?L : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr funcp : expr -> expr -> expr Adj : Adjointness L Gamma prodp funcp Mono : Monotonicity L Gamma prodp |- Language] ?minL : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr funcp : expr -> expr ->...-> expr Adj : Adjointness L Gamma prodp funcp Mono : Monotonicity L Gamma prodp |- LeftDistr ?L ?Gamma ?prodp ?sump]"}, {"role": "assistant", "content": "```coq\nunfold funcp_mono2.\nintro x1.\nintro y1.\nintro y2.\nintros H1 H2.\napply prodp_mono2 in H1.\napply prodp_mono2 in H2.\nrewrite <- prodp_assoc1 with (x := x1) (y := y1) (z := y2).\nrewrite <- prodp_assoc2 with (x := x1) (y := y1) (z := y2).\napply funcp_mono2.\napply prodp_mono2.\napply prodp_mono2.\napply prodp_mono2.\napply prodp_mono2.\napply prodp_mono2.\napply prodp_mono2.\napply prodp_mono2.\napply prodp_mono2.\napply prodp_mono2.\napply prodp_mono2.\napply prodp_mono2.\napply prodp_mono2.\napply prodp_mono2.\napply prodp_mono2.\napply prodp_mono2.\napply prodp_mono2.\napply prodp_mono2.\napply prodp_mono2.\napply prodp_mono2.\napply prodp_mono2.\napply prodp_mono2.\napply prodp_mono2.\napply prodp_mono2.\napply prodp_mono2.\napply prodp_mono2.\napply prodp_mono2.\napply prodp_mono2.\napply prodp_mono2.\napply prodp_mono2.\napply prodp_mono2.\napply prodp_mono2.\napply prodp_mono2.\napply prodp_mono2.\napply prodp_mono2.\napply prodp_mono2.\napply prodp_mono2.\napply prodp_mono2.\napply prodp_mono2.\napply prodp_mono2.\napply prodp_mono2.\napply prodp_mono2.\napply prodp_mono2.\napply prodp_mono2.\napply prodp_mono2.\napply prodp_mono2.\napply prodp_mono2.\napply prodp_mono2.\napply prodp_mono2.\napply prodp_mono2.\napply prodp_mono2.\napply prodp_mono2.\napply prodp_mono2.\napply prodp_mono2.\napply prodp_mono2.\napply prodp_mono2.\napply prodp_mono2.\napply prodp_mono2.\napply prodp_mono2.\napply prodp_mono2.\napply prodp_mono2.\napply prodp_mono2.\napply prodp_mono2.\napply prodp_mono2.\napply prodp_mono2.\napply prodp_mono2.\napply prodp_mono2.\napply prodp_mono2.\napply prodp_mono2.\napply prodp_mono2.\napply prodp_mono2.\napply prodp_mono2.\napply prodp_mono2.\napply prodp_mono2.\napply prodp_mono2.\napply prodp_mono2.\napply prodp_mono2.\napply prodp_mono2.\napply prodp_mono2.\napply prodp_mono2.\napply prodp_mono2.\napply prodp_mono2.\napply prodp_mono2.\napply prodp_mono2.\napply prodp_mono2.\napply prodp_mono2.\napply prodp_mono2.\napply prodp_mono2.\napply prodp_mono2.\napply prodp_mono2.\napply prodp_mono2.\napply prodp_mono2.\napply prodp_mono2.\napply prodp_mono2.\napply prodp_mono2.\napply prodp_mono2.\napply prodp_mono2.\napply prodp_mono2.\napply prodp_mono2.\napply prodp_mono2.\napply prodp_mono2.\napply prodp_mono2.\napply prodp_mono2.\napply prodp_mono2.\napply prodp_mono2.\napply prodp_mono2.\napply prodp_mono2.\napply prodp_mono2.\napply prodp_mono2.\napply prodp_mono2.\napply prodp_mono2.\napply prodp_mono2.\napply prodp_mono2.\napply prodp_mono2.\napply prodp_mono2.\napply prodp_mono2.\napply prodp_mono2.\napply prodp_mono2.\napply prodp_mono2.\napply prodp_mono2.\napply prodp_mono2.\napply prodp_mono2.\napply prodp_mono2.\napply prodp_mono2.\napply prodp_mono2.\napply prodp_mono2.\napply prodp_mono2.\napply prodp_mono2.\napply prodp_mono2.\napply prodp_mono2.\napply prodp_mono2.\napply prodp_mono2.\napply prodp_mono2.\napply prodp_mono2.\napply prodp_mono2.\napply prodp_mono2.\napply prodp_mono2.\napply prodp_mono2.\napply prodp_mono2.\napply prodp_mono2.\napply prodp_mono2.\napply prodp_mono2.\napply prodp_mono2.\napply prodp_mono2.\napply prodp_mono2.\napply prodp_mono2.\napply prodp_mono2.\napply prodp_mono2.\napply prodp_mono2.\napply prodp_mono2.\napply prodp_mono"}], "original": "unfold funcp_mono2. intro x1. intro y1. intro y2. intros H1 H2. apply prodp_mono2 in H1. apply prodp_mono2 in H2. rewrite <- prodp_assoc1 with (x := x1) (y := y1) (z := y2). rewrite <- prodp_assoc2 with (x := x1) (y := y1) (z := y2). apply funcp_mono2. apply prodp_mono2. apply prodp_mono2. apply prodp_mono2. apply prodp_mono2. apply prodp_mono2. apply prodp_mono2. apply prodp_mono2. apply prodp_mono2. apply prodp_mono2. apply prodp_mono2. apply prodp_mono2. apply prodp_mono2. apply prodp_mono2. apply prodp_mono2. apply prodp_mono2. apply prodp_mono2. apply prodp_mono2. apply prodp_mono2. apply prodp_mono2. apply prodp_mono2. apply prodp_mono2. apply prodp_mono2. apply prodp_mono2. apply prodp_mono2. apply prodp_mono2. apply prodp_mono2. apply prodp_mono2. apply prodp_mono2. apply prodp_mono2. apply prodp_mono2. apply prodp_mono2. apply prodp_mono2. apply prodp_mono2. apply prodp_mono2. apply prodp_mono2. apply prodp_mono2. apply prodp_mono2. apply prodp_mono2. apply prodp_mono2. apply prodp_mono2. apply prodp_mono2. apply prodp_mono2. apply prodp_mono2. apply prodp_mono2. apply prodp_mono2. apply prodp_mono2. apply prodp_mono2. apply prodp_mono2. apply prodp_mono2. apply prodp_mono2. apply prodp_mono2. apply prodp_mono2. apply prodp_mono2. apply prodp_mono2. apply prodp_mono2. apply prodp_mono2. apply prodp_mono2. apply prodp_mono2. apply prodp_mono2. apply prodp_mono2. apply prodp_mono2. apply prodp_mono2. apply prodp_mono2. apply prodp_mono2. apply prodp_mono2. apply prodp_mono2. apply prodp_mono2. apply prodp_mono2. apply prodp_mono2. apply prodp_mono2. apply prodp_mono2. apply prodp_mono2. apply prodp_mono2. apply prodp_mono2. apply prodp_mono2. apply prodp_mono2. apply prodp_mono2. apply prodp_mono2. apply prodp_mono2. apply prodp_mono2. apply prodp_mono2. apply prodp_mono2. apply prodp_mono2. apply prodp_mono2. apply prodp_mono2. apply prodp_mono2. apply prodp_mono2. apply prodp_mono2. apply prodp_mono2. apply prodp_mono2. apply prodp_mono2. apply prodp_mono2. apply prodp_mono2. apply prodp_mono2. apply prodp_mono2. apply prodp_mono2. apply prodp_mono2. apply prodp_mono2. apply prodp_mono2. apply prodp_mono2. apply prodp_mono2. apply prodp_mono2. apply prodp_mono2. apply prodp_mono2. apply prodp_mono2. apply prodp_mono2. apply prodp_mono2. apply prodp_mono2. apply prodp_mono2. apply prodp_mono2. apply prodp_mono2. apply prodp_mono2. apply prodp_mono2. apply prodp_mono2. apply prodp_mono2. apply prodp_mono2. apply prodp_mono2. apply prodp_mono2. apply prodp_mono2. apply prodp_mono2. apply prodp_mono2. apply prodp_mono2. apply prodp_mono2. apply prodp_mono2. apply prodp_mono2. apply prodp_mono2. apply prodp_mono2. apply prodp_mono2. apply prodp_mono2. apply prodp_mono2. apply prodp_mono2. apply prodp_mono2. apply prodp_mono2. apply prodp_mono2. apply prodp_mono2. apply prodp_mono2. apply prodp_mono2. apply prodp_mono2. apply prodp_mono2. apply prodp_mono2. apply prodp_mono2. apply prodp_mono2. apply prodp_mono2. apply prodp_mono2. apply prodp_mono2. apply prodp_mono2. apply prodp_mono2. apply prodp_mono2. apply prodp_mono2.", "succ": false}]