[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": [], "tactic": "intros L minL Gamma minAX prodp e Mono Assoc LU RU.", "exn": "L is already used.", "type": "used_var", "handled": true}, {"ctx": [], "tactic": "intros L' minL Gamma minAX prodp e Mono Assoc LU RU.", "exn": "minL is already used.", "type": "used_var", "handled": true}, {"ctx": [], "tactic": "intros L' minL' Gamma minAX prodp e Mono Assoc LU RU.", "exn": "Gamma is already used.", "type": "used_var", "handled": true}, {"ctx": [], "tactic": "intros L' minL' Gamma' minAX prodp e Mono Assoc LU RU.", "exn": "minAX is already used.", "type": "used_var", "handled": true}, {"ctx": [], "tactic": "intros L' minL' Gamma' minAX' prodp e Mono Assoc LU RU.", "exn": "prodp is already used.", "type": "used_var", "handled": true}, {"ctx": [], "tactic": "intros L' minL' Gamma' minAX' prodp' e Mono Assoc LU RU.", "exn": "e is already used.", "type": "used_var", "handled": true}, {"ctx": [], "tactic": "intros L' minL' Gamma' minAX' prodp' e' Mono Assoc LU RU.", "exn": "Mono is already used.", "type": "used_var", "handled": true}, {"ctx": [], "tactic": "intros L' minL' Gamma' minAX' prodp' e' Mono' Assoc LU RU.", "exn": "Assoc is already used.", "type": "used_var", "handled": true}, {"ctx": [], "tactic": "intros L' minL' Gamma' minAX' prodp' e' Mono' Assoc' LU RU.", "exn": "LU is already used.", "type": "used_var", "handled": true}, {"ctx": [], "tactic": "intros L' minL' Gamma' minAX' prodp' e' Mono' Assoc' LU' RU.", "exn": "RU is already used.", "type": "used_var", "handled": true}, {"ctx": [], "tactic": "intros L' minL' Gamma' minAX' prodp' e' Mono' Assoc' LU' RU'.", "exn": "No product even after head-reduction.", "type": "no_product", "handled": true}, {"ctx": ["intros."], "tactic": "induction (TestInSequentCalculus.Unnamed_thm0 Phi x1 y1 x2 y2).", "exn": "The reference y2 was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros."], "tactic": "rewrite <- IHTestInSequentCalculus.Unnamed_thm0.", "exn": "The reference IHTestInSequentCalculus.Unnamed_thm0 was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros.", "rewrite <- SetoidList.fold_right_add.", "-"], "tactic": "apply TestInSequentCalculus.Unnamed_thm0.", "exn": "In environment L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr e : expr Mono : Monotonicity L Gamma prodp Assoc : Associativity L Gamma prodp LU : LeftUnit L Gamma e prodp RU : RightUnit L Gamma e prodp x : expr xs : list expr Unable to unify \"(let (derivable) := ?GammaD in derivable) ?M2194 (?M2197 --> ?M2198)\" with \"(let (provable) := Gamma in provable) (fold_right prodp e ?Goal5 --> fold_left prodp xs (prodp e x))\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros.", "rewrite <- SetoidList.fold_right_add.", "-", "qsimpl time: 1."], "tactic": "-", "exn": "Wrong bullet -: Current bullet - is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["intros.", "rewrite <- SetoidList.fold_right_add.", "-", "qsimpl time: 1.", "shelve.", "-"], "tactic": "rewrite <- IHTestInSequentCalculus.Unnamed_thm0.", "exn": "The reference IHTestInSequentCalculus.Unnamed_thm0 was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros.", "rewrite <- SetoidList.fold_right_add.", "-", "qsimpl time: 1.", "shelve.", "-"], "tactic": "-", "exn": "Wrong bullet -: Current bullet - is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["intros.", "rewrite <- SetoidList.fold_right_add.", "-", "qsimpl time: 1.", "shelve.", "-", "shelve.", "-"], "tactic": "apply TestInSequentCalculus.Unnamed_thm0.", "exn": "In environment L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr e : expr Mono : Monotonicity L Gamma prodp Assoc : Associativity L Gamma prodp LU : LeftUnit L Gamma e prodp RU : RightUnit L Gamma e prodp x : expr xs : list expr Unable to unify \"(let (derivable) := ?GammaD in derivable) ?M2952 (?M2955 --> ?M2956)\" with \"RelationClasses.Equivalence eq\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros.", "rewrite <- SetoidList.fold_right_add.", "-", "qsimpl time: 1.", "shelve.", "-", "shelve.", "-", "qsimpl time: 1."], "tactic": "-", "exn": "Wrong bullet -: Current bullet - is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["intros.", "rewrite <- SetoidList.fold_right_add.", "-", "qsimpl time: 1.", "shelve.", "-", "shelve.", "-", "qsimpl time: 1.", "shelve.", "-"], "tactic": "apply TestInSequentCalculus.Unnamed_thm0.", "exn": "In environment L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr e : expr Mono : Monotonicity L Gamma prodp Assoc : Associativity L Gamma prodp LU : LeftUnit L Gamma e prodp RU : RightUnit L Gamma e prodp x : expr xs : list expr Unable to unify \"(let (derivable) := ?GammaD in derivable) ?M6154 (?M6157 --> ?M6158)\" with \"forall x0 y : expr, ?Goal x0 y -> Morphisms.respectful eq eq (prodp x0) (prodp y)\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros.", "rewrite <- SetoidList.fold_right_add.", "-", "qsimpl time: 1.", "shelve.", "-", "shelve.", "-", "qsimpl time: 1.", "shelve.", "-", "qsimpl time: 1."], "tactic": "-", "exn": "Wrong bullet -: Current bullet - is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["intros.", "rewrite <- SetoidList.fold_right_add.", "-", "qsimpl time: 1.", "shelve.", "-", "shelve.", "-", "qsimpl time: 1.", "shelve.", "-", "qsimpl time: 1.", "+", "shelve.", "+", "shelve.", "-"], "tactic": "apply TestInSequentCalculus.Unnamed_thm0.", "exn": "In environment L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr e : expr Mono : Monotonicity L Gamma prodp Assoc : Associativity L Gamma prodp LU : LeftUnit L Gamma e prodp RU : RightUnit L Gamma e prodp x : expr xs : list expr Unable to unify \"(let (derivable) := ?GammaD in derivable) ?M8087 (?M8090 --> ?M8091)\" with \"forall x y z : expr, prodp x (prodp y z) = prodp y (prodp x z)\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros.", "rewrite <- SetoidList.fold_right_add.", "-", "qsimpl time: 1.", "shelve.", "-", "shelve.", "-", "qsimpl time: 1.", "shelve.", "-", "qsimpl time: 1.", "+", "shelve.", "+", "shelve.", "-", "qsimpl time: 1."], "tactic": "-", "exn": "Wrong bullet -: Current bullet - is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["intros.", "rewrite <- SetoidList.fold_right_add.", "-", "qsimpl time: 1.", "shelve.", "-", "shelve.", "-", "qsimpl time: 1.", "shelve.", "-", "qsimpl time: 1.", "+", "shelve.", "+", "shelve.", "-", "qsimpl time: 1.", "shelve.", "-"], "tactic": "apply TestInSequentCalculus.Unnamed_thm0.", "exn": "In environment L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr e : expr Mono : Monotonicity L Gamma prodp Assoc : Associativity L Gamma prodp LU : LeftUnit L Gamma e prodp RU : RightUnit L Gamma e prodp x : expr xs : list expr Unable to unify \"(let (derivable) := ?GammaD in derivable) ?M9567 (?M9570 --> ?M9571)\" with \"SetoidList.NoDupA ?Goal6 xs\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros.", "rewrite <- SetoidList.fold_right_add.", "-", "qsimpl time: 1.", "shelve.", "-", "shelve.", "-", "qsimpl time: 1.", "shelve.", "-", "qsimpl time: 1.", "+", "shelve.", "+", "shelve.", "-", "qsimpl time: 1.", "shelve.", "-", "qsimpl time: 1."], "tactic": "-", "exn": "Wrong bullet -: Current bullet - is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["intros.", "rewrite <- SetoidList.fold_right_add.", "-", "qsimpl time: 1.", "shelve.", "-", "shelve.", "-", "qsimpl time: 1.", "shelve.", "-", "qsimpl time: 1.", "+", "shelve.", "+", "shelve.", "-", "qsimpl time: 1.", "shelve.", "-", "qsimpl time: 1.", "shelve.", "-"], "tactic": "apply TestInSequentCalculus.Unnamed_thm0.", "exn": "In environment L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr e : expr Mono : Monotonicity L Gamma prodp Assoc : Associativity L Gamma prodp LU : LeftUnit L Gamma e prodp RU : RightUnit L Gamma e prodp x : expr xs : list expr Unable to unify \"(let (derivable) := ?GammaD in derivable) ?M10357 (?M10360 --> ?M10361)\" with \"SetoidList.NoDupA ?Goal5 xs\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros.", "rewrite <- SetoidList.fold_right_add.", "-", "qsimpl time: 1.", "shelve.", "-", "shelve.", "-", "qsimpl time: 1.", "shelve.", "-", "qsimpl time: 1.", "+", "shelve.", "+", "shelve.", "-", "qsimpl time: 1.", "shelve.", "-", "qsimpl time: 1.", "shelve.", "-", "qsimpl time: 1."], "tactic": "-", "exn": "Wrong bullet -: Current bullet - is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["intros.", "rewrite <- SetoidList.fold_right_add.", "-", "qsimpl time: 1.", "shelve.", "-", "shelve.", "-", "qsimpl time: 1.", "shelve.", "-", "qsimpl time: 1.", "+", "shelve.", "+", "shelve.", "-", "qsimpl time: 1.", "shelve.", "-", "qsimpl time: 1.", "shelve.", "-", "qsimpl time: 1.", "shelve.", "-"], "tactic": "apply TestInSequentCalculus.Unnamed_thm0.", "exn": "In environment L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr e : expr Mono : Monotonicity L Gamma prodp Assoc : Associativity L Gamma prodp LU : LeftUnit L Gamma e prodp RU : RightUnit L Gamma e prodp x : expr xs : list expr Unable to unify \"(let (derivable) := ?GammaD in derivable) ?M11147 (?M11150 --> ?M11151)\" with \"SetoidList.InA ?Goal4 x xs -> False\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros.", "rewrite <- SetoidList.fold_right_add.", "-", "qsimpl time: 1.", "shelve.", "-", "shelve.", "-", "qsimpl time: 1.", "shelve.", "-", "qsimpl time: 1.", "+", "shelve.", "+", "shelve.", "-", "qsimpl time: 1.", "shelve.", "-", "qsimpl time: 1.", "shelve.", "-", "qsimpl time: 1.", "shelve.", "-", "qsimpl time: 1."], "tactic": "-", "exn": "Wrong bullet -: Current bullet - is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["intros.", "rewrite <- SetoidList.fold_right_add.", "-", "qsimpl time: 1.", "shelve.", "-", "shelve.", "-", "qsimpl time: 1.", "shelve.", "-", "qsimpl time: 1.", "+", "shelve.", "+", "shelve.", "-", "qsimpl time: 1.", "shelve.", "-", "qsimpl time: 1.", "shelve.", "-", "qsimpl time: 1.", "shelve.", "-", "qsimpl time: 1.", "shelve.", "-"], "tactic": "apply TestInSequentCalculus.Unnamed_thm0.", "exn": "In environment L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr e : expr Mono : Monotonicity L Gamma prodp Assoc : Associativity L Gamma prodp LU : LeftUnit L Gamma e prodp RU : RightUnit L Gamma e prodp x : expr xs : list expr Unable to unify \"(let (derivable) := ?GammaD in derivable) ?M12221 (?M12224 --> ?M12225)\" with \"forall x0 : expr, SetoidList.InA ?Goal3 x0 xs <-> SetoidList.InA ?Goal3 x0 (x :: xs)\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros.", "rewrite <- SetoidList.fold_right_add.", "-", "qsimpl time: 1.", "shelve.", "-", "shelve.", "-", "qsimpl time: 1.", "shelve.", "-", "qsimpl time: 1.", "+", "shelve.", "+", "shelve.", "-", "qsimpl time: 1.", "shelve.", "-", "qsimpl time: 1.", "shelve.", "-", "qsimpl time: 1.", "shelve.", "-", "qsimpl time: 1.", "shelve.", "-", "qsimpl time: 1."], "tactic": "-", "exn": "Wrong bullet -: Current bullet - is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["intros.", "rewrite <- SetoidList.fold_right_add.", "-", "qsimpl time: 1.", "shelve.", "-", "shelve.", "-", "qsimpl time: 1.", "shelve.", "-", "qsimpl time: 1.", "+", "shelve.", "+", "shelve.", "-", "qsimpl time: 1.", "shelve.", "-", "qsimpl time: 1.", "shelve.", "-", "qsimpl time: 1.", "shelve.", "-", "qsimpl time: 1.", "shelve.", "-", "qsimpl time: 1.", "shelve."], "tactic": "-", "exn": "Wrong bullet -: No more subgoals.", "type": "no_more_subgoals", "handled": true}]}, "chat": [{"role": "user", "content": "I will give you a Coq proof state, including both hypotheses and a specific goal and your need to prove it. Your response should be a singular code block of Coq proof starting with \"```coq\n\", ending with \"Qed.```\", without any additional explanation or commentary. Follow to these guidelines:\nIntroduce variables using unique names to avoid any conflicts.\nKeep each command distinct and separated, avoid concatenations like ';' or '[cmd|cmd]'.\nOrganize your proof with bullets like '-', '+', and '*' instead of braces ({, }). Shift to their double symbols like '--' and '++', when necessary.\nEffectively use given premises, follow the syntax and structure demonstrated in the examples provided.\n\nExample 1:\n\nHypotheses:\nn, m: nat\nIHn: m + n = n + m\n\nGoal:\nm + S n = S n + m\n\nYour Response:\n```coq\nsimpl. rewrite <- IHn. auto.\nQed.```\n\nExample 2:\nHypotheses:\n\nGoal:\nforall n m : nat, m + n = n + m\n\nYour Response:\n```coq\nintros n m. induction n.\n- simpl. auto.\n- simpl. rewrite <- IHn. auto.\nQed.```\n\nSolve This Proof State:\n\nHypotheses:\nL: Language\nminL: MinimumLanguage L\nGamma: Provable L\nminAX: MinimumAxiomatization L Gamma\nprodp: expr -> expr -> expr\ne: expr\nMono: Monotonicity L Gamma prodp\nAssoc: Associativity L Gamma prodp\nLU: LeftUnit L Gamma e prodp\nRU: RightUnit L Gamma e prodp\n\nGoal:\nforall (x : expr) (xs : list expr), |-- prodp x (fold_right prodp e xs) --> fold_left prodp xs (prodp e x)\n\nPremises:\nMinimumAxiomatization : forall L : Language, MinimumLanguage L -> Provable L -> Prop\nAssociativity : forall L : Language, MinimumLanguage L -> Provable L -> (expr -> expr -> expr) -> Prop\nfold_left : forall A B : Type, (A -> B -> A) -> list B -> A -> A\nRecord Provable (L : Language) : Type := Build_Provable { provable : expr -> Prop } For Build_Provable: Argument scopes are [_ function_scope]\nRecord MinimumLanguage (L : Language) : Type := Build_MinimumLanguage { impp : expr -> expr -> expr } For Build_MinimumLanguage: Argument scopes are [_ function_scope]\nfold_right : forall A B : Type, (B -> A -> A) -> A -> list B -> A\nMonotonicity : forall L : Language, MinimumLanguage L -> Provable L -> (expr -> expr -> expr) -> Prop\nInductive list (A : Type) : Type := nil : list A | cons : A -> list A -> list A For cons: Arguments are renamed to A, a, l For nil: Argument A is implicit and maximally inserted For cons: Argument A is implicit and maximally inserted For list: Argument scope is [type_scope] For nil: Argument scope is [type_scope] For cons: Argument scopes are [type_scope _ list_scope]\nRightUnit : forall L : Language, MinimumLanguage L -> Provable L -> expr -> (expr -> expr -> expr) -> Prop\nLeftUnit : forall L : Language, MinimumLanguage L -> Provable L -> expr -> (expr -> expr -> expr) -> Prop\nexpr = fun Language0 : Language => let (expr) := Language0 in expr : Language -> Type Argument Language is implicit and maximally inserted\nadjoint_iter : forall (x : expr) (xs : list expr) (y : expr), |-- fold_left ?prodp xs x - -> y < -> |-- x - -> fold_right ?funcp y xs where ?L : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr e : expr Mono : Monotonicity L Gamma prodp Assoc : Associativity L Gamma prodp LU : LeftUnit L Gamma e prodp RU : RightUnit L Gamma e prodp |- Language] ?minL : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr ->...-> expr e : expr Mono : Monotonicity L Gamma prodp Assoc : Associativity L Gamma prodp LU : LeftUnit L Gamma e prodp RU : RightUnit L Gamma e prodp |- Adjointness ?L ?Gamma ?prodp ?funcp]\ndeduction_theorem_multi_imp : forall (Phi : context) (xs : list expr) (y : expr), Union expr Phi (fun x : expr => In x xs) |-- y < -> Phi |-- multi_imp xs y where ?L : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr e : expr Mono : Monotonicity L Gamma prodp Assoc : Associativity L Gamma prodp LU : LeftUnit L Gamma e prodp RU : RightUnit L Gamma e prodp |- Language] ?GammaD : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr ->...-> expr e : expr Mono : Monotonicity L Gamma prodp Assoc : Associativity L Gamma prodp LU : LeftUnit L Gamma e prodp RU : RightUnit L Gamma e prodp |- MinimumSequentCalculus ?L ?GammaD]\nderivable_finite_witnessed : forall (Phi : context) (y : expr), Phi |-- y -> exists xs : list expr, Forall Phi xs /\\ (fun x : expr => In x xs) |-- y where ?L : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr e : expr Mono : Monotonicity L Gamma prodp Assoc : Associativity L Gamma prodp LU : LeftUnit L Gamma e prodp RU : RightUnit L Gamma e prodp |- Language] ?Gamma : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr ->...-> expr e : expr Mono : Monotonicity L Gamma prodp Assoc : Associativity L Gamma prodp LU : LeftUnit L Gamma e prodp RU : RightUnit L Gamma e prodp |- FiniteWitnessedSequentCalculus ?L ?Gamma]\ncontextual_derivable_finite_witnessed : forall (Phi Psi : context) (y : expr), Union expr Phi Psi |-- y -> exists xs : list expr, Forall Psi xs /\\ Union expr Phi (fun x : expr => In x xs) |-- y where ?L : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr ->...-> expr e : expr Mono : Monotonicity L Gamma prodp Assoc : Associativity L Gamma prodp LU : LeftUnit L Gamma e prodp RU : RightUnit L Gamma e prodp |- FiniteWitnessedSequentCalculus ?L ?Gamma]\nderivable_provable : forall (Phi : context) (y : expr), Phi |-- y < -> (exists xs : list expr, Forall (fun x : expr => Phi x) xs /\\ |-- multi_imp xs y) where ?L : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr ->...-> expr e : expr Mono : Monotonicity L Gamma prodp Assoc : Associativity L Gamma prodp LU : LeftUnit L Gamma e prodp RU : RightUnit L Gamma e prodp |- NormalAxiomatization ?L ?GammaP ?GammaD]\ndeduction_impp_intros : forall (Phi : Ensemble expr) (x y : expr), Phi;; x |-- y -> Phi |-- x - -> y where ?L : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr e : expr Mono : Monotonicity L Gamma prodp Assoc : Associativity L Gamma prodp LU : LeftUnit L Gamma e prodp RU : RightUnit L Gamma e prodp |- Language] ?minL : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr ->...-> expr e : expr Mono : Monotonicity L Gamma prodp Assoc : Associativity L Gamma prodp LU : LeftUnit L Gamma e prodp RU : RightUnit L Gamma e prodp |- MinimumSequentCalculus ?L ?Gamma]\nderivable_axiom2 : forall (Phi : context) (x y z : expr), Phi |-- (x --> y --> z) - -> (x --> y) - -> x - -> z where ?L : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr e : expr Mono : Monotonicity L Gamma prodp Assoc : Associativity L Gamma prodp LU : LeftUnit L Gamma e prodp RU : RightUnit L Gamma e prodp |- Language] ?GammaD : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr ->...-> expr e : expr Mono : Monotonicity L Gamma prodp Assoc : Associativity L Gamma prodp LU : LeftUnit L Gamma e prodp RU : RightUnit L Gamma e prodp |- MinimumSequentCalculus ?L ?GammaD]\nderivable_modus_ponens : forall (Phi : context) (x y : expr), Phi |-- x - -> (x --> y) - -> y where ?L : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr e : expr Mono : Monotonicity L Gamma prodp Assoc : Associativity L Gamma prodp LU : LeftUnit L Gamma e prodp RU : RightUnit L Gamma e prodp |- Language] ?GammaD : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr ->...-> expr e : expr Mono : Monotonicity L Gamma prodp Assoc : Associativity L Gamma prodp LU : LeftUnit L Gamma e prodp RU : RightUnit L Gamma e prodp |- MinimumSequentCalculus ?L ?GammaD]\ndeduction_impp_arg_switch : forall (Phi : context) (x y z : expr), Phi |-- x - -> y - -> z -> Phi |-- y - -> x - -> z where ?L : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr e : expr Mono : Monotonicity L Gamma prodp Assoc : Associativity L Gamma prodp LU : LeftUnit L Gamma e prodp RU : RightUnit L Gamma e prodp |- Language] ?GammaD : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr ->...-> expr e : expr Mono : Monotonicity L Gamma prodp Assoc : Associativity L Gamma prodp LU : LeftUnit L Gamma e prodp RU : RightUnit L Gamma e prodp |- MinimumSequentCalculus ?L ?GammaD]\ndeduction_impp_trans : forall (Phi : context) (x y z : expr), Phi |-- x - -> y -> Phi |-- y - -> z -> Phi |-- x - -> z where ?L : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr e : expr Mono : Monotonicity L Gamma prodp Assoc : Associativity L Gamma prodp LU : LeftUnit L Gamma e prodp RU : RightUnit L Gamma e prodp |- Language] ?GammaD : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr ->...-> expr e : expr Mono : Monotonicity L Gamma prodp Assoc : Associativity L Gamma prodp LU : LeftUnit L Gamma e prodp RU : RightUnit L Gamma e prodp |- MinimumSequentCalculus ?L ?GammaD]\nTestInAxiomatization.Unnamed_thm0 : forall (Phi : context) (x1 y1 x2 y2 : expr), |-- x2 - -> x1 -> |-- y1 - -> y2 -> Phi |-- x1 - -> y1 -> Phi |-- x2 - -> y2 where ?L : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr ->...-> expr e : expr Mono : Monotonicity L Gamma prodp Assoc : Associativity L Gamma prodp LU : LeftUnit L Gamma e prodp RU : RightUnit L Gamma e prodp |- MinimumAxiomatization ?L ?GammaP]\nderivable_axiom1 : forall (Phi : context) (x y : expr), Phi |-- x - -> y - -> x where ?L : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr e : expr Mono : Monotonicity L Gamma prodp Assoc : Associativity L Gamma prodp LU : LeftUnit L Gamma e prodp RU : RightUnit L Gamma e prodp |- Language] ?GammaD : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr ->...-> expr e : expr Mono : Monotonicity L Gamma prodp Assoc : Associativity L Gamma prodp LU : LeftUnit L Gamma e prodp RU : RightUnit L Gamma e prodp |- MinimumSequentCalculus ?L ?GammaD]\nderivable_assum : forall (Phi : Ensemble expr) (x : expr), Ensembles.In expr Phi x -> Phi |-- x where ?L : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr e : expr Mono : Monotonicity L Gamma prodp Assoc : Associativity L Gamma prodp LU : LeftUnit L Gamma e prodp RU : RightUnit L Gamma e prodp |- Language] ?Gamma : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr ->...-> expr e : expr Mono : Monotonicity L Gamma prodp Assoc : Associativity L Gamma prodp LU : LeftUnit L Gamma e prodp RU : RightUnit L Gamma e prodp |- BasicSequentCalculus ?L ?Gamma]\nTestInSequentCalculus.Unnamed_thm0 : forall (Phi : context) (x1 y1 x2 y2 : expr), |-- x2 - -> x1 -> |-- y1 - -> y2 -> Phi |-- x1 - -> y1 -> Phi |-- x2 - -> y2 where ?L : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr ->...-> expr e : expr Mono : Monotonicity L Gamma prodp Assoc : Associativity L Gamma prodp LU : LeftUnit L Gamma e prodp RU : RightUnit L Gamma e prodp |- MinimumSequentCalculus ?L ?GammaD]\nderivable_impp_refl : forall (Phi : context) (x : expr), Phi |-- x - -> x where ?L : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr e : expr Mono : Monotonicity L Gamma prodp Assoc : Associativity L Gamma prodp LU : LeftUnit L Gamma e prodp RU : RightUnit L Gamma e prodp |- Language] ?GammaD : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr ->...-> expr e : expr Mono : Monotonicity L Gamma prodp Assoc : Associativity L Gamma prodp LU : LeftUnit L Gamma e prodp RU : RightUnit L Gamma e prodp |- MinimumSequentCalculus ?L ?GammaD]\ndeduction_weaken : forall (Phi Psi : Ensemble expr) (x : expr), Included expr Phi Psi -> Phi |-- x -> Psi |-- x where ?L : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr e : expr Mono : Monotonicity L Gamma prodp Assoc : Associativity L Gamma prodp LU : LeftUnit L Gamma e prodp RU : RightUnit L Gamma e prodp |- Language] ?Gamma : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr ->...-> expr e : expr Mono : Monotonicity L Gamma prodp Assoc : Associativity L Gamma prodp LU : LeftUnit L Gamma e prodp RU : RightUnit L Gamma e prodp |- BasicSequentCalculus ?L ?Gamma]\ndeduction_left_impp_intros : forall (Phi : context) (x y : expr), Phi |-- x -> Phi |-- y - -> x where ?L : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr e : expr Mono : Monotonicity L Gamma prodp Assoc : Associativity L Gamma prodp LU : LeftUnit L Gamma e prodp RU : RightUnit L Gamma e prodp |- Language] ?GammaD : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr ->...-> expr e : expr Mono : Monotonicity L Gamma prodp Assoc : Associativity L Gamma prodp LU : LeftUnit L Gamma e prodp RU : RightUnit L Gamma e prodp |- MinimumSequentCalculus ?L ?GammaD]\ndeduction_impp_elim : forall (Phi : context) (x y : expr), Phi |-- x - -> y -> Phi;; x |-- y where ?L : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr e : expr Mono : Monotonicity L Gamma prodp Assoc : Associativity L Gamma prodp LU : LeftUnit L Gamma e prodp RU : RightUnit L Gamma e prodp |- Language] ?GammaD : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr ->...-> expr e : expr Mono : Monotonicity L Gamma prodp Assoc : Associativity L Gamma prodp LU : LeftUnit L Gamma e prodp RU : RightUnit L Gamma e prodp |- MinimumSequentCalculus ?L ?GammaD]\ndeduction_modus_ponens : forall (Phi : context) (x y : expr), Phi |-- x -> Phi |-- x - -> y -> Phi |-- y where ?L : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr e : expr Mono : Monotonicity L Gamma prodp Assoc : Associativity L Gamma prodp LU : LeftUnit L Gamma e prodp RU : RightUnit L Gamma e prodp |- Language] ?minL : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr ->...-> expr e : expr Mono : Monotonicity L Gamma prodp Assoc : Associativity L Gamma prodp LU : LeftUnit L Gamma e prodp RU : RightUnit L Gamma e prodp |- MinimumSequentCalculus ?L ?Gamma]\nTestInAxiomatization.Unnamed_thm : forall (Phi : context) (y1 y2 : expr), |-- y1 - -> y2 -> Phi |-- y1 -> Phi |-- y2 where ?L : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr e : expr Mono : Monotonicity L Gamma prodp Assoc : Associativity L Gamma prodp LU : LeftUnit L Gamma e prodp RU : RightUnit L Gamma e prodp |- Language] ?minL : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr ->...-> expr e : expr Mono : Monotonicity L Gamma prodp Assoc : Associativity L Gamma prodp LU : LeftUnit L Gamma e prodp RU : RightUnit L Gamma e prodp |- MinimumAxiomatization ?L ?GammaP]\ndeduction_theorem : forall (Phi : context) (x y : expr), Phi;; x |-- y < -> Phi |-- x - -> y where ?L : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr e : expr Mono : Monotonicity L Gamma prodp Assoc : Associativity L Gamma prodp LU : LeftUnit L Gamma e prodp RU : RightUnit L Gamma e prodp |- Language] ?GammaD : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr ->...-> expr e : expr Mono : Monotonicity L Gamma prodp Assoc : Associativity L Gamma prodp LU : LeftUnit L Gamma e prodp RU : RightUnit L Gamma e prodp |- MinimumSequentCalculus ?L ?GammaD]\nfuncp_mono : forall x1 y1 x2 y2 : expr, |-- x2 - -> x1 -> |-- y1 - -> y2 -> |-- ?funcp x1 y1 - -> ?funcp x2 y2 where ?L : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr ->...-> expr e : expr Mono : Monotonicity L Gamma prodp Assoc : Associativity L Gamma prodp LU : LeftUnit L Gamma e prodp RU : RightUnit L Gamma e prodp |- Monotonicity ?L ?Gamma ?prodp]\nTestInSequentCalculus.Unnamed_thm : forall (Phi : context) (y1 y2 : expr), |-- y1 - -> y2 -> Phi |-- y1 -> Phi |-- y2 where ?L : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr e : expr Mono : Monotonicity L Gamma prodp Assoc : Associativity L Gamma prodp LU : LeftUnit L Gamma e prodp RU : RightUnit L Gamma e prodp |- Language] ?minL : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr ->...-> expr e : expr Mono : Monotonicity L Gamma prodp Assoc : Associativity L Gamma prodp LU : LeftUnit L Gamma e prodp RU : RightUnit L Gamma e prodp |- MinimumSequentCalculus ?L ?GammaD]\nTestInAxiomatization.Unnamed_thm1 : context -> forall x1 y1 x2 y2 : expr, |-- x2 - -> x1 -> |-- y1 - -> y2 -> |-- (x1 --> y1) - -> x2 - -> y2 where ?L : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr ->...-> expr e : expr Mono : Monotonicity L Gamma prodp Assoc : Associativity L Gamma prodp LU : LeftUnit L Gamma e prodp RU : RightUnit L Gamma e prodp |- MinimumAxiomatization ?L ?GammaP]\nTestInSequentCalculus.Unnamed_thm1 : context -> forall x1 y1 x2 y2 : expr, |-- x2 - -> x1 -> |-- y1 - -> y2 -> |-- (x1 --> y1) - -> x2 - -> y2 where ?L : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr ->...-> expr e : expr Mono : Monotonicity L Gamma prodp Assoc : Associativity L Gamma prodp LU : LeftUnit L Gamma e prodp RU : RightUnit L Gamma e prodp |- MinimumSequentCalculus ?L ?GammaD]\nfuncp_mono2 : forall x y1 y2 : expr, |-- y1 - -> y2 -> |-- ?funcp x y1 - -> ?funcp x y2 where ?L : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr e : expr Mono : Monotonicity L Gamma prodp Assoc : Associativity L Gamma prodp LU : LeftUnit L Gamma e prodp RU : RightUnit L Gamma e prodp |- Language] ?minL : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr ->...-> expr e : expr Mono : Monotonicity L Gamma prodp Assoc : Associativity L Gamma prodp LU : LeftUnit L Gamma e prodp RU : RightUnit L Gamma e prodp |- Adjointness ?L ?Gamma ?prodp ?funcp]\nprodp_mono1 : forall x1 x2 y : expr, |-- x1 - -> x2 -> |-- ?prodp x1 y - -> ?prodp x2 y where ?L : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr e : expr Mono : Monotonicity L Gamma prodp Assoc : Associativity L Gamma prodp LU : LeftUnit L Gamma e prodp RU : RightUnit L Gamma e prodp |- Language] ?minL : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr ->...-> expr e : expr Mono : Monotonicity L Gamma prodp Assoc : Associativity L Gamma prodp LU : LeftUnit L Gamma e prodp RU : RightUnit L Gamma e prodp |- Adjointness ?L ?Gamma ?prodp ?funcp]\nadjoint_modus_ponens : forall x y : expr, |-- ?prodp (?funcp x y) x - -> y where ?L : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr e : expr Mono : Monotonicity L Gamma prodp Assoc : Associativity L Gamma prodp LU : LeftUnit L Gamma e prodp RU : RightUnit L Gamma e prodp |- Language] ?minL : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr ->...-> expr e : expr Mono : Monotonicity L Gamma prodp Assoc : Associativity L Gamma prodp LU : LeftUnit L Gamma e prodp RU : RightUnit L Gamma e prodp |- Adjointness ?L ?Gamma ?prodp ?funcp]\nadjoint : forall x y z : expr, |-- ?prodp x y - -> z < -> |-- x - -> ?funcp y z where ?L : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr e : expr Mono : Monotonicity L Gamma prodp Assoc : Associativity L Gamma prodp LU : LeftUnit L Gamma e prodp RU : RightUnit L Gamma e prodp |- Language] ?minL : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr ->...-> expr e : expr Mono : Monotonicity L Gamma prodp Assoc : Associativity L Gamma prodp LU : LeftUnit L Gamma e prodp RU : RightUnit L Gamma e prodp |- Adjointness ?L ?Gamma ?prodp ?funcp]\ndeduction_weaken0 : forall (Phi : context) (y : expr), |-- y -> Phi |-- y where ?L : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr -> expr e : expr Mono : Monotonicity L Gamma prodp Assoc : Associativity L Gamma prodp LU : LeftUnit L Gamma e prodp RU : RightUnit L Gamma e prodp |- Language] ?Gamma : [L : Language minL : MinimumLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma prodp : expr -> expr ->...-> expr e : expr Mono : Monotonicity L Gamma prodp Assoc : Associativity L Gamma prodp LU : LeftUnit L Gamma e prodp RU : RightUnit L Gamma e prodp |- NormalSequentCalculus ?L ?GammaP ?Gamma]"}, {"role": "assistant", "content": "```coq\nintros L minL Gamma minAX prodp e Mono Assoc LU RU.\ninduction (TestInSequentCalculus.Unnamed_thm0 Phi x1 y1 x2 y2).\n- simpl. rewrite <- IHTestInSequentCalculus.Unnamed_thm0. auto.\n- simpl. apply TestInSequentCalculus.Unnamed_thm0. auto.\n- simpl. rewrite <- IHTestInSequentCalculus.Unnamed_thm0. auto.\n- simpl. apply TestInSequentCalculus.Unnamed_thm0. auto.\n- simpl. apply TestInSequentCalculus.Unnamed_thm0. auto.\n- simpl. apply TestInSequentCalculus.Unnamed_thm0. auto.\n- simpl. apply TestInSequentCalculus.Unnamed_thm0. auto.\n- simpl. apply TestInSequentCalculus.Unnamed_thm0. auto.\n- simpl. apply TestInSequentCalculus.Unnamed_thm0. auto.\n- simpl. apply TestInSequentCalculus.Unnamed_thm0. auto.\n- simpl. apply TestInSequentCalculus.Unnamed_thm0. auto.\n- simpl. apply TestInSequentCalculus.Unnamed_thm0. auto.\n- simpl. apply TestInSequentCalculus.Unnamed_thm0. auto.\n- simpl. apply TestInSequentCalculus.Unnamed_thm0. auto.\n- simpl. apply TestInSequentCalculus.Unnamed_thm0. auto.\n- simpl. apply TestInSequentCalculus.Unnamed_thm0. auto.\n- simpl. apply TestInSequentCalculus.Unnamed_thm0. auto.\n- simpl. apply TestInSequentCalculus.Unnamed_thm0. auto.\n- simpl. apply TestInSequentCalculus.Unnamed_thm0. auto.\n- simpl. apply TestInSequentCalculus.Unnamed_thm0. auto.\n- simpl. apply TestInSequentCalculus.Unnamed_thm0. auto.\n- simpl. apply TestInSequentCalculus.Unnamed_thm0. auto.\n- simpl. apply TestInSequentCalculus.Unnamed_thm0. auto.\n- simpl. apply TestInSequentCalculus.Unnamed_thm0. auto.\n- simpl. apply TestInSequentCalculus.Unnamed_thm0. auto.\n- simpl. apply TestInSequentCalculus.Unnamed_thm0. auto.\n- simpl. apply TestInSequentCalculus.Unnamed_thm0. auto.\n- simpl. apply TestInSequentCalculus.Unnamed_thm0. auto.\n- simpl. apply TestInSequentCalculus.Unnamed_thm0. auto.\n- simpl. apply TestInSequentCalculus.Unnamed_thm0. auto.\n- simpl. apply TestInSequentCalculus.Unnamed_thm0. auto.\n- simpl. apply TestInSequentCalculus.Unnamed_thm0. auto.\n- simpl. apply TestInSequentCalculus.Unnamed_thm0. auto.\n- simpl. apply TestInSequentCalculus.Unnamed_thm0. auto.\n- simpl. apply TestInSequentCalculus.Unnamed_thm0. auto.\n- simpl. apply TestInSequentCalculus.Unnamed_thm0. auto.\n- simpl. apply TestInSequentCalculus.Unnamed_thm0. auto.\n- simpl. apply TestInSequentCalculus.Unnamed_thm0. auto.\n- simpl. apply TestInSequentCalculus.Unnamed_thm0. auto.\n- simpl. apply TestInSequentCalculus.Unnamed_thm0. auto.\n- simpl. apply TestInSequentCalculus.Unnamed_thm0. auto.\n- simpl. apply TestInSequentCalculus.Unnamed_thm0. auto.\n- simpl. apply TestInSequentCalculus.Unnamed_thm0. auto.\n- simpl. apply TestInSequentCalculus.Unnamed_thm0. auto.\n- simpl. apply TestInSequentCalculus.Unnamed_thm0. auto.\n- simpl. apply TestInSequentCalculus.Unnamed_thm0. auto.\n- simpl. apply TestInSequentCalculus.Unnamed_thm0. auto.\n- simpl. apply TestInSequentCalculus.Unnamed_thm0. auto.\n- simpl. apply TestInSequentCalculus.Unnamed_thm0. auto.\n- simpl. apply TestInSequentCalculus.Unnamed_thm0. auto.\n- simpl. apply TestInSequentCalculus.Unnamed_thm0. auto.\n- simpl. apply TestInSequentCalculus.Unnamed_thm0. auto.\n- simpl. apply TestInSequentCalculus.Unnamed_thm0. auto"}], "original": "intros L minL Gamma minAX prodp e Mono Assoc LU RU. induction (TestInSequentCalculus.Unnamed_thm0 Phi x1 y1 x2 y2). - simpl. rewrite <- IHTestInSequentCalculus.Unnamed_thm0. auto. - simpl. apply TestInSequentCalculus.Unnamed_thm0. auto. - simpl. rewrite <- IHTestInSequentCalculus.Unnamed_thm0. auto. - simpl. apply TestInSequentCalculus.Unnamed_thm0. auto. - simpl. apply TestInSequentCalculus.Unnamed_thm0. auto. - simpl. apply TestInSequentCalculus.Unnamed_thm0. auto. - simpl. apply TestInSequentCalculus.Unnamed_thm0. auto. - simpl. apply TestInSequentCalculus.Unnamed_thm0. auto. - simpl. apply TestInSequentCalculus.Unnamed_thm0. auto. - simpl. apply TestInSequentCalculus.Unnamed_thm0. auto. - simpl. apply TestInSequentCalculus.Unnamed_thm0. auto. - simpl. apply TestInSequentCalculus.Unnamed_thm0. auto. - simpl. apply TestInSequentCalculus.Unnamed_thm0. auto. - simpl. apply TestInSequentCalculus.Unnamed_thm0. auto. - simpl. apply TestInSequentCalculus.Unnamed_thm0. auto. - simpl. apply TestInSequentCalculus.Unnamed_thm0. auto. - simpl. apply TestInSequentCalculus.Unnamed_thm0. auto. - simpl. apply TestInSequentCalculus.Unnamed_thm0. auto. - simpl. apply TestInSequentCalculus.Unnamed_thm0. auto. - simpl. apply TestInSequentCalculus.Unnamed_thm0. auto. - simpl. apply TestInSequentCalculus.Unnamed_thm0. auto. - simpl. apply TestInSequentCalculus.Unnamed_thm0. auto. - simpl. apply TestInSequentCalculus.Unnamed_thm0. auto. - simpl. apply TestInSequentCalculus.Unnamed_thm0. auto. - simpl. apply TestInSequentCalculus.Unnamed_thm0. auto. - simpl. apply TestInSequentCalculus.Unnamed_thm0. auto. - simpl. apply TestInSequentCalculus.Unnamed_thm0. auto. - simpl. apply TestInSequentCalculus.Unnamed_thm0. auto. - simpl. apply TestInSequentCalculus.Unnamed_thm0. auto. - simpl. apply TestInSequentCalculus.Unnamed_thm0. auto. - simpl. apply TestInSequentCalculus.Unnamed_thm0. auto. - simpl. apply TestInSequentCalculus.Unnamed_thm0. auto. - simpl. apply TestInSequentCalculus.Unnamed_thm0. auto. - simpl. apply TestInSequentCalculus.Unnamed_thm0. auto. - simpl. apply TestInSequentCalculus.Unnamed_thm0. auto. - simpl. apply TestInSequentCalculus.Unnamed_thm0. auto. - simpl. apply TestInSequentCalculus.Unnamed_thm0. auto. - simpl. apply TestInSequentCalculus.Unnamed_thm0. auto. - simpl. apply TestInSequentCalculus.Unnamed_thm0. auto. - simpl. apply TestInSequentCalculus.Unnamed_thm0. auto. - simpl. apply TestInSequentCalculus.Unnamed_thm0. auto. - simpl. apply TestInSequentCalculus.Unnamed_thm0. auto. - simpl. apply TestInSequentCalculus.Unnamed_thm0. auto. - simpl. apply TestInSequentCalculus.Unnamed_thm0. auto. - simpl. apply TestInSequentCalculus.Unnamed_thm0. auto. - simpl. apply TestInSequentCalculus.Unnamed_thm0. auto. - simpl. apply TestInSequentCalculus.Unnamed_thm0. auto. - simpl. apply TestInSequentCalculus.Unnamed_thm0. auto. - simpl. apply TestInSequentCalculus.Unnamed_thm0. auto. - simpl. apply TestInSequentCalculus.Unnamed_thm0. auto. - simpl. apply TestInSequentCalculus.Unnamed_thm0. auto. - simpl. apply TestInSequentCalculus.Unnamed_thm0. auto. - simpl. apply TestInSequentCalculus.Unnamed_thm0.", "succ": false}]