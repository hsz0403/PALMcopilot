[{"history": {"proof": "shelve.", "repairs": [""], "exceptions": []}, "chat": [{"role": "user", "content": "I will give you a Coq proof state, including both hypotheses and a specific goal and your need to prove it. Your response should be a singular code block of Coq proof starting with \"```coq\n\", ending with \"Qed.```\", without any additional explanation or commentary. Follow to these guidelines:\nIntroduce variables using unique names to avoid any conflicts.\nKeep each command distinct and separated, avoid concatenations like ';' or '[cmd|cmd]'.\nOrganize your proof with bullets like '-', '+', and '*' instead of braces ({, }). Shift to their double symbols like '--' and '++', when necessary.\nEffectively use given premises, follow the syntax and structure demonstrated in the examples provided.\n\nExample 1:\n\nHypotheses:\nn, m: nat\nIHn: m + n = n + m\n\nGoal:\nm + S n = S n + m\n\nYour Response:\n```coq\nsimpl. rewrite <- IHn. auto.\nQed.```\n\nExample 2:\nHypotheses:\n\nGoal:\nforall n m : nat, m + n = n + m\n\nYour Response:\n```coq\nintros n m. induction n.\n- simpl. auto.\n- simpl. rewrite <- IHn. auto.\nQed.```\n\nSolve This Proof State:\n\nHypotheses:\nNone\n\nGoal:\nforall (A B : Type) (P Q : A -> B -> Prop), (forall (a : A) (b : B), P a b -> Q a b) -> forall (lA : list A) (lB : list B), Forall2 P lA lB -> Forall2 Q lA lB\n\nPremises:\nInductive list (A : Type) : Type := nil : list A | cons : A -> list A -> list A For cons: Arguments are renamed to A, a, l For nil: Argument A is implicit and maximally inserted For cons: Argument A is implicit and maximally inserted For list: Argument scope is [type_scope] For nil: Argument scope is [type_scope] For cons: Argument scopes are [type_scope _ list_scope]\nInductive GFormula (TA TX AA AF : Type) : Type := TT : Tauto.GFormula | FF : Tauto.GFormula | X : TX -> Tauto.GFormula | A : TA -> AA -> Tauto.GFormula | Cj : Tauto.GFormula -> Tauto.GFormula -> Tauto.GFormula | D : Tauto.GFormula -> Tauto.GFormula -> Tauto.GFormula | N : Tauto.GFormula -> Tauto.GFormula | I : Tauto.GFormula -> option AF -> Tauto.GFormula -> Tauto.GFormula For GFormula: Arguments TA, TX, AA, AF are implicit and maximally inserted For TT: Arguments TA, TX, AA, AF are implicit and maximally inserted For FF: Arguments TA, TX, AA, AF are implicit and maximally inserted For X: Arguments TA, TX, AA, AF are implicit and maximally inserted For A: Arguments TA, TX, AA, AF are implicit and maxim\nRecord Q : Set := Qmake { Qnum : BinNums.Z; Qden : BinNums.positive } For Qmake: Argument scopes are [Z_scope positive_scope]\nForall2 : forall A B : Type, (A -> B -> Prop) -> list A -> list B -> Prop\nForall2_ind : forall (A B : Type) (R : A -> B -> Prop) (P : list A -> list B -> Prop), P nil nil -> (forall (x : A) (y : B) (l : list A) (l' : list B), R x y -> Forall2 R l l' -> P l l' -> P (x :: l) (y :: l')) -> forall (l : list A) (l0 : list B), Forall2 R l l0 -> P l l0\nForall2_sind : forall (A B : Type) (R : A -> B -> Prop) (P : list A -> list B -> SProp), P nil nil -> (forall (x : A) (y : B) (l : list A) (l' : list B), R x y -> Forall2 R l l' -> P l l' -> P (x :: l) (y :: l')) -> forall (l : list A) (l0 : list B), Forall2 R l l0 -> P l l0\nForall2_app : forall (A B : Type) (R : A -> B -> Prop) (l1 l2 : list A) (l1' l2' : list B), Forall2 R l1 l1' -> Forall2 R l2 l2' -> Forall2 R (l1 ++ l2) (l1' ++ l2')\nForall2_cons : forall (A B : Type) (R : A -> B -> Prop) (x : A) (y : B) (l : list A) (l' : list B), R x y -> Forall2 R l l' -> Forall2 R (x :: l) (y :: l')\nForall2_app_inv_l : forall (A B : Type) (R : A -> B -> Prop) (l1 l2 : list A) (l' : list B), Forall2 R (l1 ++ l2) l' -> exists l1' l2' : list B, Forall2 R l1 l1' /\\ Forall2 R l2 l2' /\\ l' = l1' ++ l2'\nInductive BoolSpec (P Q : Prop) : bool -> Prop := BoolSpecT : P -> BoolSpec P Q true | BoolSpecF : Q -> BoolSpec P Q false For BoolSpecT: Argument P is implicit For BoolSpecF: Argument Q is implicit For BoolSpec: Argument scopes are [type_scope type_scope bool_scope] For BoolSpecT: Argument scopes are [type_scope type_scope _] For BoolSpecF: Argument scopes are [type_scope type_scope _]\nlist_ind : forall (A : Type) (P : list A -> Prop), P nil -> (forall (a : A) (l : list A), P l -> P (a :: l)) -> forall l : list A, P l\nrev_list_ind : forall (A : Type) (P : list A -> Prop), P nil -> (forall (a : A) (l : list A), P (rev l) -> P (rev (a :: l))) -> forall l : list A, P (rev l)\nlist_rec : forall (A : Type) (P : list A -> Set), P nil -> (forall (a : A) (l : list A), P l -> P (a :: l)) -> forall l : list A, P l\nlist_rect : forall (A : Type) (P : list A -> Type), P nil -> (forall (a : A) (l : list A), P l -> P (a :: l)) -> forall l : list A, P l\nForall2_nil : forall (A B : Type) (R : A -> B -> Prop), Forall2 R nil nil\nForall2_refl : forall (A B : Type) (R : A -> B -> Prop), Forall2 R nil nil\nForall2_app_inv_r : forall (A B : Type) (R : A -> B -> Prop) (l1' l2' : list B) (l : list A), Forall2 R l (l1' ++ l2') -> exists l1 l2 : list A, Forall2 R l1 l1' /\\ Forall2 R l2 l2' /\\ l = l1 ++ l2\nNoDup_ind : forall (A : Type) (P : list A -> Prop), P nil -> (forall (x : A) (l : list A), ~ In x l -> NoDup l -> P l -> P (x :: l)) -> forall l : list A, NoDup l -> P l\nPermutation_ind : forall (A : Type) (P : list A -> list A -> Prop), P nil nil -> (forall (x : A) (l l' : list A), Permutation l l' -> P l l' -> P (x :: l) (x :: l')) -> (forall (x y : A) (l : list A), P (y :: x :: l) (x :: y :: l)) -> (forall l l' l'' : list A, Permutation l l' -> P l l' -> Permutation l' l'' -> P l' l'' -> P l l'') -> forall l l0 : list A, Permutation l l0 -> P l l0\nSetoidList.eqlistA_ind : forall (A : Type) (eqA : A -> A -> Prop) (P : list A -> list A -> Prop), P nil nil -> (forall (x x' : A) (l l' : list A), eqA x x' -> SetoidList.eqlistA eqA l l' -> P l l' -> P (x :: l) (x' :: l')) -> forall l l0 : list A, SetoidList.eqlistA eqA l l0 -> P l l0\nPermutation_sind : forall (A : Type) (P : list A -> list A -> SProp), P nil nil -> (forall (x : A) (l l' : list A), Permutation l l' -> P l l' -> P (x :: l) (x :: l')) -> (forall (x y : A) (l : list A), P (y :: x :: l) (x :: y :: l)) -> (forall l l' l'' : list A, Permutation l l' -> P l l' -> Permutation l' l'' -> P l' l'' -> P l l'') -> forall l l0 : list A, Permutation l l0 -> P l l0\nlist_Symmetric = fun (A : Type) (R : relation A) (EqA : Equivalence R) (x y : list A) (H : Forall2 equiv x y) => list_ind (fun x0 : list A => forall y0 : list A, Forall2 equiv x0 y0 -> Forall2 equiv y0 x0) (fun (y0 : list A) (H0 : Forall2 equiv nil y0) => match y0 as l return (Forall2 equiv nil l -> Forall2 equiv l nil) with | nil => fun _ : Forall2 equiv nil nil => Forall2_nil equiv | a :: y1 => fun H1 : Forall2 equiv nil (a :: y1) => let H2 : nil = nil -> a :: y1 = a :: y1 -> Forall2 equiv (a :: y1) nil := match H1 in (Forall2 _ l l0) return (l = nil -> l0 =...\nRing_theory.div_eucl_th : forall (R : Type) (req : R -> R -> Prop) (C : Type) (cadd cmul : C -> C -> C) (phi : C -> R) (cdiv : C -> C -> C * C), Ring_theory.div_theory req cadd cmul phi cdiv -> forall a b : C, let (q, r) := cdiv a b in req (phi a) (phi (cadd (cmul b q) r))\nincl_Add_inv : forall (A : Type) (a : A) (l u v : list A), ~ In a l -> incl (a :: l) v -> Add a u v -> incl l u\nRing_polynom.PExpr_ind : forall (C : Type) (P : Ring_polynom.PExpr C -> Prop), P Ring_polynom.PEO -> P Ring_polynom.PEI -> (forall c : C, P (Ring_polynom.PEc c)) -> (forall p : BinNums.positive, P (Ring_polynom.PEX C p)) -> (forall p : Ring_polynom.PExpr C, P p -> forall p0 : Ring_polynom.PExpr C, P p0 -> P (Ring_polynom.PEadd p p0)) -> (forall p : Ring_polynom.PExpr C, P p -> forall p0 : Ring_polynom.PExpr C, P p0 -> P (Ring_polynom.PEsub p p0)) -> (forall p : Ring_polynom.PExpr C, P p -> forall p0 : Ring_polynom.PExpr C, P p0 -> P (Ring_polynom.PEmul p p0)) ->...-> forall p : Ring_polynom.PExpr C, P p\nfold_left : forall A B : Type, (A -> B -> A) -> list B -> A -> A\nRing_polynom.Pol_ind : forall (C : Type) (P : Ring_polynom.Pol C -> Prop), (forall c : C, P (Ring_polynom.Pc c)) -> (forall (p : BinNums.positive) (p0 : Ring_polynom.Pol C), P p0 -> P (Ring_polynom.Pinj p p0)) -> (forall p : Ring_polynom.Pol C, P p -> forall (p0 : BinNums.positive) (p1 : Ring_polynom.Pol C), P p1 -> P (Ring_polynom.PX p p0 p1)) -> forall p : Ring_polynom.Pol C, P p\nForall_cons : forall (A : Type) (P : A -> Prop) (x : A) (l : list A), P x -> Forall P l -> Forall P (x :: l)\nlist_Transitive = fun (A : Type) (R : relation A) (EqA : Equivalence R) (x y z : list A) (H : Forall2 equiv x y) (H0 : Forall2 equiv y z) => list_ind (fun x0 : list A => forall y0 z0 : list A, Forall2 equiv x0 y0 -> Forall2 equiv y0 z0 -> Forall2 equiv x0 z0) (fun (y0 z0 : list A) (H1 : Forall2 equiv nil y0) (H2 : Forall2 equiv y0 z0) => match y0 as l return (Forall2 equiv nil l -> Forall2 equiv l z0 -> Forall2 equiv nil z0) with | nil => fun (H3 : Forall2 equiv nil nil) (H4 : Forall2 equiv nil z0) => match z0 as l return (Forall2 equiv nil l -> Forall2...\nExists_cons_hd : forall (A : Type) (P : A -> Prop) (x : A) (l : list A), P x -> Exists P (x :: l)\nin_dec : forall A : Type, (forall x y : A, {x = y} + {x <> y}) -> forall (a : A) (l : list A), {In a l} + {~ In a l}\nListDec.In_dec : forall A : Type, (forall x y : A, {x = y} + {x <> y}) -> forall (a : A) (l : list A), {In a l} + {~ In a l}\nExists_cons_tl : forall (A : Type) (P : A -> Prop) (x : A) (l : list A), Exists P l -> Exists P (x :: l)\nsemi_group_fold = fun (A : Type) (default : A) (f : A -> A -> A) (l : list A) => match l with | nil => default | a :: l0 => fold_left f l0 a end : forall A : Type, A -> (A -> A -> A) -> list A -> A Argument A is implicit and maximally inserted Argument scopes are [type_scope _ function_scope list_scope]"}, {"role": "assistant", "content": "```coq\n```"}], "original": "", "succ": false}]