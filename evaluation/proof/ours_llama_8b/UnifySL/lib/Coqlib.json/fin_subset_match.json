[{"history": {"proof": "shelve.", "repairs": [""], "exceptions": []}, "chat": [{"role": "user", "content": "I will give you a Coq proof state, including both hypotheses and a specific goal and your need to prove it. Your response should be a singular code block of Coq proof starting with \"```coq\n\", ending with \"Qed.```\", without any additional explanation or commentary. Follow to these guidelines:\nIntroduce variables using unique names to avoid any conflicts.\nKeep each command distinct and separated, avoid concatenations like ';' or '[cmd|cmd]'.\nOrganize your proof with bullets like '-', '+', and '*' instead of braces ({, }). Shift to their double symbols like '--' and '++', when necessary.\nEffectively use given premises, follow the syntax and structure demonstrated in the examples provided.\n\nExample 1:\n\nHypotheses:\nn, m: nat\nIHn: m + n = n + m\n\nGoal:\nm + S n = S n + m\n\nYour Response:\n```coq\nsimpl. rewrite <- IHn. auto.\nQed.```\n\nExample 2:\nHypotheses:\n\nGoal:\nforall n m : nat, m + n = n + m\n\nYour Response:\n```coq\nintros n m. induction n.\n- simpl. auto.\n- simpl. rewrite <- IHn. auto.\nQed.```\n\nSolve This Proof State:\n\nHypotheses:\nA: Type\nB: Type\nP: A -> B -> Prop\n\nGoal:\nforall (X : Ensemble A) (Y : Ensemble B), (forall x : A, X x -> exists y : B, P x y /\\ Y y) -> forall xs : list A, Forall (fun x : A => X x) xs -> exists ys : list B, Forall2 P xs ys /\\ Forall (fun y : B => Y y) ys\n\nPremises:\nEnsemble = fun U : Type => U -> Prop : Type -> Type Argument scope is [type_scope]\nForall : forall A : Type, (A -> Prop) -> list A -> Prop\nInductive GFormula (TA TX AA AF : Type) : Type := TT : Tauto.GFormula | FF : Tauto.GFormula | X : TX -> Tauto.GFormula | A : TA -> AA -> Tauto.GFormula | Cj : Tauto.GFormula -> Tauto.GFormula -> Tauto.GFormula | D : Tauto.GFormula -> Tauto.GFormula -> Tauto.GFormula | N : Tauto.GFormula -> Tauto.GFormula | I : Tauto.GFormula -> option AF -> Tauto.GFormula -> Tauto.GFormula For GFormula: Arguments TA, TX, AA, AF are implicit and maximally inserted For TT: Arguments TA, TX, AA, AF are implicit and maximally inserted For FF: Arguments TA, TX, AA, AF are implicit and maximally inserted For X: Arguments TA, TX, AA, AF are implicit and maximally inserted For A: Arguments TA, TX, AA\nForall2 : forall A B : Type, (A -> B -> Prop) -> list A -> list B -> Prop\nInductive list (A : Type) : Type := nil : list A | cons : A -> list A -> list A For cons: Arguments are renamed to A, a, l For nil: Argument A is implicit and maximally inserted For cons: Argument A is implicit and maximally inserted For list: Argument scope is [type_scope] For nil: Argument scope is [type_scope] For cons: Argument scopes are [type_scope _ list_scope]\nForall2_app_inv_l : forall (A B : Type) (R : A -> B -> Prop) (l1 l2 : list A) (l' : list B), Forall2 R (l1 ++ l2) l' -> exists l1' l2' : list B, Forall2 R l1 l1' /\\ Forall2 R l2 l2' /\\ l' = l1' ++ l2'\nExists_Forall_neg : forall (A : Type) (P : A -> Prop) (l : list A), (forall x : A, P x \\/ ~ P x) -> Exists (fun x : A => ~ P x) l < -> ~ Forall P l\nneg_Forall_Exists_neg : forall (A : Type) (P : A -> Prop) (l : list A), (forall x : A, {P x} + {~ P x}) -> ~ Forall P l -> Exists (fun x : A => ~ P x) l\nForall_inv_tail : forall (A : Type) (P : A -> Prop) (x0 : A) (xs : list A), Forall P (x0 :: xs) -> Forall P xs\nSetoidList.InA_split : forall (A : Type) (eqA : A -> A -> Prop) (l : list A) (x : A), SetoidList.InA eqA x l -> exists (l1 : list A) (y : A) (l2 : list A), eqA x y /\\ l = l1 ++ y :: l2\nForall2_sind : forall (A B : Type) (R : A -> B -> Prop) (P : list A -> list B -> SProp), P nil nil -> (forall (x : A) (y : B) (l : list A) (l' : list B), R x y -> Forall2 R l l' -> P l l' -> P (x :: l) (y :: l')) -> forall (l : list A) (l0 : list B), Forall2 R l l0 -> P l l0\nForall2_ind : forall (A B : Type) (R : A -> B -> Prop) (P : list A -> list B -> Prop), P nil nil -> (forall (x : A) (y : B) (l : list A) (l' : list B), R x y -> Forall2 R l l' -> P l l' -> P (x :: l) (y :: l')) -> forall (l : list A) (l0 : list B), Forall2 R l l0 -> P l l0\nRelation_Operators.Ltl_sind : forall (A : Set) (leA : A -> A -> Prop) (P : list A -> list A -> SProp), (forall (a : A) (x : list A), P nil (a :: x)) -> (forall a b : A, leA a b -> forall x y : list A, P (a :: x) (b :: y)) -> (forall (a : A) (x y : list A), Relation_Operators.Ltl A leA x y -> P x y -> P (a :: x) (a :: y)) -> forall l l0 : list A, Relation_Operators.Ltl A leA l l0 -> P l l0\nForall_Exists_dec : forall (A : Type) (P : A -> Prop), (forall x : A, {P x} + {~ P x}) -> forall l : list A, {Forall P l} + {Exists (fun x : A => ~ P x) l}\nForall2_app_inv_r : forall (A B : Type) (R : A -> B -> Prop) (l1' l2' : list B) (l : list A), Forall2 R l (l1' ++ l2') -> exists l1 l2 : list A, Forall2 R l1 l1' /\\ Forall2 R l2 l2' /\\ l = l1 ++ l2\nForall_Exists_neg : forall (A : Type) (P : A -> Prop) (l : list A), Forall (fun x : A => ~ P x) l < -> ~ Exists P l\nForall2_cons : forall (A B : Type) (R : A -> B -> Prop) (x : A) (y : B) (l : list A) (l' : list B), R x y -> Forall2 R l l' -> Forall2 R (x :: l) (y :: l')\nRelation_Operators.Desc_ind : forall (A : Set) (leA : A -> A -> Prop) (P : list A -> Prop), P nil -> (forall x : A, P (x :: nil)) -> (forall (x y : A) (l : list A), Relation_Operators.clos_refl A leA x y -> Relation_Operators.Desc A leA (l ++ y :: nil) -> P (l ++ y :: nil) -> P ((l ++ y :: nil) ++ x :: nil)) -> forall l : list A, Relation_Operators.Desc A leA l -> P l\nRelation_Operators.Desc_sind : forall (A : Set) (leA : A -> A -> Prop) (P : list A -> SProp), P nil -> (forall x : A, P (x :: nil)) -> (forall (x y : A) (l : list A), Relation_Operators.clos_refl A leA x y -> Relation_Operators.Desc A leA (l ++ y :: nil) -> P (l ++ y :: nil) -> P ((l ++ y :: nil) ++ x :: nil)) -> forall l : list A, Relation_Operators.Desc A leA l -> P l\nForall_forall : forall (A : Type) (P : A -> Prop) (l : list A), Forall P l < -> (forall x : A, In x l -> P x)\nUnion_ind : forall (U : Type) (B C : Ensemble U) (P : U -> Prop), (forall x : U, Ensembles.In U B x -> P x) -> (forall x : U, Ensembles.In U C x -> P x) -> forall u : U, Union U B C u -> P u\nUnion_sind : forall (U : Type) (B C : Ensemble U) (P : U -> SProp), (forall x : U, Ensembles.In U B x -> P x) -> (forall x : U, Ensembles.In U C x -> P x) -> forall u : U, Union U B C u -> P u\nRecord almost_ring_theory (R : Type) (rO rI : R) (radd rmul rsub : R -> R -> R) (ropp : R -> R) (req : R -> R -> Prop) : Prop := mk_art { ARadd_0_l : forall x : R, req (radd rO x) x; ARadd_comm : forall x y : R, req (radd x y) (radd y x); ARadd_assoc : forall x y z : R, req (radd x (radd y z)) (radd (radd x y) z); ARmul_1_l : forall x : R, req (rmul rI x) x; ARmul_0_l : forall x : R, req (rmul rO x) rO; ARmul_comm : forall x y : R, req (rmul x y) (rmul y x); ARmul_assoc : forall x y z : R, req (rmul x...\nExists_exists : forall (A : Type) (P : A -> Prop) (l : list A), Exists P l < -> (exists x : A, In x l /\\ P x)\nForall_ind : forall (A : Type) (P : A -> Prop) (P0 : list A -> Prop), P0 nil -> (forall (x : A) (l : list A), P x -> Forall P l -> P0 l -> P0 (x :: l)) -> forall l : list A, Forall P l -> P0 l\nForall_sind : forall (A : Type) (P : A -> Prop) (P0 : list A -> SProp), P0 nil -> (forall (x : A) (l : list A), P x -> Forall P l -> P0 l -> P0 (x :: l)) -> forall l : list A, Forall P l -> P0 l\nsumbool_rec : forall (A B : Prop) (P : {A} + {B} -> Set), (forall a : A, P (left a)) -> (forall b : B, P (right b)) -> forall s : {A} + {B}, P s\nInductive Ltl (A : Set) (leA : A -> A -> Prop) : list A -> list A -> Prop := Lt_nil : forall (a : A) (x : list A), Relation_Operators.Ltl A leA nil (a :: x) | Lt_hd : forall a b : A, leA a b ->...-> Relation_Operators.Ltl A leA (a :: x) (a :: y) For Ltl: Argument scopes are [type_scope function_scope list_scope list_scope] For Lt_nil: Argument scopes are [type_scope function_scope _ list_scope] For Lt_hd: Argument scopes are [type_scope function_scope _ _ _ list_scope list_scope] For Lt_tl: Argument scopes are [type_scope function_scope _ list_scope list_scope _]\nRing_theory.ARadd_comm : forall (R : Type) (rO rI : R) (radd rmul rsub : R -> R -> R) (ropp : R -> R) (req : R -> R -> Prop), Ring_theory.almost_ring_theory rO rI radd rmul rsub ropp req -> forall x y : R, req (radd x y) (radd y x)\nIntersection_ind : forall (U : Type) (B C : Ensemble U) (P : U -> Prop), (forall x : U, Ensembles.In U B x -> Ensembles.In U C x -> P x) -> forall u : U, Intersection U B C u -> P u\nIntersection_sind : forall (U : Type) (B C : Ensemble U) (P : U -> SProp), (forall x : U, Ensembles.In U B x -> Ensembles.In U C x -> P x) -> forall u : U, Intersection U B C u -> P u\nInhabited_ind : forall (U : Type) (B : Ensemble U) (P : Prop), (forall x : U, Ensembles.In U B x -> P) -> Inhabited U B -> P\nInhabited_sind : forall (U : Type) (B : Ensemble U) (P : SProp), (forall x : U, Ensembles.In U B x -> P) -> Inhabited U B -> P\nsnd = fun (A B : Type) (p : A * B) => let (_, y) := p in y : forall A B : Type, A * B -> B Arguments A, B are implicit and maximally inserted Argument scopes are [type_scope type_scope _]\nForall_dec : forall (A : Type) (P : A -> Prop), (forall x : A, {P x} + {~ P x}) -> forall l : list A, {Forall P l} + {~ Forall P l}"}, {"role": "assistant", "content": "```coq\n```"}], "original": "", "succ": false}]