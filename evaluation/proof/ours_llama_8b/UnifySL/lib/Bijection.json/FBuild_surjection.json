[{"history": {"proof": "shelve.", "repairs": [""], "exceptions": []}, "chat": [{"role": "user", "content": "I will give you a Coq proof state, including both hypotheses and a specific goal and your need to prove it. Your response should be a singular code block of Coq proof starting with \"```coq\n\", ending with \"Qed.```\", without any additional explanation or commentary. Follow to these guidelines:\nIntroduce variables using unique names to avoid any conflicts.\nKeep each command distinct and separated, avoid concatenations like ';' or '[cmd|cmd]'.\nOrganize your proof with bullets like '-', '+', and '*' instead of braces ({, }). Shift to their double symbols like '--' and '++', when necessary.\nEffectively use given premises, follow the syntax and structure demonstrated in the examples provided.\n\nExample 1:\n\nHypotheses:\nn, m: nat\nIHn: m + n = n + m\n\nGoal:\nm + S n = S n + m\n\nYour Response:\n```coq\nsimpl. rewrite <- IHn. auto.\nQed.```\n\nExample 2:\nHypotheses:\n\nGoal:\nforall n m : nat, m + n = n + m\n\nYour Response:\n```coq\nintros n m. induction n.\n- simpl. auto.\n- simpl. rewrite <- IHn. auto.\nQed.```\n\nSolve This Proof State:\n\nHypotheses:\nA: Type\nB: Type\nf: A -> B\nH: function_surjective f\n\nGoal:\nsurjection A B\n\nPremises:\nRecord surjection (A B : Type) : Type := Build_surjection { sur_R : A -> B -> Prop; im_surj : image_defined sur_R; pf_surj : partial_functional sur_R; su_surj : surjective sur_R } For surjection: Argument scopes are [type_scope type_scope] For Build_surjection: Argument scopes are [type_scope type_scope function_scope _ _ _]\nfunction_surjective = fun (A B : Type) (f : A -> B) => forall b : B, exists a : A, f a = b : forall A B : Type, (A -> B) -> Prop Arguments A, B are implicit and maximally inserted Argument scopes are [type_scope type_scope function_scope]\nsur_R : forall A B : Type, surjection A B -> A -> B -> Prop\nBuild_surjection : forall (A B : Type) (sur_R : A -> B -> Prop), image_defined sur_R -> partial_functional sur_R -> surjective sur_R -> surjection A B\nsig_eta : forall p : {a : ?A | ?P a}, p = exist (fun a : ?A => ?P a) (proj1_sig p) (proj2_sig p) where ?A : [A : Type B : Type f : A -> B H : function_surjective f |- Type] ?P : [A : Type B : Type f : A -> B H : function_surjective f |- ?A -> Prop]\npf_surj : forall (A B : Type) (s : surjection A B), partial_functional s\nim_surj : forall (A B : Type) (s : surjection A B), image_defined s\nsu_surj : forall (A B : Type) (s : surjection A B), surjective s\nDecidable.dec_imp : forall A B : Prop, Decidable.decidable A -> Decidable.decidable B -> Decidable.decidable (A -> B)\nVectorDef.In_cons_tl : forall (a : ?A) (m : nat) (x : ?A) (v : VectorDef.t ?A m), VectorDef.In a v -> VectorDef.In a (VectorDef.cons ?A x m v) where ?A : [A : Type B : Type f : A -> B H : function_surjective f |- Type]\nDecidable.not_and_iff : forall A B : Prop, (A /\\ B -> False) < -> (A -> B -> False)\nsurjective = fun (A B : Type) (R : A -> B -> Prop) => forall b : B, exists a : A, R a b : forall A B : Type, (A -> B -> Prop) -> Prop Arguments A, B are implicit and maximally inserted Argument scopes are [type_scope type_scope function_scope]\nimage_defined = fun (A B : Type) (R : A -> B -> Prop) => forall a : A, exists b : B, R a b : forall A B : Type, (A -> B -> Prop) -> Prop Arguments A, B are implicit and maximally inserted Argument scopes are [type_scope type_scope function_scope]\npartial_functional = fun (A B : Type) (R : A -> B -> Prop) => forall (a : A) (b1 b2 : B), R a b1 -> R a b2 -> b1 = b2 : forall A B : Type, (A -> B -> Prop) -> Prop Arguments A, B are implicit and maximally inserted Argument scopes are [type_scope type_scope function_scope]\nInductive prod (A B : Type) : Type := pair : A -> B -> A * B For pair: Arguments A, B are implicit and maximally inserted For prod: Argument scopes are [type_scope type_scope] For pair: Argument scopes are [type_scope type_scope _ _]\nssrfun.eqfun : forall A B : Type, (B -> A) -> (B -> A) -> Prop\napp : forall A : Type, list A -> list A -> list A\nList.In : forall A : Type, A -> list A -> Prop\nVectorDef.cons : forall A : Type, A -> forall n : nat, VectorDef.t A n -> VectorDef.t A (S n)\nNat.strong_right_induction' : forall A : nat -> Prop, Morphisms.Proper (Morphisms.respectful eq iff) A -> forall z : nat, (forall n : nat, n <= z -> A n) -> (forall n : nat, z <= n -> (forall m : nat, z <= m -> m < n -> A m) -> A n) -> forall n : nat, A n\nrelation = fun A : Type => A -> A -> Prop : Type -> Type Argument scope is [type_scope]\nNat.strong_right_induction : forall A : nat -> Prop, Morphisms.Proper (Morphisms.respectful eq iff) A -> forall z : nat, (forall n : nat, z <= n -> (forall m : nat, z <= m -> m < n -> A m) -> A n) -> forall n : nat, z <= n -> A n\nproj1_sig : forall (A : Type) (P : A -> Prop), {x : A | P x} -> A\nantisymmetric : forall A : Type, relation A -> Prop\ntransitive : forall A : Type, relation A -> Prop\nreflexive : forall A : Type, relation A -> Prop\nInductive t (A : Type) : nat -> Type := nil : VectorDef.t A 0 | cons : A -> forall n : nat, VectorDef.t A n -> VectorDef.t A (S n) For t: Argument scopes are [type_scope nat_scope] For nil: Argument scope is [type_scope] For cons: Argument scopes are [type_scope _ nat_scope _]\nInductive list (A : Type) : Type := nil : list A | cons : A -> list A -> list A For cons: Arguments are renamed to A, a, l For nil: Argument A is implicit and maximally inserted For cons: Argument A is implicit and maximally inserted For list: Argument scope is [type_scope] For nil: Argument scope is [type_scope] For cons: Argument scopes are [type_scope _ list_scope]\nexist : forall (A : Type) (P : A -> Prop) (x : A), P x -> {x : A | P x}\nord_antisym : forall (A : Type) (R : relation A), order A R -> antisymmetric A R\nList.ForallOrdPairs_ind : forall (A : Type) (R : A -> A -> Prop) (P : list A -> Prop), P nil -> (forall (a : A) (l : list A), List.Forall (R a) l -> List.ForallOrdPairs R l -> P l -> P (a :: l)%list) -> forall l : list A, List.ForallOrdPairs R l -> P l\nInductive sig (A : Type) (P : A -> Prop) : Type := exist : forall x : A, P x -> {x : A | P x} For sig: Argument A is implicit For exist: Argument A is implicit For sig: Argument scopes are [type_scope type_scope] For exist: Argument scopes are [type_scope function_scope _ _]"}, {"role": "assistant", "content": "```coq\n```"}], "original": "", "succ": false}]