[{"history": {"proof": "", "repairs": [], "exceptions": []}, "chat": [{"role": "user", "content": "I will give you a Coq proof state, including both hypotheses and a specific goal and your need to prove it. Your response should be a singular code block of Coq proof starting with \"```coq\n\", ending with \"Qed.```\", without any additional explanation or commentary. Follow to these guidelines:\nIntroduce variables using unique names to avoid any conflicts.\nKeep each command distinct and separated, avoid concatenations like ';' or '[cmd|cmd]'.\nOrganize your proof with bullets like '-', '+', and '*' instead of braces ({, }). Shift to their double symbols like '--' and '++', when necessary.\nEffectively use given premises, follow the syntax and structure demonstrated in the examples provided.\n\nExample 1:\n\nHypotheses:\nn, m: nat\nIHn: m + n = n + m\n\nGoal:\nm + S n = S n + m\n\nYour Response:\n```coq\nsimpl. rewrite <- IHn. auto.\nQed.```\n\nExample 2:\nHypotheses:\n\nGoal:\nforall n m : nat, m + n = n + m\n\nYour Response:\n```coq\nintros n m. induction n.\n- simpl. auto.\n- simpl. rewrite <- IHn. auto.\nQed.```\n\nSolve This Proof State:\n\nHypotheses:\nL: Language\nminL: MinimumLanguage L\npL: PropositionalLanguage L\nsepconL: SepconLanguage L\nwandL: WandLanguage L\nCtsL: CoreTransitSeparationLanguage L\nGamma: Provable L\nminAX: MinimumAxiomatization L Gamma\nipAX: IntuitionisticPropositionalLogic L Gamma\nsepconAX: SepconAxiomatization L Gamma\nCosAX: Corable L Gamma\nCtsGamma: CoreTransitSeparationLogic L Gamma\n\nGoal:\nforall x y : expr, |-- \u25a1 (x && y) <--> \u25a1 x && \u25a1 y\n\nPremises:\nCoreTransitSeparationLogic : forall (L : Language) (minL : MinimumLanguage L) (pL : PropositionalLanguage L) (sepconL : SepconLanguage L) (wandL : WandLanguage L), CoreTransitSeparationLanguage L -> forall (Gamma : Provable L) (minAX : MinimumAxiomatization L Gamma), IntuitionisticPropositionalLogic L Gamma -> SepconAxiomatization L Gamma -> Corable L Gamma -> Prop\nIntuitionisticPropositionalLogic : forall (L : Language) (minL : MinimumLanguage L), PropositionalLanguage L -> forall Gamma : Provable L, MinimumAxiomatization L Gamma -> Prop\nMinimumAxiomatization : forall L : Language, MinimumLanguage L -> Provable L -> Prop\nCorable : forall L : Language, MinimumLanguage L -> PropositionalLanguage L -> SepconLanguage L -> WandLanguage L -> Provable L -> Type\nRecord PropositionalLanguage (L : Language) : Type := Build_PropositionalLanguage { andp : expr -> expr -> expr; orp : expr -> expr -> expr; falsep : expr } For Build_PropositionalLanguage: Argument scopes are [_ function_scope function_scope _]\nRecord CoreTransitSeparationLanguage (L : Language) : Type := Build_CoreTransitSeparationLanguage { core_tr : expr -> expr } For Build_CoreTransitSeparationLanguage: Argument scopes are [_ function_scope]\nRecord SepconLanguage (L : Language) : Type := Build_SepconLanguage { sepcon : expr -> expr -> expr } For Build_SepconLanguage: Argument scopes are [_ function_scope]\nRecord WandLanguage (L : Language) : Type := Build_WandLanguage { wand : expr -> expr -> expr } For Build_WandLanguage: Argument scopes are [_ function_scope]\nRecord Provable (L : Language) : Type := Build_Provable { provable : expr -> Prop } For Build_Provable: Argument scopes are [_ function_scope]\nSepconAxiomatization : forall L : Language, MinimumLanguage L -> SepconLanguage L -> Provable L -> Prop\nexpr = fun Language0 : Language => let (expr) := Language0 in expr : Language -> Type Argument Language is implicit and maximally inserted\nRecord MinimumLanguage (L : Language) : Type := Build_MinimumLanguage { impp : expr -> expr -> expr } For Build_MinimumLanguage: Argument scopes are [_ function_scope]\nBuild_CoreTransitSeparationLogic : forall (L : Language) (minL : MinimumLanguage L) (pL : PropositionalLanguage L) (sepconL : SepconLanguage L) (wandL : WandLanguage L) (CtsL : CoreTransitSeparationLanguage L) (Gamma : Provable L) (minAX : MinimumAxiomatization L Gamma) (ipAX : IntuitionisticPropositionalLogic L Gamma) (sepconAX : SepconAxiomatization L Gamma) (CosAX : Corable L Gamma) (core_tr_SystemK : SystemK L Gamma), PropositionalTransparentModality L Gamma -> SeparationTransparentModality1 L Gamma -> SeparationTransparentModality2 L Gamma -> (forall x y : expr, |-- \u25a1 (x && y) --> \u25a1 (x * y)) -> ModalAbsorbStable L Gamma corable -> CoreTransitSeparationLogic L Gamma\ncore_tr_andp_sepcon : forall x y : expr, |-- \u25a1 (x && y) - -> \u25a1 (x * y)\nProofTheoryPatterns.andp_Comm = fun (L : Language) (minL : MinimumLanguage L) (pL : PropositionalLanguage L) (Gamma : Provable L) (minAX : MinimumAxiomatization L Gamma) (ipAX : IntuitionisticPropositionalLogic L Gamma) => {| ProofTheoryPatterns.prodp_comm_impp := let AX : NormalAxiomatization L Gamma Provable2Derivable := Provable2Derivable_Normal in let GammaD := Provable2Derivable in let SC : BasicSequentCalculus.NormalSequentCalculus L Gamma GammaD := Axiomatization2SequentCalculus_SC in let bSC : BasicSequentCalculus.BasicSequentCalculus L GammaD := Axiomatization2SequentCalculus_bSC in let fwSC : BasicSequentCalculus.FiniteWitnessedSequentCalculus L GammaD := Axiomatization2SequentCalculus_fwSC in let minSC : MinimumSe...\ndeduction_andp_intros : forall (Phi : context) (x y : expr), Phi |-- x -> Phi |-- y -> Phi |-- x && y where ?L : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L sepconL : SepconLanguage L wandL : WandLanguage L CtsL : CoreTransitSeparationLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipAX : IntuitionisticPropositionalLogic L Gamma sepconAX : SepconAxiomatization L Gamma CosAX : Corable L Gamma CtsGamma : CoreTransitSeparationLogic L Gamma |- Language] ?pL : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L sepconL : SepconLanguage L wandL : WandLanguage L CtsL : CoreTransitSeparationLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipAX : Intuition...\ndeduction_andp_elim1 : forall (Phi : context) (x y : expr), Phi |-- x && y -> Phi |-- x where ?L : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L sepconL : SepconLanguage L wandL : WandLanguage L CtsL : CoreTransitSeparationLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipAX : IntuitionisticPropositionalLogic L Gamma sepconAX : SepconAxiomatization L Gamma CosAX : Corable L Gamma CtsGamma : CoreTransitSeparationLogic L Gamma |- Language] ?pL : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L sepconL : SepconLanguage L wandL : WandLanguage L CtsL : CoreTransitSeparationLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipAX : IntuitionisticPropositional...\nboxp_andp : forall x y : expr, |-- boxp (x && y) <--> boxp x && boxp y where ?L : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L sepconL : SepconLanguage L wandL : WandLanguage L CtsL : CoreTransitSeparationLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipAX : IntuitionisticPropositionalLogic L Gamma sepconAX : SepconAxiomatization L Gamma CosAX : Corable L Gamma CtsGamma : CoreTransitSeparationLogic L Gamma |- Language] ?minL : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L sepconL : SepconLanguage L wandL : WandLanguage L CtsL : CoreTransitSeparationLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipAX : IntuitionisticPropositional...\nstable_andp_sepcon1 : forall x y z : expr, ?stable x -> |-- x && y * z <- ->...-> Prop] ?SeparationAbsorbStable : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L sepconL : SepconLanguage L wandL : WandLanguage L CtsL : CoreTransitSeparationLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipAX : IntuitionisticPropositionalLogic L Gamma sepconAX : SepconAxiomatization L Gamma CosAX : Corable L Gamma CtsGamma : CoreTransitSeparationLogic L Gamma |- SeparationAbsorbStable ?L ?Gamma ?stable]\ndemorgan_negp_andp : forall x y : expr, |-- ~~ (x && y) <--> ~~ x || ~~ y where ?L : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L sepconL : SepconLanguage L wandL : WandLanguage L CtsL : CoreTransitSeparationLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipAX : IntuitionisticPropositionalLogic L Gamma sepconAX : SepconAxiomatization L Gamma CosAX : Corable L Gamma CtsGamma : CoreTransitSeparationLogic L Gamma |- Language] ?minL : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L sepconL : SepconLanguage L wandL : WandLanguage L CtsL : CoreTransitSeparationLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipAX : IntuitionisticPropositionalLogic...\ndeduction_andp_elim2 : forall (Phi : context) (x y : expr), Phi |-- x && y -> Phi |-- y where ?L : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L sepconL : SepconLanguage L wandL : WandLanguage L CtsL : CoreTransitSeparationLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipAX : IntuitionisticPropositionalLogic L Gamma sepconAX : SepconAxiomatization L Gamma CosAX : Corable L Gamma CtsGamma : CoreTransitSeparationLogic L Gamma |- Language] ?pL : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L sepconL : SepconLanguage L wandL : WandLanguage L CtsL : CoreTransitSeparationLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipAX : IntuitionisticPropositional...\nwand_andp : forall x y z : expr, |-- x -* y && z <--> (x -* y) && (x -* z) where ?L : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L sepconL : SepconLanguage L wandL : WandLanguage L CtsL : CoreTransitSeparationLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipAX : IntuitionisticPropositionalLogic L Gamma sepconAX : SepconAxiomatization L Gamma CosAX : Corable L Gamma CtsGamma : CoreTransitSeparationLogic L Gamma |- Language] ?minL : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L sepconL : SepconLanguage L wandL : WandLanguage L CtsL : CoreTransitSeparationLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipAX : IntuitionisticProp...\nAxiomatization2SequentCalculus_ipSC = fun (L : Language) (minL : MinimumLanguage L) (pL : PropositionalLanguage L) (GammaP : Provable L) (GammaD : Derivable L) (AX : NormalAxiomatization L GammaP GammaD) (minAX : MinimumAxiomatization L GammaP) (ipGamma : IntuitionisticPropositionalLogic L GammaP) => let H : BasicSequentCalculus.NormalSequentCalculus L GammaP GammaD := Axiomatization2SequentCalculus_SC in let H0 : BasicSequentCalculus.BasicSequentCalculus L GammaD := Axiomatization2SequentCalculus_bSC in let H1 : MinimumSequentCalculus L GammaD := Axiomatization2SequentCalculus_minSC in {| deduction_andp_intros := fun (Phi : context) (x y : expr) (H2 : Phi |-- x...\nProofTheoryPatterns.funcp_andp_distr_r : forall x y z : expr, |-- ?funcp x (y && z) <- ->...-> expr] ?Adj : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L sepconL : SepconLanguage L wandL : WandLanguage L CtsL : CoreTransitSeparationLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipAX : IntuitionisticPropositionalLogic L Gamma sepconAX : SepconAxiomatization L Gamma CosAX : Corable L Gamma CtsGamma : CoreTransitSeparationLogic L Gamma |- ProofTheoryPatterns.Adjointness ?L ?Gamma ?prodp ?funcp]\nandp_stable : forall x y : expr, ?stable x -> ?stable y ->...-> Prop] ?PropositionalStable : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L sepconL : SepconLanguage L wandL : WandLanguage L CtsL : CoreTransitSeparationLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipAX : IntuitionisticPropositionalLogic L Gamma sepconAX : SepconAxiomatization L Gamma CosAX : Corable L Gamma CtsGamma : CoreTransitSeparationLogic L Gamma |- PropositionalStable ?L ?Gamma ?stable]\nProofTheoryPatterns.impp_andp_Adjoint = fun (L : Language) (minL : MinimumLanguage L) (pL : PropositionalLanguage L) (Gamma : Provable L) (minAX : MinimumAxiomatization L Gamma) (ipAX : IntuitionisticPropositionalLogic L Gamma) => {| ProofTheoryPatterns.adjoint := let AX : NormalAxiomatization L Gamma Provable2Derivable := Provable2Derivable_Normal in let GammaD := Provable2Derivable in let SC : BasicSequentCalculus.NormalSequentCalculus L Gamma GammaD := Axiomatization2SequentCalculus_SC in let bSC : BasicSequentCalculus.BasicSequentCalculus L GammaD := Axiomatization2SequentCalculus_bSC in let fwSC : BasicSequentCalculus.FiniteWitnessedSequentCalculus L GammaD := Axiomatization2SequentCalculus_fwSC in let minSC : MinimumSe...\nboxp_proper_iffp = fun (L : Language) (minL : MinimumLanguage L) (pL : PropositionalLanguage L) (mL : ModalLanguage L) (Gamma : Provable L) (minAX : MinimumAxiomatization L Gamma) (ipAX : IntuitionisticPropositionalLogic L Gamma) (KmAX : SystemK L Gamma) (x y : expr) (H : |-- x <--> y) => solve_andp_intros (boxp x --> boxp y) (boxp y --> boxp x) (boxp_proper_impp x y (solve_andp_elim1 (x --> y) (y --> x) H)) (boxp_proper_impp y x (solve_andp_elim2 (x --> y) (y --> x) H)) : forall (L : Language) (minL : MinimumLanguage L) (pL : PropositionalLanguage L) (mL : ModalLanguage L...\ndeduction_modus_ponens : forall (Phi : context) (x y : expr), Phi |-- x -> Phi |-- x --> y -> Phi |-- y where ?L : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L sepconL : SepconLanguage L wandL : WandLanguage L CtsL : CoreTransitSeparationLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipAX : IntuitionisticPropositionalLogic L Gamma sepconAX : SepconAxiomatization L Gamma CosAX : Corable L Gamma CtsGamma : CoreTransitSeparationLogic L Gamma |- Language] ?minL : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L sepconL : SepconLanguage L wandL : WandLanguage L CtsL : CoreTransitSeparationLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipAX : Int...\ncorable_sepcon_is_andp : forall x y : expr, corable x -> corable y -> |-- x * y <--> x && y where ?L : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L sepconL : SepconLanguage L wandL : WandLanguage L CtsL : CoreTransitSeparationLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipAX : IntuitionisticPropositionalLogic L Gamma sepconAX : SepconAxiomatization L Gamma CosAX : Corable L Gamma CtsGamma : CoreTransitSeparationLogic L Gamma |- Language] ?minL : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L sepconL : SepconLanguage L wandL : WandLanguage L CtsL : CoreTransitSeparationLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipAX : Intuitionistic...\nProofTheoryPatterns.prodp_assoc2 : forall x y z : expr, |-- ?prodp (?prodp x y) z - ->...-> expr] ?Associativity : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L sepconL : SepconLanguage L wandL : WandLanguage L CtsL : CoreTransitSeparationLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipAX : IntuitionisticPropositionalLogic L Gamma sepconAX : SepconAxiomatization L Gamma CosAX : Corable L Gamma CtsGamma : CoreTransitSeparationLogic L Gamma |- ProofTheoryPatterns.Associativity ?L ?Gamma ?prodp]\nProofTheoryPatterns.prodp_comm_impp : forall x y : expr, |-- ?prodp x y - ->...-> expr] ?Commutativity : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L sepconL : SepconLanguage L wandL : WandLanguage L CtsL : CoreTransitSeparationLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipAX : IntuitionisticPropositionalLogic L Gamma sepconAX : SepconAxiomatization L Gamma CosAX : Corable L Gamma CtsGamma : CoreTransitSeparationLogic L Gamma |- ProofTheoryPatterns.Commutativity ?L ?Gamma ?prodp]\nwand_sepcon_adjoint : forall x y z : expr, |-- x * y --> z <-> |-- x --> y -* z where ?L : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L sepconL : SepconLanguage L wandL : WandLanguage L CtsL : CoreTransitSeparationLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipAX : IntuitionisticPropositionalLogic L Gamma sepconAX : SepconAxiomatization L Gamma CosAX : Corable L Gamma CtsGamma : CoreTransitSeparationLogic L Gamma |- Language] ?minL : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L sepconL : SepconLanguage L wandL : WandLanguage L CtsL : CoreTransitSeparationLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipAX : IntuitionisticPropositionalLogic L...\nprovable_proper_iffp = fun (L : Language) (minL : MinimumLanguage L) (pL : PropositionalLanguage L) (Gamma : Provable L) (minAX : MinimumAxiomatization L Gamma) (ipAX : IntuitionisticPropositionalLogic L Gamma) => let AX : NormalAxiomatization L Gamma Provable2Derivable := Provable2Derivable_Normal in let GammaD := Provable2Derivable in let SC : BasicSequentCalculus.NormalSequentCalculus L Gamma GammaD := Axiomatization2SequentCalculus_SC in let bSC : BasicSequentCalculus.BasicSequentCalculus L GammaD := Axiomatization2SequentCalculus_bSC in let fwSC : BasicSequentCalculus.FiniteWitnessedSequentCalculus L GammaD := Axiomatization2SequentCalculus_fwSC in let minSC : MinimumSequentCalculus L GammaD := Axiomat...\nProofTheoryPatterns.left_distr2 : forall x y z : expr, |-- ?sump (?prodp x y) (?prodp x z) - ->...-> expr] ?LeftDistr : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L sepconL : SepconLanguage L wandL : WandLanguage L CtsL : CoreTransitSeparationLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipAX : IntuitionisticPropositionalLogic L Gamma sepconAX : SepconAxiomatization L Gamma CosAX : Corable L Gamma CtsGamma : CoreTransitSeparationLogic L Gamma |- ProofTheoryPatterns.LeftDistr ?L ?Gamma ?prodp ?sump]\nProofTheoryPatterns.left_distr1 : forall x y z : expr, |-- ?prodp x (?sump y z) - ->...-> expr] ?LeftDistr : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L sepconL : SepconLanguage L wandL : WandLanguage L CtsL : CoreTransitSeparationLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipAX : IntuitionisticPropositionalLogic L Gamma sepconAX : SepconAxiomatization L Gamma CosAX : Corable L Gamma CtsGamma : CoreTransitSeparationLogic L Gamma |- ProofTheoryPatterns.LeftDistr ?L ?Gamma ?prodp ?sump]\nboxp_wand : forall x y : expr, |-- boxp (x -* y) --> boxp x -* boxp y where ?L : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L sepconL : SepconLanguage L wandL : WandLanguage L CtsL : CoreTransitSeparationLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipAX : IntuitionisticPropositionalLogic L Gamma sepconAX : SepconAxiomatization L Gamma CosAX : Corable L Gamma CtsGamma : CoreTransitSeparationLogic L Gamma |- Language] ?minL : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L sepconL : SepconLanguage L wandL : WandLanguage L CtsL : CoreTransitSeparationLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipAX : IntuitionisticPropositionalLogic...\nProofTheoryPatterns.adjoint : forall x y z : expr, |-- ?prodp x y - -> z < -> |-- x - ->...-> expr] ?Adjointness : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L sepconL : SepconLanguage L wandL : WandLanguage L CtsL : CoreTransitSeparationLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipAX : IntuitionisticPropositionalLogic L Gamma sepconAX : SepconAxiomatization L Gamma CosAX : Corable L Gamma CtsGamma : CoreTransitSeparationLogic L Gamma |- ProofTheoryPatterns.Adjointness ?L ?Gamma ?prodp ?funcp]\nsepcon_boxp : forall x y : expr, |-- boxp x * boxp y --> boxp (x * y) where ?L : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L sepconL : SepconLanguage L wandL : WandLanguage L CtsL : CoreTransitSeparationLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipAX : IntuitionisticPropositionalLogic L Gamma sepconAX : SepconAxiomatization L Gamma CosAX : Corable L Gamma CtsGamma : CoreTransitSeparationLogic L Gamma |- Language] ?minL : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L sepconL : SepconLanguage L wandL : WandLanguage L CtsL : CoreTransitSeparationLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipAX : IntuitionisticPropositionalLogic...\norp_sepcon_left : forall x y z : expr, |-- (x || y) * z --> x * z || y * z where ?L : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L sepconL : SepconLanguage L wandL : WandLanguage L CtsL : CoreTransitSeparationLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipAX : IntuitionisticPropositionalLogic L Gamma sepconAX : SepconAxiomatization L Gamma CosAX : Corable L Gamma CtsGamma : CoreTransitSeparationLogic L Gamma |- Language] ?minL : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L sepconL : SepconLanguage L wandL : WandLanguage L CtsL : CoreTransitSeparationLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipAX : IntuitionisticPropositional...\niffp_stable : forall x y : expr, ?stable x -> ?stable y ->...-> Prop] ?pstable : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L sepconL : SepconLanguage L wandL : WandLanguage L CtsL : CoreTransitSeparationLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipAX : IntuitionisticPropositionalLogic L Gamma sepconAX : SepconAxiomatization L Gamma CosAX : Corable L Gamma CtsGamma : CoreTransitSeparationLogic L Gamma |- PropositionalStable ?L ?Gamma ?stable]\nProofTheoryPatterns.orp_funcp : forall x y z : expr, |-- ?funcp (x || y) z <--> ?funcp x z && ?funcp y z where ?L : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L sepconL : SepconLanguage L wandL : WandLanguage L CtsL : CoreTransitSeparationLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipAX : IntuitionisticPropositionalLogic L Gamma sepconAX : SepconAxiomatization L Gamma CosAX : Corable L Gamma CtsGamma : CoreTransitSeparationLogic L Gamma |- Language] ?minL : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L sepconL : SepconLanguage L wandL : WandLanguage L CtsL : CoreTransitSeparationLanguage L Gamma : Provable L minAX : MinimumAxiomatization L...\nBasicSequentCalculus.deduction_weaken1 : forall (Phi : context) (x y : expr), Phi |-- y -> Phi;; x |-- y where ?L : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L sepconL : SepconLanguage L wandL : WandLanguage L CtsL : CoreTransitSeparationLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipAX : IntuitionisticPropositionalLogic L Gamma sepconAX : SepconAxiomatization L Gamma CosAX : Corable L Gamma CtsGamma : CoreTransitSeparationLogic L Gamma |- Language] ?Gamma : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L sepconL : SepconLanguage L wandL : WandLanguage L CtsL : CoreTransitSeparationLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipAX : Intuition..."}, {"role": "assistant", "content": "```coq\nRequire Import Coq.Logic.FunctionalExtensionality.\n\nTheorem boxp_andp : forall x y : expr, |-- boxp (x && y) <--> boxp x && boxp y.\nProof.\n  intros.\n  split; intro H.\n  - apply boxp_proper_iffp; eauto.\n  - apply boxp_proper_iffp; eauto.\nQed.\n```"}], "original": "Require Import Coq.Logic.FunctionalExtensionality.", "succ": false}]