[{"history": {"proof": "shelve.", "repairs": [""], "exceptions": []}, "chat": [{"role": "user", "content": "I will give you a Coq proof state, including both hypotheses and a specific goal and your need to prove it. Your response should be a singular code block of Coq proof starting with \"```coq\n\", ending with \"Qed.```\", without any additional explanation or commentary. Follow to these guidelines:\nIntroduce variables using unique names to avoid any conflicts.\nKeep each command distinct and separated, avoid concatenations like ';' or '[cmd|cmd]'.\nOrganize your proof with bullets like '-', '+', and '*' instead of braces ({, }). Shift to their double symbols like '--' and '++', when necessary.\nEffectively use given premises, follow the syntax and structure demonstrated in the examples provided.\n\nExample 1:\n\nHypotheses:\nn, m: nat\nIHn: m + n = n + m\n\nGoal:\nm + S n = S n + m\n\nProof:\n```coq\nsimpl. rewrite <- IHn. auto.\nQed.```\n\nExample 2:\nHypotheses:\n\nGoal:\nforall n m : nat, m + n = n + m\n\n```coq\nintros n m. induction n.\n- simpl. auto.\n- simpl. rewrite <- IHn. auto.\nQed.```\n\nSolve This Proof State:\n\nHypotheses:\nT: poset\ns: chain T\n\nGoal:\nproj1_chain diag_chain = s\n\nPremises:\ndiag_chain = [fun x : T => (x, x)^^sbydiag_mono] : chain (pairPoset T T)\nproj1_chain : forall T1 T2 : poset, chain [posetofT1 * T2] -> chain T1\nRecord chain (T : poset) : Type := Chain { pred_of : Pred T; _ : chain_axiom pred_of } Arguments Chain [T pred_of]\nallpairsP : reflect (exists p : ?S * ?T, [/\\ p.1 \\in ?s, p.2 \\in ?t & ?z = ?f p.1 p.2]) (?z \\in [seq ?f x y | x <- ?s, y <- ?t]) where ?S : [T : poset s : chain T |- eqType] ?T : [T : poset s : chain T |- eqType] ?R : [T : poset s : chain T |- eqType] ?f : [T : poset s : chain T |- ?S -> ?T -> ?R] ?s : [T : poset s : chain T |- seq ?S] ?t : [T : poset s : chain T |- seq ?T] ?z : [T : poset s : chain T |- Equality.sort ?R]\nallpairsPdep : reflect (exists (x : ?S) (y : ?T x), [/\\ x \\in ?s, y \\in ?t x & ?z = ?f x y]) (?z \\in [seq ?f x y | x <- ?s, y <- ?t x]) where ?S : [T : poset s : chain T |- eqType] ?T : [T : poset s : chain T |- ?S -> eqType] ?R : [T : poset s : chain T |- eqType] ?f : [T : poset s : chain T |- forall x : ?S, ?T x -> ?R] ?s : [T : poset s : chain T |- seq ?S] ?t : [T : poset s : chain T |- forall x : ?S, seq (?T x)] ?z : [T : poset s : chain T |- Equality.sort ?R]\npred_of : forall T : poset, chain T -> Pred T\napp_mono : forall x : ?A, monotone (@^~ x) where ?A : [T : poset s : chain T |- Type] ?T : [T : poset s : chain T |- poset]\ndapp_mono : forall x : ?A, monotone (@^~ x) where ?A : [T : poset s : chain T |- Type] ?T : [T : poset s : chain T |- ?A -> poset]\nChain : forall (T : poset) (pred_of : Pred T), chain_axiom pred_of -> chain T\nid_chainE : forall (T : poset) (s : chain T) (M : monotone id), [id^^sbyM] = s\nchainE : forall (T : poset) (s1 s2 : chain T), s1 = s2 < -> s1 =p s2\nconst_chainE : forall (T1 T2 : poset) (y : T2) (s : chain T1), [fun=> y^^sbyconst_mono] = const_chain y\nproj2_chain : forall T1 T2 : poset, chain [posetofT1 * T2] -> chain T2\nimage_chain : forall T1 T2 : poset, chain T1 -> forall f : T1 -> T2, monotone f -> chain T2\nconst_chain : forall T2 : poset, T2 -> chain T2\nimage_chainP : forall (T1 T2 : poset) (s : chain T1) (f : T1 -> T2), monotone f -> chain_axiom [Pred x2 | exists x1 : T1, x2 = f x1 /\\ x1 \\In s]\nrel = fun T : Type => T -> pred T : Type -> Type Arguments rel _%type_scope\ncomp_chainE : forall (T1 T2 T3 : poset) (f1 : T2 -> T1) (f2 : T3 -> T2) (s : chain T3) (M1 : monotone f1) (M2 : monotone f2), [f1^^[f2^^sbyM2]byM1] = [f1 \\o f2^^sbycomp_mono M1 M2]\nPred = fun T : Type => T -> Prop : Type -> Type Arguments Pred _%type_scope\nflatten = fun T : Type => foldr cat [::] : forall T : Type, seq (seq T) -> seq T Arguments flatten {T}%type_scope _%seq_scope\nin_mem = fun (T : Type) (x : T) => pred_of_mem^~ x : forall T : Type, T -> mem_pred T -> bool Arguments in_mem {T}%type_scope : simpl never\ncat = fun T : Type => fix cat (s1 s2 : seq T) {struct s1} : seq T := match s1 with | [::] => s2 | x :: s1' => x :: cat s1' s2 end : forall T : Type, seq T -> seq T -> seq T Arguments cat {T}%type_scope (_ _)%seq_scope\nsize = fun T : Type => fix size (s : seq T) : nat := match s with | [::] => 0 | _ :: s' => (size s').+1 end : forall T : Type, seq T -> nat Arguments size {T}%type_scope _%seq_scope\ntarski_gfp_fixed : forall (T : lattice) (f : T -> T), monotone f -> f (tarski_gfp f) = tarski_gfp f\ndiag_mono = fun (T : poset) (x y : T) (H : x <== y) => conj H H : forall T : poset, monotone (fun x : T => (x, x)) Arguments diag_mono {T}\ndrop = fun T : Type => fix drop (n : nat) (s : seq T) {struct s} : seq T := match s with | [::] => s | _ :: s' => match n with | 0 => s | n'.+1 => drop n' s' end end : forall T : Type, nat -> seq T -> seq T Arguments drop {T}%type_scope _%nat_scope _%seq_scope\ntake = fun T : Type => fix take (n : nat) (s : seq T) {struct s} : seq T := match s with | [::] => [::] | x :: s' => match n with | 0 => [::] | n'.+1 => x :: take n' s' end end : forall T : Type, nat -> seq T -> seq T Arguments take {T}%type_scope _%nat_scope _%seq_scope\nnth = fun (T : Type) (x0 : T) => fix nth (s : seq T) (n : nat) {struct n} : T := match s with | [::] => x0 | x :: s' => match n with | 0 => x | n'.+1 => nth s' n' end end : forall T : Type, T -> seq T -> nat -> T Arguments nth {T}%type_scope _ _%seq_scope _%nat_scope\nid_mono = fun (T : poset) (x y : T) => id : forall T : poset, monotone id Arguments id_mono {T}\nsub_asym : forall (T : poset) (s : Pred T) (x : {x : T | x \\In s}) (y : {x0 : T | x0 \\In s}), sub_leq x y -> sub_leq y x -> x = y\nPosetMixin : forall (T : Type) (mx_leq : T -> T -> Prop), (forall x : T, mx_leq x x) -> (forall x y : T, mx_leq x y -> mx_leq y x -> x = y) -> (forall x y z : T, mx_leq x y -> mx_leq y z -> mx_leq x z) -> Poset.mixin_of T\nLattice.mx_sup : forall T : poset, Lattice.mixin_of T -> Pred T -> T\nPoset.mx_leq : forall T : Type, Poset.mixin_of T -> T -> T -> Prop"}, {"role": "assistant", "content": "```coq\n```"}], "original": "", "succ": false}]