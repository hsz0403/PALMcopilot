[{"history": {"proof": "shelve.", "repairs": [""], "exceptions": []}, "chat": [{"role": "user", "content": "I will give you a Coq proof state, including both hypotheses and a specific goal and your need to prove it. Your response should be a singular code block of Coq proof starting with \"```coq\n\", ending with \"Qed.```\", without any additional explanation or commentary. Follow to these guidelines:\nIntroduce variables using unique names to avoid any conflicts.\nKeep each command distinct and separated, avoid concatenations like ';' or '[cmd|cmd]'.\nOrganize your proof with bullets like '-', '+', and '*' instead of braces ({, }). Shift to their double symbols like '--' and '++', when necessary.\nEffectively use given premises, follow the syntax and structure demonstrated in the examples provided.\n\nExample 1:\n\nHypotheses:\nn, m: nat\nIHn: m + n = n + m\n\nGoal:\nm + S n = S n + m\n\nProof:\n```coq\nsimpl. rewrite <- IHn. auto.\nQed.```\n\nExample 2:\nHypotheses:\n\nGoal:\nforall n m : nat, m + n = n + m\n\n```coq\nintros n m. induction n.\n- simpl. auto.\n- simpl. rewrite <- IHn. auto.\nQed.```\n\nSolve This Proof State:\n\nHypotheses:\nT: lattice\nP: Lattice.sort T\ns: Pred (ideal P)\np: Poset.sort (idealPoset P)\n\nGoal:\n(forall q : ideal P, q \\In s -> q <== p) -> ideal_sup s <== p\n\nPremises:\nNotation Lattice T m := (Lattice.pack id)\nideal_sup = fun s : Pred (ideal P) => {| id_val := ideal_sup' s; id_pf := ideal_supP' s |} : Pred (ideal P) -> ideal P\nidealPoset : forall T : poset, T -> poset\nNotation Poset T m := (Poset.pack id)\nideal : forall T : poset, T -> Type\nList.In : forall A : Type, A -> seq A -> Prop\nEquality.sort = fun t : eqType => let (sort, _) := t in sort : eqType -> Type Equality.sort is a coercion\nPred = fun T : Type => T -> Prop : Type -> Type Arguments Pred _%type_scope\nfun_supM : forall (A : Type) (B : lattice) (s : Pred (A -> B)) (p : A -> B), (forall q : A -> B, q \\In s -> q <== p) -> fun_sup s <== p\npair_supM : forall (A B : lattice) (s : Pred (A * B)) (p : A * B), (forall q : A * B, q \\In s -> q <== p) -> pair_sup s <== p\nideal_supP : forall (s : Pred (ideal P)) (p : ideal P), p \\In s -> p <== ideal_sup s\ndfun_supM : forall (A : Type) (B : A -> lattice) (s : Pred (dfunPoset (fun x : A => B x))) (p : dfunPoset (fun x : A => B x)), (forall q : dfunPoset (fun x : A => B x), q \\In s -> q <== p) -> dfun_sup s <== p\nideal_sup' = fun s : Pred (ideal P) => sup [Pred x | exists p : ideal P, p \\In s /\\ id_val p = x] : Pred (ideal P) -> T\nLatticeMixin : forall (T : poset) (mx_sup : Pred T -> T), (forall (s : Pred T) (x : T), x \\In s -> x <== mx_sup s) -> (forall (s : Pred T) (x : T), (forall y : T, y \\In s -> y <== x) -> mx_sup s <== x) -> Lattice.mixin_of T\nsubp_orl : forall (T : Type) (p1 p2 q : Pred T), p1 <=p p2 -> PredU p1 q <=p PredU p2 q\nsubp_orr : forall (T : Type) (p1 p2 q : Pred T), p1 <=p p2 -> PredU q p1 <=p PredU q p2\nsupM : forall (T : lattice) (s : Pred T) (x : T), (forall y : T, y \\In s -> y <== x) -> sup s <== x\ninfM : forall (T : lattice) (s : Pred_Class) (x : T), (forall y : T, y \\In s -> x <== y) -> x <== inf s\nideal_supP' : forall s : Pred (ideal P), ideal_sup' s <== P\nsubp_or : forall (T : Type) (p1 p2 q : Pred T), p1 <=p q /\\ p2 <=p q < -> PredU p1 p2 <=p q\nMem_map_inv : ?x \\In [seq ?f i | i <- ?s] -> exists y : ?T, ?x = ?f y /\\ y \\In ?s where ?T : [T : lattice P : T s : Pred (ideal P) p : idealPoset P |- Type] ?T' : [T : lattice P : T s : Pred (ideal P) p : idealPoset P |- Type] ?f : [T : lattice P : T s : Pred (ideal P) p : idealPoset P |- ?T -> ?T'] ?x : [T : lattice P : T s : Pred (ideal P) p : idealPoset P |- ?T'] ?s : [T : lattice P : T s : Pred (ideal P) p : idealPoset P |- seq ?T]\nsubp_and : forall (T : Type) (p1 p2 q : Pred T), q <=p p1 /\\ q <=p p2 < -> q <=p (fun x : T => p1 x /\\ p2 x)\nRecord mixin_of (T : poset) : Type := Mixin { mx_sup : Pred T -> T; _ : forall (s : Pred T) (x : T), x \\In s -> x <== mx_sup s; _ : forall (s : Pred T) (x : T), (forall y : T, y \\In s -> y <== x) -> mx_sup s <== x } Arguments Lattice.Mixin [T] [mx_sup]%function_scope (_ _)%function_scope\nsubp_andl : forall (T : Type) (p1 p2 q : Pred T), p1 <=p p2 -> (fun x : T => p1 x /\\ q x) <=p (fun x : T => p2 x /\\ q x)\nsubp_andr : forall (T : Type) (p1 p2 q : Pred T), p1 <=p p2 -> (fun x : T => q x /\\ p1 x) <=p (fun x : T => q x /\\ p2 x)\nsupP : forall (T : lattice) (s : Pred T) (x : T), x \\In s -> x <== sup s\nfun_supP : forall (A : Type) (B : lattice) (s : Pred (A -> B)) (p : A -> B), p \\In s -> p <== fun_sup s\ninfP : forall (T : lattice) (s : Pred_Class) (x : T), x \\In s -> inf s <== x\npair_supP : forall (A B : lattice) (s : Pred (A * B)) (p : A * B), p \\In s -> p <== pair_sup s\nrelax : forall (T : poset) (P1 P2 : T), ideal P1 -> P1 <== P2 -> ideal P2\ndfun_supP : forall (A : Type) (B : A -> lattice) (s : Pred (dfunPoset (fun x : A => B x))) (p : dfunPoset (fun x : A => B x)), p \\In s -> p <== dfun_sup s\nsub_supM : forall (T : lattice) (s : Pred T) (C : sup_closed s) (u : Pred (subPoset s)) (x : subPoset s), (forall y : subPoset s, y \\In u -> y <== x) -> sub_sup C u <== x\nBinIntDef.Z.div = fun a b : BinNums.Z => let (q, _) := BinIntDef.Z.div_eucl a b in q : BinNums.Z -> BinNums.Z -> BinNums.Z Arguments BinIntDef.Z.div (_ _)%Z_scope\nIdeal : forall (T : poset) (P id_val : T), id_val <== P -> ideal P\nsub_supX : forall (T : lattice) (s : Pred T), sup_closed s -> forall u : Pred (subPoset s), sub_sup' u \\In s\nposet_trans : forall (T : poset) (y x z : T), x <== y -> y <== z -> x <== z\nsub_sup : forall (T : lattice) (s : Pred T), sup_closed s -> Pred (subPoset s) -> subPoset s\nsup_clos_idemp : forall (T : lattice) (s : Pred T), sup_closed s -> sup_closure s =p s"}, {"role": "assistant", "content": "```coq\n```"}], "original": "", "succ": false}]