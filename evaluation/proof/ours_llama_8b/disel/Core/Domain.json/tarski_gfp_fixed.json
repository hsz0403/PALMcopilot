[{"history": {"proof": "", "repairs": [], "exceptions": []}, "chat": [{"role": "user", "content": "I will give you a Coq proof state, including both hypotheses and a specific goal and your need to prove it. Your response should be a singular code block of Coq proof starting with \"```coq\n\", ending with \"Qed.```\", without any additional explanation or commentary. Follow to these guidelines:\nIntroduce variables using unique names to avoid any conflicts.\nKeep each command distinct and separated, avoid concatenations like ';' or '[cmd|cmd]'.\nOrganize your proof with bullets like '-', '+', and '*' instead of braces ({, }). Shift to their double symbols like '--' and '++', when necessary.\nEffectively use given premises, follow the syntax and structure demonstrated in the examples provided.\n\nExample 1:\n\nHypotheses:\nn, m: nat\nIHn: m + n = n + m\n\nGoal:\nm + S n = S n + m\n\nProof:\n```coq\nsimpl. rewrite <- IHn. auto.\nQed.```\n\nExample 2:\nHypotheses:\n\nGoal:\nforall n m : nat, m + n = n + m\n\n```coq\nintros n m. induction n.\n- simpl. auto.\n- simpl. rewrite <- IHn. auto.\nQed.```\n\nSolve This Proof State:\n\nHypotheses:\nT: lattice\nf: T -> T\n\nGoal:\nmonotone f -> f (tarski_gfp f) = tarski_gfp f\n\nPremises:\nmonotone : forall T1 T2 : poset, (T1 -> T2) -> Prop\ntarski_gfp : forall T : lattice, (T -> T) -> T\ntarski_lfp_fixed : forall f : T -> T, monotone f -> f (tarski_lfp f) = tarski_lfp f\ntarski_lfp_least : forall (f : T -> T) (x : T), f x = x -> tarski_lfp f <== x\nBinInt.Z.are_bits : forall f : BinNums.Z -> bool, Morphisms.Proper (Morphisms.respectful eq eq) f -> (exists n : BinNums.Z, forall m : BinNums.Z, BinInt.Z.le BinNums.Z0 m -> f m = BinInt.Z.testbit n m) < -> (exists k : BinNums.Z, forall m : BinNums.Z, BinInt.Z.le k m -> f m = f k)\nnat_rect_succ_r : forall (f0 : ?A -> ?A) (x : ?A) (n : nat), nat_rect (fun=> ?A) x (fun=> f0) n.+1 = nat_rect (fun=> ?A) (f0 x) (fun=> f0) n where ?A : [T : lattice f : T -> T |- Type]\nf_equal_nat : forall (B : Type) (f : nat -> B) (x y : nat), x = y -> f x = f y\nList.map_nth : forall (A B : Type) (f : A -> B) (l : seq A) (d : A) (n : nat), List.nth n (List.map f l) (f d) = f (List.nth n l d)\neta : forall (A : Type) (B : A -> Type) (f : forall x : A, B x), f = [eta f]\ndecrn_inj_in : forall (f : nat -> nat) (D : {pred nat}), {in D &, {mono f : m n /~ m <= n}} -> {in D &, injective f}\nsup_closed = fun T : lattice => [Pred s | forall d : Pred_Class, d <=p s -> sup d \\In s] : forall T : lattice, Simpl_Pred (Pred T) Arguments sup_closed {T}\nmap = fun (T1 T2 : Type) (f : T1 -> T2) => fix map (s : seq T1) : seq T2 := match s with | [::] => [::] | x :: s' => f x :: map s' end : forall T1 T2 : Type, (T1 -> T2) -> seq T1 -> seq T2 Arguments map {T1 T2}%type_scope _%function_scope _%seq_scope\nLattice.poset = fun cT : lattice => Poset.Pack (Lattice.class cT) cT : lattice -> poset Lattice.poset is a coercion\nmono_inj_in : forall (aT rT : eqType) (f : aT -> rT) (aR : rel aT) (rR : rel rT), reflexive rR -> forall D : pred aT, antisymmetric aR -> {in D &, {mono f : x y / aR x y > -> rR x y}} -> {in D &, injective f}\nLattice.sort = fun t : lattice => let (sort, _, _) := t in sort : lattice -> Type Lattice.sort is a coercion\nlbot = fun T : lattice => sup Pred0 : forall T : lattice, T Arguments lbot {T}\nLattice.Pack : forall sort : Type, Lattice.class_of sort -> Type -> lattice\nPred = fun T : Type => T -> Prop : Type -> Type Arguments Pred _%type_scope\nLattice.sup = fun cT : lattice => [eta Lattice.mx_sup (Lattice.mixin (Lattice.class cT))] : forall cT : lattice, Pred cT -> cT Arguments Lattice.sup {cT}\nsup_closure = fun (T : lattice) (s : Pred T) => [Pred p | forall t : Pred T, s <=p t -> t \\In sup_closed -> p \\In t] : forall T : lattice, Pred T -> Simpl_Pred T Arguments sup_closure {T}\nLattice.mx_sup : forall T : poset, Lattice.mixin_of T -> Pred T -> T\nInMem : forall T : Type, T -> Mem_Pred T -> Prop\nSubMem : forall T : Type, Mem_Pred T -> Mem_Pred T -> Prop\nEqMem : forall T : Type, Mem_Pred T -> Mem_Pred T -> Prop\nflatten = fun T : Type => foldr cat [::] : forall T : Type, seq (seq T) -> seq T Arguments flatten {T}%type_scope _%seq_scope\ntarski_lfp : forall T : lattice, (T -> T) -> T\nLattice.clone : forall (T : Type) (cT : lattice) (c : Lattice.class_of T), phant_id (Lattice.class cT) c -> lattice\nRecord mixin_of (T : Type) : Type := Mixin { mx_leq : T -> T -> Prop; _ : forall x : T, mx_leq x x; _ : forall x y : T, mx_leq x y -> mx_leq y x -> x = y; _ : forall x y z : T, mx_leq x y -> mx_leq y z -> mx_leq x z } Arguments Poset.mixin_of _%type_scope Arguments Poset.Mixin [T]%type_scope [mx_leq]%function_scope (_ _ _)%function_scope\nLattice.pack : forall (T : Type) (b0 : Poset.class_of T) (m0 m : Lattice.mixin_of (Poset.Pack b0 T)), phant_id m0 m -> lattice\ninf : forall T : lattice, Pred T -> T\nPoset.Class : forall T : Type, Poset.mixin_of T -> Poset.class_of T\nSimplPred : forall T : Type, Pred T -> Simpl_Pred T"}, {"role": "assistant", "content": "```coq\nRequire Import Morphisms.\n\nLemma goal : monotone f -> f (tarski_gfp f) = tarski_gfp f.\nProof.\n  intros H_monotone.\n  apply tarski_lfp_least with (f := f).\n  - intros x H_eq.\n    rewrite <- H_monotone.\n    apply tarski_gfp_upperbound.\n  - apply tarski_lfp_fixed in H_monotone.\n    rewrite H_monotone.\n    reflexivity.\nQed."}], "original": "Require Import Morphisms.", "succ": false}]