[{"history": {"proof": "shelve.", "repairs": [""], "exceptions": []}, "chat": [{"role": "user", "content": "I will give you a Coq proof state, including both hypotheses and a specific goal and your need to prove it. Your response should be a singular code block of Coq proof starting with \"```coq\n\", ending with \"Qed.```\", without any additional explanation or commentary. Follow to these guidelines:\nIntroduce variables using unique names to avoid any conflicts.\nKeep each command distinct and separated, avoid concatenations like ';' or '[cmd|cmd]'.\nOrganize your proof with bullets like '-', '+', and '*' instead of braces ({, }). Shift to their double symbols like '--' and '++', when necessary.\nEffectively use given premises, follow the syntax and structure demonstrated in the examples provided.\n\nExample 1:\n\nHypotheses:\nn, m: nat\nIHn: m + n = n + m\n\nGoal:\nm + S n = S n + m\n\nProof:\n```coq\nsimpl. rewrite <- IHn. auto.\nQed.```\n\nExample 2:\nHypotheses:\n\nGoal:\nforall n m : nat, m + n = n + m\n\n```coq\nintros n m. induction n.\n- simpl. auto.\n- simpl. rewrite <- IHn. auto.\nQed.```\n\nSolve This Proof State:\n\nHypotheses:\nT: lattice\ns: Pred T\nC: sup_closed s\nu: Pred tp\nx: Poset.sort tp\n\nGoal:\n(forall y : tp, y \\In u -> y <== x) -> sub_sup u <== x\n\nPremises:\nsup_closed = fun T : lattice => [Pred s | forall d : Pred_Class, d <=p s -> sup d \\In s] : forall T : lattice, Simpl_Pred (Pred T) Arguments sup_closed {T}\nNotation Poset T m := (Poset.pack id)\nEquality.sort = fun t : eqType => let (sort, _) := t in sort : eqType -> Type Equality.sort is a coercion\nNotation tp := (subPoset s)\nList.In : forall A : Type, A -> seq A -> Prop\nsub_sup = fun u : Pred tp => exist (Mem s) (sub_sup' u) (sub_supX u) : Pred tp -> tp\nPred = fun T : Type => T -> Prop : Type -> Type Arguments Pred _%type_scope\nsub_supP : forall (u : Pred tp) (x : tp), x \\In u -> x <== sub_sup u\nsub_sup' = fun u : Pred tp => sup [Pred x | exists y : tp, y \\In u /\\ x = sval y] : Pred tp -> T\nLatticeMixin : forall (T : poset) (mx_sup : Pred T -> T), (forall (s : Pred T) (x : T), x \\In s -> x <== mx_sup s) -> (forall (s : Pred T) (x : T), (forall y : T, y \\In s -> y <== x) -> mx_sup s <== x) -> Lattice.mixin_of T\nsupM : forall (T : lattice) (s : Pred T) (x : T), (forall y : T, y \\In s -> y <== x) -> sup s <== x\nsub_supX : forall u : Pred tp, sub_sup' u \\In s\nMem_map_inv : ?x \\In [seq ?f i | i <- ?s] -> exists y : ?T, ?x = ?f y /\\ y \\In ?s where ?T : [T : lattice s : Pred T C : sup_closed s u : Pred tp x : tp |- Type] ?T' : [T : lattice s : Pred T C : sup_closed s u : Pred tp x : tp |- Type] ?f : [T : lattice s : Pred T C : sup_closed s u : Pred tp x : tp |- ?T -> ?T'] ?x : [T : lattice s : Pred T C : sup_closed s u : Pred tp x : tp |- ?T'] ?s : [T : lattice s : Pred T C : sup_closed s u : Pred tp x : tp |- seq ?T]\nRecord mixin_of (T : poset) : Type := Mixin { mx_sup : Pred T -> T; _ : forall (s : Pred T) (x : T), x \\In s -> x <== mx_sup s; _ : forall (s : Pred T) (x : T), (forall y : T, y \\In s -> y <== x) -> mx_sup s <== x } Arguments Lattice.Mixin [T] [mx_sup]%function_scope (_ _)%function_scope\ninfM : forall (T : lattice) (s : Pred_Class) (x : T), (forall y : T, y \\In s -> x <== y) -> x <== inf s\nposet_asym : forall (T : poset) (x y : T), x <== y -> y <== x -> x = y\nposet_trans : forall (T : poset) (y x z : T), x <== y -> y <== z -> x <== z\nRelation_Operators.clos_refl_sym_trans_ind : forall (A : Type) (R : Relation_Definitions.relation A) (P : A -> A -> Prop), (forall x y : A, R x y -> P x y) -> (forall x : A, P x x) -> (forall x y : A, Relation_Operators.clos_refl_sym_trans A R x y -> P x y -> P y x) -> (forall x y z : A, Relation_Operators.clos_refl_sym_trans A R x y -> P x y -> Relation_Operators.clos_refl_sym_trans A R y z -> P y z -> P x z) -> forall a a0 : A, Relation_Operators.clos_refl_sym_trans A R a a0 -> P a a0\nPosetMixin : forall (T : Type) (mx_leq : T -> T -> Prop), (forall x : T, mx_leq x x) -> (forall x y : T, mx_leq x y -> mx_leq y x -> x = y) -> (forall x y z : T, mx_leq x y -> mx_leq y z -> mx_leq x z) -> Poset.mixin_of T\nsub_asym : forall (T : poset) (s : Pred T) (x : {x : T | x \\In s}) (y : {x0 : T | x0 \\In s}), sub_leq x y -> sub_leq y x -> x = y\nInE : forall T : Type, (forall x y : T, x \\In [:: y] <-> x = y) * (forall (y : T) (s : seq T) (x : T), x \\In y :: s <-> x = y \\/ x \\In s) * (forall (T0 : Type) (x : T0) (p : Simpl_Pred T0), (x \\In p) = p x)\nsub_trans : forall (T : poset) (s : Pred T) (x : {x : T | x \\In s}) (y z : {x0 : T | x0 \\In s}), sub_leq x y -> sub_leq y z -> sub_leq x z\ndfun_asym : forall (A : Type) (B : A -> poset) (x : forall x : A, B x) (y : forall x0 : A, B x0), dfun_leq x y -> dfun_leq y x -> x = y\nsupP : forall (T : lattice) (s : Pred T) (x : T), x \\In s -> x <== sup s\nfun_asym : forall (A : Type) (B : poset) (x y : A -> B), fun_leq x y -> fun_leq y x -> x = y\nideal_asym : forall (T : poset) (P : T) (x y : ideal P), ideal_leq x y -> ideal_leq y x -> x = y\npair_asym : forall (A B : poset) (x y : A * B), pair_leq x y -> pair_leq y x -> x = y\ndfun_trans : forall (A : Type) (B : A -> poset) (x : forall x : A, B x) (y z : forall x0 : A, B x0), dfun_leq x y -> dfun_leq y z -> dfun_leq x z\nfun_trans : forall (A : Type) (B : poset) (x y z : A -> B), fun_leq x y -> fun_leq y z -> fun_leq x z\nRecord mixin_of (T : Type) : Type := Mixin { mx_leq : T -> T -> Prop; _ : forall x : T, mx_leq x x; _ : forall x y : T, mx_leq x y -> mx_leq y x -> x = y; _ : forall x y z : T, mx_leq x y -> mx_leq y z -> mx_leq x z } Arguments Poset.mixin_of _%type_scope Arguments Poset.Mixin [T]%type_scope [mx_leq]%function_scope (_ _ _)%function_scope\nPred_of_Simpl_morph : forall (T : Type) (x y : Simpl_Pred T), EqSimplPred x y -> x <~> y\nZnumtheory.Z_lt_neq = fun (x y : BinNums.Z) (H : BinInt.Z.lt x y) => BinInt.Z.neq_sym x y (BinInt.Z.neq_sym y x (BinInt.Z.neq_sym x y (BinInt.Z.lt_neq x y H))) : forall x y : BinNums.Z, BinInt.Z.lt x y -> y <> x Arguments Znumtheory.Z_lt_neq {x y}%Z_scope\nideal_trans : forall (T : poset) (P : T) (x y z : ideal P), ideal_leq x y -> ideal_leq y z -> ideal_leq x z\npair_trans : forall (A B : poset) (x y z : A * B), pair_leq x y -> pair_leq y z -> pair_leq x z\ndfun_leq : forall (A : Type) (B : A -> poset), (forall x : A, B x) -> (forall x : A, B x) -> Prop\npredC_morph : forall (T : Type) (x y : Pred_Class), x <~> y -> PredC x <~> PredC y\nMem_morhp : forall (T : Type) (pT : PredType T) (x y : pT), x <~> y -> x =p y"}, {"role": "assistant", "content": "```coq\n```"}], "original": "", "succ": false}]