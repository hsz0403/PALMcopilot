[{"history": {"proof": "shelve.", "repairs": [""], "exceptions": []}, "chat": [{"role": "user", "content": "I will give you a Coq proof state, including both hypotheses and a specific goal and your need to prove it. Your response should be a singular code block of Coq proof starting with \"```coq\n\", ending with \"Qed.```\", without any additional explanation or commentary. Follow to these guidelines:\nIntroduce variables using unique names to avoid any conflicts.\nKeep each command distinct and separated, avoid concatenations like ';' or '[cmd|cmd]'.\nOrganize your proof with bullets like '-', '+', and '*' instead of braces ({, }). Shift to their double symbols like '--' and '++', when necessary.\nEffectively use given premises, follow the syntax and structure demonstrated in the examples provided.\n\nExample 1:\n\nHypotheses:\nn, m: nat\nIHn: m + n = n + m\n\nGoal:\nm + S n = S n + m\n\nYour Response:\n```coq\nsimpl. rewrite <- IHn. auto.\nQed.```\n\nExample 2:\nHypotheses:\n\nGoal:\nforall n m : nat, m + n = n + m\n\nYour Response:\n```coq\nintros n m. induction n.\n- simpl. auto.\n- simpl. rewrite <- IHn. auto.\nQed.```\n\nSolve This Proof State:\n\nHypotheses:\nm: nat\nn: nat\np: m <= n\n\nGoal:\nPrimRecs n m\n\nPremises:\nInductive PrimRec : nat -> Set := succFunc : PrimRec 1 | zeroFunc : PrimRec 0 | projFunc : forall n m : nat, m < n -> PrimRec n | composeFunc : forall n m : nat, PrimRecs n m -> PrimRec m -> PrimRec n | primRecFunc : forall n : nat, PrimRec n -> PrimRec (S (S n)) -> PrimRec (S n) with PrimRecs : nat -> nat -> Set := PRnil : forall n : nat, PrimRecs n 0 | PRcons : forall n m : nat, PrimRec n -> PrimRecs n m -> PrimRecs n (S m) Arguments PrimRec _%nat_scope Arguments projFunc (_ _)%nat_scope Arguments composeFunc (_ _)%nat_scope Arguments primRecFunc _%nat_scope Arguments PrimRecs (_ _)%nat_scope Arguments PRnil _%nat_scope Arguments PRcons (_ _)%nat_scope\nPRcons : forall n m : nat, PrimRec n -> PrimRecs n m -> PrimRecs n (S m)\ncomposeFunc : forall n m : nat, PrimRecs n m -> PrimRec m -> PrimRec n\nevalPrimRecs : forall n m : nat, PrimRecs n m -> Vector.t (naryFunc n) m\nInductive PrimRec : nat -> Set := succFunc : PrimRec 1 | zeroFunc : PrimRec 0 | projFunc : forall n m : nat, m < n -> PrimRec n | composeFunc : forall n m : nat, PrimRecs n m -> PrimRec m -> PrimRec n | primRecFunc : forall n : nat, PrimRec n -> PrimRec (S (S n)) -> PrimRec (S n) with PrimRecs : nat -> nat -> Set := PRnil : forall n : nat, PrimRecs n 0 | PRcons : forall n m : nat, PrimRec n -> PrimRecs n m -> PrimRecs n (S m) Arguments PrimRec _%nat_scope Arguments projFunc (_ _)%nat_scope Arguments composeFunc (_ _)%nat_scope Arguments primRecFunc _%nat_scope Arguments PrimRecs (_ _)%nat_scope Arguments PRnil _%nat_scope Arguments PRcons (_ _)%nat_scope\nPrimRecs_ind : forall P : forall n n0 : nat, PrimRecs n n0 -> Prop, (forall n : nat, P n 0 (PRnil n)) -> (forall (n m : nat) (p : PrimRec n) (p0 : PrimRecs n m), P n m p0 -> P n (S m) (PRcons n m p p0)) -> forall (n n0 : nat) (p : PrimRecs n n0), P n n0 p\nPrimRecs_rect : forall P : forall n n0 : nat, PrimRecs n n0 -> Type, (forall n : nat, P n 0 (PRnil n)) -> (forall (n m : nat) (p : PrimRec n) (p0 : PrimRecs n m), P n m p0 -> P n (S m) (PRcons n m p p0)) -> forall (n n0 : nat) (p : PrimRecs n n0), P n n0 p\nPrimRecs_rec : forall P : forall n n0 : nat, PrimRecs n n0 -> Set, (forall n : nat, P n 0 (PRnil n)) -> (forall (n m : nat) (p : PrimRec n) (p0 : PrimRecs n m), P n m p0 -> P n (S m) (PRcons n m p p0)) -> forall (n n0 : nat) (p : PrimRecs n n0), P n n0 p\nPrimRecs_sind : forall P : forall n n0 : nat, PrimRecs n n0 -> SProp, (forall n : nat, P n 0 (PRnil n)) -> (forall (n m : nat) (p : PrimRec n) (p0 : PrimRecs n m), P n m p0 -> P n (S m) (PRcons n m p p0)) -> forall (n n0 : nat) (p : PrimRecs n n0), P n n0 p\nPrimRecs_PrimRec_ind : forall (P : forall n : nat, PrimRec n -> Prop) (P0 : forall n n0 : nat, PrimRecs n n0 -> Prop), P 1 succFunc -> P 0 zeroFunc -> (forall (n m : nat) (l : m < n), P n (projFunc n m l)) -> (forall (n m : nat) (g : PrimRecs n m), P0 n m g -> forall h : PrimRec m, P m h -> P n (composeFunc n m g h)) -> (forall (n : nat) (g : PrimRec n), P n g -> forall h : PrimRec (S (S n)), P (S (S n)) h -> P (S n) (primRecFunc n g h)) -> (forall n : nat, P0 n 0 (PRnil n)) ->...-> forall (n n0 : nat) (p : PrimRecs n n0), P0 n n0 p\nPrimRecs_PrimRec_rec : forall (P : forall n : nat, PrimRec n -> Set) (P0 : forall n n0 : nat, PrimRecs n n0 -> Set), P 1 succFunc -> P 0 zeroFunc -> (forall (n m : nat) (l : m < n), P n (projFunc n m l)) -> (forall (n m : nat) (g : PrimRecs n m), P0 n m g -> forall h : PrimRec m, P m h -> P n (composeFunc n m g h)) -> (forall (n : nat) (g : PrimRec n), P n g -> forall h : PrimRec (S (S n)), P (S (S n)) h -> P (S n) (primRecFunc n g h)) -> (forall n : nat, P0 n 0 (PRnil n)) ->...-> forall (n n0 : nat) (p : PrimRecs n n0), P0 n n0 p\nPrimRec_PrimRecs_ind : forall (P : forall n : nat, PrimRec n -> Prop) (P0 : forall n n0 : nat, PrimRecs n n0 -> Prop), P 1 succFunc -> P 0 zeroFunc -> (forall (n m : nat) (l : m < n), P n (projFunc n m l)) -> (forall (n m : nat) (g : PrimRecs n m), P0 n m g -> forall h : PrimRec m, P m h -> P n (composeFunc n m g h)) -> (forall (n : nat) (g : PrimRec n), P n g -> forall h : PrimRec (S (S n)), P (S (S n)) h -> P (S n) (primRecFunc n g h)) -> (forall n : nat, P0 n 0 (PRnil n)) ->...-> forall (n : nat) (p : PrimRec n), P n p\nPrimRec_PrimRecs_rec : forall (P : forall n : nat, PrimRec n -> Set) (P0 : forall n n0 : nat, PrimRecs n n0 -> Set), P 1 succFunc -> P 0 zeroFunc -> (forall (n m : nat) (l : m < n), P n (projFunc n m l)) -> (forall (n m : nat) (g : PrimRecs n m), P0 n m g -> forall h : PrimRec m, P m h -> P n (composeFunc n m g h)) -> (forall (n : nat) (g : PrimRec n), P n g -> forall h : PrimRec (S (S n)), P (S (S n)) h -> P (S n) (primRecFunc n g h)) -> (forall n : nat, P0 n 0 (PRnil n)) ->...-> forall (n : nat) (p : PrimRec n), P n p\nNat.max_spec : forall n m : nat, n < m /\\ Nat.max n m = m \\/ m <= n /\\ Nat.max n m = n\nNat.le_antisymm : forall n m : nat, n <= m -> m <= n -> n = m\nNat.square_lt_simpl_nonneg : forall n m : nat, 0 <= m -> n * n < m * m -> n < m\nNat.lt_eq_cases : forall n m : nat, n <= m < -> n < m \\/ n = m\nNat.sub_add : forall n m : nat, n <= m -> m - n + n = m\nNat.divide_antisym_nonneg : forall n m : nat, 0 <= n -> 0 <= m -> Nat.divide n m -> Nat.divide m n -> n = m\nNat.square_le_mono_nonneg : forall n m : nat, 0 <= n -> n <= m -> n * n <= m * m\nPeano.max_r : forall n m : nat, n <= m -> Init.Nat.max n m = m\nmin_l : forall n m : nat, n <= m -> Init.Nat.min n m = n\nNat.min_l : forall n m : nat, n <= m -> Nat.min n m = n\nMin.min_l : forall n m : nat, n <= m -> Nat.min n m = n\nNat.eq_le_incl : forall n m : nat, n = m -> n <= m\nNat.lt_ge_cases : forall n m : nat, n < m \\/ m <= n\nNat.le_gt_cases : forall n m : nat, n <= m \\/ m < n\nNat.lt_le_incl : forall n m : nat, n < m -> n <= m\nle_S : forall n m : nat, n <= m -> n <= S m\nNat.le_le_succ_r : forall n m : nat, n <= m -> n <= S m\nle_not_lt : forall n m : nat, n <= m -> ~ m < n"}, {"role": "assistant", "content": "```coq\n```"}], "original": "", "succ": false}]