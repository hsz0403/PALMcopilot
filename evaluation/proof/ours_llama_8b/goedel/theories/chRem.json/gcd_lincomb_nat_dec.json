[{"history": {"proof": "shelve.", "repairs": [""], "exceptions": []}, "chat": [{"role": "user", "content": "I will give you a Coq proof state, including both hypotheses and a specific goal and your need to prove it. Your response should be a singular code block of Coq proof starting with \"```coq\n\", ending with \"Qed.```\", without any additional explanation or commentary. Follow to these guidelines:\nIntroduce variables using unique names to avoid any conflicts.\nKeep each command distinct and separated, avoid concatenations like ';' or '[cmd|cmd]'.\nOrganize your proof with bullets like '-', '+', and '*' instead of braces ({, }). Shift to their double symbols like '--' and '++', when necessary.\nEffectively use given premises, follow the syntax and structure demonstrated in the examples provided.\n\nExample 1:\n\nHypotheses:\nn, m: nat\nIHn: m + n = n + m\n\nGoal:\nm + S n = S n + m\n\nYour Response:\n```coq\nsimpl. rewrite <- IHn. auto.\nQed.```\n\nExample 2:\nHypotheses:\n\nGoal:\nforall n m : nat, m + n = n + m\n\nYour Response:\n```coq\nintros n m. induction n.\n- simpl. auto.\n- simpl. rewrite <- IHn. auto.\nQed.```\n\nSolve This Proof State:\n\nHypotheses:\nNone\n\nGoal:\nforall x y d : nat, x > 0 -> gcd (Z.of_nat x) (Z.of_nat y) d -> {a : Z * Z | Z.of_nat d = Z.add (Z.mul (Z.of_nat x) (fst a)) (Z.mul (Z.of_nat y) (snd a))}\n\nPremises:\nInductive Z : Set := Z0 : Z | Zpos : positive -> Z | Zneg : positive -> Z Arguments Zpos _%positive_scope Arguments Zneg _%positive_scope\nN.mul = fun n m : N => match n with | 0%N => 0%N | N.pos p => match m with | 0%N => 0%N | N.pos q => N.pos (p * q) end end : N -> N -> N Arguments N.mul (_ _)%N_scope\nByte.of_nat = fun x : nat => match x with | 0 => Some Byte.x00 | 1 => Some Byte.x01 | 2 => Some Byte.x02 | 3 => Some Byte.x03 | 4 => Some Byte.x04 | 5 => Some Byte.x05 | 6 => Some Byte.x06 | 7 => Some Byte.x07 | 8 => Some Byte.x08 | 9 => Some Byte.x09 | 10 => Some Byte.x0a | 11 => Some Byte.x0b | 12 => Some Byte.x0c | 13 => Some Byte.x0d | 14 => Some Byte.x0e | 15 => Some Byte.x0f | 16 => Some Byte.x10 | 17 => Some Byte.x11 | 18 => Some Byte.x12 | 19 => Some Byte.x13\nsnd = fun (A B : Type) (p : A * B) => let (_, y) := p in y : forall A B : Type, A * B -> B Arguments snd {A B}%type_scope\nN.add = fun n m : N => match n with | 0%N => m | N.pos p => match m with | 0%N => n | N.pos q => N.pos (p + q) end end : N -> N -> N Arguments N.add (_ _)%N_scope\ngcd = fun (x y : Z) (d : nat) => common_div x y d /\\ (forall e : nat, common_div x y e -> e <= d) : Z -> Z -> nat -> Prop Arguments gcd (_ _)%Z_scope _%nat_scope\nInductive nat : Set := O : nat | S : nat -> nat Arguments S _%nat_scope\nfst = fun (A B : Type) (p : A * B) => let (x, _) := p in x : forall A B : Type, A * B -> A Arguments fst {A B}%type_scope\ngcd_lincomb_nat : forall x y d : nat, x > 0 -> gcd (Z.of_nat x) (Z.of_nat y) d -> LinComb (Z.of_nat d) (Z.of_nat x) (Z.of_nat y)\ngcd_0_l : forall d : nat, d > 0 -> gcd 0 (Z.of_nat d) d\ngcd_0_r : forall d : nat, d > 0 -> gcd (Z.of_nat d) 0 d\ngcd_lincomb_pos : forall (x y : Z) (d : nat), (x > 0)%Z -> gcd x y d -> LinComb (Z.of_nat d) x y\ngcd_opp_r : forall (d : nat) (x y : Z), gcd x y d -> gcd x (- y) d\ngcd_lincomb : forall (x y : Z) (d : nat), x <> 0%Z -> gcd x y d -> LinComb (Z.of_nat d) x y\ngcd_opp_l : forall (d : nat) (x y : Z), gcd x y d -> gcd (- x) y d\ncommon_div = fun (x y : Z) (d : nat) => Divides d (Z.abs_nat x) /\\ Divides d (Z.abs_nat y) : Z -> Z -> nat -> Prop Arguments common_div (_ _)%Z_scope _%nat_scope\ngcd_sym : forall (d : nat) (x y : Z), gcd x y d -> gcd y x d\neuclid_gcd1 : forall (d : nat) (x y q r : Z), gcd x y d -> x = (q * y + r)%Z -> gcd r y d\ndiv_rem : forall d n : nat, d > 0 -> exists q r : nat, 0 <= r /\\ r < d /\\ n = q * d + r\ninj_gt : forall n m : nat, n > m -> (Z.of_nat n > Z.of_nat m)%Z\nmodulo.mod_nx_0_n : forall (n : nat) (x : Z), modulo.Mod (Z.of_nat n * x) 0 n\nchRem1 : forall b : nat, b > 0 -> forall a : Z, {p : Z * nat | snd p < b /\\ Z.of_nat (snd p) = (fst p * Z.of_nat b + a)%Z}\ndiv_le : forall d n : nat, 0 < n -> Divides d n -> d <= n\nNat2Z.inj_gt : forall n m : nat, n > m < -> (Z.of_nat n > Z.of_nat m)%Z\nNat2Z.inj_mul : forall n m : nat, Z.of_nat (n * m) = (Z.of_nat n * Z.of_nat m)%Z\nprime_div_or_gcd1 : forall (p : nat) (a : Z), Prime p -> ZDivides (Z.of_nat p) a \\/ gcd (Z.of_nat p) a 1\nCoPrime = fun a b : nat => gcd (Z.of_nat a) (Z.of_nat b) 1 : nat -> nat -> Prop Arguments CoPrime (_ _)%nat_scope\nZMicromega.ZgcdM = fun x y : Z => Z.max (Z.gcd x y) 1 : Z -> Z -> Z Arguments ZMicromega.ZgcdM (_ _)%Z_scope\nlemmas.witness_le : forall x y : nat, (exists q : nat, x + q = y) -> x <= y\ninj_ge : forall n m : nat, n >= m -> (Z.of_nat n >= Z.of_nat m)%Z\ninj_le : forall n m : nat, n <= m -> (Z.of_nat n <= Z.of_nat m)%Z\ninj_lt : forall n m : nat, n < m -> (Z.of_nat n < Z.of_nat m)%Z\nNat2Z.inj_succ : forall n : nat, Z.of_nat (S n) = Z.succ (Z.of_nat n)\nRecord almost_ring_theory (R : Type) (rO rI : R) (radd rmul rsub : R -> R -> R) (ropp : R -> R) (req : R -> R -> Prop) : Prop := mk_art { ARadd_0_l : forall x : R, req (radd rO x) x; ARadd_comm : forall x y : R, req (radd x y) (radd y x); ARadd_assoc : forall x y z : R, req (radd x (radd y z)) (radd (radd x y) z); ARmul_1_l : forall x : R, req (rmul rI x) x; ARmul_0_l : forall x : R, req (rmul rO x) rO; ARmul_comm : forall x y : R, req (rmul x y) (rmul y x); ARmul_assoc : forall x y z : R,...\nNat2Z.inj_add : forall n m : nat, Z.of_nat (n + m) = (Z.of_nat n + Z.of_nat m)%Z\nzdivdec : forall x d : Z, ZDivides d x \\/ ~ ZDivides d x\ninj_abs_pos : forall x : Z, (x >= 0)%Z -> Z.of_nat (Z.abs_nat x) = x\nList.split_nth : forall (A B : Type) (l : list (A * B)) (n : nat) (d : A * B), List.nth n l d = (List.nth n (fst (List.split l)) (fst d), List.nth n (snd (List.split l)) (snd d))"}, {"role": "assistant", "content": "```coq\n```"}], "original": "", "succ": false}]