[{"history": {"proof": "intros n. induction n as [| n' IHn'] using nat_ind. - simpl. reflexivity. - simpl. rewrite IHn'. qsimpl time: 1.", "repairs": ["", "", "", "", "", "", "", "ref_not_found", "no_subterm"], "exceptions": [{"ctx": ["intros n.", "induction n as [| n' IHn'] using nat_ind.", "-", "simpl.", "reflexivity.", "-", "simpl."], "tactic": "rewrite LNN2LNT_term_eq.", "exn": "The reference LNN2LNT_term_eq was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros n.", "induction n as [| n' IHn'] using nat_ind.", "-", "simpl.", "reflexivity.", "-", "simpl.", "rewrite IHn'."], "tactic": "rewrite IHn'.", "exn": "Found no subterm matching \"LNN2LNT_term (natToTermLNN n')\" in the current goal.", "type": "no_subterm", "handled": true}, {"ctx": ["intros n.", "induction n as [| n' IHn'] using nat_ind.", "-", "simpl.", "reflexivity.", "-", "simpl.", "rewrite IHn'.", "qsimpl time: 1."], "tactic": "reflexivity.", "exn": "No such goal.", "type": "no_goal", "handled": true}]}, "chat": [{"role": "user", "content": "I will give you a Coq proof state, including both hypotheses and a specific goal and your need to prove it. Your response should be a singular code block of Coq proof starting with \"```coq\n\", ending with \"Qed.```\", without any additional explanation or commentary. Follow to these guidelines:\nIntroduce variables using unique names to avoid any conflicts.\nKeep each command distinct and separated, avoid concatenations like ';' or '[cmd|cmd]'.\nOrganize your proof with bullets like '-', '+', and '*' instead of braces ({, }). Shift to their double symbols like '--' and '++', when necessary.\nEffectively use given premises, follow the syntax and structure demonstrated in the examples provided.\n\nExample 1:\n\nHypotheses:\nn, m: nat\nIHn: m + n = n + m\n\nGoal:\nm + S n = S n + m\n\nYour Response:\n```coq\nsimpl. rewrite <- IHn. auto.\nQed.```\n\nExample 2:\nHypotheses:\n\nGoal:\nforall n m : nat, m + n = n + m\n\nYour Response:\n```coq\nintros n m. induction n.\n- simpl. auto.\n- simpl. rewrite <- IHn. auto.\nQed.```\n\nSolve This Proof State:\n\nHypotheses:\nNone\n\nGoal:\nforall n : nat, LNN2LNT_term (natToTermLNN n) = natToTerm n\n\nPremises:\nnatToTerm = fix natToTerm (n : nat) : Term := match n with | 0 => Zero | S m => Succ (natToTerm m) end : nat -> Term Arguments natToTerm _%nat_scope\nLNN2LNT_term = fix LNN2LNT_term (t : fol.Term LNN) : Term := match t with | @fol.var _ v => var v | @apply _ f ts => apply LNT f (LNN2LNT_terms (arity LNN (inr f)) ts) end with LNN2LNT_terms (n : nat) (ts : fol.Terms LNN n) {struct ts} : Terms n := match ts in (fol.Terms _ n0) return (Terms n0) with | @Tnil _ => Tnil LNT | @Tcons _ m s ss => Tcons LNT m (LNN2LNT_term s) (LNN2LNT_terms m ss) end for LNN2LNT_term : fol.Term LNN -> Term\nnatToTermLNN = LNN.natToTerm : nat -> LNN.Term Arguments natToTermLNN _%nat_scope\nInductive nat : Set := O : nat | S : nat -> nat Arguments S _%nat_scope\ncodeNatToTermCorrectLNN : forall n : nat, codeNatToTerm n = code.codeTerm LNN codeLNTFunction (natToTermLNN n)\nnatToTermLNT = natToTerm : nat -> Term Arguments natToTermLNT _%nat_scope\nNat.negb_odd : forall n : nat, negb (Nat.odd n) = Nat.even n\nPnat.SuccNat2Pos.id_succ : forall n : nat, BinPos.Pos.to_nat (BinPos.Pos.of_succ_nat n) = S n\nNat.negb_even : forall n : nat, negb (Nat.even n) = Nat.odd n\nNat.odd_succ : forall n : nat, Nat.odd (S n) = Nat.even n\nNat.even_succ : forall n : nat, Nat.even (S n) = Nat.odd n\nNat.compare_antisym : forall n m : nat, (m ?= n) = CompOpp (n ?= m)\nMin.succ_min_distr : forall n m : nat, S (Nat.min n m) = Nat.min (S n) (S m)\nNat.succ_min_distr : forall n m : nat, S (Nat.min n m) = Nat.min (S n) (S m)\nle_plus_minus : forall n m : nat, n <= m -> m = n + (m - n)\nNat.mul_max_distr_l : forall n m p : nat, Nat.max (p * n) (p * m) = p * Nat.max n m\nNat.lnot_spec_high : forall a n m : nat, n <= m -> Nat.testbit (Nat.lnot a n) m = Nat.testbit a m\nNat.lnot_lor_low : forall a b n : nat, Nat.log2 a < n -> Nat.log2 b < n -> Nat.lnot (Nat.lor a b) n = Nat.land (Nat.lnot a n) (Nat.lnot b n)\nNat.lnot_spec_low : forall a n m : nat, m < n -> Nat.testbit (Nat.lnot a n) m = negb (Nat.testbit a m)\nNdigits.Ntestbit_Nbit : forall (a : BinNums.N) (n : nat), BinNat.N.testbit a (BinNat.N.of_nat n) = BinNat.N.testbit_nat a n\nInductive t : nat -> Set := F1 : forall n : nat, Fin.t (S n) | FS : forall n : nat, Fin.t n -> Fin.t (S n) Arguments Fin.t _%nat_scope Arguments Fin.F1 {n}%nat_scope Arguments Fin.FS {n}%nat_scope\nFin.t_ind : forall P : forall n : nat, Fin.t n -> Prop, (forall n : nat, P (S n) Fin.F1) -> (forall (n : nat) (t : Fin.t n), P n t -> P (S n) (Fin.FS t)) -> forall (n : nat) (t : Fin.t n), P n t\nVectorDef.cons : forall A : Type, A -> forall n : nat, VectorDef.t A n -> VectorDef.t A (S n)\nFin.caseS : forall P : forall n : nat, Fin.t (S n) -> Type, (forall n : nat, P n Fin.F1) -> (forall (n : nat) (p : Fin.t n), P n (Fin.FS p)) -> forall (n : nat) (p : Fin.t (S n)), P n p\nVectorDef.rect2 : forall P : forall n : nat, VectorDef.t ?A n -> VectorDef.t ?B n -> Type, P 0 (VectorDef.nil ?A) (VectorDef.nil ?B) -> (forall (n : nat) (v1 : VectorDef.t ?A n) (v2 : VectorDef.t ?B n), P n v1 v2 -> forall (a : ?A) (b : ?B), P (S n) (VectorDef.cons ?A a n v1) (VectorDef.cons ?B b n v2)) -> forall (n : nat) (v1 : VectorDef.t ?A n) (v2 : VectorDef.t ?B n), P n v1 v2 where ?A : [ |- Type] ?B : [ |- Type]\nNat.add_0_l : forall n : nat, 0 + n = n\nmax_0_l : forall n : nat, Nat.max 0 n = n\nNat.add_0_r : forall n : nat, n + 0 = n\nNat.max_0_l : forall n : nat, Nat.max 0 n = n\nNat.sub_diag : forall n : nat, n - n = 0\nnat_compare_eq : forall n m : nat, (n ?= m) = Eq -> n = m\nbeq_nat_true : forall n m : nat, (n =? m) = true -> n = m\nNat.eqb_eq : forall n m : nat, (n =? m) = true < -> n = m\nNat.compare_eq_iff : forall n m : nat, (n ?= m) = Eq < -> n = m"}, {"role": "assistant", "content": "```coq\nintros n.\ninduction n as [| n' IHn'] using nat_ind.\n- simpl. reflexivity.\n- simpl. rewrite LNN2LNT_term_eq. rewrite IHn'. reflexivity.\nQed."}], "original": "intros n. induction n as [| n' IHn'] using nat_ind. - simpl. reflexivity. - simpl. rewrite LNN2LNT_term_eq. rewrite IHn'. reflexivity.", "succ": true}]