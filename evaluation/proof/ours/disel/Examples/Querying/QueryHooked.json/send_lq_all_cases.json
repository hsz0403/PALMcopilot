[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": ["unfold all_hooks_fire, send_step."], "tactic": "intros H1 H2.", "exn": "H1 is already used.", "type": "used_var", "handled": true}, {"ctx": ["unfold all_hooks_fire, send_step."], "tactic": "intros H1' H2.", "exn": "H2 is already used.", "type": "used_var", "handled": true}, {"ctx": ["unfold all_hooks_fire, send_step.", "intros H1' H2'."], "tactic": "destruct H1 as [H1U [H1V H1C]].", "exn": "Not an inductive product.", "type": "not_inductive_product", "handled": true}, {"ctx": ["unfold all_hooks_fire, send_step.", "intros H1' H2'.", "qsimpl.", "destruct H2 as [H2F H2M]."], "tactic": "destruct H2M as [H2M1 | H2M2].", "exn": "The reference H2M was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["unfold all_hooks_fire, send_step.", "intros H1' H2'.", "qsimpl.", "destruct H2 as [H2F H2M].", "destruct eq_op as [eq_op1 | eq_op2].", "-"], "tactic": "left.", "exn": "Not an inductive goal with 2 constructors.", "type": "not_inductive_goal", "handled": true}, {"ctx": ["unfold all_hooks_fire, send_step.", "intros H1' H2'.", "qsimpl.", "destruct H2 as [H2F H2M].", "destruct eq_op as [eq_op1 | eq_op2].", "-", "qsimpl."], "tactic": "unfold msg_just_sent.", "exn": "No such goal. Focus next goal with bullet -.", "type": "next_goal", "handled": true}, {"ctx": ["unfold all_hooks_fire, send_step.", "intros H1' H2'.", "qsimpl.", "destruct H2 as [H2F H2M].", "destruct eq_op as [eq_op1 | eq_op2].", "-", "qsimpl.", "-"], "tactic": "right.", "exn": "Not an inductive goal with 2 constructors.", "type": "not_inductive_goal", "handled": true}, {"ctx": ["unfold all_hooks_fire, send_step.", "intros H1' H2'.", "qsimpl.", "destruct H2 as [H2F H2M].", "destruct eq_op as [eq_op1 | eq_op2].", "-", "qsimpl.", "-", "qsimpl."], "tactic": "destruct H2M2 as [H2M2F H2M2R].", "exn": "The reference H2M2 was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["unfold all_hooks_fire, send_step.", "intros H1' H2'.", "qsimpl.", "destruct H2 as [H2F H2M].", "destruct eq_op as [eq_op1 | eq_op2].", "-", "qsimpl.", "-", "qsimpl."], "tactic": "destruct H2M2R as [H2M2R1 H2M2R2].", "exn": "The reference H2M2R was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["unfold all_hooks_fire, send_step.", "intros H1' H2'.", "qsimpl.", "destruct H2 as [H2F H2M].", "destruct eq_op as [eq_op1 | eq_op2].", "-", "qsimpl.", "-", "qsimpl.", "unfold msg_received."], "tactic": "split.", "exn": "Not an inductive goal with 1 constructor.", "type": "not_inductive_goal", "handled": true}, {"ctx": ["unfold all_hooks_fire, send_step.", "intros H1' H2'.", "qsimpl.", "destruct H2 as [H2F H2M].", "destruct eq_op as [eq_op1 | eq_op2].", "-", "qsimpl.", "-", "qsimpl.", "unfold msg_received."], "tactic": "rewrite upd_upd.", "exn": "The reference upd_upd was not found in the current environment.", "type": "ref_not_found", "handled": true}]}, "chat": [], "original": "unfold all_hooks_fire, send_step. intros H1 H2. destruct H1 as [H1U [H1V H1C]]. destruct H2 as [H2F H2M]. destruct H2M as [H2M1 | H2M2]. - left. unfold msg_just_sent. split. + rewrite upd_upd. reflexivity. + eapply no_msg_from_to'; eauto. + eapply Mem; eauto. + eapply send_lq_case1; eauto. + eapply holds_res_perms_ss. - right. destruct H2M2 as [H2M2F H2M2R]. destruct H2M2R as [H2M2R1 H2M2R2]. unfold msg_received. split. + rewrite upd_upd. reflexivity. + eapply no_msg_from_to'; eauto. + eapply no_msg_from_to'; eauto. + eapply msg_spec'; eauto. + eapply holds_res_perms_ss.", "succ": false}]