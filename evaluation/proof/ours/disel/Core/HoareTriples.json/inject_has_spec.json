[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": ["unfold inject_prog, inject_s."], "tactic": "apply bind_has_spec with (e2 := fun _ => e).", "exn": "In environment this : nid V, W : world K : hooks A : Type w : injects V W K e : DT this V A Unable to unify \"(let 'MemProp p := Mem (has_spec this V (bind_s ?M1562 (fun=> e))) in [eta p]) (bnd_prog (code_of ?M1562) (fun=> (let y := e in code_of y)))\" with \"(let 'MemProp p := Mem (has_spec this W (fun i : union_mapPCM Label dstatelet => exists i1 i2 : union_mapPCM Label dstatelet, i = i1 \\\\+ i2 /\\\\ i1 \\\\In Coh V /\\\\ s.1 i1, fun (i : union_mapPCM Label dstatelet) (y : A) (m : union_mapPCM Label dstatelet) => forall i1 i2 : union_mapPCM Label dstatelet, i = i1 \\\\+ i2 -> i1 \\\\In Coh V -> exists m1 m2 : union_mapPCM Label dstatelet, [/\\\\ m = m1 \\\\+ m2, s.2 i1 y m1 & network_rely W2 this i2 m2])) in [eta p]) (Prog (or_introl (erefl Unfinished)))\".", "type": "cannot_unify", "handled": true}, {"ctx": ["unfold inject_prog, inject_s.", "qsimpl use: bind_has_spec."], "tactic": "apply DTbin_make.", "exn": "In environment H : forall (this : nid) (W : world) (A B : Type) (e1 : DT this W A) (e2 : A -> DT this W B), bnd_prog (code_of e1) (fun x : A => code_of (e2 x)) \\\\In has_spec this W (bind_s e1 e2) this : nid V, W : world K : hooks A : Type w : injects V W K e : DT this V A Unable to unify \"DTbin ?M1972 ?M1973 ?M1975\" with \"(let 'MemProp p := Mem (has_spec this W (fun i : union_map Label dstatelet => exists i1 i2 : union_map Label dstatelet, i = i1 \\\\+ i2 /\\\\ i1 \\\\In Coh V /\\\\ s.1 i1, fun (i : union_map Label dstatelet) (y : A) (m : union_map Label dstatelet) => forall i1 i2 : union_map Label dstatelet, i = i1 \\\\+ i2 -> i1 \\\\In Coh V -> exists m1 m2 : union_map Label dstatelet, [/\\\\ m = m1 \\\\+ m2, s.2 i1 y m1 & network_rely W2 this i2 m2])) in [eta p]) (Prog (or_introl (erefl Unfinished)))\".", "type": "cannot_unify", "handled": true}]}, "chat": [], "original": "unfold inject_prog, inject_s. intros. apply bind_has_spec with (e2 := fun _ => e). apply DTbin_make. auto.", "succ": false}]