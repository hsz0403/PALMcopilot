[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": [], "tactic": "rewrite (vec_split_app X n m (Vector.cons X x n v) w).", "exn": "In environment X : Type n, m : nat x : X v : vec X n w : vec X m The term \"X\" has type \"Type\" while it is expected to have type \"vec ?X ?n\".", "type": "wrong_type", "handled": true}, {"ctx": ["qsimpl use: vec_split_app,cons."], "tactic": "rewrite (vec_app_split X n m (Vector.cons X x n v w)).", "exn": "In environment X : Type n, m : nat x : X v : vec X n w : vec X m H : forall (X : Type) (n m : nat) (v : vec X n) (w : vec X m), vec_split n m (vec_app v w) = (v, w) The term \"X\" has type \"Type\" while it is expected to have type \"nat\".", "type": "wrong_type", "handled": true}, {"ctx": ["qsimpl use: vec_split_app,cons.", "qsimpl use: vec_app_split,vec_split_app,cons."], "tactic": "reflexivity.", "exn": "In environment X : Type n, m : nat x : X v : vec X n w : vec X m H : forall (X : Type) (n m : nat) (v : vec X n) (w : vec X m), vec_split n m (vec_app v w) = (v, w) H0 : forall (X : Type) (n m : nat) (u : vec X (n + m)), vec_app (vec_set_pos (fun p : pos n => vec_pos u (pos_left m p))) (vec_set_pos (fun p : pos m => vec_pos u (pos_right n p))) = u Unable to unify \"x ## vec_app v w\" with \"vec_app (x ## v) w\".", "type": "cannot_unify", "handled": true}]}, "chat": [], "original": "rewrite (vec_split_app X n m (Vector.cons X x n v) w). rewrite (vec_app_split X n m (Vector.cons X x n v w)). reflexivity.", "succ": false}]