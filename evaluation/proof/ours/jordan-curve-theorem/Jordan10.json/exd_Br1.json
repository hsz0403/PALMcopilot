[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": ["intros m x x' z.", "split.", "-", "intros H.", "unfold exd in H.", "unfold Br1.", "destruct (succ_dec m zero x) as [Hx|Hx]; destruct (succ_dec m zero x') as [Hx'|Hx'].", "+", "unfold exd."], "tactic": "destruct H as [H|H].", "exn": "Not an inductive product.", "type": "not_inductive_product", "handled": true}, {"ctx": ["intros m x x' z.", "split.", "-", "intros H.", "unfold exd in H.", "unfold Br1.", "destruct (succ_dec m zero x) as [Hx|Hx]; destruct (succ_dec m zero x') as [Hx'|Hx'].", "+", "unfold exd.", "qsimpl.", "*"], "tactic": "right.", "exn": "Not an inductive product.", "type": "not_inductive_product", "handled": true}, {"ctx": ["intros m x x' z.", "split.", "-", "intros H.", "unfold exd in H.", "unfold Br1.", "destruct (succ_dec m zero x) as [Hx|Hx]; destruct (succ_dec m zero x') as [Hx'|Hx'].", "+", "unfold exd.", "qsimpl.", "*", "apply exd_B with zero x."], "tactic": "*", "exn": "Wrong bullet *: Current bullet * is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["intros m x x' z.", "split.", "-", "intros H.", "unfold exd in H.", "unfold Br1.", "destruct (succ_dec m zero x) as [Hx|Hx]; destruct (succ_dec m zero x') as [Hx'|Hx'].", "+", "unfold exd.", "qsimpl.", "*", "apply exd_B with zero x.", "shelve.", "*"], "tactic": "left.", "exn": "Not an inductive product.", "type": "not_inductive_product", "handled": true}, {"ctx": ["intros m x x' z.", "split.", "-", "intros H.", "unfold exd in H.", "unfold Br1.", "destruct (succ_dec m zero x) as [Hx|Hx]; destruct (succ_dec m zero x') as [Hx'|Hx'].", "+", "unfold exd.", "qsimpl.", "*", "apply exd_B with zero x.", "shelve.", "*"], "tactic": ["rewrite H.", ""], "exn": "Cannot find an homogeneous relation to rewrite.", "type": "no_rewrite_homo", "handled": false}, {"ctx": ["intros m x x' z.", "split.", "-", "intros H.", "unfold exd in H.", "unfold Br1.", "destruct (succ_dec m zero x) as [Hx|Hx]; destruct (succ_dec m zero x') as [Hx'|Hx'].", "+", "unfold exd.", "qsimpl.", "*", "apply exd_B with zero x.", "shelve.", "*"], "tactic": "+", "exn": "Wrong bullet +: Current bullet * is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["intros m x x' z.", "split.", "-", "intros H.", "unfold exd in H.", "unfold Br1.", "destruct (succ_dec m zero x) as [Hx|Hx]; destruct (succ_dec m zero x') as [Hx'|Hx'].", "+", "unfold exd.", "qsimpl.", "*", "apply exd_B with zero x.", "shelve.", "*", "shelve.", "+", "unfold exd."], "tactic": "destruct H as [H|H].", "exn": "Not an inductive product.", "type": "not_inductive_product", "handled": true}, {"ctx": ["intros m x x' z.", "split.", "-", "intros H.", "unfold exd in H.", "unfold Br1.", "destruct (succ_dec m zero x) as [Hx|Hx]; destruct (succ_dec m zero x') as [Hx'|Hx'].", "+", "unfold exd.", "qsimpl.", "*", "apply exd_B with zero x.", "shelve.", "*", "shelve.", "+", "unfold exd."], "tactic": "qsimpl use: zero,auto,exd_B.", "exn": "The reference auto was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros m x x' z.", "split.", "-", "intros H.", "unfold exd in H.", "unfold Br1.", "destruct (succ_dec m zero x) as [Hx|Hx]; destruct (succ_dec m zero x') as [Hx'|Hx'].", "+", "unfold exd.", "qsimpl.", "*", "apply exd_B with zero x.", "shelve.", "*", "shelve.", "+", "unfold exd.", "qsimpl use: zero,BinIntDef.Z.opp,exd_B."], "tactic": "right.", "exn": "Not an inductive product.", "type": "not_inductive_product", "handled": true}, {"ctx": ["intros m x x' z.", "split.", "-", "intros H.", "unfold exd in H.", "unfold Br1.", "destruct (succ_dec m zero x) as [Hx|Hx]; destruct (succ_dec m zero x') as [Hx'|Hx'].", "+", "unfold exd.", "qsimpl.", "*", "apply exd_B with zero x.", "shelve.", "*", "shelve.", "+", "unfold exd.", "qsimpl use: zero,BinIntDef.Z.opp,exd_B."], "tactic": "qsimpl use: zero,auto,exd_B.", "exn": "The reference auto was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros m x x' z.", "split.", "-", "intros H.", "unfold exd in H.", "unfold Br1.", "destruct (succ_dec m zero x) as [Hx|Hx]; destruct (succ_dec m zero x') as [Hx'|Hx'].", "+", "unfold exd.", "qsimpl.", "*", "apply exd_B with zero x.", "shelve.", "*", "shelve.", "+", "unfold exd.", "qsimpl use: zero,BinIntDef.Z.opp,exd_B.", "qsimpl use: zero,BinIntDef.Z.opp,exd_B.", "apply exd_B with zero x.", "auto."], "tactic": "*", "exn": "Wrong bullet *: Expecting +.", "type": "wrong_bullet", "handled": true}, {"ctx": ["intros m x x' z.", "split.", "-", "intros H.", "unfold exd in H.", "unfold Br1.", "destruct (succ_dec m zero x) as [Hx|Hx]; destruct (succ_dec m zero x') as [Hx'|Hx'].", "+", "unfold exd.", "qsimpl.", "*", "apply exd_B with zero x.", "shelve.", "*", "shelve.", "+", "unfold exd.", "qsimpl use: zero,BinIntDef.Z.opp,exd_B.", "qsimpl use: zero,BinIntDef.Z.opp,exd_B.", "apply exd_B with zero x.", "auto.", "+"], "tactic": "left.", "exn": "Not an inductive product.", "type": "not_inductive_product", "handled": true}, {"ctx": ["intros m x x' z.", "split.", "-", "intros H.", "unfold exd in H.", "unfold Br1.", "destruct (succ_dec m zero x) as [Hx|Hx]; destruct (succ_dec m zero x') as [Hx'|Hx'].", "+", "unfold exd.", "qsimpl.", "*", "apply exd_B with zero x.", "shelve.", "*", "shelve.", "+", "unfold exd.", "qsimpl use: zero,BinIntDef.Z.opp,exd_B.", "qsimpl use: zero,BinIntDef.Z.opp,exd_B.", "apply exd_B with zero x.", "auto.", "+"], "tactic": "qsimpl use: zero,auto,exd_B.", "exn": "The reference auto was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros m x x' z.", "split.", "-", "intros H.", "unfold exd in H.", "unfold Br1.", "destruct (succ_dec m zero x) as [Hx|Hx]; destruct (succ_dec m zero x') as [Hx'|Hx'].", "+", "unfold exd.", "qsimpl.", "*", "apply exd_B with zero x.", "shelve.", "*", "shelve.", "+", "unfold exd.", "qsimpl use: zero,BinIntDef.Z.opp,exd_B.", "qsimpl use: zero,BinIntDef.Z.opp,exd_B.", "apply exd_B with zero x.", "auto.", "+", "qsimpl use: zero,BinIntDef.Z.opp,exd_B."], "tactic": "rewrite H.", "exn": "No such goal. Focus next goal with bullet +.", "type": "next_goal", "handled": true}, {"ctx": ["intros m x x' z.", "split.", "-", "intros H.", "unfold exd in H.", "unfold Br1.", "destruct (succ_dec m zero x) as [Hx|Hx]; destruct (succ_dec m zero x') as [Hx'|Hx'].", "+", "unfold exd.", "qsimpl.", "*", "apply exd_B with zero x.", "shelve.", "*", "shelve.", "+", "unfold exd.", "qsimpl use: zero,BinIntDef.Z.opp,exd_B.", "qsimpl use: zero,BinIntDef.Z.opp,exd_B.", "apply exd_B with zero x.", "auto.", "+", "qsimpl use: zero,BinIntDef.Z.opp,exd_B.", "+"], "tactic": "left.", "exn": "Not an inductive product.", "type": "not_inductive_product", "handled": true}, {"ctx": ["intros m x x' z.", "split.", "-", "intros H.", "unfold exd in H.", "unfold Br1.", "destruct (succ_dec m zero x) as [Hx|Hx]; destruct (succ_dec m zero x') as [Hx'|Hx'].", "+", "unfold exd.", "qsimpl.", "*", "apply exd_B with zero x.", "shelve.", "*", "shelve.", "+", "unfold exd.", "qsimpl use: zero,BinIntDef.Z.opp,exd_B.", "qsimpl use: zero,BinIntDef.Z.opp,exd_B.", "apply exd_B with zero x.", "auto.", "+", "qsimpl use: zero,BinIntDef.Z.opp,exd_B.", "+"], "tactic": "qsimpl use: zero,auto,exd_B.", "exn": "The reference auto was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros m x x' z.", "split.", "-", "intros H.", "unfold exd in H.", "unfold Br1.", "destruct (succ_dec m zero x) as [Hx|Hx]; destruct (succ_dec m zero x') as [Hx'|Hx'].", "+", "unfold exd.", "qsimpl.", "*", "apply exd_B with zero x.", "shelve.", "*", "shelve.", "+", "unfold exd.", "qsimpl use: zero,BinIntDef.Z.opp,exd_B.", "qsimpl use: zero,BinIntDef.Z.opp,exd_B.", "apply exd_B with zero x.", "auto.", "+", "qsimpl use: zero,BinIntDef.Z.opp,exd_B.", "+", "qsimpl use: zero,BinIntDef.Z.opp,exd_B."], "tactic": "apply exd_B with zero x'.", "exn": "No such goal. Focus next goal with bullet -.", "type": "next_goal", "handled": true}, {"ctx": ["intros m x x' z.", "split.", "-", "intros H.", "unfold exd in H.", "unfold Br1.", "destruct (succ_dec m zero x) as [Hx|Hx]; destruct (succ_dec m zero x') as [Hx'|Hx'].", "+", "unfold exd.", "qsimpl.", "*", "apply exd_B with zero x.", "shelve.", "*", "shelve.", "+", "unfold exd.", "qsimpl use: zero,BinIntDef.Z.opp,exd_B.", "qsimpl use: zero,BinIntDef.Z.opp,exd_B.", "apply exd_B with zero x.", "auto.", "+", "qsimpl use: zero,BinIntDef.Z.opp,exd_B.", "+", "qsimpl use: zero,BinIntDef.Z.opp,exd_B.", "-", "intros H.", "unfold exd in H.", "destruct (succ_dec m zero x) as [Hx|Hx]; destruct (succ_dec m zero x') as [Hx'|Hx'].", "+", "unfold exd."], "tactic": "destruct H as [H|H].", "exn": "Not an inductive product.", "type": "not_inductive_product", "handled": true}, {"ctx": ["intros m x x' z.", "split.", "-", "intros H.", "unfold exd in H.", "unfold Br1.", "destruct (succ_dec m zero x) as [Hx|Hx]; destruct (succ_dec m zero x') as [Hx'|Hx'].", "+", "unfold exd.", "qsimpl.", "*", "apply exd_B with zero x.", "shelve.", "*", "shelve.", "+", "unfold exd.", "qsimpl use: zero,BinIntDef.Z.opp,exd_B.", "qsimpl use: zero,BinIntDef.Z.opp,exd_B.", "apply exd_B with zero x.", "auto.", "+", "qsimpl use: zero,BinIntDef.Z.opp,exd_B.", "+", "qsimpl use: zero,BinIntDef.Z.opp,exd_B.", "-", "intros H.", "unfold exd in H.", "destruct (succ_dec m zero x) as [Hx|Hx]; destruct (succ_dec m zero x') as [Hx'|Hx'].", "+", "unfold exd."], "tactic": "qsimpl use: zero,auto,exd_B.", "exn": "The reference auto was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros m x x' z.", "split.", "-", "intros H.", "unfold exd in H.", "unfold Br1.", "destruct (succ_dec m zero x) as [Hx|Hx]; destruct (succ_dec m zero x') as [Hx'|Hx'].", "+", "unfold exd.", "qsimpl.", "*", "apply exd_B with zero x.", "shelve.", "*", "shelve.", "+", "unfold exd.", "qsimpl use: zero,BinIntDef.Z.opp,exd_B.", "qsimpl use: zero,BinIntDef.Z.opp,exd_B.", "apply exd_B with zero x.", "auto.", "+", "qsimpl use: zero,BinIntDef.Z.opp,exd_B.", "+", "qsimpl use: zero,BinIntDef.Z.opp,exd_B.", "-", "intros H.", "unfold exd in H.", "destruct (succ_dec m zero x) as [Hx|Hx]; destruct (succ_dec m zero x') as [Hx'|Hx'].", "+", "unfold exd.", "qsimpl use: zero,BinIntDef.Z.opp,exd_B."], "tactic": "right.", "exn": "Not an inductive product.", "type": "not_inductive_product", "handled": true}, {"ctx": ["intros m x x' z.", "split.", "-", "intros H.", "unfold exd in H.", "unfold Br1.", "destruct (succ_dec m zero x) as [Hx|Hx]; destruct (succ_dec m zero x') as [Hx'|Hx'].", "+", "unfold exd.", "qsimpl.", "*", "apply exd_B with zero x.", "shelve.", "*", "shelve.", "+", "unfold exd.", "qsimpl use: zero,BinIntDef.Z.opp,exd_B.", "qsimpl use: zero,BinIntDef.Z.opp,exd_B.", "apply exd_B with zero x.", "auto.", "+", "qsimpl use: zero,BinIntDef.Z.opp,exd_B.", "+", "qsimpl use: zero,BinIntDef.Z.opp,exd_B.", "-", "intros H.", "unfold exd in H.", "destruct (succ_dec m zero x) as [Hx|Hx]; destruct (succ_dec m zero x') as [Hx'|Hx'].", "+", "unfold exd.", "qsimpl use: zero,BinIntDef.Z.opp,exd_B."], "tactic": "qsimpl use: zero,auto,exd_B.", "exn": "The reference auto was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros m x x' z.", "split.", "-", "intros H.", "unfold exd in H.", "unfold Br1.", "destruct (succ_dec m zero x) as [Hx|Hx]; destruct (succ_dec m zero x') as [Hx'|Hx'].", "+", "unfold exd.", "qsimpl.", "*", "apply exd_B with zero x.", "shelve.", "*", "shelve.", "+", "unfold exd.", "qsimpl use: zero,BinIntDef.Z.opp,exd_B.", "qsimpl use: zero,BinIntDef.Z.opp,exd_B.", "apply exd_B with zero x.", "auto.", "+", "qsimpl use: zero,BinIntDef.Z.opp,exd_B.", "+", "qsimpl use: zero,BinIntDef.Z.opp,exd_B.", "-", "intros H.", "unfold exd in H.", "destruct (succ_dec m zero x) as [Hx|Hx]; destruct (succ_dec m zero x') as [Hx'|Hx'].", "+", "unfold exd.", "qsimpl use: zero,BinIntDef.Z.opp,exd_B.", "qsimpl use: zero,BinIntDef.Z.opp,exd_B.", "apply exd_B with zero x."], "tactic": "left.", "exn": "Not an inductive product.", "type": "not_inductive_product", "handled": true}, {"ctx": ["intros m x x' z.", "split.", "-", "intros H.", "unfold exd in H.", "unfold Br1.", "destruct (succ_dec m zero x) as [Hx|Hx]; destruct (succ_dec m zero x') as [Hx'|Hx'].", "+", "unfold exd.", "qsimpl.", "*", "apply exd_B with zero x.", "shelve.", "*", "shelve.", "+", "unfold exd.", "qsimpl use: zero,BinIntDef.Z.opp,exd_B.", "qsimpl use: zero,BinIntDef.Z.opp,exd_B.", "apply exd_B with zero x.", "auto.", "+", "qsimpl use: zero,BinIntDef.Z.opp,exd_B.", "+", "qsimpl use: zero,BinIntDef.Z.opp,exd_B.", "-", "intros H.", "unfold exd in H.", "destruct (succ_dec m zero x) as [Hx|Hx]; destruct (succ_dec m zero x') as [Hx'|Hx'].", "+", "unfold exd.", "qsimpl use: zero,BinIntDef.Z.opp,exd_B.", "qsimpl use: zero,BinIntDef.Z.opp,exd_B.", "apply exd_B with zero x."], "tactic": "qsimpl use: zero,auto,exd_B.", "exn": "The reference auto was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros m x x' z.", "split.", "-", "intros H.", "unfold exd in H.", "unfold Br1.", "destruct (succ_dec m zero x) as [Hx|Hx]; destruct (succ_dec m zero x') as [Hx'|Hx'].", "+", "unfold exd.", "qsimpl.", "*", "apply exd_B with zero x.", "shelve.", "*", "shelve.", "+", "unfold exd.", "qsimpl use: zero,BinIntDef.Z.opp,exd_B.", "qsimpl use: zero,BinIntDef.Z.opp,exd_B.", "apply exd_B with zero x.", "auto.", "+", "qsimpl use: zero,BinIntDef.Z.opp,exd_B.", "+", "qsimpl use: zero,BinIntDef.Z.opp,exd_B.", "-", "intros H.", "unfold exd in H.", "destruct (succ_dec m zero x) as [Hx|Hx]; destruct (succ_dec m zero x') as [Hx'|Hx'].", "+", "unfold exd.", "qsimpl use: zero,BinIntDef.Z.opp,exd_B.", "qsimpl use: zero,BinIntDef.Z.opp,exd_B.", "apply exd_B with zero x.", "qsimpl use: zero,BinIntDef.Z.opp,exd_B."], "tactic": ["rewrite H.", ""], "exn": "Cannot find an homogeneous relation to rewrite.", "type": "no_rewrite_homo", "handled": false}, {"ctx": ["intros m x x' z.", "split.", "-", "intros H.", "unfold exd in H.", "unfold Br1.", "destruct (succ_dec m zero x) as [Hx|Hx]; destruct (succ_dec m zero x') as [Hx'|Hx'].", "+", "unfold exd.", "qsimpl.", "*", "apply exd_B with zero x.", "shelve.", "*", "shelve.", "+", "unfold exd.", "qsimpl use: zero,BinIntDef.Z.opp,exd_B.", "qsimpl use: zero,BinIntDef.Z.opp,exd_B.", "apply exd_B with zero x.", "auto.", "+", "qsimpl use: zero,BinIntDef.Z.opp,exd_B.", "+", "qsimpl use: zero,BinIntDef.Z.opp,exd_B.", "-", "intros H.", "unfold exd in H.", "destruct (succ_dec m zero x) as [Hx|Hx]; destruct (succ_dec m zero x') as [Hx'|Hx'].", "+", "unfold exd.", "qsimpl use: zero,BinIntDef.Z.opp,exd_B.", "qsimpl use: zero,BinIntDef.Z.opp,exd_B.", "apply exd_B with zero x.", "qsimpl use: zero,BinIntDef.Z.opp,exd_B."], "tactic": "+", "exn": "Wrong bullet +: Current bullet + is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["intros m x x' z.", "split.", "-", "intros H.", "unfold exd in H.", "unfold Br1.", "destruct (succ_dec m zero x) as [Hx|Hx]; destruct (succ_dec m zero x') as [Hx'|Hx'].", "+", "unfold exd.", "qsimpl.", "*", "apply exd_B with zero x.", "shelve.", "*", "shelve.", "+", "unfold exd.", "qsimpl use: zero,BinIntDef.Z.opp,exd_B.", "qsimpl use: zero,BinIntDef.Z.opp,exd_B.", "apply exd_B with zero x.", "auto.", "+", "qsimpl use: zero,BinIntDef.Z.opp,exd_B.", "+", "qsimpl use: zero,BinIntDef.Z.opp,exd_B.", "-", "intros H.", "unfold exd in H.", "destruct (succ_dec m zero x) as [Hx|Hx]; destruct (succ_dec m zero x') as [Hx'|Hx'].", "+", "unfold exd.", "qsimpl use: zero,BinIntDef.Z.opp,exd_B.", "qsimpl use: zero,BinIntDef.Z.opp,exd_B.", "apply exd_B with zero x.", "qsimpl use: zero,BinIntDef.Z.opp,exd_B.", "shelve.", "+", "unfold exd."], "tactic": "destruct H as [H|H].", "exn": "Not an inductive product.", "type": "not_inductive_product", "handled": true}, {"ctx": ["intros m x x' z.", "split.", "-", "intros H.", "unfold exd in H.", "unfold Br1.", "destruct (succ_dec m zero x) as [Hx|Hx]; destruct (succ_dec m zero x') as [Hx'|Hx'].", "+", "unfold exd.", "qsimpl.", "*", "apply exd_B with zero x.", "shelve.", "*", "shelve.", "+", "unfold exd.", "qsimpl use: zero,BinIntDef.Z.opp,exd_B.", "qsimpl use: zero,BinIntDef.Z.opp,exd_B.", "apply exd_B with zero x.", "auto.", "+", "qsimpl use: zero,BinIntDef.Z.opp,exd_B.", "+", "qsimpl use: zero,BinIntDef.Z.opp,exd_B.", "-", "intros H.", "unfold exd in H.", "destruct (succ_dec m zero x) as [Hx|Hx]; destruct (succ_dec m zero x') as [Hx'|Hx'].", "+", "unfold exd.", "qsimpl use: zero,BinIntDef.Z.opp,exd_B.", "qsimpl use: zero,BinIntDef.Z.opp,exd_B.", "apply exd_B with zero x.", "qsimpl use: zero,BinIntDef.Z.opp,exd_B.", "shelve.", "+", "unfold exd."], "tactic": "qsimpl use: zero,auto,exd_B.", "exn": "The reference auto was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros m x x' z.", "split.", "-", "intros H.", "unfold exd in H.", "unfold Br1.", "destruct (succ_dec m zero x) as [Hx|Hx]; destruct (succ_dec m zero x') as [Hx'|Hx'].", "+", "unfold exd.", "qsimpl.", "*", "apply exd_B with zero x.", "shelve.", "*", "shelve.", "+", "unfold exd.", "qsimpl use: zero,BinIntDef.Z.opp,exd_B.", "qsimpl use: zero,BinIntDef.Z.opp,exd_B.", "apply exd_B with zero x.", "auto.", "+", "qsimpl use: zero,BinIntDef.Z.opp,exd_B.", "+", "qsimpl use: zero,BinIntDef.Z.opp,exd_B.", "-", "intros H.", "unfold exd in H.", "destruct (succ_dec m zero x) as [Hx|Hx]; destruct (succ_dec m zero x') as [Hx'|Hx'].", "+", "unfold exd.", "qsimpl use: zero,BinIntDef.Z.opp,exd_B.", "qsimpl use: zero,BinIntDef.Z.opp,exd_B.", "apply exd_B with zero x.", "qsimpl use: zero,BinIntDef.Z.opp,exd_B.", "shelve.", "+", "unfold exd.", "qsimpl use: zero,BinIntDef.Z.opp,exd_B."], "tactic": "right.", "exn": "Not an inductive product.", "type": "not_inductive_product", "handled": true}, {"ctx": ["intros m x x' z.", "split.", "-", "intros H.", "unfold exd in H.", "unfold Br1.", "destruct (succ_dec m zero x) as [Hx|Hx]; destruct (succ_dec m zero x') as [Hx'|Hx'].", "+", "unfold exd.", "qsimpl.", "*", "apply exd_B with zero x.", "shelve.", "*", "shelve.", "+", "unfold exd.", "qsimpl use: zero,BinIntDef.Z.opp,exd_B.", "qsimpl use: zero,BinIntDef.Z.opp,exd_B.", "apply exd_B with zero x.", "auto.", "+", "qsimpl use: zero,BinIntDef.Z.opp,exd_B.", "+", "qsimpl use: zero,BinIntDef.Z.opp,exd_B.", "-", "intros H.", "unfold exd in H.", "destruct (succ_dec m zero x) as [Hx|Hx]; destruct (succ_dec m zero x') as [Hx'|Hx'].", "+", "unfold exd.", "qsimpl use: zero,BinIntDef.Z.opp,exd_B.", "qsimpl use: zero,BinIntDef.Z.opp,exd_B.", "apply exd_B with zero x.", "qsimpl use: zero,BinIntDef.Z.opp,exd_B.", "shelve.", "+", "unfold exd.", "qsimpl use: zero,BinIntDef.Z.opp,exd_B."], "tactic": "qsimpl use: zero,auto,exd_B.", "exn": "The reference auto was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros m x x' z.", "split.", "-", "intros H.", "unfold exd in H.", "unfold Br1.", "destruct (succ_dec m zero x) as [Hx|Hx]; destruct (succ_dec m zero x') as [Hx'|Hx'].", "+", "unfold exd.", "qsimpl.", "*", "apply exd_B with zero x.", "shelve.", "*", "shelve.", "+", "unfold exd.", "qsimpl use: zero,BinIntDef.Z.opp,exd_B.", "qsimpl use: zero,BinIntDef.Z.opp,exd_B.", "apply exd_B with zero x.", "auto.", "+", "qsimpl use: zero,BinIntDef.Z.opp,exd_B.", "+", "qsimpl use: zero,BinIntDef.Z.opp,exd_B.", "-", "intros H.", "unfold exd in H.", "destruct (succ_dec m zero x) as [Hx|Hx]; destruct (succ_dec m zero x') as [Hx'|Hx'].", "+", "unfold exd.", "qsimpl use: zero,BinIntDef.Z.opp,exd_B.", "qsimpl use: zero,BinIntDef.Z.opp,exd_B.", "apply exd_B with zero x.", "qsimpl use: zero,BinIntDef.Z.opp,exd_B.", "shelve.", "+", "unfold exd.", "qsimpl use: zero,BinIntDef.Z.opp,exd_B.", "qsimpl use: zero,BinIntDef.Z.opp,exd_B.", "apply exd_B with zero x."], "tactic": "left.", "exn": "Not an inductive product.", "type": "not_inductive_product", "handled": true}, {"ctx": ["intros m x x' z.", "split.", "-", "intros H.", "unfold exd in H.", "unfold Br1.", "destruct (succ_dec m zero x) as [Hx|Hx]; destruct (succ_dec m zero x') as [Hx'|Hx'].", "+", "unfold exd.", "qsimpl.", "*", "apply exd_B with zero x.", "shelve.", "*", "shelve.", "+", "unfold exd.", "qsimpl use: zero,BinIntDef.Z.opp,exd_B.", "qsimpl use: zero,BinIntDef.Z.opp,exd_B.", "apply exd_B with zero x.", "auto.", "+", "qsimpl use: zero,BinIntDef.Z.opp,exd_B.", "+", "qsimpl use: zero,BinIntDef.Z.opp,exd_B.", "-", "intros H.", "unfold exd in H.", "destruct (succ_dec m zero x) as [Hx|Hx]; destruct (succ_dec m zero x') as [Hx'|Hx'].", "+", "unfold exd.", "qsimpl use: zero,BinIntDef.Z.opp,exd_B.", "qsimpl use: zero,BinIntDef.Z.opp,exd_B.", "apply exd_B with zero x.", "qsimpl use: zero,BinIntDef.Z.opp,exd_B.", "shelve.", "+", "unfold exd.", "qsimpl use: zero,BinIntDef.Z.opp,exd_B.", "qsimpl use: zero,BinIntDef.Z.opp,exd_B.", "apply exd_B with zero x."], "tactic": "qsimpl use: zero,auto,exd_B.", "exn": "The reference auto was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros m x x' z.", "split.", "-", "intros H.", "unfold exd in H.", "unfold Br1.", "destruct (succ_dec m zero x) as [Hx|Hx]; destruct (succ_dec m zero x') as [Hx'|Hx'].", "+", "unfold exd.", "qsimpl.", "*", "apply exd_B with zero x.", "shelve.", "*", "shelve.", "+", "unfold exd.", "qsimpl use: zero,BinIntDef.Z.opp,exd_B.", "qsimpl use: zero,BinIntDef.Z.opp,exd_B.", "apply exd_B with zero x.", "auto.", "+", "qsimpl use: zero,BinIntDef.Z.opp,exd_B.", "+", "qsimpl use: zero,BinIntDef.Z.opp,exd_B.", "-", "intros H.", "unfold exd in H.", "destruct (succ_dec m zero x) as [Hx|Hx]; destruct (succ_dec m zero x') as [Hx'|Hx'].", "+", "unfold exd.", "qsimpl use: zero,BinIntDef.Z.opp,exd_B.", "qsimpl use: zero,BinIntDef.Z.opp,exd_B.", "apply exd_B with zero x.", "qsimpl use: zero,BinIntDef.Z.opp,exd_B.", "shelve.", "+", "unfold exd.", "qsimpl use: zero,BinIntDef.Z.opp,exd_B.", "qsimpl use: zero,BinIntDef.Z.opp,exd_B.", "apply exd_B with zero x.", "qsimpl use: zero,BinIntDef.Z.opp,exd_B."], "tactic": ["rewrite H.", ""], "exn": "Cannot find an homogeneous relation to rewrite.", "type": "no_rewrite_homo", "handled": false}, {"ctx": ["intros m x x' z.", "split.", "-", "intros H.", "unfold exd in H.", "unfold Br1.", "destruct (succ_dec m zero x) as [Hx|Hx]; destruct (succ_dec m zero x') as [Hx'|Hx'].", "+", "unfold exd.", "qsimpl.", "*", "apply exd_B with zero x.", "shelve.", "*", "shelve.", "+", "unfold exd.", "qsimpl use: zero,BinIntDef.Z.opp,exd_B.", "qsimpl use: zero,BinIntDef.Z.opp,exd_B.", "apply exd_B with zero x.", "auto.", "+", "qsimpl use: zero,BinIntDef.Z.opp,exd_B.", "+", "qsimpl use: zero,BinIntDef.Z.opp,exd_B.", "-", "intros H.", "unfold exd in H.", "destruct (succ_dec m zero x) as [Hx|Hx]; destruct (succ_dec m zero x') as [Hx'|Hx'].", "+", "unfold exd.", "qsimpl use: zero,BinIntDef.Z.opp,exd_B.", "qsimpl use: zero,BinIntDef.Z.opp,exd_B.", "apply exd_B with zero x.", "qsimpl use: zero,BinIntDef.Z.opp,exd_B.", "shelve.", "+", "unfold exd.", "qsimpl use: zero,BinIntDef.Z.opp,exd_B.", "qsimpl use: zero,BinIntDef.Z.opp,exd_B.", "apply exd_B with zero x.", "qsimpl use: zero,BinIntDef.Z.opp,exd_B."], "tactic": "+", "exn": "Wrong bullet +: Current bullet + is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["intros m x x' z.", "split.", "-", "intros H.", "unfold exd in H.", "unfold Br1.", "destruct (succ_dec m zero x) as [Hx|Hx]; destruct (succ_dec m zero x') as [Hx'|Hx'].", "+", "unfold exd.", "qsimpl.", "*", "apply exd_B with zero x.", "shelve.", "*", "shelve.", "+", "unfold exd.", "qsimpl use: zero,BinIntDef.Z.opp,exd_B.", "qsimpl use: zero,BinIntDef.Z.opp,exd_B.", "apply exd_B with zero x.", "auto.", "+", "qsimpl use: zero,BinIntDef.Z.opp,exd_B.", "+", "qsimpl use: zero,BinIntDef.Z.opp,exd_B.", "-", "intros H.", "unfold exd in H.", "destruct (succ_dec m zero x) as [Hx|Hx]; destruct (succ_dec m zero x') as [Hx'|Hx'].", "+", "unfold exd.", "qsimpl use: zero,BinIntDef.Z.opp,exd_B.", "qsimpl use: zero,BinIntDef.Z.opp,exd_B.", "apply exd_B with zero x.", "qsimpl use: zero,BinIntDef.Z.opp,exd_B.", "shelve.", "+", "unfold exd.", "qsimpl use: zero,BinIntDef.Z.opp,exd_B.", "qsimpl use: zero,BinIntDef.Z.opp,exd_B.", "apply exd_B with zero x.", "qsimpl use: zero,BinIntDef.Z.opp,exd_B.", "shelve.", "+"], "tactic": "left.", "exn": "Not an inductive product.", "type": "not_inductive_product", "handled": true}, {"ctx": ["intros m x x' z.", "split.", "-", "intros H.", "unfold exd in H.", "unfold Br1.", "destruct (succ_dec m zero x) as [Hx|Hx]; destruct (succ_dec m zero x') as [Hx'|Hx'].", "+", "unfold exd.", "qsimpl.", "*", "apply exd_B with zero x.", "shelve.", "*", "shelve.", "+", "unfold exd.", "qsimpl use: zero,BinIntDef.Z.opp,exd_B.", "qsimpl use: zero,BinIntDef.Z.opp,exd_B.", "apply exd_B with zero x.", "auto.", "+", "qsimpl use: zero,BinIntDef.Z.opp,exd_B.", "+", "qsimpl use: zero,BinIntDef.Z.opp,exd_B.", "-", "intros H.", "unfold exd in H.", "destruct (succ_dec m zero x) as [Hx|Hx]; destruct (succ_dec m zero x') as [Hx'|Hx'].", "+", "unfold exd.", "qsimpl use: zero,BinIntDef.Z.opp,exd_B.", "qsimpl use: zero,BinIntDef.Z.opp,exd_B.", "apply exd_B with zero x.", "qsimpl use: zero,BinIntDef.Z.opp,exd_B.", "shelve.", "+", "unfold exd.", "qsimpl use: zero,BinIntDef.Z.opp,exd_B.", "qsimpl use: zero,BinIntDef.Z.opp,exd_B.", "apply exd_B with zero x.", "qsimpl use: zero,BinIntDef.Z.opp,exd_B.", "shelve.", "+"], "tactic": "qsimpl use: zero,auto,exd_B_1,exd_B.", "exn": "The reference auto was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros m x x' z.", "split.", "-", "intros H.", "unfold exd in H.", "unfold Br1.", "destruct (succ_dec m zero x) as [Hx|Hx]; destruct (succ_dec m zero x') as [Hx'|Hx'].", "+", "unfold exd.", "qsimpl.", "*", "apply exd_B with zero x.", "shelve.", "*", "shelve.", "+", "unfold exd.", "qsimpl use: zero,BinIntDef.Z.opp,exd_B.", "qsimpl use: zero,BinIntDef.Z.opp,exd_B.", "apply exd_B with zero x.", "auto.", "+", "qsimpl use: zero,BinIntDef.Z.opp,exd_B.", "+", "qsimpl use: zero,BinIntDef.Z.opp,exd_B.", "-", "intros H.", "unfold exd in H.", "destruct (succ_dec m zero x) as [Hx|Hx]; destruct (succ_dec m zero x') as [Hx'|Hx'].", "+", "unfold exd.", "qsimpl use: zero,BinIntDef.Z.opp,exd_B.", "qsimpl use: zero,BinIntDef.Z.opp,exd_B.", "apply exd_B with zero x.", "qsimpl use: zero,BinIntDef.Z.opp,exd_B.", "shelve.", "+", "unfold exd.", "qsimpl use: zero,BinIntDef.Z.opp,exd_B.", "qsimpl use: zero,BinIntDef.Z.opp,exd_B.", "apply exd_B with zero x.", "qsimpl use: zero,BinIntDef.Z.opp,exd_B.", "shelve.", "+", "qsimpl use: zero,BinIntDef.Z.opp,exd_B_1,exd_B.", "apply exd_B with zero x'."], "tactic": "+", "exn": "Wrong bullet +: Current bullet + is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["intros m x x' z.", "split.", "-", "intros H.", "unfold exd in H.", "unfold Br1.", "destruct (succ_dec m zero x) as [Hx|Hx]; destruct (succ_dec m zero x') as [Hx'|Hx'].", "+", "unfold exd.", "qsimpl.", "*", "apply exd_B with zero x.", "shelve.", "*", "shelve.", "+", "unfold exd.", "qsimpl use: zero,BinIntDef.Z.opp,exd_B.", "qsimpl use: zero,BinIntDef.Z.opp,exd_B.", "apply exd_B with zero x.", "auto.", "+", "qsimpl use: zero,BinIntDef.Z.opp,exd_B.", "+", "qsimpl use: zero,BinIntDef.Z.opp,exd_B.", "-", "intros H.", "unfold exd in H.", "destruct (succ_dec m zero x) as [Hx|Hx]; destruct (succ_dec m zero x') as [Hx'|Hx'].", "+", "unfold exd.", "qsimpl use: zero,BinIntDef.Z.opp,exd_B.", "qsimpl use: zero,BinIntDef.Z.opp,exd_B.", "apply exd_B with zero x.", "qsimpl use: zero,BinIntDef.Z.opp,exd_B.", "shelve.", "+", "unfold exd.", "qsimpl use: zero,BinIntDef.Z.opp,exd_B.", "qsimpl use: zero,BinIntDef.Z.opp,exd_B.", "apply exd_B with zero x.", "qsimpl use: zero,BinIntDef.Z.opp,exd_B.", "shelve.", "+", "qsimpl use: zero,BinIntDef.Z.opp,exd_B_1,exd_B.", "apply exd_B with zero x'.", "shelve.", "+"], "tactic": "right.", "exn": "Not an inductive product.", "type": "not_inductive_product", "handled": true}, {"ctx": ["intros m x x' z.", "split.", "-", "intros H.", "unfold exd in H.", "unfold Br1.", "destruct (succ_dec m zero x) as [Hx|Hx]; destruct (succ_dec m zero x') as [Hx'|Hx'].", "+", "unfold exd.", "qsimpl.", "*", "apply exd_B with zero x.", "shelve.", "*", "shelve.", "+", "unfold exd.", "qsimpl use: zero,BinIntDef.Z.opp,exd_B.", "qsimpl use: zero,BinIntDef.Z.opp,exd_B.", "apply exd_B with zero x.", "auto.", "+", "qsimpl use: zero,BinIntDef.Z.opp,exd_B.", "+", "qsimpl use: zero,BinIntDef.Z.opp,exd_B.", "-", "intros H.", "unfold exd in H.", "destruct (succ_dec m zero x) as [Hx|Hx]; destruct (succ_dec m zero x') as [Hx'|Hx'].", "+", "unfold exd.", "qsimpl use: zero,BinIntDef.Z.opp,exd_B.", "qsimpl use: zero,BinIntDef.Z.opp,exd_B.", "apply exd_B with zero x.", "qsimpl use: zero,BinIntDef.Z.opp,exd_B.", "shelve.", "+", "unfold exd.", "qsimpl use: zero,BinIntDef.Z.opp,exd_B.", "qsimpl use: zero,BinIntDef.Z.opp,exd_B.", "apply exd_B with zero x.", "qsimpl use: zero,BinIntDef.Z.opp,exd_B.", "shelve.", "+", "qsimpl use: zero,BinIntDef.Z.opp,exd_B_1,exd_B.", "apply exd_B with zero x'.", "shelve.", "+"], "tactic": "qsimpl use: zero,auto,exd_B_1,exd_B.", "exn": "The reference auto was not found in the current environment.", "type": "ref_not_found", "handled": true}]}, "chat": [], "original": "intros m x x' z. split. - intros H. unfold exd in H. unfold Br1. destruct (succ_dec m zero x) as [Hx|Hx]; destruct (succ_dec m zero x') as [Hx'|Hx']. + unfold exd. destruct H as [H|H]. * right. apply exd_B with zero x. auto. * left. rewrite H. apply exd_B with zero x'. auto. + unfold exd. destruct H as [H|H]. * right. apply exd_B with zero x. auto. * left. rewrite H. apply exd_B_1 with zero x'. auto. + left. apply exd_B with zero x'. * unfold exd in H. destruct H as [H|H]. ++ subst. contradiction. ++ auto. + right. apply exd_B_1 with zero x'. * unfold exd in H. destruct H as [H|H]. ++ subst. auto. ++ contradiction. - intros H. unfold exd in H. unfold Br1. destruct (succ_dec m zero x) as [Hx|Hx]; destruct (succ_dec m zero x') as [Hx'|Hx']. + unfold exd. destruct H as [H|H]. * right. apply exd_B with zero x. auto. * left. rewrite H. apply exd_B with zero x'. auto. + unfold exd. destruct H as [H|H]. * right. apply exd_B with zero x. auto. * left. rewrite H. apply exd_B_1 with zero x'. auto. + left. apply exd_B with zero x'. * auto. + right. apply exd_B_1 with zero x'. * auto.", "succ": false}]