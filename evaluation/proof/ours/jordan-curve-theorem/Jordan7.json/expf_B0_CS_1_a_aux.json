[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": ["intros m x z t Hmap Hsucc Hexd1 Hexd2 x0 xb0 x_1 Hexpf Hbetweens."], "tactic": "assert (H1: exd m x) by apply (succ_exd m zero x Hsucc).", "exn": "In environment m : fmap x, z, t : dart Hmap : inv_hmap m Hsucc : succ m zero x Hexd1 : exd m z Hexd2 : exd m t x0 := cA m zero x : dart xb0 := bottom m zero x : dart x_1 := cA_1 m one x : dart Hexpf : expf m x0 xb0 Hbetweens : betweenf m x_1 z xb0 /\\\\ betweenf m x_1 t xb0 The term \"Hsucc\" has type \"succ m zero x\" while it is expected to have type \"inv_hmap m\".", "type": "wrong_type", "handled": true}, {"ctx": ["intros m x z t Hmap Hsucc Hexd1 Hexd2 x0 xb0 x_1 Hexpf Hbetweens.", "qsimpl use: zero,succ_exd,exd."], "tactic": "assert (H2: exd m (cA m zero x)) by apply (succ_exd m zero x Hsucc).", "exn": "In environment H : forall (m : fmap) (k : dim) (z : dart), inv_hmap m -> succ m k z -> exd m z d : dim m : fmap x, z, t : dart Hmap : inv_hmap m Hsucc : succ m zero x Hexd1 : exd m z Hexd2 : exd m t X : Prop H0 : betweenf m (cA_1 m one x) z (bottom m zero x) H1 : betweenf m (cA_1 m one x) t (bottom m zero x) H4 : exd m (cA m zero x) x0 : nat H3 : Iter (MF.f m) x0 (cA m zero x) = bottom m zero x The term \"Hsucc\" has type \"succ m zero x\" while it is expected to have type \"inv_hmap m\".", "type": "wrong_type", "handled": true}]}, "chat": [], "original": "intros m x z t Hmap Hsucc Hexd1 Hexd2 x0 xb0 x_1 Hexpf Hbetweens. assert (H1: exd m x) by apply (succ_exd m zero x Hsucc). assert (H2: exd m (cA m zero x)) by apply (succ_exd m zero x Hsucc). unfold cA, cA_1, bottom in *. rewrite Hsucc in *; clear Hsucc. unfold expf, inv_hmap, expof, MA0.MFcA in *. assert (H1: inv_hmap m) by apply (proj1 Hmap). assert (H2: inv_hmap (B m zero x)). simpl in Hmap; decompose [and] Hmap; simpl; split. auto. apply (exd_B m zero x x H1). intros; intro; apply H; auto. rewrite (cA_B m zero x H1). generalize Hexpf; clear Hexpf. unfold expf in *. intros [Hma Hexf]. split. apply (expf_B0_CS_1_a_prel2 m x z H1 Hma Hexf Hbetweens). apply (expf_B0_CS_1_a_prel2 m x t H1 Hma Hexf).", "succ": false}]