[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": ["intros m0 m1 a H.", "assert (H0: map_or m0 m1 = m0 \\/ map_or m0 m1 = m1).", "destruct m0, m1; simpl; try (left; reflexivity); try (right; reflexivity)."], "tactic": "destruct (N.eq_dec a a0); try (left; reflexivity); right; reflexivity.", "exn": "In environment a0 : ad b : bool a1 : ad b0 : bool a : ad H : MapGet bool (map_or (M1 bool a0 b) (M1 bool a1 b0)) a = Some true e : a = a0 Unable to unify \"M1 bool a1 b0\" with \"if (a0 =? a1)%N then M1 bool a0 (b || b0) else M0 bool\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros m0 m1 a H.", "assert (H0: map_or m0 m1 = m0 \\/ map_or m0 m1 = m1).", "destruct m0, m1; simpl; try (left; reflexivity); try (right; reflexivity).", "qsimpl use: N."], "tactic": "destruct H0 as [H0 | H0]; intros.", "exn": "The reference H0 was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros m0 m1 a H.", "assert (H0: map_or m0 m1 = m0 \\/ map_or m0 m1 = m1).", "destruct m0, m1; simpl; try (left; reflexivity); try (right; reflexivity).", "qsimpl use: N.", "destruct ad_in_list as [ad_in_list | ad_in_list]; intros.", "-", "left."], "tactic": "apply map_or_mapget_true_l with (a:=a) in H0; auto.", "exn": "No such goal. Focus next goal with bullet -.", "type": "next_goal", "handled": true}, {"ctx": ["intros m0 m1 a H.", "assert (H0: map_or m0 m1 = m0 \\/ map_or m0 m1 = m1).", "destruct m0, m1; simpl; try (left; reflexivity); try (right; reflexivity).", "qsimpl use: N.", "destruct ad_in_list as [ad_in_list | ad_in_list]; intros.", "-", "left.", "-", "right."], "tactic": "apply map_or_mapget_true_r with (a:=a) in H0; auto.", "exn": "No such hypothesis: H0", "type": "no_hypos", "handled": true}]}, "chat": [], "original": "intros m0 m1 a H. assert (H0: map_or m0 m1 = m0 \\/ map_or m0 m1 = m1). { destruct m0, m1; simpl; try (left; reflexivity); try (right; reflexivity). destruct (N.eq_dec a a0); try (left; reflexivity); right; reflexivity. } destruct H0 as [H0 | H0]; intros. - left. apply map_or_mapget_true_l with (a:=a) in H0; auto. - right. apply map_or_mapget_true_r with (a:=a) in H0; auto.", "succ": false}]