[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": ["intros d m0 m1 m2 m3 H1 H2.", "unfold lemd, ensemble_base, lem in *.", "destruct H1 as [H11 [H12 H13]].", "destruct H2 as [H21 [H22 H23]].", "split; [|split].", "-"], "tactic": "apply map_or_inc_ld with (m:=m2); auto.", "exn": "In environment d : preDTA m0, m1, m2, m3 : Map bool H11 : domain_equal state bool d m0 H12 : domain_equal state bool d m1 H13 : (fix lem (m0 m1 : Map bool) {struct m1} : Prop := match m0 with | @M0 _ => match m1 with | @M0 _ => True | _ => False end | @M1 _ a b => match m1 with | @M1 _ a' b' => if (a =? a')%N then leb b b' else False | _ => False end | @M2 _ a b => match m1 with | @M2 _ c d => lem a c /\\\\ lem b d | _ => False end end) m0 m1 H21 : domain_equal state bool d m2 H22 : domain_equal state bool d m3 H23 : (fix lem (m0 m1 : Map bool) {struct m1} : Prop := match m0 with | @M0 _ => match m1 with | @M0 _ => True | _ => False end | @M1 _ a b => match m1 with | @M1 _ a' b' => if (a =? a')%N then leb b b' else False | _ => False end | @M2 _ a b => match m1 with | @M2 _ c d => lem a c /\\\\ lem b d | _ => False end end) m2 m3 Unable to unify \"ensemble_base state ?M1879 (map_or ?M1881 m2) /\\\\ ensemble_base state ?M1879 (map_or ?M1882 m2) /\\\\ lem (map_or ?M1881 m2) (map_or ?M1882 m2)\" with \"(fix domain_equal (A B : Set) (m0 : Map A) (m1 : Map B) {struct m1} : Prop := match m0 with | @M0 _ => match m1 with | @M0 _ => True | _ => False end | @M1 _ a _ => match m1 with | @M1 _ b _ => a = b | _ => False end | @M2 _ a b => match m1 with | @M2 _ c d => domain_equal A B a c /\\\\ domain_equal A B b d | _ => False end end) state bool d (map_or m0 m2)\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros d m0 m1 m2 m3 H1 H2.", "unfold lemd, ensemble_base, lem in *.", "destruct H1 as [H11 [H12 H13]].", "destruct H2 as [H21 [H22 H23]].", "split; [|split].", "-", "qsimpl use: map_or_inc_ld."], "tactic": "-", "exn": "Wrong bullet -: Current bullet - is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["intros d m0 m1 m2 m3 H1 H2.", "unfold lemd, ensemble_base, lem in *.", "destruct H1 as [H11 [H12 H13]].", "destruct H2 as [H21 [H22 H23]].", "split; [|split].", "-", "qsimpl use: map_or_inc_ld.", "shelve.", "-"], "tactic": "apply map_or_inc_rd with (m:=m3); auto.", "exn": "In environment d : preDTA m0, m1, m2, m3 : Map bool H11 : domain_equal state bool d m0 H12 : domain_equal state bool d m1 H13 : (fix lem (m0 m1 : Map bool) {struct m1} : Prop := match m0 with | @M0 _ => match m1 with | @M0 _ => True | _ => False end | @M1 _ a b => match m1 with | @M1 _ a' b' => if (a =? a')%N then leb b b' else False | _ => False end | @M2 _ a b => match m1 with | @M2 _ c d => lem a c /\\\\ lem b d | _ => False end end) m0 m1 H21 : domain_equal state bool d m2 H22 : domain_equal state bool d m3 H23 : (fix lem (m0 m1 : Map bool) {struct m1} : Prop := match m0 with | @M0 _ => match m1 with | @M0 _ => True | _ => False end | @M1 _ a b => match m1 with | @M1 _ a' b' => if (a =? a')%N then leb b b' else False | _ => False end | @M2 _ a b => match m1 with | @M2 _ c d => lem a c /\\\\ lem b d | _ => False end end) m2 m3 Unable to unify \"ensemble_base state ?M2095 (map_or m3 ?M2097) /\\\\ ensemble_base state ?M2095 (map_or m3 ?M2098) /\\\\ lem (map_or m3 ?M2097) (map_or m3 ?M2098)\" with \"(fix domain_equal (A B : Set) (m0 : Map A) (m1 : Map B) {struct m1} : Prop := match m0 with | @M0 _ => match m1 with | @M0 _ => True | _ => False end | @M1 _ a _ => match m1 with | @M1 _ b _ => a = b | _ => False end | @M2 _ a b => match m1 with | @M2 _ c d => domain_equal A B a c /\\\\ domain_equal A B b d | _ => False end end) state bool d (map_or m1 m3)\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros d m0 m1 m2 m3 H1 H2.", "unfold lemd, ensemble_base, lem in *.", "destruct H1 as [H11 [H12 H13]].", "destruct H2 as [H21 [H22 H23]].", "split; [|split].", "-", "qsimpl use: map_or_inc_ld.", "shelve.", "-", "qsimpl use: map_or_inc_rd,map_or_inc_ld."], "tactic": "-", "exn": "Wrong bullet -: Current bullet - is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["intros d m0 m1 m2 m3 H1 H2.", "unfold lemd, ensemble_base, lem in *.", "destruct H1 as [H11 [H12 H13]].", "destruct H2 as [H21 [H22 H23]].", "split; [|split].", "-", "qsimpl use: map_or_inc_ld.", "shelve.", "-", "qsimpl use: map_or_inc_rd,map_or_inc_ld.", "shelve.", "-"], "tactic": "apply lemd_transitive with (m1:=m1); auto.", "exn": "In environment d : preDTA m0, m1, m2, m3 : Map bool H11 : domain_equal state bool d m0 H12 : domain_equal state bool d m1 H13 : (fix lem (m0 m1 : Map bool) {struct m1} : Prop := match m0 with | @M0 _ => match m1 with | @M0 _ => True | _ => False end | @M1 _ a b => match m1 with | @M1 _ a' b' => if (a =? a')%N then leb b b' else False | _ => False end | @M2 _ a b => match m1 with | @M2 _ c d => lem a c /\\\\ lem b d | _ => False end end) m0 m1 H21 : domain_equal state bool d m2 H22 : domain_equal state bool d m3 H23 : (fix lem (m0 m1 : Map bool) {struct m1} : Prop := match m0 with | @M0 _ => match m1 with | @M0 _ => True | _ => False end | @M1 _ a b => match m1 with | @M1 _ a' b' => if (a =? a')%N then leb b b' else False | _ => False end | @M2 _ a b => match m1 with | @M2 _ c d => lem a c /\\\\ lem b d | _ => False end end) m2 m3 Unable to unify \"ensemble_base state ?M2407 ?M2408 /\\\\ ensemble_base state ?M2407 ?M2410 /\\\\ lem ?M2408 ?M2410\" with \"(fix lem (m0 m1 : Map bool) {struct m1} : Prop := match m0 with | @M0 _ => match m1 with | @M0 _ => True | _ => False end | @M1 _ a b => match m1 with | @M1 _ a' b' => if (a =? a')%N then leb b b' else False | _ => False end | @M2 _ a b => match m1 with | @M2 _ c d => lem a c /\\\\ lem b d | _ => False end end) (map_or m0 m2) (map_or m1 m3)\".", "type": "cannot_unify", "handled": true}]}, "chat": [], "original": "intros d m0 m1 m2 m3 H1 H2. unfold lemd, ensemble_base, lem in *. destruct H1 as [H11 [H12 H13]]. destruct H2 as [H21 [H22 H23]]. split; [|split]. - apply map_or_inc_ld with (m:=m2); auto. - apply map_or_inc_rd with (m:=m3); auto. - apply lemd_transitive with (m1:=m1); auto.", "succ": false}]