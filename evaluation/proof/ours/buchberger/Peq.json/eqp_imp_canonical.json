[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": ["intros p q H_eqP H_canon_p.", "induction H_eqP.", "-"], "tactic": "intros H_canon_q.", "exn": "No product even after head-reduction.", "type": "no_product", "handled": true}, {"ctx": ["intros p q H_eqP H_canon_p.", "induction H_eqP.", "-", "inversion H_canon_p."], "tactic": "inversion H_canon_q; subst.", "exn": "No such hypothesis: H_canon_q", "type": "no_hypos", "handled": true}, {"ctx": ["intros p q H_eqP H_canon_p.", "induction H_eqP.", "-", "inversion H_canon_p.", "qsimpl."], "tactic": "constructor.", "exn": "No such goal. Focus next goal with bullet -.", "type": "next_goal", "handled": true}, {"ctx": ["intros p q H_eqP H_canon_p.", "induction H_eqP.", "-", "inversion H_canon_p.", "qsimpl.", "-"], "tactic": "intros H_canon_q.", "exn": "No product even after head-reduction.", "type": "no_product", "handled": true}, {"ctx": ["intros p q H_eqP H_canon_p.", "induction H_eqP.", "-", "inversion H_canon_p.", "qsimpl.", "-", "inversion H_canon_p."], "tactic": "inversion H_canon_q; subst.", "exn": "No such hypothesis: H_canon_q", "type": "no_hypos", "handled": true}, {"ctx": ["intros p q H_eqP H_canon_p.", "induction H_eqP.", "-", "inversion H_canon_p.", "qsimpl.", "-", "inversion H_canon_p.", "qsimpl."], "tactic": "constructor.", "exn": "In environment A : Set A0, A1 : A eqA : A -> A -> Prop plusA : A -> A -> A invA : A -> A minusA, multA : A -> A -> A divA : A -> forall b : A, (eqA b A0 -> False) -> A eqA_dec : forall a b : A, {eqA a b} + {eqA a b -> False} n : nat ltM : mon n -> mon n -> Prop ltM_dec : forall a b : mon n, {ltM a b} + {ltM b a} + {a = b} ma, mb : Term A n p, q : list (Term A n) H : eqTerm eqA (n:=n) ma mb H_eqP : eqP p q IHH_eqP : canonical A0 eqA ltM p -> canonical A0 eqA ltM q H0 : olist (A:=A) ltM (pX (A:=A) (n:=n) ma p) H2 : nZterm A0 eqA (n:=n) p H3 : zeroP A0 eqA (n:=n) ma -> False M1_min : forall x : mon n, ltM x (zero_mon n) -> False ltM_nonrefl : forall x : mon n, ltM x x -> False ltM_trans : transitive (mon n) ltM ltM_wf : well_founded ltM ltM_plusr : forall x y z : mon n, ltM x y -> ltM (mult_mon n x z) (mult_mon n y z) ltM_plusl : forall x y z : mon n, ltM x y -> ltM (mult_mon n z x) (mult_mon n z y) A1_diff_A0 : eqA A1 A0 -> False eqA_ref : reflexive A eqA eqA_sym : symmetric A eqA eqA_trans : transitive A eqA plusA_assoc : forall a b c : A, eqA (plusA a (plusA b c)) (plusA (plusA a b) c) plusA_com : forall a b : A, eqA (plusA a b) (plusA b a) plusA_eqA_comp : forall a b c d : A, eqA a c -> eqA b d -> eqA (plusA a b) (plusA c d) plusA_A0 : forall a : A, eqA a (plusA a A0) invA_plusA : forall a : A, eqA A0 (plusA a (invA a)) invA_eqA_comp : forall a b : A, eqA a b -> eqA (invA a) (invA b) minusA_def : forall a b : A, eqA (minusA a b) (plusA a (invA b)) multA_eqA_comp : forall a b c d : A, eqA a c -> eqA b d -> eqA (multA a b) (multA c d) multA_assoc : forall a b c : A, eqA (multA a (multA b c)) (multA (multA a b) c) multA_com : forall a b : A, eqA (multA a b) (multA b a) multA_dist_l : forall a b c : A, eqA (plusA (multA c a) (multA c b)) (multA c (plusA a b)) multA_A0_l : forall a : A, eqA (multA A0 a) A0 multA_A1_l : forall a : A, eqA (multA A1 a) a divA_rew : forall (a b : A) (nZ1 nZ2 : eqA b A0 -> False), divA a b nZ1 = divA a b nZ2 divA_is_multA : forall (a b : A) (nZb : eqA b A0 -> False), eqA a (multA (divA a b nZb) b) divA_eqA_comp : forall (a b c d : A) (nZb : eqA b A0 -> False) (nZd : eqA d A0 -> False), eqA a c -> eqA b d -> eqA (divA a b nZb) (divA c d nZd) divA_multA_comp_r : forall (a b c : A) (nZc : eqA c A0 -> False), eqA (divA (multA a b) c nZc) (multA (divA a c nZc) b) divA_invA_r : forall (a b : A) (nZb : eqA b A0 -> False) (nZib : eqA (invA b) A0 -> False), eqA (divA a (invA b) nZib) (invA (divA a b nZb)) Unable to unify \"Relation_Operators_compat.Desc ?M11931 ?M11932 ((?M11935 ++ ?M11934 :: nil) ++ ?M11933 :: nil)\" with \"Relation_Operators_compat.Desc (mon n) ltM (fP A n (pX (A:=A) (n:=n) mb q))\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros p q H_eqP H_canon_p.", "induction H_eqP.", "-", "inversion H_canon_p.", "qsimpl.", "-", "inversion H_canon_p.", "qsimpl.", "+"], "tactic": "eapply eqTerm_imp_eqT.", "exn": "The reference eqTerm_imp_eqT was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros p q H_eqP H_canon_p.", "induction H_eqP.", "-", "inversion H_canon_p.", "qsimpl.", "-", "inversion H_canon_p.", "qsimpl.", "+", "eapply olist_imp_olist."], "tactic": "apply eqTerm_plusTerm_comp.", "exn": "In environment A : Set A0, A1 : A eqA : A -> A -> Prop plusA : A -> A -> A invA : A -> A minusA, multA : A -> A -> A divA : A -> forall b : A, (eqA b A0 -> False) -> A eqA_dec : forall a b : A, {eqA a b} + {eqA a b -> False} n : nat ltM : mon n -> mon n -> Prop ltM_dec : forall a b : mon n, {ltM a b} + {ltM b a} + {a = b} ma, mb : Term A n p, q : list (Term A n) H : eqTerm eqA (n:=n) ma mb H_eqP : eqP p q IHH_eqP : canonical A0 eqA ltM p -> canonical A0 eqA ltM q H0 : olist (A:=A) ltM (pX (A:=A) (n:=n) ma p) H2 : nZterm A0 eqA (n:=n) p H3 : zeroP A0 eqA (n:=n) ma -> False M1_min : forall x : mon n, ltM x (zero_mon n) -> False ltM_nonrefl : forall x : mon n, ltM x x -> False ltM_trans : transitive (mon n) ltM ltM_wf : well_founded ltM ltM_plusr : forall x y z : mon n, ltM x y -> ltM (mult_mon n x z) (mult_mon n y z) ltM_plusl : forall x y z : mon n, ltM x y -> ltM (mult_mon n z x) (mult_mon n z y) A1_diff_A0 : eqA A1 A0 -> False eqA_ref : reflexive A eqA eqA_sym : symmetric A eqA eqA_trans : transitive A eqA plusA_assoc : forall a b c : A, eqA (plusA a (plusA b c)) (plusA (plusA a b) c) plusA_com : forall a b : A, eqA (plusA a b) (plusA b a) plusA_eqA_comp : forall a b c d : A, eqA a c -> eqA b d -> eqA (plusA a b) (plusA c d) plusA_A0 : forall a : A, eqA a (plusA a A0) invA_plusA : forall a : A, eqA A0 (plusA a (invA a)) invA_eqA_comp : forall a b : A, eqA a b -> eqA (invA a) (invA b) minusA_def : forall a b : A, eqA (minusA a b) (plusA a (invA b)) multA_eqA_comp : forall a b c d : A, eqA a c -> eqA b d -> eqA (multA a b) (multA c d) multA_assoc : forall a b c : A, eqA (multA a (multA b c)) (multA (multA a b) c) multA_com : forall a b : A, eqA (multA a b) (multA b a) multA_dist_l : forall a b c : A, eqA (plusA (multA c a) (multA c b)) (multA c (plusA a b)) multA_A0_l : forall a : A, eqA (multA A0 a) A0 multA_A1_l : forall a : A, eqA (multA A1 a) a divA_rew : forall (a b : A) (nZ1 nZ2 : eqA b A0 -> False), divA a b nZ1 = divA a b nZ2 divA_is_multA : forall (a b : A) (nZb : eqA b A0 -> False), eqA a (multA (divA a b nZb) b) divA_eqA_comp : forall (a b c d : A) (nZb : eqA b A0 -> False) (nZd : eqA d A0 -> False), eqA a c -> eqA b d -> eqA (divA a b nZb) (divA c d nZd) divA_multA_comp_r : forall (a b c : A) (nZc : eqA c A0 -> False), eqA (divA (multA a b) c nZc) (multA (divA a c nZc) b) divA_invA_r : forall (a b : A) (nZb : eqA b A0 -> False) (nZib : eqA (invA b) A0 -> False), eqA (divA a (invA b) nZib) (invA (divA a b nZb)) Unable to unify \"(let (a, a') := plusTerm ?M11938 ?M11945 ?M11947 in fun H'2 : Term ?M11934 ?M11944 => let (b, b') := H'2 in ?M11937 a b /\\\\ a' = b') (plusTerm ?M11938 ?M11946 ?M11948)\" with \"OrderStructure (mon n) (zero_mon n) ltM (mult_mon n)\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros p q H_eqP H_canon_p.", "induction H_eqP.", "-", "inversion H_canon_p.", "qsimpl.", "-", "inversion H_canon_p.", "qsimpl.", "+", "eapply olist_imp_olist.", "qsimpl use: eqTerm_plusTerm_comp."], "tactic": "apply cs.", "exn": "The reference cs was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros p q H_eqP H_canon_p.", "induction H_eqP.", "-", "inversion H_canon_p.", "qsimpl.", "-", "inversion H_canon_p.", "qsimpl.", "+", "eapply olist_imp_olist.", "qsimpl use: eqTerm_plusTerm_comp."], "tactic": "apply eqTerm_invTerm_comp.", "exn": "In environment A : Set A0, A1 : A eqA : A -> A -> Prop plusA : A -> A -> A invA : A -> A minusA, multA : A -> A -> A divA : A -> forall b : A, (eqA b A0 -> False) -> A eqA_dec : forall a b : A, {eqA a b} + {eqA a b -> False} n : nat ltM : mon n -> mon n -> Prop ltM_dec : forall a b : mon n, {ltM a b} + {ltM b a} + {a = b} ma, mb : Term A n p, q : list (Term A n) H : eqTerm eqA (n:=n) ma mb H_eqP : eqP p q IHH_eqP : canonical A0 eqA ltM p -> canonical A0 eqA ltM q H0 : olist (A:=A) ltM (pX (A:=A) (n:=n) ma p) H2 : nZterm A0 eqA (n:=n) p H3 : zeroP A0 eqA (n:=n) ma -> False M1_min : forall x : mon n, ltM x (zero_mon n) -> False ltM_nonrefl : forall x : mon n, ltM x x -> False ltM_trans : transitive (mon n) ltM ltM_wf : well_founded ltM ltM_plusr : forall x y z : mon n, ltM x y -> ltM (mult_mon n x z) (mult_mon n y z) ltM_plusl : forall x y z : mon n, ltM x y -> ltM (mult_mon n z x) (mult_mon n z y) A1_diff_A0 : eqA A1 A0 -> False eqA_ref : reflexive A eqA eqA_sym : symmetric A eqA eqA_trans : transitive A eqA plusA_assoc : forall a b c : A, eqA (plusA a (plusA b c)) (plusA (plusA a b) c) plusA_com : forall a b : A, eqA (plusA a b) (plusA b a) plusA_eqA_comp : forall a b c d : A, eqA a c -> eqA b d -> eqA (plusA a b) (plusA c d) plusA_A0 : forall a : A, eqA a (plusA a A0) invA_plusA : forall a : A, eqA A0 (plusA a (invA a)) invA_eqA_comp : forall a b : A, eqA a b -> eqA (invA a) (invA b) minusA_def : forall a b : A, eqA (minusA a b) (plusA a (invA b)) multA_eqA_comp : forall a b c d : A, eqA a c -> eqA b d -> eqA (multA a b) (multA c d) multA_assoc : forall a b c : A, eqA (multA a (multA b c)) (multA (multA a b) c) multA_com : forall a b : A, eqA (multA a b) (multA b a) multA_dist_l : forall a b c : A, eqA (plusA (multA c a) (multA c b)) (multA c (plusA a b)) multA_A0_l : forall a : A, eqA (multA A0 a) A0 multA_A1_l : forall a : A, eqA (multA A1 a) a divA_rew : forall (a b : A) (nZ1 nZ2 : eqA b A0 -> False), divA a b nZ1 = divA a b nZ2 divA_is_multA : forall (a b : A) (nZb : eqA b A0 -> False), eqA a (multA (divA a b nZb) b) divA_eqA_comp : forall (a b c d : A) (nZb : eqA b A0 -> False) (nZd : eqA d A0 -> False), eqA a c -> eqA b d -> eqA (divA a b nZb) (divA c d nZd) divA_multA_comp_r : forall (a b c : A) (nZc : eqA c A0 -> False), eqA (divA (multA a b) c nZc) (multA (divA a c nZc) b) divA_invA_r : forall (a b : A) (nZb : eqA b A0 -> False) (nZib : eqA (invA b) A0 -> False), eqA (divA a (invA b) nZib) (invA (divA a b nZb)) Unable to unify \"(let (a, a') := invTerm ?M14312 ?M14318 in fun H'2 : Term ?M14307 ?M14317 => let (b, b') := H'2 in ?M14310 a b /\\\\ a' = b') (invTerm ?M14312 ?M14319)\" with \"Relation_Operators_compat.Desc (mon n) ltM (fP A n (pX (A:=A) (n:=n) mb (pX (A:=A) (n:=n) ?b q)))\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros p q H_eqP H_canon_p.", "induction H_eqP.", "-", "inversion H_canon_p.", "qsimpl.", "-", "inversion H_canon_p.", "qsimpl.", "+", "eapply olist_imp_olist.", "qsimpl use: eqTerm_plusTerm_comp.", "qsimpl use: eqTerm_invTerm_comp,eqTerm_plusTerm_comp."], "tactic": "apply cs.", "exn": "The reference cs was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros p q H_eqP H_canon_p.", "induction H_eqP.", "-", "inversion H_canon_p.", "qsimpl.", "-", "inversion H_canon_p.", "qsimpl.", "+", "eapply olist_imp_olist.", "qsimpl use: eqTerm_plusTerm_comp.", "qsimpl use: eqTerm_invTerm_comp,eqTerm_plusTerm_comp."], "tactic": "apply eqTerm_multTerm_comp.", "exn": "In environment H4 : forall (A : Set) (A0 A1 : A) (eqA : A -> A -> Prop) (plusA : A -> A -> A) (invA : A -> A) (minusA multA : A -> A -> A) (divA : A -> forall b : A, (eqA b A0 -> False) -> A), CoefStructure A A0 A1 eqA plusA invA minusA multA divA -> forall (n : nat) (a b c d : Term A n), eqT (A:=A) (n:=n) a c -> eqT (A:=A) (n:=n) b d -> eqTerm eqA (n:=n) a b -> eqTerm eqA (n:=n) c d -> eqTerm eqA (n:=n) (plusTerm plusA (n:=n) a c) (plusTerm plusA (n:=n) b d) H1 : forall (A : Set) (A0 A1 : A) (eqA : A -> A -> Prop) (plusA : A -> A -> A) (invA : A -> A) (minusA multA : A -> A -> A) (divA : A -> forall b : A, (eqA b A0 -> False) -> A), CoefStructure A A0 A1 eqA plusA invA minusA multA divA -> forall (n : nat) (a b : Term A n), eqTerm eqA (n:=n) a b -> eqTerm eqA (n:=n) (invTerm invA (n:=n) a) (invTerm invA (n:=n) b) A : Set A0, A1 : A eqA : A -> A -> Prop plusA : A -> A -> A invA : A -> A minusA, multA : A -> A -> A divA : A -> forall b : A, (eqA b A0 -> False) -> A eqA_dec : forall a b : A, {eqA a b} + {eqA a b -> False} n : nat ltM : mon n -> mon n -> Prop ltM_dec : forall a b : mon n, {ltM a b} + {ltM b a} + {a = b} ma, mb : Term A n p, q : list (Term A n) H : eqTerm eqA (n:=n) ma mb H_eqP : eqP p q IHH_eqP : canonical A0 eqA ltM p -> canonical A0 eqA ltM q H0 : olist (A:=A) ltM (pX (A:=A) (n:=n) ma p) H2 : nZterm A0 eqA (n:=n) p H3 : zeroP A0 eqA (n:=n) ma -> False M1_min : forall x : mon n, ltM x (zero_mon n) -> False ltM_nonrefl : forall x : mon n, ltM x x -> False ltM_trans : transitive (mon n) ltM ltM_wf : well_founded ltM ltM_plusr : forall x y z : mon n, ltM x y -> ltM (mult_mon n x z) (mult_mon n y z) ltM_plusl : forall x y z : mon n, ltM x y -> ltM (mult_mon n z x) (mult_mon n z y) A1_diff_A0 : eqA A1 A0 -> False eqA_ref : reflexive A eqA eqA_sym : symmetric A eqA eqA_trans : transitive A eqA plusA_assoc : forall a b c : A, eqA (plusA a (plusA b c)) (plusA (plusA a b) c) plusA_com : forall a b : A, eqA (plusA a b) (plusA b a) plusA_eqA_comp : forall a b c d : A, eqA a c -> eqA b d -> eqA (plusA a b) (plusA c d) plusA_A0 : forall a : A, eqA a (plusA a A0) invA_plusA : forall a : A, eqA A0 (plusA a (invA a)) invA_eqA_comp : forall a b : A, eqA a b -> eqA (invA a) (invA b) minusA_def : forall a b : A, eqA (minusA a b) (plusA a (invA b)) multA_eqA_comp : forall a b c d : A, eqA a c -> eqA b d -> eqA (multA a b) (multA c d) multA_assoc : forall a b c : A, eqA (multA a (multA b c)) (multA (multA a b) c) multA_com : forall a b : A, eqA (multA a b) (multA b a) multA_dist_l : forall a b c : A, eqA (plusA (multA c a) (multA c b)) (multA c (plusA a b)) multA_A0_l : forall a : A, eqA (multA A0 a) A0 multA_A1_l : forall a : A, eqA (multA A1 a) a divA_rew : forall (a b : A) (nZ1 nZ2 : eqA b A0 -> False), divA a b nZ1 = divA a b nZ2 divA_is_multA : forall (a b : A) (nZb : eqA b A0 -> False), eqA a (multA (divA a b nZb) b) divA_eqA_comp : forall (a b c d : A) (nZb : eqA b A0 -> False) (nZd : eqA d A0 -> False), eqA a c -> eqA b d -> eqA (divA a b nZb) (divA c d nZd) divA_multA_comp_r : forall (a b c : A) (nZc : eqA c A0 -> False), eqA (divA (multA a b) c nZc) (multA (divA a c nZc) b) divA_invA_r : forall (a b : A) (nZb : eqA b A0 -> False) (nZib : eqA (invA b) A0 -> False), eqA (divA a (invA b) nZib) (invA (divA a b nZb)) Unable to unify \"(let (a, a') := multTerm ?M16906 ?M16910 ?M16912 in fun H'2 : Term ?M16899 ?M16909 => let (b, b') := H'2 in ?M16902 a b /\\\\ a' = b') (multTerm ?M16906 ?M16911 ?M16913)\" with \"Relation_Operators_compat.Desc (mon n) ltM (fP A n (pX (A:=A) (n:=n) mb (pX (A:=A) (n:=n) ?b q)))\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros p q H_eqP H_canon_p.", "induction H_eqP.", "-", "inversion H_canon_p.", "qsimpl.", "-", "inversion H_canon_p.", "qsimpl.", "+", "eapply olist_imp_olist.", "qsimpl use: eqTerm_plusTerm_comp.", "qsimpl use: eqTerm_invTerm_comp,eqTerm_plusTerm_comp.", "qsimpl use: eqTerm_invTerm_comp,eqTerm_plusTerm_comp,eqTerm_multTerm_comp."], "tactic": "apply cs.", "exn": "The reference cs was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros p q H_eqP H_canon_p.", "induction H_eqP.", "-", "inversion H_canon_p.", "qsimpl.", "-", "inversion H_canon_p.", "qsimpl.", "+", "eapply olist_imp_olist.", "qsimpl use: eqTerm_plusTerm_comp.", "qsimpl use: eqTerm_invTerm_comp,eqTerm_plusTerm_comp.", "qsimpl use: eqTerm_invTerm_comp,eqTerm_plusTerm_comp,eqTerm_multTerm_comp."], "tactic": "apply IHH_eqP.", "exn": "In environment H7 : forall (A : Set) (A0 A1 : A) (eqA : A -> A -> Prop) (plusA : A -> A -> A) (invA : A -> A) (minusA multA : A -> A -> A) (divA : A -> forall b : A, (eqA b A0 -> False) -> A), CoefStructure A A0 A1 eqA plusA invA minusA multA divA -> forall (n : nat) (a b c d : Term A n), eqTerm eqA (n:=n) a b -> eqTerm eqA (n:=n) c d -> eqTerm eqA (n:=n) (multTerm multA (n:=n) a c) (multTerm multA (n:=n) b d) H6 : forall (A : Set) (A0 A1 : A) (eqA : A -> A -> Prop) (plusA : A -> A -> A) (invA : A -> A) (minusA multA : A -> A -> A) (divA : A -> forall b : A, (eqA b A0 -> False) -> A), CoefStructure A A0 A1 eqA plusA invA minusA multA divA -> forall (n : nat) (a b c d : Term A n), eqT (A:=A) (n:=n) a c -> eqT (A:=A) (n:=n) b d -> eqTerm eqA (n:=n) a b -> eqTerm eqA (n:=n) c d -> eqTerm eqA (n:=n) (plusTerm plusA (n:=n) a c) (plusTerm plusA (n:=n) b d) H5 : forall (A : Set) (A0 A1 : A) (eqA : A -> A -> Prop) (plusA : A -> A -> A) (invA : A -> A) (minusA multA : A -> A -> A) (divA : A -> forall b : A, (eqA b A0 -> False) -> A), CoefStructure A A0 A1 eqA plusA invA minusA multA divA -> forall (n : nat) (a b : Term A n), eqTerm eqA (n:=n) a b -> eqTerm eqA (n:=n) (invTerm invA (n:=n) a) (invTerm invA (n:=n) b) A : Set A0, A1 : A eqA : A -> A -> Prop plusA : A -> A -> A invA : A -> A minusA, multA : A -> A -> A divA : A -> forall b : A, (eqA b A0 -> False) -> A eqA_dec : forall a b : A, {eqA a b} + {eqA a b -> False} n : nat ltM : mon n -> mon n -> Prop ltM_dec : forall a b : mon n, {ltM a b} + {ltM b a} + {a = b} ma, mb : Term A n p, q : list (Term A n) H : eqTerm eqA (n:=n) ma mb H_eqP : eqP p q IHH_eqP : canonical A0 eqA ltM p -> canonical A0 eqA ltM q H0 : olist (A:=A) ltM (pX (A:=A) (n:=n) ma p) H2 : nZterm A0 eqA (n:=n) p H3 : zeroP A0 eqA (n:=n) ma -> False M1_min : forall x : mon n, ltM x (zero_mon n) -> False ltM_nonrefl : forall x : mon n, ltM x x -> False ltM_trans : transitive (mon n) ltM ltM_wf : well_founded ltM ltM_plusr : forall x y z : mon n, ltM x y -> ltM (mult_mon n x z) (mult_mon n y z) ltM_plusl : forall x y z : mon n, ltM x y -> ltM (mult_mon n z x) (mult_mon n z y) A1_diff_A0 : eqA A1 A0 -> False eqA_ref : reflexive A eqA eqA_sym : symmetric A eqA eqA_trans : transitive A eqA plusA_assoc : forall a b c : A, eqA (plusA a (plusA b c)) (plusA (plusA a b) c) plusA_com : forall a b : A, eqA (plusA a b) (plusA b a) plusA_eqA_comp : forall a b c d : A, eqA a c -> eqA b d -> eqA (plusA a b) (plusA c d) plusA_A0 : forall a : A, eqA a (plusA a A0) invA_plusA : forall a : A, eqA A0 (plusA a (invA a)) invA_eqA_comp : forall a b : A, eqA a b -> eqA (invA a) (invA b) minusA_def : forall a b : A, eqA (minusA a b) (plusA a (invA b)) multA_eqA_comp : forall a b c d : A, eqA a c -> eqA b d -> eqA (multA a b) (multA c d) multA_assoc : forall a b c : A, eqA (multA a (multA b c)) (multA (multA a b) c) multA_com : forall a b : A, eqA (multA a b) (multA b a) multA_dist_l : forall a b c : A, eqA (plusA (multA c a) (multA c b)) (multA c (plusA a b)) multA_A0_l : forall a : A, eqA (multA A0 a) A0 multA_A1_l : forall a : A, eqA (multA A1 a) a divA_rew : forall (a b : A) (nZ1 nZ2 : eqA b A0 -> False), divA a b nZ1 = divA a b nZ2 divA_is_multA : forall (a b : A) (nZb : eqA b A0 -> False), eqA a (multA (divA a b nZb) b) divA_eqA_comp : forall (a b c d : A) (nZb : eqA b A0 -> False) (nZd : eqA d A0 -> False), eqA a c -> eqA b d -> eqA (divA a b nZb) (divA c d nZd) divA_multA_comp_r : forall (a b c : A) (nZc : eqA c A0 -> False), eqA (divA (multA a b) c nZc) (multA (divA a c nZc) b) divA_invA_r : forall (a b : A) (nZb : eqA b A0 -> False) (nZib : eqA (invA b) A0 -> False), eqA (divA a (invA b) nZib) (invA (divA a b nZb)) Unable to unify \"olist (A:=A) ltM q /\\\\ nZterm A0 eqA (n:=n) q\" with \"Relation_Operators_compat.Desc (mon n) ltM (fP A n (pX (A:=A) (n:=n) mb (pX (A:=A) (n:=n) ?b q)))\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros p q H_eqP H_canon_p.", "induction H_eqP.", "-", "inversion H_canon_p.", "qsimpl.", "-", "inversion H_canon_p.", "qsimpl.", "+", "eapply olist_imp_olist.", "qsimpl use: eqTerm_plusTerm_comp.", "qsimpl use: eqTerm_invTerm_comp,eqTerm_plusTerm_comp.", "qsimpl use: eqTerm_invTerm_comp,eqTerm_plusTerm_comp,eqTerm_multTerm_comp.", "qsimpl use: eqTerm_invTerm_comp,eqTerm_plusTerm_comp,eqTerm_multTerm_comp."], "tactic": "apply H4.", "exn": "In environment H8 : forall (A : Set) (A0 A1 : A) (eqA : A -> A -> Prop) (plusA : A -> A -> A) (invA : A -> A) (minusA multA : A -> A -> A) (divA : A -> forall b : A, (eqA b A0 -> False) -> A), CoefStructure A A0 A1 eqA plusA invA minusA multA divA -> forall (n : nat) (a b c d : Term A n), eqTerm eqA (n:=n) a b -> eqTerm eqA (n:=n) c d -> eqTerm eqA (n:=n) (multTerm multA (n:=n) a c) (multTerm multA (n:=n) b d) H4 : forall (A : Set) (A0 A1 : A) (eqA : A -> A -> Prop) (plusA : A -> A -> A) (invA : A -> A) (minusA multA : A -> A -> A) (divA : A -> forall b : A, (eqA b A0 -> False) -> A), CoefStructure A A0 A1 eqA plusA invA minusA multA divA -> forall (n : nat) (a b c d : Term A n), eqT (A:=A) (n:=n) a c -> eqT (A:=A) (n:=n) b d -> eqTerm eqA (n:=n) a b -> eqTerm eqA (n:=n) c d -> eqTerm eqA (n:=n) (plusTerm plusA (n:=n) a c) (plusTerm plusA (n:=n) b d) H1 : forall (A : Set) (A0 A1 : A) (eqA : A -> A -> Prop) (plusA : A -> A -> A) (invA : A -> A) (minusA multA : A -> A -> A) (divA : A -> forall b : A, (eqA b A0 -> False) -> A), CoefStructure A A0 A1 eqA plusA invA minusA multA divA -> forall (n : nat) (a b : Term A n), eqTerm eqA (n:=n) a b -> eqTerm eqA (n:=n) (invTerm invA (n:=n) a) (invTerm invA (n:=n) b) A : Set A0, A1 : A eqA : A -> A -> Prop plusA : A -> A -> A invA : A -> A minusA, multA : A -> A -> A divA : A -> forall b : A, (eqA b A0 -> False) -> A eqA_dec : forall a b : A, {eqA a b} + {eqA a b -> False} n : nat ltM : mon n -> mon n -> Prop ltM_dec : forall a b : mon n, {ltM a b} + {ltM b a} + {a = b} ma, mb : Term A n p, q : list (Term A n) H : eqTerm eqA (n:=n) ma mb H_eqP : eqP p q IHH_eqP : canonical A0 eqA ltM p -> canonical A0 eqA ltM q H0 : olist (A:=A) ltM (pX (A:=A) (n:=n) ma p) H2 : nZterm A0 eqA (n:=n) p H3 : zeroP A0 eqA (n:=n) ma -> False M1_min : forall x : mon n, ltM x (zero_mon n) -> False ltM_nonrefl : forall x : mon n, ltM x x -> False ltM_trans : transitive (mon n) ltM ltM_wf : well_founded ltM ltM_plusr : forall x y z : mon n, ltM x y -> ltM (mult_mon n x z) (mult_mon n y z) ltM_plusl : forall x y z : mon n, ltM x y -> ltM (mult_mon n z x) (mult_mon n z y) A1_diff_A0 : eqA A1 A0 -> False eqA_ref : reflexive A eqA eqA_sym : symmetric A eqA eqA_trans : transitive A eqA plusA_assoc : forall a b c : A, eqA (plusA a (plusA b c)) (plusA (plusA a b) c) plusA_com : forall a b : A, eqA (plusA a b) (plusA b a) plusA_eqA_comp : forall a b c d : A, eqA a c -> eqA b d -> eqA (plusA a b) (plusA c d) plusA_A0 : forall a : A, eqA a (plusA a A0) invA_plusA : forall a : A, eqA A0 (plusA a (invA a)) invA_eqA_comp : forall a b : A, eqA a b -> eqA (invA a) (invA b) minusA_def : forall a b : A, eqA (minusA a b) (plusA a (invA b)) multA_eqA_comp : forall a b c d : A, eqA a c -> eqA b d -> eqA (multA a b) (multA c d) multA_assoc : forall a b c : A, eqA (multA a (multA b c)) (multA (multA a b) c) multA_com : forall a b : A, eqA (multA a b) (multA b a) multA_dist_l : forall a b c : A, eqA (plusA (multA c a) (multA c b)) (multA c (plusA a b)) multA_A0_l : forall a : A, eqA (multA A0 a) A0 multA_A1_l : forall a : A, eqA (multA A1 a) a divA_rew : forall (a b : A) (nZ1 nZ2 : eqA b A0 -> False), divA a b nZ1 = divA a b nZ2 divA_is_multA : forall (a b : A) (nZb : eqA b A0 -> False), eqA a (multA (divA a b nZb) b) divA_eqA_comp : forall (a b c d : A) (nZb : eqA b A0 -> False) (nZd : eqA d A0 -> False), eqA a c -> eqA b d -> eqA (divA a b nZb) (divA c d nZd) divA_multA_comp_r : forall (a b c : A) (nZc : eqA c A0 -> False), eqA (divA (multA a b) c nZc) (multA (divA a c nZc) b) divA_invA_r : forall (a b : A) (nZb : eqA b A0 -> False) (nZib : eqA (invA b) A0 -> False), eqA (divA a (invA b) nZib) (invA (divA a b nZb)) Unable to unify \"(let (a, a') := plusTerm ?M22691 ?M22698 ?M22700 in fun H'2 : Term ?M22687 ?M22697 => let (b, b') := H'2 in ?M22690 a b /\\\\ a' = b') (plusTerm ?M22691 ?M22699 ?M22701)\" with \"Relation_Operators_compat.Desc (mon n) ltM (fP A n (pX (A:=A) (n:=n) mb (pX (A:=A) (n:=n) ?b q)))\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros p q H_eqP H_canon_p.", "induction H_eqP.", "-", "inversion H_canon_p.", "qsimpl.", "-", "inversion H_canon_p.", "qsimpl.", "+", "eapply olist_imp_olist.", "qsimpl use: eqTerm_plusTerm_comp.", "qsimpl use: eqTerm_invTerm_comp,eqTerm_plusTerm_comp.", "qsimpl use: eqTerm_invTerm_comp,eqTerm_plusTerm_comp,eqTerm_multTerm_comp.", "qsimpl use: eqTerm_invTerm_comp,eqTerm_plusTerm_comp,eqTerm_multTerm_comp.", "qsimpl use: eqTerm_invTerm_comp,eqTerm_plusTerm_comp,eqTerm_multTerm_comp."], "tactic": "+", "exn": "Wrong bullet +: Current bullet + is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["intros p q H_eqP H_canon_p.", "induction H_eqP.", "-", "inversion H_canon_p.", "qsimpl.", "-", "inversion H_canon_p.", "qsimpl.", "+", "eapply olist_imp_olist.", "qsimpl use: eqTerm_plusTerm_comp.", "qsimpl use: eqTerm_invTerm_comp,eqTerm_plusTerm_comp.", "qsimpl use: eqTerm_invTerm_comp,eqTerm_plusTerm_comp,eqTerm_multTerm_comp.", "qsimpl use: eqTerm_invTerm_comp,eqTerm_plusTerm_comp,eqTerm_multTerm_comp.", "qsimpl use: eqTerm_invTerm_comp,eqTerm_plusTerm_comp,eqTerm_multTerm_comp.", "shelve.", "+"], "tactic": "apply ltP_pX_canonical.", "exn": "In environment A : Set A0, A1 : A eqA : A -> A -> Prop plusA : A -> A -> A invA : A -> A minusA, multA : A -> A -> A divA : A -> forall b : A, (eqA b A0 -> False) -> A eqA_dec : forall a b : A, {eqA a b} + {eqA a b -> False} n : nat ltM : mon n -> mon n -> Prop ltM_dec : forall a b : mon n, {ltM a b} + {ltM b a} + {a = b} ma, mb : Term A n p, q : list (Term A n) H : eqTerm eqA (n:=n) ma mb H_eqP : eqP p q IHH_eqP : canonical A0 eqA ltM p -> canonical A0 eqA ltM q H0 : olist (A:=A) ltM (pX (A:=A) (n:=n) ma p) H2 : nZterm A0 eqA (n:=n) p H3 : zeroP A0 eqA (n:=n) ma -> False M1_min : forall x : mon n, ltM x (zero_mon n) -> False ltM_nonrefl : forall x : mon n, ltM x x -> False ltM_trans : transitive (mon n) ltM ltM_wf : well_founded ltM ltM_plusr : forall x y z : mon n, ltM x y -> ltM (mult_mon n x z) (mult_mon n y z) ltM_plusl : forall x y z : mon n, ltM x y -> ltM (mult_mon n z x) (mult_mon n z y) A1_diff_A0 : eqA A1 A0 -> False eqA_ref : reflexive A eqA eqA_sym : symmetric A eqA eqA_trans : transitive A eqA plusA_assoc : forall a b c : A, eqA (plusA a (plusA b c)) (plusA (plusA a b) c) plusA_com : forall a b : A, eqA (plusA a b) (plusA b a) plusA_eqA_comp : forall a b c d : A, eqA a c -> eqA b d -> eqA (plusA a b) (plusA c d) plusA_A0 : forall a : A, eqA a (plusA a A0) invA_plusA : forall a : A, eqA A0 (plusA a (invA a)) invA_eqA_comp : forall a b : A, eqA a b -> eqA (invA a) (invA b) minusA_def : forall a b : A, eqA (minusA a b) (plusA a (invA b)) multA_eqA_comp : forall a b c d : A, eqA a c -> eqA b d -> eqA (multA a b) (multA c d) multA_assoc : forall a b c : A, eqA (multA a (multA b c)) (multA (multA a b) c) multA_com : forall a b : A, eqA (multA a b) (multA b a) multA_dist_l : forall a b c : A, eqA (plusA (multA c a) (multA c b)) (multA c (plusA a b)) multA_A0_l : forall a : A, eqA (multA A0 a) A0 multA_A1_l : forall a : A, eqA (multA A1 a) a divA_rew : forall (a b : A) (nZ1 nZ2 : eqA b A0 -> False), divA a b nZ1 = divA a b nZ2 divA_is_multA : forall (a b : A) (nZb : eqA b A0 -> False), eqA a (multA (divA a b nZb) b) divA_eqA_comp : forall (a b c d : A) (nZb : eqA b A0 -> False) (nZd : eqA d A0 -> False), eqA a c -> eqA b d -> eqA (divA a b nZb) (divA c d nZd) divA_multA_comp_r : forall (a b c : A) (nZc : eqA c A0 -> False), eqA (divA (multA a b) c nZc) (multA (divA a c nZc) b) divA_invA_r : forall (a b : A) (nZb : eqA b A0 -> False) (nZib : eqA (invA b) A0 -> False), eqA (divA a (invA b) nZib) (invA (divA a b nZb)) Unable to unify \"olist ?M25592 (pX ?M25593 ?M25594) /\\\\ nZterm ?M25588 ?M25589 (pX ?M25593 ?M25594)\" with \"(fix F (l : list (Term A n)) : (fun _ : list (Term A n) => Prop) l := match l as l0 return ((fun _ : list (Term A n) => Prop) l0) with | nil => True | y :: l0 => (fun (a : Term A n) (_ : list (Term A n)) (Rec : Prop) => Rec /\\\\ ~ zeroP A0 eqA (n:=n) a) y l0 (F l0) end) q\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros p q H_eqP H_canon_p.", "induction H_eqP.", "-", "inversion H_canon_p.", "qsimpl.", "-", "inversion H_canon_p.", "qsimpl.", "+", "eapply olist_imp_olist.", "qsimpl use: eqTerm_plusTerm_comp.", "qsimpl use: eqTerm_invTerm_comp,eqTerm_plusTerm_comp.", "qsimpl use: eqTerm_invTerm_comp,eqTerm_plusTerm_comp,eqTerm_multTerm_comp.", "qsimpl use: eqTerm_invTerm_comp,eqTerm_plusTerm_comp,eqTerm_multTerm_comp.", "qsimpl use: eqTerm_invTerm_comp,eqTerm_plusTerm_comp,eqTerm_multTerm_comp.", "shelve.", "+", "qsimpl use: ltP_pX_canonical,eqTerm_invTerm_comp,eqTerm_plusTerm_comp,eqTerm_multTerm_comp."], "tactic": "apply H2.", "exn": "In environment H6 : forall (A : Set) (A0 A1 : A) (eqA : A -> A -> Prop) (plusA : A -> A -> A) (invA : A -> A) (minusA multA : A -> A -> A) (divA : A -> forall b : A, (eqA b A0 -> False) -> A), CoefStructure A A0 A1 eqA plusA invA minusA multA divA -> forall (n : nat) (a b c d : Term A n), eqTerm eqA (n:=n) a b -> eqTerm eqA (n:=n) c d -> eqTerm eqA (n:=n) (multTerm multA (n:=n) a c) (multTerm multA (n:=n) b d) H5 : forall (A : Set) (A0 A1 : A) (eqA : A -> A -> Prop) (plusA : A -> A -> A) (invA : A -> A) (minusA multA : A -> A -> A) (divA : A -> forall b : A, (eqA b A0 -> False) -> A), CoefStructure A A0 A1 eqA plusA invA minusA multA divA -> forall (n : nat) (a b c d : Term A n), eqT (A:=A) (n:=n) a c -> eqT (A:=A) (n:=n) b d -> eqTerm eqA (n:=n) a b -> eqTerm eqA (n:=n) c d -> eqTerm eqA (n:=n) (plusTerm plusA (n:=n) a c) (plusTerm plusA (n:=n) b d) H4 : forall (A : Set) (A0 A1 : A) (eqA : A -> A -> Prop) (plusA : A -> A -> A) (invA : A -> A) (minusA multA : A -> A -> A) (divA : A -> forall b : A, (eqA b A0 -> False) -> A), CoefStructure A A0 A1 eqA plusA invA minusA multA divA -> forall (n : nat) (a b : Term A n), eqTerm eqA (n:=n) a b -> eqTerm eqA (n:=n) (invTerm invA (n:=n) a) (invTerm invA (n:=n) b) H1 : forall (A : Set) (A0 : A) (eqA : A -> A -> Prop), (forall a b : A, {eqA a b} + {eqA a b -> False}) -> forall (n : nat) (ltM : mon n -> mon n -> Prop) (a : Term A n) (p : list (Term A n)), canonical A0 eqA ltM p -> (zeroP A0 eqA (n:=n) a -> False) -> ltP (A:=A) ltM p (pX (A:=A) (n:=n) a (pO A n)) -> canonical A0 eqA ltM (pX (A:=A) (n:=n) a p) A : Set A0, A1 : A eqA : A -> A -> Prop plusA : A -> A -> A invA : A -> A minusA, multA : A -> A -> A divA : A -> forall b : A, (eqA b A0 -> False) -> A eqA_dec : forall a b : A, {eqA a b} + {eqA a b -> False} n : nat ltM : mon n -> mon n -> Prop ltM_dec : forall a b : mon n, {ltM a b} + {ltM b a} + {a = b} ma, mb : Term A n p, q : list (Term A n) H : eqTerm eqA (n:=n) ma mb H_eqP : eqP p q IHH_eqP : canonical A0 eqA ltM p -> canonical A0 eqA ltM q H0 : olist (A:=A) ltM (pX (A:=A) (n:=n) ma p) H2 : nZterm A0 eqA (n:=n) p H3 : zeroP A0 eqA (n:=n) ma -> False M1_min : forall x : mon n, ltM x (zero_mon n) -> False ltM_nonrefl : forall x : mon n, ltM x x -> False ltM_trans : transitive (mon n) ltM ltM_wf : well_founded ltM ltM_plusr : forall x y z : mon n, ltM x y -> ltM (mult_mon n x z) (mult_mon n y z) ltM_plusl : forall x y z : mon n, ltM x y -> ltM (mult_mon n z x) (mult_mon n z y) A1_diff_A0 : eqA A1 A0 -> False eqA_ref : reflexive A eqA eqA_sym : symmetric A eqA eqA_trans : transitive A eqA plusA_assoc : forall a b c : A, eqA (plusA a (plusA b c)) (plusA (plusA a b) c) plusA_com : forall a b : A, eqA (plusA a b) (plusA b a) plusA_eqA_comp : forall a b c d : A, eqA a c -> eqA b d -> eqA (plusA a b) (plusA c d) plusA_A0 : forall a : A, eqA a (plusA a A0) invA_plusA : forall a : A, eqA A0 (plusA a (invA a)) invA_eqA_comp : forall a b : A, eqA a b -> eqA (invA a) (invA b) minusA_def : forall a b : A, eqA (minusA a b) (plusA a (invA b)) multA_eqA_comp : forall a b c d : A, eqA a c -> eqA b d -> eqA (multA a b) (multA c d) multA_assoc : forall a b c : A, eqA (multA a (multA b c)) (multA (multA a b) c) multA_com : forall a b : A, eqA (multA a b) (multA b a) multA_dist_l : forall a b c : A, eqA (plusA (multA c a) (multA c b)) (multA c (plusA a b)) multA_A0_l : forall a : A, eqA (multA A0 a) A0 multA_A1_l : forall a : A, eqA (multA A1 a) a divA_rew : forall (a b : A) (nZ1 nZ2 : eqA b A0 -> False), divA a b nZ1 = divA a b nZ2 divA_is_multA : forall (a b : A) (nZb : eqA b A0 -> False), eqA a (multA (divA a b nZb) b) divA_eqA_comp : forall (a b c d : A) (nZb : eqA b A0 -> False) (nZd : eqA d A0 -> False), eqA a c -> eqA b d -> eqA (divA a b nZb) (divA c d nZd) divA_multA_comp_r : forall (a b c : A) (nZc : eqA c A0 -> False), eqA (divA (multA a b) c nZc) (multA (divA a c nZc) b) divA_invA_r : forall (a b : A) (nZb : eqA b A0 -> False) (nZib : eqA (invA b) A0 -> False), eqA (divA a (invA b) nZib) (invA (divA a b nZb)) Unable to unify \"nZterm A0 eqA (n:=n) p\" with \"nZterm A0 eqA (n:=n) q\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros p q H_eqP H_canon_p.", "induction H_eqP.", "-", "inversion H_canon_p.", "qsimpl.", "-", "inversion H_canon_p.", "qsimpl.", "+", "eapply olist_imp_olist.", "qsimpl use: eqTerm_plusTerm_comp.", "qsimpl use: eqTerm_invTerm_comp,eqTerm_plusTerm_comp.", "qsimpl use: eqTerm_invTerm_comp,eqTerm_plusTerm_comp,eqTerm_multTerm_comp.", "qsimpl use: eqTerm_invTerm_comp,eqTerm_plusTerm_comp,eqTerm_multTerm_comp.", "qsimpl use: eqTerm_invTerm_comp,eqTerm_plusTerm_comp,eqTerm_multTerm_comp.", "shelve.", "+", "qsimpl use: ltP_pX_canonical,eqTerm_invTerm_comp,eqTerm_plusTerm_comp,eqTerm_multTerm_comp.", "qsimpl use: ltP_pX_canonical,eqTerm_invTerm_comp,eqTerm_plusTerm_comp,eqTerm_multTerm_comp."], "tactic": "apply eqA_dec.", "exn": "In environment H10 : forall (A : Set) (A0 A1 : A) (eqA : A -> A -> Prop) (plusA : A -> A -> A) (invA : A -> A) (minusA multA : A -> A -> A) (divA : A -> forall b : A, (eqA b A0 -> False) -> A), CoefStructure A A0 A1 eqA plusA invA minusA multA divA -> forall (n : nat) (a b c d : Term A n), eqTerm eqA (n:=n) a b -> eqTerm eqA (n:=n) c d -> eqTerm eqA (n:=n) (multTerm multA (n:=n) a c) (multTerm multA (n:=n) b d) H9 : forall (A : Set) (A0 A1 : A) (eqA : A -> A -> Prop) (plusA : A -> A -> A) (invA : A -> A) (minusA multA : A -> A -> A) (divA : A -> forall b : A, (eqA b A0 -> False) -> A), CoefStructure A A0 A1 eqA plusA invA minusA multA divA -> forall (n : nat) (a b c d : Term A n), eqT (A:=A) (n:=n) a c -> eqT (A:=A) (n:=n) b d -> eqTerm eqA (n:=n) a b -> eqTerm eqA (n:=n) c d -> eqTerm eqA (n:=n) (plusTerm plusA (n:=n) a c) (plusTerm plusA (n:=n) b d) H8 : forall (A : Set) (A0 A1 : A) (eqA : A -> A -> Prop) (plusA : A -> A -> A) (invA : A -> A) (minusA multA : A -> A -> A) (divA : A -> forall b : A, (eqA b A0 -> False) -> A), CoefStructure A A0 A1 eqA plusA invA minusA multA divA -> forall (n : nat) (a b : Term A n), eqTerm eqA (n:=n) a b -> eqTerm eqA (n:=n) (invTerm invA (n:=n) a) (invTerm invA (n:=n) b) H7 : forall (A : Set) (A0 : A) (eqA : A -> A -> Prop), (forall a b : A, {eqA a b} + {eqA a b -> False}) -> forall (n : nat) (ltM : mon n -> mon n -> Prop) (a : Term A n) (p : list (Term A n)), canonical A0 eqA ltM p -> (zeroP A0 eqA (n:=n) a -> False) -> ltP (A:=A) ltM p (pX (A:=A) (n:=n) a (pO A n)) -> canonical A0 eqA ltM (pX (A:=A) (n:=n) a p) A : Set A0, A1 : A eqA : A -> A -> Prop plusA : A -> A -> A invA : A -> A minusA, multA : A -> A -> A divA : A -> forall b : A, (eqA b A0 -> False) -> A eqA_dec : forall a b : A, {eqA a b} + {eqA a b -> False} n : nat ltM : mon n -> mon n -> Prop ltM_dec : forall a b : mon n, {ltM a b} + {ltM b a} + {a = b} ma, mb : Term A n p, q : list (Term A n) H : eqTerm eqA (n:=n) ma mb H_eqP : eqP p q IHH_eqP : canonical A0 eqA ltM p -> canonical A0 eqA ltM q H0 : olist (A:=A) ltM (pX (A:=A) (n:=n) ma p) H2 : nZterm A0 eqA (n:=n) p H3 : zeroP A0 eqA (n:=n) ma -> False M1_min : forall x : mon n, ltM x (zero_mon n) -> False ltM_nonrefl : forall x : mon n, ltM x x -> False ltM_trans : transitive (mon n) ltM ltM_wf : well_founded ltM ltM_plusr : forall x y z : mon n, ltM x y -> ltM (mult_mon n x z) (mult_mon n y z) ltM_plusl : forall x y z : mon n, ltM x y -> ltM (mult_mon n z x) (mult_mon n z y) A1_diff_A0 : eqA A1 A0 -> False eqA_ref : reflexive A eqA eqA_sym : symmetric A eqA eqA_trans : transitive A eqA plusA_assoc : forall a b c : A, eqA (plusA a (plusA b c)) (plusA (plusA a b) c) plusA_com : forall a b : A, eqA (plusA a b) (plusA b a) plusA_eqA_comp : forall a b c d : A, eqA a c -> eqA b d -> eqA (plusA a b) (plusA c d) plusA_A0 : forall a : A, eqA a (plusA a A0) invA_plusA : forall a : A, eqA A0 (plusA a (invA a)) invA_eqA_comp : forall a b : A, eqA a b -> eqA (invA a) (invA b) minusA_def : forall a b : A, eqA (minusA a b) (plusA a (invA b)) multA_eqA_comp : forall a b c d : A, eqA a c -> eqA b d -> eqA (multA a b) (multA c d) multA_assoc : forall a b c : A, eqA (multA a (multA b c)) (multA (multA a b) c) multA_com : forall a b : A, eqA (multA a b) (multA b a) multA_dist_l : forall a b c : A, eqA (plusA (multA c a) (multA c b)) (multA c (plusA a b)) multA_A0_l : forall a : A, eqA (multA A0 a) A0 multA_A1_l : forall a : A, eqA (multA A1 a) a divA_rew : forall (a b : A) (nZ1 nZ2 : eqA b A0 -> False), divA a b nZ1 = divA a b nZ2 divA_is_multA : forall (a b : A) (nZb : eqA b A0 -> False), eqA a (multA (divA a b nZb) b) divA_eqA_comp : forall (a b c d : A) (nZb : eqA b A0 -> False) (nZd : eqA d A0 -> False), eqA a c -> eqA b d -> eqA (divA a b nZb) (divA c d nZd) divA_multA_comp_r : forall (a b c : A) (nZc : eqA c A0 -> False), eqA (divA (multA a b) c nZc) (multA (divA a c nZc) b) divA_invA_r : forall (a b : A) (nZb : eqA b A0 -> False) (nZib : eqA (invA b) A0 -> False), eqA (divA a (invA b) nZib) (invA (divA a b nZb)) Unable to unify \"{eqA ?M31643 ?M31644} + {eqA ?M31643 ?M31644 -> False}\" with \"(fix F (l : list (Term A n)) : (fun _ : list (Term A n) => Prop) l := match l as l0 return ((fun _ : list (Term A n) => Prop) l0) with | nil => True | y :: l0 => (fun (a : Term A n) (_ : list (Term A n)) (Rec : Prop) => Rec /\\\\ ~ zeroP A0 eqA (n:=n) a) y l0 (F l0) end) q\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros p q H_eqP H_canon_p.", "induction H_eqP.", "-", "inversion H_canon_p.", "qsimpl.", "-", "inversion H_canon_p.", "qsimpl.", "+", "eapply olist_imp_olist.", "qsimpl use: eqTerm_plusTerm_comp.", "qsimpl use: eqTerm_invTerm_comp,eqTerm_plusTerm_comp.", "qsimpl use: eqTerm_invTerm_comp,eqTerm_plusTerm_comp,eqTerm_multTerm_comp.", "qsimpl use: eqTerm_invTerm_comp,eqTerm_plusTerm_comp,eqTerm_multTerm_comp.", "qsimpl use: eqTerm_invTerm_comp,eqTerm_plusTerm_comp,eqTerm_multTerm_comp.", "shelve.", "+", "qsimpl use: ltP_pX_canonical,eqTerm_invTerm_comp,eqTerm_plusTerm_comp,eqTerm_multTerm_comp.", "qsimpl use: ltP_pX_canonical,eqTerm_invTerm_comp,eqTerm_plusTerm_comp,eqTerm_multTerm_comp.", "qsimpl use: ltP_pX_canonical,eqTerm_invTerm_comp,eqTerm_plusTerm_comp,eqTerm_multTerm_comp."], "tactic": "apply H3.", "exn": "In environment H6 : forall (A : Set) (A0 A1 : A) (eqA : A -> A -> Prop) (plusA : A -> A -> A) (invA : A -> A) (minusA multA : A -> A -> A) (divA : A -> forall b : A, (eqA b A0 -> False) -> A), CoefStructure A A0 A1 eqA plusA invA minusA multA divA -> forall (n : nat) (a b c d : Term A n), eqTerm eqA (n:=n) a b -> eqTerm eqA (n:=n) c d -> eqTerm eqA (n:=n) (multTerm multA (n:=n) a c) (multTerm multA (n:=n) b d) H5 : forall (A : Set) (A0 A1 : A) (eqA : A -> A -> Prop) (plusA : A -> A -> A) (invA : A -> A) (minusA multA : A -> A -> A) (divA : A -> forall b : A, (eqA b A0 -> False) -> A), CoefStructure A A0 A1 eqA plusA invA minusA multA divA -> forall (n : nat) (a b c d : Term A n), eqT (A:=A) (n:=n) a c -> eqT (A:=A) (n:=n) b d -> eqTerm eqA (n:=n) a b -> eqTerm eqA (n:=n) c d -> eqTerm eqA (n:=n) (plusTerm plusA (n:=n) a c) (plusTerm plusA (n:=n) b d) H4 : forall (A : Set) (A0 A1 : A) (eqA : A -> A -> Prop) (plusA : A -> A -> A) (invA : A -> A) (minusA multA : A -> A -> A) (divA : A -> forall b : A, (eqA b A0 -> False) -> A), CoefStructure A A0 A1 eqA plusA invA minusA multA divA -> forall (n : nat) (a b : Term A n), eqTerm eqA (n:=n) a b -> eqTerm eqA (n:=n) (invTerm invA (n:=n) a) (invTerm invA (n:=n) b) H1 : forall (A : Set) (A0 : A) (eqA : A -> A -> Prop), (forall a b : A, {eqA a b} + {eqA a b -> False}) -> forall (n : nat) (ltM : mon n -> mon n -> Prop) (a : Term A n) (p : list (Term A n)), canonical A0 eqA ltM p -> (zeroP A0 eqA (n:=n) a -> False) -> ltP (A:=A) ltM p (pX (A:=A) (n:=n) a (pO A n)) -> canonical A0 eqA ltM (pX (A:=A) (n:=n) a p) A : Set A0, A1 : A eqA : A -> A -> Prop plusA : A -> A -> A invA : A -> A minusA, multA : A -> A -> A divA : A -> forall b : A, (eqA b A0 -> False) -> A eqA_dec : forall a b : A, {eqA a b} + {eqA a b -> False} n : nat ltM : mon n -> mon n -> Prop ltM_dec : forall a b : mon n, {ltM a b} + {ltM b a} + {a = b} ma, mb : Term A n p, q : list (Term A n) H : eqTerm eqA (n:=n) ma mb H_eqP : eqP p q IHH_eqP : canonical A0 eqA ltM p -> canonical A0 eqA ltM q H0 : olist (A:=A) ltM (pX (A:=A) (n:=n) ma p) H2 : nZterm A0 eqA (n:=n) p H3 : zeroP A0 eqA (n:=n) ma -> False M1_min : forall x : mon n, ltM x (zero_mon n) -> False ltM_nonrefl : forall x : mon n, ltM x x -> False ltM_trans : transitive (mon n) ltM ltM_wf : well_founded ltM ltM_plusr : forall x y z : mon n, ltM x y -> ltM (mult_mon n x z) (mult_mon n y z) ltM_plusl : forall x y z : mon n, ltM x y -> ltM (mult_mon n z x) (mult_mon n z y) A1_diff_A0 : eqA A1 A0 -> False eqA_ref : reflexive A eqA eqA_sym : symmetric A eqA eqA_trans : transitive A eqA plusA_assoc : forall a b c : A, eqA (plusA a (plusA b c)) (plusA (plusA a b) c) plusA_com : forall a b : A, eqA (plusA a b) (plusA b a) plusA_eqA_comp : forall a b c d : A, eqA a c -> eqA b d -> eqA (plusA a b) (plusA c d) plusA_A0 : forall a : A, eqA a (plusA a A0) invA_plusA : forall a : A, eqA A0 (plusA a (invA a)) invA_eqA_comp : forall a b : A, eqA a b -> eqA (invA a) (invA b) minusA_def : forall a b : A, eqA (minusA a b) (plusA a (invA b)) multA_eqA_comp : forall a b c d : A, eqA a c -> eqA b d -> eqA (multA a b) (multA c d) multA_assoc : forall a b c : A, eqA (multA a (multA b c)) (multA (multA a b) c) multA_com : forall a b : A, eqA (multA a b) (multA b a) multA_dist_l : forall a b c : A, eqA (plusA (multA c a) (multA c b)) (multA c (plusA a b)) multA_A0_l : forall a : A, eqA (multA A0 a) A0 multA_A1_l : forall a : A, eqA (multA A1 a) a divA_rew : forall (a b : A) (nZ1 nZ2 : eqA b A0 -> False), divA a b nZ1 = divA a b nZ2 divA_is_multA : forall (a b : A) (nZb : eqA b A0 -> False), eqA a (multA (divA a b nZb) b) divA_eqA_comp : forall (a b c d : A) (nZb : eqA b A0 -> False) (nZd : eqA d A0 -> False), eqA a c -> eqA b d -> eqA (divA a b nZb) (divA c d nZd) divA_multA_comp_r : forall (a b c : A) (nZc : eqA c A0 -> False), eqA (divA (multA a b) c nZc) (multA (divA a c nZc) b) divA_invA_r : forall (a b : A) (nZb : eqA b A0 -> False) (nZib : eqA (invA b) A0 -> False), eqA (divA a (invA b) nZib) (invA (divA a b nZb)) Unable to unify \"False\" with \"nZterm A0 eqA (n:=n) q\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros p q H_eqP H_canon_p.", "induction H_eqP.", "-", "inversion H_canon_p.", "qsimpl.", "-", "inversion H_canon_p.", "qsimpl.", "+", "eapply olist_imp_olist.", "qsimpl use: eqTerm_plusTerm_comp.", "qsimpl use: eqTerm_invTerm_comp,eqTerm_plusTerm_comp.", "qsimpl use: eqTerm_invTerm_comp,eqTerm_plusTerm_comp,eqTerm_multTerm_comp.", "qsimpl use: eqTerm_invTerm_comp,eqTerm_plusTerm_comp,eqTerm_multTerm_comp.", "qsimpl use: eqTerm_invTerm_comp,eqTerm_plusTerm_comp,eqTerm_multTerm_comp.", "shelve.", "+", "qsimpl use: ltP_pX_canonical,eqTerm_invTerm_comp,eqTerm_plusTerm_comp,eqTerm_multTerm_comp.", "qsimpl use: ltP_pX_canonical,eqTerm_invTerm_comp,eqTerm_plusTerm_comp,eqTerm_multTerm_comp.", "qsimpl use: ltP_pX_canonical,eqTerm_invTerm_comp,eqTerm_plusTerm_comp,eqTerm_multTerm_comp.", "qsimpl use: ltP_pX_canonical,eqTerm_invTerm_comp,eqTerm_plusTerm_comp,eqTerm_multTerm_comp."], "tactic": "apply H1.", "exn": "The reference H1 was not found in the current environment.", "type": "ref_not_found", "handled": true}]}, "chat": [], "original": "intros p q H_eqP H_canon_p. induction H_eqP. - intros H_canon_q. inversion H_canon_p. inversion H_canon_q; subst. constructor. - intros H_canon_q. inversion H_canon_p. inversion H_canon_q; subst. constructor. + eapply eqTerm_imp_eqT. apply eqTerm_plusTerm_comp. apply cs. apply eqTerm_invTerm_comp. apply cs. apply eqTerm_multTerm_comp. apply cs. apply IHH_eqP. apply H4. + apply ltP_pX_canonical. apply H2. apply eqA_dec. apply H3. apply H1.", "succ": false}]