[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": ["intros a b c nZc p q r can_p can_q can_r divP_a_c divP_b_c eq_ab not_zero_plus_ab.", "unfold spminusf."], "tactic": "rewrite (eqp_spminusf_com a b c nZc p q r can_p can_q can_r (eq_refl p) eq_ab divP_a_c).", "exn": "In environment A : Set A0, A1 : A eqA : A -> A -> Prop plusA : A -> A -> A invA : A -> A minusA, multA : A -> A -> A divA : A -> forall b : A, ~ eqA b A0 -> A cs : CoefStructure A A0 A1 eqA plusA invA minusA multA divA eqA_dec : forall a b : A, {eqA a b} + {~ eqA a b} n : nat ltM : mon n -> mon n -> Prop ltM_dec : forall a b : mon n, {ltM a b} + {ltM b a} + {a = b} os : OrderStructure (mon n) (zero_mon n) ltM (mult_mon n) a, b, c : Term A n nZc : ~ zeroP A0 eqA (n:=n) c p, q, r : list (Term A n) can_p : canonical A0 eqA ltM p can_q : canonical A0 eqA ltM q can_r : canonical A0 eqA ltM r divP_a_c : divP A A0 eqA multA divA n a c divP_b_c : divP A A0 eqA multA divA n b c eq_ab : eqT (A:=A) (n:=n) a b not_zero_plus_ab : ~ zeroP A0 eqA (n:=n) (plusTerm plusA (n:=n) a b) The term \"eq_refl\" has type \"p = p\" while it is expected to have type \"eqP A eqA n p q\".", "type": "wrong_type", "handled": true}, {"ctx": ["intros a b c nZc p q r can_p can_q can_r divP_a_c divP_b_c eq_ab not_zero_plus_ab.", "unfold spminusf.", "qsimpl use: eq_refl,eqp_spminusf_com."], "tactic": "rewrite (eqp_spminusf_com a b c nZc p q r can_p can_q can_r (eq_refl q) eq_ab divP_b_c).", "exn": "The reference divP_b_c was not found in the current environment.", "type": "ref_not_found", "handled": true}]}, "chat": [], "original": "intros a b c nZc p q r can_p can_q can_r divP_a_c divP_b_c eq_ab not_zero_plus_ab. unfold spminusf. rewrite (eqp_spminusf_com a b c nZc p q r can_p can_q can_r (eq_refl p) eq_ab divP_a_c). rewrite (eqp_spminusf_com a b c nZc p q r can_p can_q can_r (eq_refl q) eq_ab divP_b_c). reflexivity.", "succ": false}]