[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": ["intros n n1 ln t l H1 H2.", "induction H1 using height_pred_ind.", "-"], "tactic": "-", "exn": "Wrong bullet -: Current bullet - is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["intros n n1 ln t l H1 H2.", "induction H1 using height_pred_ind.", "-", "shelve.", "-", "assert (n <= length (ln1 ++ ln2))."], "tactic": "apply IHeight_pred_S with ln1 l1 t1; auto.", "exn": "The reference IHeight_pred_S was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros n n1 ln t l H1 H2.", "induction H1 using height_pred_ind.", "-", "shelve.", "-", "assert (n <= length (ln1 ++ ln2)).", "rewrite app_length."], "tactic": "apply le_trans with (n := n); auto.", "exn": "Unable to find an instance for the variable m.", "type": "no_instance_var", "handled": true}, {"ctx": ["intros n n1 ln t l H1 H2.", "induction H1 using height_pred_ind.", "-", "shelve.", "-", "assert (n <= length (ln1 ++ ln2)).", "rewrite app_length."], "tactic": "qsimpl use: height_pred_not_nil1,auto,height_pred_length,height_pred_ordered_cover,exist_first_max,trivial,length,app_length,le_trans,In,in_app_or,discriminate,contradict.", "exn": "The reference auto was not found in the current environment.", "type": "ref_not_found", "handled": true}]}, "chat": [], "original": "intros n n1 ln t l H1 H2. induction H1 using height_pred_ind. - intros. contradict H. apply height_pred_not_nil1 in H1. rewrite app_length in H1. assert (length ln1 = length l1). apply height_pred_length in H1. trivial. assert (length ln2 = length l2). apply height_pred_length in H2. trivial. assert (n = length (ln1 ++ ln2)). rewrite app_length, H2, H3. omega. assert (length (l1 ++ l2) = length l). rewrite app_length, H4. apply height_pred_length in H1. destruct ln1, ln2; try discriminate. simpl in H1. omega. apply height_pred_ordered_cover in H1. apply exist_first_max in H1. destruct H1 as [a [l1' [l2' [H6 [H7 H8]]]]]. assert (In a ln1 \\/ In a ln2). apply in_app_or. apply cover_in in H. destruct H; auto. destruct H5. + apply H7 in H5. omega. + apply H8 in H5. omega. - assert (n <= length (ln1 ++ ln2)). apply IHeight_pred_S with ln1 l1 t1; auto. rewrite app_length. apply le_trans with (n := n); auto.", "succ": false}]