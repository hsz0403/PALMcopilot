[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": ["intros l t H.", "induction H using build_ind.", "-"], "tactic": "apply cover_inv_leaf.", "exn": "In environment A : Type f : A -> nat t : btree A Unable to unify \"?M1552 = [leaf ?M1551]\" with \"cover [t] t\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros l t H.", "induction H using build_ind.", "-", "qsimpl use: cover_inv_leaf."], "tactic": "auto.", "exn": "No such goal. Focus next goal with bullet -.", "type": "next_goal", "handled": true}, {"ctx": ["intros l t H.", "induction H using build_ind.", "-", "qsimpl use: cover_inv_leaf.", "-"], "tactic": "apply cover_ordered_cover.", "exn": "In environment A : Type f : A -> nat t : btree A l1, l2 : list (btree A) H : one_step f l1 l2 H0 : build l2 t IHbuild : cover l2 t Unable to unify \"exists l2 : list (btree ?M1560), permutation ?M1561 l2 /\\\\ ordered_cover l2 ?M1562\" with \"cover l1 t\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros l t H.", "induction H using build_ind.", "-", "qsimpl use: cover_inv_leaf.", "-", "qsimpl use: cover_inv_leaf,cover_ordered_cover."], "tactic": "apply IHbuild.", "exn": "In environment H2 : forall (A : Type) (l1 : list (btree A)) (t : btree A), cover l1 t -> exists l2 : list (btree A), permutation l1 l2 /\\\\ ordered_cover l2 t H1 : forall (A : Type) (a : A) (l : list (btree A)), cover l (leaf a) -> l = [leaf a] A : Type f : A -> nat t : btree A l1, l2 : list (btree A) H0 : build l2 t IHbuild : cover l2 t x : list (btree A) x0, x1 : btree A H3 : permutation l1 (x0 :: x1 :: x) H5 : permutation l2 (node x0 x1 :: x) H7 : sum_order f x0 x1 H9 : ordered (sum_order f) (x1 :: x) Unable to unify \"cover l2 t\" with \"cover l1 t\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros l t H.", "induction H using build_ind.", "-", "qsimpl use: cover_inv_leaf.", "-", "qsimpl use: cover_inv_leaf,cover_ordered_cover.", "qsimpl use: cover_inv_leaf,cover_ordered_cover."], "tactic": "apply build_step with (l2:=l2); auto.", "exn": "In environment H4 : forall (A : Type) (l1 : list (btree A)) (t : btree A), cover l1 t -> exists l2 : list (btree A), permutation l1 l2 /\\\\ ordered_cover l2 t H : forall (A : Type) (a : A) (l : list (btree A)), cover l (leaf a) -> l = [leaf a] A : Type f : A -> nat t : btree A l1, l2 : list (btree A) H0 : build l2 t IHbuild : cover l2 t x : list (btree A) x0, x1 : btree A H3 : permutation l1 (x0 :: x1 :: x) H5 : permutation l2 (node x0 x1 :: x) H7 : sum_order f x0 x1 H9 : ordered (sum_order f) (x1 :: x) Unable to unify \"build ?M5898 ?M5897\" with \"cover l1 t\".", "type": "cannot_unify", "handled": true}]}, "chat": [], "original": "intros l t H. induction H using build_ind. - intros. apply cover_inv_leaf. auto. - intros. apply cover_ordered_cover. apply IHbuild. apply build_step with (l2:=l2); auto.", "succ": false}]