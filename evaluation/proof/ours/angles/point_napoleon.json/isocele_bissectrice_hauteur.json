[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": ["intros I A B C H1 H2.", "unfold bissectrice in H1.", "unfold isocele in H2.", "unfold orthogonal."], "tactic": "apply orthogonal_symmetric.", "exn": "The reference orthogonal_symmetric was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros I A B C H1 H2.", "unfold bissectrice in H1.", "unfold isocele in H2.", "unfold orthogonal.", "apply critere_orthogonal.", "apply bissectrice_direction with (u:=vec A B) in H1."], "tactic": "apply bissectrice_direction with (u:=vec B C) in H1.", "exn": "Unable to apply lemma of type \"forall (I A B C : PO) (u : V), bissectrice I A B C -> R (cons (vec A B) u) (cons u (vec A C)) -> colineaire (vec A I) u\" on hypothesis of type \"colineaire (vec A I) (vec A B)\".", "type": "cannot_apply_in", "handled": true}, {"ctx": ["intros I A B C H1 H2.", "unfold bissectrice in H1.", "unfold isocele in H2.", "unfold orthogonal.", "apply critere_orthogonal.", "apply bissectrice_direction with (u:=vec A B) in H1.", "qsimpl use: vec,bissectrice_direction."], "tactic": "apply orthogonal_symmetric.", "exn": "The reference orthogonal_symmetric was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros I A B C H1 H2.", "unfold bissectrice in H1.", "unfold isocele in H2.", "unfold orthogonal.", "apply critere_orthogonal.", "apply bissectrice_direction with (u:=vec A B) in H1.", "qsimpl use: vec,bissectrice_direction.", "apply critere_orthogonal_reciproque."], "tactic": "apply bissectrice_double in H1.", "exn": "Unable to apply lemma of type \"forall I A B C : PO, bissectrice I A B C -> R (double (cons (vec A I) (vec A C))) (cons (vec A B) (vec A C))\" on hypothesis of type \"colineaire (vec A I) (vec A B)\".", "type": "cannot_apply_in", "handled": true}, {"ctx": ["intros I A B C H1 H2.", "unfold bissectrice in H1.", "unfold isocele in H2.", "unfold orthogonal.", "apply critere_orthogonal.", "apply bissectrice_direction with (u:=vec A B) in H1.", "qsimpl use: vec,bissectrice_direction.", "apply critere_orthogonal_reciproque.", "qsimpl use: bissectrice_double,vec,bissectrice_direction."], "tactic": "apply deux_rectangles; auto.", "exn": "In environment v0 : PO -> PO -> V H3 : forall (I A B C : PO) (u : V), bissectrice I A B C -> R (cons (v0 A B) u) (cons u (v0 A C)) -> colineaire (v0 A I) u H0 : forall I A B C : PO, bissectrice I A B C -> R (double (cons (vec A I) (vec A C))) (cons (vec A B) (vec A C)) v : PO -> PO -> V H : forall (I A B C : PO) (u : V), bissectrice I A B C -> R (cons (v A B) u) (cons u (v A C)) -> colineaire (v A I) u I, A, B, C : PO H1 : colineaire (vec A I) (vec A B) H2 : R (cons (vec B C) (vec B A)) (cons (vec C A) (vec C B)) Unable to unify \"R (double (cons (vec ?M2248 ?M2249) (vec ?M2248 ?M2247))) (double (cons (vec ?M2250 ?M2249) (vec ?M2250 ?M2247)))\" with \"R (double (cons (v A I) (v B C))) pi\".", "type": "cannot_unify", "handled": true}]}, "chat": [], "original": "intros I A B C H1 H2. unfold bissectrice in H1. unfold isocele in H2. unfold orthogonal. apply orthogonal_symmetric. apply bissectrice_direction with (u:=vec A B) in H1. apply bissectrice_direction with (u:=vec B C) in H1. apply orthogonal_symmetric. apply bissectrice_double in H1. apply deux_rectangles; auto.", "succ": false}]