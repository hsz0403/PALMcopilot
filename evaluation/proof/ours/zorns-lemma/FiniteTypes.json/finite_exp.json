[{"history": {"proof": "", "repairs": [], "exceptions": []}, "chat": [], "original": "intros X Y HX HY. pose proof (bij_finite (X * Y) (X -> Y) (fun p => match p with (x, y) => (fun _ => y) end) (finite_prod X Y HX HY) _). simpl. apply X0. - intros [x y] [x' y'] Heq. simpl in Heq. injection Heq as Heq1 Heq2. apply pair_equal_spec in Heq1; apply pair_equal_spec in Heq2. subst. apply functional_extensionality. intros x0. apply proof_irrelevance. - intros f1 Hinj Hsurj. apply surj_finite with (X * Y) (X -> Y) (fun f x => (x, f x)) (finite_prod X Y HX HY) (fun x => (x, f1 x)). + intros [x y]. reflexivity. + intros (x1, y1) (x2, y2) H. injection H as H1 H2. apply pair_equal_spec in H1; apply pair_equal_spec in H2. subst. auto. + apply inj_finite with X Y f1; auto.", "succ": false}]