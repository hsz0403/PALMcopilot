[{"history": {"proof": "intros tr. induction tr as [|h t IH]. - simpl. reflexivity. - destruct h as [name [e | l]]. + simpl. qsimpl. + simpl. qsimpl.", "repairs": ["", "", "", "", "", "", "", "", "", "exp_cannot_apply", "", "", "exp_cannot_apply"], "exceptions": [{"ctx": ["intros tr.", "induction tr as [|h t IH].", "-", "simpl.", "reflexivity.", "-", "destruct h as [name [e | l]].", "+", "simpl."], "tactic": "specialize (IH t).", "exn": "Illegal application (Non-functional construction): The expression \"IH\" of type \"import t = import (filterMap trace_non_empty_out t)\" cannot be applied to the term \"t\" : \"list (Raft.name * (raft_input + list raft_output))\"", "type": "exp_cannot_apply", "handled": true}, {"ctx": ["intros tr.", "induction tr as [|h t IH].", "-", "simpl.", "reflexivity.", "-", "destruct h as [name [e | l]].", "+", "simpl.", "qsimpl."], "tactic": "simpl in IH.", "exn": "No such goal. Focus next goal with bullet +.", "type": "next_goal", "handled": true}, {"ctx": ["intros tr.", "induction tr as [|h t IH].", "-", "simpl.", "reflexivity.", "-", "destruct h as [name [e | l]].", "+", "simpl.", "qsimpl.", "+", "simpl."], "tactic": "specialize (IH t).", "exn": "Illegal application (Non-functional construction): The expression \"IH\" of type \"import t = import (filterMap trace_non_empty_out t)\" cannot be applied to the term \"t\" : \"list (Raft.name * (raft_input + list raft_output))\"", "type": "exp_cannot_apply", "handled": true}, {"ctx": ["intros tr.", "induction tr as [|h t IH].", "-", "simpl.", "reflexivity.", "-", "destruct h as [name [e | l]].", "+", "simpl.", "qsimpl.", "+", "simpl.", "qsimpl."], "tactic": "simpl in IH.", "exn": "No such goal.", "type": "no_goal", "handled": true}]}, "chat": [], "original": "intros tr. induction tr as [|h t IH]. - simpl. reflexivity. - destruct h as [name [e | l]]. + simpl. specialize (IH t). simpl in IH. destruct (trace_non_empty_out e) eqn:H1; simpl; [|apply IH]. destruct e; discriminate. + simpl. specialize (IH t). simpl in IH. destruct (trace_non_empty_out (_, inr l)) eqn:H2; simpl; [|apply IH]. unfold import in IH. rewrite H2. apply IH.", "succ": true}]