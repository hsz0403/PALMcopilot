[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": ["intros h st h' t es r st' ms H."], "tactic": "apply leb_complete in H.", "exn": "Unable to apply lemma of type \"forall m n : nat, (m <=? n) = true -> m <= n\" on hypothesis of type \"handleAppendEntriesReply h st h' t es r = (st', ms)\".", "type": "cannot_apply_in", "handled": true}, {"ctx": ["intros h st h' t es r st' ms H.", "qsimpl use: leb_complete."], "tactic": "apply Nat.leb_le in H.", "exn": "Unable to apply lemma of type \"forall n m : nat, (n <=? m) = true <-> n <= m\" on hypothesis of type \"handleAppendEntriesReply h st h' t es r = (st', ms)\".", "type": "cannot_apply_in", "handled": true}, {"ctx": ["intros h st h' t es r st' ms H.", "qsimpl use: leb_complete.", "qsimpl use: leb_complete."], "tactic": "apply H.", "exn": "In environment H1 : forall m n : nat, (m <=? n) = true -> m <= n orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params h : name st : RaftState.raft_data term name entry logIndex serverType data clientId output h' : name t : nat es : list entry r : bool st' : raft_data ms : list (name * msg) H : handleAppendEntriesReply h st h' t es r = (st', ms) refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (GhostSimulations.deghost net) Unable to unify \"handleAppendEntriesReply h st h' t es r = (st', ms)\" with \"currentTerm st <= currentTerm st'\".", "type": "cannot_unify", "handled": true}]}, "chat": [], "original": "intros h st h' t es r st' ms H. apply leb_complete in H. apply Nat.leb_le in H. apply H.", "succ": false}]