[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": ["intros."], "tactic": "apply handleRequestVote in H.", "exn": "Unable to apply lemma of type \"name -> RaftState.raft_data term name entry logIndex serverType data clientId output -> nat -> fin N -> nat -> nat -> raft_data * msg\" on hypothesis of type \"handleRequestVote h st t h' lli llt = (st', m)\".", "type": "cannot_apply_in", "handled": true}, {"ctx": ["intros.", "qsimpl use: handleRequestVote.", "destruct H."], "tactic": "rewrite advanceCurrentTerm_same_log in H.", "exn": "No such hypothesis: H", "type": "no_hypos", "handled": true}, {"ctx": ["intros.", "qsimpl use: handleRequestVote.", "destruct H.", "qsimpl use: handleRequestVote,advanceCurrentTerm_same_log."], "tactic": "apply H.", "exn": "In environment orig_base_params : BaseParams raft_params : RaftParams orig_base_params H : forall (st : RaftState.raft_data term name entry logIndex serverType data clientId output) (t : nat), log (advanceCurrentTerm st t) = log st one_node_params : OneNodeParams orig_base_params st : RaftState.raft_data term name entry logIndex serverType data clientId output h : name h' : fin N t, lli, llt : nat st' : raft_data m : msg X0 : raft_data X1 : msg refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (GhostSimulations.deghost net) X2 : raft_data X3 : msg Unable to unify \"log (advanceCurrentTerm ?M5188 ?M5189) = log ?M5188\" with \"type st' = type st /\\\\ currentTerm st' = currentTerm st /\\\\ log st' = log st \\\\/ type st' = Follower\".", "type": "cannot_unify", "handled": true}]}, "chat": [], "original": "intros. intros. intros. intros. intros. intros. intros. intros. intros. intros. intros. intros. intros. intros. intros. intros. intros. intros. intros. intros. intros. intros. simpl. intros. apply handleRequestVote in H. destruct H. intros. rewrite advanceCurrentTerm_same_log in H. apply H.", "succ": false}]