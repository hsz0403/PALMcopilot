[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": ["intros net h h' t lli llt d e m HhandleRequestVote HcandidateEntries.", "unfold handleRequestVote in HhandleRequestVote."], "tactic": "destruct (t <? currentTerm (nwState net h)) eqn:Hlt.", "exn": "In environment orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params rri : raft_refinement_interface cti : cronies_term_interface tsi : term_sanity_interface vci : votes_correct_interface cci : cronies_correct_interface net : network h : name h' : fin N t, lli, llt : nat d : raft_data e : entry m : msg HhandleRequestVote : (if t <? currentTerm (snd (nwState net h)) then (snd (nwState net h), RequestVoteReply (currentTerm (snd (nwState net h))) false) else if (if leaderId (advanceCurrentTerm (snd (nwState net h)) t) then false else true) && moreUpToDate llt lli (maxTerm (log (advanceCurrentTerm (snd (nwState net h)) t))) (maxIndex (log (advanceCurrentTerm (snd (nwState net h)) t))) then match votedFor (advanceCurrentTerm (snd (nwState net h)) t) with | Some candidateId' => (advanceCurrentTerm (snd (nwState net h)) t, RequestVoteReply (currentTerm (advanceCurrentTerm (snd (nwState net h)) t)) (if fin_eq_dec N h' candidateId' then true else false)) | None => (RaftState.set_raft_data_votedFor term name entry logIndex serverType data clientId output (advanceCurrentTerm (snd (nwState net h)) t) (Some h'), RequestVoteReply (currentTerm (advanceCurrentTerm (snd (nwState net h)) t)) true) end else (advanceCurrentTerm (snd (nwState net h)) t, RequestVoteReply (currentTerm (advanceCurrentTerm (snd (nwState net h)) t)) false)) = (d, m) HcandidateEntries : candidateEntries e (nwState net) The term \"nwState net h\" has type \"data\" while it is expected to have type \"RaftState.raft_data term name entry logIndex serverType data clientId output\".", "type": "wrong_type", "handled": true}, {"ctx": ["intros net h h' t lli llt d e m HhandleRequestVote HcandidateEntries.", "unfold handleRequestVote in HhandleRequestVote.", "qsimpl time: 2 use: nwState,currentTerm.", "-"], "tactic": "inversion HhandleRequestVote.", "exn": "No such hypothesis: HhandleRequestVote", "type": "no_hypos", "handled": true}, {"ctx": ["intros net h h' t lli llt d e m HhandleRequestVote HcandidateEntries.", "unfold handleRequestVote in HhandleRequestVote.", "qsimpl time: 2 use: nwState,currentTerm.", "-", "qsimpl time: 2 use: nwState,currentTerm."], "tactic": "-", "exn": "Wrong bullet -: Current bullet - is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["intros net h h' t lli llt d e m HhandleRequestVote HcandidateEntries.", "unfold handleRequestVote in HhandleRequestVote.", "qsimpl time: 2 use: nwState,currentTerm.", "-", "qsimpl time: 2 use: nwState,currentTerm.", "shelve.", "-"], "tactic": "destruct (advanceCurrentTerm (nwState net h) t) as [newState m'] eqn:Hadvance.", "exn": "In environment orig_base_params : BaseParams raft_params : RaftParams orig_base_params one_node_params : OneNodeParams orig_base_params d0 : network -> name -> electionsData * raft_data net : network h : name t, lli, llt : nat e : entry Heqo0 : leaderId (advanceCurrentTerm (snd (nwState net h)) t) = None n : name Heqo : votedFor (advanceCurrentTerm (snd (nwState net h)) t) = Some n Heqs : fin_eq_dec N n n = left eq_refl H : term H0 : currentTerm (snd (nwState net h)) <= t H1 : is_true true H2 : is_true (moreUpToDate llt lli (maxTerm (log (advanceCurrentTerm (snd (nwState net h)) t))) (maxIndex (log (advanceCurrentTerm (snd (nwState net h)) t)))) x : name H4 : wonElection (dedup name_eq_dec (cronies (fst (nwState net x)) (eTerm e))) = true H5 : currentTerm (snd (nwState net x)) = eTerm e -> type (snd (nwState net x)) = Candidate -> False cronies_correct_invariant : forall net : network, refined_raft_intermediate_reachable net -> cronies_correct net votes_correct_invariant : forall net : network, refined_raft_intermediate_reachable net -> votes_correct net no_entries_past_current_term_invariant : forall net : network, raft_intermediate_reachable net -> no_entries_past_current_term net cronies_term_invariant : forall net : network, refined_raft_intermediate_reachable net -> cronies_term net refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (GhostSimulations.deghost net) The term \"nwState net h\" has type \"data\" while it is expected to have type \"RaftState.raft_data term name entry logIndex serverType data clientId output\".", "type": "wrong_type", "handled": true}, {"ctx": ["intros net h h' t lli llt d e m HhandleRequestVote HcandidateEntries.", "unfold handleRequestVote in HhandleRequestVote.", "qsimpl time: 2 use: nwState,currentTerm.", "-", "qsimpl time: 2 use: nwState,currentTerm.", "shelve.", "-", "qsimpl time: 2 use: nwState,advanceCurrentTerm,currentTerm."], "tactic": "destruct (leaderId newState) eqn:HleaderId.", "exn": "The reference newState was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros net h h' t lli llt d e m HhandleRequestVote HcandidateEntries.", "unfold handleRequestVote in HhandleRequestVote.", "qsimpl time: 2 use: nwState,currentTerm.", "-", "qsimpl time: 2 use: nwState,currentTerm.", "shelve.", "-", "qsimpl time: 2 use: nwState,advanceCurrentTerm,currentTerm."], "tactic": "inversion HhandleRequestVote.", "exn": "No such hypothesis: HhandleRequestVote", "type": "no_hypos", "handled": true}, {"ctx": ["intros net h h' t lli llt d e m HhandleRequestVote HcandidateEntries.", "unfold handleRequestVote in HhandleRequestVote.", "qsimpl time: 2 use: nwState,currentTerm.", "-", "qsimpl time: 2 use: nwState,currentTerm.", "shelve.", "-", "qsimpl time: 2 use: nwState,advanceCurrentTerm,currentTerm.", "qsimpl time: 2 use: nwState,advanceCurrentTerm,currentTerm."], "tactic": "destruct ((leaderId newState) && moreUpToDate llt lli (maxTerm (log newState)) (maxIndex (log newState))) eqn:HupdT.", "exn": "The reference newState was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros net h h' t lli llt d e m HhandleRequestVote HcandidateEntries.", "unfold handleRequestVote in HhandleRequestVote.", "qsimpl time: 2 use: nwState,currentTerm.", "-", "qsimpl time: 2 use: nwState,currentTerm.", "shelve.", "-", "qsimpl time: 2 use: nwState,advanceCurrentTerm,currentTerm.", "qsimpl time: 2 use: nwState,advanceCurrentTerm,currentTerm."], "tactic": "destruct (votedFor newState) as [candidateId'|] eqn:HvotedFor.", "exn": "The reference newState was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros net h h' t lli llt d e m HhandleRequestVote HcandidateEntries.", "unfold handleRequestVote in HhandleRequestVote.", "qsimpl time: 2 use: nwState,currentTerm.", "-", "qsimpl time: 2 use: nwState,currentTerm.", "shelve.", "-", "qsimpl time: 2 use: nwState,advanceCurrentTerm,currentTerm.", "qsimpl time: 2 use: nwState,advanceCurrentTerm,currentTerm."], "tactic": "inversion HhandleRequestVote; subst.", "exn": "No such hypothesis: HhandleRequestVote", "type": "no_hypos", "handled": true}, {"ctx": ["intros net h h' t lli llt d e m HhandleRequestVote HcandidateEntries.", "unfold handleRequestVote in HhandleRequestVote.", "qsimpl time: 2 use: nwState,currentTerm.", "-", "qsimpl time: 2 use: nwState,currentTerm.", "shelve.", "-", "qsimpl time: 2 use: nwState,advanceCurrentTerm,currentTerm.", "qsimpl time: 2 use: nwState,advanceCurrentTerm,currentTerm.", "qsimpl time: 2 use: nwState,advanceCurrentTerm,currentTerm."], "tactic": "apply (candidateEntries_wonElection net e h) in HcandidateEntries.", "exn": "No such hypothesis: HcandidateEntries", "type": "no_hypos", "handled": true}, {"ctx": ["intros net h h' t lli llt d e m HhandleRequestVote HcandidateEntries.", "unfold handleRequestVote in HhandleRequestVote.", "qsimpl time: 2 use: nwState,currentTerm.", "-", "qsimpl time: 2 use: nwState,currentTerm.", "shelve.", "-", "qsimpl time: 2 use: nwState,advanceCurrentTerm,currentTerm.", "qsimpl time: 2 use: nwState,advanceCurrentTerm,currentTerm.", "qsimpl time: 2 use: nwState,advanceCurrentTerm,currentTerm.", "qsimpl time: 2 use: nwState,advanceCurrentTerm,currentTerm,candidateEntries_wonElection."], "tactic": "rewrite Hadvance in HcandidateEntries.", "exn": "No such hypothesis: HcandidateEntries", "type": "no_hypos", "handled": true}, {"ctx": ["intros net h h' t lli llt d e m HhandleRequestVote HcandidateEntries.", "unfold handleRequestVote in HhandleRequestVote.", "qsimpl time: 2 use: nwState,currentTerm.", "-", "qsimpl time: 2 use: nwState,currentTerm.", "shelve.", "-", "qsimpl time: 2 use: nwState,advanceCurrentTerm,currentTerm.", "qsimpl time: 2 use: nwState,advanceCurrentTerm,currentTerm.", "qsimpl time: 2 use: nwState,advanceCurrentTerm,currentTerm.", "qsimpl time: 2 use: nwState,advanceCurrentTerm,currentTerm,candidateEntries_wonElection.", "qsimpl time: 2 use: nwState,advanceCurrentTerm,currentTerm,candidateEntries_wonElection."], "tactic": "apply HcandidateEntries.", "exn": "The reference HcandidateEntries was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros net h h' t lli llt d e m HhandleRequestVote HcandidateEntries.", "unfold handleRequestVote in HhandleRequestVote.", "qsimpl time: 2 use: nwState,currentTerm.", "-", "qsimpl time: 2 use: nwState,currentTerm.", "shelve.", "-", "qsimpl time: 2 use: nwState,advanceCurrentTerm,currentTerm.", "qsimpl time: 2 use: nwState,advanceCurrentTerm,currentTerm.", "qsimpl time: 2 use: nwState,advanceCurrentTerm,currentTerm.", "qsimpl time: 2 use: nwState,advanceCurrentTerm,currentTerm,candidateEntries_wonElection.", "qsimpl time: 2 use: nwState,advanceCurrentTerm,currentTerm,candidateEntries_wonElection."], "tactic": "inversion HhandleRequestVote.", "exn": "No such hypothesis: HhandleRequestVote", "type": "no_hypos", "handled": true}, {"ctx": ["intros net h h' t lli llt d e m HhandleRequestVote HcandidateEntries.", "unfold handleRequestVote in HhandleRequestVote.", "qsimpl time: 2 use: nwState,currentTerm.", "-", "qsimpl time: 2 use: nwState,currentTerm.", "shelve.", "-", "qsimpl time: 2 use: nwState,advanceCurrentTerm,currentTerm.", "qsimpl time: 2 use: nwState,advanceCurrentTerm,currentTerm.", "qsimpl time: 2 use: nwState,advanceCurrentTerm,currentTerm.", "qsimpl time: 2 use: nwState,advanceCurrentTerm,currentTerm,candidateEntries_wonElection.", "qsimpl time: 2 use: nwState,advanceCurrentTerm,currentTerm,candidateEntries_wonElection.", "qsimpl time: 2 use: nwState,advanceCurrentTerm,currentTerm,candidateEntries_wonElection."], "tactic": "inversion HhandleRequestVote.", "exn": "No such hypothesis: HhandleRequestVote", "type": "no_hypos", "handled": true}]}, "chat": [], "original": "intros net h h' t lli llt d e m HhandleRequestVote HcandidateEntries. unfold handleRequestVote in HhandleRequestVote. destruct (t <? currentTerm (nwState net h)) eqn:Hlt. - inversion HhandleRequestVote. - destruct (advanceCurrentTerm (nwState net h) t) as [newState m'] eqn:Hadvance. destruct (leaderId newState) eqn:HleaderId. + inversion HhandleRequestVote. + destruct ((leaderId newState) && moreUpToDate llt lli (maxTerm (log newState)) (maxIndex (log newState))) eqn:HupdT. * destruct (votedFor newState) as [candidateId'|] eqn:HvotedFor. ++ inversion HhandleRequestVote; subst. apply (candidateEntries_wonElection net e h) in HcandidateEntries. rewrite Hadvance in HcandidateEntries. apply HcandidateEntries. ++ inversion HhandleRequestVote. * inversion HhandleRequestVote.", "succ": false}]