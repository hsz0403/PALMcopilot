[{"history": {"proof": "qsimpl time: 1 use: refined_raft_intermediate_reachable.", "repairs": ["not_evaluable"], "exceptions": [{"ctx": ["intros net p t n pli plt es ci h e Hreachable Hin Hpbody Hnew Hin_es."], "tactic": "unfold refined_raft_intermediate_reachable in Hreachable.", "exn": "Cannot coerce refined_raft_intermediate_reachable to an evaluable reference.", "type": "not_evaluable", "handled": true}, {"ctx": ["intros net p t n pli plt es ci h e Hreachable Hin Hpbody Hnew Hin_es.", "qsimpl time: 1 use: refined_raft_intermediate_reachable."], "tactic": ["destruct Hreachable as [Hinit | Hstep].", ""], "exn": "Expects a disjunctive pattern with 6 branches.", "type": "num_branch", "handled": false}]}, "chat": [], "original": "intros net p t n pli plt es ci h e Hreachable Hin Hpbody Hnew Hin_es. unfold refined_raft_intermediate_reachable in Hreachable. destruct Hreachable as [Hinit | Hstep]. - discriminate. - destruct Hstep as [failed net failed' net' out Hstep_refined Hstep_failure]. unfold handleAppendEntries in Hpbody. assert (a : p = mkPacket (pSrc p) (pDst p) (pBody p)) by auto. rewrite a in Hpbody. apply handleAppendEntries_packets in Hpbody; auto. destruct Hpbody as [st' [ps' H]]. rewrite <- H. eapply update_elections_data_appendEntries_allEntries_detailed; eauto.", "succ": false}]