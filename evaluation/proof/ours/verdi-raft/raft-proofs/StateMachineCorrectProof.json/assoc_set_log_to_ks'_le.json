[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": ["intros l ks c i.", "unfold a_equiv.", "intros H."], "tactic": "rewrite get_set_diff_default.", "exn": "Found no subterm matching \"assoc_default ?M1852 (assoc_set ?M1852 ?M1856 ?M1853 ?M1855) ?M1854 ?M1857\" in the current goal.", "type": "no_subterm", "handled": true}, {"ctx": ["intros l ks c i.", "unfold a_equiv.", "intros H.", "qsimpl use: get_set_diff_default."], "tactic": "rewrite get_set_same_default.", "exn": "Found no subterm matching \"assoc_default ?M3707 (assoc_set ?M3707 ?M3710 ?M3708 ?M3709) ?M3708 ?M3711\" in the current goal.", "type": "no_subterm", "handled": true}, {"ctx": ["intros l ks c i.", "unfold a_equiv.", "intros H.", "qsimpl use: get_set_diff_default.", "qsimpl use: get_set_diff_default,get_set_same_default."], "tactic": "rewrite assoc_default_a_equiv with (l' := log_to_ks' l (assoc_set clientId_eq_dec ks c i)).", "exn": "Found no subterm matching \"assoc_default ?M5121 ?M5122 ?M5124 ?M5125\" in the current goal.", "type": "no_subterm", "handled": true}, {"ctx": ["intros l ks c i.", "unfold a_equiv.", "intros H.", "qsimpl use: get_set_diff_default.", "qsimpl use: get_set_diff_default,get_set_same_default.", "qsimpl use: assoc_default_a_equiv,get_set_diff_default,get_set_same_default,clientId_eq_dec,assoc_set,log_to_ks'."], "tactic": "apply H.", "exn": "In environment orig_base_params : BaseParams raft_params : RaftParams orig_base_params l1 : list entry -> list (clientId * nat) -> list (clientId * nat) l0 : forall K V : Type, (forall k k' : K, {k = k'} + {k = k' -> False}) -> list (K * V) -> K -> V -> list (K * V) s : forall x y : clientId, {x = y} + {x = y -> False} H4 : forall (K V : Type) (K_eq_dec : forall k k' : K, {k = k'} + {k = k' -> False}) (k : K) (v : V) (l : list (K * V)) (d : V), assoc_default K_eq_dec (assoc_set K_eq_dec l k v) k d = v H3 : forall (K V : Type) (K_eq_dec : forall k k' : K, {k = k'} + {k = k' -> False}) (k k' : K) (v : V) (l : list (K * V)) (d : V), (k = k' -> False) -> assoc_default K_eq_dec (assoc_set K_eq_dec l k v) k' d = assoc_default K_eq_dec l k' d H0 : forall (K V : Type) (K_eq_dec : forall k k' : K, {k = k'} + {k = k' -> False}) (l l' : list (K * V)) (k : K) (v : V), a_equiv K_eq_dec l l' -> assoc_default K_eq_dec l k v = assoc_default K_eq_dec l' k v one_node_params : OneNodeParams orig_base_params l : list entry ks : list (clientId * nat) c : clientId i : nat H : assoc_default clientId_eq_dec (log_to_ks' l ks) c 0 <= i k : clientId log_matching_invariant : forall net : network, raft_intermediate_reachable net -> log_matching net state_machine_safety_invariant : forall net : network, raft_intermediate_reachable net -> state_machine_safety net max_index_sanity_invariant : forall net : network, raft_intermediate_reachable net -> maxIndex_sanity net handleAppendEntries_logs_sorted : forall (net : network) (p : packet) (t : term) (n : name) (pli : logIndex) (plt : term) (es : list entry) (ci : logIndex) (st' : raft_data) (m : msg), raft_intermediate_reachable net -> logs_sorted net -> handleAppendEntries (pDst p) (nwState net (pDst p)) t n pli plt es ci = (st', m) -> pBody p = AppendEntries t n pli plt es ci -> In p (nwPackets net) -> sorted (log st') handleClientRequest_logs_sorted : forall (h : name) (client : clientId) (id : nat) (c : input) (out : list raft_output) (st : raft_data) (l : list (name * msg)) (net : network), handleClientRequest h (nwState net h) client id c = (out, st, l) -> raft_intermediate_reachable net -> logs_sorted_host net -> sorted (log st) logs_sorted_invariant : forall net : network, raft_intermediate_reachable net -> logs_sorted net Unable to unify \"assoc_default clientId_eq_dec (log_to_ks' l ks) c 0 <= i\" with \"assoc s (l0 clientId nat s (l1 l ks) c i) k = assoc s (l1 l (l0 clientId nat s ks c i)) k\".", "type": "cannot_unify", "handled": true}]}, "chat": [], "original": "intros l ks c i. unfold a_equiv. intros H. unfold assoc_default. rewrite get_set_diff_default. rewrite get_set_same_default. rewrite assoc_default_a_equiv with (l' := log_to_ks' l (assoc_set clientId_eq_dec ks c i)). apply H.", "succ": false}]