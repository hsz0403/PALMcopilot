[{"history": {"proof": "intros l1 l2 e H1 H2. srun best use: @findGtIndex_app_in_1. qsimpl time: 1. qsimpl time: 1 use: in_app_iff.", "repairs": ["", "hammer", "not_inductive_product", "no_hypos"], "exceptions": [{"ctx": ["intros l1 l2 e H1 H2.", "unfold sorted in H1."], "tactic": "destruct H1 as [H1 H1'].", "exn": "Not an inductive product.", "type": "not_inductive_product", "handled": true}, {"ctx": ["intros l1 l2 e H1 H2.", "unfold sorted in H1.", "qsimpl time: 1."], "tactic": "intros H3.", "exn": "No product even after head-reduction.", "type": "no_product", "handled": true}, {"ctx": ["intros l1 l2 e H1 H2.", "unfold sorted in H1.", "qsimpl time: 1."], "tactic": "apply H2 in H3.", "exn": "No such hypothesis: H3", "type": "no_hypos", "handled": true}, {"ctx": ["intros l1 l2 e H1 H2.", "unfold sorted in H1.", "qsimpl time: 1."], "tactic": "rewrite in_app_iff in H3.", "exn": "No such hypothesis: H3", "type": "no_hypos", "handled": true}, {"ctx": ["intros l1 l2 e H1 H2.", "unfold sorted in H1.", "qsimpl time: 1.", "qsimpl time: 1 use: in_app_iff."], "tactic": "destruct H3 as [H3 | H3].", "exn": "Unable to find an instance for the variables A, l, l', a.", "type": "no_instance_var", "handled": true}, {"ctx": ["intros l1 l2 e H1 H2.", "unfold sorted in H1.", "qsimpl time: 1.", "qsimpl time: 1 use: in_app_iff.", "exists l2.", "split.", "+"], "tactic": "apply findGtIndex_app_1.", "exn": "In environment orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params l1, l2 : list entry e : entry H1 : (fix sorted (log : list entry) : Prop := match log with | [] => True | e :: es => (forall e' : entry, In e' es -> eIndex e > eIndex e' /\\\\ eTerm e >= eTerm e') /\\\\ sorted es end) (l1 ++ l2) H2 : In e l1 nextIndex_safety_invariant : forall net : network, raft_intermediate_reachable net -> nextIndex_safety net log_matching_invariant : forall net : network, raft_intermediate_reachable net -> log_matching net handleAppendEntries_logs_sorted : forall (net : network) (p : packet) (t : term) (n : name) (pli : logIndex) (plt : term) (es : list entry) (ci : logIndex) (st' : raft_data) (m : msg), raft_intermediate_reachable net -> logs_sorted net -> handleAppendEntries (pDst p) (nwState net (pDst p)) t n pli plt es ci = (st', m) -> pBody p = AppendEntries t n pli plt es ci -> In p (nwPackets net) -> sorted (log st') handleClientRequest_logs_sorted : forall (h : name) (client : clientId) (id : nat) (c : input) (out : list raft_output) (st : raft_data) (l : list (name * msg)) (net : network), handleClientRequest h (nwState net h) client id c = (out, st, l) -> raft_intermediate_reachable net -> logs_sorted_host net -> sorted (log st) logs_sorted_invariant : forall net : network, raft_intermediate_reachable net -> logs_sorted net refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (deghost net) leaders_have_leaderLogs_strong_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaders_have_leaderLogs_strong net H0 : forall (A : Type) (l l' : list A) (a : A), In a l' -> In a (l ++ l') H3 : forall (A : Type) (l l' : list A) (a : A), In a l -> In a (l ++ l') H : forall (A : Type) (l l' : list A) (a : A), In a (l ++ l') -> In a l \\\\/ In a l' Unable to unify \"findGtIndex (?M6250 ++ ?M6251) ?M6252 = findGtIndex ?M6250 ?M6252\" with \"findGtIndex (l1 ++ l2) (eIndex e) = l2\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros l1 l2 e H1 H2.", "unfold sorted in H1.", "qsimpl time: 1.", "qsimpl time: 1 use: in_app_iff.", "exists l2.", "split.", "+", "qsimpl time: 1 use: findGtIndex_app_1,in_app_iff."], "tactic": "apply le_trans with (maxIndex l2).", "exn": "In environment orig_base_params : BaseParams raft_params : RaftParams orig_base_params H4 : forall (l l' : list entry) (i : nat), maxIndex l' <= i -> findGtIndex (l ++ l') i = findGtIndex l i one_node_params : OneNodeParams orig_base_params l1, l2 : list entry e : entry H1 : (fix sorted (log : list entry) : Prop := match log with | [] => True | e :: es => (forall e' : entry, In e' es -> eIndex e > eIndex e' /\\\\ eTerm e >= eTerm e') /\\\\ sorted es end) (l1 ++ l2) H2 : In e l1 nextIndex_safety_invariant : forall net : network, raft_intermediate_reachable net -> nextIndex_safety net log_matching_invariant : forall net : network, raft_intermediate_reachable net -> log_matching net handleAppendEntries_logs_sorted : forall (net : network) (p : packet) (t : term) (n : name) (pli : logIndex) (plt : term) (es : list entry) (ci : logIndex) (st' : raft_data) (m : msg), raft_intermediate_reachable net -> logs_sorted net -> handleAppendEntries (pDst p) (nwState net (pDst p)) t n pli plt es ci = (st', m) -> pBody p = AppendEntries t n pli plt es ci -> In p (nwPackets net) -> sorted (log st') handleClientRequest_logs_sorted : forall (h : name) (client : clientId) (id : nat) (c : input) (out : list raft_output) (st : raft_data) (l : list (name * msg)) (net : network), handleClientRequest h (nwState net h) client id c = (out, st, l) -> raft_intermediate_reachable net -> logs_sorted_host net -> sorted (log st) logs_sorted_invariant : forall net : network, raft_intermediate_reachable net -> logs_sorted net refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (deghost net) leaders_have_leaderLogs_strong_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaders_have_leaderLogs_strong net H0 : forall (A : Type) (l l' : list A) (a : A), In a l' -> In a (l ++ l') H3 : forall (A : Type) (l l' : list A) (a : A), In a l -> In a (l ++ l') H : forall (A : Type) (l l' : list A) (a : A), In a (l ++ l') -> In a l \\\\/ In a l' Unable to unify \"?M8225 <= ?M8227\" with \"findGtIndex (l1 ++ l2) (eIndex e) = l2\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros l1 l2 e H1 H2.", "unfold sorted in H1.", "qsimpl time: 1.", "qsimpl time: 1 use: in_app_iff.", "exists l2.", "split.", "+", "qsimpl time: 1 use: findGtIndex_app_1,in_app_iff.", "qsimpl time: 1 use: findGtIndex_app_1,maxIndex,le_trans,in_app_iff."], "tactic": "apply maxIndex_is_max.", "exn": "In environment H6 : forall n m p : nat, n <= m -> m <= p -> n <= p orig_base_params : BaseParams raft_params : RaftParams orig_base_params H5 : forall (l l' : list entry) (i : nat), maxIndex l' <= i -> findGtIndex (l ++ l') i = findGtIndex l i one_node_params : OneNodeParams orig_base_params l1, l2 : list entry e : entry H1 : (fix sorted (log : list entry) : Prop := match log with | [] => True | e :: es => (forall e' : entry, In e' es -> eIndex e > eIndex e' /\\\\ eTerm e >= eTerm e') /\\\\ sorted es end) (l1 ++ l2) H2 : In e l1 nextIndex_safety_invariant : forall net : network, raft_intermediate_reachable net -> nextIndex_safety net log_matching_invariant : forall net : network, raft_intermediate_reachable net -> log_matching net handleAppendEntries_logs_sorted : forall (net : network) (p : packet) (t : term) (n : name) (pli : logIndex) (plt : term) (es : list entry) (ci : logIndex) (st' : raft_data) (m : msg), raft_intermediate_reachable net -> logs_sorted net -> handleAppendEntries (pDst p) (nwState net (pDst p)) t n pli plt es ci = (st', m) -> pBody p = AppendEntries t n pli plt es ci -> In p (nwPackets net) -> sorted (log st') handleClientRequest_logs_sorted : forall (h : name) (client : clientId) (id : nat) (c : input) (out : list raft_output) (st : raft_data) (l : list (name * msg)) (net : network), handleClientRequest h (nwState net h) client id c = (out, st, l) -> raft_intermediate_reachable net -> logs_sorted_host net -> sorted (log st) logs_sorted_invariant : forall net : network, raft_intermediate_reachable net -> logs_sorted net refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (deghost net) leaders_have_leaderLogs_strong_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaders_have_leaderLogs_strong net H0 : forall (A : Type) (l l' : list A) (a : A), In a l' -> In a (l ++ l') H3 : forall (A : Type) (l l' : list A) (a : A), In a l -> In a (l ++ l') H : forall (A : Type) (l l' : list A) (a : A), In a (l ++ l') -> In a l \\\\/ In a l' H8 : logIndex Unable to unify \"eIndex ?M10338 <= maxIndex ?M10337\" with \"findGtIndex (l1 ++ l2) (eIndex e) = l2\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros l1 l2 e H1 H2.", "unfold sorted in H1.", "qsimpl time: 1.", "qsimpl time: 1 use: in_app_iff.", "exists l2.", "split.", "+", "qsimpl time: 1 use: findGtIndex_app_1,in_app_iff.", "qsimpl time: 1 use: findGtIndex_app_1,maxIndex,le_trans,in_app_iff.", "qsimpl time: 1 use: le_trans,maxIndex_is_max,maxIndex,in_app_iff,findGtIndex_app_1."], "tactic": "apply H1.", "exn": "In environment orig_base_params : BaseParams raft_params : RaftParams orig_base_params l : list entry -> logIndex H10 : forall (l0 l' : list entry) (i : nat), l l' <= i -> findGtIndex (l0 ++ l') i = findGtIndex l0 i H7 : forall (l : list entry) (e : entry), sorted l -> In e l -> maxIndex l >= eIndex e H4 : forall n m p : nat, n <= m -> m <= p -> n <= p H5 : forall (l l' : list entry) (i : nat), maxIndex l' <= i -> findGtIndex (l ++ l') i = findGtIndex l i one_node_params : OneNodeParams orig_base_params l1, l2 : list entry e : entry H1 : (fix sorted (log : list entry) : Prop := match log with | [] => True | e :: es => (forall e' : entry, In e' es -> eIndex e > eIndex e' /\\\\ eTerm e >= eTerm e') /\\\\ sorted es end) (l1 ++ l2) H2 : In e l1 nextIndex_safety_invariant : forall net : network, raft_intermediate_reachable net -> nextIndex_safety net log_matching_invariant : forall net : network, raft_intermediate_reachable net -> log_matching net handleAppendEntries_logs_sorted : forall (net : network) (p : packet) (t : term) (n : name) (pli : logIndex) (plt : term) (es : list entry) (ci : logIndex) (st' : raft_data) (m : msg), raft_intermediate_reachable net -> logs_sorted net -> handleAppendEntries (pDst p) (nwState net (pDst p)) t n pli plt es ci = (st', m) -> pBody p = AppendEntries t n pli plt es ci -> In p (nwPackets net) -> sorted (log st') handleClientRequest_logs_sorted : forall (h : name) (client : clientId) (id : nat) (c : input) (out : list raft_output) (st : raft_data) (l : list (name * msg)) (net : network), handleClientRequest h (nwState net h) client id c = (out, st, l) -> raft_intermediate_reachable net -> logs_sorted_host net -> sorted (log st) logs_sorted_invariant : forall net : network, raft_intermediate_reachable net -> logs_sorted net refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (deghost net) leaders_have_leaderLogs_strong_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaders_have_leaderLogs_strong net H0 : forall (A : Type) (l l' : list A) (a : A), In a l' -> In a (l ++ l') H3 : forall (A : Type) (l l' : list A) (a : A), In a l -> In a (l ++ l') H : forall (A : Type) (l l' : list A) (a : A), In a (l ++ l') -> In a l \\\\/ In a l' H8 : logIndex H6 : forall (A : Type) (l l' : list A) (a : A), In a l \\\\/ In a l' -> In a (l ++ l') Unable to unify \"(fix sorted (log : list entry) : Prop := match log with | [] => True | e :: es => (forall e' : entry, In e' es -> eIndex e > eIndex e' /\\\\ eTerm e >= eTerm e') /\\\\ sorted es end) (l1 ++ l2)\" with \"findGtIndex (l1 ++ l2) (eIndex e) = l2\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros l1 l2 e H1 H2.", "unfold sorted in H1.", "qsimpl time: 1.", "qsimpl time: 1 use: in_app_iff.", "exists l2.", "split.", "+", "qsimpl time: 1 use: findGtIndex_app_1,in_app_iff.", "qsimpl time: 1 use: findGtIndex_app_1,maxIndex,le_trans,in_app_iff.", "qsimpl time: 1 use: le_trans,maxIndex_is_max,maxIndex,in_app_iff,findGtIndex_app_1.", "qsimpl time: 1 use: le_trans,maxIndex_is_max,maxIndex,in_app_iff,findGtIndex_app_1."], "tactic": "apply H3.", "exn": "In environment orig_base_params : BaseParams raft_params : RaftParams orig_base_params l0 : list entry -> logIndex H13 : forall (l l' : list entry) (i : nat), l0 l' <= i -> findGtIndex (l ++ l') i = findGtIndex l i H11 : forall (l : list entry) (e : entry), sorted l -> In e l -> maxIndex l >= eIndex e H9 : forall n m p : nat, n <= m -> m <= p -> n <= p l : list entry -> logIndex H10 : forall (l0 l' : list entry) (i : nat), l l' <= i -> findGtIndex (l0 ++ l') i = findGtIndex l0 i H5 : forall (l l' : list entry) (i : nat), maxIndex l' <= i -> findGtIndex (l ++ l') i = findGtIndex l i one_node_params : OneNodeParams orig_base_params l1, l2 : list entry e : entry H1 : (fix sorted (log : list entry) : Prop := match log with | [] => True | e :: es => (forall e' : entry, In e' es -> eIndex e > eIndex e' /\\\\ eTerm e >= eTerm e') /\\\\ sorted es end) (l1 ++ l2) H2 : In e l1 nextIndex_safety_invariant : forall net : network, raft_intermediate_reachable net -> nextIndex_safety net log_matching_invariant : forall net : network, raft_intermediate_reachable net -> log_matching net handleAppendEntries_logs_sorted : forall (net : network) (p : packet) (t : term) (n : name) (pli : logIndex) (plt : term) (es : list entry) (ci : logIndex) (st' : raft_data) (m : msg), raft_intermediate_reachable net -> logs_sorted net -> handleAppendEntries (pDst p) (nwState net (pDst p)) t n pli plt es ci = (st', m) -> pBody p = AppendEntries t n pli plt es ci -> In p (nwPackets net) -> sorted (log st') handleClientRequest_logs_sorted : forall (h : name) (client : clientId) (id : nat) (c : input) (out : list raft_output) (st : raft_data) (l : list (name * msg)) (net : network), handleClientRequest h (nwState net h) client id c = (out, st, l) -> raft_intermediate_reachable net -> logs_sorted_host net -> sorted (log st) logs_sorted_invariant : forall net : network, raft_intermediate_reachable net -> logs_sorted net refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (deghost net) leaders_have_leaderLogs_strong_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaders_have_leaderLogs_strong net H0 : forall (A : Type) (l l' : list A) (a : A), In a l' -> In a (l ++ l') H3 : forall (A : Type) (l l' : list A) (a : A), In a l -> In a (l ++ l') H : forall (A : Type) (l l' : list A) (a : A), In a (l ++ l') -> In a l \\\\/ In a l' H8 : logIndex H6 : forall (A : Type) (l l' : list A) (a : A), In a l \\\\/ In a l' -> In a (l ++ l') Unable to unify \"(fix In (a : ?M15473) (l : list ?M15473) {struct l} : Prop := match l with | [] => False | b :: m => b = a \\\\/ In a m end) ?M15476 (?M15474 ++ ?M15475)\" with \"findGtIndex (l1 ++ l2) (eIndex e) = l2\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros l1 l2 e H1 H2.", "unfold sorted in H1.", "qsimpl time: 1.", "qsimpl time: 1 use: in_app_iff.", "exists l2.", "split.", "+", "qsimpl time: 1 use: findGtIndex_app_1,in_app_iff.", "qsimpl time: 1 use: findGtIndex_app_1,maxIndex,le_trans,in_app_iff.", "qsimpl time: 1 use: le_trans,maxIndex_is_max,maxIndex,in_app_iff,findGtIndex_app_1.", "qsimpl time: 1 use: le_trans,maxIndex_is_max,maxIndex,in_app_iff,findGtIndex_app_1.", "qsimpl time: 1 use: le_trans,maxIndex_is_max,maxIndex,in_app_iff,findGtIndex_app_1."], "tactic": "apply le_max_r.", "exn": "The reference le_max_r was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros l1 l2 e H1 H2.", "unfold sorted in H1.", "qsimpl time: 1.", "qsimpl time: 1 use: in_app_iff.", "exists l2.", "split.", "+", "qsimpl time: 1 use: findGtIndex_app_1,in_app_iff.", "qsimpl time: 1 use: findGtIndex_app_1,maxIndex,le_trans,in_app_iff.", "qsimpl time: 1 use: le_trans,maxIndex_is_max,maxIndex,in_app_iff,findGtIndex_app_1.", "qsimpl time: 1 use: le_trans,maxIndex_is_max,maxIndex,in_app_iff,findGtIndex_app_1.", "qsimpl time: 1 use: le_trans,maxIndex_is_max,maxIndex,in_app_iff,findGtIndex_app_1.", "apply fast_Zred_factor6."], "tactic": "+", "exn": "Wrong bullet +: Current bullet + is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["intros l1 l2 e H1 H2.", "unfold sorted in H1.", "qsimpl time: 1.", "qsimpl time: 1 use: in_app_iff.", "exists l2.", "split.", "+", "qsimpl time: 1 use: findGtIndex_app_1,in_app_iff.", "qsimpl time: 1 use: findGtIndex_app_1,maxIndex,le_trans,in_app_iff.", "qsimpl time: 1 use: le_trans,maxIndex_is_max,maxIndex,in_app_iff,findGtIndex_app_1.", "qsimpl time: 1 use: le_trans,maxIndex_is_max,maxIndex,in_app_iff,findGtIndex_app_1.", "qsimpl time: 1 use: le_trans,maxIndex_is_max,maxIndex,in_app_iff,findGtIndex_app_1.", "apply fast_Zred_factor6.", "*", "shelve.", "*", "shelve.", "+", "intros x H4."], "tactic": "rewrite in_app_iff.", "exn": "Found no subterm matching \"In ?y (?l ++ ?l0)\" in the current goal.", "type": "no_subterm", "handled": true}, {"ctx": ["intros l1 l2 e H1 H2.", "unfold sorted in H1.", "qsimpl time: 1.", "qsimpl time: 1 use: in_app_iff.", "exists l2.", "split.", "+", "qsimpl time: 1 use: findGtIndex_app_1,in_app_iff.", "qsimpl time: 1 use: findGtIndex_app_1,maxIndex,le_trans,in_app_iff.", "qsimpl time: 1 use: le_trans,maxIndex_is_max,maxIndex,in_app_iff,findGtIndex_app_1.", "qsimpl time: 1 use: le_trans,maxIndex_is_max,maxIndex,in_app_iff,findGtIndex_app_1.", "qsimpl time: 1 use: le_trans,maxIndex_is_max,maxIndex,in_app_iff,findGtIndex_app_1.", "apply fast_Zred_factor6.", "*", "shelve.", "*", "shelve.", "+", "intros x H4.", "qsimpl time: 1 use: le_trans,maxIndex_is_max,maxIndex,in_app_iff,findGtIndex_app_1."], "tactic": "right.", "exn": "Not an inductive product.", "type": "not_inductive_product", "handled": true}, {"ctx": ["intros l1 l2 e H1 H2.", "unfold sorted in H1.", "qsimpl time: 1.", "qsimpl time: 1 use: in_app_iff.", "exists l2.", "split.", "+", "qsimpl time: 1 use: findGtIndex_app_1,in_app_iff.", "qsimpl time: 1 use: findGtIndex_app_1,maxIndex,le_trans,in_app_iff.", "qsimpl time: 1 use: le_trans,maxIndex_is_max,maxIndex,in_app_iff,findGtIndex_app_1.", "qsimpl time: 1 use: le_trans,maxIndex_is_max,maxIndex,in_app_iff,findGtIndex_app_1.", "qsimpl time: 1 use: le_trans,maxIndex_is_max,maxIndex,in_app_iff,findGtIndex_app_1.", "apply fast_Zred_factor6.", "*", "shelve.", "*", "shelve.", "+", "intros x H4.", "qsimpl time: 1 use: le_trans,maxIndex_is_max,maxIndex,in_app_iff,findGtIndex_app_1.", "qsimpl time: 1 use: le_trans,maxIndex_is_max,maxIndex,in_app_iff,findGtIndex_app_1."], "tactic": "apply H1.", "exn": "In environment orig_base_params : BaseParams raft_params : RaftParams orig_base_params l0 : list entry -> logIndex H12 : forall (l l' : list entry) (i : nat), l0 l' <= i -> findGtIndex (l ++ l') i = findGtIndex l i H10 : forall (l : list entry) (e : entry), sorted l -> In e l -> maxIndex l >= eIndex e H9 : forall n m p : nat, n <= m -> m <= p -> n <= p l : list entry -> logIndex H8 : forall (l0 l' : list entry) (i : nat), l l' <= i -> findGtIndex (l0 ++ l') i = findGtIndex l0 i one_node_params : OneNodeParams orig_base_params l1, l2 : list entry e : entry H1 : (fix sorted (log : list entry) : Prop := match log with | [] => True | e :: es => (forall e' : entry, In e' es -> eIndex e > eIndex e' /\\\\ eTerm e >= eTerm e') /\\\\ sorted es end) (l1 ++ l2) H2 : In e l1 nextIndex_safety_invariant : forall net : network, raft_intermediate_reachable net -> nextIndex_safety net log_matching_invariant : forall net : network, raft_intermediate_reachable net -> log_matching net handleAppendEntries_logs_sorted : forall (net : network) (p : packet) (t : term) (n : name) (pli : logIndex) (plt : term) (es : list entry) (ci : logIndex) (st' : raft_data) (m : msg), raft_intermediate_reachable net -> logs_sorted net -> handleAppendEntries (pDst p) (nwState net (pDst p)) t n pli plt es ci = (st', m) -> pBody p = AppendEntries t n pli plt es ci -> In p (nwPackets net) -> sorted (log st') handleClientRequest_logs_sorted : forall (h : name) (client : clientId) (id : nat) (c : input) (out : list raft_output) (st : raft_data) (l : list (name * msg)) (net : network), handleClientRequest h (nwState net h) client id c = (out, st, l) -> raft_intermediate_reachable net -> logs_sorted_host net -> sorted (log st) logs_sorted_invariant : forall net : network, raft_intermediate_reachable net -> logs_sorted net refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (deghost net) leaders_have_leaderLogs_strong_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaders_have_leaderLogs_strong net H0 : forall (A : Type) (l l' : list A) (a : A), In a l' -> In a (l ++ l') H3 : forall (A : Type) (l l' : list A) (a : A), In a l -> In a (l ++ l') H : forall (A : Type) (l l' : list A) (a : A), In a (l ++ l') -> In a l \\\\/ In a l' x : entry H4 : In x l2 H7 : forall (A : Type) (l l' : list A) (a : A), In a l \\\\/ In a l' -> In a (l ++ l') Unable to unify \"(fix sorted (log : list entry) : Prop := match log with | [] => True | e :: es => (forall e' : entry, In e' es -> eIndex e > eIndex e' /\\\\ eTerm e >= eTerm e') /\\\\ sorted es end) (l1 ++ l2)\" with \"In x l1\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros l1 l2 e H1 H2.", "unfold sorted in H1.", "qsimpl time: 1.", "qsimpl time: 1 use: in_app_iff.", "exists l2.", "split.", "+", "qsimpl time: 1 use: findGtIndex_app_1,in_app_iff.", "qsimpl time: 1 use: findGtIndex_app_1,maxIndex,le_trans,in_app_iff.", "qsimpl time: 1 use: le_trans,maxIndex_is_max,maxIndex,in_app_iff,findGtIndex_app_1.", "qsimpl time: 1 use: le_trans,maxIndex_is_max,maxIndex,in_app_iff,findGtIndex_app_1.", "qsimpl time: 1 use: le_trans,maxIndex_is_max,maxIndex,in_app_iff,findGtIndex_app_1.", "apply fast_Zred_factor6.", "*", "shelve.", "*", "shelve.", "+", "intros x H4.", "qsimpl time: 1 use: le_trans,maxIndex_is_max,maxIndex,in_app_iff,findGtIndex_app_1.", "qsimpl time: 1 use: le_trans,maxIndex_is_max,maxIndex,in_app_iff,findGtIndex_app_1.", "qsimpl time: 1 use: le_trans,maxIndex_is_max,maxIndex,in_app_iff,findGtIndex_app_1."], "tactic": "apply H3.", "exn": "In environment orig_base_params : BaseParams raft_params : RaftParams orig_base_params l3 : list entry -> logIndex H13 : forall (l l' : list entry) (i : nat), l3 l' <= i -> findGtIndex (l ++ l') i = findGtIndex l i H6 : forall (l : list entry) (e : entry), sorted l -> In e l -> maxIndex l >= eIndex e H5 : forall n m p : nat, n <= m -> m <= p -> n <= p l0 : list entry -> logIndex H12 : forall (l l' : list entry) (i : nat), l0 l' <= i -> findGtIndex (l ++ l') i = findGtIndex l i l : list entry -> logIndex H8 : forall (l0 l' : list entry) (i : nat), l l' <= i -> findGtIndex (l0 ++ l') i = findGtIndex l0 i one_node_params : OneNodeParams orig_base_params l1, l2 : list entry e : entry H1 : (fix sorted (log : list entry) : Prop := match log with | [] => True | e :: es => (forall e' : entry, In e' es -> eIndex e > eIndex e' /\\\\ eTerm e >= eTerm e') /\\\\ sorted es end) (l1 ++ l2) H2 : In e l1 nextIndex_safety_invariant : forall net : network, raft_intermediate_reachable net -> nextIndex_safety net log_matching_invariant : forall net : network, raft_intermediate_reachable net -> log_matching net handleAppendEntries_logs_sorted : forall (net : network) (p : packet) (t : term) (n : name) (pli : logIndex) (plt : term) (es : list entry) (ci : logIndex) (st' : raft_data) (m : msg), raft_intermediate_reachable net -> logs_sorted net -> handleAppendEntries (pDst p) (nwState net (pDst p)) t n pli plt es ci = (st', m) -> pBody p = AppendEntries t n pli plt es ci -> In p (nwPackets net) -> sorted (log st') handleClientRequest_logs_sorted : forall (h : name) (client : clientId) (id : nat) (c : input) (out : list raft_output) (st : raft_data) (l : list (name * msg)) (net : network), handleClientRequest h (nwState net h) client id c = (out, st, l) -> raft_intermediate_reachable net -> logs_sorted_host net -> sorted (log st) logs_sorted_invariant : forall net : network, raft_intermediate_reachable net -> logs_sorted net refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (deghost net) leaders_have_leaderLogs_strong_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaders_have_leaderLogs_strong net H0 : forall (A : Type) (l l' : list A) (a : A), In a l' -> In a (l ++ l') H3 : forall (A : Type) (l l' : list A) (a : A), In a l -> In a (l ++ l') H : forall (A : Type) (l l' : list A) (a : A), In a (l ++ l') -> In a l \\\\/ In a l' x : entry H4 : In x l2 H7 : forall (A : Type) (l l' : list A) (a : A), In a l \\\\/ In a l' -> In a (l ++ l') Unable to unify \"(fix In (a : ?M23528) (l : list ?M23528) {struct l} : Prop := match l with | [] => False | b :: m => b = a \\\\/ In a m end) ?M23531 (?M23529 ++ ?M23530)\" with \"(fix In (a : entry) (l : list entry) {struct l} : Prop := match l with | [] => False | b :: m => b = a \\\\/ In a m end) x l1\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros l1 l2 e H1 H2.", "unfold sorted in H1.", "qsimpl time: 1.", "qsimpl time: 1 use: in_app_iff.", "exists l2.", "split.", "+", "qsimpl time: 1 use: findGtIndex_app_1,in_app_iff.", "qsimpl time: 1 use: findGtIndex_app_1,maxIndex,le_trans,in_app_iff.", "qsimpl time: 1 use: le_trans,maxIndex_is_max,maxIndex,in_app_iff,findGtIndex_app_1.", "qsimpl time: 1 use: le_trans,maxIndex_is_max,maxIndex,in_app_iff,findGtIndex_app_1.", "qsimpl time: 1 use: le_trans,maxIndex_is_max,maxIndex,in_app_iff,findGtIndex_app_1.", "apply fast_Zred_factor6.", "*", "shelve.", "*", "shelve.", "+", "intros x H4.", "qsimpl time: 1 use: le_trans,maxIndex_is_max,maxIndex,in_app_iff,findGtIndex_app_1.", "qsimpl time: 1 use: le_trans,maxIndex_is_max,maxIndex,in_app_iff,findGtIndex_app_1.", "qsimpl time: 1 use: le_trans,maxIndex_is_max,maxIndex,in_app_iff,findGtIndex_app_1.", "qsimpl time: 1 use: le_trans,maxIndex_is_max,maxIndex,in_app_iff,findGtIndex_app_1."], "tactic": "apply H1 in H3.", "exn": "Unable to apply lemma of type \"(fix sorted (log : list entry) : Prop := match log with | [] => True | e :: es => (forall e' : entry, In e' es -> eIndex e > eIndex e' /\\\\ eTerm e >= eTerm e') /\\\\ sorted es end) (l1 ++ l2)\" on hypothesis of type \"forall (A : Type) (l l' : list A) (a : A), In a l -> In a (l ++ l')\".", "type": "cannot_apply_in", "handled": true}, {"ctx": ["intros l1 l2 e H1 H2.", "unfold sorted in H1.", "qsimpl time: 1.", "qsimpl time: 1 use: in_app_iff.", "exists l2.", "split.", "+", "qsimpl time: 1 use: findGtIndex_app_1,in_app_iff.", "qsimpl time: 1 use: findGtIndex_app_1,maxIndex,le_trans,in_app_iff.", "qsimpl time: 1 use: le_trans,maxIndex_is_max,maxIndex,in_app_iff,findGtIndex_app_1.", "qsimpl time: 1 use: le_trans,maxIndex_is_max,maxIndex,in_app_iff,findGtIndex_app_1.", "qsimpl time: 1 use: le_trans,maxIndex_is_max,maxIndex,in_app_iff,findGtIndex_app_1.", "apply fast_Zred_factor6.", "*", "shelve.", "*", "shelve.", "+", "intros x H4.", "qsimpl time: 1 use: le_trans,maxIndex_is_max,maxIndex,in_app_iff,findGtIndex_app_1.", "qsimpl time: 1 use: le_trans,maxIndex_is_max,maxIndex,in_app_iff,findGtIndex_app_1.", "qsimpl time: 1 use: le_trans,maxIndex_is_max,maxIndex,in_app_iff,findGtIndex_app_1.", "qsimpl time: 1 use: le_trans,maxIndex_is_max,maxIndex,in_app_iff,findGtIndex_app_1.", "qsimpl time: 1 use: le_trans,maxIndex_is_max,maxIndex,in_app_iff,findGtIndex_app_1."], "tactic": "destruct H3 as [H4 H5].", "exn": "Unable to find an instance for the variables A, l, l', a.", "type": "no_instance_var", "handled": true}, {"ctx": ["intros l1 l2 e H1 H2.", "unfold sorted in H1.", "qsimpl time: 1.", "qsimpl time: 1 use: in_app_iff.", "exists l2.", "split.", "+", "qsimpl time: 1 use: findGtIndex_app_1,in_app_iff.", "qsimpl time: 1 use: findGtIndex_app_1,maxIndex,le_trans,in_app_iff.", "qsimpl time: 1 use: le_trans,maxIndex_is_max,maxIndex,in_app_iff,findGtIndex_app_1.", "qsimpl time: 1 use: le_trans,maxIndex_is_max,maxIndex,in_app_iff,findGtIndex_app_1.", "qsimpl time: 1 use: le_trans,maxIndex_is_max,maxIndex,in_app_iff,findGtIndex_app_1.", "apply fast_Zred_factor6.", "*", "shelve.", "*", "shelve.", "+", "intros x H4.", "qsimpl time: 1 use: le_trans,maxIndex_is_max,maxIndex,in_app_iff,findGtIndex_app_1.", "qsimpl time: 1 use: le_trans,maxIndex_is_max,maxIndex,in_app_iff,findGtIndex_app_1.", "qsimpl time: 1 use: le_trans,maxIndex_is_max,maxIndex,in_app_iff,findGtIndex_app_1.", "qsimpl time: 1 use: le_trans,maxIndex_is_max,maxIndex,in_app_iff,findGtIndex_app_1.", "qsimpl time: 1 use: le_trans,maxIndex_is_max,maxIndex,in_app_iff,findGtIndex_app_1.", "qsimpl time: 1 use: le_trans,maxIndex_is_max,maxIndex,in_app_iff,findGtIndex_app_1."], "tactic": "exists (findGtIndex l2 (eIndex e)).", "exn": "Not an inductive product.", "type": "not_inductive_product", "handled": true}, {"ctx": ["intros l1 l2 e H1 H2.", "unfold sorted in H1.", "qsimpl time: 1.", "qsimpl time: 1 use: in_app_iff.", "exists l2.", "split.", "+", "qsimpl time: 1 use: findGtIndex_app_1,in_app_iff.", "qsimpl time: 1 use: findGtIndex_app_1,maxIndex,le_trans,in_app_iff.", "qsimpl time: 1 use: le_trans,maxIndex_is_max,maxIndex,in_app_iff,findGtIndex_app_1.", "qsimpl time: 1 use: le_trans,maxIndex_is_max,maxIndex,in_app_iff,findGtIndex_app_1.", "qsimpl time: 1 use: le_trans,maxIndex_is_max,maxIndex,in_app_iff,findGtIndex_app_1.", "apply fast_Zred_factor6.", "*", "shelve.", "*", "shelve.", "+", "intros x H4.", "qsimpl time: 1 use: le_trans,maxIndex_is_max,maxIndex,in_app_iff,findGtIndex_app_1.", "qsimpl time: 1 use: le_trans,maxIndex_is_max,maxIndex,in_app_iff,findGtIndex_app_1.", "qsimpl time: 1 use: le_trans,maxIndex_is_max,maxIndex,in_app_iff,findGtIndex_app_1.", "qsimpl time: 1 use: le_trans,maxIndex_is_max,maxIndex,in_app_iff,findGtIndex_app_1.", "qsimpl time: 1 use: le_trans,maxIndex_is_max,maxIndex,in_app_iff,findGtIndex_app_1.", "qsimpl time: 1 use: le_trans,maxIndex_is_max,maxIndex,in_app_iff,findGtIndex_app_1.", "qsimpl time: 1 use: findGtIndex,eIndex,le_trans,maxIndex_is_max,maxIndex,in_app_iff,findGtIndex_app_1."], "tactic": "split.", "exn": "Not an inductive product.", "type": "not_inductive_product", "handled": true}, {"ctx": ["intros l1 l2 e H1 H2.", "unfold sorted in H1.", "qsimpl time: 1.", "qsimpl time: 1 use: in_app_iff.", "exists l2.", "split.", "+", "qsimpl time: 1 use: findGtIndex_app_1,in_app_iff.", "qsimpl time: 1 use: findGtIndex_app_1,maxIndex,le_trans,in_app_iff.", "qsimpl time: 1 use: le_trans,maxIndex_is_max,maxIndex,in_app_iff,findGtIndex_app_1.", "qsimpl time: 1 use: le_trans,maxIndex_is_max,maxIndex,in_app_iff,findGtIndex_app_1.", "qsimpl time: 1 use: le_trans,maxIndex_is_max,maxIndex,in_app_iff,findGtIndex_app_1.", "apply fast_Zred_factor6.", "*", "shelve.", "*", "shelve.", "+", "intros x H4.", "qsimpl time: 1 use: le_trans,maxIndex_is_max,maxIndex,in_app_iff,findGtIndex_app_1.", "qsimpl time: 1 use: le_trans,maxIndex_is_max,maxIndex,in_app_iff,findGtIndex_app_1.", "qsimpl time: 1 use: le_trans,maxIndex_is_max,maxIndex,in_app_iff,findGtIndex_app_1.", "qsimpl time: 1 use: le_trans,maxIndex_is_max,maxIndex,in_app_iff,findGtIndex_app_1.", "qsimpl time: 1 use: le_trans,maxIndex_is_max,maxIndex,in_app_iff,findGtIndex_app_1.", "qsimpl time: 1 use: le_trans,maxIndex_is_max,maxIndex,in_app_iff,findGtIndex_app_1.", "qsimpl time: 1 use: findGtIndex,eIndex,le_trans,maxIndex_is_max,maxIndex,in_app_iff,findGtIndex_app_1.", "qsimpl time: 1 use: findGtIndex,eIndex,le_trans,maxIndex_is_max,maxIndex,in_app_iff,findGtIndex_app_1."], "tactic": "+", "exn": "Wrong bullet +: Current bullet + is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["intros l1 l2 e H1 H2.", "unfold sorted in H1.", "qsimpl time: 1.", "qsimpl time: 1 use: in_app_iff.", "exists l2.", "split.", "+", "qsimpl time: 1 use: findGtIndex_app_1,in_app_iff.", "qsimpl time: 1 use: findGtIndex_app_1,maxIndex,le_trans,in_app_iff.", "qsimpl time: 1 use: le_trans,maxIndex_is_max,maxIndex,in_app_iff,findGtIndex_app_1.", "qsimpl time: 1 use: le_trans,maxIndex_is_max,maxIndex,in_app_iff,findGtIndex_app_1.", "qsimpl time: 1 use: le_trans,maxIndex_is_max,maxIndex,in_app_iff,findGtIndex_app_1.", "apply fast_Zred_factor6.", "*", "shelve.", "*", "shelve.", "+", "intros x H4.", "qsimpl time: 1 use: le_trans,maxIndex_is_max,maxIndex,in_app_iff,findGtIndex_app_1.", "qsimpl time: 1 use: le_trans,maxIndex_is_max,maxIndex,in_app_iff,findGtIndex_app_1.", "qsimpl time: 1 use: le_trans,maxIndex_is_max,maxIndex,in_app_iff,findGtIndex_app_1.", "qsimpl time: 1 use: le_trans,maxIndex_is_max,maxIndex,in_app_iff,findGtIndex_app_1.", "qsimpl time: 1 use: le_trans,maxIndex_is_max,maxIndex,in_app_iff,findGtIndex_app_1.", "qsimpl time: 1 use: le_trans,maxIndex_is_max,maxIndex,in_app_iff,findGtIndex_app_1.", "qsimpl time: 1 use: findGtIndex,eIndex,le_trans,maxIndex_is_max,maxIndex,in_app_iff,findGtIndex_app_1.", "qsimpl time: 1 use: findGtIndex,eIndex,le_trans,maxIndex_is_max,maxIndex,in_app_iff,findGtIndex_app_1.", "shelve."], "tactic": "+", "exn": "Wrong bullet +: No more subgoals.", "type": "no_more_subgoals", "handled": true}]}, "chat": [], "original": "intros l1 l2 e H1 H2. unfold sorted in H1. destruct H1 as [H1 H1']. intros H3. apply H2 in H3. rewrite in_app_iff in H3. destruct H3 as [H3 | H3]. - exists l2. split. + apply findGtIndex_app_1. apply le_trans with (maxIndex l2). * apply maxIndex_is_max. apply H1. apply H3. * apply le_max_r. + intros x H4. rewrite in_app_iff. right. apply H1. apply H3. - apply H1 in H3. destruct H3 as [H4 H5]. exists (findGtIndex l2 (eIndex e)). split. + symmetry. apply findGtIndex_app_2. * apply H1. * apply H4. + intros x H6. rewrite in_app_iff. right. apply H5. apply H6.", "succ": true}]