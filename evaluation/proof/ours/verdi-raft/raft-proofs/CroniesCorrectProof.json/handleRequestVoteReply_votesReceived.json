[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": ["intros h st src t v st' crony HhandleRequestVoteReply HinVotesReceived.", "unfold handleRequestVoteReply in HhandleRequestVoteReply.", "destruct (currentTerm st <? t) eqn:HtermLess.", "-", "inversion HhandleRequestVoteReply."], "tactic": "-", "exn": "Wrong bullet -: Current bullet - is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["intros h st src t v st' crony HhandleRequestVoteReply HinVotesReceived.", "unfold handleRequestVoteReply in HhandleRequestVoteReply.", "destruct (currentTerm st <? t) eqn:HtermLess.", "-", "inversion HhandleRequestVoteReply.", "shelve.", "-", "destruct (t <? currentTerm st) eqn:HtLess.", "+", "inversion HhandleRequestVoteReply."], "tactic": "+", "exn": "Wrong bullet +: Current bullet + is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["intros h st src t v st' crony HhandleRequestVoteReply HinVotesReceived.", "unfold handleRequestVoteReply in HhandleRequestVoteReply.", "destruct (currentTerm st <? t) eqn:HtermLess.", "-", "inversion HhandleRequestVoteReply.", "shelve.", "-", "destruct (t <? currentTerm st) eqn:HtLess.", "+", "inversion HhandleRequestVoteReply.", "shelve.", "+"], "tactic": "destruct (voteGranted && wonElection (dedup name_eq_dec (src :: votesReceived st))) eqn:Hwon.", "exn": "The reference voteGranted was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros h st src t v st' crony HhandleRequestVoteReply HinVotesReceived.", "unfold handleRequestVoteReply in HhandleRequestVoteReply.", "destruct (currentTerm st <? t) eqn:HtermLess.", "-", "inversion HhandleRequestVoteReply.", "shelve.", "-", "destruct (t <? currentTerm st) eqn:HtLess.", "+", "inversion HhandleRequestVoteReply.", "shelve.", "+", "inversion HhandleRequestVoteReply; subst.", "left.", "split; auto."], "tactic": "right.", "exn": "Not an inductive goal with 2 constructors.", "type": "not_inductive_goal", "handled": true}, {"ctx": ["intros h st src t v st' crony HhandleRequestVoteReply HinVotesReceived.", "unfold handleRequestVoteReply in HhandleRequestVoteReply.", "destruct (currentTerm st <? t) eqn:HtermLess.", "-", "inversion HhandleRequestVoteReply.", "shelve.", "-", "destruct (t <? currentTerm st) eqn:HtLess.", "+", "inversion HhandleRequestVoteReply.", "shelve.", "+", "inversion HhandleRequestVoteReply; subst.", "left.", "split; auto.", "qsimpl."], "tactic": "apply votes_received_cronies; auto.", "exn": "In environment orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params h : name st : RaftState.raft_data term name entry logIndex serverType data clientId output src : name t : nat v : bool crony : name HtermLess : (currentTerm st <? t) = false HtLess : (t <? currentTerm st) = false Heqs : type st = Follower HinVotesReceived : In crony (votesReceived st) candidates_vote_for_selves_invariant : forall net : network, raft_intermediate_reachable net -> candidates_vote_for_selves net votes_correct_invariant : forall net : network, refined_raft_intermediate_reachable net -> votes_correct net refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (deghost net) Unable to unify \"Prop\" with \"crony = src\".", "type": "cannot_unify", "handled": true}]}, "chat": [], "original": "intros h st src t v st' crony HhandleRequestVoteReply HinVotesReceived. unfold handleRequestVoteReply in HhandleRequestVoteReply. destruct (currentTerm st <? t) eqn:HtermLess. - inversion HhandleRequestVoteReply. - destruct (t <? currentTerm st) eqn:HtLess. + inversion HhandleRequestVoteReply. + destruct (voteGranted && wonElection (dedup name_eq_dec (src :: votesReceived st))) eqn:Hwon. * inversion HhandleRequestVoteReply; subst. left. split; auto. right. apply votes_received_cronies; auto.", "succ": false}]