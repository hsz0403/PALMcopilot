[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": ["intros l t e Hcontradicting t' log HIn Hgt."], "tactic": "apply Hcontradicting in HIn as Hcontr; [ | apply Hgt].", "exn": "Unable to apply lemma of type \"contradicting_leader_logs_on_leader l t e = []\" on hypothesis of type \"In (t', log) l\".", "type": "cannot_apply_in", "handled": true}, {"ctx": ["intros l t e Hcontradicting t' log HIn Hgt.", "qsimpl."], "tactic": "apply Forall_forall with (x := (t', log)) in Hcontr.", "exn": "No such hypothesis: Hcontr", "type": "no_hypos", "handled": true}, {"ctx": ["intros l t e Hcontradicting t' log HIn Hgt.", "qsimpl.", "qsimpl use: Forall_forall."], "tactic": "apply Hcontr.", "exn": "The reference Hcontr was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros l t e Hcontradicting t' log HIn Hgt.", "qsimpl.", "qsimpl use: Forall_forall.", "apply in_split in HIn.", "destruct HIn as [l1 [l2 Heq]].", "rewrite Heq in *."], "tactic": "apply in_app_or in Hcontr.", "exn": "No such hypothesis: Hcontr", "type": "no_hypos", "handled": true}, {"ctx": ["intros l t e Hcontradicting t' log HIn Hgt.", "qsimpl.", "qsimpl use: Forall_forall.", "apply in_split in HIn.", "destruct HIn as [l1 [l2 Heq]].", "rewrite Heq in *.", "qsimpl use: in_app_or,Forall_forall."], "tactic": "destruct Hcontr as [Hinl1 | Hinl2].", "exn": "The reference Hcontr was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros l t e Hcontradicting t' log HIn Hgt.", "qsimpl.", "qsimpl use: Forall_forall.", "apply in_split in HIn.", "destruct HIn as [l1 [l2 Heq]].", "rewrite Heq in *.", "qsimpl use: in_app_or,Forall_forall.", "destruct wonElection as [Hinl1 | Hinl2].", "-"], "tactic": "apply in_inv in Hinl1.", "exn": "No such hypothesis: Hinl1", "type": "no_hypos", "handled": true}, {"ctx": ["intros l t e Hcontradicting t' log HIn Hgt.", "qsimpl.", "qsimpl use: Forall_forall.", "apply in_split in HIn.", "destruct HIn as [l1 [l2 Heq]].", "rewrite Heq in *.", "qsimpl use: in_app_or,Forall_forall.", "destruct wonElection as [Hinl1 | Hinl2].", "-", "qsimpl use: in_inv,in_app_or,Forall_forall."], "tactic": "destruct Hinl1 as [He | Hinl1].", "exn": "No such goal. Focus next goal with bullet -.", "type": "next_goal", "handled": true}, {"ctx": ["intros l t e Hcontradicting t' log HIn Hgt.", "qsimpl.", "qsimpl use: Forall_forall.", "apply in_split in HIn.", "destruct HIn as [l1 [l2 Heq]].", "rewrite Heq in *.", "qsimpl use: in_app_or,Forall_forall.", "destruct wonElection as [Hinl1 | Hinl2].", "-", "qsimpl use: in_inv,in_app_or,Forall_forall.", "-"], "tactic": "apply in_split in Hinl2.", "exn": "No such hypothesis: Hinl2", "type": "no_hypos", "handled": true}, {"ctx": ["intros l t e Hcontradicting t' log HIn Hgt.", "qsimpl.", "qsimpl use: Forall_forall.", "apply in_split in HIn.", "destruct HIn as [l1 [l2 Heq]].", "rewrite Heq in *.", "qsimpl use: in_app_or,Forall_forall.", "destruct wonElection as [Hinl1 | Hinl2].", "-", "qsimpl use: in_inv,in_app_or,Forall_forall.", "-", "qsimpl use: in_inv,in_app_or,Forall_forall,in_split."], "tactic": "destruct Hinl2 as [l2' [l2'' Heq2]].", "exn": "The reference Hinl2 was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros l t e Hcontradicting t' log HIn Hgt.", "qsimpl.", "qsimpl use: Forall_forall.", "apply in_split in HIn.", "destruct HIn as [l1 [l2 Heq]].", "rewrite Heq in *.", "qsimpl use: in_app_or,Forall_forall.", "destruct wonElection as [Hinl1 | Hinl2].", "-", "qsimpl use: in_inv,in_app_or,Forall_forall.", "-", "qsimpl use: in_inv,in_app_or,Forall_forall,in_split.", "destruct Build_every_entry_was_created_interface as [l2' [l2'' Heq2]]."], "tactic": "rewrite Heq2 in *.", "exn": "The reference Heq2 was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros l t e Hcontradicting t' log HIn Hgt.", "qsimpl.", "qsimpl use: Forall_forall.", "apply in_split in HIn.", "destruct HIn as [l1 [l2 Heq]].", "rewrite Heq in *.", "qsimpl use: in_app_or,Forall_forall.", "destruct wonElection as [Hinl1 | Hinl2].", "-", "qsimpl use: in_inv,in_app_or,Forall_forall.", "-", "qsimpl use: in_inv,in_app_or,Forall_forall,in_split.", "destruct Build_every_entry_was_created_interface as [l2' [l2'' Heq2]]."], "tactic": "apply in_or_app.", "exn": "In environment H7 : forall (A : Type) (x : A) (l : list A), In x l -> exists l1 l2 : list A, l = l1 ++ x :: l2 H5 : forall (A : Type) (l m : list A) (a : A), In a (l ++ m) -> In a l \\\\/ In a m orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params t : nat e : entry t' : nat log : list entry l1, l2 : list (nat * list entry) Hcontradicting : contradicting_leader_logs_on_leader (l1 ++ (t', log) :: l2) t e = [] Hgt : t' > t leaderLogs_entries_match_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaderLogs_entries_match_host net votesWithLog_sorted_invariant : forall net : network, refined_raft_intermediate_reachable net -> votesWithLog_sorted net allEntries_votesWithLog_invariant : forall net : network, refined_raft_intermediate_reachable net -> allEntries_votesWithLog net leaderLogs_votesWithLog_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaderLogs_votesWithLog net every_entry_was_created_invariant : forall net : network, refined_raft_intermediate_reachable net -> every_entry_was_created net every_entry_was_created_in_any_log_invariant : forall (net : network) (e : entry), refined_raft_intermediate_reachable net -> in_any_log net e -> term_was_created net (eTerm e) leaderLogs_preserved_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaderLogs_preserved net leaderLogs_term_sanity_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaderLogs_term_sanity net leaderLogs_currentTerm_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaderLogs_currentTerm_sanity net leaderLogs_currentTerm_sanity_candidate_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaderLogs_currentTerm_sanity_candidate net allEntries_leaderLogs_prefix_within_term_invariant : forall net : network, refined_raft_intermediate_reachable net -> allEntries_leaderLogs_prefix_within_term net log_log_prefix_within_term_invariant : forall net : network, refined_raft_intermediate_reachable net -> log_log_prefix_within_term net refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (GhostSimulations.deghost net) H : forall net : network, refined_raft_intermediate_reachable net -> terms_and_indices_from_one_ll net H0 : forall net : network, refined_raft_intermediate_reachable net -> terms_and_indices_from_one_vwl net H1 : forall (A : Type) (P : A -> Prop) (l : list A), (forall x : A, In x l -> P x) -> Forall P l H2 : forall (A : Type) (P : A -> Prop) (l : list A), Forall P l -> forall x : A, In x l -> P x H3 : forall (A : Type) (a b : A) (l : list A), In b l -> a = b \\\\/ In b l H4 : forall (A : Type) (a b : A) (l : list A), a = b -> a = b \\\\/ In b l a : ?M10508 Unable to unify \"In a ?M10509 \\\\/ In a ?M10510\" with \"refined_raft_intermediate_reachable a\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros l t e Hcontradicting t' log HIn Hgt.", "qsimpl.", "qsimpl use: Forall_forall.", "apply in_split in HIn.", "destruct HIn as [l1 [l2 Heq]].", "rewrite Heq in *.", "qsimpl use: in_app_or,Forall_forall.", "destruct wonElection as [Hinl1 | Hinl2].", "-", "qsimpl use: in_inv,in_app_or,Forall_forall.", "-", "qsimpl use: in_inv,in_app_or,Forall_forall,in_split.", "destruct Build_every_entry_was_created_interface as [l2' [l2'' Heq2]].", "qsimpl use: in_or_app,in_inv,in_app_or,in_split,Forall_forall."], "tactic": "right.", "exn": "Not an inductive goal with 2 constructors.", "type": "not_inductive_goal", "handled": true}, {"ctx": ["intros l t e Hcontradicting t' log HIn Hgt.", "qsimpl.", "qsimpl use: Forall_forall.", "apply in_split in HIn.", "destruct HIn as [l1 [l2 Heq]].", "rewrite Heq in *.", "qsimpl use: in_app_or,Forall_forall.", "destruct wonElection as [Hinl1 | Hinl2].", "-", "qsimpl use: in_inv,in_app_or,Forall_forall.", "-", "qsimpl use: in_inv,in_app_or,Forall_forall,in_split.", "destruct Build_every_entry_was_created_interface as [l2' [l2'' Heq2]].", "qsimpl use: in_or_app,in_inv,in_app_or,in_split,Forall_forall.", "qsimpl use: in_or_app,in_inv,in_app_or,in_split,Forall_forall."], "tactic": "apply in_or_app.", "exn": "In environment H7 : forall (A : Type) (x : A) (l : list A), In x l -> exists l1 l2 : list A, l = l1 ++ x :: l2 H5 : forall (A : Type) (l m : list A) (a : A), In a (l ++ m) -> In a l \\\\/ In a m orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params t : nat e : entry t' : nat log : list entry l1, l2 : list (nat * list entry) Hcontradicting : contradicting_leader_logs_on_leader (l1 ++ (t', log) :: l2) t e = [] Hgt : t' > t leaderLogs_entries_match_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaderLogs_entries_match_host net votesWithLog_sorted_invariant : forall net : network, refined_raft_intermediate_reachable net -> votesWithLog_sorted net allEntries_votesWithLog_invariant : forall net : network, refined_raft_intermediate_reachable net -> allEntries_votesWithLog net leaderLogs_votesWithLog_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaderLogs_votesWithLog net every_entry_was_created_invariant : forall net : network, refined_raft_intermediate_reachable net -> every_entry_was_created net every_entry_was_created_in_any_log_invariant : forall (net : network) (e : entry), refined_raft_intermediate_reachable net -> in_any_log net e -> term_was_created net (eTerm e) leaderLogs_preserved_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaderLogs_preserved net leaderLogs_term_sanity_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaderLogs_term_sanity net leaderLogs_currentTerm_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaderLogs_currentTerm_sanity net leaderLogs_currentTerm_sanity_candidate_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaderLogs_currentTerm_sanity_candidate net allEntries_leaderLogs_prefix_within_term_invariant : forall net : network, refined_raft_intermediate_reachable net -> allEntries_leaderLogs_prefix_within_term net log_log_prefix_within_term_invariant : forall net : network, refined_raft_intermediate_reachable net -> log_log_prefix_within_term net refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (GhostSimulations.deghost net) H : forall net : network, refined_raft_intermediate_reachable net -> terms_and_indices_from_one_ll net H0 : forall net : network, refined_raft_intermediate_reachable net -> terms_and_indices_from_one_vwl net H1 : forall (A : Type) (P : A -> Prop) (l : list A), (forall x : A, In x l -> P x) -> Forall P l H2 : forall (A : Type) (P : A -> Prop) (l : list A), Forall P l -> forall x : A, In x l -> P x H3 : forall (A : Type) (a b : A) (l : list A), In b l -> a = b \\\\/ In b l H4 : forall (A : Type) (a b : A) (l : list A), a = b -> a = b \\\\/ In b l l2' : forall net : network, refined_raft_intermediate_reachable net -> every_entry_was_created net Unable to unify \"(fix In (a : ?M10932) (l : list ?M10932) {struct l} : Prop := match l with | [] => False | b :: m => b = a \\\\/ In a m end) ?M10935 (?M10933 ++ ?M10934)\" with \"refined_raft_intermediate_reachable ?net\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros l t e Hcontradicting t' log HIn Hgt.", "qsimpl.", "qsimpl use: Forall_forall.", "apply in_split in HIn.", "destruct HIn as [l1 [l2 Heq]].", "rewrite Heq in *.", "qsimpl use: in_app_or,Forall_forall.", "destruct wonElection as [Hinl1 | Hinl2].", "-", "qsimpl use: in_inv,in_app_or,Forall_forall.", "-", "qsimpl use: in_inv,in_app_or,Forall_forall,in_split.", "destruct Build_every_entry_was_created_interface as [l2' [l2'' Heq2]].", "qsimpl use: in_or_app,in_inv,in_app_or,in_split,Forall_forall.", "qsimpl use: in_or_app,in_inv,in_app_or,in_split,Forall_forall.", "qsimpl use: in_or_app,in_inv,in_app_or,in_split,Forall_forall."], "tactic": "right.", "exn": "Not an inductive goal with 2 constructors.", "type": "not_inductive_goal", "handled": true}]}, "chat": [], "original": "intros l t e Hcontradicting t' log HIn Hgt. apply Hcontradicting in HIn as Hcontr; [ | apply Hgt]. apply Forall_forall with (x := (t', log)) in Hcontr. apply Hcontr. apply in_split in HIn. destruct HIn as [l1 [l2 Heq]]. rewrite Heq in *. apply in_app_or in Hcontr. destruct Hcontr as [Hinl1 | Hinl2]. - apply in_inv in Hinl1. destruct Hinl1 as [He | Hinl1]. + subst. apply Nat.lt_irrefl in Hgt. contradiction. + apply in_split in Hinl1. destruct Hinl1 as [l1' [l1'' Heq1]]. rewrite Heq1 in *. apply in_split in Hinl2. destruct Hinl2 as [l2' [l2'' Heq2]]. rewrite Heq2 in *. apply in_or_app. right. apply in_or_app. left. subst. apply in_or_app. right. auto. - apply in_split in Hinl2. destruct Hinl2 as [l2' [l2'' Heq2]]. rewrite Heq2 in *. apply in_or_app. right. apply in_or_app. right. auto.", "succ": false}]