[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": ["intros ll t e t' l H.", "unfold contradicting_leader_logs_on_leader in H.", "destruct ll as [| [t'' log''] ll']; simpl in H; try contradiction."], "tactic": ["destruct (sumbool_and (t < t'') (~ t < t'') (~ In e log'') (In e log'') (lt_dec t t'') (sumbool_not (In e log'') (~ In e log'') (in_dec entry_eq_dec e log''))) as [Heq | Hneq]; [destruct Heq as [Heq1 [Heq2 Heq3]] | ]; [rewrite Heq1; now left | apply in_cons in H; apply in_inv in H; destruct H as [Hd | Hin]; [apply in_eq in Hd; subst; now left | right; apply Hneq; repeat split; assumption | apply in_eq in Hin; contradiction]].", ""], "exn": "Expects a disjunctive pattern with 0 branches.", "type": "num_branch", "handled": false}]}, "chat": [], "original": "intros ll t e t' l H. unfold contradicting_leader_logs_on_leader in H. destruct ll as [| [t'' log''] ll']; simpl in H; try contradiction. destruct (sumbool_and (t < t'') (~ t < t'') (~ In e log'') (In e log'') (lt_dec t t'') (sumbool_not (In e log'') (~ In e log'') (in_dec entry_eq_dec e log''))) as [Heq | Hneq]; [destruct Heq as [Heq1 [Heq2 Heq3]] | ]; [rewrite Heq1; now left | apply in_cons in H; apply in_inv in H; destruct H as [Hd | Hin]; [apply in_eq in Hd; subst; now left | right; apply Hneq; repeat split; assumption | apply in_eq in Hin; contradiction]].", "succ": false}]