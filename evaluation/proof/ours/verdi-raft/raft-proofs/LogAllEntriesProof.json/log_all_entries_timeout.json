[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": ["unfold refined_raft_net_invariant_timeout, log_all_entries in *.", "intros."], "tactic": "apply H; eauto.", "exn": "In environment orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params rri : raft_refinement_interface tsi : term_sanity_interface net : network h : name st' : name -> data ps' : list packet gd : electionsData out : list raft_output d : raft_data l : list (name * msg) H : handleTimeout h (snd (nwState net h)) = (out, d, l) H0 : gd = update_elections_data_timeout h (nwState net h) H1 : forall (h : Net.name) (e : entry), In e (log (snd (nwState net h))) -> eTerm e = currentTerm (snd (nwState net h)) -> In (eTerm e, e) (allEntries (fst (nwState net h))) H2 : refined_raft_intermediate_reachable net H3 : forall h' : name, st' h' = update name_eq_dec (nwState net) h (gd, d) h' H4 : forall p' : packet, In p' ps' -> In p' (nwPackets net) \\\\/ In p' (send_packets h l) h0 : Net.name e : entry H5 : In e (log (snd (nwState {| nwPackets := ps'; nwState := st' |} h0))) H6 : eTerm e = currentTerm (snd (nwState {| nwPackets := ps'; nwState := st' |} h0)) Unable to unify \"handleTimeout h (snd (nwState net h)) = (out, d, l)\" with \"In (eTerm e, e) (allEntries (fst (nwState {| nwPackets := ps'; nwState := st' |} h0)))\".", "type": "cannot_unify", "handled": true}]}, "chat": [], "original": "intros. unfold refined_raft_net_invariant_timeout, log_all_entries in *. intros. apply H; eauto.", "succ": false}]