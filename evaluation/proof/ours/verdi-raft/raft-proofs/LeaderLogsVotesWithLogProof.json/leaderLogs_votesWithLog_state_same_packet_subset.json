[{"history": {"proof": "unfold refined_raft_net_invariant_state_same_packet_subset. intros. unfold leaderLogs_votesWithLog in *. intros. qsimpl. destruct failure_params as [quorum [Hnodup [Hlength Hvotes]]]. qsimpl. hauto b: on.", "repairs": ["", "", "", "", "cannot_apply_in", "ref_not_found", "wrong_type", "hammer"], "exceptions": [{"ctx": ["unfold refined_raft_net_invariant_state_same_packet_subset.", "intros.", "unfold leaderLogs_votesWithLog in *.", "intros."], "tactic": "apply H in H0 as Hquot.", "exn": "Unable to apply lemma of type \"forall h : Net.name, nwState net h = nwState net' h\" on hypothesis of type \"forall p : packet, In p (nwPackets net') -> In p (nwPackets net)\".", "type": "cannot_apply_in", "handled": true}, {"ctx": ["unfold refined_raft_net_invariant_state_same_packet_subset.", "intros.", "unfold leaderLogs_votesWithLog in *.", "intros.", "qsimpl."], "tactic": "destruct Hquot as [quorum [Hnodup [Hlength Hvotes]]].", "exn": "The reference Hquot was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["unfold refined_raft_net_invariant_state_same_packet_subset.", "intros.", "unfold leaderLogs_votesWithLog in *.", "intros.", "qsimpl.", "destruct failure_params as [quorum [Hnodup [Hlength Hvotes]]]."], "tactic": "exists quorum.", "exn": "In environment orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params net, net' : network H : forall h : name, nwState net h = nwState net' h H0 : forall p : packet, In p (nwPackets net') -> In p (nwPackets net) H1 : forall (t : term) (ll : list entry) (leader : name), In (t, ll) (leaderLogs (fst (nwState net leader))) -> exists quorum : list name, NoDup quorum /\\\\ length quorum > div2 (length nodes) /\\\\ (forall h : name, In h quorum -> exists log : list entry, moreUpToDate (maxTerm ll) (maxIndex ll) (maxTerm log) (maxIndex log) = true /\\\\ In (t, leader, log) (votesWithLog (fst (nwState net h)))) H2 : refined_raft_intermediate_reachable net t : term ll : list entry leader : name H3 : In (t, ll) (leaderLogs (fst (nwState net' leader))) requestVoteReply_moreUpToDate_invariant : forall net : network, refined_raft_intermediate_reachable net -> requestVoteReply_moreUpToDate net votesReceived_moreUpToDate_invariant : forall net : network, refined_raft_intermediate_reachable net -> votesReceived_moreUpToDate net refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (GhostSimulations.deghost net) quorum : data -> data The term \"quorum\" has type \"data -> data\" while it is expected to have type \"list name\".", "type": "wrong_type", "handled": true}, {"ctx": ["unfold refined_raft_net_invariant_state_same_packet_subset.", "intros.", "unfold leaderLogs_votesWithLog in *.", "intros.", "qsimpl.", "destruct failure_params as [quorum [Hnodup [Hlength Hvotes]]].", "qsimpl."], "tactic": "split; [apply Hnodup|].", "exn": "Unable to find an instance for the variable x.", "type": "no_instance_var", "handled": true}, {"ctx": ["unfold refined_raft_net_invariant_state_same_packet_subset.", "intros.", "unfold leaderLogs_votesWithLog in *.", "intros.", "qsimpl.", "destruct failure_params as [quorum [Hnodup [Hlength Hvotes]]].", "qsimpl."], "tactic": "split; [apply Hlength|].", "exn": "Unable to find an instance for the variable x.", "type": "no_instance_var", "handled": true}, {"ctx": ["unfold refined_raft_net_invariant_state_same_packet_subset.", "intros.", "unfold leaderLogs_votesWithLog in *.", "intros.", "qsimpl.", "destruct failure_params as [quorum [Hnodup [Hlength Hvotes]]].", "qsimpl."], "tactic": "apply Hvotes in H1 as Hexists.", "exn": "The reference Hvotes was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["unfold refined_raft_net_invariant_state_same_packet_subset.", "intros.", "unfold leaderLogs_votesWithLog in *.", "intros.", "qsimpl.", "destruct failure_params as [quorum [Hnodup [Hlength Hvotes]]].", "qsimpl."], "tactic": "destruct Hexists as [log [Hmoreup Hvoteswithlog]].", "exn": "The reference Hexists was not found in the current environment.", "type": "ref_not_found", "handled": true}]}, "chat": [], "original": "intros. unfold refined_raft_net_invariant_state_same_packet_subset. intros. unfold leaderLogs_votesWithLog in *. intros. apply H in H0 as Hquot. destruct Hquot as [quorum [Hnodup [Hlength Hvotes]]]. exists quorum. split; [apply Hnodup|]. split; [apply Hlength|]. intros. apply Hvotes in H1 as Hexists. destruct Hexists as [log [Hmoreup Hvoteswithlog]]. exists log. split; [apply Hmoreup|]. apply in_map_iff in Hvoteswithlog. destruct Hvoteswithlog as [[tt hh] [Heq Hin]]. rewrite <- Heq. apply in_map. apply Hin.", "succ": true}]