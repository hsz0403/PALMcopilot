[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": [], "tactic": "intros orig_base_params one_node_params raft_params rri vrmutdi rvrmutdi.", "exn": "orig_base_params is already used.", "type": "used_var", "handled": true}, {"ctx": [], "tactic": "intros orig_base_params' one_node_params raft_params rri vrmutdi rvrmutdi.", "exn": "one_node_params is already used.", "type": "used_var", "handled": true}, {"ctx": [], "tactic": "intros orig_base_params' one_node_params' raft_params rri vrmutdi rvrmutdi.", "exn": "raft_params is already used.", "type": "used_var", "handled": true}, {"ctx": [], "tactic": "intros orig_base_params' one_node_params' raft_params' rri vrmutdi rvrmutdi.", "exn": "rri is already used.", "type": "used_var", "handled": true}, {"ctx": [], "tactic": "intros orig_base_params' one_node_params' raft_params' rri' vrmutdi rvrmutdi.", "exn": "vrmutdi is already used.", "type": "used_var", "handled": true}, {"ctx": [], "tactic": "intros orig_base_params' one_node_params' raft_params' rri' vrmutdi' rvrmutdi.", "exn": "rvrmutdi is already used.", "type": "used_var", "handled": true}, {"ctx": ["intros orig_base_params' one_node_params' raft_params' rri' vrmutdi' rvrmutdi'."], "tactic": "intros net st' ps' gd d os d' ms h H_doGenericServer H_P H_reachable H_nwState H_st'.", "exn": "No product even after head-reduction.", "type": "no_product", "handled": true}, {"ctx": ["intros orig_base_params' one_node_params' raft_params' rri' vrmutdi' rvrmutdi'.", "intros."], "tactic": "apply H_P.", "exn": "The reference H_P was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros orig_base_params' one_node_params' raft_params' rri' vrmutdi' rvrmutdi'.", "intros.", "apply refined_raft_net_invariant.", "-"], "tactic": "apply H_doGenericServer.", "exn": "The reference H_doGenericServer was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros orig_base_params' one_node_params' raft_params' rri' vrmutdi' rvrmutdi'.", "intros.", "apply refined_raft_net_invariant.", "-"], "tactic": "-", "exn": "Wrong bullet -: Current bullet - is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["intros orig_base_params' one_node_params' raft_params' rri' vrmutdi' rvrmutdi'.", "intros.", "apply refined_raft_net_invariant.", "-", "shelve.", "-"], "tactic": "-", "exn": "Wrong bullet -: Current bullet - is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["intros orig_base_params' one_node_params' raft_params' rri' vrmutdi' rvrmutdi'.", "intros.", "apply refined_raft_net_invariant.", "-", "shelve.", "-", "shelve.", "-"], "tactic": "-", "exn": "Wrong bullet -: Current bullet - is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["intros orig_base_params' one_node_params' raft_params' rri' vrmutdi' rvrmutdi'.", "intros.", "apply refined_raft_net_invariant.", "-", "shelve.", "-", "shelve.", "-", "shelve.", "-"], "tactic": "-", "exn": "Wrong bullet -: Current bullet - is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["intros orig_base_params' one_node_params' raft_params' rri' vrmutdi' rvrmutdi'.", "intros.", "apply refined_raft_net_invariant.", "-", "shelve.", "-", "shelve.", "-", "shelve.", "-", "shelve.", "-"], "tactic": "-", "exn": "Wrong bullet -: Current bullet - is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["intros orig_base_params' one_node_params' raft_params' rri' vrmutdi' rvrmutdi'.", "intros.", "apply refined_raft_net_invariant.", "-", "shelve.", "-", "shelve.", "-", "shelve.", "-", "shelve.", "-", "shelve.", "-"], "tactic": "-", "exn": "Wrong bullet -: Current bullet - is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["intros orig_base_params' one_node_params' raft_params' rri' vrmutdi' rvrmutdi'.", "intros.", "apply refined_raft_net_invariant.", "-", "shelve.", "-", "shelve.", "-", "shelve.", "-", "shelve.", "-", "shelve.", "-", "shelve.", "-", "intros p H_In."], "tactic": "right.", "exn": "Not an inductive goal with 2 constructors.", "type": "not_inductive_goal", "handled": true}, {"ctx": ["intros orig_base_params' one_node_params' raft_params' rri' vrmutdi' rvrmutdi'.", "intros.", "apply refined_raft_net_invariant.", "-", "shelve.", "-", "shelve.", "-", "shelve.", "-", "shelve.", "-", "shelve.", "-", "shelve.", "-", "intros p H_In.", "qsimpl."], "tactic": "apply H_In.", "exn": "In environment orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params orig_base_params' : network one_node_params' : name -> electionsData * raft_data raft_params' : list packet rri' : electionsData vrmutdi' : raft_data rvrmutdi' : list raft_output d' : raft_data ms : list (name * msg) h : name H : doGenericServer h vrmutdi' = (rvrmutdi', d', ms) H0 : leaderLogs_votesWithLog orig_base_params' H1 : refined_raft_intermediate_reachable orig_base_params' H2 : nwState orig_base_params' h = (rri', vrmutdi') H3 : forall h' : name, one_node_params' h' = update name_eq_dec (nwState orig_base_params') h (rri', d') h' H4 : forall p : packet, In p raft_params' -> In p (nwPackets orig_base_params') \\\\/ In p (map (fun m : name * msg => {| pSrc := h; pDst := fst m; pBody := snd m |}) ms) p : list packet H_In : packet ys : list packet net : network st' : name -> electionsData * raft_data ps' : list packet t : nat v : bool H7 : pBody H_In = RequestVoteReply t v H8 : leaderLogs_votesWithLog net H9 : refined_raft_intermediate_reachable net H10 : nwPackets net = p ++ H_In :: ys H11 : forall h : name, st' h = update name_eq_dec (nwState net) (pDst H_In) (update_elections_data_requestVoteReply (pDst H_In) (pSrc H_In) t v (nwState net (pDst H_In)), handleRequestVoteReply (pDst H_In) (snd (nwState net (pDst H_In))) (pSrc H_In) t v) h H12 : forall p' : packet, In p' ps' -> In p' (p ++ ys) requestVoteReply_moreUpToDate_invariant : forall net : network, refined_raft_intermediate_reachable net -> requestVoteReply_moreUpToDate net votesReceived_moreUpToDate_invariant : forall net : network, refined_raft_intermediate_reachable net -> votesReceived_moreUpToDate net refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (GhostSimulations.deghost net) Unable to unify \"packet\" with \"leaderLogs_votesWithLog {| nwPackets := ps'; nwState := st' |}\".", "type": "cannot_unify", "handled": true}]}, "chat": [], "original": "intros orig_base_params one_node_params raft_params rri vrmutdi rvrmutdi. unfold refined_raft_net_invariant_do_generic_server. intros net st' ps' gd d os d' ms h H_doGenericServer H_P H_reachable H_nwState H_st'. apply H_P. - apply H_doGenericServer. - auto. - auto. - auto. - auto. - auto. - intros p H_In. right. apply H_In.", "succ": false}]