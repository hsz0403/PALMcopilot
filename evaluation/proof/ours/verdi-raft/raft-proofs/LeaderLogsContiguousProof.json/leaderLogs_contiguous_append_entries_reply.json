[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": ["unfold refined_raft_net_invariant_append_entries_reply.", "intros.", "unfold leaderLogs_contiguous.", "intros."], "tactic": "unfold leaderLogs_contiguous in leaderLogs_contiguous_invariant.", "exn": "No such hypothesis: leaderLogs_contiguous_invariant", "type": "no_hypos", "handled": true}, {"ctx": ["unfold refined_raft_net_invariant_append_entries_reply.", "intros.", "unfold leaderLogs_contiguous.", "intros.", "qsimpl use: leaderLogs_contiguous_invariant,leaderLogs_contiguous."], "tactic": "apply leaderLogs_contiguous_invariant; auto.", "exn": "In environment orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params xs : list packet p : packet ys : list packet net : network st' : name -> electionsData * raft_data ps' : list packet d : raft_data m : list (name * msg) t : nat es : list entry res : bool H : handleAppendEntriesReply (pDst p) (snd (nwState net (pDst p))) (pSrc p) t es res = (d, m) H1 : pBody p = AppendEntriesReply t es res H2 : leaderLogs_contiguous net H3 : refined_raft_intermediate_reachable net H4 : nwPackets net = xs ++ p :: ys H5 : forall h : name, st' h = update name_eq_dec (nwState net) (pDst p) (fst (nwState net (pDst p)), d) h H6 : forall p' : packet, In p' ps' -> In p' (xs ++ ys) \\\\/ In p' (map (fun m : name * msg => {| pSrc := pDst p; pDst := fst m; pBody := snd m |}) m) h : name t0 : term ll : list entry H7 : In (t0, ll) (leaderLogs (fst (st' h))) H8 : forall net : network, refined_raft_intermediate_reachable net -> leaderLogs_contiguous net X0 : Prop i : nat H9 : 0 < i H10 : i <= maxIndex ll log_matching_invariant : forall net : network, raft_intermediate_reachable net -> log_matching net refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (deghost net) Unable to unify \"forall (h0 : Net.name) (t1 : term) (ll0 : list entry), In (t1, ll0) (leaderLogs (fst (nwState ?M8774 h0))) -> contiguous_range_exact_lo ll0 0\" with \"exists e : entry, eIndex e = i /\\\\ In e ll\".", "type": "cannot_unify", "handled": true}]}, "chat": [], "original": "unfold refined_raft_net_invariant_append_entries_reply. intros. unfold leaderLogs_contiguous. intros. unfold leaderLogs_contiguous in leaderLogs_contiguous_invariant. intros. apply leaderLogs_contiguous_invariant; auto.", "succ": false}]