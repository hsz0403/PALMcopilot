[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": [], "tactic": "intros orig_base_params one_node_params raft_params rri cci cti cei lltsi xs p ys net st' ps' gd d m t n pli plt es ci HhandleAppendEntries.", "exn": "orig_base_params is already used.", "type": "used_var", "handled": true}, {"ctx": [], "tactic": "intros orig_base_params' one_node_params raft_params rri cci cti cei lltsi xs p ys net st' ps' gd d m t n pli plt es ci HhandleAppendEntries.", "exn": "one_node_params is already used.", "type": "used_var", "handled": true}, {"ctx": [], "tactic": "intros orig_base_params' one_node_params' raft_params rri cci cti cei lltsi xs p ys net st' ps' gd d m t n pli plt es ci HhandleAppendEntries.", "exn": "raft_params is already used.", "type": "used_var", "handled": true}, {"ctx": [], "tactic": "intros orig_base_params' one_node_params' raft_params' rri cci cti cei lltsi xs p ys net st' ps' gd d m t n pli plt es ci HhandleAppendEntries.", "exn": "rri is already used.", "type": "used_var", "handled": true}, {"ctx": [], "tactic": "intros orig_base_params' one_node_params' raft_params' rri' cci cti cei lltsi xs p ys net st' ps' gd d m t n pli plt es ci HhandleAppendEntries.", "exn": "cci is already used.", "type": "used_var", "handled": true}, {"ctx": [], "tactic": "intros orig_base_params' one_node_params' raft_params' rri' cci' cti cei lltsi xs p ys net st' ps' gd d m t n pli plt es ci HhandleAppendEntries.", "exn": "cti is already used.", "type": "used_var", "handled": true}, {"ctx": [], "tactic": "intros orig_base_params' one_node_params' raft_params' rri' cci' cti' cei lltsi xs p ys net st' ps' gd d m t n pli plt es ci HhandleAppendEntries.", "exn": "cei is already used.", "type": "used_var", "handled": true}, {"ctx": [], "tactic": "intros orig_base_params' one_node_params' raft_params' rri' cci' cti' cei' lltsi xs p ys net st' ps' gd d m t n pli plt es ci HhandleAppendEntries.", "exn": "lltsi is already used.", "type": "used_var", "handled": true}, {"ctx": ["intros orig_base_params' one_node_params' raft_params' rri' cci' cti' cei' lltsi' xs p ys net st' ps' gd d m t n pli plt es ci HhandleAppendEntries.", "intros Hgd."], "tactic": "apply Hgd in HhandleAppendEntries.", "exn": "Unable to apply lemma of type \"term\" on hypothesis of type \"Net.name\".", "type": "cannot_apply_in", "handled": true}, {"ctx": ["intros orig_base_params' one_node_params' raft_params' rri' cci' cti' cei' lltsi' xs p ys net st' ps' gd d m t n pli plt es ci HhandleAppendEntries.", "intros Hgd.", "qsimpl."], "tactic": "apply HhandleAppendEntries.", "exn": "In environment orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params orig_base_params' : list packet one_node_params' : packet raft_params' : list packet rri' : network cci' : name -> electionsData * raft_data cti' : list packet lltsi' : raft_data xs : msg p : term ys : name net : logIndex st' : term ps' : list entry gd : logIndex d : handleAppendEntries (pDst one_node_params') (snd (nwState rri' (pDst one_node_params'))) p ys net st' ps' gd = (lltsi', xs) t : pBody one_node_params' = AppendEntries p ys net st' ps' gd n : allEntries_candidateEntries rri' pli : refined_raft_intermediate_reachable rri' plt : nwPackets rri' = orig_base_params' ++ one_node_params' :: raft_params' es : forall h : name, cci' h = update name_eq_dec (nwState rri') (pDst one_node_params') (update_elections_data_appendEntries (pDst one_node_params') (nwState rri' (pDst one_node_params')) p ys net st' ps' gd, lltsi') h ci : forall p' : packet, In p' cti' -> In p' (orig_base_params' ++ raft_params') \\\\/ p' = {| pSrc := pDst one_node_params'; pDst := pSrc one_node_params'; pBody := xs |} HhandleAppendEntries : name Hgd : term e : entry H : In (Hgd, e) (allEntries (fst (cci' HhandleAppendEntries))) allEntries_term_sanity_invariant : forall net : network, refined_raft_intermediate_reachable net -> allEntries_term_sanity net candidate_entries_invariant : forall net : network, refined_raft_intermediate_reachable net -> CandidateEntries net cronies_term_invariant : forall net : network, refined_raft_intermediate_reachable net -> cronies_term net cronies_correct_invariant : forall net : network, refined_raft_intermediate_reachable net -> cronies_correct net refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (GhostSimulations.deghost net) Unable to unify \"name\" with \"candidateEntries e cci'\".", "type": "cannot_unify", "handled": true}]}, "chat": [], "original": "intros orig_base_params one_node_params raft_params rri cci cti cei lltsi xs p ys net st' ps' gd d m t n pli plt es ci HhandleAppendEntries. unfold refined_raft_net_invariant_append_entries in *. intros Hgd. apply Hgd in HhandleAppendEntries. apply HhandleAppendEntries.", "succ": false}]