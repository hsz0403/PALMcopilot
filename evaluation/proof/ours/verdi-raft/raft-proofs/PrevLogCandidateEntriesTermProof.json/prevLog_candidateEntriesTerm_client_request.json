[{"history": {"proof": "qsimpl time: 2 use: raft_refined_failure_params. qsimpl time: 2 use: raft_refined_failure_params,raft_refined_multi_params. qsimpl time: 2 use: raft_refined_base_params,raft_refined_failure_params,raft_refined_multi_params. qsimpl time: 2 use: raft_refined_base_params,raft_refined_failure_params,raft_refined_multi_params. qsimpl time: 2 use: raft_refined_base_params,raft_refined_failure_params,raft_refined_multi_params. qsimpl time: 2 use: raft_refined_base_params,raft_refined_failure_params,raft_refined_multi_params. qsimpl time: 2 use: raft_refined_base_params,raft_refined_failure_params,raft_refined_multi_params. qsimpl time: 2 use: raft_refined_base_params,raft_refined_failure_params,raft_refined_multi_params. qsimpl time: 2 use: raft_refined_base_params,raft_refined_failure_params,raft_refined_multi_params. qsimpl time: 2 use: raft_refined_base_params,raft_refined_failure_params,raft_refined_multi_params. qsimpl time: 2 use: raft_refined_base_params,raft_refined_failure_params,raft_refined_multi_params.", "repairs": ["cannot_apply_in", "cannot_apply_in", "cannot_apply_in", "no_hypos", "no_hypos", "no_hypos", "no_hypos", "no_hypos", "no_hypos", "no_hypos", "no_hypos"], "exceptions": [{"ctx": [], "tactic": "apply raft_refined_failure_params in one_node_params.", "exn": "Unable to apply lemma of type \"FailureParams GhostSimulations.refined_multi_params\" on hypothesis of type \"OneNodeParams orig_base_params\".", "type": "cannot_apply_in", "handled": true}, {"ctx": ["qsimpl time: 2 use: raft_refined_failure_params."], "tactic": "apply raft_refined_multi_params in one_node_params.", "exn": "Unable to apply lemma of type \"MultiParams GhostSimulations.refined_base_params\" on hypothesis of type \"OneNodeParams orig_base_params\".", "type": "cannot_apply_in", "handled": true}, {"ctx": ["qsimpl time: 2 use: raft_refined_failure_params.", "qsimpl time: 2 use: raft_refined_failure_params,raft_refined_multi_params."], "tactic": "apply raft_refined_base_params in orig_base_params.", "exn": "Unable to apply lemma of type \"BaseParams\" on hypothesis of type \"BaseParams\".", "type": "cannot_apply_in", "handled": true}, {"ctx": ["qsimpl time: 2 use: raft_refined_failure_params.", "qsimpl time: 2 use: raft_refined_failure_params,raft_refined_multi_params.", "qsimpl time: 2 use: raft_refined_base_params,raft_refined_failure_params,raft_refined_multi_params."], "tactic": "apply rri in cei.", "exn": "No such hypothesis: cei", "type": "no_hypos", "handled": true}, {"ctx": ["qsimpl time: 2 use: raft_refined_failure_params.", "qsimpl time: 2 use: raft_refined_failure_params,raft_refined_multi_params.", "qsimpl time: 2 use: raft_refined_base_params,raft_refined_failure_params,raft_refined_multi_params.", "qsimpl time: 2 use: raft_refined_base_params,raft_refined_failure_params,raft_refined_multi_params."], "tactic": "apply cci in cei.", "exn": "No such hypothesis: cei", "type": "no_hypos", "handled": true}, {"ctx": ["qsimpl time: 2 use: raft_refined_failure_params.", "qsimpl time: 2 use: raft_refined_failure_params,raft_refined_multi_params.", "qsimpl time: 2 use: raft_refined_base_params,raft_refined_failure_params,raft_refined_multi_params.", "qsimpl time: 2 use: raft_refined_base_params,raft_refined_failure_params,raft_refined_multi_params.", "qsimpl time: 2 use: raft_refined_base_params,raft_refined_failure_params,raft_refined_multi_params."], "tactic": "apply cti in cei.", "exn": "No such hypothesis: cei", "type": "no_hypos", "handled": true}, {"ctx": ["qsimpl time: 2 use: raft_refined_failure_params.", "qsimpl time: 2 use: raft_refined_failure_params,raft_refined_multi_params.", "qsimpl time: 2 use: raft_refined_base_params,raft_refined_failure_params,raft_refined_multi_params.", "qsimpl time: 2 use: raft_refined_base_params,raft_refined_failure_params,raft_refined_multi_params.", "qsimpl time: 2 use: raft_refined_base_params,raft_refined_failure_params,raft_refined_multi_params.", "qsimpl time: 2 use: raft_refined_base_params,raft_refined_failure_params,raft_refined_multi_params."], "tactic": "apply rri in cti.", "exn": "No such hypothesis: cti", "type": "no_hypos", "handled": true}, {"ctx": ["qsimpl time: 2 use: raft_refined_failure_params.", "qsimpl time: 2 use: raft_refined_failure_params,raft_refined_multi_params.", "qsimpl time: 2 use: raft_refined_base_params,raft_refined_failure_params,raft_refined_multi_params.", "qsimpl time: 2 use: raft_refined_base_params,raft_refined_failure_params,raft_refined_multi_params.", "qsimpl time: 2 use: raft_refined_base_params,raft_refined_failure_params,raft_refined_multi_params.", "qsimpl time: 2 use: raft_refined_base_params,raft_refined_failure_params,raft_refined_multi_params.", "qsimpl time: 2 use: raft_refined_base_params,raft_refined_failure_params,raft_refined_multi_params."], "tactic": "apply cci in cti.", "exn": "No such hypothesis: cti", "type": "no_hypos", "handled": true}, {"ctx": ["qsimpl time: 2 use: raft_refined_failure_params.", "qsimpl time: 2 use: raft_refined_failure_params,raft_refined_multi_params.", "qsimpl time: 2 use: raft_refined_base_params,raft_refined_failure_params,raft_refined_multi_params.", "qsimpl time: 2 use: raft_refined_base_params,raft_refined_failure_params,raft_refined_multi_params.", "qsimpl time: 2 use: raft_refined_base_params,raft_refined_failure_params,raft_refined_multi_params.", "qsimpl time: 2 use: raft_refined_base_params,raft_refined_failure_params,raft_refined_multi_params.", "qsimpl time: 2 use: raft_refined_base_params,raft_refined_failure_params,raft_refined_multi_params.", "qsimpl time: 2 use: raft_refined_base_params,raft_refined_failure_params,raft_refined_multi_params."], "tactic": "apply cti in cti.", "exn": "No such hypothesis: cti", "type": "no_hypos", "handled": true}, {"ctx": ["qsimpl time: 2 use: raft_refined_failure_params.", "qsimpl time: 2 use: raft_refined_failure_params,raft_refined_multi_params.", "qsimpl time: 2 use: raft_refined_base_params,raft_refined_failure_params,raft_refined_multi_params.", "qsimpl time: 2 use: raft_refined_base_params,raft_refined_failure_params,raft_refined_multi_params.", "qsimpl time: 2 use: raft_refined_base_params,raft_refined_failure_params,raft_refined_multi_params.", "qsimpl time: 2 use: raft_refined_base_params,raft_refined_failure_params,raft_refined_multi_params.", "qsimpl time: 2 use: raft_refined_base_params,raft_refined_failure_params,raft_refined_multi_params.", "qsimpl time: 2 use: raft_refined_base_params,raft_refined_failure_params,raft_refined_multi_params.", "qsimpl time: 2 use: raft_refined_base_params,raft_refined_failure_params,raft_refined_multi_params."], "tactic": "apply rri in cci.", "exn": "No such hypothesis: cci", "type": "no_hypos", "handled": true}, {"ctx": ["qsimpl time: 2 use: raft_refined_failure_params.", "qsimpl time: 2 use: raft_refined_failure_params,raft_refined_multi_params.", "qsimpl time: 2 use: raft_refined_base_params,raft_refined_failure_params,raft_refined_multi_params.", "qsimpl time: 2 use: raft_refined_base_params,raft_refined_failure_params,raft_refined_multi_params.", "qsimpl time: 2 use: raft_refined_base_params,raft_refined_failure_params,raft_refined_multi_params.", "qsimpl time: 2 use: raft_refined_base_params,raft_refined_failure_params,raft_refined_multi_params.", "qsimpl time: 2 use: raft_refined_base_params,raft_refined_failure_params,raft_refined_multi_params.", "qsimpl time: 2 use: raft_refined_base_params,raft_refined_failure_params,raft_refined_multi_params.", "qsimpl time: 2 use: raft_refined_base_params,raft_refined_failure_params,raft_refined_multi_params.", "qsimpl time: 2 use: raft_refined_base_params,raft_refined_failure_params,raft_refined_multi_params."], "tactic": "apply cei in cci.", "exn": "No such hypothesis: cci", "type": "no_hypos", "handled": true}, {"ctx": ["qsimpl time: 2 use: raft_refined_failure_params.", "qsimpl time: 2 use: raft_refined_failure_params,raft_refined_multi_params.", "qsimpl time: 2 use: raft_refined_base_params,raft_refined_failure_params,raft_refined_multi_params.", "qsimpl time: 2 use: raft_refined_base_params,raft_refined_failure_params,raft_refined_multi_params.", "qsimpl time: 2 use: raft_refined_base_params,raft_refined_failure_params,raft_refined_multi_params.", "qsimpl time: 2 use: raft_refined_base_params,raft_refined_failure_params,raft_refined_multi_params.", "qsimpl time: 2 use: raft_refined_base_params,raft_refined_failure_params,raft_refined_multi_params.", "qsimpl time: 2 use: raft_refined_base_params,raft_refined_failure_params,raft_refined_multi_params.", "qsimpl time: 2 use: raft_refined_base_params,raft_refined_failure_params,raft_refined_multi_params.", "qsimpl time: 2 use: raft_refined_base_params,raft_refined_failure_params,raft_refined_multi_params.", "qsimpl time: 2 use: raft_refined_base_params,raft_refined_failure_params,raft_refined_multi_params."], "tactic": "apply cti in cci.", "exn": "No such hypothesis: cci", "type": "no_hypos", "handled": true}, {"ctx": ["qsimpl time: 2 use: raft_refined_failure_params.", "qsimpl time: 2 use: raft_refined_failure_params,raft_refined_multi_params.", "qsimpl time: 2 use: raft_refined_base_params,raft_refined_failure_params,raft_refined_multi_params.", "qsimpl time: 2 use: raft_refined_base_params,raft_refined_failure_params,raft_refined_multi_params.", "qsimpl time: 2 use: raft_refined_base_params,raft_refined_failure_params,raft_refined_multi_params.", "qsimpl time: 2 use: raft_refined_base_params,raft_refined_failure_params,raft_refined_multi_params.", "qsimpl time: 2 use: raft_refined_base_params,raft_refined_failure_params,raft_refined_multi_params.", "qsimpl time: 2 use: raft_refined_base_params,raft_refined_failure_params,raft_refined_multi_params.", "qsimpl time: 2 use: raft_refined_base_params,raft_refined_failure_params,raft_refined_multi_params.", "qsimpl time: 2 use: raft_refined_base_params,raft_refined_failure_params,raft_refined_multi_params.", "qsimpl time: 2 use: raft_refined_base_params,raft_refined_failure_params,raft_refined_multi_params.", "qsimpl time: 2 use: raft_refined_base_params,raft_refined_failure_params,raft_refined_multi_params."], "tactic": "apply cei in cci.", "exn": "No such hypothesis: cci", "type": "no_hypos", "handled": true}, {"ctx": ["qsimpl time: 2 use: raft_refined_failure_params.", "qsimpl time: 2 use: raft_refined_failure_params,raft_refined_multi_params.", "qsimpl time: 2 use: raft_refined_base_params,raft_refined_failure_params,raft_refined_multi_params.", "qsimpl time: 2 use: raft_refined_base_params,raft_refined_failure_params,raft_refined_multi_params.", "qsimpl time: 2 use: raft_refined_base_params,raft_refined_failure_params,raft_refined_multi_params.", "qsimpl time: 2 use: raft_refined_base_params,raft_refined_failure_params,raft_refined_multi_params.", "qsimpl time: 2 use: raft_refined_base_params,raft_refined_failure_params,raft_refined_multi_params.", "qsimpl time: 2 use: raft_refined_base_params,raft_refined_failure_params,raft_refined_multi_params.", "qsimpl time: 2 use: raft_refined_base_params,raft_refined_failure_params,raft_refined_multi_params.", "qsimpl time: 2 use: raft_refined_base_params,raft_refined_failure_params,raft_refined_multi_params.", "qsimpl time: 2 use: raft_refined_base_params,raft_refined_failure_params,raft_refined_multi_params.", "qsimpl time: 2 use: raft_refined_base_params,raft_refined_failure_params,raft_refined_multi_params.", "qsimpl time: 2 use: raft_refined_base_params,raft_refined_failure_params,raft_refined_multi_params.", "unfold refined_raft_net_invariant_client_request.", "unfold prevLog_candidateEntriesTerm.", "unfold candidateEntriesTerm."], "tactic": "unfold candidate_entries_invariant.", "exn": "Cannot coerce candidate_entries_invariant to an evaluable reference.", "type": "not_evaluable", "handled": true}, {"ctx": ["qsimpl time: 2 use: raft_refined_failure_params.", "qsimpl time: 2 use: raft_refined_failure_params,raft_refined_multi_params.", "qsimpl time: 2 use: raft_refined_base_params,raft_refined_failure_params,raft_refined_multi_params.", "qsimpl time: 2 use: raft_refined_base_params,raft_refined_failure_params,raft_refined_multi_params.", "qsimpl time: 2 use: raft_refined_base_params,raft_refined_failure_params,raft_refined_multi_params.", "qsimpl time: 2 use: raft_refined_base_params,raft_refined_failure_params,raft_refined_multi_params.", "qsimpl time: 2 use: raft_refined_base_params,raft_refined_failure_params,raft_refined_multi_params.", "qsimpl time: 2 use: raft_refined_base_params,raft_refined_failure_params,raft_refined_multi_params.", "qsimpl time: 2 use: raft_refined_base_params,raft_refined_failure_params,raft_refined_multi_params.", "qsimpl time: 2 use: raft_refined_base_params,raft_refined_failure_params,raft_refined_multi_params.", "qsimpl time: 2 use: raft_refined_base_params,raft_refined_failure_params,raft_refined_multi_params.", "qsimpl time: 2 use: raft_refined_base_params,raft_refined_failure_params,raft_refined_multi_params.", "qsimpl time: 2 use: raft_refined_base_params,raft_refined_failure_params,raft_refined_multi_params.", "unfold refined_raft_net_invariant_client_request.", "unfold prevLog_candidateEntriesTerm.", "unfold candidateEntriesTerm.", "qsimpl time: 2 use: raft_refined_base_params,raft_refined_failure_params,raft_refined_multi_params."], "tactic": "unfold cronies_term_invariant.", "exn": "Cannot coerce cronies_term_invariant to an evaluable reference.", "type": "not_evaluable", "handled": true}, {"ctx": ["qsimpl time: 2 use: raft_refined_failure_params.", "qsimpl time: 2 use: raft_refined_failure_params,raft_refined_multi_params.", "qsimpl time: 2 use: raft_refined_base_params,raft_refined_failure_params,raft_refined_multi_params.", "qsimpl time: 2 use: raft_refined_base_params,raft_refined_failure_params,raft_refined_multi_params.", "qsimpl time: 2 use: raft_refined_base_params,raft_refined_failure_params,raft_refined_multi_params.", "qsimpl time: 2 use: raft_refined_base_params,raft_refined_failure_params,raft_refined_multi_params.", "qsimpl time: 2 use: raft_refined_base_params,raft_refined_failure_params,raft_refined_multi_params.", "qsimpl time: 2 use: raft_refined_base_params,raft_refined_failure_params,raft_refined_multi_params.", "qsimpl time: 2 use: raft_refined_base_params,raft_refined_failure_params,raft_refined_multi_params.", "qsimpl time: 2 use: raft_refined_base_params,raft_refined_failure_params,raft_refined_multi_params.", "qsimpl time: 2 use: raft_refined_base_params,raft_refined_failure_params,raft_refined_multi_params.", "qsimpl time: 2 use: raft_refined_base_params,raft_refined_failure_params,raft_refined_multi_params.", "qsimpl time: 2 use: raft_refined_base_params,raft_refined_failure_params,raft_refined_multi_params.", "unfold refined_raft_net_invariant_client_request.", "unfold prevLog_candidateEntriesTerm.", "unfold candidateEntriesTerm.", "qsimpl time: 2 use: raft_refined_base_params,raft_refined_failure_params,raft_refined_multi_params.", "qsimpl time: 2 use: raft_refined_base_params,raft_refined_failure_params,raft_refined_multi_params."], "tactic": "unfold cronies_correct_invariant.", "exn": "Cannot coerce cronies_correct_invariant to an evaluable reference.", "type": "not_evaluable", "handled": true}, {"ctx": ["qsimpl time: 2 use: raft_refined_failure_params.", "qsimpl time: 2 use: raft_refined_failure_params,raft_refined_multi_params.", "qsimpl time: 2 use: raft_refined_base_params,raft_refined_failure_params,raft_refined_multi_params.", "qsimpl time: 2 use: raft_refined_base_params,raft_refined_failure_params,raft_refined_multi_params.", "qsimpl time: 2 use: raft_refined_base_params,raft_refined_failure_params,raft_refined_multi_params.", "qsimpl time: 2 use: raft_refined_base_params,raft_refined_failure_params,raft_refined_multi_params.", "qsimpl time: 2 use: raft_refined_base_params,raft_refined_failure_params,raft_refined_multi_params.", "qsimpl time: 2 use: raft_refined_base_params,raft_refined_failure_params,raft_refined_multi_params.", "qsimpl time: 2 use: raft_refined_base_params,raft_refined_failure_params,raft_refined_multi_params.", "qsimpl time: 2 use: raft_refined_base_params,raft_refined_failure_params,raft_refined_multi_params.", "qsimpl time: 2 use: raft_refined_base_params,raft_refined_failure_params,raft_refined_multi_params.", "qsimpl time: 2 use: raft_refined_base_params,raft_refined_failure_params,raft_refined_multi_params.", "qsimpl time: 2 use: raft_refined_base_params,raft_refined_failure_params,raft_refined_multi_params.", "unfold refined_raft_net_invariant_client_request.", "unfold prevLog_candidateEntriesTerm.", "unfold candidateEntriesTerm.", "qsimpl time: 2 use: raft_refined_base_params,raft_refined_failure_params,raft_refined_multi_params.", "qsimpl time: 2 use: raft_refined_base_params,raft_refined_failure_params,raft_refined_multi_params.", "qsimpl time: 2 use: raft_refined_base_params,raft_refined_failure_params,raft_refined_multi_params."], "tactic": "unfold one_vote_per_term.", "exn": "The reference one_vote_per_term was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["qsimpl time: 2 use: raft_refined_failure_params.", "qsimpl time: 2 use: raft_refined_failure_params,raft_refined_multi_params.", "qsimpl time: 2 use: raft_refined_base_params,raft_refined_failure_params,raft_refined_multi_params.", "qsimpl time: 2 use: raft_refined_base_params,raft_refined_failure_params,raft_refined_multi_params.", "qsimpl time: 2 use: raft_refined_base_params,raft_refined_failure_params,raft_refined_multi_params.", "qsimpl time: 2 use: raft_refined_base_params,raft_refined_failure_params,raft_refined_multi_params.", "qsimpl time: 2 use: raft_refined_base_params,raft_refined_failure_params,raft_refined_multi_params.", "qsimpl time: 2 use: raft_refined_base_params,raft_refined_failure_params,raft_refined_multi_params.", "qsimpl time: 2 use: raft_refined_base_params,raft_refined_failure_params,raft_refined_multi_params.", "qsimpl time: 2 use: raft_refined_base_params,raft_refined_failure_params,raft_refined_multi_params.", "qsimpl time: 2 use: raft_refined_base_params,raft_refined_failure_params,raft_refined_multi_params.", "qsimpl time: 2 use: raft_refined_base_params,raft_refined_failure_params,raft_refined_multi_params.", "qsimpl time: 2 use: raft_refined_base_params,raft_refined_failure_params,raft_refined_multi_params.", "unfold refined_raft_net_invariant_client_request.", "unfold prevLog_candidateEntriesTerm.", "unfold candidateEntriesTerm.", "qsimpl time: 2 use: raft_refined_base_params,raft_refined_failure_params,raft_refined_multi_params.", "qsimpl time: 2 use: raft_refined_base_params,raft_refined_failure_params,raft_refined_multi_params.", "qsimpl time: 2 use: raft_refined_base_params,raft_refined_failure_params,raft_refined_multi_params.", "unfold currentTerm."], "tactic": "specialize (H0 h net st' ps' gd out d l client id c).", "exn": "In environment orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params X16 : MultiParams GhostSimulations.refined_base_params X15 : FailureParams GhostSimulations.refined_multi_params X14 : BaseParams X13 : MultiParams GhostSimulations.refined_base_params X12 : FailureParams GhostSimulations.refined_multi_params X11 : BaseParams m : MultiParams GhostSimulations.refined_base_params X10 : FailureParams GhostSimulations.refined_multi_params b, X9, X8, X7, X6, X5, X4, X3, X2, X1, X0, X : BaseParams cronies_correct_invariant : forall net : network, refined_raft_intermediate_reachable net -> cronies_correct net cronies_term_invariant : forall net : network, refined_raft_intermediate_reachable net -> cronies_term net candidate_entries_invariant : forall net : network, refined_raft_intermediate_reachable net -> CandidateEntries net refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : Raft.name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (GhostSimulations.deghost net) name : Type msg : Type nodes : list name msg_eq_dec : forall x y : msg, {x = y} + {x = y -> False} name_eq_dec : forall x y : name, {x = y} + {x = y -> False} all_names_nodes : forall n : name, In n nodes no_dup_nodes : NoDup nodes init_handlers : name -> electionsData * raft_data input_handlers : name -> raft_input -> electionsData * raft_data -> list raft_output * (electionsData * raft_data) * list (name * msg) H : name -> msg -> electionsData * raft_data -> list raft_output * (electionsData * raft_data) * list (name * msg) name0 : Type msg0 : Type nodes0 : list name0 msg_eq_dec0 : forall x y : msg0, {x = y} + {x = y -> False} name_eq_dec0 : forall x y : name0, {x = y} + {x = y -> False} all_names_nodes0 : forall n : name0, In n nodes0 no_dup_nodes0 : NoDup nodes0 init_handlers0 : name0 -> electionsData * raft_data input_handlers0 : name0 -> raft_input -> electionsData * raft_data -> list raft_output * (electionsData * raft_data) * list (name0 * msg0) H0 : name0 -> msg0 -> electionsData * raft_data -> list raft_output * (electionsData * raft_data) * list (name0 * msg0) name1 : Type msg1 : Type nodes1 : list name1 msg_eq_dec1 : forall x y : msg1, {x = y} + {x = y -> False} name_eq_dec1 : forall x y : name1, {x = y} + {x = y -> False} all_names_nodes1 : forall n : name1, In n nodes1 no_dup_nodes1 : NoDup nodes1 init_handlers1 : name1 -> electionsData * raft_data input_handlers1 : name1 -> raft_input -> electionsData * raft_data -> list raft_output * (electionsData * raft_data) * list (name1 * msg1) H1 : name1 -> msg1 -> electionsData * raft_data -> list raft_output * (electionsData * raft_data) * list (name1 * msg1) name2 : Type msg2 : Type nodes2 : list name2 msg_eq_dec2 : forall x y : msg2, {x = y} + {x = y -> False} name_eq_dec2 : forall x y : name2, {x = y} + {x = y -> False} all_names_nodes2 : forall n : name2, In n nodes2 no_dup_nodes2 : NoDup nodes2 init_handlers2 : name2 -> electionsData * raft_data input_handlers2 : name2 -> raft_input -> electionsData * raft_data -> list raft_output * (electionsData * raft_data) * list (name2 * msg2) H2 : name2 -> msg2 -> electionsData * raft_data -> list raft_output * (electionsData * raft_data) * list (name2 * msg2) name3 : Type msg3 : Type nodes3 : list name3 msg_eq_dec3 : forall x y : msg3, {x = y} + {x = y -> False} name_eq_dec3 : forall x y : name3, {x = y} + {x = y -> False} all_names_nodes3 : forall n : name3, In n nodes3 no_dup_nodes3 : NoDup nodes3 init_handlers3 : name3 -> electionsData * raft_data input_handlers3 : name3 -> raft_input -> electionsData * raft_data -> list raft_output * (electionsData * raft_data) * list (name3 * msg3) H3 : name3 -> msg3 -> electionsData * raft_data -> list raft_output * (electionsData * raft_data) * list (name3 * msg3) name4 : Type msg4 : Type nodes4 : list name4 msg_eq_dec4 : forall x y : msg4, {x = y} + {x = y -> False} name_eq_dec4 : forall x y : name4, {x = y} + {x = y -> False} all_names_nodes4 : forall n : name4, In n nodes4 no_dup_nodes4 : NoDup nodes4 init_handlers4 : name4 -> electionsData * raft_data input_handlers4 : name4 -> raft_input -> electionsData * raft_data -> list raft_output * (electionsData * raft_data) * list (name4 * msg4) H4 : name4 -> msg4 -> electionsData * raft_data -> list raft_output * (electionsData * raft_data) * list (name4 * msg4) name5 : Type msg5 : Type nodes5 : list name5 msg_eq_dec5 : forall x y : msg5, {x = y} + {x = y -> False} name_eq_dec5 : forall x y : name5, {x = y} + {x = y -> False} all_names_nodes5 : forall n : name5, In n nodes5 no_dup_nodes5 : NoDup nodes5 init_handlers5 : name5 -> electionsData * raft_data input_handlers5 : name5 -> raft_input -> electionsData * raft_data -> list raft_output * (electionsData * raft_data) * list (name5 * msg5) H5 : name5 -> msg5 -> electionsData * raft_data -> list raft_output * (electionsData * raft_data) * list (name5 * msg5) name6 : Type msg6 : Type nodes6 : list name6 msg_eq_dec6 : forall x y : msg6, {x = y} + {x = y -> False} name_eq_dec6 : forall x y : name6, {x = y} + {x = y -> False} all_names_nodes6 : forall n : name6, In n nodes6 no_dup_nodes6 : NoDup nodes6 init_handlers6 : name6 -> electionsData * raft_data input_handlers6 : name6 -> raft_input -> electionsData * raft_data -> list raft_output * (electionsData * raft_data) * list (name6 * msg6) H6 : name6 -> msg6 -> electionsData * raft_data -> list raft_output * (electionsData * raft_data) * list (name6 * msg6) name7 : Type msg7 : Type nodes7 : list name7 msg_eq_dec7 : forall x y : msg7, {x = y} + {x = y -> False} name_eq_dec7 : forall x y : name7, {x = y} + {x = y -> False} all_names_nodes7 : forall n : name7, In n nodes7 no_dup_nodes7 : NoDup nodes7 init_handlers7 : name7 -> electionsData * raft_data input_handlers7 : name7 -> raft_input -> electionsData * raft_data -> list raft_output * (electionsData * raft_data) * list (name7 * msg7) H7 : name7 -> msg7 -> electionsData * raft_data -> list raft_output * (electionsData * raft_data) * list (name7 * msg7) name8 : Type msg8 : Type nodes8 : list name8 msg_eq_dec8 : forall x y : msg8, {x = y} + {x = y -> False} name_eq_dec8 : forall x y : name8, {x = y} + {x = y -> False} all_names_nodes8 : forall n : name8, In n nodes8 no_dup_nodes8 : NoDup nodes8 init_handlers8 : name8 -> electionsData * raft_data input_handlers8 : name8 -> raft_input -> electionsData * raft_data -> list raft_output * (electionsData * raft_data) * list (name8 * msg8) H8 : name8 -> msg8 -> electionsData * raft_data -> list raft_output * (electionsData * raft_data) * list (name8 * msg8) name9 : Type msg9 : Type nodes9 : list name9 msg_eq_dec9 : forall x y : msg9, {x = y} + {x = y -> False} name_eq_dec9 : forall x y : name9, {x = y} + {x = y -> False} all_names_nodes9 : forall n : name9, In n nodes9 no_dup_nodes9 : NoDup nodes9 init_handlers9 : name9 -> electionsData * raft_data input_handlers9 : name9 -> raft_input -> electionsData * raft_data -> list raft_output * (electionsData * raft_data) * list (name9 * msg9) H9 : name9 -> msg9 -> electionsData * raft_data -> list raft_output * (electionsData * raft_data) * list (name9 * msg9) name10 : Type msg10 : Type nodes10 : list name10 msg_eq_dec10 : forall x y : msg10, {x = y} + {x = y -> False} name_eq_dec10 : forall x y : name10, {x = y} + {x = y -> False} all_names_nodes10 : forall n : name10, In n nodes10 no_dup_nodes10 : NoDup nodes10 init_handlers10 : name10 -> electionsData * raft_data input_handlers10 : name10 -> raft_input -> electionsData * raft_data -> list raft_output * (electionsData * raft_data) * list (name10 * msg10) H10 : name10 -> msg10 -> electionsData * raft_data -> list raft_output * (electionsData * raft_data) * list (name10 * msg10) h : Raft.name net : network st' : Raft.name -> data ps' : list packet gd : electionsData out : list raft_output d : raft_data l : list (Raft.name * Raft.msg) client : clientId id : nat c : input H11 : handleClientRequest h (snd (nwState net h)) client id c = (out, d, l) H12 : gd = update_elections_data_client_request h (nwState net h) client id c H13 : forall (p : packet) (t : term) (leaderId : Raft.name) (prevLogIndex : logIndex) (prevLogTerm : term) (entries : list entry) (leaderCommit : logIndex), In p (nwPackets net) -> pBody p = AppendEntries t leaderId prevLogIndex prevLogTerm entries leaderCommit -> 0 < prevLogTerm -> exists h : Raft.name, wonElection (dedup Raft.name_eq_dec (cronies (fst (nwState net h)) prevLogTerm)) = true /\\\\ (currentTerm (snd (nwState net h)) = prevLogTerm -> type (snd (nwState net h)) = Candidate -> False) H14 : refined_raft_intermediate_reachable net H15 : forall h' : Raft.name, st' h' = update Raft.name_eq_dec (nwState net) h (gd, d) h' H16 : forall p' : packet, In p' ps' -> In p' (nwPackets net) \\\\/ In p' (map (fun m0 : Net.name * Net.msg => {| pSrc := h; pDst := fst m0; pBody := snd m0 |}) l) p : packet t : term leaderId : Raft.name prevLogIndex : logIndex prevLogTerm : term entries : list entry leaderCommit : logIndex H17 : In p ps' H18 : pBody p = AppendEntries t leaderId prevLogIndex prevLogTerm entries leaderCommit H19 : 0 < prevLogTerm The term \"h\" has type \"Raft.name\" while it is expected to have type \"name0\".", "type": "wrong_type", "handled": true}, {"ctx": ["qsimpl time: 2 use: raft_refined_failure_params.", "qsimpl time: 2 use: raft_refined_failure_params,raft_refined_multi_params.", "qsimpl time: 2 use: raft_refined_base_params,raft_refined_failure_params,raft_refined_multi_params.", "qsimpl time: 2 use: raft_refined_base_params,raft_refined_failure_params,raft_refined_multi_params.", "qsimpl time: 2 use: raft_refined_base_params,raft_refined_failure_params,raft_refined_multi_params.", "qsimpl time: 2 use: raft_refined_base_params,raft_refined_failure_params,raft_refined_multi_params.", "qsimpl time: 2 use: raft_refined_base_params,raft_refined_failure_params,raft_refined_multi_params.", "qsimpl time: 2 use: raft_refined_base_params,raft_refined_failure_params,raft_refined_multi_params.", "qsimpl time: 2 use: raft_refined_base_params,raft_refined_failure_params,raft_refined_multi_params.", "qsimpl time: 2 use: raft_refined_base_params,raft_refined_failure_params,raft_refined_multi_params.", "qsimpl time: 2 use: raft_refined_base_params,raft_refined_failure_params,raft_refined_multi_params.", "qsimpl time: 2 use: raft_refined_base_params,raft_refined_failure_params,raft_refined_multi_params.", "qsimpl time: 2 use: raft_refined_base_params,raft_refined_failure_params,raft_refined_multi_params.", "unfold refined_raft_net_invariant_client_request.", "unfold prevLog_candidateEntriesTerm.", "unfold candidateEntriesTerm.", "qsimpl time: 2 use: raft_refined_base_params,raft_refined_failure_params,raft_refined_multi_params.", "qsimpl time: 2 use: raft_refined_base_params,raft_refined_failure_params,raft_refined_multi_params.", "qsimpl time: 2 use: raft_refined_base_params,raft_refined_failure_params,raft_refined_multi_params.", "unfold currentTerm.", "qsimpl time: 2 use: raft_refined_base_params,raft_refined_failure_params,raft_refined_multi_params."], "tactic": ["rewrite <- H1.", ""], "exn": "Cannot find an homogeneous relation to rewrite.", "type": "no_rewrite_homo", "handled": false}]}, "chat": [], "original": "apply raft_refined_failure_params in one_node_params. apply raft_refined_multi_params in one_node_params. apply raft_refined_base_params in orig_base_params. apply rri in cei. apply cci in cei. apply cti in cei. apply rri in cti. apply cci in cti. apply cti in cti. apply rri in cci. apply cei in cci. apply cti in cci. apply cei in cci. unfold refined_raft_net_invariant_client_request. unfold prevLog_candidateEntriesTerm. unfold candidateEntriesTerm. unfold raft_refined_base_params. unfold raft_refined_failure_params. unfold raft_refined_multi_params. unfold candidate_entries_invariant. unfold cronies_term_invariant. unfold cronies_correct_invariant. unfold cronies_term. unfold cronies_votes. unfold votes_nw. unfold votes_received_cronies. unfold votes_received_leaders. unfold one_vote_per_term. unfold votedFor. unfold currentTerm. unfold votes. intros. specialize (H0 h net st' ps' gd out d l client id c). rewrite <- H1. rewrite <- H3. auto.", "succ": false}]