[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": ["intros net H_refined.", "unfold prevLog_candidateEntriesTerm.", "intros p t leaderId prevLogIndex prevLogTerm entries leaderCommit H_in H_body H_term."], "tactic": "apply H_refined in H_in as H_cand.", "exn": "Unable to apply lemma of type \"refined_raft_intermediate_reachable net\" on hypothesis of type \"In p (nwPackets net)\".", "type": "cannot_apply_in", "handled": true}, {"ctx": ["intros net H_refined.", "unfold prevLog_candidateEntriesTerm.", "intros p t leaderId prevLogIndex prevLogTerm entries leaderCommit H_in H_body H_term.", "qsimpl."], "tactic": "apply H_term.", "exn": "In environment orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params net : network H_refined : refined_raft_intermediate_reachable net p : packet t : term leaderId : name prevLogIndex : logIndex prevLogTerm : term entries : list entry leaderCommit : logIndex H_in : In p (nwPackets net) H_body : pBody p = AppendEntries t leaderId prevLogIndex prevLogTerm entries leaderCommit H_term : 0 < prevLogTerm cronies_correct_invariant : forall net : network, refined_raft_intermediate_reachable net -> cronies_correct net cronies_term_invariant : forall net : network, refined_raft_intermediate_reachable net -> cronies_term net candidate_entries_invariant : forall net : network, refined_raft_intermediate_reachable net -> CandidateEntries net refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (GhostSimulations.deghost net) Unable to unify \"0 < prevLogTerm\" with \"candidateEntriesTerm prevLogTerm (nwState net)\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros net H_refined.", "unfold prevLog_candidateEntriesTerm.", "intros p t leaderId prevLogIndex prevLogTerm entries leaderCommit H_in H_body H_term.", "qsimpl."], "tactic": "apply H_cand.", "exn": "The reference H_cand was not found in the current environment.", "type": "ref_not_found", "handled": true}]}, "chat": [], "original": "intros net H_refined. unfold prevLog_candidateEntriesTerm. intros p t leaderId prevLogIndex prevLogTerm entries leaderCommit H_in H_body H_term. apply H_refined in H_in as H_cand. apply H_term. apply H_cand.", "succ": false}]