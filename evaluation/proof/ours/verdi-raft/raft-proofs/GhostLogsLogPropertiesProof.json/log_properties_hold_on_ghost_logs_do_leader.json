[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": [], "tactic": "intros orig_base_params one_node_params raft_params rmri net st' ps' gd d h os d' ms H_do_leader H_P H_msg_reachable H_nwState H_st_update.", "exn": "orig_base_params is already used.", "type": "used_var", "handled": true}, {"ctx": [], "tactic": "intros orig_base_params' one_node_params raft_params rmri net st' ps' gd d h os d' ms H_do_leader H_P H_msg_reachable H_nwState H_st_update.", "exn": "one_node_params is already used.", "type": "used_var", "handled": true}, {"ctx": [], "tactic": "intros orig_base_params' one_node_params' raft_params rmri net st' ps' gd d h os d' ms H_do_leader H_P H_msg_reachable H_nwState H_st_update.", "exn": "raft_params is already used.", "type": "used_var", "handled": true}, {"ctx": [], "tactic": "intros orig_base_params' one_node_params' raft_params' rmri net st' ps' gd d h os d' ms H_do_leader H_P H_msg_reachable H_nwState H_st_update.", "exn": "rmri is already used.", "type": "used_var", "handled": true}, {"ctx": ["intros orig_base_params' one_node_params' raft_params' rmri' net st' ps' gd d h os d' ms H_do_leader H_P H_msg_reachable H_nwState H_st_update.", "intros."], "tactic": "apply H in H_do_leader as H_inv.", "exn": "Unable to apply lemma of type \"msg_log_property H_nwState\" on hypothesis of type \"nwState orig_base_params' st' = (rmri', net)\".", "type": "cannot_apply_in", "handled": true}, {"ctx": ["intros orig_base_params' one_node_params' raft_params' rmri' net st' ps' gd d h os d' ms H_do_leader H_P H_msg_reachable H_nwState H_st_update.", "intros.", "qsimpl."], "tactic": "apply H_inv with (st' := st') (ps' := ps') (gd := gd) (d := d) (h := h) (os := os) (d' := d') (ms := ms); auto.", "exn": "The reference H_inv was not found in the current environment.", "type": "ref_not_found", "handled": true}]}, "chat": [], "original": "intros orig_base_params one_node_params raft_params rmri net st' ps' gd d h os d' ms H_do_leader H_P H_msg_reachable H_nwState H_st_update. unfold msg_refined_raft_net_invariant_do_leader' in *. intros. apply H in H_do_leader as H_inv. apply H_inv with (st' := st') (ps' := ps') (gd := gd) (d := d) (h := h) (os := os) (d' := d') (ms := ms); auto.", "succ": false}]