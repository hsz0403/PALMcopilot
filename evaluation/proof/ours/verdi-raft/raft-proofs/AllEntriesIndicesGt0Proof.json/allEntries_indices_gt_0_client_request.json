[{"history": {"proof": "qsimpl time: 2 use: raft_refined_base_params. qsimpl time: 2 use: raft_refined_multi_params,raft_refined_base_params. qsimpl time: 2 use: raft_refined_multi_params,raft_refined_failure_params,raft_refined_base_params. qsimpl time: 2 use: raft_refined_multi_params,raft_refined_failure_params,raft_refined_base_params. qsimpl time: 2 use: raft_refined_multi_params,raft_refined_failure_params,raft_refined_base_params. qsimpl time: 2 use: raft_refined_multi_params,raft_refined_failure_params,raft_refined_base_params. unfold refined_raft_net_invariant_client_request. intros. qsimpl time: 2 use: raft_refined_multi_params,raft_refined_failure_params,raft_refined_base_params. qsimpl time: 2 use: raft_refined_multi_params,raft_refined_failure_params,raft_refined_base_params. qsimpl time: 2 use: raft_refined_multi_params,raft_refined_failure_params,raft_refined_base_params. qsimpl time: 2 use: raft_refined_multi_params,raft_refined_failure_params,raft_refined_base_params. qsimpl time: 2 use: raft_refined_multi_params,raft_refined_failure_params,raft_refined_base_params. qsimpl time: 2 use: raft_refined_multi_params,raft_refined_failure_params,raft_refined_base_params. qsimpl time: 2 use: raft_refined_multi_params,raft_refined_failure_params,raft_refined_base_params. qsimpl time: 2 use: raft_refined_multi_params,raft_refined_failure_params,raft_refined_base_params. qsimpl time: 2 use: raft_refined_multi_params,raft_refined_failure_params,raft_refined_base_params.", "repairs": ["cannot_apply_in", "no_hypos", "no_hypos", "no_hypos", "no_hypos", "no_hypos", "", "", "cannot_unify", "cannot_unify", "cannot_unify", "cannot_unify", "cannot_unify", "cannot_unify", "cannot_unify", "cannot_unify", "cannot_unify"], "exceptions": [{"ctx": [], "tactic": "apply raft_refined_base_params in rri.", "exn": "Unable to apply lemma of type \"BaseParams\" on hypothesis of type \"raft_refinement_interface\".", "type": "cannot_apply_in", "handled": true}, {"ctx": ["qsimpl time: 2 use: raft_refined_base_params."], "tactic": "apply raft_refined_multi_params in rri.", "exn": "No such hypothesis: rri", "type": "no_hypos", "handled": true}, {"ctx": ["qsimpl time: 2 use: raft_refined_base_params.", "qsimpl time: 2 use: raft_refined_multi_params,raft_refined_base_params."], "tactic": "apply raft_refined_failure_params in rri.", "exn": "No such hypothesis: rri", "type": "no_hypos", "handled": true}, {"ctx": ["qsimpl time: 2 use: raft_refined_base_params.", "qsimpl time: 2 use: raft_refined_multi_params,raft_refined_base_params.", "qsimpl time: 2 use: raft_refined_multi_params,raft_refined_failure_params,raft_refined_base_params."], "tactic": "apply raft_refined_base_params in taifoli.", "exn": "No such hypothesis: taifoli", "type": "no_hypos", "handled": true}, {"ctx": ["qsimpl time: 2 use: raft_refined_base_params.", "qsimpl time: 2 use: raft_refined_multi_params,raft_refined_base_params.", "qsimpl time: 2 use: raft_refined_multi_params,raft_refined_failure_params,raft_refined_base_params.", "qsimpl time: 2 use: raft_refined_multi_params,raft_refined_failure_params,raft_refined_base_params."], "tactic": "apply raft_refined_multi_params in taifoli.", "exn": "No such hypothesis: taifoli", "type": "no_hypos", "handled": true}, {"ctx": ["qsimpl time: 2 use: raft_refined_base_params.", "qsimpl time: 2 use: raft_refined_multi_params,raft_refined_base_params.", "qsimpl time: 2 use: raft_refined_multi_params,raft_refined_failure_params,raft_refined_base_params.", "qsimpl time: 2 use: raft_refined_multi_params,raft_refined_failure_params,raft_refined_base_params.", "qsimpl time: 2 use: raft_refined_multi_params,raft_refined_failure_params,raft_refined_base_params."], "tactic": "apply raft_refined_failure_params in taifoli.", "exn": "No such hypothesis: taifoli", "type": "no_hypos", "handled": true}, {"ctx": ["qsimpl time: 2 use: raft_refined_base_params.", "qsimpl time: 2 use: raft_refined_multi_params,raft_refined_base_params.", "qsimpl time: 2 use: raft_refined_multi_params,raft_refined_failure_params,raft_refined_base_params.", "qsimpl time: 2 use: raft_refined_multi_params,raft_refined_failure_params,raft_refined_base_params.", "qsimpl time: 2 use: raft_refined_multi_params,raft_refined_failure_params,raft_refined_base_params.", "qsimpl time: 2 use: raft_refined_multi_params,raft_refined_failure_params,raft_refined_base_params.", "unfold refined_raft_net_invariant_client_request.", "intros."], "tactic": "apply H.", "exn": "In environment X6, orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params X5, X4, X3, X1, X : BaseParams terms_and_indices_from_one_log_invariant : forall net : network, raft_intermediate_reachable net -> terms_and_indices_from_one_log net terms_and_indices_from_one_log_nw_invariant : forall net : network, raft_intermediate_reachable net -> terms_and_indices_from_one_log_nw net refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : Raft.name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (deghost net) name : Type msg : Type nodes : list name msg_eq_dec : forall x y : msg, {x = y} + {x = y -> False} name_eq_dec : forall x y : name, {x = y} + {x = y -> False} all_names_nodes : forall n : name, In n nodes no_dup_nodes : NoDup nodes init_handlers : name -> electionsData * raft_data input_handlers : name -> raft_input -> electionsData * raft_data -> list raft_output * (electionsData * raft_data) * list (name * msg) H : name -> msg -> electionsData * raft_data -> list raft_output * (electionsData * raft_data) * list (name * msg) name0 : Type msg0 : Type nodes0 : list name0 msg_eq_dec0 : forall x y : msg0, {x = y} + {x = y -> False} name_eq_dec0 : forall x y : name0, {x = y} + {x = y -> False} all_names_nodes0 : forall n : name0, In n nodes0 no_dup_nodes0 : NoDup nodes0 init_handlers0 : name0 -> electionsData * raft_data input_handlers0 : name0 -> raft_input -> electionsData * raft_data -> list raft_output * (electionsData * raft_data) * list (name0 * msg0) H0 : name0 -> msg0 -> electionsData * raft_data -> list raft_output * (electionsData * raft_data) * list (name0 * msg0) name1 : Type msg1 : Type nodes1 : list name1 msg_eq_dec1 : forall x y : msg1, {x = y} + {x = y -> False} name_eq_dec1 : forall x y : name1, {x = y} + {x = y -> False} all_names_nodes1 : forall n : name1, In n nodes1 no_dup_nodes1 : NoDup nodes1 init_handlers1 : name1 -> electionsData * raft_data input_handlers1 : name1 -> raft_input -> electionsData * raft_data -> list raft_output * (electionsData * raft_data) * list (name1 * msg1) H1 : name1 -> msg1 -> electionsData * raft_data -> list raft_output * (electionsData * raft_data) * list (name1 * msg1) name2 : Type msg2 : Type nodes2 : list name2 msg_eq_dec2 : forall x y : msg2, {x = y} + {x = y -> False} name_eq_dec2 : forall x y : name2, {x = y} + {x = y -> False} all_names_nodes2 : forall n : name2, In n nodes2 no_dup_nodes2 : NoDup nodes2 init_handlers2 : name2 -> electionsData * raft_data input_handlers2 : name2 -> raft_input -> electionsData * raft_data -> list raft_output * (electionsData * raft_data) * list (name2 * msg2) H2 : name2 -> msg2 -> electionsData * raft_data -> list raft_output * (electionsData * raft_data) * list (name2 * msg2) name3 : Type msg3 : Type nodes3 : list name3 msg_eq_dec3 : forall x y : msg3, {x = y} + {x = y -> False} name_eq_dec3 : forall x y : name3, {x = y} + {x = y -> False} all_names_nodes3 : forall n : name3, In n nodes3 no_dup_nodes3 : NoDup nodes3 init_handlers3 : name3 -> electionsData * raft_data input_handlers3 : name3 -> raft_input -> electionsData * raft_data -> list raft_output * (electionsData * raft_data) * list (name3 * msg3) H3 : name3 -> msg3 -> electionsData * raft_data -> list raft_output * (electionsData * raft_data) * list (name3 * msg3) h : Raft.name net : network st' : Raft.name -> data ps' : list packet gd : electionsData out : list raft_output d : raft_data l : list (Raft.name * Raft.msg) client : clientId id : nat c : input H4 : handleClientRequest h (snd (nwState net h)) client id c = (out, d, l) H5 : gd = update_elections_data_client_request h (nwState net h) client id c H6 : allEntries_indices_gt_0 net H7 : refined_raft_intermediate_reachable net H8 : forall h' : Raft.name, st' h' = update Raft.name_eq_dec (nwState net) h (gd, d) h' H9 : forall p' : packet, In p' ps' -> In p' (nwPackets net) \\\\/ In p' (send_packets h l) Unable to unify \"(list raft_output * (electionsData * raft_data) * list (name * msg))%type\" with \"allEntries_indices_gt_0 {| nwPackets := ps'; nwState := st' |}\".", "type": "cannot_unify", "handled": true}, {"ctx": ["qsimpl time: 2 use: raft_refined_base_params.", "qsimpl time: 2 use: raft_refined_multi_params,raft_refined_base_params.", "qsimpl time: 2 use: raft_refined_multi_params,raft_refined_failure_params,raft_refined_base_params.", "qsimpl time: 2 use: raft_refined_multi_params,raft_refined_failure_params,raft_refined_base_params.", "qsimpl time: 2 use: raft_refined_multi_params,raft_refined_failure_params,raft_refined_base_params.", "qsimpl time: 2 use: raft_refined_multi_params,raft_refined_failure_params,raft_refined_base_params.", "unfold refined_raft_net_invariant_client_request.", "intros.", "qsimpl time: 2 use: raft_refined_multi_params,raft_refined_failure_params,raft_refined_base_params."], "tactic": "apply H0.", "exn": "In environment b, orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params X0 : FailureParams refined_multi_params m : MultiParams refined_base_params X6, X5, X4, X3, X1, X : BaseParams terms_and_indices_from_one_log_invariant : forall net : network, raft_intermediate_reachable net -> terms_and_indices_from_one_log net terms_and_indices_from_one_log_nw_invariant : forall net : network, raft_intermediate_reachable net -> terms_and_indices_from_one_log_nw net refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : Raft.name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (deghost net) name : Type msg : Type nodes : list name msg_eq_dec : forall x y : msg, {x = y} + {x = y -> False} name_eq_dec : forall x y : name, {x = y} + {x = y -> False} all_names_nodes : forall n : name, In n nodes no_dup_nodes : NoDup nodes init_handlers : name -> electionsData * raft_data input_handlers : name -> raft_input -> electionsData * raft_data -> list raft_output * (electionsData * raft_data) * list (name * msg) H : name -> msg -> electionsData * raft_data -> list raft_output * (electionsData * raft_data) * list (name * msg) name0 : Type msg0 : Type nodes0 : list name0 msg_eq_dec0 : forall x y : msg0, {x = y} + {x = y -> False} name_eq_dec0 : forall x y : name0, {x = y} + {x = y -> False} all_names_nodes0 : forall n : name0, In n nodes0 no_dup_nodes0 : NoDup nodes0 init_handlers0 : name0 -> electionsData * raft_data input_handlers0 : name0 -> raft_input -> electionsData * raft_data -> list raft_output * (electionsData * raft_data) * list (name0 * msg0) H0 : name0 -> msg0 -> electionsData * raft_data -> list raft_output * (electionsData * raft_data) * list (name0 * msg0) name1 : Type msg1 : Type nodes1 : list name1 msg_eq_dec1 : forall x y : msg1, {x = y} + {x = y -> False} name_eq_dec1 : forall x y : name1, {x = y} + {x = y -> False} all_names_nodes1 : forall n : name1, In n nodes1 no_dup_nodes1 : NoDup nodes1 init_handlers1 : name1 -> electionsData * raft_data input_handlers1 : name1 -> raft_input -> electionsData * raft_data -> list raft_output * (electionsData * raft_data) * list (name1 * msg1) H1 : name1 -> msg1 -> electionsData * raft_data -> list raft_output * (electionsData * raft_data) * list (name1 * msg1) name2 : Type msg2 : Type nodes2 : list name2 msg_eq_dec2 : forall x y : msg2, {x = y} + {x = y -> False} name_eq_dec2 : forall x y : name2, {x = y} + {x = y -> False} all_names_nodes2 : forall n : name2, In n nodes2 no_dup_nodes2 : NoDup nodes2 init_handlers2 : name2 -> electionsData * raft_data input_handlers2 : name2 -> raft_input -> electionsData * raft_data -> list raft_output * (electionsData * raft_data) * list (name2 * msg2) H2 : name2 -> msg2 -> electionsData * raft_data -> list raft_output * (electionsData * raft_data) * list (name2 * msg2) name3 : Type msg3 : Type nodes3 : list name3 msg_eq_dec3 : forall x y : msg3, {x = y} + {x = y -> False} name_eq_dec3 : forall x y : name3, {x = y} + {x = y -> False} all_names_nodes3 : forall n : name3, In n nodes3 no_dup_nodes3 : NoDup nodes3 init_handlers3 : name3 -> electionsData * raft_data input_handlers3 : name3 -> raft_input -> electionsData * raft_data -> list raft_output * (electionsData * raft_data) * list (name3 * msg3) H3 : name3 -> msg3 -> electionsData * raft_data -> list raft_output * (electionsData * raft_data) * list (name3 * msg3) h : Raft.name net : network st' : Raft.name -> electionsData * raft_data ps' : list packet gd : electionsData out : list raft_output d : raft_data l : list (Raft.name * Raft.msg) client : clientId id : nat c : input H4 : handleClientRequest h (snd (nwState net h)) client id c = (out, d, l) H5 : gd = update_elections_data_client_request h (nwState net h) client id c H6 : allEntries_indices_gt_0 net H7 : refined_raft_intermediate_reachable net H8 : forall h' : Raft.name, st' h' = update Raft.name_eq_dec (nwState net) h (gd, d) h' H9 : forall p' : packet, In p' ps' -> In p' (nwPackets net) \\\\/ In p' (map (fun m : Raft.name * Raft.msg => {| pSrc := h; pDst := fst m; pBody := snd m |}) l) Unable to unify \"(list raft_output * (electionsData * raft_data) * list (name0 * msg0))%type\" with \"allEntries_indices_gt_0 {| nwPackets := ps'; nwState := st' |}\".", "type": "cannot_unify", "handled": true}, {"ctx": ["qsimpl time: 2 use: raft_refined_base_params.", "qsimpl time: 2 use: raft_refined_multi_params,raft_refined_base_params.", "qsimpl time: 2 use: raft_refined_multi_params,raft_refined_failure_params,raft_refined_base_params.", "qsimpl time: 2 use: raft_refined_multi_params,raft_refined_failure_params,raft_refined_base_params.", "qsimpl time: 2 use: raft_refined_multi_params,raft_refined_failure_params,raft_refined_base_params.", "qsimpl time: 2 use: raft_refined_multi_params,raft_refined_failure_params,raft_refined_base_params.", "unfold refined_raft_net_invariant_client_request.", "intros.", "qsimpl time: 2 use: raft_refined_multi_params,raft_refined_failure_params,raft_refined_base_params.", "qsimpl time: 2 use: raft_refined_multi_params,raft_refined_failure_params,raft_refined_base_params."], "tactic": "apply H1.", "exn": "In environment X8, orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params X7 : FailureParams refined_multi_params X2 : MultiParams refined_base_params b : BaseParams X0 : FailureParams refined_multi_params m : MultiParams refined_base_params X6, X5, X4, X3, X1, X : BaseParams terms_and_indices_from_one_log_invariant : forall net : network, raft_intermediate_reachable net -> terms_and_indices_from_one_log net terms_and_indices_from_one_log_nw_invariant : forall net : network, raft_intermediate_reachable net -> terms_and_indices_from_one_log_nw net refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : Raft.name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (deghost net) name : Type msg : Type nodes : list name msg_eq_dec : forall x y : msg, {x = y} + {x = y -> False} name_eq_dec : forall x y : name, {x = y} + {x = y -> False} all_names_nodes : forall n : name, In n nodes no_dup_nodes : NoDup nodes init_handlers : name -> electionsData * raft_data input_handlers : name -> raft_input -> electionsData * raft_data -> list raft_output * (electionsData * raft_data) * list (name * msg) H : name -> msg -> electionsData * raft_data -> list raft_output * (electionsData * raft_data) * list (name * msg) name0 : Type msg0 : Type nodes0 : list name0 msg_eq_dec0 : forall x y : msg0, {x = y} + {x = y -> False} name_eq_dec0 : forall x y : name0, {x = y} + {x = y -> False} all_names_nodes0 : forall n : name0, In n nodes0 no_dup_nodes0 : NoDup nodes0 init_handlers0 : name0 -> electionsData * raft_data input_handlers0 : name0 -> raft_input -> electionsData * raft_data -> list raft_output * (electionsData * raft_data) * list (name0 * msg0) H0 : name0 -> msg0 -> electionsData * raft_data -> list raft_output * (electionsData * raft_data) * list (name0 * msg0) name1 : Type msg1 : Type nodes1 : list name1 msg_eq_dec1 : forall x y : msg1, {x = y} + {x = y -> False} name_eq_dec1 : forall x y : name1, {x = y} + {x = y -> False} all_names_nodes1 : forall n : name1, In n nodes1 no_dup_nodes1 : NoDup nodes1 init_handlers1 : name1 -> electionsData * raft_data input_handlers1 : name1 -> raft_input -> electionsData * raft_data -> list raft_output * (electionsData * raft_data) * list (name1 * msg1) H1 : name1 -> msg1 -> electionsData * raft_data -> list raft_output * (electionsData * raft_data) * list (name1 * msg1) name2 : Type msg2 : Type nodes2 : list name2 msg_eq_dec2 : forall x y : msg2, {x = y} + {x = y -> False} name_eq_dec2 : forall x y : name2, {x = y} + {x = y -> False} all_names_nodes2 : forall n : name2, In n nodes2 no_dup_nodes2 : NoDup nodes2 init_handlers2 : name2 -> electionsData * raft_data input_handlers2 : name2 -> raft_input -> electionsData * raft_data -> list raft_output * (electionsData * raft_data) * list (name2 * msg2) H2 : name2 -> msg2 -> electionsData * raft_data -> list raft_output * (electionsData * raft_data) * list (name2 * msg2) name3 : Type msg3 : Type nodes3 : list name3 msg_eq_dec3 : forall x y : msg3, {x = y} + {x = y -> False} name_eq_dec3 : forall x y : name3, {x = y} + {x = y -> False} all_names_nodes3 : forall n : name3, In n nodes3 no_dup_nodes3 : NoDup nodes3 init_handlers3 : name3 -> electionsData * raft_data input_handlers3 : name3 -> raft_input -> electionsData * raft_data -> list raft_output * (electionsData * raft_data) * list (name3 * msg3) H3 : name3 -> msg3 -> electionsData * raft_data -> list raft_output * (electionsData * raft_data) * list (name3 * msg3) h : Raft.name net : network st' : Raft.name -> electionsData * raft_data ps' : list packet gd : electionsData out : list raft_output d : raft_data l : list (Raft.name * Raft.msg) client : clientId id : nat c : input H4 : handleClientRequest h (snd (nwState net h)) client id c = (out, d, l) H5 : gd = update_elections_data_client_request h (nwState net h) client id c H6 : allEntries_indices_gt_0 net H7 : refined_raft_intermediate_reachable net H8 : forall h' : Raft.name, st' h' = update Raft.name_eq_dec (nwState net) h (gd, d) h' H9 : forall p' : packet, In p' ps' -> In p' (nwPackets net) \\\\/ In p' (map (fun m : Raft.name * Raft.msg => {| pSrc := h; pDst := fst m; pBody := snd m |}) l) Unable to unify \"(list raft_output * (electionsData * raft_data) * list (name1 * msg1))%type\" with \"allEntries_indices_gt_0 {| nwPackets := ps'; nwState := st' |}\".", "type": "cannot_unify", "handled": true}, {"ctx": ["qsimpl time: 2 use: raft_refined_base_params.", "qsimpl time: 2 use: raft_refined_multi_params,raft_refined_base_params.", "qsimpl time: 2 use: raft_refined_multi_params,raft_refined_failure_params,raft_refined_base_params.", "qsimpl time: 2 use: raft_refined_multi_params,raft_refined_failure_params,raft_refined_base_params.", "qsimpl time: 2 use: raft_refined_multi_params,raft_refined_failure_params,raft_refined_base_params.", "qsimpl time: 2 use: raft_refined_multi_params,raft_refined_failure_params,raft_refined_base_params.", "unfold refined_raft_net_invariant_client_request.", "intros.", "qsimpl time: 2 use: raft_refined_multi_params,raft_refined_failure_params,raft_refined_base_params.", "qsimpl time: 2 use: raft_refined_multi_params,raft_refined_failure_params,raft_refined_base_params.", "qsimpl time: 2 use: raft_refined_multi_params,raft_refined_failure_params,raft_refined_base_params."], "tactic": "apply H2.", "exn": "In environment X11, orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params X10 : FailureParams refined_multi_params X9 : MultiParams refined_base_params X8 : BaseParams X7 : FailureParams refined_multi_params X2 : MultiParams refined_base_params b : BaseParams X0 : FailureParams refined_multi_params m : MultiParams refined_base_params X6, X5, X4, X3, X1, X : BaseParams terms_and_indices_from_one_log_invariant : forall net : network, raft_intermediate_reachable net -> terms_and_indices_from_one_log net terms_and_indices_from_one_log_nw_invariant : forall net : network, raft_intermediate_reachable net -> terms_and_indices_from_one_log_nw net refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : Raft.name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (deghost net) name : Type msg : Type nodes : list name msg_eq_dec : forall x y : msg, {x = y} + {x = y -> False} name_eq_dec : forall x y : name, {x = y} + {x = y -> False} all_names_nodes : forall n : name, In n nodes no_dup_nodes : NoDup nodes init_handlers : name -> electionsData * raft_data input_handlers : name -> raft_input -> electionsData * raft_data -> list raft_output * (electionsData * raft_data) * list (name * msg) H : name -> msg -> electionsData * raft_data -> list raft_output * (electionsData * raft_data) * list (name * msg) name0 : Type msg0 : Type nodes0 : list name0 msg_eq_dec0 : forall x y : msg0, {x = y} + {x = y -> False} name_eq_dec0 : forall x y : name0, {x = y} + {x = y -> False} all_names_nodes0 : forall n : name0, In n nodes0 no_dup_nodes0 : NoDup nodes0 init_handlers0 : name0 -> electionsData * raft_data input_handlers0 : name0 -> raft_input -> electionsData * raft_data -> list raft_output * (electionsData * raft_data) * list (name0 * msg0) H0 : name0 -> msg0 -> electionsData * raft_data -> list raft_output * (electionsData * raft_data) * list (name0 * msg0) name1 : Type msg1 : Type nodes1 : list name1 msg_eq_dec1 : forall x y : msg1, {x = y} + {x = y -> False} name_eq_dec1 : forall x y : name1, {x = y} + {x = y -> False} all_names_nodes1 : forall n : name1, In n nodes1 no_dup_nodes1 : NoDup nodes1 init_handlers1 : name1 -> electionsData * raft_data input_handlers1 : name1 -> raft_input -> electionsData * raft_data -> list raft_output * (electionsData * raft_data) * list (name1 * msg1) H1 : name1 -> msg1 -> electionsData * raft_data -> list raft_output * (electionsData * raft_data) * list (name1 * msg1) name2 : Type msg2 : Type nodes2 : list name2 msg_eq_dec2 : forall x y : msg2, {x = y} + {x = y -> False} name_eq_dec2 : forall x y : name2, {x = y} + {x = y -> False} all_names_nodes2 : forall n : name2, In n nodes2 no_dup_nodes2 : NoDup nodes2 init_handlers2 : name2 -> electionsData * raft_data input_handlers2 : name2 -> raft_input -> electionsData * raft_data -> list raft_output * (electionsData * raft_data) * list (name2 * msg2) H2 : name2 -> msg2 -> electionsData * raft_data -> list raft_output * (electionsData * raft_data) * list (name2 * msg2) name3 : Type msg3 : Type nodes3 : list name3 msg_eq_dec3 : forall x y : msg3, {x = y} + {x = y -> False} name_eq_dec3 : forall x y : name3, {x = y} + {x = y -> False} all_names_nodes3 : forall n : name3, In n nodes3 no_dup_nodes3 : NoDup nodes3 init_handlers3 : name3 -> electionsData * raft_data input_handlers3 : name3 -> raft_input -> electionsData * raft_data -> list raft_output * (electionsData * raft_data) * list (name3 * msg3) H3 : name3 -> msg3 -> electionsData * raft_data -> list raft_output * (electionsData * raft_data) * list (name3 * msg3) h : Raft.name net : network st' : Raft.name -> electionsData * raft_data ps' : list packet gd : electionsData out : list raft_output d : raft_data l : list (Raft.name * Raft.msg) client : clientId id : nat c : input H4 : handleClientRequest h (snd (nwState net h)) client id c = (out, d, l) H5 : gd = update_elections_data_client_request h (nwState net h) client id c H6 : allEntries_indices_gt_0 net H7 : refined_raft_intermediate_reachable net H8 : forall h' : Raft.name, st' h' = update Raft.name_eq_dec (nwState net) h (gd, d) h' H9 : forall p' : packet, In p' ps' -> In p' (nwPackets net) \\\\/ In p' (map (fun m : Raft.name * Raft.msg => {| pSrc := h; pDst := fst m; pBody := snd m |}) l) Unable to unify \"(list raft_output * (electionsData * raft_data) * list (name2 * msg2))%type\" with \"allEntries_indices_gt_0 {| nwPackets := ps'; nwState := st' |}\".", "type": "cannot_unify", "handled": true}, {"ctx": ["qsimpl time: 2 use: raft_refined_base_params.", "qsimpl time: 2 use: raft_refined_multi_params,raft_refined_base_params.", "qsimpl time: 2 use: raft_refined_multi_params,raft_refined_failure_params,raft_refined_base_params.", "qsimpl time: 2 use: raft_refined_multi_params,raft_refined_failure_params,raft_refined_base_params.", "qsimpl time: 2 use: raft_refined_multi_params,raft_refined_failure_params,raft_refined_base_params.", "qsimpl time: 2 use: raft_refined_multi_params,raft_refined_failure_params,raft_refined_base_params.", "unfold refined_raft_net_invariant_client_request.", "intros.", "qsimpl time: 2 use: raft_refined_multi_params,raft_refined_failure_params,raft_refined_base_params.", "qsimpl time: 2 use: raft_refined_multi_params,raft_refined_failure_params,raft_refined_base_params.", "qsimpl time: 2 use: raft_refined_multi_params,raft_refined_failure_params,raft_refined_base_params.", "qsimpl time: 2 use: raft_refined_multi_params,raft_refined_failure_params,raft_refined_base_params."], "tactic": "apply H3.", "exn": "In environment X14, orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params X13 : FailureParams refined_multi_params X12 : MultiParams refined_base_params X11 : BaseParams X10 : FailureParams refined_multi_params X9 : MultiParams refined_base_params X8 : BaseParams X7 : FailureParams refined_multi_params X2 : MultiParams refined_base_params b : BaseParams X0 : FailureParams refined_multi_params m : MultiParams refined_base_params X6, X5, X4, X3, X1, X : BaseParams terms_and_indices_from_one_log_invariant : forall net : network, raft_intermediate_reachable net -> terms_and_indices_from_one_log net terms_and_indices_from_one_log_nw_invariant : forall net : network, raft_intermediate_reachable net -> terms_and_indices_from_one_log_nw net refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : Raft.name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (deghost net) name : Type msg : Type nodes : list name msg_eq_dec : forall x y : msg, {x = y} + {x = y -> False} name_eq_dec : forall x y : name, {x = y} + {x = y -> False} all_names_nodes : forall n : name, In n nodes no_dup_nodes : NoDup nodes init_handlers : name -> electionsData * raft_data input_handlers : name -> raft_input -> electionsData * raft_data -> list raft_output * (electionsData * raft_data) * list (name * msg) H : name -> msg -> electionsData * raft_data -> list raft_output * (electionsData * raft_data) * list (name * msg) name0 : Type msg0 : Type nodes0 : list name0 msg_eq_dec0 : forall x y : msg0, {x = y} + {x = y -> False} name_eq_dec0 : forall x y : name0, {x = y} + {x = y -> False} all_names_nodes0 : forall n : name0, In n nodes0 no_dup_nodes0 : NoDup nodes0 init_handlers0 : name0 -> electionsData * raft_data input_handlers0 : name0 -> raft_input -> electionsData * raft_data -> list raft_output * (electionsData * raft_data) * list (name0 * msg0) H0 : name0 -> msg0 -> electionsData * raft_data -> list raft_output * (electionsData * raft_data) * list (name0 * msg0) name1 : Type msg1 : Type nodes1 : list name1 msg_eq_dec1 : forall x y : msg1, {x = y} + {x = y -> False} name_eq_dec1 : forall x y : name1, {x = y} + {x = y -> False} all_names_nodes1 : forall n : name1, In n nodes1 no_dup_nodes1 : NoDup nodes1 init_handlers1 : name1 -> electionsData * raft_data input_handlers1 : name1 -> raft_input -> electionsData * raft_data -> list raft_output * (electionsData * raft_data) * list (name1 * msg1) H1 : name1 -> msg1 -> electionsData * raft_data -> list raft_output * (electionsData * raft_data) * list (name1 * msg1) name2 : Type msg2 : Type nodes2 : list name2 msg_eq_dec2 : forall x y : msg2, {x = y} + {x = y -> False} name_eq_dec2 : forall x y : name2, {x = y} + {x = y -> False} all_names_nodes2 : forall n : name2, In n nodes2 no_dup_nodes2 : NoDup nodes2 init_handlers2 : name2 -> electionsData * raft_data input_handlers2 : name2 -> raft_input -> electionsData * raft_data -> list raft_output * (electionsData * raft_data) * list (name2 * msg2) H2 : name2 -> msg2 -> electionsData * raft_data -> list raft_output * (electionsData * raft_data) * list (name2 * msg2) name3 : Type msg3 : Type nodes3 : list name3 msg_eq_dec3 : forall x y : msg3, {x = y} + {x = y -> False} name_eq_dec3 : forall x y : name3, {x = y} + {x = y -> False} all_names_nodes3 : forall n : name3, In n nodes3 no_dup_nodes3 : NoDup nodes3 init_handlers3 : name3 -> electionsData * raft_data input_handlers3 : name3 -> raft_input -> electionsData * raft_data -> list raft_output * (electionsData * raft_data) * list (name3 * msg3) H3 : name3 -> msg3 -> electionsData * raft_data -> list raft_output * (electionsData * raft_data) * list (name3 * msg3) h : Raft.name net : network st' : Raft.name -> electionsData * raft_data ps' : list packet gd : electionsData out : list raft_output d : raft_data l : list (Raft.name * Raft.msg) client : clientId id : nat c : input H4 : handleClientRequest h (snd (nwState net h)) client id c = (out, d, l) H5 : gd = update_elections_data_client_request h (nwState net h) client id c H6 : allEntries_indices_gt_0 net H7 : refined_raft_intermediate_reachable net H8 : forall h' : Raft.name, st' h' = update Raft.name_eq_dec (nwState net) h (gd, d) h' H9 : forall p' : packet, In p' ps' -> In p' (nwPackets net) \\\\/ In p' (map (fun m : Raft.name * Raft.msg => {| pSrc := h; pDst := fst m; pBody := snd m |}) l) Unable to unify \"(list raft_output * (electionsData * raft_data) * list (name3 * msg3))%type\" with \"allEntries_indices_gt_0 {| nwPackets := ps'; nwState := st' |}\".", "type": "cannot_unify", "handled": true}, {"ctx": ["qsimpl time: 2 use: raft_refined_base_params.", "qsimpl time: 2 use: raft_refined_multi_params,raft_refined_base_params.", "qsimpl time: 2 use: raft_refined_multi_params,raft_refined_failure_params,raft_refined_base_params.", "qsimpl time: 2 use: raft_refined_multi_params,raft_refined_failure_params,raft_refined_base_params.", "qsimpl time: 2 use: raft_refined_multi_params,raft_refined_failure_params,raft_refined_base_params.", "qsimpl time: 2 use: raft_refined_multi_params,raft_refined_failure_params,raft_refined_base_params.", "unfold refined_raft_net_invariant_client_request.", "intros.", "qsimpl time: 2 use: raft_refined_multi_params,raft_refined_failure_params,raft_refined_base_params.", "qsimpl time: 2 use: raft_refined_multi_params,raft_refined_failure_params,raft_refined_base_params.", "qsimpl time: 2 use: raft_refined_multi_params,raft_refined_failure_params,raft_refined_base_params.", "qsimpl time: 2 use: raft_refined_multi_params,raft_refined_failure_params,raft_refined_base_params.", "qsimpl time: 2 use: raft_refined_multi_params,raft_refined_failure_params,raft_refined_base_params."], "tactic": "apply H4.", "exn": "In environment X17, orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params X16 : FailureParams refined_multi_params X15 : MultiParams refined_base_params X14 : BaseParams X13 : FailureParams refined_multi_params X12 : MultiParams refined_base_params X11 : BaseParams X10 : FailureParams refined_multi_params X9 : MultiParams refined_base_params X8 : BaseParams X7 : FailureParams refined_multi_params X2 : MultiParams refined_base_params b : BaseParams X0 : FailureParams refined_multi_params m : MultiParams refined_base_params X6, X5, X4, X3, X1, X : BaseParams terms_and_indices_from_one_log_invariant : forall net : network, raft_intermediate_reachable net -> terms_and_indices_from_one_log net terms_and_indices_from_one_log_nw_invariant : forall net : network, raft_intermediate_reachable net -> terms_and_indices_from_one_log_nw net refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : Raft.name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (deghost net) name : Type msg : Type nodes : list name msg_eq_dec : forall x y : msg, {x = y} + {x = y -> False} name_eq_dec : forall x y : name, {x = y} + {x = y -> False} all_names_nodes : forall n : name, In n nodes no_dup_nodes : NoDup nodes init_handlers : name -> electionsData * raft_data input_handlers : name -> raft_input -> electionsData * raft_data -> list raft_output * (electionsData * raft_data) * list (name * msg) H : name -> msg -> electionsData * raft_data -> list raft_output * (electionsData * raft_data) * list (name * msg) name0 : Type msg0 : Type nodes0 : list name0 msg_eq_dec0 : forall x y : msg0, {x = y} + {x = y -> False} name_eq_dec0 : forall x y : name0, {x = y} + {x = y -> False} all_names_nodes0 : forall n : name0, In n nodes0 no_dup_nodes0 : NoDup nodes0 init_handlers0 : name0 -> electionsData * raft_data input_handlers0 : name0 -> raft_input -> electionsData * raft_data -> list raft_output * (electionsData * raft_data) * list (name0 * msg0) H0 : name0 -> msg0 -> electionsData * raft_data -> list raft_output * (electionsData * raft_data) * list (name0 * msg0) name1 : Type msg1 : Type nodes1 : list name1 msg_eq_dec1 : forall x y : msg1, {x = y} + {x = y -> False} name_eq_dec1 : forall x y : name1, {x = y} + {x = y -> False} all_names_nodes1 : forall n : name1, In n nodes1 no_dup_nodes1 : NoDup nodes1 init_handlers1 : name1 -> electionsData * raft_data input_handlers1 : name1 -> raft_input -> electionsData * raft_data -> list raft_output * (electionsData * raft_data) * list (name1 * msg1) H1 : name1 -> msg1 -> electionsData * raft_data -> list raft_output * (electionsData * raft_data) * list (name1 * msg1) name2 : Type msg2 : Type nodes2 : list name2 msg_eq_dec2 : forall x y : msg2, {x = y} + {x = y -> False} name_eq_dec2 : forall x y : name2, {x = y} + {x = y -> False} all_names_nodes2 : forall n : name2, In n nodes2 no_dup_nodes2 : NoDup nodes2 init_handlers2 : name2 -> electionsData * raft_data input_handlers2 : name2 -> raft_input -> electionsData * raft_data -> list raft_output * (electionsData * raft_data) * list (name2 * msg2) H2 : name2 -> msg2 -> electionsData * raft_data -> list raft_output * (electionsData * raft_data) * list (name2 * msg2) name3 : Type msg3 : Type nodes3 : list name3 msg_eq_dec3 : forall x y : msg3, {x = y} + {x = y -> False} name_eq_dec3 : forall x y : name3, {x = y} + {x = y -> False} all_names_nodes3 : forall n : name3, In n nodes3 no_dup_nodes3 : NoDup nodes3 init_handlers3 : name3 -> electionsData * raft_data input_handlers3 : name3 -> raft_input -> electionsData * raft_data -> list raft_output * (electionsData * raft_data) * list (name3 * msg3) H3 : name3 -> msg3 -> electionsData * raft_data -> list raft_output * (electionsData * raft_data) * list (name3 * msg3) h : Raft.name net : network st' : Raft.name -> electionsData * raft_data ps' : list packet gd : electionsData out : list raft_output d : raft_data l : list (Raft.name * Raft.msg) client : clientId id : nat c : input H4 : handleClientRequest h (snd (nwState net h)) client id c = (out, d, l) H5 : gd = update_elections_data_client_request h (nwState net h) client id c H6 : allEntries_indices_gt_0 net H7 : refined_raft_intermediate_reachable net H8 : forall h' : Raft.name, st' h' = update Raft.name_eq_dec (nwState net) h (gd, d) h' H9 : forall p' : packet, In p' ps' -> In p' (nwPackets net) \\\\/ In p' (map (fun m : Raft.name * Raft.msg => {| pSrc := h; pDst := fst m; pBody := snd m |}) l) Unable to unify \"handleClientRequest h (snd (nwState net h)) client id c = (out, d, l)\" with \"allEntries_indices_gt_0 {| nwPackets := ps'; nwState := st' |}\".", "type": "cannot_unify", "handled": true}, {"ctx": ["qsimpl time: 2 use: raft_refined_base_params.", "qsimpl time: 2 use: raft_refined_multi_params,raft_refined_base_params.", "qsimpl time: 2 use: raft_refined_multi_params,raft_refined_failure_params,raft_refined_base_params.", "qsimpl time: 2 use: raft_refined_multi_params,raft_refined_failure_params,raft_refined_base_params.", "qsimpl time: 2 use: raft_refined_multi_params,raft_refined_failure_params,raft_refined_base_params.", "qsimpl time: 2 use: raft_refined_multi_params,raft_refined_failure_params,raft_refined_base_params.", "unfold refined_raft_net_invariant_client_request.", "intros.", "qsimpl time: 2 use: raft_refined_multi_params,raft_refined_failure_params,raft_refined_base_params.", "qsimpl time: 2 use: raft_refined_multi_params,raft_refined_failure_params,raft_refined_base_params.", "qsimpl time: 2 use: raft_refined_multi_params,raft_refined_failure_params,raft_refined_base_params.", "qsimpl time: 2 use: raft_refined_multi_params,raft_refined_failure_params,raft_refined_base_params.", "qsimpl time: 2 use: raft_refined_multi_params,raft_refined_failure_params,raft_refined_base_params.", "qsimpl time: 2 use: raft_refined_multi_params,raft_refined_failure_params,raft_refined_base_params."], "tactic": "apply H5.", "exn": "In environment X20, orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params X19 : FailureParams refined_multi_params X18 : MultiParams refined_base_params X17 : BaseParams X16 : FailureParams refined_multi_params X15 : MultiParams refined_base_params X14 : BaseParams X13 : FailureParams refined_multi_params X12 : MultiParams refined_base_params X11 : BaseParams X10 : FailureParams refined_multi_params X9 : MultiParams refined_base_params X8 : BaseParams X7 : FailureParams refined_multi_params X2 : MultiParams refined_base_params b : BaseParams X0 : FailureParams refined_multi_params m : MultiParams refined_base_params X6, X5, X4, X3, X1, X : BaseParams terms_and_indices_from_one_log_invariant : forall net : network, raft_intermediate_reachable net -> terms_and_indices_from_one_log net terms_and_indices_from_one_log_nw_invariant : forall net : network, raft_intermediate_reachable net -> terms_and_indices_from_one_log_nw net refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : Raft.name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (deghost net) name : Type msg : Type nodes : list name msg_eq_dec : forall x y : msg, {x = y} + {x = y -> False} name_eq_dec : forall x y : name, {x = y} + {x = y -> False} all_names_nodes : forall n : name, In n nodes no_dup_nodes : NoDup nodes init_handlers : name -> electionsData * raft_data input_handlers : name -> raft_input -> electionsData * raft_data -> list raft_output * (electionsData * raft_data) * list (name * msg) H : name -> msg -> electionsData * raft_data -> list raft_output * (electionsData * raft_data) * list (name * msg) name0 : Type msg0 : Type nodes0 : list name0 msg_eq_dec0 : forall x y : msg0, {x = y} + {x = y -> False} name_eq_dec0 : forall x y : name0, {x = y} + {x = y -> False} all_names_nodes0 : forall n : name0, In n nodes0 no_dup_nodes0 : NoDup nodes0 init_handlers0 : name0 -> electionsData * raft_data input_handlers0 : name0 -> raft_input -> electionsData * raft_data -> list raft_output * (electionsData * raft_data) * list (name0 * msg0) H0 : name0 -> msg0 -> electionsData * raft_data -> list raft_output * (electionsData * raft_data) * list (name0 * msg0) name1 : Type msg1 : Type nodes1 : list name1 msg_eq_dec1 : forall x y : msg1, {x = y} + {x = y -> False} name_eq_dec1 : forall x y : name1, {x = y} + {x = y -> False} all_names_nodes1 : forall n : name1, In n nodes1 no_dup_nodes1 : NoDup nodes1 init_handlers1 : name1 -> electionsData * raft_data input_handlers1 : name1 -> raft_input -> electionsData * raft_data -> list raft_output * (electionsData * raft_data) * list (name1 * msg1) H1 : name1 -> msg1 -> electionsData * raft_data -> list raft_output * (electionsData * raft_data) * list (name1 * msg1) name2 : Type msg2 : Type nodes2 : list name2 msg_eq_dec2 : forall x y : msg2, {x = y} + {x = y -> False} name_eq_dec2 : forall x y : name2, {x = y} + {x = y -> False} all_names_nodes2 : forall n : name2, In n nodes2 no_dup_nodes2 : NoDup nodes2 init_handlers2 : name2 -> electionsData * raft_data input_handlers2 : name2 -> raft_input -> electionsData * raft_data -> list raft_output * (electionsData * raft_data) * list (name2 * msg2) H2 : name2 -> msg2 -> electionsData * raft_data -> list raft_output * (electionsData * raft_data) * list (name2 * msg2) name3 : Type msg3 : Type nodes3 : list name3 msg_eq_dec3 : forall x y : msg3, {x = y} + {x = y -> False} name_eq_dec3 : forall x y : name3, {x = y} + {x = y -> False} all_names_nodes3 : forall n : name3, In n nodes3 no_dup_nodes3 : NoDup nodes3 init_handlers3 : name3 -> electionsData * raft_data input_handlers3 : name3 -> raft_input -> electionsData * raft_data -> list raft_output * (electionsData * raft_data) * list (name3 * msg3) H3 : name3 -> msg3 -> electionsData * raft_data -> list raft_output * (electionsData * raft_data) * list (name3 * msg3) h : Raft.name net : network st' : Raft.name -> electionsData * raft_data ps' : list packet gd : electionsData out : list raft_output d : raft_data l : list (Raft.name * Raft.msg) client : clientId id : nat c : input H4 : handleClientRequest h (snd (nwState net h)) client id c = (out, d, l) H5 : gd = update_elections_data_client_request h (nwState net h) client id c H6 : allEntries_indices_gt_0 net H7 : refined_raft_intermediate_reachable net H8 : forall h' : Raft.name, st' h' = update Raft.name_eq_dec (nwState net) h (gd, d) h' H9 : forall p' : packet, In p' ps' -> In p' (nwPackets net) \\\\/ In p' (map (fun m : Raft.name * Raft.msg => {| pSrc := h; pDst := fst m; pBody := snd m |}) l) Unable to unify \"gd = update_elections_data_client_request h (nwState net h) client id c\" with \"allEntries_indices_gt_0 {| nwPackets := ps'; nwState := st' |}\".", "type": "cannot_unify", "handled": true}, {"ctx": ["qsimpl time: 2 use: raft_refined_base_params.", "qsimpl time: 2 use: raft_refined_multi_params,raft_refined_base_params.", "qsimpl time: 2 use: raft_refined_multi_params,raft_refined_failure_params,raft_refined_base_params.", "qsimpl time: 2 use: raft_refined_multi_params,raft_refined_failure_params,raft_refined_base_params.", "qsimpl time: 2 use: raft_refined_multi_params,raft_refined_failure_params,raft_refined_base_params.", "qsimpl time: 2 use: raft_refined_multi_params,raft_refined_failure_params,raft_refined_base_params.", "unfold refined_raft_net_invariant_client_request.", "intros.", "qsimpl time: 2 use: raft_refined_multi_params,raft_refined_failure_params,raft_refined_base_params.", "qsimpl time: 2 use: raft_refined_multi_params,raft_refined_failure_params,raft_refined_base_params.", "qsimpl time: 2 use: raft_refined_multi_params,raft_refined_failure_params,raft_refined_base_params.", "qsimpl time: 2 use: raft_refined_multi_params,raft_refined_failure_params,raft_refined_base_params.", "qsimpl time: 2 use: raft_refined_multi_params,raft_refined_failure_params,raft_refined_base_params.", "qsimpl time: 2 use: raft_refined_multi_params,raft_refined_failure_params,raft_refined_base_params.", "qsimpl time: 2 use: raft_refined_multi_params,raft_refined_failure_params,raft_refined_base_params."], "tactic": "apply H6.", "exn": "In environment X23, orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params X22 : FailureParams refined_multi_params X21 : MultiParams refined_base_params X20 : BaseParams X19 : FailureParams refined_multi_params X18 : MultiParams refined_base_params X17 : BaseParams X16 : FailureParams refined_multi_params X15 : MultiParams refined_base_params X14 : BaseParams X13 : FailureParams refined_multi_params X12 : MultiParams refined_base_params X11 : BaseParams X10 : FailureParams refined_multi_params X9 : MultiParams refined_base_params X8 : BaseParams X7 : FailureParams refined_multi_params X2 : MultiParams refined_base_params b : BaseParams X0 : FailureParams refined_multi_params m : MultiParams refined_base_params X6, X5, X4, X3, X1, X : BaseParams terms_and_indices_from_one_log_invariant : forall net : network, raft_intermediate_reachable net -> terms_and_indices_from_one_log net terms_and_indices_from_one_log_nw_invariant : forall net : network, raft_intermediate_reachable net -> terms_and_indices_from_one_log_nw net refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : Raft.name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (deghost net) name : Type msg : Type nodes : list name msg_eq_dec : forall x y : msg, {x = y} + {x = y -> False} name_eq_dec : forall x y : name, {x = y} + {x = y -> False} all_names_nodes : forall n : name, In n nodes no_dup_nodes : NoDup nodes init_handlers : name -> electionsData * raft_data input_handlers : name -> raft_input -> electionsData * raft_data -> list raft_output * (electionsData * raft_data) * list (name * msg) H : name -> msg -> electionsData * raft_data -> list raft_output * (electionsData * raft_data) * list (name * msg) name0 : Type msg0 : Type nodes0 : list name0 msg_eq_dec0 : forall x y : msg0, {x = y} + {x = y -> False} name_eq_dec0 : forall x y : name0, {x = y} + {x = y -> False} all_names_nodes0 : forall n : name0, In n nodes0 no_dup_nodes0 : NoDup nodes0 init_handlers0 : name0 -> electionsData * raft_data input_handlers0 : name0 -> raft_input -> electionsData * raft_data -> list raft_output * (electionsData * raft_data) * list (name0 * msg0) H0 : name0 -> msg0 -> electionsData * raft_data -> list raft_output * (electionsData * raft_data) * list (name0 * msg0) name1 : Type msg1 : Type nodes1 : list name1 msg_eq_dec1 : forall x y : msg1, {x = y} + {x = y -> False} name_eq_dec1 : forall x y : name1, {x = y} + {x = y -> False} all_names_nodes1 : forall n : name1, In n nodes1 no_dup_nodes1 : NoDup nodes1 init_handlers1 : name1 -> electionsData * raft_data input_handlers1 : name1 -> raft_input -> electionsData * raft_data -> list raft_output * (electionsData * raft_data) * list (name1 * msg1) H1 : name1 -> msg1 -> electionsData * raft_data -> list raft_output * (electionsData * raft_data) * list (name1 * msg1) name2 : Type msg2 : Type nodes2 : list name2 msg_eq_dec2 : forall x y : msg2, {x = y} + {x = y -> False} name_eq_dec2 : forall x y : name2, {x = y} + {x = y -> False} all_names_nodes2 : forall n : name2, In n nodes2 no_dup_nodes2 : NoDup nodes2 init_handlers2 : name2 -> electionsData * raft_data input_handlers2 : name2 -> raft_input -> electionsData * raft_data -> list raft_output * (electionsData * raft_data) * list (name2 * msg2) H2 : name2 -> msg2 -> electionsData * raft_data -> list raft_output * (electionsData * raft_data) * list (name2 * msg2) name3 : Type msg3 : Type nodes3 : list name3 msg_eq_dec3 : forall x y : msg3, {x = y} + {x = y -> False} name_eq_dec3 : forall x y : name3, {x = y} + {x = y -> False} all_names_nodes3 : forall n : name3, In n nodes3 no_dup_nodes3 : NoDup nodes3 init_handlers3 : name3 -> electionsData * raft_data input_handlers3 : name3 -> raft_input -> electionsData * raft_data -> list raft_output * (electionsData * raft_data) * list (name3 * msg3) H3 : name3 -> msg3 -> electionsData * raft_data -> list raft_output * (electionsData * raft_data) * list (name3 * msg3) h : Raft.name net : network st' : Raft.name -> electionsData * raft_data ps' : list packet gd : electionsData out : list raft_output d : raft_data l : list (Raft.name * Raft.msg) client : clientId id : nat c : input H4 : handleClientRequest h (snd (nwState net h)) client id c = (out, d, l) H5 : gd = update_elections_data_client_request h (nwState net h) client id c H6 : allEntries_indices_gt_0 net H7 : refined_raft_intermediate_reachable net H8 : forall h' : Raft.name, st' h' = update Raft.name_eq_dec (nwState net) h (gd, d) h' H9 : forall p' : packet, In p' ps' -> In p' (nwPackets net) \\\\/ In p' (map (fun m : Raft.name * Raft.msg => {| pSrc := h; pDst := fst m; pBody := snd m |}) l) Unable to unify \"allEntries_indices_gt_0 net\" with \"allEntries_indices_gt_0 {| nwPackets := ps'; nwState := st' |}\".", "type": "cannot_unify", "handled": true}, {"ctx": ["qsimpl time: 2 use: raft_refined_base_params.", "qsimpl time: 2 use: raft_refined_multi_params,raft_refined_base_params.", "qsimpl time: 2 use: raft_refined_multi_params,raft_refined_failure_params,raft_refined_base_params.", "qsimpl time: 2 use: raft_refined_multi_params,raft_refined_failure_params,raft_refined_base_params.", "qsimpl time: 2 use: raft_refined_multi_params,raft_refined_failure_params,raft_refined_base_params.", "qsimpl time: 2 use: raft_refined_multi_params,raft_refined_failure_params,raft_refined_base_params.", "unfold refined_raft_net_invariant_client_request.", "intros.", "qsimpl time: 2 use: raft_refined_multi_params,raft_refined_failure_params,raft_refined_base_params.", "qsimpl time: 2 use: raft_refined_multi_params,raft_refined_failure_params,raft_refined_base_params.", "qsimpl time: 2 use: raft_refined_multi_params,raft_refined_failure_params,raft_refined_base_params.", "qsimpl time: 2 use: raft_refined_multi_params,raft_refined_failure_params,raft_refined_base_params.", "qsimpl time: 2 use: raft_refined_multi_params,raft_refined_failure_params,raft_refined_base_params.", "qsimpl time: 2 use: raft_refined_multi_params,raft_refined_failure_params,raft_refined_base_params.", "qsimpl time: 2 use: raft_refined_multi_params,raft_refined_failure_params,raft_refined_base_params.", "qsimpl time: 2 use: raft_refined_multi_params,raft_refined_failure_params,raft_refined_base_params."], "tactic": "apply H7.", "exn": "In environment X26, orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params X25 : FailureParams refined_multi_params X24 : MultiParams refined_base_params X23 : BaseParams X22 : FailureParams refined_multi_params X21 : MultiParams refined_base_params X20 : BaseParams X19 : FailureParams refined_multi_params X18 : MultiParams refined_base_params X17 : BaseParams X16 : FailureParams refined_multi_params X15 : MultiParams refined_base_params X14 : BaseParams X13 : FailureParams refined_multi_params X12 : MultiParams refined_base_params X11 : BaseParams X10 : FailureParams refined_multi_params X9 : MultiParams refined_base_params X8 : BaseParams X7 : FailureParams refined_multi_params X2 : MultiParams refined_base_params b : BaseParams X0 : FailureParams refined_multi_params m : MultiParams refined_base_params X6, X5, X4, X3, X1, X : BaseParams terms_and_indices_from_one_log_invariant : forall net : network, raft_intermediate_reachable net -> terms_and_indices_from_one_log net terms_and_indices_from_one_log_nw_invariant : forall net : network, raft_intermediate_reachable net -> terms_and_indices_from_one_log_nw net refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : Raft.name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (deghost net) name : Type msg : Type nodes : list name msg_eq_dec : forall x y : msg, {x = y} + {x = y -> False} name_eq_dec : forall x y : name, {x = y} + {x = y -> False} all_names_nodes : forall n : name, In n nodes no_dup_nodes : NoDup nodes init_handlers : name -> electionsData * raft_data input_handlers : name -> raft_input -> electionsData * raft_data -> list raft_output * (electionsData * raft_data) * list (name * msg) H : name -> msg -> electionsData * raft_data -> list raft_output * (electionsData * raft_data) * list (name * msg) name0 : Type msg0 : Type nodes0 : list name0 msg_eq_dec0 : forall x y : msg0, {x = y} + {x = y -> False} name_eq_dec0 : forall x y : name0, {x = y} + {x = y -> False} all_names_nodes0 : forall n : name0, In n nodes0 no_dup_nodes0 : NoDup nodes0 init_handlers0 : name0 -> electionsData * raft_data input_handlers0 : name0 -> raft_input -> electionsData * raft_data -> list raft_output * (electionsData * raft_data) * list (name0 * msg0) H0 : name0 -> msg0 -> electionsData * raft_data -> list raft_output * (electionsData * raft_data) * list (name0 * msg0) name1 : Type msg1 : Type nodes1 : list name1 msg_eq_dec1 : forall x y : msg1, {x = y} + {x = y -> False} name_eq_dec1 : forall x y : name1, {x = y} + {x = y -> False} all_names_nodes1 : forall n : name1, In n nodes1 no_dup_nodes1 : NoDup nodes1 init_handlers1 : name1 -> electionsData * raft_data input_handlers1 : name1 -> raft_input -> electionsData * raft_data -> list raft_output * (electionsData * raft_data) * list (name1 * msg1) H1 : name1 -> msg1 -> electionsData * raft_data -> list raft_output * (electionsData * raft_data) * list (name1 * msg1) name2 : Type msg2 : Type nodes2 : list name2 msg_eq_dec2 : forall x y : msg2, {x = y} + {x = y -> False} name_eq_dec2 : forall x y : name2, {x = y} + {x = y -> False} all_names_nodes2 : forall n : name2, In n nodes2 no_dup_nodes2 : NoDup nodes2 init_handlers2 : name2 -> electionsData * raft_data input_handlers2 : name2 -> raft_input -> electionsData * raft_data -> list raft_output * (electionsData * raft_data) * list (name2 * msg2) H2 : name2 -> msg2 -> electionsData * raft_data -> list raft_output * (electionsData * raft_data) * list (name2 * msg2) name3 : Type msg3 : Type nodes3 : list name3 msg_eq_dec3 : forall x y : msg3, {x = y} + {x = y -> False} name_eq_dec3 : forall x y : name3, {x = y} + {x = y -> False} all_names_nodes3 : forall n : name3, In n nodes3 no_dup_nodes3 : NoDup nodes3 init_handlers3 : name3 -> electionsData * raft_data input_handlers3 : name3 -> raft_input -> electionsData * raft_data -> list raft_output * (electionsData * raft_data) * list (name3 * msg3) H3 : name3 -> msg3 -> electionsData * raft_data -> list raft_output * (electionsData * raft_data) * list (name3 * msg3) h : Raft.name net : network st' : Raft.name -> electionsData * raft_data ps' : list packet gd : electionsData out : list raft_output d : raft_data l : list (Raft.name * Raft.msg) client : clientId id : nat c : input H4 : handleClientRequest h (snd (nwState net h)) client id c = (out, d, l) H5 : gd = update_elections_data_client_request h (nwState net h) client id c H6 : allEntries_indices_gt_0 net H7 : refined_raft_intermediate_reachable net H8 : forall h' : Raft.name, st' h' = update Raft.name_eq_dec (nwState net) h (gd, d) h' H9 : forall p' : packet, In p' ps' -> In p' (nwPackets net) \\\\/ In p' (map (fun m : Raft.name * Raft.msg => {| pSrc := h; pDst := fst m; pBody := snd m |}) l) Unable to unify \"refined_raft_intermediate_reachable net\" with \"allEntries_indices_gt_0 {| nwPackets := ps'; nwState := st' |}\".", "type": "cannot_unify", "handled": true}, {"ctx": ["qsimpl time: 2 use: raft_refined_base_params.", "qsimpl time: 2 use: raft_refined_multi_params,raft_refined_base_params.", "qsimpl time: 2 use: raft_refined_multi_params,raft_refined_failure_params,raft_refined_base_params.", "qsimpl time: 2 use: raft_refined_multi_params,raft_refined_failure_params,raft_refined_base_params.", "qsimpl time: 2 use: raft_refined_multi_params,raft_refined_failure_params,raft_refined_base_params.", "qsimpl time: 2 use: raft_refined_multi_params,raft_refined_failure_params,raft_refined_base_params.", "unfold refined_raft_net_invariant_client_request.", "intros.", "qsimpl time: 2 use: raft_refined_multi_params,raft_refined_failure_params,raft_refined_base_params.", "qsimpl time: 2 use: raft_refined_multi_params,raft_refined_failure_params,raft_refined_base_params.", "qsimpl time: 2 use: raft_refined_multi_params,raft_refined_failure_params,raft_refined_base_params.", "qsimpl time: 2 use: raft_refined_multi_params,raft_refined_failure_params,raft_refined_base_params.", "qsimpl time: 2 use: raft_refined_multi_params,raft_refined_failure_params,raft_refined_base_params.", "qsimpl time: 2 use: raft_refined_multi_params,raft_refined_failure_params,raft_refined_base_params.", "qsimpl time: 2 use: raft_refined_multi_params,raft_refined_failure_params,raft_refined_base_params.", "qsimpl time: 2 use: raft_refined_multi_params,raft_refined_failure_params,raft_refined_base_params.", "qsimpl time: 2 use: raft_refined_multi_params,raft_refined_failure_params,raft_refined_base_params."], "tactic": "apply H8.", "exn": "In environment X29, orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params X28 : FailureParams refined_multi_params X27 : MultiParams refined_base_params X26 : BaseParams X25 : FailureParams refined_multi_params X24 : MultiParams refined_base_params X23 : BaseParams X22 : FailureParams refined_multi_params X21 : MultiParams refined_base_params X20 : BaseParams X19 : FailureParams refined_multi_params X18 : MultiParams refined_base_params X17 : BaseParams X16 : FailureParams refined_multi_params X15 : MultiParams refined_base_params X14 : BaseParams X13 : FailureParams refined_multi_params X12 : MultiParams refined_base_params X11 : BaseParams X10 : FailureParams refined_multi_params X9 : MultiParams refined_base_params X8 : BaseParams X7 : FailureParams refined_multi_params X2 : MultiParams refined_base_params b : BaseParams X0 : FailureParams refined_multi_params m : MultiParams refined_base_params X6, X5, X4, X3, X1, X : BaseParams terms_and_indices_from_one_log_invariant : forall net : network, raft_intermediate_reachable net -> terms_and_indices_from_one_log net terms_and_indices_from_one_log_nw_invariant : forall net : network, raft_intermediate_reachable net -> terms_and_indices_from_one_log_nw net refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : Raft.name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (deghost net) name : Type msg : Type nodes : list name msg_eq_dec : forall x y : msg, {x = y} + {x = y -> False} name_eq_dec : forall x y : name, {x = y} + {x = y -> False} all_names_nodes : forall n : name, In n nodes no_dup_nodes : NoDup nodes init_handlers : name -> electionsData * raft_data input_handlers : name -> raft_input -> electionsData * raft_data -> list raft_output * (electionsData * raft_data) * list (name * msg) H : name -> msg -> electionsData * raft_data -> list raft_output * (electionsData * raft_data) * list (name * msg) name0 : Type msg0 : Type nodes0 : list name0 msg_eq_dec0 : forall x y : msg0, {x = y} + {x = y -> False} name_eq_dec0 : forall x y : name0, {x = y} + {x = y -> False} all_names_nodes0 : forall n : name0, In n nodes0 no_dup_nodes0 : NoDup nodes0 init_handlers0 : name0 -> electionsData * raft_data input_handlers0 : name0 -> raft_input -> electionsData * raft_data -> list raft_output * (electionsData * raft_data) * list (name0 * msg0) H0 : name0 -> msg0 -> electionsData * raft_data -> list raft_output * (electionsData * raft_data) * list (name0 * msg0) name1 : Type msg1 : Type nodes1 : list name1 msg_eq_dec1 : forall x y : msg1, {x = y} + {x = y -> False} name_eq_dec1 : forall x y : name1, {x = y} + {x = y -> False} all_names_nodes1 : forall n : name1, In n nodes1 no_dup_nodes1 : NoDup nodes1 init_handlers1 : name1 -> electionsData * raft_data input_handlers1 : name1 -> raft_input -> electionsData * raft_data -> list raft_output * (electionsData * raft_data) * list (name1 * msg1) H1 : name1 -> msg1 -> electionsData * raft_data -> list raft_output * (electionsData * raft_data) * list (name1 * msg1) name2 : Type msg2 : Type nodes2 : list name2 msg_eq_dec2 : forall x y : msg2, {x = y} + {x = y -> False} name_eq_dec2 : forall x y : name2, {x = y} + {x = y -> False} all_names_nodes2 : forall n : name2, In n nodes2 no_dup_nodes2 : NoDup nodes2 init_handlers2 : name2 -> electionsData * raft_data input_handlers2 : name2 -> raft_input -> electionsData * raft_data -> list raft_output * (electionsData * raft_data) * list (name2 * msg2) H2 : name2 -> msg2 -> electionsData * raft_data -> list raft_output * (electionsData * raft_data) * list (name2 * msg2) name3 : Type msg3 : Type nodes3 : list name3 msg_eq_dec3 : forall x y : msg3, {x = y} + {x = y -> False} name_eq_dec3 : forall x y : name3, {x = y} + {x = y -> False} all_names_nodes3 : forall n : name3, In n nodes3 no_dup_nodes3 : NoDup nodes3 init_handlers3 : name3 -> electionsData * raft_data input_handlers3 : name3 -> raft_input -> electionsData * raft_data -> list raft_output * (electionsData * raft_data) * list (name3 * msg3) H3 : name3 -> msg3 -> electionsData * raft_data -> list raft_output * (electionsData * raft_data) * list (name3 * msg3) h : Raft.name net : network st' : Raft.name -> electionsData * raft_data ps' : list packet gd : electionsData out : list raft_output d : raft_data l : list (Raft.name * Raft.msg) client : clientId id : nat c : input H4 : handleClientRequest h (snd (nwState net h)) client id c = (out, d, l) H5 : gd = update_elections_data_client_request h (nwState net h) client id c H6 : allEntries_indices_gt_0 net H7 : refined_raft_intermediate_reachable net H8 : forall h' : Raft.name, st' h' = update Raft.name_eq_dec (nwState net) h (gd, d) h' H9 : forall p' : packet, In p' ps' -> In p' (nwPackets net) \\\\/ In p' (map (fun m : Raft.name * Raft.msg => {| pSrc := h; pDst := fst m; pBody := snd m |}) l) Unable to unify \"st' ?M82085 = update Raft.name_eq_dec (nwState net) h (gd, d) ?M82085\" with \"forall (h : Net.name) (e : entry), In e (map snd (allEntries (fst (nwState {| nwPackets := ps'; nwState := st' |} h)))) -> eIndex e > 0\".", "type": "cannot_unify", "handled": true}, {"ctx": ["qsimpl time: 2 use: raft_refined_base_params.", "qsimpl time: 2 use: raft_refined_multi_params,raft_refined_base_params.", "qsimpl time: 2 use: raft_refined_multi_params,raft_refined_failure_params,raft_refined_base_params.", "qsimpl time: 2 use: raft_refined_multi_params,raft_refined_failure_params,raft_refined_base_params.", "qsimpl time: 2 use: raft_refined_multi_params,raft_refined_failure_params,raft_refined_base_params.", "qsimpl time: 2 use: raft_refined_multi_params,raft_refined_failure_params,raft_refined_base_params.", "unfold refined_raft_net_invariant_client_request.", "intros.", "qsimpl time: 2 use: raft_refined_multi_params,raft_refined_failure_params,raft_refined_base_params.", "qsimpl time: 2 use: raft_refined_multi_params,raft_refined_failure_params,raft_refined_base_params.", "qsimpl time: 2 use: raft_refined_multi_params,raft_refined_failure_params,raft_refined_base_params.", "qsimpl time: 2 use: raft_refined_multi_params,raft_refined_failure_params,raft_refined_base_params.", "qsimpl time: 2 use: raft_refined_multi_params,raft_refined_failure_params,raft_refined_base_params.", "qsimpl time: 2 use: raft_refined_multi_params,raft_refined_failure_params,raft_refined_base_params.", "qsimpl time: 2 use: raft_refined_multi_params,raft_refined_failure_params,raft_refined_base_params.", "qsimpl time: 2 use: raft_refined_multi_params,raft_refined_failure_params,raft_refined_base_params.", "qsimpl time: 2 use: raft_refined_multi_params,raft_refined_failure_params,raft_refined_base_params.", "qsimpl time: 2 use: raft_refined_multi_params,raft_refined_failure_params,raft_refined_base_params."], "tactic": "apply H9.", "exn": "In environment X32, orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params X31 : FailureParams refined_multi_params X30 : MultiParams refined_base_params X29 : BaseParams X28 : FailureParams refined_multi_params X27 : MultiParams refined_base_params X26 : BaseParams X25 : FailureParams refined_multi_params X24 : MultiParams refined_base_params X23 : BaseParams X22 : FailureParams refined_multi_params X21 : MultiParams refined_base_params X20 : BaseParams X19 : FailureParams refined_multi_params X18 : MultiParams refined_base_params X17 : BaseParams X16 : FailureParams refined_multi_params X15 : MultiParams refined_base_params X14 : BaseParams X13 : FailureParams refined_multi_params X12 : MultiParams refined_base_params X11 : BaseParams X10 : FailureParams refined_multi_params X9 : MultiParams refined_base_params X8 : BaseParams X7 : FailureParams refined_multi_params X2 : MultiParams refined_base_params b : BaseParams X0 : FailureParams refined_multi_params m : MultiParams refined_base_params X6, X5, X4, X3, X1, X : BaseParams terms_and_indices_from_one_log_invariant : forall net : network, raft_intermediate_reachable net -> terms_and_indices_from_one_log net terms_and_indices_from_one_log_nw_invariant : forall net : network, raft_intermediate_reachable net -> terms_and_indices_from_one_log_nw net refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : Raft.name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (deghost net) name : Type msg : Type nodes : list name msg_eq_dec : forall x y : msg, {x = y} + {x = y -> False} name_eq_dec : forall x y : name, {x = y} + {x = y -> False} all_names_nodes : forall n : name, In n nodes no_dup_nodes : NoDup nodes init_handlers : name -> electionsData * raft_data input_handlers : name -> raft_input -> electionsData * raft_data -> list raft_output * (electionsData * raft_data) * list (name * msg) H : name -> msg -> electionsData * raft_data -> list raft_output * (electionsData * raft_data) * list (name * msg) name0 : Type msg0 : Type nodes0 : list name0 msg_eq_dec0 : forall x y : msg0, {x = y} + {x = y -> False} name_eq_dec0 : forall x y : name0, {x = y} + {x = y -> False} all_names_nodes0 : forall n : name0, In n nodes0 no_dup_nodes0 : NoDup nodes0 init_handlers0 : name0 -> electionsData * raft_data input_handlers0 : name0 -> raft_input -> electionsData * raft_data -> list raft_output * (electionsData * raft_data) * list (name0 * msg0) H0 : name0 -> msg0 -> electionsData * raft_data -> list raft_output * (electionsData * raft_data) * list (name0 * msg0) name1 : Type msg1 : Type nodes1 : list name1 msg_eq_dec1 : forall x y : msg1, {x = y} + {x = y -> False} name_eq_dec1 : forall x y : name1, {x = y} + {x = y -> False} all_names_nodes1 : forall n : name1, In n nodes1 no_dup_nodes1 : NoDup nodes1 init_handlers1 : name1 -> electionsData * raft_data input_handlers1 : name1 -> raft_input -> electionsData * raft_data -> list raft_output * (electionsData * raft_data) * list (name1 * msg1) H1 : name1 -> msg1 -> electionsData * raft_data -> list raft_output * (electionsData * raft_data) * list (name1 * msg1) name2 : Type msg2 : Type nodes2 : list name2 msg_eq_dec2 : forall x y : msg2, {x = y} + {x = y -> False} name_eq_dec2 : forall x y : name2, {x = y} + {x = y -> False} all_names_nodes2 : forall n : name2, In n nodes2 no_dup_nodes2 : NoDup nodes2 init_handlers2 : name2 -> electionsData * raft_data input_handlers2 : name2 -> raft_input -> electionsData * raft_data -> list raft_output * (electionsData * raft_data) * list (name2 * msg2) H2 : name2 -> msg2 -> electionsData * raft_data -> list raft_output * (electionsData * raft_data) * list (name2 * msg2) name3 : Type msg3 : Type nodes3 : list name3 msg_eq_dec3 : forall x y : msg3, {x = y} + {x = y -> False} name_eq_dec3 : forall x y : name3, {x = y} + {x = y -> False} all_names_nodes3 : forall n : name3, In n nodes3 no_dup_nodes3 : NoDup nodes3 init_handlers3 : name3 -> electionsData * raft_data input_handlers3 : name3 -> raft_input -> electionsData * raft_data -> list raft_output * (electionsData * raft_data) * list (name3 * msg3) H3 : name3 -> msg3 -> electionsData * raft_data -> list raft_output * (electionsData * raft_data) * list (name3 * msg3) h : Raft.name net : network st' : Raft.name -> electionsData * raft_data ps' : list packet gd : electionsData out : list raft_output d : raft_data l : list (Raft.name * Raft.msg) client : clientId id : nat c : input H4 : handleClientRequest h (snd (nwState net h)) client id c = (out, d, l) H5 : gd = update_elections_data_client_request h (nwState net h) client id c H6 : allEntries_indices_gt_0 net H7 : refined_raft_intermediate_reachable net H8 : forall h' : Raft.name, st' h' = update Raft.name_eq_dec (nwState net) h (gd, d) h' H9 : forall p' : packet, In p' ps' -> In p' (nwPackets net) \\\\/ In p' (map (fun m : Raft.name * Raft.msg => {| pSrc := h; pDst := fst m; pBody := snd m |}) l) Unable to unify \"In ?M84720 (nwPackets net) \\\\/ In ?M84720 (map (fun m : Raft.name * Raft.msg => {| pSrc := h; pDst := fst m; pBody := snd m |}) l)\" with \"forall (h : Net.name) (e : entry), In e (map snd (allEntries (fst (nwState {| nwPackets := ps'; nwState := st' |} h)))) -> eIndex e > 0\".", "type": "cannot_unify", "handled": true}, {"ctx": ["qsimpl time: 2 use: raft_refined_base_params.", "qsimpl time: 2 use: raft_refined_multi_params,raft_refined_base_params.", "qsimpl time: 2 use: raft_refined_multi_params,raft_refined_failure_params,raft_refined_base_params.", "qsimpl time: 2 use: raft_refined_multi_params,raft_refined_failure_params,raft_refined_base_params.", "qsimpl time: 2 use: raft_refined_multi_params,raft_refined_failure_params,raft_refined_base_params.", "qsimpl time: 2 use: raft_refined_multi_params,raft_refined_failure_params,raft_refined_base_params.", "unfold refined_raft_net_invariant_client_request.", "intros.", "qsimpl time: 2 use: raft_refined_multi_params,raft_refined_failure_params,raft_refined_base_params.", "qsimpl time: 2 use: raft_refined_multi_params,raft_refined_failure_params,raft_refined_base_params.", "qsimpl time: 2 use: raft_refined_multi_params,raft_refined_failure_params,raft_refined_base_params.", "qsimpl time: 2 use: raft_refined_multi_params,raft_refined_failure_params,raft_refined_base_params.", "qsimpl time: 2 use: raft_refined_multi_params,raft_refined_failure_params,raft_refined_base_params.", "qsimpl time: 2 use: raft_refined_multi_params,raft_refined_failure_params,raft_refined_base_params.", "qsimpl time: 2 use: raft_refined_multi_params,raft_refined_failure_params,raft_refined_base_params.", "qsimpl time: 2 use: raft_refined_multi_params,raft_refined_failure_params,raft_refined_base_params.", "qsimpl time: 2 use: raft_refined_multi_params,raft_refined_failure_params,raft_refined_base_params.", "qsimpl time: 2 use: raft_refined_multi_params,raft_refined_failure_params,raft_refined_base_params.", "qsimpl time: 2 use: raft_refined_multi_params,raft_refined_failure_params,raft_refined_base_params."], "tactic": "apply H10.", "exn": "The reference H10 was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["qsimpl time: 2 use: raft_refined_base_params.", "qsimpl time: 2 use: raft_refined_multi_params,raft_refined_base_params.", "qsimpl time: 2 use: raft_refined_multi_params,raft_refined_failure_params,raft_refined_base_params.", "qsimpl time: 2 use: raft_refined_multi_params,raft_refined_failure_params,raft_refined_base_params.", "qsimpl time: 2 use: raft_refined_multi_params,raft_refined_failure_params,raft_refined_base_params.", "qsimpl time: 2 use: raft_refined_multi_params,raft_refined_failure_params,raft_refined_base_params.", "unfold refined_raft_net_invariant_client_request.", "intros.", "qsimpl time: 2 use: raft_refined_multi_params,raft_refined_failure_params,raft_refined_base_params.", "qsimpl time: 2 use: raft_refined_multi_params,raft_refined_failure_params,raft_refined_base_params.", "qsimpl time: 2 use: raft_refined_multi_params,raft_refined_failure_params,raft_refined_base_params.", "qsimpl time: 2 use: raft_refined_multi_params,raft_refined_failure_params,raft_refined_base_params.", "qsimpl time: 2 use: raft_refined_multi_params,raft_refined_failure_params,raft_refined_base_params.", "qsimpl time: 2 use: raft_refined_multi_params,raft_refined_failure_params,raft_refined_base_params.", "qsimpl time: 2 use: raft_refined_multi_params,raft_refined_failure_params,raft_refined_base_params.", "qsimpl time: 2 use: raft_refined_multi_params,raft_refined_failure_params,raft_refined_base_params.", "qsimpl time: 2 use: raft_refined_multi_params,raft_refined_failure_params,raft_refined_base_params.", "qsimpl time: 2 use: raft_refined_multi_params,raft_refined_failure_params,raft_refined_base_params.", "qsimpl time: 2 use: raft_refined_multi_params,raft_refined_failure_params,raft_refined_base_params."], "tactic": "apply H11.", "exn": "The reference H11 was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["qsimpl time: 2 use: raft_refined_base_params.", "qsimpl time: 2 use: raft_refined_multi_params,raft_refined_base_params.", "qsimpl time: 2 use: raft_refined_multi_params,raft_refined_failure_params,raft_refined_base_params.", "qsimpl time: 2 use: raft_refined_multi_params,raft_refined_failure_params,raft_refined_base_params.", "qsimpl time: 2 use: raft_refined_multi_params,raft_refined_failure_params,raft_refined_base_params.", "qsimpl time: 2 use: raft_refined_multi_params,raft_refined_failure_params,raft_refined_base_params.", "unfold refined_raft_net_invariant_client_request.", "intros.", "qsimpl time: 2 use: raft_refined_multi_params,raft_refined_failure_params,raft_refined_base_params.", "qsimpl time: 2 use: raft_refined_multi_params,raft_refined_failure_params,raft_refined_base_params.", "qsimpl time: 2 use: raft_refined_multi_params,raft_refined_failure_params,raft_refined_base_params.", "qsimpl time: 2 use: raft_refined_multi_params,raft_refined_failure_params,raft_refined_base_params.", "qsimpl time: 2 use: raft_refined_multi_params,raft_refined_failure_params,raft_refined_base_params.", "qsimpl time: 2 use: raft_refined_multi_params,raft_refined_failure_params,raft_refined_base_params.", "qsimpl time: 2 use: raft_refined_multi_params,raft_refined_failure_params,raft_refined_base_params.", "qsimpl time: 2 use: raft_refined_multi_params,raft_refined_failure_params,raft_refined_base_params.", "qsimpl time: 2 use: raft_refined_multi_params,raft_refined_failure_params,raft_refined_base_params.", "qsimpl time: 2 use: raft_refined_multi_params,raft_refined_failure_params,raft_refined_base_params.", "qsimpl time: 2 use: raft_refined_multi_params,raft_refined_failure_params,raft_refined_base_params."], "tactic": "apply H12.", "exn": "The reference H12 was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["qsimpl time: 2 use: raft_refined_base_params.", "qsimpl time: 2 use: raft_refined_multi_params,raft_refined_base_params.", "qsimpl time: 2 use: raft_refined_multi_params,raft_refined_failure_params,raft_refined_base_params.", "qsimpl time: 2 use: raft_refined_multi_params,raft_refined_failure_params,raft_refined_base_params.", "qsimpl time: 2 use: raft_refined_multi_params,raft_refined_failure_params,raft_refined_base_params.", "qsimpl time: 2 use: raft_refined_multi_params,raft_refined_failure_params,raft_refined_base_params.", "unfold refined_raft_net_invariant_client_request.", "intros.", "qsimpl time: 2 use: raft_refined_multi_params,raft_refined_failure_params,raft_refined_base_params.", "qsimpl time: 2 use: raft_refined_multi_params,raft_refined_failure_params,raft_refined_base_params.", "qsimpl time: 2 use: raft_refined_multi_params,raft_refined_failure_params,raft_refined_base_params.", "qsimpl time: 2 use: raft_refined_multi_params,raft_refined_failure_params,raft_refined_base_params.", "qsimpl time: 2 use: raft_refined_multi_params,raft_refined_failure_params,raft_refined_base_params.", "qsimpl time: 2 use: raft_refined_multi_params,raft_refined_failure_params,raft_refined_base_params.", "qsimpl time: 2 use: raft_refined_multi_params,raft_refined_failure_params,raft_refined_base_params.", "qsimpl time: 2 use: raft_refined_multi_params,raft_refined_failure_params,raft_refined_base_params.", "qsimpl time: 2 use: raft_refined_multi_params,raft_refined_failure_params,raft_refined_base_params.", "qsimpl time: 2 use: raft_refined_multi_params,raft_refined_failure_params,raft_refined_base_params.", "qsimpl time: 2 use: raft_refined_multi_params,raft_refined_failure_params,raft_refined_base_params.", "unfold allEntries_indices_gt_0.", "intros."], "tactic": "apply H13.", "exn": "The reference H13 was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["qsimpl time: 2 use: raft_refined_base_params.", "qsimpl time: 2 use: raft_refined_multi_params,raft_refined_base_params.", "qsimpl time: 2 use: raft_refined_multi_params,raft_refined_failure_params,raft_refined_base_params.", "qsimpl time: 2 use: raft_refined_multi_params,raft_refined_failure_params,raft_refined_base_params.", "qsimpl time: 2 use: raft_refined_multi_params,raft_refined_failure_params,raft_refined_base_params.", "qsimpl time: 2 use: raft_refined_multi_params,raft_refined_failure_params,raft_refined_base_params.", "unfold refined_raft_net_invariant_client_request.", "intros.", "qsimpl time: 2 use: raft_refined_multi_params,raft_refined_failure_params,raft_refined_base_params.", "qsimpl time: 2 use: raft_refined_multi_params,raft_refined_failure_params,raft_refined_base_params.", "qsimpl time: 2 use: raft_refined_multi_params,raft_refined_failure_params,raft_refined_base_params.", "qsimpl time: 2 use: raft_refined_multi_params,raft_refined_failure_params,raft_refined_base_params.", "qsimpl time: 2 use: raft_refined_multi_params,raft_refined_failure_params,raft_refined_base_params.", "qsimpl time: 2 use: raft_refined_multi_params,raft_refined_failure_params,raft_refined_base_params.", "qsimpl time: 2 use: raft_refined_multi_params,raft_refined_failure_params,raft_refined_base_params.", "qsimpl time: 2 use: raft_refined_multi_params,raft_refined_failure_params,raft_refined_base_params.", "qsimpl time: 2 use: raft_refined_multi_params,raft_refined_failure_params,raft_refined_base_params.", "qsimpl time: 2 use: raft_refined_multi_params,raft_refined_failure_params,raft_refined_base_params.", "qsimpl time: 2 use: raft_refined_multi_params,raft_refined_failure_params,raft_refined_base_params.", "unfold allEntries_indices_gt_0.", "intros."], "tactic": "apply H14.", "exn": "The reference H14 was not found in the current environment.", "type": "ref_not_found", "handled": true}]}, "chat": [], "original": "apply raft_refined_base_params in rri. apply raft_refined_multi_params in rri. apply raft_refined_failure_params in rri. apply raft_refined_base_params in taifoli. apply raft_refined_multi_params in taifoli. apply raft_refined_failure_params in taifoli. unfold refined_raft_net_invariant_client_request. intros. apply H. apply H0. apply H1. apply H2. apply H3. apply H4. apply H5. apply H6. apply H7. apply H8. apply H9. apply H10. apply H11. apply H12. unfold allEntries_indices_gt_0. intros. apply H13. apply H14.", "succ": false}]