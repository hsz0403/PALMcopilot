[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": ["unfold refined_raft_net_invariant_do_leader, appendEntries_leader in *.", "intros."], "tactic": "apply H.", "exn": "In environment orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params rri : raft_refinement_interface aecfli : append_entries_came_from_leaders_interface ollpti : one_leaderLog_per_term_interface lltsi : leaderLogs_term_sanity_interface olpti : one_leader_per_term_interface net : network st' : name -> data ps' : list packet gd : GhostSimulations.ghost_data d : raft_data h : name os : list raft_output d' : raft_data ms : list (name * msg) H : doLeader d h = (os, d', ms) H0 : forall (p : packet) (t : term) (leaderId : name) (prevLogIndex : logIndex) (prevLogTerm : term) (entries : list entry) (leaderCommit : logIndex) (h : Net.name) (e : entry), In p (nwPackets net) -> pBody p = AppendEntries t leaderId prevLogIndex prevLogTerm entries leaderCommit -> In e entries -> currentTerm (snd (nwState net h)) = t -> type (snd (nwState net h)) = Leader -> In e (log (snd (nwState net h))) H1 : refined_raft_intermediate_reachable net H2 : nwState net h = (gd, d) H3 : forall h' : name, st' h' = update name_eq_dec (nwState net) h (gd, d') h' H4 : forall p : packet, In p ps' -> In p (nwPackets net) \\\\/ In p (send_packets h ms) p : packet t : term leaderId : name prevLogIndex : logIndex prevLogTerm : term entries : list entry leaderCommit : logIndex h0 : Net.name e : entry H5 : In p (nwPackets {| nwPackets := ps'; nwState := st' |}) H6 : pBody p = AppendEntries t leaderId prevLogIndex prevLogTerm entries leaderCommit H7 : In e entries H8 : currentTerm (snd (nwState {| nwPackets := ps'; nwState := st' |} h0)) = t H9 : type (snd (nwState {| nwPackets := ps'; nwState := st' |} h0)) = Leader Unable to unify \"doLeader d h = (os, d', ms)\" with \"In e (log (snd (nwState {| nwPackets := ps'; nwState := st' |} h0)))\".", "type": "cannot_unify", "handled": true}]}, "chat": [], "original": "intros. unfold refined_raft_net_invariant_do_leader, appendEntries_leader in *. intros. apply H.", "succ": false}]