[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": ["intros l l' e H_sorted H_entries_match H_not_exists.", "unfold entries_match in H_entries_match."], "tactic": "unfold entries_match; intros e0 e' e'' Heq1 Heq2 Hin Hin' Hle Hin''.", "exn": "No product even after head-reduction.", "type": "no_product", "handled": true}, {"ctx": ["intros l l' e H_sorted H_entries_match H_not_exists.", "unfold entries_match in H_entries_match."], "tactic": "apply Sorted_StronglySorted in H_sorted.", "exn": "The reference Sorted_StronglySorted was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros l l' e H_sorted H_entries_match H_not_exists.", "unfold entries_match in H_entries_match."], "tactic": "apply StronglySorted_inv in H_sorted.", "exn": "The reference StronglySorted_inv was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros l l' e H_sorted H_entries_match H_not_exists.", "unfold entries_match in H_entries_match.", "destruct H_sorted as [H_rel H_sorted]."], "tactic": "apply H_entries_match in Heq1; try auto.", "exn": "No such hypothesis: Heq1", "type": "no_hypos", "handled": true}, {"ctx": ["intros l l' e H_sorted H_entries_match H_not_exists.", "unfold entries_match in H_entries_match.", "destruct H_sorted as [H_rel H_sorted].", "qsimpl."], "tactic": "apply Heq1 in Hin as Hin_l'.", "exn": "No such hypothesis: Hin", "type": "no_hypos", "handled": true}, {"ctx": ["intros l l' e H_sorted H_entries_match H_not_exists.", "unfold entries_match in H_entries_match.", "destruct H_sorted as [H_rel H_sorted].", "qsimpl."], "tactic": "apply H_entries_match in Heq2; try auto.", "exn": "No such hypothesis: Heq2", "type": "no_hypos", "handled": true}, {"ctx": ["intros l l' e H_sorted H_entries_match H_not_exists.", "unfold entries_match in H_entries_match.", "destruct H_sorted as [H_rel H_sorted].", "qsimpl."], "tactic": "apply Heq2 in Hin' as Hin'_l'.", "exn": "No such hypothesis: Hin'", "type": "no_hypos", "handled": true}, {"ctx": ["intros l l' e H_sorted H_entries_match H_not_exists.", "unfold entries_match in H_entries_match.", "destruct H_sorted as [H_rel H_sorted].", "qsimpl."], "tactic": "apply H_rel with (x:=e0) in Hin_l'.", "exn": "No such hypothesis: Hin_l'", "type": "no_hypos", "handled": true}, {"ctx": ["intros l l' e H_sorted H_entries_match H_not_exists.", "unfold entries_match in H_entries_match.", "destruct H_sorted as [H_rel H_sorted].", "qsimpl."], "tactic": "apply H_rel with (x:=e') in Hin'_l'.", "exn": "No such hypothesis: Hin'_l'", "type": "no_hypos", "handled": true}, {"ctx": ["intros l l' e H_sorted H_entries_match H_not_exists.", "unfold entries_match in H_entries_match.", "destruct H_sorted as [H_rel H_sorted].", "qsimpl."], "tactic": "destruct Hin_l' as [Hgt1 Hge1].", "exn": "The reference Hin_l' was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros l l' e H_sorted H_entries_match H_not_exists.", "unfold entries_match in H_entries_match.", "destruct H_sorted as [H_rel H_sorted].", "qsimpl.", "destruct handleRequestVoteReply as [Hgt1 Hge1]."], "tactic": "destruct Hin'_l' as [Hgt2 Hge2].", "exn": "The reference Hin'_l' was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros l l' e H_sorted H_entries_match H_not_exists.", "unfold entries_match in H_entries_match.", "destruct H_sorted as [H_rel H_sorted].", "qsimpl.", "destruct handleRequestVoteReply as [Hgt1 Hge1].", "destruct handleRequestVoteReply as [Hgt2 Hge2]."], "tactic": "apply H_not_exists.", "exn": "In environment orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params l, l' : list entry e : entry H_sorted : sorted l H_not_exists : (exists e' : entry, eIndex e' = eIndex e /\\\\ eTerm e' = eTerm e /\\\\ In e' l') -> False H : forall e e' e'' : entry, eIndex e = eIndex e' -> eTerm e = eTerm e' -> In e l -> In e' l' -> eIndex e'' <= eIndex e -> In e'' l' -> In e'' l H0 : forall e e' e'' : entry, eIndex e = eIndex e' -> eTerm e = eTerm e' -> In e l -> In e' l' -> eIndex e'' <= eIndex e -> In e'' l -> In e'' l' H1 : forall e' : entry, In e' l -> eTerm e >= eTerm e' H2 : forall e' : entry, In e' l -> eIndex e > eIndex e' ghost_log_allEntries_invariant : forall net : network, msg_refined_raft_intermediate_reachable net -> ghost_log_allEntries net allEntries_leader_sublog_invariant : forall net : network, refined_raft_intermediate_reachable net -> allEntries_leader_sublog net no_entries_past_current_term_invariant : forall net : network, raft_intermediate_reachable net -> no_entries_past_current_term net log_properties_hold_on_ghost_logs_invariant : forall net : network, msg_refined_raft_intermediate_reachable net -> log_properties_hold_on_ghost_logs net ghost_log_correct_invariant : forall net : network, msg_refined_raft_intermediate_reachable net -> ghost_log_correct net entries_contiguous_nw_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_contiguous_nw net entries_gt_0_nw_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_gt_0_nw net entries_sorted_nw_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_sorted_nw net entries_gt_0_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_gt_0 net entries_contiguous_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_contiguous net entries_sorted_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_sorted net entries_match_invariant : forall (net : network) (h h' : name), refined_raft_intermediate_reachable net -> entries_match (log (snd (nwState net h))) (log (snd (nwState net h'))) entries_match_nw_1_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_match_nw_1 net entries_match_nw_host_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_match_nw_host net allEntries_gt_0_invariant : forall (net : network) (h : name) (e : entry), refined_raft_intermediate_reachable net -> In e (map snd (allEntries (fst (nwState net h)))) -> eIndex e > 0 msg_refined_raft_net_invariant : forall (P : network -> Prop) (net : network), msg_refined_raft_net_invariant_init P -> msg_refined_raft_net_invariant_client_request P -> msg_refined_raft_net_invariant_timeout P -> msg_refined_raft_net_invariant_append_entries P -> msg_refined_raft_net_invariant_append_entries_reply P -> msg_refined_raft_net_invariant_request_vote P -> msg_refined_raft_net_invariant_request_vote_reply P -> msg_refined_raft_net_invariant_do_leader P -> msg_refined_raft_net_invariant_do_generic_server P -> msg_refined_raft_net_invariant_state_same_packet_subset P -> msg_refined_raft_net_invariant_reboot P -> msg_refined_raft_intermediate_reachable net -> P net msg_refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), msg_refined_raft_net_invariant_init P -> msg_refined_raft_net_invariant_client_request' P -> msg_refined_raft_net_invariant_timeout' P -> msg_refined_raft_net_invariant_append_entries' P -> msg_refined_raft_net_invariant_append_entries_reply' P -> msg_refined_raft_net_invariant_request_vote' P -> msg_refined_raft_net_invariant_request_vote_reply' P -> msg_refined_raft_net_invariant_do_leader' P -> msg_refined_raft_net_invariant_do_generic_server' P -> msg_refined_raft_net_invariant_state_same_packet_subset' P -> msg_refined_raft_net_invariant_reboot' P -> msg_refined_raft_intermediate_reachable net -> P net msg_lift_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P net) -> forall net : network, msg_refined_raft_intermediate_reachable net -> P (mgv_deghost net) msg_lift_prop_all_the_way : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, msg_refined_raft_intermediate_reachable net -> P (deghost (mgv_deghost net)) msg_lower_prop : forall P : network -> Prop, (forall net : network, msg_refined_raft_intermediate_reachable net -> P (mgv_deghost net)) -> forall net : network, refined_raft_intermediate_reachable net -> P net msg_lower_prop_all_the_way : forall P : network -> Prop, (forall net : network, msg_refined_raft_intermediate_reachable net -> P (deghost (mgv_deghost net))) -> forall net : network, raft_intermediate_reachable net -> P net msg_deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => nwState h end = nwState net h msg_simulation_1 : forall net : network, msg_refined_raft_intermediate_reachable net -> refined_raft_intermediate_reachable (mgv_deghost net) Unable to unify \"False\" with \"name\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros l l' e H_sorted H_entries_match H_not_exists.", "unfold entries_match in H_entries_match.", "destruct H_sorted as [H_rel H_sorted].", "qsimpl.", "destruct handleRequestVoteReply as [Hgt1 Hge1].", "destruct handleRequestVoteReply as [Hgt2 Hge2]."], "tactic": "exists e''.", "exn": "The reference e'' was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros l l' e H_sorted H_entries_match H_not_exists.", "unfold entries_match in H_entries_match.", "destruct H_sorted as [H_rel H_sorted].", "qsimpl.", "destruct handleRequestVoteReply as [Hgt1 Hge1].", "destruct handleRequestVoteReply as [Hgt2 Hge2]."], "tactic": "intro H_exists.", "exn": "No product even after head-reduction.", "type": "no_product", "handled": true}, {"ctx": ["intros l l' e H_sorted H_entries_match H_not_exists.", "unfold entries_match in H_entries_match.", "destruct H_sorted as [H_rel H_sorted].", "qsimpl.", "destruct handleRequestVoteReply as [Hgt1 Hge1].", "destruct handleRequestVoteReply as [Hgt2 Hge2]."], "tactic": "destruct H_exists as [e [Heq3 [Heq4 Hin]]].", "exn": "The reference H_exists was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros l l' e H_sorted H_entries_match H_not_exists.", "unfold entries_match in H_entries_match.", "destruct H_sorted as [H_rel H_sorted].", "qsimpl.", "destruct handleRequestVoteReply as [Hgt1 Hge1].", "destruct handleRequestVoteReply as [Hgt2 Hge2]."], "tactic": "destruct Heq3 as [Heq5 Heq6].", "exn": "The reference Heq3 was not found in the current environment.", "type": "ref_not_found", "handled": true}]}, "chat": [], "original": "intros l l' e H_sorted H_entries_match H_not_exists. unfold entries_match in H_entries_match. unfold entries_match; intros e0 e' e'' Heq1 Heq2 Hin Hin' Hle Hin''. apply Sorted_StronglySorted in H_sorted. apply StronglySorted_inv in H_sorted. destruct H_sorted as [H_rel H_sorted]. apply H_entries_match in Heq1; try auto. apply Heq1 in Hin as Hin_l'. apply H_entries_match in Heq2; try auto. apply Heq2 in Hin' as Hin'_l'. apply H_rel with (x:=e0) in Hin_l'. apply H_rel with (x:=e') in Hin'_l'. destruct Hin_l' as [Hgt1 Hge1]. destruct Hin'_l' as [Hgt2 Hge2]. apply H_not_exists. exists e''. repeat split; auto. intro H_exists. destruct H_exists as [e [Heq3 [Heq4 Hin]]]. destruct Heq3 as [Heq5 Heq6]. subst. contradiction.", "succ": false}]