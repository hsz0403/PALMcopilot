[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": ["intros net p t n pli plt es ci h e H_ref H_in_p H_body_p H_curTerm H_type H_in_es.", "unfold log."], "tactic": "right.", "exn": "Not an inductive product.", "type": "not_inductive_product", "handled": true}, {"ctx": ["intros net p t n pli plt es ci h e H_ref H_in_p H_body_p H_curTerm H_type H_in_es.", "unfold log.", "qsimpl."], "tactic": "apply H_in_es.", "exn": "In environment orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params net : network p : packet n : name pli : logIndex plt : term es : list entry ci : logIndex h : name e : entry H_ref : refined_raft_intermediate_reachable net H_in_p : In p (nwPackets net) currentTerm : term votedFor, leaderId : option name log : list entry commitIndex, lastApplied : logIndex stateMachine : data nextIndex, matchIndex : list (name * logIndex) shouldSend : bool votesReceived : list name clientCache : list (clientId * (nat * output)) electoralVictories : list (term * list name * list entry) Heqr : snd (nwState net h) = mkRaft_data currentTerm votedFor leaderId log commitIndex lastApplied stateMachine nextIndex matchIndex shouldSend votesReceived Leader clientCache electoralVictories H_body_p : pBody p = AppendEntries currentTerm n pli plt es ci H_in_es : In e es cronies_correct_invariant : forall net : network, refined_raft_intermediate_reachable net -> cronies_correct net votes_correct_invariant : forall net : network, refined_raft_intermediate_reachable net -> votes_correct net candidate_entries_invariant : forall net : network, refined_raft_intermediate_reachable net -> CandidateEntries net append_entries_reply_sublog_invariant : forall net : network, raft_intermediate_reachable net -> append_entries_reply_sublog net match_index_sanity_invariant : forall net : network, raft_intermediate_reachable net -> match_index_sanity net match_index_leader_invariant : forall net : network, raft_intermediate_reachable net -> match_index_leader net one_leaderLog_per_term_invariant : forall net : network, refined_raft_intermediate_reachable net -> one_leaderLog_per_term net one_leaderLog_per_term_log_invariant : forall net : network, refined_raft_intermediate_reachable net -> one_leaderLog_per_term_log net one_leaderLog_per_term_host_invariant : forall net : network, refined_raft_intermediate_reachable net -> one_leaderLog_per_term_host net leaders_have_leaderLogs_strong_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaders_have_leaderLogs_strong net leader_sublog_invariant_invariant : forall net : network, raft_intermediate_reachable net -> leader_sublog_invariant net append_entries_leaderLogs_invariant : forall net : network, refined_raft_intermediate_reachable net -> append_entries_leaderLogs net log_all_entries_invariant : forall net : network, refined_raft_intermediate_reachable net -> log_all_entries net entries_contiguous_nw_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_contiguous_nw net entries_gt_0_nw_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_gt_0_nw net entries_sorted_nw_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_sorted_nw net entries_gt_0_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_gt_0 net entries_contiguous_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_contiguous net entries_sorted_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_sorted net entries_match_invariant : forall (net : network) (h h' : name), refined_raft_intermediate_reachable net -> entries_match (Raft.log (snd (nwState net h))) (Raft.log (snd (nwState net h'))) entries_match_nw_1_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_match_nw_1 net entries_match_nw_host_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_match_nw_host net allEntries_gt_0_invariant : forall (net : network) (h : name) (e : entry), refined_raft_intermediate_reachable net -> In e (map snd (allEntries (fst (nwState net h)))) -> eIndex e > 0 terms_and_indices_from_one_log_invariant : forall net : network, raft_intermediate_reachable net -> terms_and_indices_from_one_log net terms_and_indices_from_one_log_nw_invariant : forall net : network, raft_intermediate_reachable net -> terms_and_indices_from_one_log_nw net no_append_entries_to_self_invariant : forall net : network, raft_intermediate_reachable net -> no_append_entries_to_self net no_append_entries_to_leader_invariant : forall net : network, raft_intermediate_reachable net -> no_append_entries_to_leader net refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (GhostSimulations.deghost net) Unable to unify \"In e es\" with \"In e log\".", "type": "cannot_unify", "handled": true}]}, "chat": [], "original": "intros net p t n pli plt es ci h e H_ref H_in_p H_body_p H_curTerm H_type H_in_es. unfold log. simpl. right. apply H_in_es.", "succ": false}]