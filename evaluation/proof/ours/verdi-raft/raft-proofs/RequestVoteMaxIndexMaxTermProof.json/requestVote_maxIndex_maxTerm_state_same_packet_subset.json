[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": ["unfold refined_raft_net_invariant_state_same_packet_subset.", "intros net net' H_same_state H_packet_subset H_P H_reachable."], "tactic": "apply H_P.", "exn": "In environment orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params rri : raft_refinement_interface rvrtsi : requestVote_term_sanity_interface net, net' : network H_same_state : forall h : Net.name, nwState net h = nwState net' h H_packet_subset : forall p : packet, In p (nwPackets net') -> In p (nwPackets net) H_P : requestVote_maxIndex_maxTerm net H_reachable : refined_raft_intermediate_reachable net Unable to unify \"requestVote_maxIndex_maxTerm net\" with \"requestVote_maxIndex_maxTerm net'\".", "type": "cannot_unify", "handled": true}, {"ctx": ["unfold refined_raft_net_invariant_state_same_packet_subset.", "intros net net' H_same_state H_packet_subset H_P H_reachable.", "qsimpl."], "tactic": "apply H_reachable.", "exn": "In environment orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params net, net' : network H_same_state : forall h : name, nwState net h = nwState net' h H_packet_subset : forall p : packet, In p (nwPackets net') -> In p (nwPackets net) H_P : requestVote_maxIndex_maxTerm net H_reachable : refined_raft_intermediate_reachable net requestVote_term_sanity_invariant : forall net : network, refined_raft_intermediate_reachable net -> requestVote_term_sanity net refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (GhostSimulations.deghost net) Unable to unify \"refined_raft_intermediate_reachable net\" with \"requestVote_maxIndex_maxTerm net'\".", "type": "cannot_unify", "handled": true}, {"ctx": ["unfold refined_raft_net_invariant_state_same_packet_subset.", "intros net net' H_same_state H_packet_subset H_P H_reachable.", "qsimpl."], "tactic": "apply H_same_state.", "exn": "In environment orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params net, net' : network H_same_state : forall h : name, nwState net h = nwState net' h H_packet_subset : forall p : packet, In p (nwPackets net') -> In p (nwPackets net) H_P : requestVote_maxIndex_maxTerm net H_reachable : refined_raft_intermediate_reachable net requestVote_term_sanity_invariant : forall net : network, refined_raft_intermediate_reachable net -> requestVote_term_sanity net refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (GhostSimulations.deghost net) Unable to unify \"nwState net ?M6419 = nwState net' ?M6419\" with \"forall (t : term) (h : Net.name) (p : packet) (n : name) (mi : logIndex) (mt : term), currentTerm (snd (nwState net' h)) = t -> type (snd (nwState net' h)) = Candidate -> In p (nwPackets net') -> pBody p = RequestVote t n mi mt -> pSrc p = h -> maxIndex (log (snd (nwState net' h))) = mi /\\\\ maxTerm (log (snd (nwState net' h))) = mt\".", "type": "cannot_unify", "handled": true}, {"ctx": ["unfold refined_raft_net_invariant_state_same_packet_subset.", "intros net net' H_same_state H_packet_subset H_P H_reachable.", "qsimpl."], "tactic": "apply H_packet_subset.", "exn": "In environment orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params net, net' : network H_same_state : forall h : name, nwState net h = nwState net' h H_packet_subset : forall p : packet, In p (nwPackets net') -> In p (nwPackets net) H_P : requestVote_maxIndex_maxTerm net H_reachable : refined_raft_intermediate_reachable net requestVote_term_sanity_invariant : forall net : network, refined_raft_intermediate_reachable net -> requestVote_term_sanity net refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot P -> refined_raft_intermediate_reachable net -> P net refined_raft_net_invariant' : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request' P -> refined_raft_net_invariant_timeout' P -> refined_raft_net_invariant_append_entries' P -> refined_raft_net_invariant_append_entries_reply' P -> refined_raft_net_invariant_request_vote' P -> refined_raft_net_invariant_request_vote_reply' P -> refined_raft_net_invariant_do_leader' P -> refined_raft_net_invariant_do_generic_server' P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_raft_net_invariant_reboot' P -> refined_raft_intermediate_reachable net -> P net lift_prop : forall P : network -> Prop, (forall net : network, raft_intermediate_reachable net -> P net) -> forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net) lower_prop : forall P : network -> Prop, (forall net : network, refined_raft_intermediate_reachable net -> P (GhostSimulations.deghost net)) -> forall net : network, raft_intermediate_reachable net -> P net deghost_spec : forall (net : network) (h : name), match net with | {| nwState := nwState |} => let (_, d) := nwState h in d end = snd (nwState net h) simulation_1 : forall net : network, refined_raft_intermediate_reachable net -> raft_intermediate_reachable (GhostSimulations.deghost net) Unable to unify \"(fix In (a : packet) (l : list packet) {struct l} : Prop := match l with | [] => False | b :: m => b = a \\\\/ In a m end) ?M6419 (nwPackets net)\" with \"forall (t : term) (h : Net.name) (p : packet) (n : name) (mi : logIndex) (mt : term), currentTerm (snd (nwState net' h)) = t -> type (snd (nwState net' h)) = Candidate -> In p (nwPackets net') -> pBody p = RequestVote t n mi mt -> pSrc p = h -> maxIndex (log (snd (nwState net' h))) = mi /\\\\ maxTerm (log (snd (nwState net' h))) = mt\".", "type": "cannot_unify", "handled": true}]}, "chat": [], "original": "intros. unfold refined_raft_net_invariant_state_same_packet_subset. intros net net' H_same_state H_packet_subset H_P H_reachable. apply H_P. apply H_reachable. apply H_same_state. apply H_packet_subset.", "succ": false}]