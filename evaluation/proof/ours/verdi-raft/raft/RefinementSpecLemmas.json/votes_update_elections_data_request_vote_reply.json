[{"history": {"proof": "intros h st src t r st' t' h' HhandleRequestVoteReply Hin. unfold update_elections_data_requestVoteReply, handleRequestVoteReply in Hin. destruct (currentTerm (snd st) <? t) eqn:Hterm. - inversion HhandleRequestVoteReply. scongruence depth: 3. - destruct (t <? currentTerm (snd st)) eqn:Hterm'. + inversion HhandleRequestVoteReply. hauto lq: on depth: 3. + destruct (r && wonElection (dedup name_eq_dec (src :: votesReceived (snd st)))) eqn:Hvote. * inversion HhandleRequestVoteReply; subst. qsimpl. * inversion HhandleRequestVoteReply. hauto q: on depth: 3.", "repairs": ["", "", "", "", "", "hammer", "", "", "", "", "hammer", "", "ref_not_found", "", "", "cannot_unify", "", "", "hammer"], "exceptions": [{"ctx": ["intros h st src t r st' t' h' HhandleRequestVoteReply Hin.", "unfold update_elections_data_requestVoteReply, handleRequestVoteReply in Hin.", "destruct (currentTerm (snd st) <? t) eqn:Hterm.", "-", "inversion HhandleRequestVoteReply."], "tactic": "-", "exn": "Wrong bullet -: Current bullet - is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["intros h st src t r st' t' h' HhandleRequestVoteReply Hin.", "unfold update_elections_data_requestVoteReply, handleRequestVoteReply in Hin.", "destruct (currentTerm (snd st) <? t) eqn:Hterm.", "-", "inversion HhandleRequestVoteReply.", "shelve.", "-", "destruct (t <? currentTerm (snd st)) eqn:Hterm'.", "+", "inversion HhandleRequestVoteReply."], "tactic": "+", "exn": "Wrong bullet +: Current bullet + is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["intros h st src t r st' t' h' HhandleRequestVoteReply Hin.", "unfold update_elections_data_requestVoteReply, handleRequestVoteReply in Hin.", "destruct (currentTerm (snd st) <? t) eqn:Hterm.", "-", "inversion HhandleRequestVoteReply.", "shelve.", "-", "destruct (t <? currentTerm (snd st)) eqn:Hterm'.", "+", "inversion HhandleRequestVoteReply.", "shelve.", "+"], "tactic": "destruct (voteGranted && wonElection (dedup name_eq_dec (src :: votesReceived (snd st)))) eqn:Hvote.", "exn": "The reference voteGranted was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros h st src t r st' t' h' HhandleRequestVoteReply Hin.", "unfold update_elections_data_requestVoteReply, handleRequestVoteReply in Hin.", "destruct (currentTerm (snd st) <? t) eqn:Hterm.", "-", "inversion HhandleRequestVoteReply.", "shelve.", "-", "destruct (t <? currentTerm (snd st)) eqn:Hterm'.", "+", "inversion HhandleRequestVoteReply.", "shelve.", "+", "destruct (r && wonElection (dedup name_eq_dec (src :: votesReceived (snd st)))) eqn:Hvote.", "*", "inversion HhandleRequestVoteReply; subst."], "tactic": "intros Hin_vote.", "exn": "No product even after head-reduction.", "type": "no_product", "handled": true}, {"ctx": ["intros h st src t r st' t' h' HhandleRequestVoteReply Hin.", "unfold update_elections_data_requestVoteReply, handleRequestVoteReply in Hin.", "destruct (currentTerm (snd st) <? t) eqn:Hterm.", "-", "inversion HhandleRequestVoteReply.", "shelve.", "-", "destruct (t <? currentTerm (snd st)) eqn:Hterm'.", "+", "inversion HhandleRequestVoteReply.", "shelve.", "+", "destruct (r && wonElection (dedup name_eq_dec (src :: votesReceived (snd st)))) eqn:Hvote.", "*", "inversion HhandleRequestVoteReply; subst."], "tactic": "apply Hin.", "exn": "In environment orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params rri : raft_refinement_interface h : name st : electionsData * RaftState.raft_data term name entry logIndex serverType data clientId output src : name t : nat r : bool t' : term h' : name Hterm : (currentTerm (snd st) <? t) = false Hterm' : (t <? currentTerm (snd st)) = false Hvote : r && wonElection (dedup name_eq_dec (src :: votesReceived (snd st))) = true Hin : In (t', h') (votes match type match type (snd st) with | Candidate => RaftState.set_raft_data_electoralVictories term name entry logIndex serverType data clientId output (RaftState.set_raft_data_nextIndex term name entry logIndex serverType data clientId output (RaftState.set_raft_data_matchIndex term name entry logIndex serverType data clientId output (RaftState.set_raft_data_type term name entry logIndex serverType data clientId output (RaftState.set_raft_data_votesReceived term name entry logIndex serverType data clientId output (snd st) ((if r then [src] else []) ++ votesReceived (snd st))) Leader) (assoc_set name_eq_dec [] h (maxIndex (log (snd st))))) []) ([(currentTerm (snd st), src :: votesReceived (snd st), log (snd st))] ++ electoralVictories (snd st)) | _ => snd st end with | Follower => fst st | Candidate => {| votes := votes (fst st); votesWithLog := votesWithLog (fst st); cronies := fun tm : term => if Nat.eq_dec tm (currentTerm match type (snd st) with | Candidate => RaftState.set_raft_data_electoralVictories term name entry logIndex serverType data clientId output (RaftState.set_raft_data_nextIndex term name entry logIndex serverType data clientId output (RaftState.set_raft_data_matchIndex term name entry logIndex serverType data clientId output (RaftState.set_raft_data_type term name entry logIndex serverType data clientId output (RaftState.set_raft_data_votesReceived term name entry logIndex serverType data clientId output (snd st) ((if r then [src] else []) ++ votesReceived (snd st))) Leader) (assoc_set name_eq_dec [] h (maxIndex (log (snd st))))) []) ([(currentTerm (snd st), src :: votesReceived (snd st), log (snd st))] ++ electoralVictories (snd st)) | _ => snd st end) then votesReceived match type (snd st) with | Candidate => RaftState.set_raft_data_electoralVictories term name entry logIndex serverType data clientId output (RaftState.set_raft_data_nextIndex term name entry logIndex serverType data clientId output (RaftState.set_raft_data_matchIndex term name entry logIndex serverType data clientId output (RaftState.set_raft_data_type term name entry logIndex serverType data clientId output (RaftState.set_raft_data_votesReceived term name entry logIndex serverType data clientId output (snd st) ((if r then [src] else []) ++ votesReceived (snd st))) Leader) (assoc_set name_eq_dec [] h (maxIndex (log (snd st))))) []) ([(currentTerm (snd st), src :: votesReceived (snd st), log (snd st))] ++ electoralVictories (snd st)) | _ => snd st end else cronies (fst st) tm; leaderLogs := leaderLogs (fst st); allEntries := allEntries (fst st) |} | Leader => {| votes := votes (fst st); votesWithLog := votesWithLog (fst st); cronies := fun tm : term => if Nat.eq_dec tm (currentTerm match type (snd st) with | Candidate => RaftState.set_raft_data_electoralVictories term name entry logIndex serverType data clientId output (RaftState.set_raft_data_nextIndex term name entry logIndex serverType data clientId output (RaftState.set_raft_data_matchIndex term name entry logIndex serverType data clientId output (RaftState.set_raft_data_type term name entry logIndex serverType data clientId output (RaftState.set_raft_data_votesReceived term name entry logIndex serverType data clientId output (snd st) ((if r then [src] else []) ++ votesReceived (snd st))) Leader) (assoc_set name_eq_dec [] h (maxIndex (log (snd st))))) []) ([(currentTerm (snd st), src :: votesReceived (snd st), log (snd st))] ++ electoralVictories (snd st)) | _ => snd st end) then votesReceived match type (snd st) with | Candidate => RaftState.set_raft_data_electoralVictories term name entry logIndex serverType data clientId output (RaftState.set_raft_data_nextIndex term name entry logIndex serverType data clientId output (RaftState.set_raft_data_matchIndex term name entry logIndex serverType data clientId output (RaftState.set_raft_data_type term name entry logIndex serverType data clientId output (RaftState.set_raft_data_votesReceived term name entry logIndex serverType data clientId output (snd st) ((if r then [src] else []) ++ votesReceived (snd st))) Leader) (assoc_set name_eq_dec [] h (maxIndex (log (snd st))))) []) ([(currentTerm (snd st), src :: votesReceived (snd st), log (snd st))] ++ electoralVictories (snd st)) | _ => snd st end else cronies (fst st) tm; leaderLogs := if serverType_eq_dec (type (snd st)) Candidate then (currentTerm match type (snd st) with | Candidate => RaftState.set_raft_data_electoralVictories term name entry logIndex serverType data clientId output (RaftState.set_raft_data_nextIndex term name entry logIndex serverType data clientId output (RaftState.set_raft_data_matchIndex term name entry logIndex serverType data clientId output (RaftState.set_raft_data_type term name entry logIndex serverType data clientId output (RaftState.set_raft_data_votesReceived term name entry logIndex serverType data clientId output (snd st) ((if r then [src] else []) ++ votesReceived (snd st))) Leader) (assoc_set name_eq_dec [] h (maxIndex (log (snd st))))) []) ([(currentTerm (snd st), src :: votesReceived (snd st), log (snd st))] ++ electoralVictories (snd st)) | _ => snd st end, log match type (snd st) with | Candidate => RaftState.set_raft_data_electoralVictories term name entry logIndex serverType data clientId output (RaftState.set_raft_data_nextIndex term name entry logIndex serverType data clientId output (RaftState.set_raft_data_matchIndex term name entry logIndex serverType data clientId output (RaftState.set_raft_data_type term name entry logIndex serverType data clientId output (RaftState.set_raft_data_votesReceived term name entry logIndex serverType data clientId output (snd st) ((if r then [src] else []) ++ votesReceived (snd st))) Leader) (assoc_set name_eq_dec [] h (maxIndex (log (snd st))))) []) ([(currentTerm (snd st), src :: votesReceived (snd st), log (snd st))] ++ electoralVictories (snd st)) | _ => snd st end) :: leaderLogs (fst st) else leaderLogs (fst st); allEntries := allEntries (fst st) |} end) H : handleRequestVoteReply h (snd st) src t r = handleRequestVoteReply h (snd st) src t r Unable to unify \"In (t', h') (votes match type match type (snd st) with | Candidate => RaftState.set_raft_data_electoralVictories term name entry logIndex serverType data clientId output (RaftState.set_raft_data_nextIndex term name entry logIndex serverType data clientId output (RaftState.set_raft_data_matchIndex term name entry logIndex serverType data clientId output (RaftState.set_raft_data_type term name entry logIndex serverType data clientId output (RaftState.set_raft_data_votesReceived term name entry logIndex serverType data clientId output (snd st) ((if r then [src] else []) ++ votesReceived (snd st))) Leader) (assoc_set name_eq_dec [] h (maxIndex (log (snd st))))) []) ([(currentTerm (snd st), src :: votesReceived (snd st), log (snd st))] ++ electoralVictories (snd st)) | _ => snd st end with | Follower => fst st | Candidate => {| votes := votes (fst st); votesWithLog := votesWithLog (fst st); cronies := fun tm : term => if Nat.eq_dec tm (currentTerm match type (snd st) with | Candidate => RaftState.set_raft_data_electoralVictories term name entry logIndex serverType data clientId output (RaftState.set_raft_data_nextIndex term name entry logIndex serverType data clientId output (RaftState.set_raft_data_matchIndex term name entry logIndex serverType data clientId output (RaftState.set_raft_data_type term name entry logIndex serverType data clientId output (RaftState.set_raft_data_votesReceived term name entry logIndex serverType data clientId output (snd st) ((if r then [src] else []) ++ votesReceived (snd st))) Leader) (assoc_set name_eq_dec [] h (maxIndex (log (snd st))))) []) ([(currentTerm (snd st), src :: votesReceived (snd st), log (snd st))] ++ electoralVictories (snd st)) | _ => snd st end) then votesReceived match type (snd st) with | Candidate => RaftState.set_raft_data_electoralVictories term name entry logIndex serverType data clientId output (RaftState.set_raft_data_nextIndex term name entry logIndex serverType data clientId output (RaftState.set_raft_data_matchIndex term name entry logIndex serverType data clientId output (RaftState.set_raft_data_type term name entry logIndex serverType data clientId output (RaftState.set_raft_data_votesReceived term name entry logIndex serverType data clientId output (snd st) ((if r then [src] else []) ++ votesReceived (snd st))) Leader) (assoc_set name_eq_dec [] h (maxIndex (log (snd st))))) []) ([(currentTerm (snd st), src :: votesReceived (snd st), log (snd st))] ++ electoralVictories (snd st)) | _ => snd st end else cronies (fst st) tm; leaderLogs := leaderLogs (fst st); allEntries := allEntries (fst st) |} | Leader => {| votes := votes (fst st); votesWithLog := votesWithLog (fst st); cronies := fun tm : term => if Nat.eq_dec tm (currentTerm match type (snd st) with | Candidate => RaftState.set_raft_data_electoralVictories term name entry logIndex serverType data clientId output (RaftState.set_raft_data_nextIndex term name entry logIndex serverType data clientId output (RaftState.set_raft_data_matchIndex term name entry logIndex serverType data clientId output (RaftState.set_raft_data_type term name entry logIndex serverType data clientId output (RaftState.set_raft_data_votesReceived term name entry logIndex serverType data clientId output (snd st) ((if r then [src] else []) ++ votesReceived (snd st))) Leader) (assoc_set name_eq_dec [] h (maxIndex (log (snd st))))) []) ([(currentTerm (snd st), src :: votesReceived (snd st), log (snd st))] ++ electoralVictories (snd st)) | _ => snd st end) then votesReceived match type (snd st) with | Candidate => RaftState.set_raft_data_electoralVictories term name entry logIndex serverType data clientId output (RaftState.set_raft_data_nextIndex term name entry logIndex serverType data clientId output (RaftState.set_raft_data_matchIndex term name entry logIndex serverType data clientId output (RaftState.set_raft_data_type term name entry logIndex serverType data clientId output (RaftState.set_raft_data_votesReceived term name entry logIndex serverType data clientId output (snd st) ((if r then [src] else []) ++ votesReceived (snd st))) Leader) (assoc_set name_eq_dec [] h (maxIndex (log (snd st))))) []) ([(currentTerm (snd st), src :: votesReceived (snd st), log (snd st))] ++ electoralVictories (snd st)) | _ => snd st end else cronies (fst st) tm; leaderLogs := if serverType_eq_dec (type (snd st)) Candidate then (currentTerm match type (snd st) with | Candidate => RaftState.set_raft_data_electoralVictories term name entry logIndex serverType data clientId output (RaftState.set_raft_data_nextIndex term name entry logIndex serverType data clientId output (RaftState.set_raft_data_matchIndex term name entry logIndex serverType data clientId output (RaftState.set_raft_data_type term name entry logIndex serverType data clientId output (RaftState.set_raft_data_votesReceived term name entry logIndex serverType data clientId output (snd st) ((if r then [src] else []) ++ votesReceived (snd st))) Leader) (assoc_set name_eq_dec [] h (maxIndex (log (snd st))))) []) ([(currentTerm (snd st), src :: votesReceived (snd st), log (snd st))] ++ electoralVictories (snd st)) | _ => snd st end, log match type (snd st) with | Candidate => RaftState.set_raft_data_electoralVictories term name entry logIndex serverType data clientId output (RaftState.set_raft_data_nextIndex term name entry logIndex serverType data clientId output (RaftState.set_raft_data_matchIndex term name entry logIndex serverType data clientId output (RaftState.set_raft_data_type term name entry logIndex serverType data clientId output (RaftState.set_raft_data_votesReceived term name entry logIndex serverType data clientId output (snd st) ((if r then [src] else []) ++ votesReceived (snd st))) Leader) (assoc_set name_eq_dec [] h (maxIndex (log (snd st))))) []) ([(currentTerm (snd st), src :: votesReceived (snd st), log (snd st))] ++ electoralVictories (snd st)) | _ => snd st end) :: leaderLogs (fst st) else leaderLogs (fst st); allEntries := allEntries (fst st) |} end)\" with \"In (t', h') (votes (fst st))\".", "type": "cannot_unify", "handled": true}]}, "chat": [], "original": "intros h st src t r st' t' h' HhandleRequestVoteReply Hin. unfold update_elections_data_requestVoteReply, handleRequestVoteReply in Hin. destruct (currentTerm (snd st) <? t) eqn:Hterm. - inversion HhandleRequestVoteReply. - destruct (t <? currentTerm (snd st)) eqn:Hterm'. + inversion HhandleRequestVoteReply. + destruct (voteGranted && wonElection (dedup name_eq_dec (src :: votesReceived (snd st)))) eqn:Hvote. * inversion HhandleRequestVoteReply; subst. intros Hin_vote. apply Hin. * inversion HhandleRequestVoteReply.", "succ": true}]