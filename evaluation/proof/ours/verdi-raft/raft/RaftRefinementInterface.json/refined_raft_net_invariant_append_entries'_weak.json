[{"history": {"proof": "intros net H. unfold refined_raft_net_invariant_append_entries, refined_raft_net_invariant_append_entries' in *. intros xs p ys st' ps' gd d m t n pli plt es ci Happ Hgd Hpbody Hnet Hreach Happ' Hreach'. qsimpl.", "repairs": ["", "", "", "wrong_type"], "exceptions": [{"ctx": ["intros net H.", "unfold refined_raft_net_invariant_append_entries, refined_raft_net_invariant_append_entries' in *.", "intros xs p ys st' ps' gd d m t n pli plt es ci Happ Hgd Hpbody Hnet Hreach Happ' Hreach'."], "tactic": "apply H with (xs:=xs) (p:=p) (ys:=ys) (st':=st') (ps':=ps') (gd:=gd) (d:=d) (m:=m) (t:=t) (n:=n) (pli:=pli) (plt:=plt) (es:=es) (ci:=ci); auto.", "exn": "In environment orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params net : network -> Prop H : forall (xs : list packet) (p : packet) (ys : list packet) (net0 : network) (st' : name -> data) (ps' : list packet) (gd : electionsData) (d : raft_data) (m : msg) (t : term) (n : name) (pli : logIndex) (plt : term) (es : list entry) (ci : logIndex), handleAppendEntries (pDst p) (snd (nwState net0 (pDst p))) t n pli plt es ci = (d, m) -> gd = update_elections_data_appendEntries (pDst p) (nwState net0 (pDst p)) t n pli plt es ci -> pBody p = AppendEntries t n pli plt es ci -> net net0 -> refined_raft_intermediate_reachable net0 -> nwPackets net0 = xs ++ p :: ys -> (forall h : name, st' h = update name_eq_dec (nwState net0) (pDst p) (gd, d) h) -> (forall p' : packet, In p' ps' -> In p' (xs ++ ys) \\\\/ p' = {| pSrc := pDst p; pDst := pSrc p; pBody := m |}) -> net {| nwPackets := ps'; nwState := st' |} xs : list packet p : packet ys : list packet st' : network ps' : Net.name -> data gd : list packet d : electionsData m : raft_data t : msg n : term pli : name plt : logIndex es : term ci : list entry Happ : logIndex Hgd : handleAppendEntries (pDst p) (snd (nwState st' (pDst p))) n pli plt es ci Happ = (m, t) Hpbody : d = update_elections_data_appendEntries (pDst p) (nwState st' (pDst p)) n pli plt es ci Happ Hnet : pBody p = AppendEntries n pli plt es ci Happ Hreach : net st' Happ' : refined_raft_intermediate_reachable st' Hreach' : refined_raft_intermediate_reachable {| nwPackets := gd; nwState := ps' |} The term \"st'\" has type \"network\" while it is expected to have type \"name -> data\".", "type": "wrong_type", "handled": true}]}, "chat": [], "original": "intros net H. unfold refined_raft_net_invariant_append_entries, refined_raft_net_invariant_append_entries' in *. intros xs p ys st' ps' gd d m t n pli plt es ci Happ Hgd Hpbody Hnet Hreach Happ' Hreach'. apply H with (xs:=xs) (p:=p) (ys:=ys) (st':=st') (ps':=ps') (gd:=gd) (d:=d) (m:=m) (t:=t) (n:=n) (pli:=pli) (plt:=plt) (es:=es) (ci:=ci); auto.", "succ": true}]