[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": ["intros net net' failed failed' tr H_step_fail.", "inversion H_step_fail; subst.", "-", "simpl."], "tactic": "apply StepOrderedFailure_deliver with (m:=m) (ms:=ms) (d:=d) (l:=l); auto.", "exn": "The reference m was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros net net' failed failed' tr H_step_fail.", "inversion H_step_fail; subst.", "-", "simpl."], "tactic": "rewrite map_map.", "exn": "The LHS of map_map (map _ (map _ _)) does not match any subterm of the goal", "type": "no_match_term", "handled": true}, {"ctx": ["intros net net' failed failed' tr H_step_fail.", "inversion H_step_fail; subst.", "-", "simpl.", "qsimpl use: map_map."], "tactic": "apply map_ext_in.", "exn": "In environment H : forall (A B C : Type) (f : A -> B) (g : B -> C) (l : list A), map g (map f l) = map (fun x : A => g (f x)) l base_fst, base_snd : BaseParams multi_fst : MultiParams base_fst multi_snd : MultiParams base_snd base_map : BaseParamsTotalMap base_fst base_snd name_map : MultiParamsNameTotalMap multi_fst multi_snd msg_map : MultiParamsMsgTotalMap multi_fst multi_snd tot_map_output_injective : forall o o' : output, tot_map_output o = tot_map_output o' -> o = o' fail_fst : FailureParams multi_fst fail_snd : FailureParams multi_snd net : network failed' : list name p : packet xs, ys : list packet d : data l : list (name * msg) out : list output H3 : nwPackets net = xs ++ p :: ys H4 : In (pDst p) failed' -> False H6 : net_handlers (pDst p) (pSrc p) (pBody p) (nwState net (pDst p)) = (out, d, l) p0 : packet xs0, ys0 : list packet d0 : data l0 : list (name * msg) H8 : nwPackets net = xs0 ++ p0 :: ys0 H9 : In (pDst p0) failed' -> False H10 : net_handlers (pDst p0) (pSrc p0) (pBody p0) (nwState net (pDst p0)) = (out, d0, l0) H5 : pDst p0 = pDst p H1 : map (fun m : name * msg => {| pSrc := pDst p0; pDst := fst m; pBody := snd m |}) l ++ xs ++ ys = map (fun m : name * msg => {| pSrc := pDst p0; pDst := fst m; pBody := snd m |}) l0 ++ xs0 ++ ys0 H2 : update name_eq_dec (nwState net) (pDst p0) d = update name_eq_dec (nwState net) (pDst p0) d0 tot_reboot_eq0 : forall d : data, tot_map_data (reboot d) = reboot (tot_map_data d) tot_init_handlers_eq0 : forall n : name, tot_map_data (init_handlers n) = init_handlers (tot_map_name n) tot_net_handlers_eq0 : forall (me src : name) (m : msg) (st : data), tot_mapped_net_handlers me src m st = net_handlers (tot_map_name me) (tot_map_name src) (tot_map_msg m) (tot_map_data st) tot_input_handlers_eq0 : forall (me : name) (inp : input) (st : data), tot_mapped_input_handlers me inp st = input_handlers (tot_map_name me) (tot_map_input inp) (tot_map_data st) tot_map_name_inv_inverse0 : forall n : name, tot_map_name_inv (tot_map_name n) = n tot_map_name_inverse_inv0 : forall n : name, tot_map_name (tot_map_name_inv n) = n Unable to unify \"map ?M5665 ?M5667 = map ?M5666 ?M5667\" with \"step_failure (map tot_map_name failed', tot_map_net net) (map tot_map_name failed', tot_map_net {| nwPackets := map (fun m : name * msg => {| pSrc := pDst p0; pDst := fst m; pBody := snd m |}) l ++ xs ++ ys; nwState := update name_eq_dec (nwState net) (pDst p0) d |}) [(tot_map_name (pDst p0), inr (map tot_map_output out))]\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros net net' failed failed' tr H_step_fail.", "inversion H_step_fail; subst.", "-", "simpl.", "qsimpl use: map_map.", "qsimpl use: map_ext_in,map_map."], "tactic": "intros [n [io | lo]] Hin.", "exn": "No product even after head-reduction.", "type": "no_product", "handled": true}, {"ctx": ["intros net net' failed failed' tr H_step_fail.", "inversion H_step_fail; subst.", "-", "simpl.", "qsimpl use: map_map.", "qsimpl use: map_ext_in,map_map."], "tactic": "rewrite <- H1.", "exn": "Found no subterm matching \"map (fun m : name * msg => {| pSrc := pDst p0; pDst := fst m; pBody := snd m |}) l0 ++ xs0 ++ ys0\" in the current goal.", "type": "no_subterm", "handled": true}, {"ctx": ["intros net net' failed failed' tr H_step_fail.", "inversion H_step_fail; subst.", "-", "simpl.", "qsimpl use: map_map.", "qsimpl use: map_ext_in,map_map.", "qsimpl use: map_ext_in,map_map."], "tactic": "rewrite map_map.", "exn": "The LHS of map_map (map _ (map _ _)) does not match any subterm of the goal", "type": "no_match_term", "handled": true}, {"ctx": ["intros net net' failed failed' tr H_step_fail.", "inversion H_step_fail; subst.", "-", "simpl.", "qsimpl use: map_map.", "qsimpl use: map_ext_in,map_map.", "qsimpl use: map_ext_in,map_map.", "qsimpl use: map_ext_in,map_map."], "tactic": "apply in_map_iff in Hin.", "exn": "No such hypothesis: Hin", "type": "no_hypos", "handled": true}, {"ctx": ["intros net net' failed failed' tr H_step_fail.", "inversion H_step_fail; subst.", "-", "simpl.", "qsimpl use: map_map.", "qsimpl use: map_ext_in,map_map.", "qsimpl use: map_ext_in,map_map.", "qsimpl use: map_ext_in,map_map.", "qsimpl use: map_ext_in,map_map,in_map_iff."], "tactic": "destruct Hin as [[n' [inp|outp]] [Hinp Heq]].", "exn": "The reference Hin was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros net net' failed failed' tr H_step_fail.", "inversion H_step_fail; subst.", "-", "simpl.", "qsimpl use: map_map.", "qsimpl use: map_ext_in,map_map.", "qsimpl use: map_ext_in,map_map.", "qsimpl use: map_ext_in,map_map.", "qsimpl use: map_ext_in,map_map,in_map_iff.", "destruct H2 as [[n' [inp|outp]] [H2p Heq]]."], "tactic": "inversion Heq; subst.", "exn": "No such hypothesis: Heq", "type": "no_hypos", "handled": true}, {"ctx": ["intros net net' failed failed' tr H_step_fail.", "inversion H_step_fail; subst.", "-", "simpl.", "qsimpl use: map_map.", "qsimpl use: map_ext_in,map_map.", "qsimpl use: map_ext_in,map_map.", "qsimpl use: map_ext_in,map_map.", "qsimpl use: map_ext_in,map_map,in_map_iff.", "destruct H2 as [[n' [inp|outp]] [H2p Heq]].", "qsimpl use: map_ext_in,map_map,in_map_iff."], "tactic": "rewrite <- H2.", "exn": "Unable to find an instance for the variable f.", "type": "no_instance_var", "handled": true}, {"ctx": ["intros net net' failed failed' tr H_step_fail.", "inversion H_step_fail; subst.", "-", "simpl.", "qsimpl use: map_map.", "qsimpl use: map_ext_in,map_map.", "qsimpl use: map_ext_in,map_map.", "qsimpl use: map_ext_in,map_map.", "qsimpl use: map_ext_in,map_map,in_map_iff.", "destruct H2 as [[n' [inp|outp]] [H2p Heq]].", "qsimpl use: map_ext_in,map_map,in_map_iff.", "qsimpl use: map_ext_in,map_map,in_map_iff."], "tactic": "apply in_map_iff.", "exn": "In environment H11 : forall (A B C : Type) (f : A -> B) (g : B -> C) (l : list A), map g (map f l) = map (fun x : A => g (f x)) l H : forall (A B : Type) (f g : A -> B) (l : list A), (forall a : A, In a l -> f a = g a) -> map f l = map g l base_fst, base_snd : BaseParams multi_fst : MultiParams base_fst multi_snd : MultiParams base_snd base_map : BaseParamsTotalMap base_fst base_snd name_map : MultiParamsNameTotalMap multi_fst multi_snd msg_map : MultiParamsMsgTotalMap multi_fst multi_snd tot_map_output_injective : forall o o' : output, tot_map_output o = tot_map_output o' -> o = o' fail_fst : FailureParams multi_fst fail_snd : FailureParams multi_snd net : network failed' : list name p : packet xs, ys : list packet d : data l : list (name * msg) out : list output H3 : nwPackets net = xs ++ p :: ys H4 : In (pDst p) failed' -> False H6 : net_handlers (pDst p) (pSrc p) (pBody p) (nwState net (pDst p)) = (out, d, l) p0 : packet xs0, ys0 : list packet d0 : data l0 : list (name * msg) H8 : nwPackets net = xs0 ++ p0 :: ys0 H9 : In (pDst p0) failed' -> False H10 : net_handlers (pDst p0) (pSrc p0) (pBody p0) (nwState net (pDst p0)) = (out, d0, l0) H5 : pDst p0 = pDst p H1 : map (fun m : name * msg => {| pSrc := pDst p0; pDst := fst m; pBody := snd m |}) l ++ xs ++ ys = map (fun m : name * msg => {| pSrc := pDst p0; pDst := fst m; pBody := snd m |}) l0 ++ xs0 ++ ys0 tot_reboot_eq0 : forall d : data, tot_map_data (reboot d) = reboot (tot_map_data d) tot_init_handlers_eq0 : forall n : name, tot_map_data (init_handlers n) = init_handlers (tot_map_name n) tot_net_handlers_eq0 : forall (me src : name) (m : msg) (st : data), tot_mapped_net_handlers me src m st = net_handlers (tot_map_name me) (tot_map_name src) (tot_map_msg m) (tot_map_data st) tot_input_handlers_eq0 : forall (me : name) (inp : input) (st : data), tot_mapped_input_handlers me inp st = input_handlers (tot_map_name me) (tot_map_input inp) (tot_map_data st) tot_map_name_inv_inverse0 : forall n : name, tot_map_name_inv (tot_map_name n) = n tot_map_name_inverse_inv0 : forall n : name, tot_map_name (tot_map_name_inv n) = n H0 : forall (A B : Type) (f : A -> B) (l : list A) (y : B), (exists x : A, f x = y /\\\\ In x l) -> In y (map f l) H7 : forall (A B : Type) (f : A -> B) (l : list A) (y : B), In y (map f l) -> exists x : A, f x = y /\\\\ In x l Unable to unify \"(In ?M14659 (map ?M14657 ?M14658) -> exists x : ?M14655, ?M14657 x = ?M14659 /\\\\ In x ?M14658) /\\\\ ((exists x : ?M14655, ?M14657 x = ?M14659 /\\\\ In x ?M14658) -> In ?M14659 (map ?M14657 ?M14658))\" with \"step_failure (map tot_map_name failed', tot_map_net net) (map tot_map_name failed', tot_map_net {| nwPackets := map (fun m : name * msg => {| pSrc := pDst p0; pDst := fst m; pBody := snd m |}) l ++ xs ++ ys; nwState := update name_eq_dec (nwState net) (pDst p0) d |}) [(tot_map_name (pDst p0), inr (map tot_map_output out))]\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros net net' failed failed' tr H_step_fail.", "inversion H_step_fail; subst.", "-", "simpl.", "qsimpl use: map_map.", "qsimpl use: map_ext_in,map_map.", "qsimpl use: map_ext_in,map_map.", "qsimpl use: map_ext_in,map_map.", "qsimpl use: map_ext_in,map_map,in_map_iff.", "destruct H2 as [[n' [inp|outp]] [H2p Heq]].", "qsimpl use: map_ext_in,map_map,in_map_iff.", "qsimpl use: map_ext_in,map_map,in_map_iff.", "qsimpl use: map_ext_in,map_map,in_map_iff."], "tactic": "exists (n', outp).", "exn": "The reference n' was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros net net' failed failed' tr H_step_fail.", "inversion H_step_fail; subst.", "-", "simpl.", "qsimpl use: map_map.", "qsimpl use: map_ext_in,map_map.", "qsimpl use: map_ext_in,map_map.", "qsimpl use: map_ext_in,map_map.", "qsimpl use: map_ext_in,map_map,in_map_iff.", "destruct H2 as [[n' [inp|outp]] [H2p Heq]].", "qsimpl use: map_ext_in,map_map,in_map_iff.", "qsimpl use: map_ext_in,map_map,in_map_iff.", "qsimpl use: map_ext_in,map_map,in_map_iff."], "tactic": "apply tot_map_output_injective.", "exn": "In environment H12 : forall (A B C : Type) (f : A -> B) (g : B -> C) (l : list A), map g (map f l) = map (fun x : A => g (f x)) l H2 : forall (A B : Type) (f g : A -> B) (l : list A), (forall a : A, In a l -> f a = g a) -> map f l = map g l base_fst, base_snd : BaseParams multi_fst : MultiParams base_fst multi_snd : MultiParams base_snd base_map : BaseParamsTotalMap base_fst base_snd name_map : MultiParamsNameTotalMap multi_fst multi_snd msg_map : MultiParamsMsgTotalMap multi_fst multi_snd tot_map_output_injective : forall o o' : output, tot_map_output o = tot_map_output o' -> o = o' fail_fst : FailureParams multi_fst fail_snd : FailureParams multi_snd net : network failed' : list name p : packet xs, ys : list packet d : data l : list (name * msg) out : list output H3 : nwPackets net = xs ++ p :: ys H4 : In (pDst p) failed' -> False H6 : net_handlers (pDst p) (pSrc p) (pBody p) (nwState net (pDst p)) = (out, d, l) p0 : packet xs0, ys0 : list packet d0 : data l0 : list (name * msg) H8 : nwPackets net = xs0 ++ p0 :: ys0 H9 : In (pDst p0) failed' -> False H10 : net_handlers (pDst p0) (pSrc p0) (pBody p0) (nwState net (pDst p0)) = (out, d0, l0) H5 : pDst p0 = pDst p H1 : map (fun m : name * msg => {| pSrc := pDst p0; pDst := fst m; pBody := snd m |}) l ++ xs ++ ys = map (fun m : name * msg => {| pSrc := pDst p0; pDst := fst m; pBody := snd m |}) l0 ++ xs0 ++ ys0 tot_reboot_eq0 : forall d : data, tot_map_data (reboot d) = reboot (tot_map_data d) tot_init_handlers_eq0 : forall n : name, tot_map_data (init_handlers n) = init_handlers (tot_map_name n) tot_net_handlers_eq0 : forall (me src : name) (m : msg) (st : data), tot_mapped_net_handlers me src m st = net_handlers (tot_map_name me) (tot_map_name src) (tot_map_msg m) (tot_map_data st) tot_input_handlers_eq0 : forall (me : name) (inp : input) (st : data), tot_mapped_input_handlers me inp st = input_handlers (tot_map_name me) (tot_map_input inp) (tot_map_data st) tot_map_name_inv_inverse0 : forall n : name, tot_map_name_inv (tot_map_name n) = n tot_map_name_inverse_inv0 : forall n : name, tot_map_name (tot_map_name_inv n) = n H0 : forall (A B : Type) (f : A -> B) (l : list A) (y : B), (exists x : A, f x = y /\\\\ In x l) -> In y (map f l) H7 : forall (A B : Type) (f : A -> B) (l : list A) (y : B), In y (map f l) -> exists x : A, f x = y /\\\\ In x l Unable to unify \"?M16222 = ?M16223\" with \"step_failure (map tot_map_name failed', tot_map_net net) (map tot_map_name failed', tot_map_net {| nwPackets := map (fun m : name * msg => {| pSrc := pDst p0; pDst := fst m; pBody := snd m |}) l ++ xs ++ ys; nwState := update name_eq_dec (nwState net) (pDst p0) d |}) [(tot_map_name (pDst p0), inr (map tot_map_output out))]\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros net net' failed failed' tr H_step_fail.", "inversion H_step_fail; subst.", "-", "simpl.", "qsimpl use: map_map.", "qsimpl use: map_ext_in,map_map.", "qsimpl use: map_ext_in,map_map.", "qsimpl use: map_ext_in,map_map.", "qsimpl use: map_ext_in,map_map,in_map_iff.", "destruct H2 as [[n' [inp|outp]] [H2p Heq]].", "qsimpl use: map_ext_in,map_map,in_map_iff.", "qsimpl use: map_ext_in,map_map,in_map_iff.", "qsimpl use: map_ext_in,map_map,in_map_iff.", "qsimpl use: map_ext_in,map_map,in_map_iff."], "tactic": "apply tot_map_output_injective.", "exn": "In environment H11 : forall (A B C : Type) (f : A -> B) (g : B -> C) (l : list A), map g (map f l) = map (fun x : A => g (f x)) l H : forall (A B : Type) (f g : A -> B) (l : list A), (forall a : A, In a l -> f a = g a) -> map f l = map g l base_fst, base_snd : BaseParams multi_fst : MultiParams base_fst multi_snd : MultiParams base_snd base_map : BaseParamsTotalMap base_fst base_snd name_map : MultiParamsNameTotalMap multi_fst multi_snd msg_map : MultiParamsMsgTotalMap multi_fst multi_snd tot_map_output_injective : forall o o' : output, tot_map_output o = tot_map_output o' -> o = o' fail_fst : FailureParams multi_fst fail_snd : FailureParams multi_snd net : network failed' : list name p : packet xs, ys : list packet d : data l : list (name * msg) out : list output H3 : nwPackets net = xs ++ p :: ys H4 : In (pDst p) failed' -> False H6 : net_handlers (pDst p) (pSrc p) (pBody p) (nwState net (pDst p)) = (out, d, l) p0 : packet xs0, ys0 : list packet d0 : data l0 : list (name * msg) H8 : nwPackets net = xs0 ++ p0 :: ys0 H9 : In (pDst p0) failed' -> False H10 : net_handlers (pDst p0) (pSrc p0) (pBody p0) (nwState net (pDst p0)) = (out, d0, l0) H5 : pDst p0 = pDst p H1 : map (fun m : name * msg => {| pSrc := pDst p0; pDst := fst m; pBody := snd m |}) l ++ xs ++ ys = map (fun m : name * msg => {| pSrc := pDst p0; pDst := fst m; pBody := snd m |}) l0 ++ xs0 ++ ys0 tot_reboot_eq0 : forall d : data, tot_map_data (reboot d) = reboot (tot_map_data d) tot_init_handlers_eq0 : forall n : name, tot_map_data (init_handlers n) = init_handlers (tot_map_name n) tot_net_handlers_eq0 : forall (me src : name) (m : msg) (st : data), tot_mapped_net_handlers me src m st = net_handlers (tot_map_name me) (tot_map_name src) (tot_map_msg m) (tot_map_data st) tot_input_handlers_eq0 : forall (me : name) (inp : input) (st : data), tot_mapped_input_handlers me inp st = input_handlers (tot_map_name me) (tot_map_input inp) (tot_map_data st) tot_map_name_inv_inverse0 : forall n : name, tot_map_name_inv (tot_map_name n) = n tot_map_name_inverse_inv0 : forall n : name, tot_map_name (tot_map_name_inv n) = n H0 : forall (A B : Type) (f : A -> B) (l : list A) (y : B), (exists x : A, f x = y /\\\\ In x l) -> In y (map f l) H7 : forall (A B : Type) (f : A -> B) (l : list A) (y : B), In y (map f l) -> exists x : A, f x = y /\\\\ In x l Unable to unify \"?M17789 = ?M17790\" with \"step_failure (map tot_map_name failed', tot_map_net net) (map tot_map_name failed', tot_map_net {| nwPackets := map (fun m : name * msg => {| pSrc := pDst p0; pDst := fst m; pBody := snd m |}) l ++ xs ++ ys; nwState := update name_eq_dec (nwState net) (pDst p0) d |}) [(tot_map_name (pDst p0), inr (map tot_map_output out))]\".", "type": "cannot_unify", "handled": true}]}, "chat": [], "original": "intros net net' failed failed' tr H_step_fail. inversion H_step_fail; subst. - simpl. apply StepOrderedFailure_deliver with (m:=m) (ms:=ms) (d:=d) (l:=l); auto. + rewrite map_map. apply map_ext_in. intros [n [io | lo]] Hin. * simpl. rewrite <- H1. auto. * simpl. rewrite map_map. apply in_map_iff in Hin. destruct Hin as [[n' [inp|outp]] [Hinp Heq]]. { inversion Heq; subst. rewrite <- H2. auto. } { apply in_map_iff. exists (n', outp). auto. } + apply tot_map_output_injective. auto. + apply tot_map_output_injective. auto.", "hammer_times": 3, "succ": false, "time": 102.8756513595581}]