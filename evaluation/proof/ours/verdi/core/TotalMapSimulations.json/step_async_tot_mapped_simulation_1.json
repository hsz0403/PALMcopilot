[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": ["intros net net' tr Hstep.", "inversion Hstep; subst.", "-", "unfold tot_map_net.", "simpl."], "tactic": "rewrite map_map.", "exn": "The LHS of map_map (map _ (map _ _)) does not match any subterm of the goal", "type": "no_match_term", "handled": true}, {"ctx": ["intros net net' tr Hstep.", "inversion Hstep; subst.", "-", "unfold tot_map_net.", "simpl.", "qsimpl use: map_map."], "tactic": "apply map_ext.", "exn": "In environment H1 : forall (A B C : Type) (f : A -> B) (g : B -> C) (l : list A), map g (map f l) = map (fun x : A => g (f x)) l base_fst, base_snd : BaseParams multi_fst : MultiParams base_fst multi_snd : MultiParams base_snd base_map : BaseParamsTotalMap base_fst base_snd name_map : MultiParamsNameTotalMap multi_fst multi_snd msg_map : MultiParamsMsgTotalMap multi_fst multi_snd net : network p : packet xs, ys : list packet d : data l : list (name * msg) out : list output H : nwPackets net = xs ++ p :: ys H0 : net_handlers (pDst p) (pSrc p) (pBody p) (nwState net (pDst p)) = (out, d, l) p0 : packet xs0, ys0 : list packet d0 : data l0 : list (name * msg) H4 : nwPackets net = xs0 ++ p0 :: ys0 H7 : net_handlers (pDst p0) (pSrc p0) (pBody p0) (nwState net (pDst p0)) = (out, d0, l0) H2 : pDst p0 = pDst p H5 : map (fun m : name * msg => {| pSrc := pDst p0; pDst := fst m; pBody := snd m |}) l ++ xs ++ ys = map (fun m : name * msg => {| pSrc := pDst p0; pDst := fst m; pBody := snd m |}) l0 ++ xs0 ++ ys0 H6 : update name_eq_dec (nwState net) (pDst p0) d = update name_eq_dec (nwState net) (pDst p0) d0 tot_init_handlers_eq0 : forall n : name, tot_map_data (init_handlers n) = init_handlers (tot_map_name n) tot_net_handlers_eq0 : forall (me src : name) (m : msg) (st : data), tot_mapped_net_handlers me src m st = net_handlers (tot_map_name me) (tot_map_name src) (tot_map_msg m) (tot_map_data st) tot_input_handlers_eq0 : forall (me : name) (inp : input) (st : data), tot_mapped_input_handlers me inp st = input_handlers (tot_map_name me) (tot_map_input inp) (tot_map_data st) tot_map_name_inv_inverse0 : forall n : name, tot_map_name_inv (tot_map_name n) = n tot_map_name_inverse_inv0 : forall n : name, tot_map_name (tot_map_name_inv n) = n Unable to unify \"map ?M4209 ?M4212 = map ?M4210 ?M4212\" with \"step_async {| nwPackets := map tot_map_packet (nwPackets net); nwState := fun n : name => tot_map_data (nwState net (tot_map_name_inv n)) |} {| nwPackets := map tot_map_packet (map (fun m : name * msg => {| pSrc := pDst p0; pDst := fst m; pBody := snd m |}) l ++ xs ++ ys); nwState := fun n : name => tot_map_data (update name_eq_dec (nwState net) (pDst p0) d (tot_map_name_inv n)) |} [(tot_map_name (pDst p0), inr (map tot_map_output out))]\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros net net' tr Hstep.", "inversion Hstep; subst.", "-", "unfold tot_map_net.", "simpl.", "qsimpl use: map_map.", "qsimpl use: map_ext,map_map."], "tactic": "destruct a as [n [io | lo]]; simpl; auto.", "exn": "The reference a was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros net net' tr Hstep.", "inversion Hstep; subst.", "-", "unfold tot_map_net.", "simpl.", "qsimpl use: map_map.", "qsimpl use: map_ext,map_map."], "tactic": "-", "exn": "Wrong bullet -: Current bullet - is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["intros net net' tr Hstep.", "inversion Hstep; subst.", "-", "unfold tot_map_net.", "simpl.", "qsimpl use: map_map.", "qsimpl use: map_ext,map_map.", "shelve.", "-", "unfold tot_map_net.", "simpl."], "tactic": "rewrite map_map.", "exn": "The LHS of map_map (map _ (map _ _)) does not match any subterm of the goal", "type": "no_match_term", "handled": true}, {"ctx": ["intros net net' tr Hstep.", "inversion Hstep; subst.", "-", "unfold tot_map_net.", "simpl.", "qsimpl use: map_map.", "qsimpl use: map_ext,map_map.", "shelve.", "-", "unfold tot_map_net.", "simpl.", "qsimpl use: map_ext,map_map."], "tactic": "apply map_ext.", "exn": "In environment H1 : forall (A B C : Type) (f : A -> B) (g : B -> C) (l : list A), map g (map f l) = map (fun x : A => g (f x)) l H0 : forall (A B : Type) (f g : A -> B), (forall a : A, f a = g a) -> forall l : list A, map f l = map g l base_fst, base_snd : BaseParams multi_fst : MultiParams base_fst multi_snd : MultiParams base_snd base_map : BaseParamsTotalMap base_fst base_snd name_map : MultiParamsNameTotalMap multi_fst multi_snd msg_map : MultiParamsMsgTotalMap multi_fst multi_snd net : network h : name d : data l : list (name * msg) out : list output inp : input H : input_handlers h inp (nwState net h) = (out, d, l) d0 : data l0 : list (name * msg) H6 : input_handlers h inp (nwState net h) = (out, d0, l0) H3 : map (fun m : name * msg => {| pSrc := h; pDst := fst m; pBody := snd m |}) l ++ nwPackets net = map (fun m : name * msg => {| pSrc := h; pDst := fst m; pBody := snd m |}) l0 ++ nwPackets net H4 : update name_eq_dec (nwState net) h d = update name_eq_dec (nwState net) h d0 tot_init_handlers_eq0 : forall n : name, tot_map_data (init_handlers n) = init_handlers (tot_map_name n) tot_net_handlers_eq0 : forall (me src : name) (m : msg) (st : data), tot_mapped_net_handlers me src m st = net_handlers (tot_map_name me) (tot_map_name src) (tot_map_msg m) (tot_map_data st) tot_input_handlers_eq0 : forall (me : name) (inp : input) (st : data), tot_mapped_input_handlers me inp st = input_handlers (tot_map_name me) (tot_map_input inp) (tot_map_data st) tot_map_name_inv_inverse0 : forall n : name, tot_map_name_inv (tot_map_name n) = n tot_map_name_inverse_inv0 : forall n : name, tot_map_name (tot_map_name_inv n) = n Unable to unify \"map ?M7464 ?M7467 = map ?M7465 ?M7467\" with \"step_async {| nwPackets := map tot_map_packet (nwPackets net); nwState := fun n : name => tot_map_data (nwState net (tot_map_name_inv n)) |} {| nwPackets := map tot_map_packet (map (fun m : name * msg => {| pSrc := h; pDst := fst m; pBody := snd m |}) l ++ nwPackets net); nwState := fun n : name => tot_map_data (update name_eq_dec (nwState net) h d (tot_map_name_inv n)) |} [(tot_map_name h, inl (tot_map_input inp)); (tot_map_name h, inr (map tot_map_output out))]\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros net net' tr Hstep.", "inversion Hstep; subst.", "-", "unfold tot_map_net.", "simpl.", "qsimpl use: map_map.", "qsimpl use: map_ext,map_map.", "shelve.", "-", "unfold tot_map_net.", "simpl.", "qsimpl use: map_ext,map_map.", "qsimpl use: map_ext,map_map."], "tactic": "destruct a as [n [io | lo]]; simpl; auto.", "exn": "The reference a was not found in the current environment.", "type": "ref_not_found", "handled": true}]}, "chat": [], "original": "intros net net' tr Hstep. inversion Hstep; subst. - unfold tot_map_net. simpl. rewrite map_map. simpl. f_equal. apply map_ext. intros. destruct a as [n [io | lo]]; simpl; auto. - unfold tot_map_net. simpl. rewrite map_map. simpl. f_equal. apply map_ext. intros. destruct a as [n [io | lo]]; simpl; auto.", "hammer_times": 7, "succ": false, "time": 222.26393055915833}]