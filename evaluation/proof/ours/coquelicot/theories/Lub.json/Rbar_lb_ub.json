[{"history": {"proof": "split. - intros H x H'. destruct x; try destruct l; auto. + hauto lq: on use: Rbar_opp_involutive, Rbar_opp_le unfold: Rbar_is_lower_bound. + sfirstorder depth: 3. + hauto lq: on use: Rbar_opp_le, Rbar_opp_involutive unfold: Rbar_is_lower_bound. + hauto lq: on use: Rbar_opp_le, Rbar_opp_involutive unfold: Rbar_opp, Rbar_is_lower_bound. + sfirstorder depth: 3. + sfirstorder depth: 3. + sfirstorder depth: 3. - intros H x H'. specialize (H (Rbar_opp x)). unfold Rbar_opp in H. destruct x; try destruct l; auto. hauto lq: on use: Ropp_0, Rbar_opp_real, Rbar_abs_opp, Rbar_le_refl, Rbar_abs_pos, Rbar_finite_neq, Rbar_opp_involutive, is_finite_correct, Rbar_opp_le unfold: Rbar_abs, real, Rbar_opp, is_finite.", "repairs": ["", "", "", "", "unfinished_bullet", "hammer", "unfinished_bullet", "hammer", "unfinished_bullet", "hammer", "unfinished_bullet", "hammer", "unfinished_bullet", "hammer", "unfinished_bullet", "hammer", "unfinished_bullet", "hammer", "", "", "", "", "", "hammer"], "exceptions": [{"ctx": [], "tactic": "intros E l.", "exn": "E is already used.", "type": "used_var", "handled": true}, {"ctx": [], "tactic": "intros E' l.", "exn": "l is already used.", "type": "used_var", "handled": true}, {"ctx": [], "tactic": "intros E' l'.", "exn": "No product even after head-reduction.", "type": "no_product", "handled": true}, {"ctx": ["split.", "-", "intros H x H'."], "tactic": "apply H.", "exn": "In environment E : Rbar -> Prop l : Rbar H : Rbar_is_lower_bound (fun x : Rbar => E (Rbar_opp x)) (Rbar_opp l) x : Rbar H' : E x Unable to unify \"Rbar_is_lower_bound (fun x : Rbar => E (Rbar_opp x)) (Rbar_opp l)\" with \"Rbar_le x l\".", "type": "cannot_unify", "handled": true}, {"ctx": ["split.", "-", "intros H x H'.", "destruct x; try destruct l; auto."], "tactic": "-", "exn": "Wrong bullet -: Current bullet - is not finished.", "type": "unfinished_bullet", "handled": true}]}, "chat": [], "original": "intros E l. split. - intros H x H'. apply H. unfold Rbar_opp. destruct x; try destruct l; auto. - intros H x H'. specialize (H (Rbar_opp x)). unfold Rbar_opp in H. destruct x; try destruct l; auto.", "succ": true}]