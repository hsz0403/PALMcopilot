[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": ["unfold Riemann_sum.", "unfold scal.", "unfold ModuleSpace.scal."], "tactic": "rewrite scal_distr_r.", "exn": "The LHS of scal_distr_r (scal (plus _ _) _) does not match any subterm of the goal", "type": "no_match_term", "handled": true}, {"ctx": ["unfold Riemann_sum.", "unfold scal.", "unfold ModuleSpace.scal.", "qsimpl use: scal_distr_r."], "tactic": "rewrite sum_fold_plus.", "exn": "The reference sum_fold_plus was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["unfold Riemann_sum.", "unfold scal.", "unfold ModuleSpace.scal.", "qsimpl use: scal_distr_r."], "tactic": "reflexivity.", "exn": "In environment V : ModuleSpace R_Ring a : R f : R -> V ptd : SF_seq H : forall (x y : ?K) (u : ?V), Hierarchy.scal (plus x y) u = plus (Hierarchy.scal x u) (Hierarchy.scal y u) scal : R -> V -> V ax1 : forall (x y : R) (u : V), scal x (scal y u) = scal (mult x y) u ax2 : forall u : V, scal one u = u ax3 : forall (x : R) (u v : V), scal x (plus u v) = plus (scal x u) (scal x v) ax4 : forall (x y : R) (u : V), scal (plus x y) u = plus (scal x u) (scal y u) Heqm : ModuleSpace.class R_Ring V = {| ModuleSpace.scal := scal; ModuleSpace.ax1 := ax1; ModuleSpace.ax2 := ax2; ModuleSpace.ax3 := ax3; ModuleSpace.ax4 := ax4 |} Unable to unify \"scal a (foldr plus zero (pairmap (fun x y : R * R => scal (fst y - fst x) (f (snd y))) (SF_h ptd, zero) (SF_t ptd)))\" with \"foldr plus zero (pairmap (fun x y : R * R => scal (fst y - fst x) (scal a (f (snd y)))) (SF_h ptd, zero) (SF_t ptd))\".", "type": "cannot_unify", "handled": true}]}, "chat": [], "original": "unfold Riemann_sum. unfold scal. unfold ModuleSpace.scal. rewrite scal_distr_r. rewrite sum_fold_plus. reflexivity.", "succ": false}]