[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": ["intros T f ts ss H.", "unfold PairwiseEqual in H.", "unfold SysPrf."], "tactic": "apply equalRelation.", "exn": "In environment L : Language var := fol.var L : nat -> fol.Term L apply := fol.apply L : forall f : Functions L, fol.Terms L (arity L (inr f)) -> fol.Term L equal := fol.equal L : fol.Term L -> fol.Term L -> fol.Formula L atomic := fol.atomic L : forall r : Relations L, fol.Terms L (arity L (inl r)) -> fol.Formula L impH := fol.impH L : fol.Formula L -> fol.Formula L -> fol.Formula L notH := fol.notH L : fol.Formula L -> fol.Formula L forallH := fol.forallH L : nat -> fol.Formula L -> fol.Formula L orH := fol.orH L : fol.Formula L -> fol.Formula L -> fol.Formula L andH := fol.andH L : fol.Formula L -> fol.Formula L -> fol.Formula L existH := fol.existH L : nat -> fol.Formula L -> fol.Formula L iffH := fol.iffH L : fol.Formula L -> fol.Formula L -> fol.Formula L ifThenElseH := fol.ifThenElseH L : fol.Formula L -> fol.Formula L -> fol.Formula L -> fol.Formula L Prf := folProof.Prf L : fol.Formulas L -> fol.Formula L -> Set SysPrf := folProof.SysPrf L : fol.System L -> fol.Formula L -> Prop termsMap := fun (m : nat) (ts ss : fol.Terms L m) => nat_rec (fun m0 : nat => fol.Terms L m0 -> fol.Terms L m0 -> nat -> fol.Term L) (fun (_ _ : fol.Terms L 0) (n : nat) => var n) (fun (m0 : nat) (Hrecm : fol.Terms L m0 -> fol.Terms L m0 -> nat -> fol.Term L) (ts0 ss0 : fol.Terms L (S m0)) => let s := consTerms L m0 ts0 in sig_rec (fun _ : {t : fol.Term L * fol.Terms L m0 | Tcons L m0 (fst t) (snd t) = ts0} => nat -> fol.Term L) (fun (x : fol.Term L * fol.Terms L m0) (p : Tcons L m0 (fst x) (snd x) = ts0) => prod_rec (fun x0 : fol.Term L * fol.Terms L m0 => Tcons L m0 (fst x0) (snd x0) = ts0 -> nat -> fol.Term L) (fun (a : fol.Term L) (b : fol.Terms L m0) (_ : Tcons L m0 (fst (a, b)) (snd (a, b)) = ts0) => let s0 := consTerms L m0 ss0 in sig_rec (fun _ : {t : fol.Term L * fol.Terms L m0 | Tcons L m0 (fst t) (snd t) = ss0} => nat -> fol.Term L) (fun (x0 : fol.Term L * fol.Terms L m0) (p1 : Tcons L m0 (fst x0) (snd x0) = ss0) => prod_rec (fun x1 : fol.Term L * fol.Terms L m0 => Tcons L m0 (fst x1) (snd x1) = ss0 -> nat -> fol.Term L) (fun (a0 : fol.Term L) (b0 : fol.Terms L m0) (_ : Tcons L m0 (fst (a0, b0)) (snd (a0, b0)) = ss0) (n : nat) => if Nat.eq_dec n (m0 + m0) then a else if Nat.eq_dec n (S (m0 + m0)) then a0 else Hrecm b b0 n) x0 p1) s0) x p) s) m ts ss : forall m : nat, fol.Terms L m -> fol.Terms L m -> nat -> fol.Term L T : fol.System L f : Functions L ts, ss : fol.Terms L (arity L (inr f)) H : (fix PairwiseEqual (T : fol.System L) (n : nat) {struct n} : fol.Terms L n -> fol.Terms L n -> Prop := match n as n0 return (fol.Terms L n0 -> fol.Terms L n0 -> Prop) with | 0 => fun _ _ : fol.Terms L 0 => True | S x => fun ts ss : fol.Terms L (S x) => let (a, b) := proj1_sig (consTerms L x ts) in let (c, d) := proj1_sig (consTerms L x ss) in SysPrf T (equal a c) /\\\\ PairwiseEqual T x b d end) T (arity L (inr f)) ts ss Unable to unify \"exists (Axm : fol.Formulas L) (_ : folProof.Prf L Axm (iffH (atomic ?M1421 ?M1422) (atomic ?M1421 ?M1423))), forall g : fol.Formula L, In g Axm -> mem (fol.Formula L) ?M1420 g\" with \"exists (Axm : fol.Formulas L) (_ : folProof.Prf L Axm (equal (apply f ts) (apply f ss))), forall g : fol.Formula L, In g Axm -> mem (fol.Formula L) T g\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros T f ts ss H.", "unfold PairwiseEqual in H.", "unfold SysPrf.", "qsimpl use: equalRelation."], "tactic": "intros r ts' ss' H'.", "exn": "No product even after head-reduction.", "type": "no_product", "handled": true}, {"ctx": ["intros T f ts ss H.", "unfold PairwiseEqual in H.", "unfold SysPrf.", "qsimpl use: equalRelation."], "tactic": "apply H.", "exn": "In environment L : Language equal := fol.equal L : fol.Term L -> fol.Term L -> fol.Formula L atomic := fol.atomic L : forall r : Relations L, fol.Terms L (arity L (inl r)) -> fol.Formula L iffH := fol.iffH L : fol.Formula L -> fol.Formula L -> fol.Formula L SysPrf := folProof.SysPrf L : fol.System L -> fol.Formula L -> Prop H0 : forall (T : fol.System L) (r : Relations L) (ts ss : fol.Terms L (arity L (inl r))), PairwiseEqual T (arity L (inl r)) ts ss -> folProof.SysPrf L T (iffH (atomic r ts) (atomic r ss)) T : fol.System L f : Functions L ts, ss : fol.Terms L (arity L (inr f)) H : (fix PairwiseEqual (T : fol.System L) (n : nat) {struct n} : fol.Terms L n -> fol.Terms L n -> Prop := match n as n0 return (fol.Terms L n0 -> fol.Terms L n0 -> Prop) with | 0 => fun _ _ : fol.Terms L 0 => True | S x => fun ts ss : fol.Terms L (S x) => let (a, b) := proj1_sig (consTerms L x ts) in let (c, d) := proj1_sig (consTerms L x ss) in folProof.SysPrf L T (equal a c) /\\\\ PairwiseEqual T x b d end) T (arity L (inr f)) ts ss Unable to unify \"(fix PairwiseEqual (T : fol.System L) (n : nat) {struct n} : fol.Terms L n -> fol.Terms L n -> Prop := match n as n0 return (fol.Terms L n0 -> fol.Terms L n0 -> Prop) with | 0 => fun _ _ : fol.Terms L 0 => True | S x => fun ts ss : fol.Terms L (S x) => let (a, b) := proj1_sig (consTerms L x ts) in let (c, d) := proj1_sig (consTerms L x ss) in folProof.SysPrf L T (equal a c) /\\\\ PairwiseEqual T x b d end) T (arity L (inr f)) ts ss\" with \"folProof.SysPrf L T (equal (fol.apply L f ts) (fol.apply L f ss))\".", "type": "cannot_unify", "handled": true}]}, "chat": [], "original": "intros T f ts ss H. unfold PairwiseEqual in H. unfold SysPrf. apply equalRelation. intros r ts' ss' H'. apply H. apply H'.", "succ": false}]