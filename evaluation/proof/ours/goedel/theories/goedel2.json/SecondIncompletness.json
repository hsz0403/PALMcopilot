[{"history": {"proof": "qsimpl time: 1 use: Rosser'sIncompleteness. qsimpl time: 1 use: Rosser'sIncompleteness,Con,orSys,notH.", "repairs": ["cannot_unify", "cannot_unify"], "exceptions": [{"ctx": ["intros."], "tactic": "apply (Rosser'sIncompleteness T extendsPA repT v0 freeVarRepT expressT1 expressT2).", "exn": "In environment T : System extendsPA : Included Formula PA T repT : Formula v0 : nat freeVarRepT : forall v : nat, In v (freeVarFormula LNT repT) -> v = v0 expressT1 : forall f : Formula, mem (fol.Formula LNT) T f -> SysPrf T (substituteFormula LNT repT v0 (natToTerm (codeFormula f))) expressT2 : forall f : Formula, ~ mem (fol.Formula LNT) T f -> SysPrf T (notH (substituteFormula LNT repT v0 (natToTerm (codeFormula f)))) HBL2 : forall f : Formula, SysPrf T (impH (box f) (box (box f))) HBL3 : forall f g : fol.Formula LNT, SysPrf T (impH (box (impH f g)) (impH (box f) (box g))) H : SysPrf T Con Unable to unify \"exists f : Formula, (forall v : nat, ~ In v (freeVarFormula LNT f)) /\\\\ (SysPrf T f \\\\/ SysPrf T (notH f) -> Inconsistent LNT T)\" with \"Inconsistent LNT T\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros.", "qsimpl time: 1 use: Rosser'sIncompleteness.", "intros HCon."], "tactic": "apply (orSys T (notH Con) Con).", "exn": "In environment H0 : forall T : System, Included Formula PA T -> forall (repT : Formula) (v0 : nat), (forall v : nat, In v (freeVarFormula LNT repT) -> v = v0) -> (forall f : Formula, mem (fol.Formula LNT) T f -> SysPrf T (substituteFormula LNT repT v0 (natToTerm (codeFormula f)))) -> (forall f : Formula, (mem (fol.Formula LNT) T f -> False) -> SysPrf T (notH (substituteFormula LNT repT v0 (natToTerm (codeFormula f))))) -> (forall x : Formula, mem (fol.Formula LNT) T x \\\\/ (mem (fol.Formula LNT) T x -> False)) -> exists f : Formula, (forall v : nat, In v (freeVarFormula LNT f) -> False) /\\\\ (SysPrf T f \\\\/ SysPrf T (notH f) -> Inconsistent LNT T) T : System extendsPA : Included Formula PA T repT : Formula v0 : nat freeVarRepT : forall v : nat, In v (freeVarFormula LNT repT) -> v = v0 expressT1 : forall f : Formula, mem (fol.Formula LNT) T f -> SysPrf T (substituteFormula LNT repT v0 (natToTerm (codeFormula f))) expressT2 : forall f : Formula, (mem (fol.Formula LNT) T f -> False) -> SysPrf T (notH (substituteFormula LNT repT v0 (natToTerm (codeFormula f)))) HBL2 : forall f : Formula, SysPrf T (impH (box f) (box (box f))) HBL3 : forall f g : fol.Formula LNT, SysPrf T (impH (box (impH f g)) (impH (box f) (box g))) x : fol.Formulas LNT x0 : Prf LNT x Con H : forall g : fol.Formula LNT, In g x -> mem (fol.Formula LNT) T g HCon : fol.Formula LNT Unable to unify \"exists (Axm : fol.Formulas LNT) (_ : Prf LNT Axm ?M4046), forall g : fol.Formula LNT, In g Axm -> mem (fol.Formula LNT) (Ensembles.Add (fol.Formula LNT) T (orH (notH Con) Con)) g\" with \"exists (Axm : fol.Formulas LNT) (_ : Prf LNT Axm HCon), forall g : fol.Formula LNT, In g Axm -> mem (fol.Formula LNT) T g\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros.", "qsimpl time: 1 use: Rosser'sIncompleteness.", "intros HCon.", "qsimpl time: 1 use: Rosser'sIncompleteness,Con,orSys,notH.", "apply (contradiction T Con HCon).", "+"], "tactic": "apply (impTrans T Con (notH (box F)) (notH Con)).", "exn": "In environment H3 : forall (T : System) (f g h : Formula), SysPrf (Ensembles.Add (fol.Formula LNT) T f) h -> SysPrf (Ensembles.Add (fol.Formula LNT) T g) h -> SysPrf (Ensembles.Add (fol.Formula LNT) T (orH f g)) h H2 : fol.Formula LNT H1 : forall T : System, Included Formula PA T -> forall (repT : Formula) (v0 : nat), (forall v : nat, In v (freeVarFormula LNT repT) -> v = v0) -> (forall f : Formula, mem (fol.Formula LNT) T f -> SysPrf T (substituteFormula LNT repT v0 (natToTerm (codeFormula f)))) -> (forall f : Formula, (mem (fol.Formula LNT) T f -> False) -> SysPrf T (notH (substituteFormula LNT repT v0 (natToTerm (codeFormula f))))) -> (forall x : Formula, mem (fol.Formula LNT) T x \\\\/ (mem (fol.Formula LNT) T x -> False)) -> exists f : Formula, (forall v : nat, In v (freeVarFormula LNT f) -> False) /\\\\ (SysPrf T f \\\\/ SysPrf T (notH f) -> Inconsistent LNT T) T : System extendsPA : Included Formula PA T repT : Formula v0 : nat freeVarRepT : forall v : nat, In v (freeVarFormula LNT repT) -> v = v0 expressT1 : forall f : Formula, mem (fol.Formula LNT) T f -> SysPrf T (substituteFormula LNT repT v0 (natToTerm (codeFormula f))) expressT2 : forall f : Formula, (mem (fol.Formula LNT) T f -> False) -> SysPrf T (notH (substituteFormula LNT repT v0 (natToTerm (codeFormula f)))) HBL2 : forall f : Formula, SysPrf T (impH (box f) (box (box f))) HBL3 : forall f g : fol.Formula LNT, SysPrf T (impH (box (impH f g)) (impH (box f) (box g))) x : fol.Formulas LNT x0 : Prf LNT x Con H : forall g : fol.Formula LNT, In g x -> mem (fol.Formula LNT) T g HCon, H5 : fol.Formula LNT Unable to unify \"SysPrf T (impH Con (notH Con))\" with \"SysPrf T Con\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros.", "qsimpl time: 1 use: Rosser'sIncompleteness.", "intros HCon.", "qsimpl time: 1 use: Rosser'sIncompleteness,Con,orSys,notH.", "apply (contradiction T Con HCon).", "+", "qsimpl time: 1 use: impTrans,notH,F,box,Rosser'sIncompleteness,Con,orSys."], "tactic": "apply (impTrans T Con (andH (box F) (impH Con (notH Con))) F).", "exn": "In environment H8 : forall (T : System) (f g h : Formula), SysPrf (Ensembles.Add (fol.Formula LNT) T f) h -> SysPrf (Ensembles.Add (fol.Formula LNT) T g) h -> SysPrf (Ensembles.Add (fol.Formula LNT) T (orH f g)) h f0 : fol.Formula LNT f : fol.Formula LNT -> fol.Formula LNT H7 : forall T : System, Included Formula PA T -> forall (repT : Formula) (v0 : nat), (forall v : nat, In v (freeVarFormula LNT repT) -> v = v0) -> (forall f : Formula, mem (fol.Formula LNT) T f -> SysPrf T (substituteFormula LNT repT v0 (natToTerm (codeFormula f)))) -> (forall f0 : Formula, (mem (fol.Formula LNT) T f0 -> False) -> SysPrf T (f (substituteFormula LNT repT v0 (natToTerm (codeFormula f0))))) -> (forall x : Formula, mem (fol.Formula LNT) T x \\\\/ (mem (fol.Formula LNT) T x -> False)) -> exists f0 : Formula, (forall v : nat, In v (freeVarFormula LNT f0) -> False) /\\\\ (SysPrf T f0 \\\\/ SysPrf T (f f0) -> Inconsistent LNT T) H4 : fol.Formula LNT H0 : forall (T : System) (f g h : Formula), SysPrf T (impH f g) -> SysPrf T (impH g h) -> SysPrf T (impH f h) H2 : fol.Formula LNT H1 : forall T : System, Included Formula PA T -> forall (repT : Formula) (v0 : nat), (forall v : nat, In v (freeVarFormula LNT repT) -> v = v0) -> (forall f : Formula, mem (fol.Formula LNT) T f -> SysPrf T (substituteFormula LNT repT v0 (natToTerm (codeFormula f)))) -> (forall f : Formula, (mem (fol.Formula LNT) T f -> False) -> SysPrf T (notH (substituteFormula LNT repT v0 (natToTerm (codeFormula f))))) -> (forall x : Formula, mem (fol.Formula LNT) T x \\\\/ (mem (fol.Formula LNT) T x -> False)) -> exists f : Formula, (forall v : nat, In v (freeVarFormula LNT f) -> False) /\\\\ (SysPrf T f \\\\/ SysPrf T (notH f) -> Inconsistent LNT T) T : System extendsPA : Included Formula PA T repT : Formula v0 : nat freeVarRepT : forall v : nat, In v (freeVarFormula LNT repT) -> v = v0 expressT1 : forall f : Formula, mem (fol.Formula LNT) T f -> SysPrf T (substituteFormula LNT repT v0 (natToTerm (codeFormula f))) expressT2 : forall f : Formula, (mem (fol.Formula LNT) T f -> False) -> SysPrf T (notH (substituteFormula LNT repT v0 (natToTerm (codeFormula f)))) HBL2 : forall f : Formula, SysPrf T (impH (box f) (box (box f))) HBL3 : forall f g : fol.Formula LNT, SysPrf T (impH (box (impH f g)) (impH (box f) (box g))) x : fol.Formulas LNT x0 : Prf LNT x Con H : forall g : fol.Formula LNT, In g x -> mem (fol.Formula LNT) T g HCon, H5, H9 : fol.Formula LNT Unable to unify \"SysPrf T (impH Con F)\" with \"SysPrf T f0\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros.", "qsimpl time: 1 use: Rosser'sIncompleteness.", "intros HCon.", "qsimpl time: 1 use: Rosser'sIncompleteness,Con,orSys,notH.", "apply (contradiction T Con HCon).", "+", "qsimpl time: 1 use: impTrans,notH,F,box,Rosser'sIncompleteness,Con,orSys.", "qsimpl time: 1 use: impTrans,notH,F,andH,box,Rosser'sIncompleteness,Con,impH,orSys."], "tactic": "apply (HBL1 F).", "exn": "In environment H15 : forall (T : System) (f g h : Formula), SysPrf (Ensembles.Add (fol.Formula LNT) T f) h -> SysPrf (Ensembles.Add (fol.Formula LNT) T g) h -> SysPrf (Ensembles.Add (fol.Formula LNT) T (orH f g)) h H13 : fol.Formula LNT f1 : fol.Formula LNT -> fol.Formula LNT H12 : forall T : System, Included Formula PA T -> forall (repT : Formula) (v0 : nat), (forall v : nat, In v (freeVarFormula LNT repT) -> v = v0) -> (forall f : Formula, mem (fol.Formula LNT) T f -> SysPrf T (substituteFormula LNT repT v0 (natToTerm (codeFormula f)))) -> (forall f : Formula, (mem (fol.Formula LNT) T f -> False) -> SysPrf T (f1 (substituteFormula LNT repT v0 (natToTerm (codeFormula f))))) -> (forall x : Formula, mem (fol.Formula LNT) T x \\\\/ (mem (fol.Formula LNT) T x -> False)) -> exists f : Formula, (forall v : nat, In v (freeVarFormula LNT f) -> False) /\\\\ (SysPrf T f \\\\/ SysPrf T (f1 f) -> Inconsistent LNT T) H6 : fol.Formula LNT H3 : forall (T : System) (f g h : Formula), SysPrf T (impH f g) -> SysPrf T (impH g h) -> SysPrf T (impH f h) f0 : fol.Formula LNT f : fol.Formula LNT -> fol.Formula LNT H7 : forall T : System, Included Formula PA T -> forall (repT : Formula) (v0 : nat), (forall v : nat, In v (freeVarFormula LNT repT) -> v = v0) -> (forall f : Formula, mem (fol.Formula LNT) T f -> SysPrf T (substituteFormula LNT repT v0 (natToTerm (codeFormula f)))) -> (forall f0 : Formula, (mem (fol.Formula LNT) T f0 -> False) -> SysPrf T (f (substituteFormula LNT repT v0 (natToTerm (codeFormula f0))))) -> (forall x : Formula, mem (fol.Formula LNT) T x \\\\/ (mem (fol.Formula LNT) T x -> False)) -> exists f0 : Formula, (forall v : nat, In v (freeVarFormula LNT f0) -> False) /\\\\ (SysPrf T f0 \\\\/ SysPrf T (f f0) -> Inconsistent LNT T) H4, H2 : fol.Formula LNT H1 : forall T : System, Included Formula PA T -> forall (repT : Formula) (v0 : nat), (forall v : nat, In v (freeVarFormula LNT repT) -> v = v0) -> (forall f : Formula, mem (fol.Formula LNT) T f -> SysPrf T (substituteFormula LNT repT v0 (natToTerm (codeFormula f)))) -> (forall f : Formula, (mem (fol.Formula LNT) T f -> False) -> SysPrf T (notH (substituteFormula LNT repT v0 (natToTerm (codeFormula f))))) -> (forall x : Formula, mem (fol.Formula LNT) T x \\\\/ (mem (fol.Formula LNT) T x -> False)) -> exists f : Formula, (forall v : nat, In v (freeVarFormula LNT f) -> False) /\\\\ (SysPrf T f \\\\/ SysPrf T (notH f) -> Inconsistent LNT T) T : System extendsPA : Included Formula PA T repT : Formula v0 : nat freeVarRepT : forall v : nat, In v (freeVarFormula LNT repT) -> v = v0 expressT1 : forall f : Formula, mem (fol.Formula LNT) T f -> SysPrf T (substituteFormula LNT repT v0 (natToTerm (codeFormula f))) expressT2 : forall f : Formula, (mem (fol.Formula LNT) T f -> False) -> SysPrf T (notH (substituteFormula LNT repT v0 (natToTerm (codeFormula f)))) HBL2 : forall f : Formula, SysPrf T (impH (box f) (box (box f))) HBL3 : forall f g : fol.Formula LNT, SysPrf T (impH (box (impH f g)) (impH (box f) (box g))) x : fol.Formulas LNT x0 : Prf LNT x Con H : forall g : fol.Formula LNT, In g x -> mem (fol.Formula LNT) T g HCon, H5, H9, H10, H16, H14 : fol.Formula LNT Unable to unify \"SysPrf T (box F)\" with \"SysPrf T f0\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros.", "qsimpl time: 1 use: Rosser'sIncompleteness.", "intros HCon.", "qsimpl time: 1 use: Rosser'sIncompleteness,Con,orSys,notH.", "apply (contradiction T Con HCon).", "+", "qsimpl time: 1 use: impTrans,notH,F,box,Rosser'sIncompleteness,Con,orSys.", "qsimpl time: 1 use: impTrans,notH,F,andH,box,Rosser'sIncompleteness,Con,impH,orSys.", "qsimpl time: 1 use: HBL1,impTrans,notH,F,andH,box,Rosser'sIncompleteness,Con,impH,orSys."], "tactic": "apply (Axm T (box F)).", "exn": "In environment H22 : forall (T : System) (f g h : Formula), SysPrf (Ensembles.Add (fol.Formula LNT) T f) h -> SysPrf (Ensembles.Add (fol.Formula LNT) T g) h -> SysPrf (Ensembles.Add (fol.Formula LNT) T (orH f g)) h H20 : fol.Formula LNT f2 : fol.Formula LNT -> fol.Formula LNT H19 : forall T : System, Included Formula PA T -> forall (repT : Formula) (v0 : nat), (forall v : nat, In v (freeVarFormula LNT repT) -> v = v0) -> (forall f : Formula, mem (fol.Formula LNT) T f -> SysPrf T (substituteFormula LNT repT v0 (natToTerm (codeFormula f)))) -> (forall f : Formula, (mem (fol.Formula LNT) T f -> False) -> SysPrf T (f2 (substituteFormula LNT repT v0 (natToTerm (codeFormula f))))) -> (forall x : Formula, mem (fol.Formula LNT) T x \\\\/ (mem (fol.Formula LNT) T x -> False)) -> exists f : Formula, (forall v : nat, In v (freeVarFormula LNT f) -> False) /\\\\ (SysPrf T f \\\\/ SysPrf T (f2 f) -> Inconsistent LNT T) H11 : fol.Formula LNT H8 : forall (T : System) (f g h : Formula), SysPrf T (impH f g) -> SysPrf T (impH g h) -> SysPrf T (impH f h) T : System repT : Formula v0 : nat H0 : forall f : fol.Formula LNT, SysPrf T f -> SysPrf T (box f) H13 : fol.Formula LNT f1 : fol.Formula LNT -> fol.Formula LNT H12 : forall T : System, Included Formula PA T -> forall (repT : Formula) (v0 : nat), (forall v : nat, In v (freeVarFormula LNT repT) -> v = v0) -> (forall f : Formula, mem (fol.Formula LNT) T f -> SysPrf T (substituteFormula LNT repT v0 (natToTerm (codeFormula f)))) -> (forall f : Formula, (mem (fol.Formula LNT) T f -> False) -> SysPrf T (f1 (substituteFormula LNT repT v0 (natToTerm (codeFormula f))))) -> (forall x : Formula, mem (fol.Formula LNT) T x \\\\/ (mem (fol.Formula LNT) T x -> False)) -> exists f : Formula, (forall v : nat, In v (freeVarFormula LNT f) -> False) /\\\\ (SysPrf T f \\\\/ SysPrf T (f1 f) -> Inconsistent LNT T) H6, f0 : fol.Formula LNT f : fol.Formula LNT -> fol.Formula LNT H7 : forall T : System, Included Formula PA T -> forall (repT : Formula) (v0 : nat), (forall v : nat, In v (freeVarFormula LNT repT) -> v = v0) -> (forall f : Formula, mem (fol.Formula LNT) T f -> SysPrf T (substituteFormula LNT repT v0 (natToTerm (codeFormula f)))) -> (forall f0 : Formula, (mem (fol.Formula LNT) T f0 -> False) -> SysPrf T (f (substituteFormula LNT repT v0 (natToTerm (codeFormula f0))))) -> (forall x : Formula, mem (fol.Formula LNT) T x \\\\/ (mem (fol.Formula LNT) T x -> False)) -> exists f0 : Formula, (forall v : nat, In v (freeVarFormula LNT f0) -> False) /\\\\ (SysPrf T f0 \\\\/ SysPrf T (f f0) -> Inconsistent LNT T) H4, H2 : fol.Formula LNT H1 : forall T : System, Included Formula PA T -> forall (repT : Formula) (v0 : nat), (forall v : nat, In v (freeVarFormula LNT repT) -> v = v0) -> (forall f : Formula, mem (fol.Formula LNT) T f -> SysPrf T (substituteFormula LNT repT v0 (natToTerm (codeFormula f)))) -> (forall f : Formula, (mem (fol.Formula LNT) T f -> False) -> SysPrf T (notH (substituteFormula LNT repT v0 (natToTerm (codeFormula f))))) -> (forall x : Formula, mem (fol.Formula LNT) T x \\\\/ (mem (fol.Formula LNT) T x -> False)) -> exists f : Formula, (forall v : nat, In v (freeVarFormula LNT f) -> False) /\\\\ (SysPrf T f \\\\/ SysPrf T (notH f) -> Inconsistent LNT T) extendsPA : Included Formula PA T freeVarRepT : forall v : nat, In v (freeVarFormula LNT repT) -> v = v0 expressT1 : forall f : Formula, mem (fol.Formula LNT) T f -> SysPrf T (substituteFormula LNT repT v0 (natToTerm (codeFormula f))) expressT2 : forall f : Formula, (mem (fol.Formula LNT) T f -> False) -> SysPrf T (notH (substituteFormula LNT repT v0 (natToTerm (codeFormula f)))) HBL2 : forall f : Formula, SysPrf T (impH (box f) (box (box f))) HBL3 : forall f g : fol.Formula LNT, SysPrf T (impH (box (impH f g)) (impH (box f) (box g))) x : fol.Formulas LNT x0 : Prf LNT x Con H : forall g : fol.Formula LNT, In g x -> mem (fol.Formula LNT) T g HCon, H5, H9, H10, H16, H14, H17, H23, H21 : fol.Formula LNT Unable to unify \"SysPrf T (box F)\" with \"SysPrf T f0\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros.", "qsimpl time: 1 use: Rosser'sIncompleteness.", "intros HCon.", "qsimpl time: 1 use: Rosser'sIncompleteness,Con,orSys,notH.", "apply (contradiction T Con HCon).", "+", "qsimpl time: 1 use: impTrans,notH,F,box,Rosser'sIncompleteness,Con,orSys.", "qsimpl time: 1 use: impTrans,notH,F,andH,box,Rosser'sIncompleteness,Con,impH,orSys.", "qsimpl time: 1 use: HBL1,impTrans,notH,F,andH,box,Rosser'sIncompleteness,Con,impH,orSys.", "qsimpl time: 1 use: HBL1,impTrans,notH,F,andH,box,Rosser'sIncompleteness,Con,impH,Axm,orSys."], "tactic": "apply (impE T (box F) (box (box F)) HBL2).", "exn": "In environment H30 : forall (T : System) (f g h : Formula), SysPrf (Ensembles.Add (fol.Formula LNT) T f) h -> SysPrf (Ensembles.Add (fol.Formula LNT) T g) h -> SysPrf (Ensembles.Add (fol.Formula LNT) T (orH f g)) h H29 : forall (T : System) (f : Formula), mem (fol.Formula LNT) T f -> SysPrf T f H27 : fol.Formula LNT f3 : fol.Formula LNT -> fol.Formula LNT H26 : forall T : System, Included Formula PA T -> forall (repT : Formula) (v0 : nat), (forall v : nat, In v (freeVarFormula LNT repT) -> v = v0) -> (forall f : Formula, mem (fol.Formula LNT) T f -> SysPrf T (substituteFormula LNT repT v0 (natToTerm (codeFormula f)))) -> (forall f : Formula, (mem (fol.Formula LNT) T f -> False) -> SysPrf T (f3 (substituteFormula LNT repT v0 (natToTerm (codeFormula f))))) -> (forall x : Formula, mem (fol.Formula LNT) T x \\\\/ (mem (fol.Formula LNT) T x -> False)) -> exists f : Formula, (forall v : nat, In v (freeVarFormula LNT f) -> False) /\\\\ (SysPrf T f \\\\/ SysPrf T (f3 f) -> Inconsistent LNT T) H18 : fol.Formula LNT H15 : forall (T : System) (f g h : Formula), SysPrf T (impH f g) -> SysPrf T (impH g h) -> SysPrf T (impH f h) T : System repT : Formula v0 : nat H3 : forall f : fol.Formula LNT, SysPrf T f -> SysPrf T (box f) H20 : fol.Formula LNT f2 : fol.Formula LNT -> fol.Formula LNT H19 : forall T : System, Included Formula PA T -> forall (repT : Formula) (v0 : nat), (forall v : nat, In v (freeVarFormula LNT repT) -> v = v0) -> (forall f : Formula, mem (fol.Formula LNT) T f -> SysPrf T (substituteFormula LNT repT v0 (natToTerm (codeFormula f)))) -> (forall f : Formula, (mem (fol.Formula LNT) T f -> False) -> SysPrf T (f2 (substituteFormula LNT repT v0 (natToTerm (codeFormula f))))) -> (forall x : Formula, mem (fol.Formula LNT) T x \\\\/ (mem (fol.Formula LNT) T x -> False)) -> exists f : Formula, (forall v : nat, In v (freeVarFormula LNT f) -> False) /\\\\ (SysPrf T f \\\\/ SysPrf T (f2 f) -> Inconsistent LNT T) H11, H13 : fol.Formula LNT f1 : fol.Formula LNT -> fol.Formula LNT H12 : forall T : System, Included Formula PA T -> forall (repT : Formula) (v0 : nat), (forall v : nat, In v (freeVarFormula LNT repT) -> v = v0) -> (forall f : Formula, mem (fol.Formula LNT) T f -> SysPrf T (substituteFormula LNT repT v0 (natToTerm (codeFormula f)))) -> (forall f : Formula, (mem (fol.Formula LNT) T f -> False) -> SysPrf T (f1 (substituteFormula LNT repT v0 (natToTerm (codeFormula f))))) -> (forall x : Formula, mem (fol.Formula LNT) T x \\\\/ (mem (fol.Formula LNT) T x -> False)) -> exists f : Formula, (forall v : nat, In v (freeVarFormula LNT f) -> False) /\\\\ (SysPrf T f \\\\/ SysPrf T (f1 f) -> Inconsistent LNT T) H6, f0 : fol.Formula LNT f : fol.Formula LNT -> fol.Formula LNT H7 : forall T : System, Included Formula PA T -> forall (repT : Formula) (v0 : nat), (forall v : nat, In v (freeVarFormula LNT repT) -> v = v0) -> (forall f : Formula, mem (fol.Formula LNT) T f -> SysPrf T (substituteFormula LNT repT v0 (natToTerm (codeFormula f)))) -> (forall f0 : Formula, (mem (fol.Formula LNT) T f0 -> False) -> SysPrf T (f (substituteFormula LNT repT v0 (natToTerm (codeFormula f0))))) -> (forall x : Formula, mem (fol.Formula LNT) T x \\\\/ (mem (fol.Formula LNT) T x -> False)) -> exists f0 : Formula, (forall v : nat, In v (freeVarFormula LNT f0) -> False) /\\\\ (SysPrf T f0 \\\\/ SysPrf T (f f0) -> Inconsistent LNT T) H4, H2 : fol.Formula LNT H1 : forall T : System, Included Formula PA T -> forall (repT : Formula) (v0 : nat), (forall v : nat, In v (freeVarFormula LNT repT) -> v = v0) -> (forall f : Formula, mem (fol.Formula LNT) T f -> SysPrf T (substituteFormula LNT repT v0 (natToTerm (codeFormula f)))) -> (forall f : Formula, (mem (fol.Formula LNT) T f -> False) -> SysPrf T (notH (substituteFormula LNT repT v0 (natToTerm (codeFormula f))))) -> (forall x : Formula, mem (fol.Formula LNT) T x \\\\/ (mem (fol.Formula LNT) T x -> False)) -> exists f : Formula, (forall v : nat, In v (freeVarFormula LNT f) -> False) /\\\\ (SysPrf T f \\\\/ SysPrf T (notH f) -> Inconsistent LNT T) extendsPA : Included Formula PA T freeVarRepT : forall v : nat, In v (freeVarFormula LNT repT) -> v = v0 expressT1 : forall f : Formula, mem (fol.Formula LNT) T f -> SysPrf T (substituteFormula LNT repT v0 (natToTerm (codeFormula f))) expressT2 : forall f : Formula, (mem (fol.Formula LNT) T f -> False) -> SysPrf T (notH (substituteFormula LNT repT v0 (natToTerm (codeFormula f)))) HBL2 : forall f : Formula, SysPrf T (impH (box f) (box (box f))) HBL3 : forall f g : fol.Formula LNT, SysPrf T (impH (box (impH f g)) (impH (box f) (box g))) x : fol.Formulas LNT x0 : Prf LNT x Con H : forall g : fol.Formula LNT, In g x -> mem (fol.Formula LNT) T g HCon, H5, H9, H10, H16, H14, H17, H23, H21, H24, H31, H28 : fol.Formula LNT The term \"HBL2\" has type \"forall f : Formula, SysPrf T (impH (box f) (box (box f)))\" while it is expected to have type \"SysPrf T (impH (box (box F)) (box F))\".", "type": "wrong_type", "handled": true}, {"ctx": ["intros.", "qsimpl time: 1 use: Rosser'sIncompleteness.", "intros HCon.", "qsimpl time: 1 use: Rosser'sIncompleteness,Con,orSys,notH.", "apply (contradiction T Con HCon).", "+", "qsimpl time: 1 use: impTrans,notH,F,box,Rosser'sIncompleteness,Con,orSys.", "qsimpl time: 1 use: impTrans,notH,F,andH,box,Rosser'sIncompleteness,Con,impH,orSys.", "qsimpl time: 1 use: HBL1,impTrans,notH,F,andH,box,Rosser'sIncompleteness,Con,impH,orSys.", "qsimpl time: 1 use: HBL1,impTrans,notH,F,andH,box,Rosser'sIncompleteness,Con,impH,Axm,orSys.", "qsimpl time: 1 use: HBL1,impTrans,notH,F,andH,box,Rosser'sIncompleteness,impE,Con,impH,Axm,orSys."], "tactic": "apply (HBL2 F (box F)).", "exn": "Illegal application (Non-functional construction): The expression \"HBL2 F\" of type \"SysPrf T (impH (box F) (box (box F)))\" cannot be applied to the term \"box F\" : \"fol.Formula LNT\"", "type": "exp_cannot_apply", "handled": true}, {"ctx": ["intros.", "qsimpl time: 1 use: Rosser'sIncompleteness.", "intros HCon.", "qsimpl time: 1 use: Rosser'sIncompleteness,Con,orSys,notH.", "apply (contradiction T Con HCon).", "+", "qsimpl time: 1 use: impTrans,notH,F,box,Rosser'sIncompleteness,Con,orSys.", "qsimpl time: 1 use: impTrans,notH,F,andH,box,Rosser'sIncompleteness,Con,impH,orSys.", "qsimpl time: 1 use: HBL1,impTrans,notH,F,andH,box,Rosser'sIncompleteness,Con,impH,orSys.", "qsimpl time: 1 use: HBL1,impTrans,notH,F,andH,box,Rosser'sIncompleteness,Con,impH,Axm,orSys.", "qsimpl time: 1 use: HBL1,impTrans,notH,F,andH,box,Rosser'sIncompleteness,impE,Con,impH,Axm,orSys.", "qsimpl time: 1 use: HBL1,impTrans,notH,F,andH,box,Rosser'sIncompleteness,impE,Con,impH,Axm,orSys."], "tactic": "apply (impI T (notH (andH (box F) (impH Con (notH Con)))) F).", "exn": "In environment H45 : forall (T : System) (f g h : Formula), SysPrf (Ensembles.Add (fol.Formula LNT) T f) h -> SysPrf (Ensembles.Add (fol.Formula LNT) T g) h -> SysPrf (Ensembles.Add (fol.Formula LNT) T (orH f g)) h H44 : forall (T : System) (f : Formula), mem (fol.Formula LNT) T f -> SysPrf T f H42 : fol.Formula LNT H41 : forall (T : System) (f g : Formula), SysPrf T (impH g f) -> SysPrf T g -> SysPrf T f f5 : fol.Formula LNT -> fol.Formula LNT H40 : forall T : System, Included Formula PA T -> forall (repT : Formula) (v0 : nat), (forall v : nat, In v (freeVarFormula LNT repT) -> v = v0) -> (forall f : Formula, mem (fol.Formula LNT) T f -> SysPrf T (substituteFormula LNT repT v0 (natToTerm (codeFormula f)))) -> (forall f : Formula, (mem (fol.Formula LNT) T f -> False) -> SysPrf T (f5 (substituteFormula LNT repT v0 (natToTerm (codeFormula f))))) -> (forall x : Formula, mem (fol.Formula LNT) T x \\\\/ (mem (fol.Formula LNT) T x -> False)) -> exists f : Formula, (forall v : nat, In v (freeVarFormula LNT f) -> False) /\\\\ (SysPrf T f \\\\/ SysPrf T (f5 f) -> Inconsistent LNT T) H29 : fol.Formula LNT H15 : forall (T : System) (f g h : Formula), SysPrf T (impH f g) -> SysPrf T (impH g h) -> SysPrf T (impH f h) T : System repT : Formula v0 : nat H3 : forall f : fol.Formula LNT, SysPrf T f -> SysPrf T (box f) H35 : fol.Formula LNT f4 : fol.Formula LNT -> fol.Formula LNT H33 : forall T : System, Included Formula PA T -> forall (repT : Formula) (v0 : nat), (forall v : nat, In v (freeVarFormula LNT repT) -> v = v0) -> (forall f : Formula, mem (fol.Formula LNT) T f -> SysPrf T (substituteFormula LNT repT v0 (natToTerm (codeFormula f)))) -> (forall f : Formula, (mem (fol.Formula LNT) T f -> False) -> SysPrf T (f4 (substituteFormula LNT repT v0 (natToTerm (codeFormula f))))) -> (forall x : Formula, mem (fol.Formula LNT) T x \\\\/ (mem (fol.Formula LNT) T x -> False)) -> exists f : Formula, (forall v : nat, In v (freeVarFormula LNT f) -> False) /\\\\ (SysPrf T f \\\\/ SysPrf T (f4 f) -> Inconsistent LNT T) H22, H27 : fol.Formula LNT f3 : fol.Formula LNT -> fol.Formula LNT H26 : forall T : System, Included Formula PA T -> forall (repT : Formula) (v0 : nat), (forall v : nat, In v (freeVarFormula LNT repT) -> v = v0) -> (forall f : Formula, mem (fol.Formula LNT) T f -> SysPrf T (substituteFormula LNT repT v0 (natToTerm (codeFormula f)))) -> (forall f : Formula, (mem (fol.Formula LNT) T f -> False) -> SysPrf T (f3 (substituteFormula LNT repT v0 (natToTerm (codeFormula f))))) -> (forall x : Formula, mem (fol.Formula LNT) T x \\\\/ (mem (fol.Formula LNT) T x -> False)) -> exists f : Formula, (forall v : nat, In v (freeVarFormula LNT f) -> False) /\\\\ (SysPrf T f \\\\/ SysPrf T (f3 f) -> Inconsistent LNT T) H18, H20 : fol.Formula LNT f2 : fol.Formula LNT -> fol.Formula LNT H19 : forall T : System, Included Formula PA T -> forall (repT : Formula) (v0 : nat), (forall v : nat, In v (freeVarFormula LNT repT) -> v = v0) -> (forall f : Formula, mem (fol.Formula LNT) T f -> SysPrf T (substituteFormula LNT repT v0 (natToTerm (codeFormula f)))) -> (forall f : Formula, (mem (fol.Formula LNT) T f -> False) -> SysPrf T (f2 (substituteFormula LNT repT v0 (natToTerm (codeFormula f))))) -> (forall x : Formula, mem (fol.Formula LNT) T x \\\\/ (mem (fol.Formula LNT) T x -> False)) -> exists f : Formula, (forall v : nat, In v (freeVarFormula LNT f) -> False) /\\\\ (SysPrf T f \\\\/ SysPrf T (f2 f) -> Inconsistent LNT T) H11, H13 : fol.Formula LNT f1 : fol.Formula LNT -> fol.Formula LNT H12 : forall T : System, Included Formula PA T -> forall (repT : Formula) (v0 : nat), (forall v : nat, In v (freeVarFormula LNT repT) -> v = v0) -> (forall f : Formula, mem (fol.Formula LNT) T f -> SysPrf T (substituteFormula LNT repT v0 (natToTerm (codeFormula f)))) -> (forall f : Formula, (mem (fol.Formula LNT) T f -> False) -> SysPrf T (f1 (substituteFormula LNT repT v0 (natToTerm (codeFormula f))))) -> (forall x : Formula, mem (fol.Formula LNT) T x \\\\/ (mem (fol.Formula LNT) T x -> False)) -> exists f : Formula, (forall v : nat, In v (freeVarFormula LNT f) -> False) /\\\\ (SysPrf T f \\\\/ SysPrf T (f1 f) -> Inconsistent LNT T) H6, f0 : fol.Formula LNT f : fol.Formula LNT -> fol.Formula LNT H7 : forall T : System, Included Formula PA T -> forall (repT : Formula) (v0 : nat), (forall v : nat, In v (freeVarFormula LNT repT) -> v = v0) -> (forall f : Formula, mem (fol.Formula LNT) T f -> SysPrf T (substituteFormula LNT repT v0 (natToTerm (codeFormula f)))) -> (forall f0 : Formula, (mem (fol.Formula LNT) T f0 -> False) -> SysPrf T (f (substituteFormula LNT repT v0 (natToTerm (codeFormula f0))))) -> (forall x : Formula, mem (fol.Formula LNT) T x \\\\/ (mem (fol.Formula LNT) T x -> False)) -> exists f0 : Formula, (forall v : nat, In v (freeVarFormula LNT f0) -> False) /\\\\ (SysPrf T f0 \\\\/ SysPrf T (f f0) -> Inconsistent LNT T) H4, H2 : fol.Formula LNT H1 : forall T : System, Included Formula PA T -> forall (repT : Formula) (v0 : nat), (forall v : nat, In v (freeVarFormula LNT repT) -> v = v0) -> (forall f : Formula, mem (fol.Formula LNT) T f -> SysPrf T (substituteFormula LNT repT v0 (natToTerm (codeFormula f)))) -> (forall f : Formula, (mem (fol.Formula LNT) T f -> False) -> SysPrf T (notH (substituteFormula LNT repT v0 (natToTerm (codeFormula f))))) -> (forall x : Formula, mem (fol.Formula LNT) T x \\\\/ (mem (fol.Formula LNT) T x -> False)) -> exists f : Formula, (forall v : nat, In v (freeVarFormula LNT f) -> False) /\\\\ (SysPrf T f \\\\/ SysPrf T (notH f) -> Inconsistent LNT T) extendsPA : Included Formula PA T freeVarRepT : forall v : nat, In v (freeVarFormula LNT repT) -> v = v0 expressT1 : forall f : Formula, mem (fol.Formula LNT) T f -> SysPrf T (substituteFormula LNT repT v0 (natToTerm (codeFormula f))) expressT2 : forall f : Formula, (mem (fol.Formula LNT) T f -> False) -> SysPrf T (notH (substituteFormula LNT repT v0 (natToTerm (codeFormula f)))) HBL2 : forall f : Formula, SysPrf T (impH (box f) (box (box f))) HBL3 : forall f g : fol.Formula LNT, SysPrf T (impH (box (impH f g)) (impH (box f) (box g))) x : fol.Formulas LNT x0 : Prf LNT x Con H : forall g : fol.Formula LNT, In g x -> mem (fol.Formula LNT) T g HCon, H5, H9, H10, H16, H14, H17, H23, H21, H24, H31, H28, H25, H39, H36, H30, H46, H43 : fol.Formula LNT Unable to unify \"SysPrf T (impH F (notH (andH (box F) (impH Con (notH Con)))))\" with \"SysPrf T f0\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros.", "qsimpl time: 1 use: Rosser'sIncompleteness.", "intros HCon.", "qsimpl time: 1 use: Rosser'sIncompleteness,Con,orSys,notH.", "apply (contradiction T Con HCon).", "+", "qsimpl time: 1 use: impTrans,notH,F,box,Rosser'sIncompleteness,Con,orSys.", "qsimpl time: 1 use: impTrans,notH,F,andH,box,Rosser'sIncompleteness,Con,impH,orSys.", "qsimpl time: 1 use: HBL1,impTrans,notH,F,andH,box,Rosser'sIncompleteness,Con,impH,orSys.", "qsimpl time: 1 use: HBL1,impTrans,notH,F,andH,box,Rosser'sIncompleteness,Con,impH,Axm,orSys.", "qsimpl time: 1 use: HBL1,impTrans,notH,F,andH,box,Rosser'sIncompleteness,impE,Con,impH,Axm,orSys.", "qsimpl time: 1 use: HBL1,impTrans,notH,F,andH,box,Rosser'sIncompleteness,impE,Con,impH,Axm,orSys.", "qsimpl time: 1 use: HBL1,impTrans,notH,F,andH,box,Rosser'sIncompleteness,impE,Con,impH,Axm,orSys,impI."], "tactic": "apply (orSys T (notH (box F)) (box F)).", "exn": "In environment f7 : fol.Formula LNT -> fol.Formula LNT -> fol.Formula LNT H51 : forall (T : System) (f g : Formula), SysPrf (Ensembles.Add (fol.Formula LNT) T g) f -> SysPrf T (f7 g f) H50 : forall (T : System) (f g h : Formula), SysPrf (Ensembles.Add (fol.Formula LNT) T f) h -> SysPrf (Ensembles.Add (fol.Formula LNT) T g) h -> SysPrf (Ensembles.Add (fol.Formula LNT) T (orH f g)) h H49 : forall (T : System) (f : Formula), mem (fol.Formula LNT) T f -> SysPrf T f H48 : fol.Formula LNT H47 : forall (T : System) (f g : Formula), SysPrf T (impH g f) -> SysPrf T g -> SysPrf T f f6 : fol.Formula LNT -> fol.Formula LNT H38 : forall T : System, Included Formula PA T -> forall (repT : Formula) (v0 : nat), (forall v : nat, In v (freeVarFormula LNT repT) -> v = v0) -> (forall f : Formula, mem (fol.Formula LNT) T f -> SysPrf T (substituteFormula LNT repT v0 (natToTerm (codeFormula f)))) -> (forall f : Formula, (mem (fol.Formula LNT) T f -> False) -> SysPrf T (f6 (substituteFormula LNT repT v0 (natToTerm (codeFormula f))))) -> (forall x : Formula, mem (fol.Formula LNT) T x \\\\/ (mem (fol.Formula LNT) T x -> False)) -> exists f : Formula, (forall v : nat, In v (freeVarFormula LNT f) -> False) /\\\\ (SysPrf T f \\\\/ SysPrf T (f6 f) -> Inconsistent LNT T) H32 : fol.Formula LNT H8 : forall (T : System) (f g h : Formula), SysPrf T (impH f g) -> SysPrf T (impH g h) -> SysPrf T (impH f h) T : System repT : Formula v0 : nat H0 : forall f : fol.Formula LNT, SysPrf T f -> SysPrf T (box f) H42 : fol.Formula LNT f5 : fol.Formula LNT -> fol.Formula LNT H40 : forall T : System, Included Formula PA T -> forall (repT : Formula) (v0 : nat), (forall v : nat, In v (freeVarFormula LNT repT) -> v = v0) -> (forall f : Formula, mem (fol.Formula LNT) T f -> SysPrf T (substituteFormula LNT repT v0 (natToTerm (codeFormula f)))) -> (forall f : Formula, (mem (fol.Formula LNT) T f -> False) -> SysPrf T (f5 (substituteFormula LNT repT v0 (natToTerm (codeFormula f))))) -> (forall x : Formula, mem (fol.Formula LNT) T x \\\\/ (mem (fol.Formula LNT) T x -> False)) -> exists f : Formula, (forall v : nat, In v (freeVarFormula LNT f) -> False) /\\\\ (SysPrf T f \\\\/ SysPrf T (f5 f) -> Inconsistent LNT T) H29, H35 : fol.Formula LNT f4 : fol.Formula LNT -> fol.Formula LNT H33 : forall T : System, Included Formula PA T -> forall (repT : Formula) (v0 : nat), (forall v : nat, In v (freeVarFormula LNT repT) -> v = v0) -> (forall f : Formula, mem (fol.Formula LNT) T f -> SysPrf T (substituteFormula LNT repT v0 (natToTerm (codeFormula f)))) -> (forall f : Formula, (mem (fol.Formula LNT) T f -> False) -> SysPrf T (f4 (substituteFormula LNT repT v0 (natToTerm (codeFormula f))))) -> (forall x : Formula, mem (fol.Formula LNT) T x \\\\/ (mem (fol.Formula LNT) T x -> False)) -> exists f : Formula, (forall v : nat, In v (freeVarFormula LNT f) -> False) /\\\\ (SysPrf T f \\\\/ SysPrf T (f4 f) -> Inconsistent LNT T) H22, H27 : fol.Formula LNT f3 : fol.Formula LNT -> fol.Formula LNT H26 : forall T : System, Included Formula PA T -> forall (repT : Formula) (v0 : nat), (forall v : nat, In v (freeVarFormula LNT repT) -> v = v0) -> (forall f : Formula, mem (fol.Formula LNT) T f -> SysPrf T (substituteFormula LNT repT v0 (natToTerm (codeFormula f)))) -> (forall f : Formula, (mem (fol.Formula LNT) T f -> False) -> SysPrf T (f3 (substituteFormula LNT repT v0 (natToTerm (codeFormula f))))) -> (forall x : Formula, mem (fol.Formula LNT) T x \\\\/ (mem (fol.Formula LNT) T x -> False)) -> exists f : Formula, (forall v : nat, In v (freeVarFormula LNT f) -> False) /\\\\ (SysPrf T f \\\\/ SysPrf T (f3 f) -> Inconsistent LNT T) H18, H20 : fol.Formula LNT f2 : fol.Formula LNT -> fol.Formula LNT H19 : forall T : System, Included Formula PA T -> forall (repT : Formula) (v0 : nat), (forall v : nat, In v (freeVarFormula LNT repT) -> v = v0) -> (forall f : Formula, mem (fol.Formula LNT) T f -> SysPrf T (substituteFormula LNT repT v0 (natToTerm (codeFormula f)))) -> (forall f : Formula, (mem (fol.Formula LNT) T f -> False) -> SysPrf T (f2 (substituteFormula LNT repT v0 (natToTerm (codeFormula f))))) -> (forall x : Formula, mem (fol.Formula LNT) T x \\\\/ (mem (fol.Formula LNT) T x -> False)) -> exists f : Formula, (forall v : nat, In v (freeVarFormula LNT f) -> False) /\\\\ (SysPrf T f \\\\/ SysPrf T (f2 f) -> Inconsistent LNT T) H11, H13 : fol.Formula LNT f1 : fol.Formula LNT -> fol.Formula LNT H12 : forall T : System, Included Formula PA T -> forall (repT : Formula) (v0 : nat), (forall v : nat, In v (freeVarFormula LNT repT) -> v = v0) -> (forall f : Formula, mem (fol.Formula LNT) T f -> SysPrf T (substituteFormula LNT repT v0 (natToTerm (codeFormula f)))) -> (forall f : Formula, (mem (fol.Formula LNT) T f -> False) -> SysPrf T (f1 (substituteFormula LNT repT v0 (natToTerm (codeFormula f))))) -> (forall x : Formula, mem (fol.Formula LNT) T x \\\\/ (mem (fol.Formula LNT) T x -> False)) -> exists f : Formula, (forall v : nat, In v (freeVarFormula LNT f) -> False) /\\\\ (SysPrf T f \\\\/ SysPrf T (f1 f) -> Inconsistent LNT T) H6, f0 : fol.Formula LNT f : fol.Formula LNT -> fol.Formula LNT H7 : forall T : System, Included Formula PA T -> forall (repT : Formula) (v0 : nat), (forall v : nat, In v (freeVarFormula LNT repT) -> v = v0) -> (forall f : Formula, mem (fol.Formula LNT) T f -> SysPrf T (substituteFormula LNT repT v0 (natToTerm (codeFormula f)))) -> (forall f0 : Formula, (mem (fol.Formula LNT) T f0 -> False) -> SysPrf T (f (substituteFormula LNT repT v0 (natToTerm (codeFormula f0))))) -> (forall x : Formula, mem (fol.Formula LNT) T x \\\\/ (mem (fol.Formula LNT) T x -> False)) -> exists f0 : Formula, (forall v : nat, In v (freeVarFormula LNT f0) -> False) /\\\\ (SysPrf T f0 \\\\/ SysPrf T (f f0) -> Inconsistent LNT T) H4, H2 : fol.Formula LNT H1 : forall T : System, Included Formula PA T -> forall (repT : Formula) (v0 : nat), (forall v : nat, In v (freeVarFormula LNT repT) -> v = v0) -> (forall f : Formula, mem (fol.Formula LNT) T f -> SysPrf T (substituteFormula LNT repT v0 (natToTerm (codeFormula f)))) -> (forall f : Formula, (mem (fol.Formula LNT) T f -> False) -> SysPrf T (notH (substituteFormula LNT repT v0 (natToTerm (codeFormula f))))) -> (forall x : Formula, mem (fol.Formula LNT) T x \\\\/ (mem (fol.Formula LNT) T x -> False)) -> exists f : Formula, (forall v : nat, In v (freeVarFormula LNT f) -> False) /\\\\ (SysPrf T f \\\\/ SysPrf T (notH f) -> Inconsistent LNT T) extendsPA : Included Formula PA T freeVarRepT : forall v : nat, In v (freeVarFormula LNT repT) -> v = v0 expressT1 : forall f : Formula, mem (fol.Formula LNT) T f -> SysPrf T (substituteFormula LNT repT v0 (natToTerm (codeFormula f))) expressT2 : forall f : Formula, (mem (fol.Formula LNT) T f -> False) -> SysPrf T (notH (substituteFormula LNT repT v0 (natToTerm (codeFormula f)))) HBL2 : forall f : Formula, SysPrf T (impH (box f) (box (box f))) HBL3 : forall f g : fol.Formula LNT, SysPrf T (impH (box (impH f g)) (impH (box f) (box g))) x : fol.Formulas LNT x0 : Prf LNT x Con H : forall g : fol.Formula LNT, In g x -> mem (fol.Formula LNT) T g HCon, H5, H9, H10, H16, H14, H17, H23, H21, H24, H31, H28, H25, H39, H36, H30, H46, H43, H34, H52 : fol.Formula LNT Unable to unify \"exists (Axm : fol.Formulas LNT) (_ : Prf LNT Axm ?M41756), forall g : fol.Formula LNT, In g Axm -> mem (fol.Formula LNT) (Ensembles.Add (fol.Formula LNT) T (orH (notH (box F)) (box F))) g\" with \"exists (Axm : fol.Formulas LNT) (_ : Prf LNT Axm f0), forall g : fol.Formula LNT, In g Axm -> mem (fol.Formula LNT) T g\".", "type": "cannot_unify", "handled": true}]}, "chat": [], "original": "intros. apply (Rosser'sIncompleteness T extendsPA repT v0 freeVarRepT expressT1 expressT2). - intros HCon. apply (orSys T (notH Con) Con). + apply (contradiction T Con HCon). + apply (impTrans T Con (notH (box F)) (notH Con)). * apply (impTrans T Con (andH (box F) (impH Con (notH Con))) F). ++ apply (HBL1 F). apply (Axm T (box F)). apply (impE T (box F) (box (box F)) HBL2). apply (HBL2 F (box F)). ++ apply (impI T (notH (andH (box F) (impH Con (notH Con)))) F). apply (orSys T (notH (box F)) (box F)). --", "succ": false}]