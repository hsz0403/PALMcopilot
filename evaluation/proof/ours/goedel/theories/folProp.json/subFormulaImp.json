[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": ["intros f1 f2 v s.", "unfold substituteFormula.", "unfold substituteFormulaHelp.", "simpl.", "destruct (depth L f1 =? depth L f2) eqn:E.", "-", "apply Nat.eqb_eq in E."], "tactic": ["rewrite E.", ""], "exn": "Abstracting over the term \"depth L f1\" leads to a term fun n : nat => proj1_sig (Formula_depth_rec2 L (fun f : fol.Formula L => nat * fol.Term L -> {y : fol.Formula L | depth L y = depth L f}) (fun (t t0 : fol.Term L) (H : nat * fol.Term L) => prod_rec (fun _ : nat * fol.Term L => {y : fol.Formula L | depth L y = 0}) (fun (a : nat) (b : fol.Term L) => exist (fun y : fol.Formula L => depth L y = 0) (equal (substituteTerm t a b) (substituteTerm t0 a b)) eq_refl) H) (fun (r : Relations L) (t : fol.Terms L (arity L (inl r))) (H : nat * fol.Term L) => prod_rec (fun _ : nat * fol.Term L => {y : fol.Formula L | depth L y = 0}) (fun (a : nat) (b : fol.Term L) => exist (fun y : fol.Formula L => depth L y = 0) (atomic r (substituteTerms (arity L (inl r)) t a b)) eq_refl) H) substituteFormulaImp substituteFormulaNot substituteFormulaForall (impH f1 f2) (v, s)) = impH (proj1_sig (Formula_depth_rec2 L (fun f : fol.Formula L => nat * fol.Term L -> {y : fol.Formula L | depth L y = depth L f}) (fun (t t0 : fol.Term L) (H : nat * fol.Term L) => prod_rec (fun _ : nat * fol.Term L => {y : fol.Formula L | depth L y = 0}) (fun (a : nat) (b : fol.Term L) => exist (fun y : fol.Formula L => depth L y = 0) (equal (substituteTerm t a b) (substituteTerm t0 a b)) eq_refl) H) (fun (r : Relations L) (t : fol.Terms L (arity L (inl r))) (H : nat * fol.Term L) => prod_rec (fun _ : nat * fol.Term L => {y : fol.Formula L | depth L y = 0}) (fun (a : nat) (b : fol.Term L) => exist (fun y : fol.Formula L => depth L y = 0) (atomic r (substituteTerms (arity L (inl r)) t a b)) eq_refl) H) substituteFormulaImp substituteFormulaNot substituteFormulaForall f1 (v, s))) (proj1_sig (Formula_depth_rec2 L (fun f : fol.Formula L => nat * fol.Term L -> {y : fol.Formula L | depth L y = depth L f}) (fun (t t0 : fol.Term L) (H : nat * fol.Term L) => prod_rec (fun _ : nat * fol.Term L => {y : fol.Formula L | depth L y = 0}) (fun (a : nat) (b : fol.Term L) => exist (fun y : fol.Formula L => depth L y = 0) (equal (substituteTerm t a b) (substituteTerm t0 a b)) eq_refl) H) (fun (r : Relations L) (t : fol.Terms L (arity L (inl r))) (H : nat * fol.Term L) => prod_rec (fun _ : nat * fol.Term L => {y : fol.Formula L | depth L y = 0}) (fun (a : nat) (b : fol.Term L) => exist (fun y : fol.Formula L => depth L y = 0) (atomic r (substituteTerms (arity L (inl r)) t a b)) eq_refl) H) substituteFormulaImp substituteFormulaNot substituteFormulaForall f2 (v, s))) which is ill-typed. Reason is: Illegal application: The term \"proj1_sig\" of type \"forall (A : Type) (P : A -> Prop), {x : A | P x} -> A\" cannot be applied to the terms \"fol.Formula L\" : \"Set\" \"fun y : fol.Formula L => depth L y = S (Nat.max n (depth L f2))\" : \"fol.Formula L -> Prop\" \"Formula_depth_rec2 L (fun f : fol.Formula L => nat * fol.Term L -> {y : fol.Formula L | depth L y = depth L f}) (fun (t t0 : fol.Term L) (H : nat * fol.Term L) => prod_rec (fun _ : nat * fol.Term L => {y : fol.Formula L | depth L y = 0}) (fun (a : nat) (b : fol.Term L) => exist (fun y : fol.Formula L => depth L y = 0) (equal (substituteTerm t a b) (substituteTerm t0 a b)) eq_refl) H) (fun (r : Relations L) (t : fol.Terms L (arity L (inl r))) (H : nat * fol.Term L) => prod_rec (fun _ : nat * fol.Term L => {y : fol.Formula L | depth L y = 0}) (fun (a : nat) (b : fol.Term L) => exist (fun y : fol.Formula L => depth L y = 0) (atomic r (substituteTerms (arity L (inl r)) t a b)) eq_refl) H) substituteFormulaImp substituteFormulaNot substituteFormulaForall (impH f1 f2) (v, s)\" : \"{y : fol.Formula L | depth L y = depth L (impH f1 f2)}\" The 3rd term has type \"{y : fol.Formula L | depth L y = depth L (impH f1 f2)}\" which should be coercible to \"{y : fol.Formula L | depth L y = S (Nat.max n (depth L f2))}\".", "type": "term_cannot_apply", "handled": false}, {"ctx": ["intros f1 f2 v s.", "unfold substituteFormula.", "unfold substituteFormulaHelp.", "simpl.", "destruct (depth L f1 =? depth L f2) eqn:E.", "-", "apply Nat.eqb_eq in E."], "tactic": "-", "exn": "Wrong bullet -: Current bullet - is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["intros f1 f2 v s.", "unfold substituteFormula.", "unfold substituteFormulaHelp.", "simpl.", "destruct (depth L f1 =? depth L f2) eqn:E.", "-", "apply Nat.eqb_eq in E.", "shelve.", "-"], "tactic": "reflexivity.", "exn": "In environment L : Language var := fol.var L : nat -> fol.Term L apply := fol.apply L : forall f : Functions L, fol.Terms L (arity L (inr f)) -> fol.Term L equal := fol.equal L : fol.Term L -> fol.Term L -> fol.Formula L atomic := fol.atomic L : forall r : Relations L, fol.Terms L (arity L (inl r)) -> fol.Formula L impH := fol.impH L : fol.Formula L -> fol.Formula L -> fol.Formula L notH := fol.notH L : fol.Formula L -> fol.Formula L forallH := fol.forallH L : nat -> fol.Formula L -> fol.Formula L lt_depth := fol.lt_depth L : fol.Formula L -> fol.Formula L -> Prop f1, f2 : fol.Formula L v : nat s : fol.Term L E : (depth L f1 =? depth L f2) = false Unable to unify \"impH (proj1_sig (Formula_depth_rec2 L (fun f : fol.Formula L => nat * fol.Term L -> {y : fol.Formula L | depth L y = depth L f}) (fun (t t0 : fol.Term L) (H : nat * fol.Term L) => prod_rec (fun _ : nat * fol.Term L => {y : fol.Formula L | depth L y = 0}) (fun (a : nat) (b : fol.Term L) => exist (fun y : fol.Formula L => depth L y = 0) (equal (substituteTerm t a b) (substituteTerm t0 a b)) eq_refl) H) (fun (r : Relations L) (t : fol.Terms L (arity L (inl r))) (H : nat * fol.Term L) => prod_rec (fun _ : nat * fol.Term L => {y : fol.Formula L | depth L y = 0}) (fun (a : nat) (b : fol.Term L) => exist (fun y : fol.Formula L => depth L y = 0) (atomic r (substituteTerms (arity L (inl r)) t a b)) eq_refl) H) substituteFormulaImp substituteFormulaNot substituteFormulaForall f1 (v, s))) (proj1_sig (Formula_depth_rec2 L (fun f : fol.Formula L => nat * fol.Term L -> {y : fol.Formula L | depth L y = depth L f}) (fun (t t0 : fol.Term L) (H : nat * fol.Term L) => prod_rec (fun _ : nat * fol.Term L => {y : fol.Formula L | depth L y = 0}) (fun (a : nat) (b : fol.Term L) => exist (fun y : fol.Formula L => depth L y = 0) (equal (substituteTerm t a b) (substituteTerm t0 a b)) eq_refl) H) (fun (r : Relations L) (t : fol.Terms L (arity L (inl r))) (H : nat * fol.Term L) => prod_rec (fun _ : nat * fol.Term L => {y : fol.Formula L | depth L y = 0}) (fun (a : nat) (b : fol.Term L) => exist (fun y : fol.Formula L => depth L y = 0) (atomic r (substituteTerms (arity L (inl r)) t a b)) eq_refl) H) substituteFormulaImp substituteFormulaNot substituteFormulaForall f2 (v, s)))\" with \"proj1_sig (Formula_depth_rec2 L (fun f : fol.Formula L => nat * fol.Term L -> {y : fol.Formula L | depth L y = depth L f}) (fun (t t0 : fol.Term L) (H : nat * fol.Term L) => prod_rec (fun _ : nat * fol.Term L => {y : fol.Formula L | depth L y = 0}) (fun (a : nat) (b : fol.Term L) => exist (fun y : fol.Formula L => depth L y = 0) (equal (substituteTerm t a b) (substituteTerm t0 a b)) eq_refl) H) (fun (r : Relations L) (t : fol.Terms L (arity L (inl r))) (H : nat * fol.Term L) => prod_rec (fun _ : nat * fol.Term L => {y : fol.Formula L | depth L y = 0}) (fun (a : nat) (b : fol.Term L) => exist (fun y : fol.Formula L => depth L y = 0) (atomic r (substituteTerms (arity L (inl r)) t a b)) eq_refl) H) substituteFormulaImp substituteFormulaNot substituteFormulaForall (impH f1 f2) (v, s))\".", "type": "cannot_unify", "handled": true}]}, "chat": [], "original": "intros f1 f2 v s. unfold substituteFormula. unfold substituteFormulaHelp. simpl. destruct (depth L f1 =? depth L f2) eqn:E. - apply Nat.eqb_eq in E. rewrite E. reflexivity. - reflexivity.", "succ": false}]