[{"history": {"proof": "qsimpl time: 2 use: axiom2. qsimpl time: 2 use: deduction_impp_trans,axiom2. qsimpl time: 2 use: deduction_impp_trans,axiom2,deduction_left_impp_intros. qsimpl time: 2 use: deduction_impp_trans,axiom2,deduction_impp_elim,deduction_left_impp_intros.", "repairs": ["wrong_type", "cannot_unify", "cannot_unify", "cannot_unify"], "exceptions": [{"ctx": ["intros Phi x y z H."], "tactic": "apply (axiom2 Phi y x z).", "exn": "In environment L : Language GammaD : Derivable L bSC : BasicSequentCalculus L GammaD minL : MinimumLanguage L minSC : MinimumSequentCalculus L GammaD Phi : context x, y, z : expr H : Phi |-- x --> y --> z The term \"Phi\" has type \"context\" while it is expected to have type \"expr\".", "type": "wrong_type", "handled": true}, {"ctx": ["intros Phi x y z H.", "qsimpl time: 2 use: axiom2."], "tactic": "apply (deduction_impp_trans Phi y x z).", "exn": "In environment L : Language GammaD : Derivable L bSC : BasicSequentCalculus L GammaD minL : MinimumLanguage L minSC : MinimumSequentCalculus L GammaD Phi : context x, y, z : expr H : Phi |-- x --> y --> z H0 : forall x y z : expr, |-- (x --> y --> z) --> (x --> y) --> x --> z Unable to unify \"Phi |-- y --> z\" with \"Phi |-- y --> x --> z\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros Phi x y z H.", "qsimpl time: 2 use: axiom2.", "qsimpl time: 2 use: deduction_impp_trans,axiom2."], "tactic": "apply (deduction_left_impp_intros Phi y x).", "exn": "In environment L : Language GammaD : Derivable L minL : MinimumLanguage L bSC : BasicSequentCalculus L GammaD minSC : MinimumSequentCalculus L GammaD Phi : context x, y, z : expr H : Phi |-- x --> y --> z H0 : forall x y z : expr, Phi ((x --> y --> z) --> (x --> y) --> x --> z) H2 : forall x y z : expr, |-- (x --> y --> z) --> (x --> y) --> x --> z H1 : forall (Phi : context) (x y z : expr), Phi |-- x --> y -> Phi |-- y --> z -> Phi |-- x --> z Unable to unify \"Phi |-- x --> y\" with \"Phi |-- y --> x --> z\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros Phi x y z H.", "qsimpl time: 2 use: axiom2.", "qsimpl time: 2 use: deduction_impp_trans,axiom2.", "qsimpl time: 2 use: deduction_impp_trans,axiom2,deduction_left_impp_intros."], "tactic": "apply (deduction_impp_elim Phi y z).", "exn": "In environment L : Language GammaD : Derivable L minL : MinimumLanguage L H5 : forall (Phi : context) (x y : expr), Phi |-- x -> Phi |-- y --> x bSC : BasicSequentCalculus L GammaD minSC : MinimumSequentCalculus L GammaD Phi : context x, y, z : expr H : Phi |-- x --> y --> z H0 : forall x y z : expr, Phi ((x --> y --> z) --> (x --> y) --> x --> z) H1 : forall (Phi : context) (x y z : expr), Phi |-- x --> y -> Phi |-- y --> z -> Phi |-- x --> z H4 : forall x y z : expr, |-- (x --> y --> z) --> (x --> y) --> x --> z Unable to unify \"Phi;; y |-- z\" with \"Phi |-- y --> x --> z\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros Phi x y z H.", "qsimpl time: 2 use: axiom2.", "qsimpl time: 2 use: deduction_impp_trans,axiom2.", "qsimpl time: 2 use: deduction_impp_trans,axiom2,deduction_left_impp_intros.", "qsimpl time: 2 use: deduction_impp_trans,axiom2,deduction_impp_elim,deduction_left_impp_intros."], "tactic": "apply H.", "exn": "In environment L : Language GammaD : Derivable L minL : MinimumLanguage L H7 : forall (Phi : context) (x y : expr), Phi |-- x -> Phi |-- y --> x H6 : forall (Phi : context) (x y : expr), Phi |-- x --> y -> Phi;; x |-- y bSC : BasicSequentCalculus L GammaD minSC : MinimumSequentCalculus L GammaD Phi : context x, y, z : expr H : Phi |-- x --> y --> z H0 : forall x y z : expr, Phi ((x --> y --> z) --> (x --> y) --> x --> z) H1 : forall (Phi : context) (x y z : expr), Phi |-- x --> y -> Phi |-- y --> z -> Phi |-- x --> z H3 : forall x y z : expr, |-- (x --> y --> z) --> (x --> y) --> x --> z Unable to unify \"Phi |-- x --> y --> z\" with \"Phi |-- y --> x --> z\".", "type": "cannot_unify", "handled": true}]}, "chat": [], "original": "intros Phi x y z H. apply (axiom2 Phi y x z). apply (deduction_impp_trans Phi y x z). apply (deduction_left_impp_intros Phi y x). apply (deduction_impp_elim Phi y z). apply H.", "succ": false}]