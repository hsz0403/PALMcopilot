[{"history": {"proof": "qsimpl time: 2. qsimpl time: 2 use: deduction_impp_intros.", "repairs": ["not_inductive_product", "cannot_unify"], "exceptions": [{"ctx": ["intros x y z."], "tactic": "split.", "exn": "Not an inductive product.", "type": "not_inductive_product", "handled": true}, {"ctx": ["intros x y z.", "qsimpl time: 2."], "tactic": "intros H.", "exn": "H is already used.", "type": "used_var", "handled": true}, {"ctx": ["intros x y z.", "qsimpl time: 2."], "tactic": "intros H'.", "exn": "No product even after head-reduction.", "type": "no_product", "handled": true}, {"ctx": ["intros x y z.", "qsimpl time: 2."], "tactic": "apply deduction_impp_intros.", "exn": "In environment L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Provable L prodp, funcp : expr -> expr -> expr x, y, z : expr andp_intros : forall x y : expr, |-- x --> y --> x && y andp_elim1 : forall x y : expr, |-- x && y --> x andp_elim2 : forall x y : expr, |-- x && y --> y orp_intros1 : forall x y : expr, |-- x --> x || y orp_intros2 : forall x y : expr, |-- y --> x || y orp_elim : forall x y z : expr, |-- (x --> z) --> (y --> z) --> x || y --> z falsep_elim : forall x : expr, |-- FF --> x modus_ponens : forall x y : expr, |-- x --> y -> |-- x -> |-- y axiom1 : forall x y : expr, |-- x --> y --> x axiom2 : forall x y z : expr, |-- (x --> y --> z) --> (x --> y) --> x --> z H : forall x y z : expr, |-- x --> funcp y z -> |-- prodp x y --> z H0 : forall x y z : expr, |-- prodp x y --> z -> |-- x --> funcp y z Unable to unify \"(let (derivable) := ?Gamma in derivable) ?M2953 (?M2954 --> ?M2955)\" with \"(let (provable) := Gamma in provable) (prodp (x || y) z <--> prodp x z || prodp y z)\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros x y z.", "qsimpl time: 2.", "qsimpl time: 2 use: deduction_impp_intros."], "tactic": "apply deduction_orp_intros1.", "exn": "In environment L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Provable L prodp, funcp : expr -> expr -> expr x, y, z : expr andp_intros : forall x y : expr, |-- x --> y --> x && y andp_elim1 : forall x y : expr, |-- x && y --> x andp_elim2 : forall x y : expr, |-- x && y --> y orp_intros1 : forall x y : expr, |-- x --> x || y orp_intros2 : forall x y : expr, |-- y --> x || y orp_elim : forall x y z : expr, |-- (x --> z) --> (y --> z) --> x || y --> z falsep_elim : forall x : expr, |-- FF --> x modus_ponens : forall x y : expr, |-- x --> y -> |-- x -> |-- y axiom1 : forall x y : expr, |-- x --> y --> x axiom2 : forall x y z : expr, |-- (x --> y --> z) --> (x --> y) --> x --> z H : forall x y z : expr, |-- x --> funcp y z -> |-- prodp x y --> z H0 : forall x y z : expr, |-- prodp x y --> z -> |-- x --> funcp y z H1 : forall (Phi : Ensemble expr) (x y : expr), Phi;; x |-- y -> Phi |-- x --> y Unable to unify \"(let (derivable) := ?Gamma in derivable) ?M5183 (?M5184 || ?M5185)\" with \"(let (provable) := Gamma in provable) (prodp (x || y) z <--> prodp x z || prodp y z)\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros x y z.", "qsimpl time: 2.", "qsimpl time: 2 use: deduction_impp_intros.", "qsimpl time: 2 use: deduction_impp_intros,deduction_orp_intros1."], "tactic": ["apply deduction_impp_elim with (y := z) in H.", ""], "exn": "No such bound variable y (possible names are: Phi, x0 and y0).", "type": "no_such_bound", "handled": false}]}, "chat": [], "original": "intros x y z. split. - intros H. apply deduction_impp_intros. apply deduction_orp_intros1. apply deduction_impp_elim with (y := z) in H. apply deduction_modus_ponens with (x := prodp (x || y) z) (y := z). + apply prodp_sump_distr_r. + apply deduction_orp_intros1. apply deduction_impp_elim with (x := z) in H. apply H. - intros H. apply deduction_orp_intros1. apply deduction_impp_intros. apply deduction_modus_ponens with (x := prodp x z || prodp y z) (y := z). + apply prodp_sump_distr_l. + apply deduction_impp_intros. apply deduction_orp_intros1. apply H.", "succ": false}]