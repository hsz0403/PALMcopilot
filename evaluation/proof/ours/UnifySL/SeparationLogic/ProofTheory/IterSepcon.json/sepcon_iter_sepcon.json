[{"history": {"proof": "qsimpl time: 2. qsimpl time: 2 use: GC_Ext_Classical_collapse_aux. qsimpl time: 2 use: GC_Ext_Classical_collapse_aux. qsimpl time: 2 use: assoc_prodp_fold_left_equiv,GC_Ext_Classical_collapse_aux. qsimpl time: 2 use: fold_left_iffp,assoc_prodp_fold_left_equiv,GC_Ext_Classical_collapse_aux.", "repairs": ["not_inductive_product", "cannot_apply_in", "no_subterm", "no_subterm", "no_subterm"], "exceptions": [{"ctx": ["intros xs ys."], "tactic": "split.", "exn": "Not an inductive product.", "type": "not_inductive_product", "handled": true}, {"ctx": ["intros xs ys.", "qsimpl time: 2."], "tactic": "intros H.", "exn": "H is already used.", "type": "used_var", "handled": true}, {"ctx": ["intros xs ys.", "qsimpl time: 2."], "tactic": "intros H'.", "exn": "No product even after head-reduction.", "type": "no_product", "handled": true}, {"ctx": ["intros xs ys.", "qsimpl time: 2."], "tactic": "apply GC_Ext_Classical_collapse_aux in H.", "exn": "Unable to apply lemma of type \"forall x : expr, |-- x --> x * x\" on hypothesis of type \"forall x y z : expr, |-- x --> y -* z -> |-- x * y --> z\".", "type": "cannot_apply_in", "handled": true}, {"ctx": ["intros xs ys.", "qsimpl time: 2.", "qsimpl time: 2 use: GC_Ext_Classical_collapse_aux."], "tactic": "rewrite iter_sepcon_def, iter_sepcon_def in H.", "exn": "Found no subterm matching \"iter_sepcon ?M9600\" in H.", "type": "no_subterm", "handled": true}, {"ctx": ["intros xs ys.", "qsimpl time: 2.", "qsimpl time: 2 use: GC_Ext_Classical_collapse_aux.", "qsimpl time: 2 use: GC_Ext_Classical_collapse_aux."], "tactic": "rewrite assoc_prodp_fold_left_equiv in H.", "exn": "Found no subterm matching \"?prodp (fold_left ?prodp ?l ?e) (fold_left ?prodp ?l0 ?e)\" in the current goal.", "type": "no_subterm", "handled": true}, {"ctx": ["intros xs ys.", "qsimpl time: 2.", "qsimpl time: 2 use: GC_Ext_Classical_collapse_aux.", "qsimpl time: 2 use: GC_Ext_Classical_collapse_aux.", "qsimpl time: 2 use: assoc_prodp_fold_left_equiv,GC_Ext_Classical_collapse_aux."], "tactic": "rewrite fold_left_iffp in H.", "exn": "Found no subterm matching \"fold_left ?prodp ?l ?e0\" in the current goal.", "type": "no_subterm", "handled": true}, {"ctx": ["intros xs ys.", "qsimpl time: 2.", "qsimpl time: 2 use: GC_Ext_Classical_collapse_aux.", "qsimpl time: 2 use: GC_Ext_Classical_collapse_aux.", "qsimpl time: 2 use: assoc_prodp_fold_left_equiv,GC_Ext_Classical_collapse_aux.", "qsimpl time: 2 use: fold_left_iffp,assoc_prodp_fold_left_equiv,GC_Ext_Classical_collapse_aux."], "tactic": "apply H.", "exn": "In environment L : Language minL : MinimumLanguage L pL : PropositionalLanguage L sepconL : SepconLanguage L wandL : WandLanguage L empL : EmpLanguage L iter_sepcon_L : IterSepconLanguage L iter_wand_L : IterWandLanguage L Gamma : Provable L xs, ys : list expr sepcon_emp1 : forall x : expr, |-- x * emp --> x sepcon_emp2 : forall x : expr, |-- x --> x * emp sepcon_comm_impp : forall x y : expr, |-- x * y --> y * x sepcon_assoc1 : forall x y z : expr, |-- x * (y * z) --> x * y * z sepcon_mono : forall x1 x2 y1 y2 : expr, |-- x1 --> x2 -> |-- y1 --> y2 -> |-- x1 * y1 --> x2 * y2 andp_intros : forall x y : expr, |-- x --> y --> x && y andp_elim1 : forall x y : expr, |-- x && y --> x andp_elim2 : forall x y : expr, |-- x && y --> y orp_intros1 : forall x y : expr, |-- x --> x || y orp_intros2 : forall x y : expr, |-- y --> x || y orp_elim : forall x y z : expr, |-- (x --> z) --> (y --> z) --> x || y --> z falsep_elim : forall x : expr, |-- FF --> x modus_ponens : forall x y : expr, |-- x --> y -> |-- x -> |-- y axiom1 : forall x y : expr, |-- x --> y --> x axiom2 : forall x y z : expr, |-- (x --> y --> z) --> (x --> y) --> x --> z iter_wand_def : forall (xs : list expr) (y : expr), iter_wand xs y = fold_right wand y xs iter_sepcon_def : forall xs : list expr, iter_sepcon xs = fold_left sepcon xs emp H : forall x y z : expr, |-- x --> y -* z -> |-- x * y --> z H0 : forall x y z : expr, |-- x * y --> z -> |-- x --> y -* z H1 : forall x : expr, |-- x --> x * x H3 : forall xs1 xs2 : list expr, |-- fold_left (fun _ X0 : expr => X0) xs2 ?e <--> fold_left (fun _ X0 : expr => X0) (xs1 ++ xs2) ?e H6 : forall x : expr, |-- x --> x * x H5 : forall xs1 xs2 : list expr, |-- (fun _ X0 : expr => X0) (fold_left (fun _ X0 : expr => X0) xs1 ?e0) (fold_left (fun _ X0 : expr => X0) xs2 ?e0) <--> fold_left (fun _ X0 : expr => X0) (xs1 ++ xs2) ?e0 H2 : forall (x1 x2 : expr) (xs1 xs2 : list expr), Forall2 (fun x3 x4 : expr => |-- x3 <--> x4) xs1 xs2 -> |-- x1 <--> x2 -> |-- fold_left (fun _ X0 : expr => X0) xs1 x1 <--> fold_left (fun _ X0 : expr => X0) xs2 x2 Unable to unify \"(let (provable) := Gamma in provable) (?M42660 * ?M42661 --> ?M42662)\" with \"(let (provable) := Gamma in provable) (iter_sepcon xs * iter_sepcon ys <--> iter_sepcon (xs ++ ys))\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros xs ys.", "qsimpl time: 2.", "qsimpl time: 2 use: GC_Ext_Classical_collapse_aux.", "qsimpl time: 2 use: GC_Ext_Classical_collapse_aux.", "qsimpl time: 2 use: assoc_prodp_fold_left_equiv,GC_Ext_Classical_collapse_aux.", "qsimpl time: 2 use: fold_left_iffp,assoc_prodp_fold_left_equiv,GC_Ext_Classical_collapse_aux.", "qsimpl time: 2 use: fold_left_iffp,assoc_prodp_fold_left_equiv,GC_Ext_Classical_collapse_aux.", "-"], "tactic": "intros H.", "exn": "H is already used.", "type": "used_var", "handled": true}, {"ctx": ["intros xs ys.", "qsimpl time: 2.", "qsimpl time: 2 use: GC_Ext_Classical_collapse_aux.", "qsimpl time: 2 use: GC_Ext_Classical_collapse_aux.", "qsimpl time: 2 use: assoc_prodp_fold_left_equiv,GC_Ext_Classical_collapse_aux.", "qsimpl time: 2 use: fold_left_iffp,assoc_prodp_fold_left_equiv,GC_Ext_Classical_collapse_aux.", "qsimpl time: 2 use: fold_left_iffp,assoc_prodp_fold_left_equiv,GC_Ext_Classical_collapse_aux.", "-"], "tactic": "intros H'.", "exn": "No product even after head-reduction.", "type": "no_product", "handled": true}, {"ctx": ["intros xs ys.", "qsimpl time: 2.", "qsimpl time: 2 use: GC_Ext_Classical_collapse_aux.", "qsimpl time: 2 use: GC_Ext_Classical_collapse_aux.", "qsimpl time: 2 use: assoc_prodp_fold_left_equiv,GC_Ext_Classical_collapse_aux.", "qsimpl time: 2 use: fold_left_iffp,assoc_prodp_fold_left_equiv,GC_Ext_Classical_collapse_aux.", "qsimpl time: 2 use: fold_left_iffp,assoc_prodp_fold_left_equiv,GC_Ext_Classical_collapse_aux.", "-"], "tactic": "apply GC_Ext_Classical_collapse_aux.", "exn": "In environment L : Language minL : MinimumLanguage L pL : PropositionalLanguage L sepconL : SepconLanguage L wandL : WandLanguage L empL : EmpLanguage L iter_sepcon_L : IterSepconLanguage L iter_wand_L : IterWandLanguage L Gamma : Provable L xs, ys : list expr sepcon_emp1 : forall x : expr, |-- x * emp --> x sepcon_emp2 : forall x : expr, |-- x --> x * emp sepcon_comm_impp : forall x y : expr, |-- x * y --> y * x sepcon_assoc1 : forall x y z : expr, |-- x * (y * z) --> x * y * z sepcon_mono : forall x1 x2 y1 y2 : expr, |-- x1 --> x2 -> |-- y1 --> y2 -> |-- x1 * y1 --> x2 * y2 andp_intros : forall x y : expr, |-- x --> y --> x && y andp_elim1 : forall x y : expr, |-- x && y --> x andp_elim2 : forall x y : expr, |-- x && y --> y orp_intros1 : forall x y : expr, |-- x --> x || y orp_intros2 : forall x y : expr, |-- y --> x || y orp_elim : forall x y z : expr, |-- (x --> z) --> (y --> z) --> x || y --> z falsep_elim : forall x : expr, |-- FF --> x modus_ponens : forall x y : expr, |-- x --> y -> |-- x -> |-- y axiom1 : forall x y : expr, |-- x --> y --> x axiom2 : forall x y z : expr, |-- (x --> y --> z) --> (x --> y) --> x --> z iter_wand_def : forall (xs : list expr) (y : expr), iter_wand xs y = fold_right wand y xs iter_sepcon_def : forall xs : list expr, iter_sepcon xs = fold_left sepcon xs emp H : forall x y z : expr, |-- x --> y -* z -> |-- x * y --> z H0 : forall x y z : expr, |-- x * y --> z -> |-- x --> y -* z H1 : forall x : expr, |-- x --> x * x H3 : forall xs1 xs2 : list expr, |-- fold_left (fun _ X0 : expr => X0) xs2 ?e <--> fold_left (fun _ X0 : expr => X0) (xs1 ++ xs2) ?e H5 : forall xs1 xs2 : list expr, |-- fold_left (fun _ X0 : expr => X0) xs2 ?e0 <--> fold_left (fun _ X0 : expr => X0) (xs1 ++ xs2) ?e0 H2 : forall (x1 x2 : expr) (xs1 xs2 : list expr), Forall2 (fun x3 x4 : expr => |-- x3 <--> x4) xs1 xs2 -> |-- x1 <--> x2 -> |-- fold_left (fun _ X0 : expr => X0) xs1 x1 <--> fold_left (fun _ X0 : expr => X0) xs2 x2 H8 : forall x : expr, |-- x --> x * x H7 : forall xs1 xs2 : list expr, |-- (fun _ X0 : expr => X0) (fold_left (fun _ X0 : expr => X0) xs1 ?e1) (fold_left (fun _ X0 : expr => X0) xs2 ?e1) <--> fold_left (fun _ X0 : expr => X0) (xs1 ++ xs2) ?e1 H4 : forall (x1 x2 : expr) (xs1 xs2 : list expr), Forall2 (fun x3 x4 : expr => |-- x3 <--> x4) xs1 xs2 -> |-- x1 <--> x2 -> |-- fold_left (fun _ X0 : expr => X0) xs1 x1 <--> fold_left (fun _ X0 : expr => X0) xs2 x2 Unable to unify \"(let (provable) := ?Gamma in provable) (?M59908 --> ?M59908 * ?M59908)\" with \"(let (provable) := Gamma in provable) (iter_sepcon xs * iter_sepcon ys <--> iter_sepcon (xs ++ ys))\".", "type": "cannot_unify", "handled": true}]}, "chat": [], "original": "intros xs ys. split. - intros H. apply GC_Ext_Classical_collapse_aux in H. rewrite iter_sepcon_def, iter_sepcon_def in H. rewrite assoc_prodp_fold_left_equiv in H. rewrite fold_left_iffp in H. apply H. - intros H. apply GC_Ext_Classical_collapse_aux. rewrite iter_sepcon_def, iter_sepcon_def. rewrite assoc_prodp_fold_left_equiv. rewrite fold_left_iffp. apply H.", "succ": false}]