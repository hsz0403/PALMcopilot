[{"history": {"proof": "qsimpl time: 2 use: provable_iffp_equiv. qsimpl time: 2 use: sepcon_assoc,provable_iffp_equiv. qsimpl time: 2 use: sepcon_assoc,provable_iffp_equiv. qsimpl time: 2 use: sepcon_assoc,provable_iffp_equiv,sepcon_orp_distr_l.", "repairs": ["cannot_unify", "no_subterm", "not_inductive_product", "no_subterm"], "exceptions": [{"ctx": ["intros x y z."], "tactic": "apply provable_iffp_equiv.", "exn": "In environment L : Language minL : MinimumLanguage L pL : PropositionalLanguage L sepconL : SepconLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipAX : IntuitionisticPropositionalLogic L Gamma sepconAX : SepconAxiomatization L Gamma x, y, z : expr Unable to unify \"RelationClasses.Equivalence (fun x0 y0 : expr => |-- x0 <--> y0)\" with \"(let (provable) := Gamma in provable) (x * (y && z) --> x * y && (x * z))\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros x y z.", "qsimpl time: 2 use: provable_iffp_equiv."], "tactic": "rewrite sepcon_assoc.", "exn": "Found no subterm matching \"?e * (?e0 * ?e1)\" in the current goal.", "type": "no_subterm", "handled": true}, {"ctx": ["intros x y z.", "qsimpl time: 2 use: provable_iffp_equiv.", "qsimpl time: 2 use: sepcon_assoc,provable_iffp_equiv."], "tactic": "split.", "exn": "Not an inductive product.", "type": "not_inductive_product", "handled": true}, {"ctx": ["intros x y z.", "qsimpl time: 2 use: provable_iffp_equiv.", "qsimpl time: 2 use: sepcon_assoc,provable_iffp_equiv.", "qsimpl time: 2 use: sepcon_assoc,provable_iffp_equiv."], "tactic": "intros H.", "exn": "H is already used.", "type": "used_var", "handled": true}, {"ctx": ["intros x y z.", "qsimpl time: 2 use: provable_iffp_equiv.", "qsimpl time: 2 use: sepcon_assoc,provable_iffp_equiv.", "qsimpl time: 2 use: sepcon_assoc,provable_iffp_equiv."], "tactic": "intros H'.", "exn": "No product even after head-reduction.", "type": "no_product", "handled": true}, {"ctx": ["intros x y z.", "qsimpl time: 2 use: provable_iffp_equiv.", "qsimpl time: 2 use: sepcon_assoc,provable_iffp_equiv.", "qsimpl time: 2 use: sepcon_assoc,provable_iffp_equiv."], "tactic": "rewrite sepcon_orp_distr_l.", "exn": "Found no subterm matching \"?e * (?e0 || ?e1)\" in the current goal.", "type": "no_subterm", "handled": true}, {"ctx": ["intros x y z.", "qsimpl time: 2 use: provable_iffp_equiv.", "qsimpl time: 2 use: sepcon_assoc,provable_iffp_equiv.", "qsimpl time: 2 use: sepcon_assoc,provable_iffp_equiv.", "qsimpl time: 2 use: sepcon_assoc,provable_iffp_equiv,sepcon_orp_distr_l."], "tactic": "apply orp_sepcon_left.", "exn": "In environment L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Provable L sepconL : SepconLanguage L x, y, z : expr sepcon_comm_impp : forall x y : expr, |-- x * y --> y * x sepcon_assoc1 : forall x y z : expr, |-- x * (y * z) --> x * y * z sepcon_mono : forall x1 x2 y1 y2 : expr, |-- x1 --> x2 -> |-- y1 --> y2 -> |-- x1 * y1 --> x2 * y2 andp_intros : forall x y : expr, |-- x --> y --> x && y andp_elim1 : forall x y : expr, |-- x && y --> x andp_elim2 : forall x y : expr, |-- x && y --> y orp_intros1 : forall x y : expr, |-- x --> x || y orp_intros2 : forall x y : expr, |-- y --> x || y orp_elim : forall x y z : expr, |-- (x --> z) --> (y --> z) --> x || y --> z falsep_elim : forall x : expr, |-- FF --> x modus_ponens : forall x y : expr, |-- x --> y -> |-- x -> |-- y axiom1 : forall x y : expr, |-- x --> y --> x axiom2 : forall x y z : expr, |-- (x --> y --> z) --> (x --> y) --> x --> z Equivalence_Reflexive : RelationClasses.Reflexive (fun x y : expr => |-- x <--> y) Equivalence_Symmetric : RelationClasses.Symmetric (fun x y : expr => |-- x <--> y) Equivalence_Transitive : RelationClasses.Transitive (fun x y : expr => |-- x <--> y) H0 : RelationClasses.Equivalence (fun x y : expr => |-- x <--> y) H : forall x y z : expr, |-- x * (y * z) <--> x * y * z H5 : forall x y z : expr, |-- x * (y || z) <--> x * y || x * z H4 : RelationClasses.Equivalence (fun x y : expr => |-- x <--> y) H3 : forall x y z : expr, |-- x * (y * z) <--> x * y * z Unable to unify \"(let (provable) := ?Gamma in provable) ((?M22648 || ?M22649) * ?M22650 --> ?M22648 * ?M22650 || ?M22649 * ?M22650)\" with \"(let (provable) := Gamma in provable) (x * (y && z) --> x * y && (x * z))\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros x y z.", "qsimpl time: 2 use: provable_iffp_equiv.", "qsimpl time: 2 use: sepcon_assoc,provable_iffp_equiv.", "qsimpl time: 2 use: sepcon_assoc,provable_iffp_equiv.", "qsimpl time: 2 use: sepcon_assoc,provable_iffp_equiv,sepcon_orp_distr_l.", "qsimpl time: 2 use: sepcon_assoc,orp_sepcon_left,provable_iffp_equiv,sepcon_orp_distr_l."], "tactic": ["apply sepcon_elim1 with (y:=z) in H.", ""], "exn": "No such bound variable y (possible names are: x0 and y0).", "type": "no_such_bound", "handled": false}]}, "chat": [], "original": "intros x y z. apply provable_iffp_equiv. - rewrite sepcon_assoc. split. + intros H. rewrite sepcon_orp_distr_l. apply orp_sepcon_left. apply sepcon_elim1 with (y:=z) in H. apply H. + intros H. rewrite sepcon_orp_distr_l in H. apply orp_sepcon_left in H. apply sepcon_elim1 with (y:=z). apply H. - rewrite sepcon_assoc. split. + intros H. apply sepcon_orp_distr_r. apply sepcon_orp_distr_l in H. apply sepcon_assoc1. apply H. + intros H. apply sepcon_orp_distr_r in H. apply sepcon_assoc2. apply sepcon_orp_distr_l. apply H.", "succ": false}]