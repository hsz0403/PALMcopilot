[{"history": {"proof": "qsimpl time: 2 use: UnitalSeparationAlgebra. qsimpl time: 2 use: emp,UnitalSeparationAlgebra.", "repairs": ["not_evaluable", "wrong_type"], "exceptions": [{"ctx": [], "tactic": "unfold UnitalSeparationAlgebra.", "exn": "Cannot coerce UnitalSeparationAlgebra to an evaluable reference.", "type": "not_evaluable", "handled": true}, {"ctx": ["qsimpl time: 2 use: UnitalSeparationAlgebra."], "tactic": "intro H.", "exn": "No product even after head-reduction.", "type": "no_product", "handled": true}, {"ctx": ["qsimpl time: 2 use: UnitalSeparationAlgebra.", "split.", "intros x."], "tactic": "specialize (H emp TT).", "exn": "In environment L : Language minL : MinimumLanguage L pL : PropositionalLanguage L sepconL : SepconLanguage L wandL : WandLanguage L GammaP : Provable L GammaD : Derivable L MD : Model kMD : KripkeModel MD M : Kmodel R : Relation (Kworlds M) J : Join (Kworlds M) SM : Semantics L MD fsepconSM : SepconSemantics L MD M SM fwandSM : WandSemantics L MD M SM cP : context -> Prop rel : bijection (Kworlds M) {x : context | cP x} H_J : forall (m1 m2 m : Kworlds M) (Phi1 Phi2 Phi : {x : context | cP x}), rel m1 Phi1 -> rel m2 Phi2 -> rel m Phi -> (join m1 m2 m -> Included expr (context_sepcon (proj1_sig Phi1) (proj1_sig Phi2)) (proj1_sig Phi)) /\\\\ (Included expr (context_sepcon (proj1_sig Phi1) (proj1_sig Phi2)) (proj1_sig Phi) -> join m1 m2 m) empL : EmpLanguage L AL_DC : at_least derivable_closed cP LIN_SR : forall (Phi : context) (Psi : {x : context | cP x}), Lindenbaum_constructable (context_sepcon_included_r Phi (proj1_sig Psi)) cP H : forall (x : expr) (m : Kworlds M) (Phi : {x : context | cP x}), rel m Phi -> proj1_sig Phi x -> KRIPKE: M, m |= x H0 : forall (x : expr) (m : Kworlds M) (Phi : {x : context | cP x}), rel m Phi -> KRIPKE: M, m |= x -> proj1_sig Phi x H1 : forall (m n : Kworlds M) (Phi Psi : {x : context | cP x}), rel m Phi -> rel n Psi -> Included expr (proj1_sig Phi) (proj1_sig Psi) -> m <= n H2 : forall (m n : Kworlds M) (Phi Psi : {x : context | cP x}), rel m Phi -> rel n Psi -> m <= n -> Included expr (proj1_sig Phi) (proj1_sig Psi) H3 : Included (Kworlds M) (Kdenotation M emp) WeakSemantics.WeakSemantics.emp H4 : Included (Kworlds M) WeakSemantics.WeakSemantics.emp (Kdenotation M emp) sepcon_emp1 : forall x : expr, |-- x * emp --> x sepcon_emp2 : forall x : expr, |-- x --> x * emp sepcon_comm_impp : forall x y : expr, |-- x * y --> y * x sepcon_assoc1 : forall x y z : expr, |-- x * (y * z) --> x * y * z sepcon_mono : forall x1 x2 y1 y2 : expr, |-- x1 --> x2 -> |-- y1 --> y2 -> |-- x1 * y1 --> x2 * y2 andp_intros : forall x y : expr, |-- x --> y --> x && y andp_elim1 : forall x y : expr, |-- x && y --> x andp_elim2 : forall x y : expr, |-- x && y --> y orp_intros1 : forall x y : expr, |-- x --> x || y orp_intros2 : forall x y : expr, |-- y --> x || y orp_elim : forall x y z : expr, |-- (x --> z) --> (y --> z) --> x || y --> z falsep_elim : forall x : expr, |-- FF --> x modus_ponens : forall x y : expr, |-- x --> y -> |-- x -> |-- y axiom1 : forall x y : expr, |-- x --> y --> x axiom2 : forall x y z : expr, |-- (x --> y --> z) --> (x --> y) --> x --> z deduction_andp_intros : forall (Phi : context) (x y : expr), Phi |-- x -> Phi |-- y -> Phi |-- x && y deduction_andp_elim1 : forall (Phi : context) (x y : expr), Phi |-- x && y -> Phi |-- x deduction_andp_elim2 : forall (Phi : context) (x y : expr), Phi |-- x && y -> Phi |-- y deduction_orp_intros1 : forall (Phi : context) (x y : expr), Phi |-- x -> Phi |-- x || y deduction_orp_intros2 : forall (Phi : context) (x y : expr), Phi |-- y -> Phi |-- x || y deduction_orp_elim : forall (Phi : Ensemble expr) (x y z : expr), Phi;; x |-- z -> Phi;; y |-- z -> Phi;; x || y |-- z deduction_falsep_elim : forall (Phi : context) (x : expr), Phi |-- FF -> Phi |-- x deduction_modus_ponens : forall (Phi : context) (x y : expr), Phi |-- x -> Phi |-- x --> y -> Phi |-- y deduction_impp_intros : forall (Phi : Ensemble expr) (x y : expr), Phi;; x |-- y -> Phi |-- x --> y deduction_weaken : forall (Phi Psi : Ensemble expr) (x : expr), Included expr Phi Psi -> Phi |-- x -> Psi |-- x derivable_assum : forall (Phi : Ensemble expr) (x : expr), Ensembles.In expr Phi x -> Phi |-- x deduction_subst : forall (Phi Psi : context) (y : expr), (forall x : expr, Psi x -> Phi |-- x) -> Union expr Phi Psi |-- y -> Phi |-- y H5 : forall x : expr, empty_context |-- x -> |-- x H6 : forall x : expr, |-- x -> empty_context |-- x H7 : forall (Phi : context) (y : expr), (exists xs : list expr, Forall (fun x : expr => Phi x) xs /\\\\ |-- multi_imp xs y) -> Phi |-- y H8 : forall (Phi : context) (y : expr), Phi |-- y -> exists xs : list expr, Forall (fun x : expr => Phi x) xs /\\\\ |-- multi_imp xs y H9 : forall x y z : expr, |-- x --> y -* z -> |-- x * y --> z H10 : forall x y z : expr, |-- x * y --> z -> |-- x --> y -* z x : Kworlds M The term \"TT\" has type \"expr\" while it is expected to have type \"Kworlds M\".", "type": "wrong_type", "handled": true}, {"ctx": ["qsimpl time: 2 use: UnitalSeparationAlgebra.", "split.", "intros x.", "qsimpl time: 2 use: emp,UnitalSeparationAlgebra."], "tactic": ["rewrite H.", ""], "exn": "Cannot find an homogeneous relation to rewrite.", "type": "no_rewrite_homo", "handled": false}]}, "chat": [], "original": "unfold UnitalSeparationAlgebra. intro H. split. - intros x. specialize (H emp TT). rewrite H. intros m. exists m. split. + intros y. rewrite fsepconSM. split; auto. + intros y. rewrite fempSM. auto. - intros m n. intros H1 H2. unfold IncreasingSeparationAlgebra. split. + intros x Hx. exists m. split. * intros y. rewrite fsepconSM. split; auto. * intros y. rewrite fempSM. auto. + intros x Hx. destruct Hx as [m' [Hm' Hx]]. exists m'. unfold residue. auto.", "succ": false}]