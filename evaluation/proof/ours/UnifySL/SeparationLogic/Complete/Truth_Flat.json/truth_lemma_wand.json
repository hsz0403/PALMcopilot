[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": ["intros m Phi Rel.", "split.", "-", "intros H."], "tactic": "apply H.", "exn": "In environment L : Language minL : MinimumLanguage L pL : PropositionalLanguage L sepconL : SepconLanguage L wandL : WandLanguage L GammaP : Provable L GammaD : Derivable L SC : NormalSequentCalculus L GammaP GammaD bSC : BasicSequentCalculus L GammaD minSC : MinimumSequentCalculus L GammaD ipSC : IntuitionisticPropositionalSequentCalculus L GammaD AX : NormalAxiomatization L GammaP GammaD minAX : MinimumAxiomatization L GammaP ipAX : IntuitionisticPropositionalLogic L GammaP sepconAX : SepconAxiomatization L GammaP wandAX : WandAxiomatization L GammaP MD : Model kMD : KripkeModel MD M : Kmodel R : Relation (Kworlds M) J : Join (Kworlds M) SM : Semantics L MD fsepconSM : SepconSemantics L MD M SM fwandSM : WandSemantics L MD M SM cP : context -> Prop rel : bijection (Kworlds M) {x : context | cP x} H_R : forall (m n : Kworlds M) (Phi Psi : {x : context | cP x}), rel m Phi -> rel n Psi -> m <= n <-> Included expr (proj1_sig Phi) (proj1_sig Psi) H_J : forall (m1 m2 m : Kworlds M) (Phi1 Phi2 Phi : {x : context | cP x}), rel m1 Phi1 -> rel m2 Phi2 -> rel m Phi -> join m1 m2 m <-> Included expr (context_sepcon (proj1_sig Phi1) (proj1_sig Phi2)) (proj1_sig Phi) AL_DC : at_least derivable_closed cP LIN_CD : forall x : expr, Lindenbaum_constructable (cannot_derive x) cP LIN_SR : forall (Phi : context) (Psi : {x : context | cP x}), Lindenbaum_constructable (context_sepcon_included_r Phi (proj1_sig Psi)) cP x, y : expr IHx : forall (m : Kworlds M) (Phi : {x : context | cP x}), rel m Phi -> KRIPKE: M, m |= x <-> proj1_sig Phi x IHy : forall (m : Kworlds M) (Phi : {x : context | cP x}), rel m Phi -> KRIPKE: M, m |= y <-> proj1_sig Phi y m : Kworlds M Phi : {x : context | cP x} Rel : rel m Phi H : KRIPKE: M, m |= x -* y Unable to unify \"KRIPKE: M, m |= x -* y\" with \"proj1_sig Phi (x -* y)\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros m Phi Rel.", "split.", "-", "intros H.", "qsimpl time: 2."], "tactic": "apply IHx.", "exn": "The reference IHx was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros m Phi Rel.", "split.", "-", "intros H.", "qsimpl time: 2."], "tactic": "apply Rel.", "exn": "In environment L : Language minL : MinimumLanguage L pL : PropositionalLanguage L sepconL : SepconLanguage L wandL : WandLanguage L GammaP : Provable L GammaD : Derivable L MD : Model kMD : KripkeModel MD M : Kmodel R : Relation (Kworlds M) J : Join (Kworlds M) SM : Semantics L MD fsepconSM : SepconSemantics L MD M SM fwandSM : WandSemantics L MD M SM cP : context -> Prop rel : bijection (Kworlds M) {x : context | cP x} H_J : forall (m1 m2 m : Kworlds M) (Phi1 Phi2 Phi : {x : context | cP x}), rel m1 Phi1 -> rel m2 Phi2 -> rel m Phi -> (join m1 m2 m -> Included expr (context_sepcon (proj1_sig Phi1) (proj1_sig Phi2)) (proj1_sig Phi)) /\\\\ (Included expr (context_sepcon (proj1_sig Phi1) (proj1_sig Phi2)) (proj1_sig Phi) -> join m1 m2 m) AL_DC : at_least derivable_closed cP LIN_CD : forall x : expr, Lindenbaum_constructable (cannot_derive x) cP LIN_SR : forall (Phi : context) (Psi : {x : context | cP x}), Lindenbaum_constructable (context_sepcon_included_r Phi (proj1_sig Psi)) cP x, y : expr m : Kworlds M x0 : context c : cP x0 Rel : rel m (exist cP x0 c) H : KRIPKE: M, m |= x -* y H0 : forall (m : Kworlds M) (Phi : {x : context | cP x}), rel m Phi -> proj1_sig Phi y -> KRIPKE: M, m |= y H1 : forall (m : Kworlds M) (Phi : {x : context | cP x}), rel m Phi -> KRIPKE: M, m |= y -> proj1_sig Phi y H2 : forall (m : Kworlds M) (Phi : {x : context | cP x}), rel m Phi -> proj1_sig Phi x -> KRIPKE: M, m |= x H3 : forall (m : Kworlds M) (Phi : {x : context | cP x}), rel m Phi -> KRIPKE: M, m |= x -> proj1_sig Phi x H4 : forall (m n : Kworlds M) (Phi Psi : {x : context | cP x}), rel m Phi -> rel n Psi -> Included expr (proj1_sig Phi) (proj1_sig Psi) -> m <= n H5 : forall (m n : Kworlds M) (Phi Psi : {x : context | cP x}), rel m Phi -> rel n Psi -> m <= n -> Included expr (proj1_sig Phi) (proj1_sig Psi) sepcon_comm_impp : forall x y : expr, |-- x * y --> y * x sepcon_assoc1 : forall x y z : expr, |-- x * (y * z) --> x * y * z sepcon_mono : forall x1 x2 y1 y2 : expr, |-- x1 --> x2 -> |-- y1 --> y2 -> |-- x1 * y1 --> x2 * y2 andp_intros : forall x y : expr, |-- x --> y --> x && y andp_elim1 : forall x y : expr, |-- x && y --> x andp_elim2 : forall x y : expr, |-- x && y --> y orp_intros1 : forall x y : expr, |-- x --> x || y orp_intros2 : forall x y : expr, |-- y --> x || y orp_elim : forall x y z : expr, |-- (x --> z) --> (y --> z) --> x || y --> z falsep_elim : forall x : expr, |-- FF --> x modus_ponens : forall x y : expr, |-- x --> y -> |-- x -> |-- y axiom1 : forall x y : expr, |-- x --> y --> x axiom2 : forall x y z : expr, |-- (x --> y --> z) --> (x --> y) --> x --> z deduction_andp_intros : forall (Phi : context) (x y : expr), Phi |-- x -> Phi |-- y -> Phi |-- x && y deduction_andp_elim1 : forall (Phi : context) (x y : expr), Phi |-- x && y -> Phi |-- x deduction_andp_elim2 : forall (Phi : context) (x y : expr), Phi |-- x && y -> Phi |-- y deduction_orp_intros1 : forall (Phi : context) (x y : expr), Phi |-- x -> Phi |-- x || y deduction_orp_intros2 : forall (Phi : context) (x y : expr), Phi |-- y -> Phi |-- x || y deduction_orp_elim : forall (Phi : Ensemble expr) (x y z : expr), Phi;; x |-- z -> Phi;; y |-- z -> Phi;; x || y |-- z deduction_falsep_elim : forall (Phi : context) (x : expr), Phi |-- FF -> Phi |-- x deduction_modus_ponens : forall (Phi : context) (x y : expr), Phi |-- x -> Phi |-- x --> y -> Phi |-- y deduction_impp_intros : forall (Phi : Ensemble expr) (x y : expr), Phi;; x |-- y -> Phi |-- x --> y deduction_weaken : forall (Phi Psi : Ensemble expr) (x : expr), Included expr Phi Psi -> Phi |-- x -> Psi |-- x derivable_assum : forall (Phi : Ensemble expr) (x : expr), Ensembles.In expr Phi x -> Phi |-- x deduction_subst : forall (Phi Psi : context) (y : expr), (forall x : expr, Psi x -> Phi |-- x) -> Union expr Phi Psi |-- y -> Phi |-- y H6 : forall x : expr, empty_context |-- x -> |-- x H7 : forall x : expr, |-- x -> empty_context |-- x H8 : forall (Phi : context) (y : expr), (exists xs : list expr, Forall (fun x : expr => Phi x) xs /\\\\ |-- multi_imp xs y) -> Phi |-- y H9 : forall (Phi : context) (y : expr), Phi |-- y -> exists xs : list expr, Forall (fun x : expr => Phi x) xs /\\\\ |-- multi_imp xs y H10 : forall x y z : expr, |-- x --> y -* z -> |-- x * y --> z H11 : forall x y z : expr, |-- x * y --> z -> |-- x --> y -* z Unable to unify \"rel m (exist cP x0 c)\" with \"x0 (x -* y)\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros m Phi Rel.", "split.", "-", "intros H.", "qsimpl time: 2."], "tactic": "-", "exn": "Wrong bullet -: Current bullet - is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["intros m Phi Rel.", "split.", "-", "intros H.", "qsimpl time: 2.", "shelve.", "-", "intros H."], "tactic": "apply H.", "exn": "In environment L : Language minL : MinimumLanguage L pL : PropositionalLanguage L sepconL : SepconLanguage L wandL : WandLanguage L GammaP : Provable L GammaD : Derivable L SC : NormalSequentCalculus L GammaP GammaD bSC : BasicSequentCalculus L GammaD minSC : MinimumSequentCalculus L GammaD ipSC : IntuitionisticPropositionalSequentCalculus L GammaD AX : NormalAxiomatization L GammaP GammaD minAX : MinimumAxiomatization L GammaP ipAX : IntuitionisticPropositionalLogic L GammaP sepconAX : SepconAxiomatization L GammaP wandAX : WandAxiomatization L GammaP MD : Model kMD : KripkeModel MD M : Kmodel R : Relation (Kworlds M) J : Join (Kworlds M) SM : Semantics L MD fsepconSM : SepconSemantics L MD M SM fwandSM : WandSemantics L MD M SM cP : context -> Prop rel : bijection (Kworlds M) {x : context | cP x} H_R : forall (m n : Kworlds M) (Phi Psi : {x : context | cP x}), rel m Phi -> rel n Psi -> m <= n <-> Included expr (proj1_sig Phi) (proj1_sig Psi) H_J : forall (m1 m2 m : Kworlds M) (Phi1 Phi2 Phi : {x : context | cP x}), rel m1 Phi1 -> rel m2 Phi2 -> rel m Phi -> join m1 m2 m <-> Included expr (context_sepcon (proj1_sig Phi1) (proj1_sig Phi2)) (proj1_sig Phi) AL_DC : at_least derivable_closed cP LIN_CD : forall x : expr, Lindenbaum_constructable (cannot_derive x) cP LIN_SR : forall (Phi : context) (Psi : {x : context | cP x}), Lindenbaum_constructable (context_sepcon_included_r Phi (proj1_sig Psi)) cP x, y : expr IHx : forall (m : Kworlds M) (Phi : {x : context | cP x}), rel m Phi -> KRIPKE: M, m |= x <-> proj1_sig Phi x IHy : forall (m : Kworlds M) (Phi : {x : context | cP x}), rel m Phi -> KRIPKE: M, m |= y <-> proj1_sig Phi y m : Kworlds M Phi : {x : context | cP x} Rel : rel m Phi H : proj1_sig Phi (x -* y) Unable to unify \"proj1_sig Phi (x -* y)\" with \"KRIPKE: M, m |= x -* y\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros m Phi Rel.", "split.", "-", "intros H.", "qsimpl time: 2.", "shelve.", "-", "intros H.", "qsimpl time: 2."], "tactic": "apply IHy.", "exn": "The reference IHy was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros m Phi Rel.", "split.", "-", "intros H.", "qsimpl time: 2.", "shelve.", "-", "intros H.", "qsimpl time: 2."], "tactic": "apply Rel.", "exn": "In environment L : Language minL : MinimumLanguage L pL : PropositionalLanguage L sepconL : SepconLanguage L wandL : WandLanguage L GammaP : Provable L GammaD : Derivable L MD : Model kMD : KripkeModel MD M : Kmodel R : Relation (Kworlds M) J : Join (Kworlds M) SM : Semantics L MD fsepconSM : SepconSemantics L MD M SM fwandSM : WandSemantics L MD M SM cP : context -> Prop rel : bijection (Kworlds M) {x : context | cP x} H_J : forall (m1 m2 m : Kworlds M) (Phi1 Phi2 Phi : {x : context | cP x}), rel m1 Phi1 -> rel m2 Phi2 -> rel m Phi -> (join m1 m2 m -> Included expr (context_sepcon (proj1_sig Phi1) (proj1_sig Phi2)) (proj1_sig Phi)) /\\\\ (Included expr (context_sepcon (proj1_sig Phi1) (proj1_sig Phi2)) (proj1_sig Phi) -> join m1 m2 m) AL_DC : at_least derivable_closed cP LIN_CD : forall x : expr, Lindenbaum_constructable (cannot_derive x) cP LIN_SR : forall (Phi : context) (Psi : {x : context | cP x}), Lindenbaum_constructable (context_sepcon_included_r Phi (proj1_sig Psi)) cP x, y : expr m : Kworlds M x0 : context c : cP x0 Rel : rel m (exist cP x0 c) H : x0 (x -* y) H0 : forall (m : Kworlds M) (Phi : {x : context | cP x}), rel m Phi -> proj1_sig Phi y -> KRIPKE: M, m |= y H1 : forall (m : Kworlds M) (Phi : {x : context | cP x}), rel m Phi -> KRIPKE: M, m |= y -> proj1_sig Phi y H2 : forall (m : Kworlds M) (Phi : {x : context | cP x}), rel m Phi -> proj1_sig Phi x -> KRIPKE: M, m |= x H3 : forall (m : Kworlds M) (Phi : {x : context | cP x}), rel m Phi -> KRIPKE: M, m |= x -> proj1_sig Phi x H4 : forall (m n : Kworlds M) (Phi Psi : {x : context | cP x}), rel m Phi -> rel n Psi -> Included expr (proj1_sig Phi) (proj1_sig Psi) -> m <= n H5 : forall (m n : Kworlds M) (Phi Psi : {x : context | cP x}), rel m Phi -> rel n Psi -> m <= n -> Included expr (proj1_sig Phi) (proj1_sig Psi) sepcon_comm_impp : forall x y : expr, |-- x * y --> y * x sepcon_assoc1 : forall x y z : expr, |-- x * (y * z) --> x * y * z sepcon_mono : forall x1 x2 y1 y2 : expr, |-- x1 --> x2 -> |-- y1 --> y2 -> |-- x1 * y1 --> x2 * y2 andp_intros : forall x y : expr, |-- x --> y --> x && y andp_elim1 : forall x y : expr, |-- x && y --> x andp_elim2 : forall x y : expr, |-- x && y --> y orp_intros1 : forall x y : expr, |-- x --> x || y orp_intros2 : forall x y : expr, |-- y --> x || y orp_elim : forall x y z : expr, |-- (x --> z) --> (y --> z) --> x || y --> z falsep_elim : forall x : expr, |-- FF --> x modus_ponens : forall x y : expr, |-- x --> y -> |-- x -> |-- y axiom1 : forall x y : expr, |-- x --> y --> x axiom2 : forall x y z : expr, |-- (x --> y --> z) --> (x --> y) --> x --> z deduction_andp_intros : forall (Phi : context) (x y : expr), Phi |-- x -> Phi |-- y -> Phi |-- x && y deduction_andp_elim1 : forall (Phi : context) (x y : expr), Phi |-- x && y -> Phi |-- x deduction_andp_elim2 : forall (Phi : context) (x y : expr), Phi |-- x && y -> Phi |-- y deduction_orp_intros1 : forall (Phi : context) (x y : expr), Phi |-- x -> Phi |-- x || y deduction_orp_intros2 : forall (Phi : context) (x y : expr), Phi |-- y -> Phi |-- x || y deduction_orp_elim : forall (Phi : Ensemble expr) (x y z : expr), Phi;; x |-- z -> Phi;; y |-- z -> Phi;; x || y |-- z deduction_falsep_elim : forall (Phi : context) (x : expr), Phi |-- FF -> Phi |-- x deduction_modus_ponens : forall (Phi : context) (x y : expr), Phi |-- x -> Phi |-- x --> y -> Phi |-- y deduction_impp_intros : forall (Phi : Ensemble expr) (x y : expr), Phi;; x |-- y -> Phi |-- x --> y deduction_weaken : forall (Phi Psi : Ensemble expr) (x : expr), Included expr Phi Psi -> Phi |-- x -> Psi |-- x derivable_assum : forall (Phi : Ensemble expr) (x : expr), Ensembles.In expr Phi x -> Phi |-- x deduction_subst : forall (Phi Psi : context) (y : expr), (forall x : expr, Psi x -> Phi |-- x) -> Union expr Phi Psi |-- y -> Phi |-- y H6 : forall x : expr, empty_context |-- x -> |-- x H7 : forall x : expr, |-- x -> empty_context |-- x H8 : forall (Phi : context) (y : expr), (exists xs : list expr, Forall (fun x : expr => Phi x) xs /\\\\ |-- multi_imp xs y) -> Phi |-- y H9 : forall (Phi : context) (y : expr), Phi |-- y -> exists xs : list expr, Forall (fun x : expr => Phi x) xs /\\\\ |-- multi_imp xs y H10 : forall x y z : expr, |-- x --> y -* z -> |-- x * y --> z H11 : forall x y z : expr, |-- x * y --> z -> |-- x --> y -* z Unable to unify \"rel m (exist cP x0 c)\" with \"KRIPKE: M, m |= x -* y\".", "type": "cannot_unify", "handled": true}]}, "chat": [], "original": "intros m Phi Rel. split. - intros H. apply H. apply IHx. apply Rel. - intros H. apply H. apply IHy. apply Rel.", "succ": false}]