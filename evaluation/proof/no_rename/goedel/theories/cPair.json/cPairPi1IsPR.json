[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": ["unfold cPairPi1, searchXY.", "simpl."], "tactic": "apply compose2_4IsPR with (f1:=fun x y : nat => x) (f2:=fun x y : nat => y) (f3:=fun x y : nat => sumToN y) (f4:=fun x y : nat => x - y).", "exn": "In environment searchXY := fun a : nat => boundedSearch (fun a0 y : nat => ltBool a0 (sumToN (S y))) a : nat -> nat Unable to unify \"{p : PrimRec 2 | extEqual 2 (evalPrimRec 2 p) (fun x y : nat => ?M1439 x y (sumToN y) (x - y))}\" with \"{p : PrimRec 1 | extEqual 1 (evalPrimRec 1 p) (fun a : nat => a - sumToN (boundedSearch (fun a0 y : nat => ltBool a0 (S (y + sumToN y))) a))}\".", "type": "cannot_unify", "handled": true}, {"ctx": ["unfold cPairPi1, searchXY.", "simpl."], "tactic": "apply compose3_1IsPR with (f:=fun x y z : nat => x - z).", "exn": "In environment searchXY := fun a : nat => boundedSearch (fun a0 y : nat => ltBool a0 (sumToN (S y))) a : nat -> nat Unable to unify \"{p : PrimRec 3 | extEqual 3 (evalPrimRec 3 p) (fun x _ z : nat => ?M1433 (x - z))}\" with \"{p : PrimRec 1 | extEqual 1 (evalPrimRec 1 p) (fun a : nat => a - sumToN (boundedSearch (fun a0 y : nat => ltBool a0 (S (y + sumToN y))) a))}\".", "type": "cannot_unify", "handled": true}, {"ctx": ["unfold cPairPi1, searchXY.", "simpl.", "apply compose1_NIsPR with (g:=cPairPi1)."], "tactic": "apply succIsPR.", "exn": "In environment searchXY := fun a : nat => boundedSearch (fun a0 y : nat => ltBool a0 (sumToN (S y))) a : nat -> nat Unable to unify \"isPR 1 S\" with \"isPR 1 cPairPi1\".", "type": "cannot_unify", "handled": true}, {"ctx": ["unfold cPairPi1, searchXY.", "simpl.", "apply compose1_NIsPR with (g:=cPairPi1)."], "tactic": "apply const1_NIsPR.", "exn": "In environment searchXY := fun a : nat => boundedSearch (fun a0 y : nat => ltBool a0 (sumToN (S y))) a : nat -> nat Unable to unify \"{p : PrimRec 1 | extEqual 1 (evalPrimRec 1 p) (fun _ : nat => ?M1436)}\" with \"{p : PrimRec 1 | extEqual 1 (evalPrimRec 1 p) cPairPi1}\".", "type": "cannot_unify", "handled": true}]}, "chat": [], "original": "unfold cPairPi1, searchXY. simpl. apply compose2_4IsPR with (f1:=fun x y : nat => x) (f2:=fun x y : nat => y) (f3:=fun x y : nat => sumToN y) (f4:=fun x y : nat => x - y). apply compose3_1IsPR with (f:=fun x y z : nat => x - z). apply compose1_NIsPR with (g:=cPairPi1). apply succIsPR. apply const1_NIsPR.", "succ": false}]