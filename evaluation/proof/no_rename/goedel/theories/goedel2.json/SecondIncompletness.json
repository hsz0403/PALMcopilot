[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": ["intros."], "tactic": "apply (Rosser'sIncompleteness T extendsPA repT v0 freeVarRepT expressT1 expressT2).", "exn": "In environment T : System extendsPA : Included Formula PA T repT : Formula v0 : nat freeVarRepT : forall v : nat, In v (freeVarFormula LNT repT) -> v = v0 expressT1 : forall f : Formula, mem (fol.Formula LNT) T f -> SysPrf T (substituteFormula LNT repT v0 (natToTerm (codeFormula f))) expressT2 : forall f : Formula, ~ mem (fol.Formula LNT) T f -> SysPrf T (notH (substituteFormula LNT repT v0 (natToTerm (codeFormula f)))) HBL2 : forall f : Formula, SysPrf T (impH (box f) (box (box f))) HBL3 : forall f g : fol.Formula LNT, SysPrf T (impH (box (impH f g)) (impH (box f) (box g))) H : SysPrf T Con Unable to unify \"exists f : Formula, (forall v : nat, ~ In v (freeVarFormula LNT f)) /\\\\ (SysPrf T f \\\\/ SysPrf T (notH f) -> Inconsistent LNT T)\" with \"Inconsistent LNT T\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros.", "intros HCon."], "tactic": "apply (orSys T (notH Con) Con).", "exn": "In environment T : System extendsPA : Included Formula PA T repT : Formula v0 : nat freeVarRepT : forall v : nat, In v (freeVarFormula LNT repT) -> v = v0 expressT1 : forall f : Formula, mem (fol.Formula LNT) T f -> SysPrf T (substituteFormula LNT repT v0 (natToTerm (codeFormula f))) expressT2 : forall f : Formula, ~ mem (fol.Formula LNT) T f -> SysPrf T (notH (substituteFormula LNT repT v0 (natToTerm (codeFormula f)))) HBL2 : forall f : Formula, SysPrf T (impH (box f) (box (box f))) HBL3 : forall f g : fol.Formula LNT, SysPrf T (impH (box (impH f g)) (impH (box f) (box g))) H : SysPrf T Con HCon : fol.Formula LNT Unable to unify \"exists (Axm : fol.Formulas LNT) (_ : Prf LNT Axm ?M1509), forall g : fol.Formula LNT, In g Axm -> mem (fol.Formula LNT) (Ensembles.Add (fol.Formula LNT) T (orH (notH Con) Con)) g\" with \"exists (Axm : fol.Formulas LNT) (_ : Prf LNT Axm HCon), forall g : fol.Formula LNT, In g Axm -> mem (fol.Formula LNT) T g\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros.", "intros HCon.", "apply (contradiction T Con HCon).", "+"], "tactic": "apply (impTrans T Con (notH (box F)) (notH Con)).", "exn": "In environment T : System extendsPA : Included Formula PA T repT : Formula v0 : nat freeVarRepT : forall v : nat, In v (freeVarFormula LNT repT) -> v = v0 expressT1 : forall f : Formula, mem (fol.Formula LNT) T f -> SysPrf T (substituteFormula LNT repT v0 (natToTerm (codeFormula f))) expressT2 : forall f : Formula, ~ mem (fol.Formula LNT) T f -> SysPrf T (notH (substituteFormula LNT repT v0 (natToTerm (codeFormula f)))) HBL2 : forall f : Formula, SysPrf T (impH (box f) (box (box f))) HBL3 : forall f g : fol.Formula LNT, SysPrf T (impH (box (impH f g)) (impH (box f) (box g))) H : SysPrf T Con HCon : fol.Formula LNT Unable to unify \"SysPrf T (impH Con (notH Con))\" with \"SysPrf T Con\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros.", "intros HCon.", "apply (contradiction T Con HCon).", "+"], "tactic": "apply (impTrans T Con (andH (box F) (impH Con (notH Con))) F).", "exn": "In environment T : System extendsPA : Included Formula PA T repT : Formula v0 : nat freeVarRepT : forall v : nat, In v (freeVarFormula LNT repT) -> v = v0 expressT1 : forall f : Formula, mem (fol.Formula LNT) T f -> SysPrf T (substituteFormula LNT repT v0 (natToTerm (codeFormula f))) expressT2 : forall f : Formula, ~ mem (fol.Formula LNT) T f -> SysPrf T (notH (substituteFormula LNT repT v0 (natToTerm (codeFormula f)))) HBL2 : forall f : Formula, SysPrf T (impH (box f) (box (box f))) HBL3 : forall f g : fol.Formula LNT, SysPrf T (impH (box (impH f g)) (impH (box f) (box g))) H : SysPrf T Con HCon : fol.Formula LNT Unable to unify \"SysPrf T (impH Con F)\" with \"SysPrf T Con\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros.", "intros HCon.", "apply (contradiction T Con HCon).", "+"], "tactic": "apply (HBL1 F).", "exn": "In environment T : System extendsPA : Included Formula PA T repT : Formula v0 : nat freeVarRepT : forall v : nat, In v (freeVarFormula LNT repT) -> v = v0 expressT1 : forall f : Formula, mem (fol.Formula LNT) T f -> SysPrf T (substituteFormula LNT repT v0 (natToTerm (codeFormula f))) expressT2 : forall f : Formula, ~ mem (fol.Formula LNT) T f -> SysPrf T (notH (substituteFormula LNT repT v0 (natToTerm (codeFormula f)))) HBL2 : forall f : Formula, SysPrf T (impH (box f) (box (box f))) HBL3 : forall f g : fol.Formula LNT, SysPrf T (impH (box (impH f g)) (impH (box f) (box g))) H : SysPrf T Con HCon : fol.Formula LNT Unable to unify \"SysPrf T (box F)\" with \"SysPrf T Con\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros.", "intros HCon.", "apply (contradiction T Con HCon).", "+"], "tactic": "apply (Axm T (box F)).", "exn": "In environment T : System extendsPA : Included Formula PA T repT : Formula v0 : nat freeVarRepT : forall v : nat, In v (freeVarFormula LNT repT) -> v = v0 expressT1 : forall f : Formula, mem (fol.Formula LNT) T f -> SysPrf T (substituteFormula LNT repT v0 (natToTerm (codeFormula f))) expressT2 : forall f : Formula, ~ mem (fol.Formula LNT) T f -> SysPrf T (notH (substituteFormula LNT repT v0 (natToTerm (codeFormula f)))) HBL2 : forall f : Formula, SysPrf T (impH (box f) (box (box f))) HBL3 : forall f g : fol.Formula LNT, SysPrf T (impH (box (impH f g)) (impH (box f) (box g))) H : SysPrf T Con HCon : fol.Formula LNT Unable to unify \"SysPrf T (box F)\" with \"SysPrf T Con\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros.", "intros HCon.", "apply (contradiction T Con HCon).", "+"], "tactic": "apply (impE T (box F) (box (box F)) HBL2).", "exn": "In environment T : System extendsPA : Included Formula PA T repT : Formula v0 : nat freeVarRepT : forall v : nat, In v (freeVarFormula LNT repT) -> v = v0 expressT1 : forall f : Formula, mem (fol.Formula LNT) T f -> SysPrf T (substituteFormula LNT repT v0 (natToTerm (codeFormula f))) expressT2 : forall f : Formula, ~ mem (fol.Formula LNT) T f -> SysPrf T (notH (substituteFormula LNT repT v0 (natToTerm (codeFormula f)))) HBL2 : forall f : Formula, SysPrf T (impH (box f) (box (box f))) HBL3 : forall f g : fol.Formula LNT, SysPrf T (impH (box (impH f g)) (impH (box f) (box g))) H : SysPrf T Con HCon : fol.Formula LNT The term \"HBL2\" has type \"forall f : Formula, SysPrf T (impH (box f) (box (box f)))\" while it is expected to have type \"SysPrf T (impH (box (box F)) (box F))\".", "type": "wrong_type", "handled": true}, {"ctx": ["intros.", "intros HCon.", "apply (contradiction T Con HCon).", "+"], "tactic": "apply (HBL2 F (box F)).", "exn": "Illegal application (Non-functional construction): The expression \"HBL2 F\" of type \"SysPrf T (impH (box F) (box (box F)))\" cannot be applied to the term \"box F\" : \"fol.Formula LNT\"", "type": "exp_cannot_apply", "handled": true}, {"ctx": ["intros.", "intros HCon.", "apply (contradiction T Con HCon).", "+"], "tactic": "apply (impI T (notH (andH (box F) (impH Con (notH Con)))) F).", "exn": "In environment T : System extendsPA : Included Formula PA T repT : Formula v0 : nat freeVarRepT : forall v : nat, In v (freeVarFormula LNT repT) -> v = v0 expressT1 : forall f : Formula, mem (fol.Formula LNT) T f -> SysPrf T (substituteFormula LNT repT v0 (natToTerm (codeFormula f))) expressT2 : forall f : Formula, ~ mem (fol.Formula LNT) T f -> SysPrf T (notH (substituteFormula LNT repT v0 (natToTerm (codeFormula f)))) HBL2 : forall f : Formula, SysPrf T (impH (box f) (box (box f))) HBL3 : forall f g : fol.Formula LNT, SysPrf T (impH (box (impH f g)) (impH (box f) (box g))) H : SysPrf T Con HCon : fol.Formula LNT Unable to unify \"SysPrf T (impH F (notH (andH (box F) (impH Con (notH Con)))))\" with \"SysPrf T Con\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros.", "intros HCon.", "apply (contradiction T Con HCon).", "+"], "tactic": "apply (orSys T (notH (box F)) (box F)).", "exn": "In environment T : System extendsPA : Included Formula PA T repT : Formula v0 : nat freeVarRepT : forall v : nat, In v (freeVarFormula LNT repT) -> v = v0 expressT1 : forall f : Formula, mem (fol.Formula LNT) T f -> SysPrf T (substituteFormula LNT repT v0 (natToTerm (codeFormula f))) expressT2 : forall f : Formula, ~ mem (fol.Formula LNT) T f -> SysPrf T (notH (substituteFormula LNT repT v0 (natToTerm (codeFormula f)))) HBL2 : forall f : Formula, SysPrf T (impH (box f) (box (box f))) HBL3 : forall f g : fol.Formula LNT, SysPrf T (impH (box (impH f g)) (impH (box f) (box g))) H : SysPrf T Con HCon : fol.Formula LNT Unable to unify \"exists (Axm : fol.Formulas LNT) (_ : Prf LNT Axm ?M1511), forall g : fol.Formula LNT, In g Axm -> mem (fol.Formula LNT) (Ensembles.Add (fol.Formula LNT) T (orH (notH (box F)) (box F))) g\" with \"exists (Axm : fol.Formulas LNT) (_ : Prf LNT Axm Con), forall g : fol.Formula LNT, In g Axm -> mem (fol.Formula LNT) T g\".", "type": "cannot_unify", "handled": true}]}, "chat": [], "original": "intros. apply (Rosser'sIncompleteness T extendsPA repT v0 freeVarRepT expressT1 expressT2). - intros HCon. apply (orSys T (notH Con) Con). + apply (contradiction T Con HCon). + apply (impTrans T Con (notH (box F)) (notH Con)). * apply (impTrans T Con (andH (box F) (impH Con (notH Con))) F). ++ apply (HBL1 F). apply (Axm T (box F)). apply (impE T (box F) (box (box F)) HBL2). apply (HBL2 F (box F)). ++ apply (impI T (notH (andH (box F) (impH Con (notH Con)))) F). apply (orSys T (notH (box F)) (box F)). --", "succ": false}]