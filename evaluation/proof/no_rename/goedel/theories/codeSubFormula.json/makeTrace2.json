[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": ["intros f v s.", "unfold cTriplePi2, makeTrace, codeFormula, substituteFormula.", "simpl."], "tactic": "reflexivity.", "exn": "In environment L : Language codeF : Functions L -> nat codeR : Relations L -> nat var := fol.var L : nat -> fol.Term L apply := fol.apply L : forall f : Functions L, fol.Terms L (arity L (inr f)) -> fol.Term L codeFormula := code.codeFormula L codeF codeR : fol.Formula L -> nat codeTerm := code.codeTerm L codeF : fol.Term L -> nat f : fol.Formula L v : nat s : fol.Term L Unable to unify \"code.codeFormula L codeF codeR (proj1_sig (substituteFormulaHelp L f v s))\" with \"cPairPi1 (cPairPi2 (Formula_depth_rec2 L (fun _ : fol.Formula L => nat * fol.Term L -> nat) (fun (t t0 : fol.Term L) (p : nat * fol.Term L) => cTriple (cTriple (fst p) (codeTerm (snd p)) (cPair 0 (cPair (code.codeTerm L codeF t) (code.codeTerm L codeF t0)))) (cPair 0 (cPair (code.codeTerm L codeF (substituteTerm L t (fst p) (snd p))) (code.codeTerm L codeF (substituteTerm L t0 (fst p) (snd p))))) 0) (fun (r : Relations L) (t : fol.Terms L (arity L (inl r))) (p : nat * fol.Term L) => cTriple (cTriple (fst p) (codeTerm (snd p)) (cPair (S (S (S (S (codeR r))))) (codeTerms L codeF (arity L (inl r)) t))) (cPair (S (S (S (S (codeR r))))) (codeTerms L codeF (arity L (inl r)) (substituteTerms L (arity L (inl r)) t (fst p) (snd p)))) 0) makeTraceImp makeTraceNot makeTraceForall f (v, s)))\".", "type": "cannot_unify", "handled": true}]}, "chat": [], "original": "intros f v s. unfold cTriplePi2, makeTrace, codeFormula, substituteFormula. simpl. reflexivity.", "succ": false}]