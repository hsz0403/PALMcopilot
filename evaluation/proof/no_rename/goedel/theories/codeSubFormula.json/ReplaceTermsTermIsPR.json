[{"history": {"proof": "", "repairs": [], "exceptions": []}, "chat": [], "original": "unfold ReplaceTermsTerm, isPR. intros L codeF codeR var apply codeTerm H. split. - intros n. induction n; intros; destruct a as [f ts]. + simpl. apply H. + simpl. destruct ts as [t ts']. rewrite (Term_Terms_rec L _ (fun _ => nat) (fun _ _ => nat) codeTerm). rewrite (Terms_Term_rec_full L _ (fun _ => nat) (fun _ _ => nat)). rewrite (Terms_Term_rec_full L _ (fun _ => nat) (fun _ _ => nat)). rewrite (Term_Terms_rec L _ (fun _ => nat) (fun _ _ => nat) codeTerm). auto. - intros n ts. induction ts; simpl. + apply H. + rewrite (Term_Terms_rec L _ (fun _ => nat) (fun _ _ => nat) codeTerm). rewrite (Terms_Term_rec_full L _ (fun _ => nat) (fun _ _ => nat)). rewrite (Terms_Term_rec_full L _ (fun _ => nat) (fun _ _ => nat)). rewrite (Term_Terms_rec L _ (fun _ => nat) (fun _ _ => nat) codeTerm). auto.", "succ": false}]