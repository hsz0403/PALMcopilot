[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": ["intros m.", "unfold mpl_compat_7_def.", "intros c pl l H.", "unfold union_mpl_0, union_pl."], "tactic": "rewrite MapMerge_semantics.", "exn": "Found no subterm matching \"MapGet ?M1851 (MapMerge ?M1851 ?M1852 ?M1853) ?M1854\" in the current goal.", "type": "no_subterm", "handled": true}, {"ctx": ["intros m.", "unfold mpl_compat_7_def.", "intros c pl l H.", "unfold union_mpl_0, union_pl."], "tactic": "destruct (MapGet prec_list s c) eqn: Eq.", "exn": "The reference s was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros m.", "unfold mpl_compat_7_def.", "intros c pl l H.", "unfold union_mpl_0, union_pl."], "tactic": "apply mpl_compat_7_1.", "exn": "In environment m : state c : ad pl, l : prec_list H : MapGet prec_list m c = Some l Unable to unify \"forall (c : ad) (pl l : prec_list), MapGet prec_list (M1 prec_list ?M1851 ?M1852) c = Some l -> MapGet prec_list (union_mpl_0 c pl (M1 prec_list ?M1851 ?M1852)) c = Some (union_pl pl l)\" with \"MapGet prec_list ((fix union_mpl_0 (c : ad) (pl : prec_list) (s : state) {struct s} : state := match s with | @M0 _ => M1 prec_list c pl | @M1 _ c0 pl0 => if (c =? c0)%N then M1 prec_list c ((fix union_pl (pl1 pl2 : prec_list) {struct pl1} : prec_list := match pl1 with | prec_cons a pl00 pl01 => prec_cons a pl00 (union_pl pl01 pl2) | prec_empty => pl2 end) pl pl0) else MapMerge prec_list (M1 prec_list c pl) (M1 prec_list c0 pl0) | @M2 _ s0 s1 => match c with | 0%N => M2 prec_list (union_mpl_0 0%N pl s0) s1 | N.pos (p'~1)%positive => M2 prec_list s0 (union_mpl_0 (N.pos p') pl s1) | N.pos (p'~0)%positive => M2 prec_list (union_mpl_0 (N.pos p') pl s0) s1 | 1%N => M2 prec_list s0 (union_mpl_0 0%N pl s1) end end) c pl m) c = Some ((fix union_pl (pl0 pl1 : prec_list) {struct pl0} : prec_list := match pl0 with | prec_cons a pl00 pl01 => prec_cons a pl00 (union_pl pl01 pl1) | prec_empty => pl1 end) pl l)\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros m.", "unfold mpl_compat_7_def.", "intros c pl l H.", "unfold union_mpl_0, union_pl."], "tactic": "reflexivity.", "exn": "In environment m : state c : ad pl, l : prec_list H : MapGet prec_list m c = Some l Unable to unify \"Some ((fix union_pl (pl0 pl1 : prec_list) {struct pl0} : prec_list := match pl0 with | prec_cons a pl00 pl01 => prec_cons a pl00 (union_pl pl01 pl1) | prec_empty => pl1 end) pl l)\" with \"MapGet prec_list ((fix union_mpl_0 (c : ad) (pl : prec_list) (s : state) {struct s} : state := match s with | @M0 _ => M1 prec_list c pl | @M1 _ c0 pl0 => if (c =? c0)%N then M1 prec_list c ((fix union_pl (pl1 pl2 : prec_list) {struct pl1} : prec_list := match pl1 with | prec_cons a pl00 pl01 => prec_cons a pl00 (union_pl pl01 pl2) | prec_empty => pl2 end) pl pl0) else MapMerge prec_list (M1 prec_list c pl) (M1 prec_list c0 pl0) | @M2 _ s0 s1 => match c with | 0%N => M2 prec_list (union_mpl_0 0%N pl s0) s1 | N.pos (p'~1)%positive => M2 prec_list s0 (union_mpl_0 (N.pos p') pl s1) | N.pos (p'~0)%positive => M2 prec_list (union_mpl_0 (N.pos p') pl s0) s1 | 1%N => M2 prec_list s0 (union_mpl_0 0%N pl s1) end end) c pl m) c\".", "type": "cannot_unify", "handled": true}]}, "chat": [], "original": "intros m. unfold mpl_compat_7_def. intros c pl l H. unfold union_mpl_0, union_pl. rewrite MapMerge_semantics. destruct (MapGet prec_list s c) eqn: Eq. - apply mpl_compat_7_1. - reflexivity.", "succ": false}]