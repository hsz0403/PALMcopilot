[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": ["intros.", "unfold is_series.", "unfold scal."], "tactic": "rewrite sum_Sn.", "exn": "The LHS of sum_Sn (sum_n _ (S _)) does not match any subterm of the goal", "type": "no_match_term", "handled": true}, {"ctx": ["intros.", "unfold is_series.", "unfold scal."], "tactic": "replace (sum_n (fun n0 => scal c (a n0)) n) with (scal c (sum_n a n)).", "exn": "The reference n was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros.", "unfold is_series.", "unfold scal."], "tactic": "apply filterlim_scal_r.", "exn": "In environment K : AbsRing V : NormedModule K c : K a : nat -> V l : V H : is_series a l P : ?V -> Prop l0 : locally (scal ?M2363 ?M2364) P Unable to unify \"exists eps : posreal, forall y : ?V, ball ?M2364 eps y -> (fun x : ?V => P ((fun z : ?V => scal ?M2363 z) x)) y\" with \"exists N : nat, forall n : nat, (N <= n)%nat -> (fun x : nat => P (sum_n (fun n0 : nat => ModuleSpace.scal K (AbelianGroup.Pack V (ModuleSpace.class K V) V) (ModuleSpace.class K V) c (a n0)) x)) n\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros.", "unfold is_series.", "unfold scal."], "tactic": "induction n.", "exn": "The reference n was not found in the current environment.", "type": "ref_not_found", "handled": true}]}, "chat": [], "original": "intros. unfold is_series. intros. unfold scal. rewrite sum_Sn. replace (sum_n (fun n0 => scal c (a n0)) n) with (scal c (sum_n a n)). - apply filterlim_scal_r. - induction n. + simpl. reflexivity. + simpl. rewrite IHn. reflexivity.", "succ": false}]