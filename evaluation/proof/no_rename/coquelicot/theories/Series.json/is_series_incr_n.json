[{"history": {"proof": "", "repairs": [], "exceptions": []}, "chat": [], "original": "intros K V a n l Hn Hs. intros Hpos Has_series. unfold is_series in Has_series. unfold is_series. intros eps Heps. pose (N := (existT _ n Hpos)). assert (H1: eventually (fun n0 : nat => n0 >= N) (locally l)). { apply Hs. } destruct H1 as [N' HN']. exists N'. intros n0 Hn0. assert (Hne: (exists N0 : nat, forall n1 : nat, (n1 >= N0)%nat -> norm (sum_n a (Init.Nat.pred n1)) < eps)). { apply HN'. } destruct Hne as [N0 HN0]. pose (m := S (n0 + N0)%nat). exists m. intros p Hm. assert (Hm': (m > p)%nat). { lia. } rewrite sum_n_plus. rewrite sum_n_m_plus.", "succ": false}]