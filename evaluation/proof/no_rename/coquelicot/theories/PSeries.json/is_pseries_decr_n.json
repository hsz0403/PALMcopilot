[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": ["intros H1 H2 H3 H4 H5.", "unfold PS_decr_n.", "unfold is_pseries in H3."], "tactic": "apply is_series_minus.", "exn": "In environment K : AbsRing V : NormedModule K a : nat -> V n : nat x, y : K l : V H1 : mult y x = one H2 : (0 < n)%nat H3 : is_series (fun k : nat => scal (pow_n x k) (a k)) l H4 : V -> Prop H5 : locally (scal (pow_n y n) (plus l (opp (sum_n (fun k : nat => scal (pow_n x k) (a k)) (n - 1))))) H4 Unable to unify \"forall P : ?V -> Prop, locally (plus ?M2365 (opp ?M2366)) P -> filtermap (sum_n (fun n0 : nat => plus (?M2363 n0) (opp (?M2364 n0)))) eventually P\" with \"exists N : nat, forall n0 : nat, (N <= n0)%nat -> (fun x0 : nat => H4 (sum_n (fun k : nat => scal (pow_n x k) (a (n + k)%nat)) x0)) n0\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros H1 H2 H3 H4 H5.", "unfold PS_decr_n.", "unfold is_pseries in H3."], "tactic": "apply is_pseries_ext.", "exn": "In environment K : AbsRing V : NormedModule K a : nat -> V n : nat x, y : K l : V H1 : mult y x = one H2 : (0 < n)%nat H3 : is_series (fun k : nat => scal (pow_n x k) (a k)) l H4 : V -> Prop H5 : locally (scal (pow_n y n) (plus l (opp (sum_n (fun k : nat => scal (pow_n x k) (a k)) (n - 1))))) H4 Unable to unify \"forall P : ?V -> Prop, locally ?M2366 P -> filtermap (sum_n (fun k : nat => scal (pow_n ?M2365 k) (?M2364 k))) eventually P\" with \"exists N : nat, forall n0 : nat, (N <= n0)%nat -> (fun x0 : nat => H4 (sum_n (fun k : nat => scal (pow_n x k) (a (n + k)%nat)) x0)) n0\".", "type": "cannot_unify", "handled": true}]}, "chat": [], "original": "intros H1 H2 H3 H4 H5. unfold PS_decr_n. unfold is_pseries in H3. apply is_series_minus. - apply is_pseries_ext. intros k. unfold PS_decr_n. unfold PS_incr_n. unfold PS_incr_1. simpl. auto. - apply H5. lia. - unfold PS_decr_n in H3. apply is_series_minus in H3. apply is_series_plus with (la := scal (pow_n y n) (plus l (opp (sum_n (fun k : nat => scal (pow_n x k) (a k)) (n - 1))))) in H3. auto.", "succ": false}]