[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": ["unfold Riemann_sum.", "unfold scal.", "unfold ModuleSpace.scal."], "tactic": "rewrite scal_distr_r.", "exn": "The LHS of scal_distr_r (scal (plus _ _) _) does not match any subterm of the goal", "type": "no_match_term", "handled": true}, {"ctx": ["unfold Riemann_sum.", "unfold scal.", "unfold ModuleSpace.scal."], "tactic": "rewrite sum_fold_plus.", "exn": "The reference sum_fold_plus was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["unfold Riemann_sum.", "unfold scal.", "unfold ModuleSpace.scal."], "tactic": "reflexivity.", "exn": "In environment V : ModuleSpace R_Ring a : R f : R -> V ptd : SF_seq Unable to unify \"(let (scal, _, _, _, _) := ModuleSpace.mixin R_Ring V (ModuleSpace.class R_Ring V) in scal) a (foldr plus zero (pairmap (fun x y : R * R => (let (scal, _, _, _, _) := ModuleSpace.mixin R_Ring V (ModuleSpace.class R_Ring V) in scal) (fst y - fst x) (f (snd y))) (SF_h ptd, zero) (SF_t ptd)))\" with \"foldr plus zero (pairmap (fun x y : R * R => (let (scal, _, _, _, _) := ModuleSpace.mixin R_Ring V (ModuleSpace.class R_Ring V) in scal) (fst y - fst x) ((let (scal, _, _, _, _) := ModuleSpace.mixin R_Ring V (ModuleSpace.class R_Ring V) in scal) a (f (snd y)))) (SF_h ptd, zero) (SF_t ptd))\".", "type": "cannot_unify", "handled": true}]}, "chat": [], "original": "unfold Riemann_sum. unfold scal. unfold ModuleSpace.scal. rewrite scal_distr_r. rewrite sum_fold_plus. reflexivity.", "succ": false}]