[{"history": {"proof": "", "repairs": [], "exceptions": []}, "chat": [], "original": "intros s x x0 Hsorted Hbounds. assert (Hsize: ((size s) > 0)%nat) by omega. destruct (classical (exists i : nat, nth x0 s i <= x < nth x0 s (S i))) as [H1 | H1]. - apply NNPP in H1. left. apply classical. exists 0. split. + rewrite nth0. simpl. split. * apply (sorted_head s 0 Hsorted); omega. * apply (sorted_incr s 0 1 Hsorted); omega. + omega. - right. apply NNPP. intros contra. apply H1. clear H1. assert (Hlast: last x0 s = nth x0 s (size s - 1)) by (rewrite nth_last; reflexivity). assert (Hnth: forall i : nat, nth x0 s i <= x -> x < nth x0 s (S i)). + intro i. destruct (classic (nth x0 s i <= x)) as [Hle | Hnle]. * intro H. apply H. * intro H. apply False_ind. apply Hnle. apply le_S_n. apply (sorted_incr s i (size s - 1) Hsorted); omega. + apply (Hnth (size s - 2)). apply and_comm. apply conj. * apply (sorted_last s (size s - 2) Hsorted); omega. * rewrite Hlast. omega.", "succ": false}]