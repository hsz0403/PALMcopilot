[{"history": {"proof": "intros f a b H. unfold ex_RInt in H. destruct H as [If H]. apply is_RInt_comp_opp in H. hauto lq: on depth: 3.", "repairs": ["", "", "", "ref_not_found", "hammer"], "exceptions": [{"ctx": ["intros f a b H.", "unfold ex_RInt in H.", "destruct H as [If H]."], "tactic": "apply ex_RInt_ext with (g:= fun y => opp (f (- y))) in H.", "exn": "Unable to apply lemma of type \"forall (f g : R -> V) (a b : R), (forall x : R, Rmin a b < x < Rmax a b -> f x = g x) -> ex_RInt f a b -> ex_RInt g a b\" on hypothesis of type \"is_RInt f (- a) (- b) If\".", "type": "cannot_apply_in", "handled": true}, {"ctx": ["intros f a b H.", "unfold ex_RInt in H.", "destruct H as [If H]."], "tactic": "apply ex_RInt_comp_opp in H.", "exn": "The reference ex_RInt_comp_opp was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros f a b H.", "unfold ex_RInt in H.", "destruct H as [If H].", "apply is_RInt_comp_opp in H."], "tactic": "apply H.", "exn": "In environment V : NormedModule R_AbsRing f : R -> V a, b : R If : V H : is_RInt (fun y : R => opp (f (- y))) a b If Unable to unify \"is_RInt (fun y : R => opp (f (- y))) a b If\" with \"ex_RInt (fun y : R => opp (f (- y))) a b\".", "type": "cannot_unify", "handled": true}]}, "chat": [], "original": "intros f a b H. unfold ex_RInt in H. destruct H as [If H]. apply ex_RInt_ext with (g:= fun y => opp (f (- y))) in H. - apply ex_RInt_comp_opp in H. apply H. - intros x Hx. unfold opp. rewrite Ropp_involutive. reflexivity.", "succ": true}]