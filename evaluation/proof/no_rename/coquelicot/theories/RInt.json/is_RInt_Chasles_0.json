[{"history": {"proof": "", "repairs": [], "exceptions": []}, "chat": [], "original": "intros. intros. intros. intros. intros. intros. intros. intros. intros. intros. intros. intros. apply is_RInt_ext with (f := f) (a := a) (b := c). intros. unfold plus. assert (Rmin a c = a) as H1. lra. assert (Rmax a c = c) as H2. lra. rewrite H1 in H3. rewrite H2 in H3. rewrite H in H3. rewrite H1. rewrite H2. ring_simplify. apply filterlim_ext with (f0 := fun ptd : SF_seq => scal (sign (c - a)) (Riemann_sum f ptd)). intros. unfold sign. destruct (Rle_dec 0 (c - a)). - unfold Riemann_sum. unfold sign in H5. destruct (Rle_dec 0 (c - a)). apply Rle_zero_sign. lra. - unfold Riemann_sum. unfold sign in H5. destruct (Rle_dec 0 (c - a)). apply Rle_zero_sign. lra. - apply filterlim_scal_l. apply filterlim_comp with (g := fun ptd : SF_seq => Riemann_sum f ptd). apply Riemann_fine. auto. auto. apply filterlim_comp with (g := Riemann_fine a c). apply ball_norm_triangle. apply Riemann_fine. auto. apply locally_ball_norm. apply is_RInt. apply is_RInt_ext with (f := f) (a := a) (b := b). intros. apply Rlt_div_r. lra. apply H6. auto. apply H0. apply filterlim_ext with (f0 := fun ptd : SF_seq => scal (sign (b - a)) (Riemann_sum f ptd)). intros. unfold sign. destruct (Rle_dec 0 (b - a)). - unfold Riemann_sum. unfold sign in H5. destruct (Rle_dec 0 (b - a)). apply Rle_zero_sign. lra. - unfold Riemann_sum. unfold sign in H5. destruct (Rle_dec 0 (b - a)). apply Rle_zero_sign. lra. - apply filterlim_scal_l. apply filterlim_comp with (g := fun ptd : SF_seq => Riemann_sum f ptd). apply Riemann_fine. auto. auto. apply filterlim_comp with (g := Riemann_fine a b). apply ball_norm_triangle. apply Riemann_fine. auto. apply locally_ball_norm. apply is_RInt. apply is_RInt_ext with (f := f) (a := b) (b := c). intros. apply Rlt_div_r. lra. apply H7. auto. apply H1. apply filterlim_ext with (f0 := fun ptd : SF_seq => scal (sign (c - b)) (Riemann_sum f ptd)). intros. unfold sign. destruct (Rle_dec 0 (c - b)). - unfold Riemann_sum. unfold sign in H8. destruct (Rle_dec 0 (c - b)). apply Rle_zero_sign. lra. - unfold Riemann_sum. unfold sign in H8. destruct (Rle_dec 0 (c - b)). apply Rle_zero_sign. lra. - apply filterlim_scal_l. apply filterlim_comp with (g := fun ptd : SF_seq => Riemann_sum f ptd). apply Riemann_fine. auto. auto. apply filterlim_comp with (g := Riemann_fine b c). apply ball_norm_triangle. apply Riemann_fine. auto. apply locally_ball_norm.", "succ": false}]