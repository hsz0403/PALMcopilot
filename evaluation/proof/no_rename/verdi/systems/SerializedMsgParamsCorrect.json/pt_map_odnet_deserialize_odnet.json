[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": ["intros net.", "unfold deserialize_odnet, pt_map_odnet."], "tactic": "rewrite serialize_odnet_tot_map_odnet.", "exn": "The LHS of serialize_odnet_tot_map_odnet (serialize_odnet _) does not match any subterm of the goal", "type": "no_match_term", "handled": true}, {"ctx": ["intros net.", "unfold deserialize_odnet, pt_map_odnet."], "tactic": "reflexivity.", "exn": "In environment orig_base_params : BaseParams orig_multi_params : MultiParams orig_base_params orig_failure_params : FailureParams orig_multi_params orig_name_overlay_params : NameOverlayParams orig_multi_params orig_fail_msg_params : FailMsgParams orig_multi_params orig_new_msg_params : NewMsgParams orig_multi_params orig_msg_serializer : Serializer msg net : ordered_dynamic_network Unable to unify \"{| odnwNodes := odnwNodes net; odnwPackets := fun src dst : name => filterMap (fun m : IOStreamWriter.wire => match deserialize_top deserialize m with | Some data => Some data | None => None end) (odnwPackets net src dst); odnwState := odnwState net |}\" with \"{| odnwNodes := map tot_map_name (odnwNodes net); odnwPackets := fun src dst : name => filterMap pt_map_msg (odnwPackets net (tot_map_name_inv src) (tot_map_name_inv dst)); odnwState := fun n : name => match odnwState net (tot_map_name_inv n) with | Some d => Some (pt_map_data d) | None => None end |}\".", "type": "cannot_unify", "handled": true}]}, "chat": [], "original": "intros net. unfold deserialize_odnet, pt_map_odnet. rewrite serialize_odnet_tot_map_odnet. reflexivity.", "succ": false, "time": 7.01444924700013}]