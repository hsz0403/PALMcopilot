[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": ["intros out to.", "unfold map2fst.", "unfold map."], "tactic": "rewrite map_map.", "exn": "The LHS of map_map (map _ (map _ _)) does not match any subterm of the goal", "type": "no_match_term", "handled": true}, {"ctx": ["intros out to.", "unfold map2fst.", "unfold map."], "tactic": "reflexivity.", "exn": "In environment base_fst, base_snd : BaseParams multi_fst : MultiParams base_fst multi_snd : MultiParams base_snd base_map : BaseParamsTotalMap base_fst base_snd name_map : MultiParamsNameTotalMap multi_fst multi_snd msg_map : MultiParamsMsgTotalMap multi_fst multi_snd name_map_bijective : MultiParamsNameTotalMapBijective name_map multi_map_congr : MultiParamsTotalMapCongruency base_map name_map msg_map tot_map_output_injective : forall o o' : output, tot_map_output o = tot_map_output o' -> o = o' fail_fst : FailureParams multi_fst fail_snd : FailureParams multi_snd fail_map_congr : FailureParamsTotalMapCongruency fail_fst fail_snd base_map overlay_fst : NameOverlayParams multi_fst overlay_snd : NameOverlayParams multi_snd overlay_map_congr : NameOverlayParamsTotalMapCongruency overlay_fst overlay_snd name_map fail_msg_fst : FailMsgParams multi_fst fail_msg_snd : FailMsgParams multi_snd fail_msg_map_congr : FailMsgParamsTotalMapCongruency fail_msg_fst fail_msg_snd msg_map out : list output to : name Unable to unify \"(fix map (l : list (input + output)) : list (name * (input + output)) := match l with | [] => [] | a :: t => (tot_map_name to, a) :: map t end) ((fix map (l : list output) : list (input + output) := match l with | [] => [] | a :: t => inr a :: map t end) ((fix map (l : list output) : list output := match l with | [] => [] | a :: t => tot_map_output a :: map t end) out))\" with \"(fix map (l : list (name * (input + output))) : list (name * (input + output)) := match l with | [] => [] | a :: t => tot_map_trace a :: map t end) ((fix map (l : list (input + output)) : list (name * (input + output)) := match l with | [] => [] | a :: t => (to, a) :: map t end) ((fix map (l : list output) : list (input + output) := match l with | [] => [] | a :: t => inr a :: map t end) out))\".", "type": "cannot_unify", "handled": true}]}, "chat": [], "original": "intros out to. unfold map2fst. unfold map. rewrite map_map. reflexivity.", "succ": false, "time": 10.265280592000067}]