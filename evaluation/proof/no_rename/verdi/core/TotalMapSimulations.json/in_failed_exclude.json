[{"history": {"proof": "", "repairs": [], "exceptions": []}, "chat": [], "original": "simpl. intros. intros. intros. intros. intros. intros. intros. intros. intros. intros. intros. intros. intros. intros. intros. intros. intros. intros. intros. intros. intros. intros. intros. intros. intros. intros. intros. intros. intros. intros. intros. intros. intros. intros. intros. intros. intros. intros. intros. intros. intros. intros. intros. intros. intros. intros. intro. intros. intros. intros. intros. intros. intros. intros. intros. split. - intros. split. + intros. destruct (name_eq_dec (tot_map_name_inv n) h); congruence. + intros. apply in_map_pair_adjacent_to in H0. destruct (name_eq_dec (tot_map_name_inv n) h). * congruence. * auto. - intros. apply in_map_pair_adjacent_to in H. constructor. + intro. apply H. destruct (name_eq_dec (tot_map_name_inv n) h). * congruence. * auto. + destruct (name_eq_dec (tot_map_name_inv n) h). * congruence. * auto.", "succ": false, "time": 6.062314650000019}]