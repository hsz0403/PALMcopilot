[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": ["intros net net' failed failed' tr H_step_fail.", "inversion H_step_fail; subst.", "-", "simpl."], "tactic": "apply StepOrderedFailure_deliver with (m:=m) (ms:=ms) (d:=d) (l:=l); auto.", "exn": "The reference m was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros net net' failed failed' tr H_step_fail.", "inversion H_step_fail; subst.", "-", "simpl."], "tactic": "rewrite map_map.", "exn": "The LHS of map_map (map _ (map _ _)) does not match any subterm of the goal", "type": "no_match_term", "handled": true}, {"ctx": ["intros net net' failed failed' tr H_step_fail.", "inversion H_step_fail; subst.", "-", "simpl."], "tactic": "apply map_ext_in.", "exn": "In environment base_fst, base_snd : BaseParams multi_fst : MultiParams base_fst multi_snd : MultiParams base_snd base_map : BaseParamsTotalMap base_fst base_snd name_map : MultiParamsNameTotalMap multi_fst multi_snd msg_map : MultiParamsMsgTotalMap multi_fst multi_snd name_map_bijective : MultiParamsNameTotalMapBijective name_map multi_map_congr : MultiParamsTotalMapCongruency base_map name_map msg_map tot_map_output_injective : forall o o' : output, tot_map_output o = tot_map_output o' -> o = o' fail_fst : FailureParams multi_fst fail_snd : FailureParams multi_snd fail_map_congr : FailureParamsTotalMapCongruency fail_fst fail_snd base_map net : network failed' : list name p : packet xs, ys : list packet d : data l : list (name * msg) out : list output H_step_fail : step_failure (failed', net) (failed', {| nwPackets := send_packets (pDst p) l ++ xs ++ ys; nwState := update name_eq_dec (nwState net) (pDst p) d |}) [(pDst p, inr out)] H3 : nwPackets net = xs ++ p :: ys H4 : ~ In (pDst p) failed' H6 : net_handlers (pDst p) (pSrc p) (pBody p) (nwState net (pDst p)) = (out, d, l) Unable to unify \"map ?M1963 ?M1965 = map ?M1964 ?M1965\" with \"step_failure (map tot_map_name failed', tot_map_net net) (map tot_map_name failed', tot_map_net {| nwPackets := map (fun m : name * msg => {| pSrc := pDst p; pDst := fst m; pBody := snd m |}) l ++ xs ++ ys; nwState := update name_eq_dec (nwState net) (pDst p) d |}) [(tot_map_name (pDst p), inr (map tot_map_output out))]\".", "type": "cannot_unify", "handled": true}]}, "chat": [], "original": "intros net net' failed failed' tr H_step_fail. inversion H_step_fail; subst. - simpl. apply StepOrderedFailure_deliver with (m:=m) (ms:=ms) (d:=d) (l:=l); auto. + rewrite map_map. apply map_ext_in. intros [n [io | lo]] Hin. * simpl. rewrite <- H1. auto. * simpl. rewrite map_map. apply in_map_iff in Hin. destruct Hin as [[n' [inp|outp]] [Hinp Heq]]. { inversion Heq; subst. rewrite <- H2. auto. } { apply in_map_iff. exists (n', outp). auto. } + apply tot_map_output_injective. auto. + apply tot_map_output_injective. auto.", "succ": false, "time": 11.028443803000016}]