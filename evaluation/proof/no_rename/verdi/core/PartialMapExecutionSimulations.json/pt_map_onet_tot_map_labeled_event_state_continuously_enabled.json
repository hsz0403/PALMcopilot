[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": ["intros l H1 s H2 H3 H4."], "tactic": "apply (lb_step_ordered_failure_weak_fairness_always_enabled_pt_map_onet_continuously base_map name_map msg_map label_map name_map_bijective multi_map_congr multi_map_lb_congr label_eq_dec l H1 s H2 H3 H4).", "exn": "In environment base_fst, base_snd : BaseParams labeled_multi_fst : LabeledMultiParams base_fst labeled_multi_snd : LabeledMultiParams base_snd base_map : BaseParamsPartialMap base_fst base_snd name_map : MultiParamsNameTotalMap unlabeled_multi_params unlabeled_multi_params msg_map : MultiParamsMsgPartialMap unlabeled_multi_params unlabeled_multi_params label_map : LabeledMultiParamsLabelTotalMap labeled_multi_fst labeled_multi_snd name_map_bijective : MultiParamsNameTotalMapBijective name_map multi_map_congr : MultiParamsPartialMapCongruency base_map name_map msg_map multi_map_lb_congr : LabeledMultiParamsPartialMapCongruency base_map name_map msg_map label_map label_eq_dec : forall x y : label, {x = y} + {x <> y} tot_map_label_injective : forall l l' : label, tot_map_label l = tot_map_label l' -> l = l' label_tot_mapped : forall l : label, exists l' : label, l = tot_map_label l' lb_step_ordered_failure_strong_fairness_enabled_pt_map_onet_eventually : forall l : label, tot_map_label l <> label_silent -> forall s : infseq (event (list name * ordered_network) label (name * (input + output))), lb_step_execution lb_step_ordered_failure s -> strong_fairness lb_step_ordered_failure label_silent s -> enabled lb_step_ordered_failure (tot_map_label l) (pt_map_onet_event (hd s)) -> eventually (now (enabled lb_step_ordered_failure l)) s lb_step_ordered_failure_weak_fairness_always_enabled_pt_map_onet_continuously : forall l : label, tot_map_label l <> label_silent -> forall s : infseq (event (list name * ordered_network) label (name * (input + output))), lb_step_execution lb_step_ordered_failure s -> weak_fairness lb_step_ordered_failure label_silent s -> always (now (enabled lb_step_ordered_failure (tot_map_label l))) (map pt_map_onet_event s) -> continuously (now (enabled lb_step_ordered_failure l)) s l : label H1 : tot_map_label l <> label_silent s : infseq (event (list name * ordered_network) label (name * (input + output))) H2 : lb_step_execution lb_step_ordered_failure s H3 : weak_fairness lb_step_ordered_failure label_silent s H4 : continuously (now (enabled lb_step_ordered_failure (tot_map_label l))) (map pt_map_onet_event s) The term \"base_map\" has type \"BaseParamsPartialMap base_fst base_snd\" while it is expected to have type \"label\".", "type": "wrong_type", "handled": true}]}, "chat": [], "original": "intros l H1 s H2 H3 H4. apply (lb_step_ordered_failure_weak_fairness_always_enabled_pt_map_onet_continuously base_map name_map msg_map label_map name_map_bijective multi_map_congr multi_map_lb_congr label_eq_dec l H1 s H2 H3 H4).", "succ": false, "time": 4.203567695000061}]