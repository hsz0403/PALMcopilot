[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": ["intros net net' tr H_step."], "tactic": "unfold step_ordered in H_step.", "exn": "Cannot coerce step_ordered to an evaluable reference.", "type": "not_evaluable", "handled": true}, {"ctx": ["intros net net' tr H_step.", "destruct H_step as [H_deliver | H_input].", "-", "left.", "destruct H_deliver as [H_pckts H_handlers].", "unfold pt_map_onet in *."], "tactic": "-", "exn": "Wrong bullet -: Current bullet - is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["intros net net' tr H_step.", "destruct H_step as [H_deliver | H_input].", "-", "left.", "destruct H_deliver as [H_pckts H_handlers].", "unfold pt_map_onet in *.", "shelve.", "-", "right."], "tactic": "destruct H_input as [H_notin H_handlers].", "exn": "Not an inductive product.", "type": "not_inductive_product", "handled": true}, {"ctx": ["intros net net' tr H_step.", "destruct H_step as [H_deliver | H_input].", "-", "left.", "destruct H_deliver as [H_pckts H_handlers].", "unfold pt_map_onet in *.", "shelve.", "-", "right.", "unfold pt_map_onet in *."], "tactic": "rewrite H_handlers.", "exn": "The reference H_handlers was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros net net' tr H_step.", "destruct H_step as [H_deliver | H_input].", "-", "left.", "destruct H_deliver as [H_pckts H_handlers].", "unfold pt_map_onet in *.", "shelve.", "-", "right.", "unfold pt_map_onet in *.", "rewrite H0."], "tactic": "split; reflexivity.", "exn": "In environment base_fst, base_snd : BaseParams multi_fst : MultiParams base_fst multi_snd : MultiParams base_snd base_map : BaseParamsPartialMap base_fst base_snd name_map : MultiParamsNameTotalMap multi_fst multi_snd msg_map : MultiParamsMsgPartialMap multi_fst multi_snd name_map_bijective : MultiParamsNameTotalMapBijective name_map multi_map_congr : MultiParamsPartialMapCongruency base_map name_map msg_map fail_fst : FailureParams multi_fst fail_snd : FailureParams multi_snd fail_map_congr : FailureParamsPartialMapCongruency fail_fst fail_snd base_map H_input : name net, net' : ordered_network tr : list (name * (input + output)) out : list output inp : input d : data l : list (name * msg) H : input_handlers H_input inp (onwState net H_input) = (out, d, l) H0 : net' = {| onwPackets := collate name_eq_dec H_input (onwPackets net) l; onwState := update name_eq_dec (onwState net) H_input d |} H1 : tr = (H_input, inl inp) :: map2fst H_input (map inr out) Unable to unify \"{| onwPackets := fun src dst : name => filterMap pt_map_msg (onwPackets net (tot_map_name_inv src) (tot_map_name_inv dst)); onwState := fun n : name => pt_map_data (onwState net (tot_map_name_inv n)) |}\" with \"{| onwPackets := fun src dst : name => filterMap pt_map_msg (onwPackets {| onwPackets := collate name_eq_dec H_input (onwPackets net) l; onwState := update name_eq_dec (onwState net) H_input d |} (tot_map_name_inv src) (tot_map_name_inv dst)); onwState := fun n : name => pt_map_data (onwState {| onwPackets := collate name_eq_dec H_input (onwPackets net) l; onwState := update name_eq_dec (onwState net) H_input d |} (tot_map_name_inv n)) |}\".", "type": "cannot_unify", "handled": true}]}, "chat": [], "original": "intros net net' tr H_step. unfold step_ordered in H_step. destruct H_step as [H_deliver | H_input]. - left. destruct H_deliver as [H_pckts H_handlers]. unfold pt_map_onet in *. rewrite H_pckts. rewrite H_handlers. split; reflexivity. - right. destruct H_input as [H_notin H_handlers]. unfold pt_map_onet in *. rewrite H_handlers. split; reflexivity.", "succ": false, "time": 21.56837594700002}]