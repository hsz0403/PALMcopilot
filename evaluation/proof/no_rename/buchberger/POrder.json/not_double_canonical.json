[{"history": {"proof": "intros a p Hc. unfold canonical in Hc. destruct Hc as [Holist Hnzero]. srun best use: olist_pX_order, ltT_not_eqT unfold: eqT.", "repairs": ["", "", "", "hammer"], "exceptions": [{"ctx": ["intros a p Hc.", "unfold canonical in Hc.", "destruct Hc as [Holist Hnzero].", "unfold olist in Holist."], "tactic": "split.", "exn": "Not an inductive goal with 1 constructor.", "type": "not_inductive_goal", "handled": true}, {"ctx": ["intros a p Hc.", "unfold canonical in Hc.", "destruct Hc as [Holist Hnzero].", "unfold olist in Holist."], "tactic": "apply Holist.", "exn": "In environment A : Set A0, A1 : A eqA : A -> A -> Prop plusA : A -> A -> A invA : A -> A minusA, multA : A -> A -> A divA : A -> forall b : A, ~ eqA b A0 -> A cs : CoefStructure A A0 A1 eqA plusA invA minusA multA divA eqA_dec : forall a b : A, {eqA a b} + {~ eqA a b} n : nat ltM : mon n -> mon n -> Prop ltM_dec : forall a b : mon n, {ltM a b} + {ltM b a} + {a = b} os : OrderStructure (mon n) (zero_mon n) ltM (mult_mon n) eqT_refl := Term.eqT_refl A n : reflexive (Term A n) (eqT (A:=A) (n:=n)) consA := cons : mon n -> list (mon n) -> list (mon n) nilA := nil : list (mon n) listA := list (mon n) : Set DescA := Desc (mon n) ltM : list (mon n) -> Prop a : Term A n p : list (Term A n) Holist : DescA (fP (pX a (pX a p))) Hnzero : nZterm (pX a (pX a p)) Unable to unify \"DescA (fP (pX a (pX a p)))\" with \"False\".", "type": "cannot_unify", "handled": true}]}, "chat": [], "original": "intros a p Hc. unfold canonical in Hc. destruct Hc as [Holist Hnzero]. unfold olist in Holist. split. - apply Holist. - intro Hzero. apply Hnzero. inversion Hzero.", "succ": true}]