[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": ["intros n t.", "induction t using btree_ind.", "-", "simpl.", "constructor.", "-", "simpl."], "tactic": "pose proof (frequency_length A eqA_dec (map (fun x : A * list bool => fst x) (compute_code t)) (encode eqA_dec (compute_code t) (all_leaves t))).", "exn": "The reference t was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros n t.", "induction t using btree_ind.", "-", "simpl.", "constructor.", "-", "simpl."], "tactic": "unfold encode in H.", "exn": "No such hypothesis: H", "type": "no_hypos", "handled": true}, {"ctx": ["intros n t.", "induction t using btree_ind.", "-", "simpl.", "constructor.", "-", "simpl.", "qsimpl time: 1 use: encode."], "tactic": "rewrite <- H.", "exn": "The reference H was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros n t.", "induction t using btree_ind.", "-", "simpl.", "constructor.", "-", "simpl.", "qsimpl time: 1 use: encode.", "rewrite <- morph_eq."], "tactic": "clear H.", "exn": "No such hypothesis: H", "type": "no_hypos", "handled": true}, {"ctx": ["intros n t.", "induction t using btree_ind.", "-", "simpl.", "constructor.", "-", "simpl.", "qsimpl time: 1 use: encode.", "rewrite <- morph_eq.", "qsimpl time: 1 use: encode."], "tactic": "apply cover_node with (node t1 t2) (all_leaves t).", "exn": "The reference t was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros n t.", "induction t using btree_ind.", "-", "simpl.", "constructor.", "-", "simpl.", "qsimpl time: 1 use: encode.", "rewrite <- morph_eq.", "qsimpl time: 1 use: encode.", "+", "unfold compute_code."], "tactic": "rewrite map_map.", "exn": "Found no subterm matching \"map ?M3008 (map ?M3007 ?M3009)\" in the current goal.", "type": "no_subterm", "handled": true}, {"ctx": ["intros n t.", "induction t using btree_ind.", "-", "simpl.", "constructor.", "-", "simpl.", "qsimpl time: 1 use: encode.", "rewrite <- morph_eq.", "qsimpl time: 1 use: encode.", "+", "unfold compute_code.", "qsimpl time: 1 use: encode,map_map."], "tactic": "rewrite map_ext with (g := fst).", "exn": "Found no subterm matching \"map ?M3922 ?M3925\" in the current goal.", "type": "no_subterm", "handled": true}, {"ctx": ["intros n t.", "induction t using btree_ind.", "-", "simpl.", "constructor.", "-", "simpl.", "qsimpl time: 1 use: encode.", "rewrite <- morph_eq.", "qsimpl time: 1 use: encode.", "+", "unfold compute_code.", "qsimpl time: 1 use: encode,map_map.", "qsimpl time: 1 use: encode,map_map,map_ext,fst."], "tactic": "rewrite ulist_ordered_cover with (l2 := all_leaves t1).", "exn": "Found no subterm matching \"all_leaves ?M5112\" in the current goal.", "type": "no_subterm", "handled": true}, {"ctx": ["intros n t.", "induction t using btree_ind.", "-", "simpl.", "constructor.", "-", "simpl.", "qsimpl time: 1 use: encode.", "rewrite <- morph_eq.", "qsimpl time: 1 use: encode.", "+", "unfold compute_code.", "qsimpl time: 1 use: encode,map_map.", "qsimpl time: 1 use: encode,map_map,map_ext,fst.", "qsimpl time: 1 use: map_map,encode,fst,ulist_ordered_cover,all_leaves,map_ext."], "tactic": "apply permutation_map.", "exn": "In environment H3 : forall (A B : Type) (f g : A -> B), (forall a : A, f a = g a) -> forall l : list A, map f l = map g l X6 : forall A : Type, btree A -> list A H2 : forall (A : Type) (l1 : list (btree A)) (l2 : list A) (t : btree A), ordered_cover l1 t -> ulist l2 -> l1 = map (fun x : A => leaf x) l2 -> all_leaves t = l2 H : forall (A B C : Type) (f : A -> B) (g : B -> C) (l : list A), map g (map f l) = map (fun x : A => g (f x)) l X1, X0, X : forall A : Type, (forall a b : A, {a = b} + {a = b -> False}) -> code A -> list A -> list bool A : Type f : A -> nat eqA_dec : forall a b : A, {a = b} + {a = b -> False} n : nat t1, t2 : btree A IHt1 : height_pred n (map (fun x : A * list bool => length (snd x) + n) (compute_code t1)) (map (fun x : A * list bool => leaf (fst x)) (compute_code t1)) t1 IHt2 : height_pred n (map (fun x : A * list bool => length (snd x) + n) (compute_code t2)) (map (fun x : A * list bool => leaf (fst x)) (compute_code t2)) t2 X2, X3 : forall A : Type, (forall a b : A, {a = b} + {a = b -> False}) -> code A -> list A -> list bool X4 : A -> A -> A Unable to unify \"permutation (map ?M6526 ?M6527) (map ?M6526 ?M6528)\" with \"height_pred n (map (fun x : A * list bool => length (snd x) + n) (map (fun v : A * list bool => let (a1, b1) := v in (a1, false :: b1)) ((fix compute_code (a : btree A) : list (A * list bool) := match a with | leaf b => [(b, [])] | node l1 l2 => map (fun v : A * list bool => let (a1, b1) := v in (a1, false :: b1)) (compute_code l1) ++ map (fun v : A * list bool => let (a1, b1) := v in (a1, true :: b1)) (compute_code l2) end) t1) ++ map (fun v : A * list bool => let (a1, b1) := v in (a1, true :: b1)) ((fix compute_code (a : btree A) : list (A * list bool) := match a with | leaf b => [(b, [])] | node l1 l2 => map (fun v : A * list bool => let (a1, b1) := v in (a1, false :: b1)) (compute_code l1) ++ map (fun v : A * list bool => let (a1, b1) := v in (a1, true :: b1)) (compute_code l2) end) t2))) (map (fun x : A * list bool => leaf (fst x)) (map (fun v : A * list bool => let (a1, b1) := v in (a1, false :: b1)) ((fix compute_code (a : btree A) : list (A * list bool) := match a with | leaf b => [(b, [])] | node l1 l2 => map (fun v : A * list bool => let (a1, b1) := v in (a1, false :: b1)) (compute_code l1) ++ map (fun v : A * list bool => let (a1, b1) := v in (a1, true :: b1)) (compute_code l2) end) t1) ++ map (fun v : A * list bool => let (a1, b1) := v in (a1, true :: b1)) ((fix compute_code (a : btree A) : list (A * list bool) := match a with | leaf b => [(b, [])] | node l1 l2 => map (fun v : A * list bool => let (a1, b1) := v in (a1, false :: b1)) (compute_code l1) ++ map (fun v : A * list bool => let (a1, b1) := v in (a1, true :: b1)) (compute_code l2) end) t2))) ?Goal13\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros n t.", "induction t using btree_ind.", "-", "simpl.", "constructor.", "-", "simpl.", "qsimpl time: 1 use: encode.", "rewrite <- morph_eq.", "qsimpl time: 1 use: encode.", "+", "unfold compute_code.", "qsimpl time: 1 use: encode,map_map.", "qsimpl time: 1 use: encode,map_map,map_ext,fst.", "qsimpl time: 1 use: map_map,encode,fst,ulist_ordered_cover,all_leaves,map_ext.", "qsimpl time: 1 use: map_map,encode,fst,ulist_ordered_cover,all_leaves,permutation_map,map_ext."], "tactic": "apply H0.", "exn": "The reference H0 was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros n t.", "induction t using btree_ind.", "-", "simpl.", "constructor.", "-", "simpl.", "qsimpl time: 1 use: encode.", "rewrite <- morph_eq.", "qsimpl time: 1 use: encode.", "+", "unfold compute_code.", "qsimpl time: 1 use: encode,map_map.", "qsimpl time: 1 use: encode,map_map,map_ext,fst.", "qsimpl time: 1 use: map_map,encode,fst,ulist_ordered_cover,all_leaves,map_ext.", "qsimpl time: 1 use: map_map,encode,fst,ulist_ordered_cover,all_leaves,permutation_map,map_ext."], "tactic": "apply frequency_length.", "exn": "In environment H5 : forall (A B : Type) (f g : A -> B), (forall a : A, f a = g a) -> forall l : list A, map f l = map g l H4 : forall (A B : Type) (f : A -> B) (l1 l2 : list A), permutation l1 l2 -> permutation (map f l1) (map f l2) X8 : forall A : Type, btree A -> list A H1 : forall (A : Type) (l1 : list (btree A)) (l2 : list A) (t : btree A), ordered_cover l1 t -> ulist l2 -> l1 = map (fun x : A => leaf x) l2 -> all_leaves t = l2 X6 : forall A : Type, btree A -> list A H : forall (A B C : Type) (f : A -> B) (g : B -> C) (l : list A), map g (map f l) = map (fun x : A => g (f x)) l X1, X0, X : forall A : Type, (forall a b : A, {a = b} + {a = b -> False}) -> code A -> list A -> list bool A : Type f : A -> nat eqA_dec : forall a b : A, {a = b} + {a = b -> False} n : nat t1, t2 : btree A IHt1 : height_pred n (map (fun x : A * list bool => length (snd x) + n) (compute_code t1)) (map (fun x : A * list bool => leaf (fst x)) (compute_code t1)) t1 IHt2 : height_pred n (map (fun x : A * list bool => length (snd x) + n) (compute_code t2)) (map (fun x : A * list bool => leaf (fst x)) (compute_code t2)) t2 X2, X3, X5 : forall A : Type, (forall a b : A, {a = b} + {a = b -> False}) -> code A -> list A -> list bool X4 : A -> A -> A Unable to unify \"length (encode ?M8156 ?M8158 ?M8157) = fold_left (fun (a : nat) (b : ?M8155 * list bool) => a + number_of_occurrences ?M8156 (fst b) ?M8157 * length (snd b)) ?M8158 0\" with \"height_pred n (map (fun x : A * list bool => length (snd x) + n) (map (fun v : A * list bool => let (a1, b1) := v in (a1, false :: b1)) ((fix compute_code (a : btree A) : list (A * list bool) := match a with | leaf b => [(b, [])] | node l1 l2 => map (fun v : A * list bool => let (a1, b1) := v in (a1, false :: b1)) (compute_code l1) ++ map (fun v : A * list bool => let (a1, b1) := v in (a1, true :: b1)) (compute_code l2) end) t1) ++ map (fun v : A * list bool => let (a1, b1) := v in (a1, true :: b1)) ((fix compute_code (a : btree A) : list (A * list bool) := match a with | leaf b => [(b, [])] | node l1 l2 => map (fun v : A * list bool => let (a1, b1) := v in (a1, false :: b1)) (compute_code l1) ++ map (fun v : A * list bool => let (a1, b1) := v in (a1, true :: b1)) (compute_code l2) end) t2))) (map (fun x : A * list bool => leaf (fst x)) (map (fun v : A * list bool => let (a1, b1) := v in (a1, false :: b1)) ((fix compute_code (a : btree A) : list (A * list bool) := match a with | leaf b => [(b, [])] | node l1 l2 => map (fun v : A * list bool => let (a1, b1) := v in (a1, false :: b1)) (compute_code l1) ++ map (fun v : A * list bool => let (a1, b1) := v in (a1, true :: b1)) (compute_code l2) end) t1) ++ map (fun v : A * list bool => let (a1, b1) := v in (a1, true :: b1)) ((fix compute_code (a : btree A) : list (A * list bool) := match a with | leaf b => [(b, [])] | node l1 l2 => map (fun v : A * list bool => let (a1, b1) := v in (a1, false :: b1)) (compute_code l1) ++ map (fun v : A * list bool => let (a1, b1) := v in (a1, true :: b1)) (compute_code l2) end) t2))) ?Goal13\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros n t.", "induction t using btree_ind.", "-", "simpl.", "constructor.", "-", "simpl.", "qsimpl time: 1 use: encode.", "rewrite <- morph_eq.", "qsimpl time: 1 use: encode.", "+", "unfold compute_code.", "qsimpl time: 1 use: encode,map_map.", "qsimpl time: 1 use: encode,map_map,map_ext,fst.", "qsimpl time: 1 use: map_map,encode,fst,ulist_ordered_cover,all_leaves,map_ext.", "qsimpl time: 1 use: map_map,encode,fst,ulist_ordered_cover,all_leaves,permutation_map,map_ext.", "qsimpl time: 1 use: map_map,frequency_length,encode,fst,ulist_ordered_cover,all_leaves,permutation_map,map_ext."], "tactic": "apply H.", "exn": "In environment H7 : forall (A B : Type) (f g : A -> B), (forall a : A, f a = g a) -> forall l : list A, map f l = map g l H6 : forall (A B : Type) (f : A -> B) (l1 l2 : list A), permutation l1 l2 -> permutation (map f l1) (map f l2) X10 : forall A : Type, btree A -> list A H3 : forall (A : Type) (l1 : list (btree A)) (l2 : list A) (t : btree A), ordered_cover l1 t -> ulist l2 -> l1 = map (fun x : A => leaf x) l2 -> all_leaves t = l2 X8, X6 : forall A : Type, btree A -> list A H : forall (A B C : Type) (f : A -> B) (g : B -> C) (l : list A), map g (map f l) = map (fun x : A => g (f x)) l X1, X0, X : forall A : Type, (forall a b : A, {a = b} + {a = b -> False}) -> code A -> list A -> list bool A : Type f : A -> nat eqA_dec : forall a b : A, {a = b} + {a = b -> False} n : nat t1, t2 : btree A IHt1 : height_pred n (map (fun x : A * list bool => length (snd x) + n) (compute_code t1)) (map (fun x : A * list bool => leaf (fst x)) (compute_code t1)) t1 IHt2 : height_pred n (map (fun x : A * list bool => length (snd x) + n) (compute_code t2)) (map (fun x : A * list bool => leaf (fst x)) (compute_code t2)) t2 X2, X3, X5, X7 : forall A : Type, (forall a b : A, {a = b} + {a = b -> False}) -> code A -> list A -> list bool H2 : forall (A : Type) (eqA_dec : forall a b : A, {a = b} + {a = b -> False}) (m : list A) (c : code A), unique_key c -> length (encode eqA_dec c m) = fold_left (fun (a : nat) (b : A * list bool) => a + number_of_occurrences eqA_dec (fst b) m * length (snd b)) c 0 X4 : A -> A -> A Unable to unify \"map ?M9990 (map ?M9989 ?M9991) = map (fun x : ?M9986 => ?M9990 (?M9989 x)) ?M9991\" with \"height_pred n (map (fun x : A * list bool => length (snd x) + n) (map (fun v : A * list bool => let (a1, b1) := v in (a1, false :: b1)) ((fix compute_code (a : btree A) : list (A * list bool) := match a with | leaf b => [(b, [])] | node l1 l2 => map (fun v : A * list bool => let (a1, b1) := v in (a1, false :: b1)) (compute_code l1) ++ map (fun v : A * list bool => let (a1, b1) := v in (a1, true :: b1)) (compute_code l2) end) t1) ++ map (fun v : A * list bool => let (a1, b1) := v in (a1, true :: b1)) ((fix compute_code (a : btree A) : list (A * list bool) := match a with | leaf b => [(b, [])] | node l1 l2 => map (fun v : A * list bool => let (a1, b1) := v in (a1, false :: b1)) (compute_code l1) ++ map (fun v : A * list bool => let (a1, b1) := v in (a1, true :: b1)) (compute_code l2) end) t2))) (map (fun x : A * list bool => leaf (fst x)) (map (fun v : A * list bool => let (a1, b1) := v in (a1, false :: b1)) ((fix compute_code (a : btree A) : list (A * list bool) := match a with | leaf b => [(b, [])] | node l1 l2 => map (fun v : A * list bool => let (a1, b1) := v in (a1, false :: b1)) (compute_code l1) ++ map (fun v : A * list bool => let (a1, b1) := v in (a1, true :: b1)) (compute_code l2) end) t1) ++ map (fun v : A * list bool => let (a1, b1) := v in (a1, true :: b1)) ((fix compute_code (a : btree A) : list (A * list bool) := match a with | leaf b => [(b, [])] | node l1 l2 => map (fun v : A * list bool => let (a1, b1) := v in (a1, false :: b1)) (compute_code l1) ++ map (fun v : A * list bool => let (a1, b1) := v in (a1, true :: b1)) (compute_code l2) end) t2))) ?Goal13\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros n t.", "induction t using btree_ind.", "-", "simpl.", "constructor.", "-", "simpl.", "qsimpl time: 1 use: encode.", "rewrite <- morph_eq.", "qsimpl time: 1 use: encode.", "+", "unfold compute_code.", "qsimpl time: 1 use: encode,map_map.", "qsimpl time: 1 use: encode,map_map,map_ext,fst.", "qsimpl time: 1 use: map_map,encode,fst,ulist_ordered_cover,all_leaves,map_ext.", "qsimpl time: 1 use: map_map,encode,fst,ulist_ordered_cover,all_leaves,permutation_map,map_ext.", "qsimpl time: 1 use: map_map,frequency_length,encode,fst,ulist_ordered_cover,all_leaves,permutation_map,map_ext.", "qsimpl time: 1 use: map_map,frequency_length,encode,fst,ulist_ordered_cover,all_leaves,permutation_map,map_ext."], "tactic": "apply ulist_elements.", "exn": "The reference ulist_elements was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros n t.", "induction t using btree_ind.", "-", "simpl.", "constructor.", "-", "simpl.", "qsimpl time: 1 use: encode.", "rewrite <- morph_eq.", "qsimpl time: 1 use: encode.", "+", "unfold compute_code.", "qsimpl time: 1 use: encode,map_map.", "qsimpl time: 1 use: encode,map_map,map_ext,fst.", "qsimpl time: 1 use: map_map,encode,fst,ulist_ordered_cover,all_leaves,map_ext.", "qsimpl time: 1 use: map_map,encode,fst,ulist_ordered_cover,all_leaves,permutation_map,map_ext.", "qsimpl time: 1 use: map_map,frequency_length,encode,fst,ulist_ordered_cover,all_leaves,permutation_map,map_ext.", "qsimpl time: 1 use: map_map,frequency_length,encode,fst,ulist_ordered_cover,all_leaves,permutation_map,map_ext."], "tactic": "+", "exn": "Wrong bullet +: Current bullet + is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["intros n t.", "induction t using btree_ind.", "-", "simpl.", "constructor.", "-", "simpl.", "qsimpl time: 1 use: encode.", "rewrite <- morph_eq.", "qsimpl time: 1 use: encode.", "+", "unfold compute_code.", "qsimpl time: 1 use: encode,map_map.", "qsimpl time: 1 use: encode,map_map,map_ext,fst.", "qsimpl time: 1 use: map_map,encode,fst,ulist_ordered_cover,all_leaves,map_ext.", "qsimpl time: 1 use: map_map,encode,fst,ulist_ordered_cover,all_leaves,permutation_map,map_ext.", "qsimpl time: 1 use: map_map,frequency_length,encode,fst,ulist_ordered_cover,all_leaves,permutation_map,map_ext.", "qsimpl time: 1 use: map_map,frequency_length,encode,fst,ulist_ordered_cover,all_leaves,permutation_map,map_ext.", "shelve.", "+"], "tactic": "apply IHt1.", "exn": "In environment X : forall A : Type, (forall a b : A, {a = b} + {a = b -> False}) -> code A -> list A -> list bool A : Type f : A -> nat eqA_dec : forall a b : A, {a = b} + {a = b -> False} n : nat t1, t2 : btree A IHt1 : height_pred n (map (fun x : A * list bool => length (snd x) + n) (compute_code t1)) (map (fun x : A * list bool => leaf (fst x)) (compute_code t1)) t1 IHt2 : height_pred n (map (fun x : A * list bool => length (snd x) + n) (compute_code t2)) (map (fun x : A * list bool => leaf (fst x)) (compute_code t2)) t2 Unable to unify \"height_pred n (map (fun x : A * list bool => length (snd x) + n) (compute_code t1)) (map (fun x : A * list bool => leaf (fst x)) (compute_code t1)) t1\" with \"ring_morph ?Goal ?Goal0 ?Goal1 ?Goal2 ?Goal3 ?Goal4 iff ?Goal5 ?Goal6 ?Goal7 ?Goal8 ?Goal9 ?Goal10 ?Goal11 (height_pred n (map (fun x : A * list bool => length (snd x) + n) (map (fun v : A * list bool => let (a1, b1) := v in (a1, false :: b1)) (compute_code t1) ++ map (fun v : A * list bool => let (a1, b1) := v in (a1, true :: b1)) (compute_code t2))) (map (fun x : A * list bool => leaf (fst x)) (map (fun v : A * list bool => let (a1, b1) := v in (a1, false :: b1)) (compute_code t1) ++ map (fun v : A * list bool => let (a1, b1) := v in (a1, true :: b1)) (compute_code t2))))\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros n t.", "induction t using btree_ind.", "-", "simpl.", "constructor.", "-", "simpl.", "qsimpl time: 1 use: encode.", "rewrite <- morph_eq.", "qsimpl time: 1 use: encode.", "+", "unfold compute_code.", "qsimpl time: 1 use: encode,map_map.", "qsimpl time: 1 use: encode,map_map,map_ext,fst.", "qsimpl time: 1 use: map_map,encode,fst,ulist_ordered_cover,all_leaves,map_ext.", "qsimpl time: 1 use: map_map,encode,fst,ulist_ordered_cover,all_leaves,permutation_map,map_ext.", "qsimpl time: 1 use: map_map,frequency_length,encode,fst,ulist_ordered_cover,all_leaves,permutation_map,map_ext.", "qsimpl time: 1 use: map_map,frequency_length,encode,fst,ulist_ordered_cover,all_leaves,permutation_map,map_ext.", "shelve.", "+"], "tactic": "+", "exn": "Wrong bullet +: Current bullet + is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["intros n t.", "induction t using btree_ind.", "-", "simpl.", "constructor.", "-", "simpl.", "qsimpl time: 1 use: encode.", "rewrite <- morph_eq.", "qsimpl time: 1 use: encode.", "+", "unfold compute_code.", "qsimpl time: 1 use: encode,map_map.", "qsimpl time: 1 use: encode,map_map,map_ext,fst.", "qsimpl time: 1 use: map_map,encode,fst,ulist_ordered_cover,all_leaves,map_ext.", "qsimpl time: 1 use: map_map,encode,fst,ulist_ordered_cover,all_leaves,permutation_map,map_ext.", "qsimpl time: 1 use: map_map,frequency_length,encode,fst,ulist_ordered_cover,all_leaves,permutation_map,map_ext.", "qsimpl time: 1 use: map_map,frequency_length,encode,fst,ulist_ordered_cover,all_leaves,permutation_map,map_ext.", "shelve.", "+", "shelve.", "+"], "tactic": "apply IHt2.", "exn": "In environment X : forall A : Type, (forall a b : A, {a = b} + {a = b -> False}) -> code A -> list A -> list bool A : Type f : A -> nat eqA_dec : forall a b : A, {a = b} + {a = b -> False} n : nat t1, t2 : btree A IHt1 : height_pred n (map (fun x : A * list bool => length (snd x) + n) (compute_code t1)) (map (fun x : A * list bool => leaf (fst x)) (compute_code t1)) t1 IHt2 : height_pred n (map (fun x : A * list bool => length (snd x) + n) (compute_code t2)) (map (fun x : A * list bool => leaf (fst x)) (compute_code t2)) t2 Unable to unify \"height_pred n (map (fun x : A * list bool => length (snd x) + n) (compute_code t2)) (map (fun x : A * list bool => leaf (fst x)) (compute_code t2)) t2\" with \"?Goal11 ?Goal13 (node t1 t2) = true\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros n t.", "induction t using btree_ind.", "-", "simpl.", "constructor.", "-", "simpl.", "qsimpl time: 1 use: encode.", "rewrite <- morph_eq.", "qsimpl time: 1 use: encode.", "+", "unfold compute_code.", "qsimpl time: 1 use: encode,map_map.", "qsimpl time: 1 use: encode,map_map,map_ext,fst.", "qsimpl time: 1 use: map_map,encode,fst,ulist_ordered_cover,all_leaves,map_ext.", "qsimpl time: 1 use: map_map,encode,fst,ulist_ordered_cover,all_leaves,permutation_map,map_ext.", "qsimpl time: 1 use: map_map,frequency_length,encode,fst,ulist_ordered_cover,all_leaves,permutation_map,map_ext.", "qsimpl time: 1 use: map_map,frequency_length,encode,fst,ulist_ordered_cover,all_leaves,permutation_map,map_ext.", "shelve.", "+", "shelve.", "+"], "tactic": "qsimpl time: 1 use: map_map,frequency_length,encode,qsimpl,fst,ulist_ordered_cover,all_leaves,permutation_map,map_ext.", "exn": "The reference qsimpl was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros n t.", "induction t using btree_ind.", "-", "simpl.", "constructor.", "-", "simpl.", "qsimpl time: 1 use: encode.", "rewrite <- morph_eq.", "qsimpl time: 1 use: encode.", "+", "unfold compute_code.", "qsimpl time: 1 use: encode,map_map.", "qsimpl time: 1 use: encode,map_map,map_ext,fst.", "qsimpl time: 1 use: map_map,encode,fst,ulist_ordered_cover,all_leaves,map_ext.", "qsimpl time: 1 use: map_map,encode,fst,ulist_ordered_cover,all_leaves,permutation_map,map_ext.", "qsimpl time: 1 use: map_map,frequency_length,encode,fst,ulist_ordered_cover,all_leaves,permutation_map,map_ext.", "qsimpl time: 1 use: map_map,frequency_length,encode,fst,ulist_ordered_cover,all_leaves,permutation_map,map_ext.", "shelve.", "+", "shelve.", "+", "qsimpl time: 1 use: map_map,frequency_length,encode,fst,ulist_ordered_cover,all_leaves,permutation_map,map_ext."], "tactic": "apply H1.", "exn": "In environment H3 : forall (A B : Type) (f g : A -> B), (forall a : A, f a = g a) -> forall l : list A, map f l = map g l H2 : forall (A B : Type) (f : A -> B) (l1 l2 : list A), permutation l1 l2 -> permutation (map f l1) (map f l2) X2 : forall A : Type, btree A -> list A H1 : forall (A : Type) (l1 : list (btree A)) (l2 : list A) (t : btree A), ordered_cover l1 t -> ulist l2 -> l1 = map (fun x : A => leaf x) l2 -> all_leaves t = l2 X : forall A : Type, (forall a b : A, {a = b} + {a = b -> False}) -> code A -> list A -> list bool A : Type f : A -> nat eqA_dec : forall a b : A, {a = b} + {a = b -> False} n : nat t1, t2 : btree A IHt1 : height_pred n (map (fun x : A * list bool => length (snd x) + n) (compute_code t1)) (map (fun x : A * list bool => leaf (fst x)) (compute_code t1)) t1 IHt2 : height_pred n (map (fun x : A * list bool => length (snd x) + n) (compute_code t2)) (map (fun x : A * list bool => leaf (fst x)) (compute_code t2)) t2 X0 : forall A : Type, (forall a b : A, {a = b} + {a = b -> False}) -> code A -> list A -> list bool H0 : forall (A : Type) (eqA_dec : forall a b : A, {a = b} + {a = b -> False}) (m : list A) (c : code A), unique_key c -> length (encode eqA_dec c m) = fold_left (fun (a : nat) (b : A * list bool) => a + number_of_occurrences eqA_dec (fst b) m * length (snd b)) c 0 H : forall (A B C : Type) (f : A -> B) (g : B -> C) (l : list A), map g (map f l) = map (fun x : A => g (f x)) l X3 : A -> A -> A Unable to unify \"all_leaves ?M13671 = ?M13670\" with \"?Goal11 ?Goal13 (node t1 t2) = true\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros n t.", "induction t using btree_ind.", "-", "simpl.", "constructor.", "-", "simpl.", "qsimpl time: 1 use: encode.", "rewrite <- morph_eq.", "qsimpl time: 1 use: encode.", "+", "unfold compute_code.", "qsimpl time: 1 use: encode,map_map.", "qsimpl time: 1 use: encode,map_map,map_ext,fst.", "qsimpl time: 1 use: map_map,encode,fst,ulist_ordered_cover,all_leaves,map_ext.", "qsimpl time: 1 use: map_map,encode,fst,ulist_ordered_cover,all_leaves,permutation_map,map_ext.", "qsimpl time: 1 use: map_map,frequency_length,encode,fst,ulist_ordered_cover,all_leaves,permutation_map,map_ext.", "qsimpl time: 1 use: map_map,frequency_length,encode,fst,ulist_ordered_cover,all_leaves,permutation_map,map_ext.", "shelve.", "+", "shelve.", "+", "qsimpl time: 1 use: map_map,frequency_length,encode,fst,ulist_ordered_cover,all_leaves,permutation_map,map_ext."], "tactic": "qsimpl time: 1 use: map_map,frequency_length,encode,qsimpl,fst,ulist_ordered_cover,all_leaves,permutation_map,map_ext.", "exn": "The reference qsimpl was not found in the current environment.", "type": "ref_not_found", "handled": true}]}, "chat": [], "original": "intros n t. induction t using btree_ind. - simpl. constructor. - simpl. pose proof (frequency_length A eqA_dec (map (fun x : A * list bool => fst x) (compute_code t)) (encode eqA_dec (compute_code t) (all_leaves t))). unfold encode in H. rewrite <- H. clear H. apply cover_node with (node t1 t2) (all_leaves t). + unfold compute_code. rewrite map_map. simpl. rewrite map_ext with (g := fst). * rewrite ulist_ordered_cover with (l2 := all_leaves t1). ++ apply permutation_map. apply H0. ++ apply frequency_length. apply H. ++ apply ulist_elements. * intros []. simpl. reflexivity. + apply IHt1. apply H0. + apply IHt2. apply H1.", "succ": false}]