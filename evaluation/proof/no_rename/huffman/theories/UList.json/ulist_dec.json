[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": ["intros l.", "induction l as [| a l' IHl].", "-", "left.", "apply ulist_nil.", "-"], "tactic": "destruct (ulista_dec eqA_dec l') as [H1 | H2].", "exn": "The reference ulista_dec was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros l.", "induction l as [| a l' IHl].", "-", "left.", "apply ulist_nil.", "-", "destruct (nodup eqA_dec l') as [H1 | H2].", "+", "right.", "intros contra."], "tactic": "apply H2.", "exn": "The reference H2 was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros l.", "induction l as [| a l' IHl].", "-", "left.", "apply ulist_nil.", "-", "destruct (nodup eqA_dec l') as [H1 | H2].", "+", "right.", "intros contra.", "apply BinNums.positive_rec."], "tactic": ["inversion contra as [eq].", ""], "exn": "Expects a disjunctive pattern with 2 branches.", "type": "num_branch", "handled": false}, {"ctx": ["intros l.", "induction l as [| a l' IHl].", "-", "left.", "apply ulist_nil.", "-", "destruct (nodup eqA_dec l') as [H1 | H2].", "+", "right.", "intros contra.", "apply BinNums.positive_rec."], "tactic": "+", "exn": "Wrong bullet +: Current bullet + is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["intros l.", "induction l as [| a l' IHl].", "-", "left.", "apply ulist_nil.", "-", "destruct (nodup eqA_dec l') as [H1 | H2].", "+", "right.", "intros contra.", "apply BinNums.positive_rec.", "*", "shelve.", "*", "shelve.", "*", "shelve.", "*", "shelve.", "+", "right.", "intros contra."], "tactic": "apply H2.", "exn": "In environment A : Type eqA_dec : forall a b : A, {a = b} + {a <> b} a : A l' : list A IHl : {ulist l'} + {~ ulist l'} H2 : A l : list A contra : ulist (a :: l') Unable to unify \"A\" with \"False\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros l.", "induction l as [| a l' IHl].", "-", "left.", "apply ulist_nil.", "-", "destruct (nodup eqA_dec l') as [H1 | H2].", "+", "right.", "intros contra.", "apply BinNums.positive_rec.", "*", "shelve.", "*", "shelve.", "*", "shelve.", "*", "shelve.", "+", "right.", "intros contra."], "tactic": ["inversion contra as [eq].", ""], "exn": "Expects a disjunctive pattern with 2 branches.", "type": "num_branch", "handled": false}]}, "chat": [], "original": "intros l. induction l as [| a l' IHl]. - left. apply ulist_nil. - destruct (ulista_dec eqA_dec l') as [H1 | H2]. + right. intros contra. apply H2. inversion contra as [eq]. subst. apply ulist_cons. contr. apply ulist_nil. + right. intros contra. apply H2. inversion contra as [eq]. subst. apply ulist_app_inv_l in H1. apply ulist_cons. 1: contr. apply ulist_inv in H1. auto.", "succ": false}]