[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": ["intros A f l1 l2 H1 H2 H3."], "tactic": "apply (ordered_perm_antisym_eq _ _ (sum_order f) (exist_first_max (map (sum_leaves f) l1)) (exist_first_max (map (sum_leaves f) l2))).", "exn": "In environment A : Type f : A -> nat l1, l2 : list (btree A) H1 : permutation l1 l2 H2 : ordered (sum_order f) l1 H3 : ordered (sum_order f) l2 The term \"sum_order f\" has type \"btree A -> btree A -> Prop\" while it is expected to have type \"forall a b c : btree A, ?order a b -> ?order b c -> ?order a c\".", "type": "wrong_type", "handled": true}, {"ctx": ["intros A f l1 l2 H1 H2 H3."], "tactic": "apply permutation_map.", "exn": "In environment A : Type f : A -> nat l1, l2 : list (btree A) H1 : permutation l1 l2 H2 : ordered (sum_order f) l1 H3 : ordered (sum_order f) l2 Unable to unify \"permutation (map ?M1504 ?M1505) (map ?M1504 ?M1506)\" with \"map (sum_leaves f) l1 = map (sum_leaves f) l2\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros A f l1 l2 H1 H2 H3."], "tactic": "apply H1.", "exn": "In environment A : Type f : A -> nat l1, l2 : list (btree A) H1 : permutation l1 l2 H2 : ordered (sum_order f) l1 H3 : ordered (sum_order f) l2 Unable to unify \"permutation l1 l2\" with \"map (sum_leaves f) l1 = map (sum_leaves f) l2\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros A f l1 l2 H1 H2 H3."], "tactic": "apply H2.", "exn": "In environment A : Type f : A -> nat l1, l2 : list (btree A) H1 : permutation l1 l2 H2 : ordered (sum_order f) l1 H3 : ordered (sum_order f) l2 Unable to unify \"ordered (sum_order f) l1\" with \"map (sum_leaves f) l1 = map (sum_leaves f) l2\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros A f l1 l2 H1 H2 H3."], "tactic": "apply H3.", "exn": "In environment A : Type f : A -> nat l1, l2 : list (btree A) H1 : permutation l1 l2 H2 : ordered (sum_order f) l1 H3 : ordered (sum_order f) l2 Unable to unify \"ordered (sum_order f) l2\" with \"map (sum_leaves f) l1 = map (sum_leaves f) l2\".", "type": "cannot_unify", "handled": true}]}, "chat": [], "original": "intros A f l1 l2 H1 H2 H3. apply (ordered_perm_antisym_eq _ _ (sum_order f) (exist_first_max (map (sum_leaves f) l1)) (exist_first_max (map (sum_leaves f) l2))). - apply permutation_map. apply H1. - apply H2. - apply H3.", "succ": false}]