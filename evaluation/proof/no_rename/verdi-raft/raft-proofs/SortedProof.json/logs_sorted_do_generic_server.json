[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": ["unfold raft_net_invariant_do_generic_server, doGenericServer.", "intros."], "tactic": "eapply H.", "exn": "In environment orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params tsi : term_sanity_interface net : network st' : name -> data ps' : list packet d : raft_data os : list raft_output d' : raft_data ms : list (name * msg) h : name H : (let (out, state) := applyEntries h d (rev (filter (fun x : entry => (lastApplied d <? eIndex x) && (eIndex x <=? commitIndex d)) (findGtIndex (log d) (lastApplied d)))) in (out, RaftState.set_raft_data_lastApplied term name entry logIndex serverType data clientId output state (if lastApplied state <? commitIndex state then commitIndex state else lastApplied state), [])) = (os, d', ms) H0 : logs_sorted net H1 : raft_intermediate_reachable net H2 : nwState net h = d H3 : forall h' : name, st' h' = update name_eq_dec (nwState net) h d' h' H4 : forall p : packet, In p ps' -> In p (nwPackets net) \\\\/ In p (send_packets h ms) Unable to unify \"(let (out, state) := applyEntries h d (rev (filter (fun x : entry => (lastApplied d <? eIndex x) && (eIndex x <=? commitIndex d)) (findGtIndex (log d) (lastApplied d)))) in (out, RaftState.set_raft_data_lastApplied term name entry logIndex serverType data clientId output state (if lastApplied state <? commitIndex state then commitIndex state else lastApplied state), [])) = (os, d', ms)\" with \"logs_sorted {| nwPackets := ps'; nwState := st' |}\".", "type": "cannot_unify", "handled": true}]}, "chat": [], "original": "intros. unfold raft_net_invariant_do_generic_server, doGenericServer. intros. eapply H.", "succ": false}]