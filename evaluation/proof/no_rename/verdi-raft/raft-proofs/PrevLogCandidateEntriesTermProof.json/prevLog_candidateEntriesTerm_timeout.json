[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": ["unfold refined_raft_net_invariant_timeout in *.", "intros.", "unfold prevLog_candidateEntriesTerm in *.", "intros."], "tactic": "apply H1 with (p:=p) (t:=t) (leaderId:=leaderId) (prevLogIndex:=prevLogIndex) (prevLogTerm:=prevLogTerm) (entries:=entries) (leaderCommit:=leaderCommit); auto.", "exn": "In environment orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params rri : raft_refinement_interface cei : candidate_entries_interface cti : cronies_term_interface cci : cronies_correct_interface net : network h : name st' : name -> data ps' : list packet gd : electionsData out : list raft_output d : raft_data l : list (name * msg) H : handleTimeout h (snd (nwState net h)) = (out, d, l) H0 : gd = update_elections_data_timeout h (nwState net h) H1 : forall (p : packet) (t : term) (leaderId : name) (prevLogIndex : logIndex) (prevLogTerm : term) (entries : list entry) (leaderCommit : logIndex), In p (nwPackets net) -> pBody p = AppendEntries t leaderId prevLogIndex prevLogTerm entries leaderCommit -> 0 < prevLogTerm -> candidateEntriesTerm prevLogTerm (nwState net) H2 : refined_raft_intermediate_reachable net H3 : forall h' : name, st' h' = update name_eq_dec (nwState net) h (gd, d) h' H4 : forall p' : packet, In p' ps' -> In p' (nwPackets net) \\\\/ In p' (send_packets h l) p : packet t : term leaderId : name prevLogIndex : logIndex prevLogTerm : term entries : list entry leaderCommit : logIndex H5 : In p (nwPackets {| nwPackets := ps'; nwState := st' |}) H6 : pBody p = AppendEntries t leaderId prevLogIndex prevLogTerm entries leaderCommit H7 : 0 < prevLogTerm Unable to unify \"candidateEntriesTerm prevLogTerm (nwState net)\" with \"candidateEntriesTerm prevLogTerm (nwState {| nwPackets := ps'; nwState := st' |})\".", "type": "cannot_unify", "handled": true}]}, "chat": [], "original": "intros. unfold refined_raft_net_invariant_timeout in *. intros. unfold prevLog_candidateEntriesTerm in *. intros. unfold prevLog_candidateEntriesTerm_invariant in *. apply H1 with (p:=p) (t:=t) (leaderId:=leaderId) (prevLogIndex:=prevLogIndex) (prevLogTerm:=prevLogTerm) (entries:=entries) (leaderCommit:=leaderCommit); auto.", "succ": false}]