[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": ["intros h d os d' ms H.", "unfold doGenericServer in H."], "tactic": "destruct (applyEntries h d (rev (filter (fun x => lastApplied d <? eIndex x && eIndex x <=? commitIndex d) (findGtIndex (log d) (lastApplied d))))).", "exn": "In environment orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params rri : raft_refinement_interface cti : cronies_term_interface tsi : term_sanity_interface vci : votes_correct_interface cci : cronies_correct_interface h : name d : raft_data os : list raft_output d' : raft_data ms : list (name * msg) H : (let (out, state) := applyEntries h d (rev (filter (fun x : entry => (lastApplied d <? eIndex x) && (eIndex x <=? commitIndex d)) (findGtIndex (log d) (lastApplied d)))) in (out, RaftState.set_raft_data_lastApplied term name entry logIndex serverType data clientId output state (if lastApplied state <? commitIndex state then commitIndex state else lastApplied state), [])) = (os, d', ms) x : entry The term \"eIndex x\" has type \"logIndex\" while it is expected to have type \"bool\".", "type": "wrong_type", "handled": true}, {"ctx": ["intros h d os d' ms H.", "unfold doGenericServer in H.", "inversion H."], "tactic": "reflexivity.", "exn": "In environment orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params rri : raft_refinement_interface cti : cronies_term_interface tsi : term_sanity_interface vci : votes_correct_interface cci : cronies_correct_interface h : name d : raft_data os : list raft_output d' : raft_data ms : list (name * msg) H : (let (out, state) := applyEntries h d (rev (filter (fun x : entry => (lastApplied d <? eIndex x) && (eIndex x <=? commitIndex d)) (findGtIndex (log d) (lastApplied d)))) in (out, RaftState.set_raft_data_lastApplied term name entry logIndex serverType data clientId output state (if lastApplied state <? commitIndex state then commitIndex state else lastApplied state), [])) = (os, d', ms) H1 : (let (out, state) := applyEntries h d (rev (filter (fun x : entry => (lastApplied d <? eIndex x) && (eIndex x <=? commitIndex d)) (findGtIndex (log d) (lastApplied d)))) in (out, mkRaft_data (currentTerm state) (votedFor state) (leaderId state) (log state) (commitIndex state) (if lastApplied state <? commitIndex state then commitIndex state else lastApplied state) (stateMachine state) (nextIndex state) (matchIndex state) (shouldSend state) (votesReceived state) (type state) (clientCache state) (electoralVictories state), [])) = (os, d', ms) Unable to unify \"type d\" with \"type d'\".", "type": "cannot_unify", "handled": true}]}, "chat": [], "original": "intros h d os d' ms H. unfold doGenericServer in H. destruct (applyEntries h d (rev (filter (fun x => lastApplied d <? eIndex x && eIndex x <=? commitIndex d) (findGtIndex (log d) (lastApplied d))))). inversion H. reflexivity.", "succ": false}]