[{"history": {"proof": "", "repairs": [], "exceptions": []}, "chat": [], "original": "intros. intros l h st o st' H. unfold log_to_ks'. unfold clientCache_to_ks. unfold clientCache_to_ks in H. rewrite H. unfold clientCache_to_ks. rewrite map_map. simpl. apply a_equiv_sym. induction l. - simpl. auto. - simpl. pose proof lmi as [_ Hlog_matching_invariant]. remember (cacheApplyEntry st a) as cacheRes eqn: Heq_cacheRes. destruct cacheRes as [out st'']. assert (H_cache_apply: cacheApplyEntry st a = (out,st'')) by (rewrite Heq_cacheRes; reflexivity). apply Hlog_matching_invariant in H_cache_apply. specialize (IHl st'' h st''). rewrite H_cache_apply. pose proof handleAppendEntries_logs_sorted as [H1 _]. apply H1 with (net:=_)(p:=_)(t:=_)(n:=_)(pli:=_)(plt:=_)(es:=_)(ci:=_)(m:=_) in H_cache_apply. apply a_equiv_trans with (l':=log_to_ks' [a] (clientCache_to_ks (clientCache st))) in H_cache_apply. + apply H_cache_apply. + apply log_to_ks'_a_equiv. apply IHl. + apply in_eq.", "succ": false}]