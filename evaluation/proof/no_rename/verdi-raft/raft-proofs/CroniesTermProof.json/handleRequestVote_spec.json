[{"history": {"proof": "intros h st t h' pli plt st' m H. unfold handleRequestVote in H. destruct (t <? currentTerm st) as [case1 | case2]. - inversion H. hauto l: on depth: 3. - destruct (advanceCurrentTerm st t) eqn: adv_eq. inversion H. unfold advanceCurrentTerm in adv_eq. qsimpl.", "repairs": ["", "", "", "", "", "hammer", "", "", "", "", "exp_cannot_apply"], "exceptions": [{"ctx": ["intros h st t h' pli plt st' m H.", "unfold handleRequestVote in H.", "destruct (t <? currentTerm st) as [case1 | case2].", "-", "inversion H."], "tactic": "-", "exn": "Wrong bullet -: Current bullet - is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["intros h st t h' pli plt st' m H.", "unfold handleRequestVote in H.", "destruct (t <? currentTerm st) as [case1 | case2].", "-", "inversion H.", "shelve.", "-", "destruct (advanceCurrentTerm st t) eqn: adv_eq.", "inversion H.", "unfold advanceCurrentTerm in adv_eq."], "tactic": "remember (currentTerm st <? t) as term_lt.", "exn": "Illegal application (Non-functional construction): The expression \"currentTerm\" of type \"term\" cannot be applied to the term \"st\" : \"RaftState.raft_data term name entry logIndex serverType data clientId output\"", "type": "exp_cannot_apply", "handled": true}, {"ctx": ["intros h st t h' pli plt st' m H.", "unfold handleRequestVote in H.", "destruct (t <? currentTerm st) as [case1 | case2].", "-", "inversion H.", "shelve.", "-", "destruct (advanceCurrentTerm st t) eqn: adv_eq.", "inversion H.", "unfold advanceCurrentTerm in adv_eq.", "qsimpl."], "tactic": "destruct term_lt.", "exn": "No such goal.", "type": "no_goal", "handled": true}]}, "chat": [], "original": "intros h st t h' pli plt st' m H. unfold handleRequestVote in H. destruct (t <? currentTerm st) as [case1 | case2]. - inversion H. - destruct (advanceCurrentTerm st t) eqn: adv_eq. + inversion H. subst. unfold advanceCurrentTerm in adv_eq. remember (currentTerm st <? t) as term_lt. destruct term_lt. * inversion adv_eq. rewrite <- H0. apply Nat.ltb_lt in Heqterm_lt. auto. * inversion adv_eq. + destruct (leaderId r) eqn: lid_eq. * destruct (currentTerm st =? currentTerm r) eqn: cTerm_eq. -- inversion H. -- inversion H. * destruct (currentTerm st =? currentTerm r) eqn: cTerm_eq. -- inversion H. -- inversion H.", "succ": true}]