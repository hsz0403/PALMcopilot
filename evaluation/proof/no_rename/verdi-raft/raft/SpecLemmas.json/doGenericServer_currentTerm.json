[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": ["intros h st os st' ms H.", "unfold doGenericServer in H.", "inversion H as [H'].", "apply doGenericServer_commitIndex in H'."], "tactic": "rewrite H'.", "exn": "Found no subterm matching \"commitIndex st'\" in the current goal.", "type": "no_subterm", "handled": true}, {"ctx": ["intros h st os st' ms H.", "unfold doGenericServer in H.", "inversion H as [H'].", "apply doGenericServer_commitIndex in H'."], "tactic": "reflexivity.", "exn": "In environment orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params h : name st : raft_data os : list raft_output st' : raft_data ms : list (name * msg) H : (let (out, state) := applyEntries h st (rev (filter (fun x : entry => (lastApplied st <? eIndex x) && (eIndex x <=? commitIndex st)) (findGtIndex (log st) (lastApplied st)))) in (out, {[state with lastApplied := if lastApplied state <? commitIndex state then commitIndex state else lastApplied state]}, [])) = (os, st', ms) H' : commitIndex st' = commitIndex st Unable to unify \"currentTerm st\" with \"currentTerm st'\".", "type": "cannot_unify", "handled": true}]}, "chat": [], "original": "intros h st os st' ms H. unfold doGenericServer in H. inversion H as [H']. apply doGenericServer_commitIndex in H'. rewrite H'. reflexivity.", "succ": false}]