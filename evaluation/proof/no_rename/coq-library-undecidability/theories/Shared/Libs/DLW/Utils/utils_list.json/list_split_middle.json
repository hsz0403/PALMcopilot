[{"history": {"proof": "", "repairs": [], "exceptions": []}, "chat": [], "original": "intros. intros H1 H2 H3. apply list_app_inj in H3 as [H4 H5]. apply (list_cons_app_cons_eq_inv X l1 l2 r1 r2 x1) in H5 as [H6 | H7]. - destruct H6 as [m [H8 H9]]. apply list_app_inj in H9 as [H10 H11]. split. + rewrite H8. symmetry. apply H10. + split. * apply elt_eq_unit with (l1:=m) (l2:=r1). apply H11. * reflexivity. - apply (list_cons_app_cons_eq_inv X l1 l2 r1 r2 x2) in H7 as [H12 | H13]. + destruct H12 as [m [H14 H15]]. apply list_app_inj in H15 as [H16 H17]. apply map_ext_in_iff. intros a Ha. apply in_split in Ha as [l3 [l4 H18]]. apply list_app_inj in H18 as [H19 H20]. apply app_inv_tail in H20 as H21. apply app_inv_head in H19. rewrite H19. assert (H22: x2 = x1). { apply app_inv_head in H21 as H22. apply app_inv_tail in H22. apply H22. } split. * rewrite <- H21, <- H19, <- H16. reflexivity. * split. { rewrite H22. reflexivity. } { rewrite app_nil_l in H17. symmetry. apply H17. } + destruct H13 as [m [H23 H24]]. apply app_eq_unit in H24 as [[H25 H26] | [H27 H28]]. * apply app_eq_unit in H25 as [H29 H30]. apply elt_eq_unit in H30 as [H31 [H32 H33]]. subst. apply list_app_eq_inv in H23 as [H34 | H35]. { destruct H34 as [lm [l3 H34]]. rewrite H34 in H31. exfalso. apply H2. rewrite H29. apply in_eq. } { destruct H35 as [lm [l3 H35]]. rewrite H35 in H2. apply H2. apply in_eq. } * apply app_eq_unit in H28 as [H29 H30]. apply elt_eq_unit in H29 as [H31 [H32 H33]]. subst. { assert (H34: l2 = r2 /\\ (r1 = l1 \\/ l1 = r1)). { apply list_app_inj in H23. auto. } destruct H34 as [H34 | H34]. + destruct H34. split. { apply app_inv_head in H23. apply app_inv_head. apply H23. } { split. { symmetry. apply app_nil_l. } { symmetry. apply app_nil_l. } } + destruct H34. { split. apply app_eq_unit in H30 as [H36 H37]. apply H36. split. assert (H38: l1 = cons X x2 r1). reflexivity. rewrite H38. reflexivity. assert (H39: cons X x1 r2 = r2). reflexivity. apply H39. } { split. apply app_eq_unit in H29 as [H35 H36]. apply H35. split. assert (H37: cons X x1 r2 = r1). reflexivity. apply H37. assert (H38: l1 = l2). reflexivity. apply H38. }", "succ": false}]