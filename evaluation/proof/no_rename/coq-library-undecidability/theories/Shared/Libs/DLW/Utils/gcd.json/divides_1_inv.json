[{"history": {"proof": "intros H. destruct H as [H1 H2]. sauto l: on dep: on depth: 3.", "repairs": ["", "", "hammer"], "exceptions": [{"ctx": ["intros H."], "tactic": "apply mult_is_one in H.", "exn": "Unable to apply lemma of type \"forall p q : nat, p * q = 1 -> p = 1 /\\\\ q = 1\" on hypothesis of type \"p div 1\".", "type": "cannot_apply_in", "handled": true}, {"ctx": ["intros H.", "destruct H as [H1 H2]."], "tactic": "apply Nat.eq_mul_1 in H2.", "exn": "Unable to apply lemma of type \"forall n m : nat, n * m = 1 <-> n = 1 /\\\\ m = 1\" on hypothesis of type \"1 = H1 * p\".", "type": "cannot_apply_in", "handled": true}, {"ctx": ["intros H.", "destruct H as [H1 H2].", "destruct H2 as [H3 H4]."], "tactic": "apply Nat.eq_mul_1_nonneg in H1.", "exn": "Unable to apply lemma of type \"forall n m : nat, 0 <= n -> n * m = 1 -> n = 1 /\\\\ m = 1\" on hypothesis of type \"nat\".", "type": "cannot_apply_in", "handled": true}, {"ctx": ["intros H.", "destruct H as [H1 H2].", "destruct H2 as [H3 H4]."], "tactic": ["destruct H1 as [H5 H6].", ""], "exn": "Expects a disjunctive pattern with 2 branches.", "type": "num_branch", "handled": false}]}, "chat": [], "original": "intros H. apply mult_is_one in H. destruct H as [H1 H2]. apply Nat.eq_mul_1 in H2. destruct H2 as [H3 H4]. apply Nat.eq_mul_1_nonneg in H1. destruct H1 as [H5 H6]. rewrite H5, H6. symmetry. apply Nat.eq_mul_1_nonneg'; auto.", "succ": true}]