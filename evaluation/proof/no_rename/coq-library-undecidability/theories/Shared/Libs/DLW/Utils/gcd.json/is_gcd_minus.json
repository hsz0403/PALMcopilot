[{"history": {"proof": "", "repairs": [], "exceptions": []}, "chat": [], "original": "intros p q Hle Hgcd. unfold is_gcd in Hgcd. unfold is_gcd. split. - apply Nat.le_trans with (n:=p). + apply Nat.sub_le_mono_r with (n:=q) (m:=p) (p:=p). apply Hle. + apply Nat.le_sub_le_add_l. * apply Nat.le_trans with (n:=q). -- apply Nat.le_trans with (n:=q-p). ++ apply Nat.le_add_le_sub_r. apply Hle. ++ rewrite Nat.add_sub_assoc. apply Nat.le_sub_le_add_l. apply Nat.le_add_le_sub_r. apply Nat.le_trans with (n:=q). apply Hle. apply Nat.le_refl. -- apply Nat.le_refl. - split. + split. * destruct Hgcd as [Hdivp [Hdivq _]]. rewrite <- Nat.sub_le_mono_r with (n:=p) (m:=q) (p:=p). apply Hle. apply Hdivp. * destruct Hgcd as [Hdivp [Hdivq Hdivr]]. destruct Hdivr as [k Hdivrk]. intros k' Hdivkp Hdivk'q. apply Hdivr. -- apply Nat.le_trans with (n:=q). ++ apply Nat.le_add_le_sub_r. apply Hle. ++ apply Hdivq. -- apply Hdivrk. apply Hdivkp. apply Hdivk'q. + intros k Hdivkp Hdivkq. apply Hgcd. split. * apply Nat.sub_le_mono_r with (n:=p) (m:=q) (p:=p). apply Hle. apply Hdivkp. * apply Hdivkq.", "succ": false}]