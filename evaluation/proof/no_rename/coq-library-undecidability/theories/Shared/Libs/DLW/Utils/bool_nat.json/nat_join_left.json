[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": ["apply binary_le_nat_meet."], "tactic": "apply nat_meet_dio.", "exn": "In environment n, m : nat H : forall a b c : nat, a = b \u21e3 c -> exists x y : nat, b = a + x /\\\\ c = a + y /\\\\ a \u2272 a + x /\\\\ a \u2272 a + y /\\\\ x \u2272 x + y Unable to unify \"exists x y : nat, ?M1548 = ?M1547 + x /\\\\ ?M1549 = ?M1547 + y /\\\\ ?M1547 \u2272 ?M1547 + x /\\\\ ?M1547 \u2272 ?M1547 + y /\\\\ x \u2272 x + y\" with \"n \u21e3 (n \u21e1 m) = n\".", "type": "cannot_unify", "handled": true}]}, "chat": [], "original": "apply binary_le_nat_meet. apply nat_meet_dio. exists (m - n), (n - m). split. - rewrite Nat.sub_add_distr. rewrite Nat.add_comm. rewrite Nat.add_sub. reflexivity. - split. * rewrite Nat.sub_add_distr. rewrite Nat.add_comm. rewrite Nat.add_sub. reflexivity. * split. + apply binary_le_refl. + apply power_2_minus_1_gt. apply Nat.neq_sym. intros contra. apply binary_le_zero_inv in contra. congruence. split. apply le_lt_or_eq. left. apply Nat.sub_lt. apply lt_n_Sm_le. apply contra. apply leb_iff_conv. rewrite leb_correct_conv. apply not_gt. intros gt_contra. apply contra. rewrite Nat.mul_comm. apply Nat.tail_mul_spec. apply Nat.neq_sym. intros contra_mul. apply Nat.gcd_eq_0_l in contra_mul. congruence.", "succ": false}]