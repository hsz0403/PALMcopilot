[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": ["exists Q.", "split.", "-", "apply Q_no_self_loops.", "-", "split.", "+", "apply Q_bound.", "+", "split.", "*"], "tactic": "apply P_imp_Q.", "exn": "In environment n : nat f := fun (k i : nat) (\u03c1 : mm_instr (pos n)) => match \u03c1 with | INC\u2090 x => INC\u2090 (pos_nxt x) | DEC\u2090 x j => DEC\u2090 (pos_nxt x) (if Nat.eq_dec i j then 1 + k else if le_lt_dec k j then 0 else j) end : nat -> nat -> mm_instr (pos n) -> mm_instr (pos (S n)) g := fix g (k i : nat) P {struct P} : list (mm_instr (pos (S n))) := match P with | nil => nil | \u03c1 :: P0 => f k i \u03c1 :: g k (S i) P0 end : nat -> nat -> list (mm_instr (pos n)) -> list (mm_instr (pos (S n))) g_app : forall (k i : nat) P Q, g k i (P ++ Q) = g k i P ++ g k (length P + i) Q g_app_inv : forall (k i : nat) P (l r : list (mm_instr (pos (S n)))), g k i P = l ++ r -> exists L R : list (mm_instr (pos n)), P = L ++ R /\\\\ l = g k i L /\\\\ r = g k (length l + i) R length_g : forall (l i : nat) P, length (g l i P) = length P g_subcode : forall (k i : nat) P (j : nat) (\u03c1 : mm_instr (pos n)), (j, \u03c1 :: nil) <sc (i, P) -> (j, f k j \u03c1 :: nil) <sc (i, g k i P) subcode_g : forall (k i : nat) P (j : nat) (\u03c1 : mm_instr (pos (S n))), (j, \u03c1 :: nil) <sc (i, g k i P) -> exists \u03c1' : mm_instr (pos n), (j, \u03c1' :: nil) <sc (i, P) /\\\\ \u03c1 = f k j \u03c1' g_loops : forall (k i : nat) P, 1 <= i -> i + length P <= k -> mm_no_self_loops (i, g k i P) P : list (mm_instr (pos n)) R := DEC\u2090 pos0 0 :: DEC\u2090 pos0 (3 + lP) :: DEC\u2090 pos0 (2 + lP) :: nil : list (mm_instr (pos (S n))) sc_R_1 : (1 + lP, DEC\u2090 pos0 0 :: nil) <sc (1 + lP, R) sc_R_2 : (2 + lP, DEC\u2090 pos0 (1 + (2 + lP)) :: DEC\u2090 pos0 (2 + lP) :: nil) <sc (1 + lP, R) R_sc : forall (i : nat) (rho : mm_instr (pos (S n))), (i, rho :: nil) <sc (1 + lP, R) -> i = 1 + lP /\\\\ rho = DEC\u2090 pos0 0 \\\\/ i = 2 + lP /\\\\ rho = DEC\u2090 pos0 (3 + lP) \\\\/ i = 3 + lP /\\\\ rho = DEC\u2090 pos0 (2 + lP) R_no_self_loops : mm_no_self_loops (1 + lP, R) Q := g (1 + lP) 1 P ++ R : list (mm_instr (pos (S n))) Q_no_self_loops : mm_no_self_loops (1, Q) sc_Q_1 : forall (j : nat) (\u03c1 : mm_instr (pos n)), (j, \u03c1 :: nil) <sc (1, P) -> (j, f (1 + lP) j \u03c1 :: nil) <sc (1, Q) sc_Q_2 : (1 + lP, DEC\u2090 pos0 0 :: DEC\u2090 pos0 (3 + lP) :: DEC\u2090 pos0 (2 + lP) :: nil) <sc (1, Q) sc_Q_3 : (2 + lP, DEC\u2090 pos0 (3 + lP) :: DEC\u2090 pos0 (2 + lP) :: nil) <sc (1, Q) Q_sc : forall (j : nat) (\u03c1 : mm_instr (pos (S n))), (j, \u03c1 :: nil) <sc (1, Q) -> (exists \u03c1' : mm_instr (pos n), (j, \u03c1' :: nil) <sc (1, P) /\\\\ \u03c1 = f (1 + lP) j \u03c1') \\\\/ j = 1 + lP /\\\\ \u03c1 = DEC\u2090 pos0 0 \\\\/ j = 2 + lP /\\\\ \u03c1 = DEC\u2090 pos0 (3 + lP) \\\\/ j = 3 + lP /\\\\ \u03c1 = DEC\u2090 pos0 (2 + lP) Q_length : length Q = lP + 3 Q_bound : forall (i : nat) (x : pos (S n)) (j : nat), (i, DEC\u2090 x j :: nil) <sc (1, Q) -> j < 1 + length Q P_imp_Q : forall s s0 : nat * vec nat n, in_code (fst s) (1, P) -> (1, P) // s ~~> s0 -> (1, Q) // (fst s, 0 ## snd s) \u2193 Q_imp_P : forall s s0 : nat * vec nat (S n), in_code (fst s) (1, P) -> snd s#>pos0 = 0 -> (1, Q) // s ~~> s0 -> (1, P) // (fst s, vec_tail (snd s)) \u2193 v : vec nat n Unable to unify \"(1, P) // ?M1462 ->> ?M1463 /\\\\ out_code (fst ?M1463) (1, P)\" with \"exists st' : nat * vec nat n, (1, P) // (1, v) ~~> st'\".", "type": "cannot_unify", "handled": true}, {"ctx": ["exists Q.", "split.", "-", "apply Q_no_self_loops.", "-", "split.", "+", "apply Q_bound.", "+", "split.", "*"], "tactic": "*", "exn": "[Focus] Wrong bullet *: Current bullet * is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["exists Q.", "split.", "-", "apply Q_no_self_loops.", "-", "split.", "+", "apply Q_bound.", "+", "split.", "*", "shelve.", "*"], "tactic": "apply Q_imp_P.", "exn": "In environment n : nat f := fun (k i : nat) (\u03c1 : mm_instr (pos n)) => match \u03c1 with | INC\u2090 x => INC\u2090 (pos_nxt x) | DEC\u2090 x j => DEC\u2090 (pos_nxt x) (if Nat.eq_dec i j then 1 + k else if le_lt_dec k j then 0 else j) end : nat -> nat -> mm_instr (pos n) -> mm_instr (pos (S n)) g := fix g (k i : nat) P {struct P} : list (mm_instr (pos (S n))) := match P with | nil => nil | \u03c1 :: P0 => f k i \u03c1 :: g k (S i) P0 end : nat -> nat -> list (mm_instr (pos n)) -> list (mm_instr (pos (S n))) g_app : forall (k i : nat) P Q, g k i (P ++ Q) = g k i P ++ g k (length P + i) Q g_app_inv : forall (k i : nat) P (l r : list (mm_instr (pos (S n)))), g k i P = l ++ r -> exists L R : list (mm_instr (pos n)), P = L ++ R /\\\\ l = g k i L /\\\\ r = g k (length l + i) R length_g : forall (l i : nat) P, length (g l i P) = length P g_subcode : forall (k i : nat) P (j : nat) (\u03c1 : mm_instr (pos n)), (j, \u03c1 :: nil) <sc (i, P) -> (j, f k j \u03c1 :: nil) <sc (i, g k i P) subcode_g : forall (k i : nat) P (j : nat) (\u03c1 : mm_instr (pos (S n))), (j, \u03c1 :: nil) <sc (i, g k i P) -> exists \u03c1' : mm_instr (pos n), (j, \u03c1' :: nil) <sc (i, P) /\\\\ \u03c1 = f k j \u03c1' g_loops : forall (k i : nat) P, 1 <= i -> i + length P <= k -> mm_no_self_loops (i, g k i P) P : list (mm_instr (pos n)) R := DEC\u2090 pos0 0 :: DEC\u2090 pos0 (3 + lP) :: DEC\u2090 pos0 (2 + lP) :: nil : list (mm_instr (pos (S n))) sc_R_1 : (1 + lP, DEC\u2090 pos0 0 :: nil) <sc (1 + lP, R) sc_R_2 : (2 + lP, DEC\u2090 pos0 (1 + (2 + lP)) :: DEC\u2090 pos0 (2 + lP) :: nil) <sc (1 + lP, R) R_sc : forall (i : nat) (rho : mm_instr (pos (S n))), (i, rho :: nil) <sc (1 + lP, R) -> i = 1 + lP /\\\\ rho = DEC\u2090 pos0 0 \\\\/ i = 2 + lP /\\\\ rho = DEC\u2090 pos0 (3 + lP) \\\\/ i = 3 + lP /\\\\ rho = DEC\u2090 pos0 (2 + lP) R_no_self_loops : mm_no_self_loops (1 + lP, R) Q := g (1 + lP) 1 P ++ R : list (mm_instr (pos (S n))) Q_no_self_loops : mm_no_self_loops (1, Q) sc_Q_1 : forall (j : nat) (\u03c1 : mm_instr (pos n)), (j, \u03c1 :: nil) <sc (1, P) -> (j, f (1 + lP) j \u03c1 :: nil) <sc (1, Q) sc_Q_2 : (1 + lP, DEC\u2090 pos0 0 :: DEC\u2090 pos0 (3 + lP) :: DEC\u2090 pos0 (2 + lP) :: nil) <sc (1, Q) sc_Q_3 : (2 + lP, DEC\u2090 pos0 (3 + lP) :: DEC\u2090 pos0 (2 + lP) :: nil) <sc (1, Q) Q_sc : forall (j : nat) (\u03c1 : mm_instr (pos (S n))), (j, \u03c1 :: nil) <sc (1, Q) -> (exists \u03c1' : mm_instr (pos n), (j, \u03c1' :: nil) <sc (1, P) /\\\\ \u03c1 = f (1 + lP) j \u03c1') \\\\/ j = 1 + lP /\\\\ \u03c1 = DEC\u2090 pos0 0 \\\\/ j = 2 + lP /\\\\ \u03c1 = DEC\u2090 pos0 (3 + lP) \\\\/ j = 3 + lP /\\\\ \u03c1 = DEC\u2090 pos0 (2 + lP) Q_length : length Q = lP + 3 Q_bound : forall (i : nat) (x : pos (S n)) (j : nat), (i, DEC\u2090 x j :: nil) <sc (1, Q) -> j < 1 + length Q P_imp_Q : forall s s0 : nat * vec nat n, in_code (fst s) (1, P) -> (1, P) // s ~~> s0 -> (1, Q) // (fst s, 0 ## snd s) \u2193 Q_imp_P : forall s s0 : nat * vec nat (S n), in_code (fst s) (1, P) -> snd s#>pos0 = 0 -> (1, Q) // s ~~> s0 -> (1, P) // (fst s, vec_tail (snd s)) \u2193 v : vec nat n Unable to unify \"(1, Q) // ?M1462 ->> ?M1463 /\\\\ out_code (fst ?M1463) (1, Q)\" with \"exists st' : nat * vec nat (S n), (1, Q) // (1, 0 ## v) ~~> st'\".", "type": "cannot_unify", "handled": true}]}, "chat": [], "original": "exists Q. split. - apply Q_no_self_loops. - split. + apply Q_bound. + split. * apply P_imp_Q. * apply Q_imp_P.", "succ": false}]