[{"history": {"proof": "", "repairs": [], "exceptions": []}, "chat": [], "original": "intros. intros [f Hp]. unfold enumerable in Hp. destruct Hp as [g Hg]. exists (fun y : Y => match g 0 with Some x => if f x then Some x else None | None => None end). intros y. split. - intros [x Hpx]. exists x. unfold enumerator. rewrite Hpx. destruct (g 0) eqn: G0. + destruct (f x) eqn: Fx. * reflexivity. * contradiction. + contradiction. - intros [x [Hx Hpx]]. unfold enumerator in Hg. specialize (Hg x). rewrite Hx in Hg. destruct (g 0) eqn: G0. + destruct (f x) eqn: Fx. * inversion Hg. rewrite Fx. reflexivity. * discriminate. + discriminate.", "succ": false}]