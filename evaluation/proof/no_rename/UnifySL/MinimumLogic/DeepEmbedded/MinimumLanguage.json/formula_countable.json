[{"history": {"proof": "", "repairs": [], "exceptions": []}, "chat": [], "original": "intros Var H. unfold Countable. intros x y H1. induction x using expr_ind; induction y using expr_ind. - destruct (IHx y H1) as [f Hf]. exists (fun n => inl (f n)). intros n. split. intro H2. inversion H2. intros H3. apply Hf in H3. rewrite H3. reflexivity. - destruct (H I) as [f Hf]. exists (fun n => inl (f n)). intros n. split. intro H2. inversion H2. intros H3. apply Hf in H3. rewrite H3. reflexivity. - destruct (H I) as [f Hf]. exists (fun n => inr (f n)). intros n. split. intro H2. inversion H2. intros H3. apply Hf in H3. rewrite H3. reflexivity. - destruct (IHx1 y1 H1) as [f1 Hf1]. destruct (IHx2 y2 H2) as [f2 Hf2]. exists (fun n => (f1 n, f2 n)). intros n. split; intros H3; destruct H3 as [H3 H4]; split; [apply Hf1 | apply Hf2]; auto.", "succ": false}]