[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": ["intros."], "tactic": "split.", "exn": "Not an inductive product.", "type": "not_inductive_product", "handled": true}]}, "chat": [], "original": "intros. split. - intros H. pose proof (deduction_impp_elim _ (funcp (x || y) z) (funcp x z && funcp y z)) as H1. apply H1. + apply H. + clear H H1. apply deduction_andp_intros. * apply deduction_impp_intros. ++ apply deduction_orp_intros1. apply deduction_impp_intros. apply deduction_contrapositivePN. intro. apply deduction_impp_elim with (x && y). ** apply deduction_andp_elim1. apply deduction_weaken1 with y. apply deduction_contrapositivePN. intro. apply deduction_impp_trans with (x && y); apply deduction_contrapositivePN; auto. ** apply deduction_andp_elim1. apply deduction_weaken1 with x. apply deduction_contrapositivePN. intro. apply deduction_impp_trans with (x && y); apply deduction_contrapositivePN; auto. ++ apply deduction_andp_intros. ** apply deduction_impp_trans with z. apply deduction_impp_elim with (funcp (x || y) z). *** apply deduction_andp_elim2. apply H. *** apply deduction_impp_trans with (funcp x z && funcp y z); apply deduction_contrapositivePN; auto. ** apply deduction_impp_trans with z. apply deduction_impp_elim with (funcp (x || y) z). *** apply deduction_andp_elim2. apply H. *** apply deduction_impp_trans with (funcp x z && funcp y z); apply deduction_contrapositivePN; auto. * apply deduction_impp_intros. apply deduction_andp_elim1. apply H. - intros H. apply deduction_andp_elim1 in H. apply deduction_impp_trans with (funcp (x || y) z). + apply deduction_impp_elim with (funcp x z && funcp y z). apply H. + apply deduction_andp_intros. * apply deduction_impp_intros. apply deduction_impp_elim with (funcp x z). apply H. * apply deduction_impp_intros. apply deduction_impp_elim with (funcp y z). apply H.", "succ": false}]