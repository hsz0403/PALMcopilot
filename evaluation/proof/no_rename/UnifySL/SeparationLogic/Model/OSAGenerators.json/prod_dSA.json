[{"history": {"proof": "", "repairs": [], "exceptions": [{"ctx": ["unfold DownwardsClosedSeparationAlgebra in *."], "tactic": "unfold SeparationAlgebra in *.", "exn": "Cannot coerce SeparationAlgebra to an evaluable reference.", "type": "not_evaluable", "handled": true}, {"ctx": ["unfold DownwardsClosedSeparationAlgebra in *.", "unfold Join in *.", "unfold Relation in *.", "intros."], "tactic": "split.", "exn": "Unable to find an instance for the variable x.", "type": "no_instance_var", "handled": true}]}, "chat": [], "original": "unfold DownwardsClosedSeparationAlgebra in *. unfold SeparationAlgebra in *. unfold Join in *. unfold Relation in *. intros. split. - intros x y z H1 H2. destruct H1 as [H1l H1r]. destruct H2 as [H2l H2r]. split; [apply join_assoc with (mxy := (a0, b)) |]. + exists z. split; [apply H1r | split; [apply H1l | apply H2r]]. - intros x y H1 H2. destruct H1 as [H1l H1r]. destruct H2 as [H2l H2r]. destruct H1l as [m1 [H1l1 [H1l2 H1l3]]]. destruct H2l as [m2 [H2l1 [H2l2 H2l3]]]. destruct (join_Korder_up m1 m2 a b H1l2 H2l2) as [a' [b' [H3 [H4 H5]]]]. split. + exists a'. split; [apply H3 | split; [apply H4 | apply H1r]]. + exists b'. split; [apply H5 | split; [apply H5 | apply H2r]].", "succ": false}]