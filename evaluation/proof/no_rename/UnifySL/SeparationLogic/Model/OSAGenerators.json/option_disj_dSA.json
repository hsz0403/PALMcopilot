[{"history": {"proof": "", "repairs": [], "exceptions": []}, "chat": [], "original": "unfold DownwardsClosedSeparationAlgebra. intros worlds R J SA dSA. unfold SeparationAlgebra, DownwardsClosedSeparationAlgebra in *. unfold Join in J. unfold Relation in R. intros x y Heq Hres. induction x as [x|]. - induction y as [y|]. + apply incr_split_smaller with (m := Some x) (m1 := Some x) (m2 := Some y); auto. * intros z Hz. apply residual_extensible with (u := x) in Hz as [e [v Hj]]. exists (Some e), (Some v). split; [|split]; auto. + apply incr_split_smaller with (m := Some x) (m1 := Some x) (m2 := None); auto. * intros z Hz. apply residual_extensible with (u := x) in Hz as [e [v Hj]]. exists (Some e), None. split; [|split]; auto. - induction y as [y|]. + apply incr_split_smaller with (m := None) (m1 := None) (m2 := Some y); auto. * intros z Hz. apply residual_extensible with (u := y) in Hz as [e [v Hj]]. exists None, (Some e). split; [|split]; auto. + apply incr_split_smaller with (m := None) (m1 := None) (m2 := None); auto. * intros z Hz. apply residual_extensible with (u := x) in Hz as [e [v Hj]]. exists None, None. split; [|split]; auto.", "succ": false}]