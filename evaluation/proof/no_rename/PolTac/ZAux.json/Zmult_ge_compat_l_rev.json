[{"history": {"proof": "intros n m p H1 H2. rewrite Z.mul_comm in H2. hauto use: Zmult_compare_compat_l, Z.mul_comm unfold: Z.ge.", "repairs": ["", "", "hammer"], "exceptions": [{"ctx": ["intros n m p H1 H2."], "tactic": "apply Zmult_ge_reg_r with (p:=Zpos p) in H2.", "exn": "In environment n, m, p : Z H1 : p > 0 H2 : p * n >= p * m The term \"p\" has type \"Z\" while it is expected to have type \"positive\".", "type": "wrong_type", "handled": true}, {"ctx": ["intros n m p H1 H2."], "tactic": "apply Zge_trans with (m:=Z.mul (Zpos p) n) in H2.", "exn": "In environment n, m, p : Z H1 : p > 0 H2 : p * n >= p * m The term \"p\" has type \"Z\" while it is expected to have type \"positive\".", "type": "wrong_type", "handled": true}, {"ctx": ["intros n m p H1 H2.", "rewrite Z.mul_comm in H2."], "tactic": "rewrite Z.mul_comm.", "exn": "Found no subterm matching \"?M1418 * ?M1419\" in the current goal.", "type": "no_subterm", "handled": true}, {"ctx": ["intros n m p H1 H2.", "rewrite Z.mul_comm in H2."], "tactic": "apply Z.mul_reg_l in H2.", "exn": "Unable to apply lemma of type \"forall n m p : Z, p <> 0 -> p * n = p * m -> n = m\" on hypothesis of type \"n * p >= p * m\".", "type": "cannot_apply_in", "handled": true}, {"ctx": ["intros n m p H1 H2.", "rewrite Z.mul_comm in H2."], "tactic": "apply Zmult_ge_compat_l.", "exn": "In environment n, m, p : Z H1 : p > 0 H2 : n * p >= p * m Unable to unify \"(?M1420 * ?M1418 ?= ?M1420 * ?M1419) = Lt\" with \"(n ?= m) = Lt\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros n m p H1 H2.", "rewrite Z.mul_comm in H2."], "tactic": "apply Z.mul_nonneg_nonneg.", "exn": "In environment n, m, p : Z H1 : p > 0 H2 : n * p >= p * m Unable to unify \"(0 ?= ?M1418 * ?M1419) = Gt\" with \"(n ?= m) = Lt\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros n m p H1 H2.", "rewrite Z.mul_comm in H2."], "tactic": "apply Z.ge_le.", "exn": "In environment n, m, p : Z H1 : p > 0 H2 : n * p >= p * m Unable to unify \"(?M1419 ?= ?M1418) = Gt\" with \"(n ?= m) = Lt\".", "type": "cannot_unify", "handled": true}]}, "chat": [], "original": "intros n m p H1 H2. apply Zmult_ge_reg_r with (p:=Zpos p) in H2. apply Zge_trans with (m:=Z.mul (Zpos p) n) in H2. - rewrite Z.mul_comm in H2. rewrite Z.mul_comm. apply Z.mul_reg_l in H2. auto. - apply Zmult_ge_compat_l. + apply Z.mul_nonneg_nonneg. + apply Z.ge_le. + apply Z.ge_le in H1. auto.", "succ": true}]