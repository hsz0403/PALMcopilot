[{"history": {"proof": "intros Phi x y. shelve.", "repairs": ["", ""], "exceptions": [{"ctx": ["intros Phi x y."], "tactic": "apply adjoint_iter.", "exn": "In environment L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Derivable L bSC : BasicSequentCalculus L Gamma minSC : MinimumSequentCalculus L Gamma ipSC : IntuitionisticPropositionalSequentCalculus L Gamma Phi : context x, y : expr Unable to unify \"(|-- fold_left ?prodp ?M1986 ?M1985 --> ?M1987 -> |-- ?M1985 --> fold_right ?funcp ?M1987 ?M1986) /\\\\ (|-- ?M1985 --> fold_right ?funcp ?M1987 ?M1986 -> |-- fold_left ?prodp ?M1986 ?M1985 --> ?M1987)\" with \"(let (derivable) := Gamma in derivable) Phi (y --> x || y)\".", "type": "cannot_unify", "handled": true}]}, "chat": [{"role": "user", "content": "I will give you a Coq proof state, including both hypotheses and a specific goal and your need to prove it. Your response should be a singular code block of Coq proof starting with \"```coq\n\", ending with \"Qed.\", without any additional explanation or commentary. Follow to these guidelines:\nIntroduce variables using unique names to avoid any conflicts.\nKeep each command distinct and separated, avoid concatenations like ';' or '[cmd|cmd]'.\nOrganize your proof with bullets like '-', '+', and '*' instead of braces ({, }). Shift to their double symbols like '--' and '++', when necessary.\nEffectively use given premises, follow the syntax and structure demonstrated in the examples provided.\n\nExample 1:\n\nHypotheses:\nn, m: nat\nIHn: m + n = n + m\n\nGoal:\nm + S n = S n + m\n\nProof:\n```coq\nsimpl. rewrite <- IHn. auto.\nQed.```\n\nExample 2:\nHypotheses:\n\nGoal:\nforall n m : nat, m + n = n + m\n\n```coq\nintros n m. induction n.\n- simpl. auto.\n- simpl. rewrite <- IHn. auto.\nQed.```\n\nSolve This Proof State:\n\nHypotheses:\nL: Language\nminL: MinimumLanguage L\npL: PropositionalLanguage L\nGamma: Derivable L\nbSC: BasicSequentCalculus L Gamma\nminSC: MinimumSequentCalculus L Gamma\nipSC: IntuitionisticPropositionalSequentCalculus L Gamma\n\nGoal:\nforall (Phi : context) (x y : expr), Phi |-- y --> x || y\n\nPremises:\nIntuitionisticPropositionalSequentCalculus : forall L : Language, PropositionalLanguage L -> Derivable L -> Prop\nRecord MinimumLanguage (L : Language) : Type := Build_MinimumLanguage { impp : expr -> expr -> expr } For Build_MinimumLanguage: Argument scopes are [_ function_scope]\nRecord PropositionalLanguage (L : Language) : Type := Build_PropositionalLanguage { andp : expr -> expr -> expr; orp : expr -> expr -> expr; falsep : expr } For Build_PropositionalLanguage: Argument scopes are [_ function_scope function_scope _]\ncontext = fun L : Language => expr -> Prop : Language -> Type Argument L is implicit and maximally inserted\nRecord Derivable (L : Language) : Type := Build_Derivable { derivable : context -> expr -> Prop } For Build_Derivable: Argument scopes are [_ function_scope]\nMinimumSequentCalculus : forall L : Language, MinimumLanguage L -> Derivable L -> Prop\nexpr = fun Language0 : Language => let (expr) := Language0 in expr : Language -> Type Argument Language is implicit and maximally inserted\nBasicSequentCalculus : forall L : Language, Derivable L -> Prop\nBuild_IntuitionisticPropositionalSequentCalculus : forall (L : Language) (pL : PropositionalLanguage L) (Gamma : Derivable L), (forall (Phi : context) (x y : expr), Phi |-- x -> Phi |-- y -> Phi |-- x && y) -> (forall (Phi : context) (x y : expr), Phi |-- x && y -> Phi |-- x) -> (forall (Phi : context) (x y : expr), Phi |-- x && y -> Phi |-- y) -> (forall (Phi : context) (x y : expr), Phi |-- x -> Phi |-- x || y) -> (forall (Phi : context) (x y : expr), Phi |-- y -> Phi |-- x || y) -> (forall (Phi : Ensemble expr) (x y z : expr), Phi;; x |-- z -> Phi;; y |-- z -> Phi;; x || y |-- z) -> (forall (Phi : context) (x : expr), Phi |-- FF -> Phi |-- x) -> IntuitionisticPropositionalSequentCalculus L Gamma\nderivable_finite_witnessed : forall (Phi : context) (y : expr), Phi |-- y -> exists xs : list expr, Forall Phi xs /\\ (fun x : expr => In x xs) |-- y where ?L : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Derivable L bSC : BasicSequentCalculus L Gamma minSC : MinimumSequentCalculus L Gamma ipSC : IntuitionisticPropositionalSequentCalculus L Gamma |- Language] ?Gamma : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Derivable L bSC : BasicSequentCalculus L Gamma minSC : MinimumSequentCalculus L Gamma ipSC : IntuitionisticPropositionalSequentCalculus L Gamma |- Derivable ?L] ?FiniteWitnessedSequentCalculus : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Derivable L bSC : BasicSequentCalculus L Gamma minSC : MinimumSequentCalculus L Gamma ipSC : IntuitionisticPropositionalSequent...\ncontextual_derivable_finite_witnessed : forall (Phi Psi : context) (y : expr), Union expr Phi Psi |-- y -> exists xs : list expr, Forall Psi xs /\\ Union expr Phi (fun x : expr => In x xs) |-- y where ?L : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Derivable L bSC : BasicSequentCalculus L Gamma minSC : MinimumSequentCalculus L Gamma ipSC : IntuitionisticPropositionalSequentCalculus L Gamma |- Language] ?Gamma : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Derivable L bSC : BasicSequentCalculus L Gamma minSC : MinimumSequentCalculus L Gamma ipSC : IntuitionisticPropositionalSequentCalculus L Gamma |- Derivable ?L] ?bSC : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Derivable L bSC : BasicSequentCalculus L Gamma minSC : MinimumSequentCalculus L Gamma ipSC : IntuitionisticProp...\nderivable_provable : forall (Phi : context) (y : expr), Phi |-- y <-> (exists xs : list expr, Forall (fun x : expr => Phi x) xs /\\ |-- multi_imp xs y) where ?L : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Derivable L bSC : BasicSequentCalculus L Gamma minSC : MinimumSequentCalculus L Gamma ipSC : IntuitionisticPropositionalSequentCalculus L Gamma |- Language] ?minL : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Derivable L bSC : BasicSequentCalculus L Gamma minSC : MinimumSequentCalculus L Gamma ipSC : IntuitionisticPropositionalSequentCalculus L Gamma |- MinimumLanguage ?L] ?GammaP : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Derivable L bSC : BasicSequentCalculus L Gamma minSC : MinimumSequentCalculus L Gamma ipSC : IntuitionisticPropositionalSequentCalculus L Gamma...\nBuild_MinimumSequentCalculus : forall (L : Language) (minL : MinimumLanguage L) (Gamma : Derivable L), (forall (Phi : context) (x y : expr), Phi |-- x -> Phi |-- x --> y -> Phi |-- y) -> (forall (Phi : Ensemble expr) (x y : expr), Phi;; x |-- y -> Phi |-- x --> y) -> MinimumSequentCalculus L Gamma\norp_elim : forall x y z : expr, |-- (x --> z) --> (y --> z) --> x || y --> z where ?L : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Derivable L bSC : BasicSequentCalculus L Gamma minSC : MinimumSequentCalculus L Gamma ipSC : IntuitionisticPropositionalSequentCalculus L Gamma |- Language] ?minL : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Derivable L bSC : BasicSequentCalculus L Gamma minSC : MinimumSequentCalculus L Gamma ipSC : IntuitionisticPropositionalSequentCalculus L Gamma |- MinimumLanguage ?L] ?pL : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Derivable L bSC : BasicSequentCalculus L Gamma minSC : MinimumSequentCalculus L Gamma ipSC : IntuitionisticPropositionalSequentCalculus L Gamma |- PropositionalLanguage ?L] ?Gamma : [L : Language minL : Minimum...\ndeduction_weaken0 : forall (Phi : context) (y : expr), |-- y -> Phi |-- y where ?L : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Derivable L bSC : BasicSequentCalculus L Gamma minSC : MinimumSequentCalculus L Gamma ipSC : IntuitionisticPropositionalSequentCalculus L Gamma |- Language] ?Gamma : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Derivable L bSC : BasicSequentCalculus L Gamma minSC : MinimumSequentCalculus L Gamma ipSC : IntuitionisticPropositionalSequentCalculus L Gamma |- Derivable ?L] ?bSC : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Derivable L bSC : BasicSequentCalculus L Gamma minSC : MinimumSequentCalculus L Gamma ipSC : IntuitionisticPropositionalSequentCalculus L Gamma |- BasicSequentCalculus ?L ?Gamma] ?GammaP : [L : Language minL : MinimumLanguage...\nTestInAxiomatization.Unnamed_thm0 : forall (Phi : context) (x1 y1 x2 y2 : expr), |-- x2 --> x1 -> |-- y1 --> y2 -> Phi |-- x1 --> y1 -> Phi |-- x2 --> y2 where ?L : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Derivable L bSC : BasicSequentCalculus L Gamma minSC : MinimumSequentCalculus L Gamma ipSC : IntuitionisticPropositionalSequentCalculus L Gamma |- Language] ?minL : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Derivable L bSC : BasicSequentCalculus L Gamma minSC : MinimumSequentCalculus L Gamma ipSC : IntuitionisticPropositionalSequentCalculus L Gamma |- MinimumLanguage ?L] ?GammaP : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Derivable L bSC : BasicSequentCalculus L Gamma minSC : MinimumSequentCalculus L Gamma ipSC...\nTestInAxiomatization.Unnamed_thm : forall (Phi : context) (y1 y2 : expr), |-- y1 --> y2 -> Phi |-- y1 -> Phi |-- y2 where ?L : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Derivable L bSC : BasicSequentCalculus L Gamma minSC : MinimumSequentCalculus L Gamma ipSC : IntuitionisticPropositionalSequentCalculus L Gamma |- Language] ?minL : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Derivable L bSC : BasicSequentCalculus L Gamma minSC : MinimumSequentCalculus L Gamma ipSC : IntuitionisticPropositionalSequentCalculus L Gamma |- MinimumLanguage ?L] ?GammaP : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Derivable L bSC : BasicSequentCalculus L Gamma minSC : MinimumSequentCalculus L Gamma ipSC : IntuitionisticPropositionalSequentCalculus L Gamma |- Provable ?L...\nTestInSequentCalculus.Unnamed_thm0 : forall (Phi : context) (x1 y1 x2 y2 : expr), |-- x2 --> x1 -> |-- y1 --> y2 -> Phi |-- x1 --> y1 -> Phi |-- x2 --> y2 where ?L : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Derivable L bSC : BasicSequentCalculus L Gamma minSC : MinimumSequentCalculus L Gamma ipSC : IntuitionisticPropositionalSequentCalculus L Gamma |- Language] ?minL : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Derivable L bSC : BasicSequentCalculus L Gamma minSC : MinimumSequentCalculus L Gamma ipSC : IntuitionisticPropositionalSequentCalculus L Gamma |- MinimumLanguage ?L] ?GammaP : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Derivable L bSC : BasicSequentCalculus L Gamma minSC : MinimumSequentCalculus L Gamma ipSC...\norp_intros1 : forall x y : expr, |-- x --> x || y where ?L : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Derivable L bSC : BasicSequentCalculus L Gamma minSC : MinimumSequentCalculus L Gamma ipSC : IntuitionisticPropositionalSequentCalculus L Gamma |- Language] ?minL : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Derivable L bSC : BasicSequentCalculus L Gamma minSC : MinimumSequentCalculus L Gamma ipSC : IntuitionisticPropositionalSequentCalculus L Gamma |- MinimumLanguage ?L] ?pL : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Derivable L bSC : BasicSequentCalculus L Gamma minSC : MinimumSequentCalculus L Gamma ipSC : IntuitionisticPropositionalSequentCalculus L Gamma |- PropositionalLanguage ?L] ?Gamma : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma :...\nprovable_multi_imp_weaken : forall (xs : list expr) (x y : expr), |-- x --> y -> |-- multi_imp xs x --> multi_imp xs y where ?L : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Derivable L bSC : BasicSequentCalculus L Gamma minSC : MinimumSequentCalculus L Gamma ipSC : IntuitionisticPropositionalSequentCalculus L Gamma |- Language] ?minL : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Derivable L bSC : BasicSequentCalculus L Gamma minSC : MinimumSequentCalculus L Gamma ipSC : IntuitionisticPropositionalSequentCalculus L Gamma |- MinimumLanguage ?L] ?Gamma : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Derivable L bSC : BasicSequentCalculus L Gamma minSC : MinimumSequentCalculus L Gamma ipSC : IntuitionisticPropositionalSequentCalculus L Gamma |- Provable ?L] ?minAX : [L...\nTestInSequentCalculus.Unnamed_thm : forall (Phi : context) (y1 y2 : expr), |-- y1 --> y2 -> Phi |-- y1 -> Phi |-- y2 where ?L : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Derivable L bSC : BasicSequentCalculus L Gamma minSC : MinimumSequentCalculus L Gamma ipSC : IntuitionisticPropositionalSequentCalculus L Gamma |- Language] ?minL : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Derivable L bSC : BasicSequentCalculus L Gamma minSC : MinimumSequentCalculus L Gamma ipSC : IntuitionisticPropositionalSequentCalculus L Gamma |- MinimumLanguage ?L] ?GammaP : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Derivable L bSC : BasicSequentCalculus L Gamma minSC : MinimumSequentCalculus L Gamma ipSC : IntuitionisticPropositionalSequentCalculus L Gamma |- Provable ?L...\norp_intros2 : forall x y : expr, |-- y --> x || y where ?L : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Derivable L bSC : BasicSequentCalculus L Gamma minSC : MinimumSequentCalculus L Gamma ipSC : IntuitionisticPropositionalSequentCalculus L Gamma |- Language] ?minL : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Derivable L bSC : BasicSequentCalculus L Gamma minSC : MinimumSequentCalculus L Gamma ipSC : IntuitionisticPropositionalSequentCalculus L Gamma |- MinimumLanguage ?L] ?pL : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Derivable L bSC : BasicSequentCalculus L Gamma minSC : MinimumSequentCalculus L Gamma ipSC : IntuitionisticPropositionalSequentCalculus L Gamma |- PropositionalLanguage ?L] ?Gamma : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma :...\nprovable_multi_imp_arg_switch2 : forall (xs : list expr) (x y : expr), |-- multi_imp xs (x --> y) --> x --> multi_imp xs y where ?L : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Derivable L bSC : BasicSequentCalculus L Gamma minSC : MinimumSequentCalculus L Gamma ipSC : IntuitionisticPropositionalSequentCalculus L Gamma |- Language] ?minL : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Derivable L bSC : BasicSequentCalculus L Gamma minSC : MinimumSequentCalculus L Gamma ipSC : IntuitionisticPropositionalSequentCalculus L Gamma |- MinimumLanguage ?L] ?Gamma : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Derivable L bSC : BasicSequentCalculus L Gamma minSC : MinimumSequentCalculus L Gamma ipSC : IntuitionisticPropositionalSequentCalculus L Gamma |- Provable ?L] ?minAX :...\naxiom2 : forall x y z : expr, |-- (x --> y --> z) --> (x --> y) --> x --> z where ?L : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Derivable L bSC : BasicSequentCalculus L Gamma minSC : MinimumSequentCalculus L Gamma ipSC : IntuitionisticPropositionalSequentCalculus L Gamma |- Language] ?minL : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Derivable L bSC : BasicSequentCalculus L Gamma minSC : MinimumSequentCalculus L Gamma ipSC : IntuitionisticPropositionalSequentCalculus L Gamma |- MinimumLanguage ?L] ?Gamma : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Derivable L bSC : BasicSequentCalculus L Gamma minSC : MinimumSequentCalculus L Gamma ipSC : IntuitionisticPropositionalSequentCalculus L Gamma |- Provable ?L] ?MinimumAxiomatization : [L : Language min...\naux_minimun_theorem04 : forall x y : expr, |-- (x --> x --> y) --> x --> y where ?L : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Derivable L bSC : BasicSequentCalculus L Gamma minSC : MinimumSequentCalculus L Gamma ipSC : IntuitionisticPropositionalSequentCalculus L Gamma |- Language] ?minL : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Derivable L bSC : BasicSequentCalculus L Gamma minSC : MinimumSequentCalculus L Gamma ipSC : IntuitionisticPropositionalSequentCalculus L Gamma |- MinimumLanguage ?L] ?Gamma : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Derivable L bSC : BasicSequentCalculus L Gamma minSC : MinimumSequentCalculus L Gamma ipSC : IntuitionisticPropositionalSequentCalculus L Gamma |- Provable ?L] ?minAX : [L : Language minL : MinimumLanguage L p...\naux_minimun_rule02 : forall x y z : expr, |-- x --> y -> |-- y --> z -> |-- x --> z where ?L : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Derivable L bSC : BasicSequentCalculus L Gamma minSC : MinimumSequentCalculus L Gamma ipSC : IntuitionisticPropositionalSequentCalculus L Gamma |- Language] ?minL : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Derivable L bSC : BasicSequentCalculus L Gamma minSC : MinimumSequentCalculus L Gamma ipSC : IntuitionisticPropositionalSequentCalculus L Gamma |- MinimumLanguage ?L] ?Gamma : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Derivable L bSC : BasicSequentCalculus L Gamma minSC : MinimumSequentCalculus L Gamma ipSC : IntuitionisticPropositionalSequentCalculus L Gamma |- Provable ?L] ?minAX : [L : Language minL : MinimumLanguage...\nadjoint_iter : forall (x : expr) (xs : list expr) (y : expr), |-- fold_left ?prodp xs x - -> y < -> |-- x - ->...-> expr] ?Adj : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Derivable L bSC : BasicSequentCalculus L Gamma minSC : MinimumSequentCalculus L Gamma ipSC : IntuitionisticPropositionalSequentCalculus L Gamma |- Adjointness ?L ?Gamma ?prodp ?funcp]\nmodus_ponens : forall x y : expr, |-- x --> y -> |-- x -> |-- y where ?L : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Derivable L bSC : BasicSequentCalculus L Gamma minSC : MinimumSequentCalculus L Gamma ipSC : IntuitionisticPropositionalSequentCalculus L Gamma |- Language] ?minL : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Derivable L bSC : BasicSequentCalculus L Gamma minSC : MinimumSequentCalculus L Gamma ipSC : IntuitionisticPropositionalSequentCalculus L Gamma |- MinimumLanguage ?L] ?Gamma : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Derivable L bSC : BasicSequentCalculus L Gamma minSC : MinimumSequentCalculus L Gamma ipSC : IntuitionisticPropositionalSequentCalculus L Gamma |- Provable ?L] ?MinimumAxiomatization : [L : Language minL : MinimumLanguage L pL...\naux_minimun_theorem03 : forall x y z : expr, |-- y --> (x --> y --> z) --> x --> z where ?L : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Derivable L bSC : BasicSequentCalculus L Gamma minSC : MinimumSequentCalculus L Gamma ipSC : IntuitionisticPropositionalSequentCalculus L Gamma |- Language] ?minL : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Derivable L bSC : BasicSequentCalculus L Gamma minSC : MinimumSequentCalculus L Gamma ipSC : IntuitionisticPropositionalSequentCalculus L Gamma |- MinimumLanguage ?L] ?Gamma : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Derivable L bSC : BasicSequentCalculus L Gamma minSC : MinimumSequentCalculus L Gamma ipSC : IntuitionisticPropositionalSequentCalculus L Gamma |- Provable ?L] ?minAX : [L : Language minL : Minimum...\nprovable_impp_arg_switch : forall x y z : expr, |-- (x --> y --> z) --> y --> x --> z where ?L : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Derivable L bSC : BasicSequentCalculus L Gamma minSC : MinimumSequentCalculus L Gamma ipSC : IntuitionisticPropositionalSequentCalculus L Gamma |- Language] ?minL : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Derivable L bSC : BasicSequentCalculus L Gamma minSC : MinimumSequentCalculus L Gamma ipSC : IntuitionisticPropositionalSequentCalculus L Gamma |- MinimumLanguage ?L] ?Gamma : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Derivable L bSC : BasicSequentCalculus L Gamma minSC : MinimumSequentCalculus L Gamma ipSC : IntuitionisticPropositionalSequentCalculus L Gamma |- Provable ?L] ?minAX : [L : Language minL : MinimumLanguage...\naux_minimun_theorem02 : forall x y : expr, |-- x --> (x --> y) --> y where ?L : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Derivable L bSC : BasicSequentCalculus L Gamma minSC : MinimumSequentCalculus L Gamma ipSC : IntuitionisticPropositionalSequentCalculus L Gamma |- Language] ?minL : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Derivable L bSC : BasicSequentCalculus L Gamma minSC : MinimumSequentCalculus L Gamma ipSC : IntuitionisticPropositionalSequentCalculus L Gamma |- MinimumLanguage ?L] ?Gamma : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Derivable L bSC : BasicSequentCalculus L Gamma minSC : MinimumSequentCalculus L Gamma ipSC : IntuitionisticPropositionalSequentCalculus L Gamma |- Provable ?L] ?minAX : [L : Language minL : MinimumLanguage L pL :...\naux_minimun_theorem01 : forall x y z : expr, |-- (x --> z) --> x --> y --> z where ?L : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Derivable L bSC : BasicSequentCalculus L Gamma minSC : MinimumSequentCalculus L Gamma ipSC : IntuitionisticPropositionalSequentCalculus L Gamma |- Language] ?minL : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Derivable L bSC : BasicSequentCalculus L Gamma minSC : MinimumSequentCalculus L Gamma ipSC : IntuitionisticPropositionalSequentCalculus L Gamma |- MinimumLanguage ?L] ?Gamma : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Derivable L bSC : BasicSequentCalculus L Gamma minSC : MinimumSequentCalculus L Gamma ipSC : IntuitionisticPropositionalSequentCalculus L Gamma |- Provable ?L] ?minAX : [L : Language minL : MinimumLanguage L...\nBuild_BasicSequentCalculus : forall (L : Language) (Gamma : Derivable L), (forall (Phi Psi : Ensemble expr) (x : expr), Included expr Phi Psi -> Phi |-- x -> Psi |-- x) -> (forall (Phi : Ensemble expr) (x : expr), Ensembles.In expr Phi x -> Phi |-- x) -> (forall (Phi Psi : context) (y : expr), (forall x : expr, Psi x -> Phi |-- x) -> Union expr Phi Psi |-- y -> Phi |-- y) -> BasicSequentCalculus L Gamma\nprovable_multi_imp_shrink : forall (xs : list expr) (x y : expr), |-- (x --> multi_imp xs (x --> y)) --> multi_imp xs (x --> y) where ?L : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Derivable L bSC : BasicSequentCalculus L Gamma minSC : MinimumSequentCalculus L Gamma ipSC : IntuitionisticPropositionalSequentCalculus L Gamma |- Language] ?minL : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Derivable L bSC : BasicSequentCalculus L Gamma minSC : MinimumSequentCalculus L Gamma ipSC : IntuitionisticPropositionalSequentCalculus L Gamma |- MinimumLanguage ?L] ?Gamma : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Derivable L bSC : BasicSequentCalculus L Gamma minSC : MinimumSequentCalculus L Gamma ipSC : IntuitionisticPropositionalSequentCalculus L Gamma |- Provable ?L]...\naux_minimun_rule00 : forall x y : expr, |-- x -> |-- y --> x where ?L : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Derivable L bSC : BasicSequentCalculus L Gamma minSC : MinimumSequentCalculus L Gamma ipSC : IntuitionisticPropositionalSequentCalculus L Gamma |- Language] ?minL : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Derivable L bSC : BasicSequentCalculus L Gamma minSC : MinimumSequentCalculus L Gamma ipSC : IntuitionisticPropositionalSequentCalculus L Gamma |- MinimumLanguage ?L] ?Gamma : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Derivable L bSC : BasicSequentCalculus L Gamma minSC : MinimumSequentCalculus L Gamma ipSC : IntuitionisticPropositionalSequentCalculus L Gamma |- Provable ?L] ?minAX : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L...\naux_minimun_theorem00 : forall x y z : expr, |-- (y --> z) --> (x --> y) --> x --> z where ?L : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Derivable L bSC : BasicSequentCalculus L Gamma minSC : MinimumSequentCalculus L Gamma ipSC : IntuitionisticPropositionalSequentCalculus L Gamma |- Language] ?minL : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Derivable L bSC : BasicSequentCalculus L Gamma minSC : MinimumSequentCalculus L Gamma ipSC : IntuitionisticPropositionalSequentCalculus L Gamma |- MinimumLanguage ?L] ?Gamma : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Derivable L bSC : BasicSequentCalculus L Gamma minSC : MinimumSequentCalculus L Gamma ipSC : IntuitionisticPropositionalSequentCalculus L Gamma |- Provable ?L] ?minAX : [L : Language minL...\nprovable_impp_trans : forall x y z : expr, |-- (x --> y) --> (y --> z) --> x --> z where ?L : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Derivable L bSC : BasicSequentCalculus L Gamma minSC : MinimumSequentCalculus L Gamma ipSC : IntuitionisticPropositionalSequentCalculus L Gamma |- Language] ?minL : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Derivable L bSC : BasicSequentCalculus L Gamma minSC : MinimumSequentCalculus L Gamma ipSC : IntuitionisticPropositionalSequentCalculus L Gamma |- MinimumLanguage ?L] ?Gamma : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Derivable L bSC : BasicSequentCalculus L Gamma minSC : MinimumSequentCalculus L Gamma ipSC : IntuitionisticPropositionalSequentCalculus L Gamma |- Provable ?L] ?minAX : [L : Language minL : Minimum...\nprovable_multi_imp_arg_switch1 : forall (xs : list expr) (x y : expr), |-- (x --> multi_imp xs y) --> multi_imp xs (x --> y) where ?L : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Derivable L bSC : BasicSequentCalculus L Gamma minSC : MinimumSequentCalculus L Gamma ipSC : IntuitionisticPropositionalSequentCalculus L Gamma |- Language] ?minL : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Derivable L bSC : BasicSequentCalculus L Gamma minSC : MinimumSequentCalculus L Gamma ipSC : IntuitionisticPropositionalSequentCalculus L Gamma |- MinimumLanguage ?L] ?Gamma : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Derivable L bSC : BasicSequentCalculus L Gamma minSC : MinimumSequentCalculus L Gamma ipSC : IntuitionisticPropositionalSequentCalculus L Gamma |- Provable ?L] ?min...\naux_minimun_rule01 : forall x y z : expr, |-- x --> y -> |-- (z --> x) --> z --> y where ?L : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Derivable L bSC : BasicSequentCalculus L Gamma minSC : MinimumSequentCalculus L Gamma ipSC : IntuitionisticPropositionalSequentCalculus L Gamma |- Language] ?minL : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Derivable L bSC : BasicSequentCalculus L Gamma minSC : MinimumSequentCalculus L Gamma ipSC : IntuitionisticPropositionalSequentCalculus L Gamma |- MinimumLanguage ?L] ?Gamma : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Derivable L bSC : BasicSequentCalculus L Gamma minSC : MinimumSequentCalculus L Gamma ipSC : IntuitionisticPropositionalSequentCalculus L Gamma |- Provable ?L] ?minAX : [L : Language minL : Minimum...\naxiom1 : forall x y : expr, |-- x --> y --> x where ?L : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Derivable L bSC : BasicSequentCalculus L Gamma minSC : MinimumSequentCalculus L Gamma ipSC : IntuitionisticPropositionalSequentCalculus L Gamma |- Language] ?minL : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Derivable L bSC : BasicSequentCalculus L Gamma minSC : MinimumSequentCalculus L Gamma ipSC : IntuitionisticPropositionalSequentCalculus L Gamma |- MinimumLanguage ?L] ?Gamma : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Derivable L bSC : BasicSequentCalculus L Gamma minSC : MinimumSequentCalculus L Gamma ipSC : IntuitionisticPropositionalSequentCalculus L Gamma |- Provable ?L] ?MinimumAxiomatization : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma...\nTheoryOfSequentCalculus.DeductionImpElim_DeductionSubst1_2_DeductionMP = fun (L : Language) (Gamma : Derivable L) (minL : MinimumLanguage L) (H : TheoryOfSequentCalculus.DeductionImpElim L Gamma) (H0 : TheoryOfSequentCalculus.DeductionSubst1 L Gamma) (Phi : context) (x y : expr) (H1 : Phi |-- x) (H2 : Phi |-- x --> y) => let H3 : Phi;; x |-- y := H Phi x y H2 in H0 Phi x y H1 H3 : forall (L : Language) (Gamma : Derivable L) (minL : MinimumLanguage L), TheoryOfSequentCalculus.DeductionImpElim L Gamma -> TheoryOfSequentCalculus.DeductionSubst1 L Gamma -> TheoryOfSequentCalculus.DeductionMP L Gamma Arguments L, Gamma, minL are implicit and maximally inserted\nTheoryOfSequentCalculus.DeductionImpIntro_DeductionMP_2_DeductionSubst1 = fun (L : Language) (Gamma : Derivable L) (minL : MinimumLanguage L) (H : TheoryOfSequentCalculus.DeductionImpIntro L Gamma) (H0 : TheoryOfSequentCalculus.DeductionMP L Gamma) (Phi : context) (x y : expr) (H1 : Phi |-- x) (H2 : Phi;; x |-- y) => let H3 : Phi |-- x - -> y := H Phi x y H2 in H0 Phi x y H1 H3 : forall (L : Language) (Gamma : Derivable L) (minL : MinimumLanguage L), TheoryOfSequentCalculus.DeductionImpIntro L Gamma -> TheoryOfSequentCalculus.DeductionMP L Gamma -> TheoryOfSequentCalculus.DeductionSubst1 L Gamma Arguments L, Gamma, minL are implicit and maximally inserted\nadjoint : forall x y z : expr, |-- ?prodp x y - -> z < -> |-- x - ->...-> expr] ?Adjointness : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Derivable L bSC : BasicSequentCalculus L Gamma minSC : MinimumSequentCalculus L Gamma ipSC : IntuitionisticPropositionalSequentCalculus L Gamma |- Adjointness ?L ?Gamma ?prodp ?funcp]\nandp_intros : forall x y : expr, |-- x --> y --> x && y where ?L : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Derivable L bSC : BasicSequentCalculus L Gamma minSC : MinimumSequentCalculus L Gamma ipSC : IntuitionisticPropositionalSequentCalculus L Gamma |- Language] ?minL : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Derivable L bSC : BasicSequentCalculus L Gamma minSC : MinimumSequentCalculus L Gamma ipSC : IntuitionisticPropositionalSequentCalculus L Gamma |- MinimumLanguage ?L] ?pL : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Derivable L bSC : BasicSequentCalculus L Gamma minSC : MinimumSequentCalculus L Gamma ipSC : IntuitionisticPropositionalSequentCalculus L Gamma |- PropositionalLanguage ?L] ?Gamma : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L...\ndeduction_orp_intros1 : forall (Phi : context) (x y : expr), Phi |-- x -> Phi |-- x || y\nderivable_orp_intros1 : forall (Phi : context) (x y : expr), Phi |-- x - -> x || y\nprodp_comm_impp : forall x y : expr, |-- ?prodp x y - ->...-> expr] ?Commutativity : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L Gamma : Derivable L bSC : BasicSequentCalculus L Gamma minSC : MinimumSequentCalculus L Gamma ipSC : IntuitionisticPropositionalSequentCalculus L Gamma |- Commutativity ?L ?Gamma ?prodp]\nderivable_proper_impp = fun (L : Language) (minL : MinimumLanguage L) (GammaP : Provable L) (GammaD : Derivable L) (SC : NormalSequentCalculus L GammaP GammaD) (bSC : BasicSequentCalculus L GammaD) (minSC : MinimumSequentCalculus L GammaD) (Phi Phi' : context) (H : Phi = Phi') => eq_ind Phi (fun Phi'0 : context => Morphisms.respectful (fun x y : expr => |-- x --> y) Basics.impl (derivable Phi) (derivable Phi'0)) (fun (x1 x2 : expr) (H0 : |-- x1 --> x2) (H1 : Phi |-- x1) => let H2 : Phi |-- x1 --> x2 := deduction_weaken0 Phi (x1 --> x2) H0 in deduction_modus_ponens Phi x1 x2 H1 H2) Phi' H : forall (L : Language) (minL : MinimumLanguage L) (GammaP : Provable L) (GammaD :..."}, {"role": "assistant", "content": "```coq\nintros Phi x y.\napply adjoint_iter.\nQed.```"}], "original": "intros Phi x y. apply adjoint_iter.", "succ": false}]