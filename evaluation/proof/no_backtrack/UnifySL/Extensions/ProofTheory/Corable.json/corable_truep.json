[{"history": {"proof": "shelve.", "repairs": [""], "exceptions": [{"ctx": [], "tactic": ["apply Corable with (minL := minL) (pL := pL) (sepconL := sepconL) (wandL := wandL) (Gamma := Gamma) in CosAX.", ""], "exn": "No such bound variable minL (possible name is: L).", "type": "no_such_bound", "handled": false}]}, "chat": [{"role": "user", "content": "I will give you a Coq proof state, including both hypotheses and a specific goal and your need to prove it. Your response should be a singular code block of Coq proof starting with \"```coq\n\", ending with \"Qed.\", without any additional explanation or commentary. Follow to these guidelines:\nIntroduce variables using unique names to avoid any conflicts.\nKeep each command distinct and separated, avoid concatenations like ';' or '[cmd|cmd]'.\nOrganize your proof with bullets like '-', '+', and '*' instead of braces ({, }). Shift to their double symbols like '--' and '++', when necessary.\nEffectively use given premises, follow the syntax and structure demonstrated in the examples provided.\n\nExample 1:\n\nHypotheses:\nn, m: nat\nIHn: m + n = n + m\n\nGoal:\nm + S n = S n + m\n\nProof:\n```coq\nsimpl. rewrite <- IHn. auto.\nQed.```\n\nExample 2:\nHypotheses:\n\nGoal:\nforall n m : nat, m + n = n + m\n\n```coq\nintros n m. induction n.\n- simpl. auto.\n- simpl. rewrite <- IHn. auto.\nQed.```\n\nSolve This Proof State:\n\nHypotheses:\nL: Language\nminL: MinimumLanguage L\npL: PropositionalLanguage L\nsepconL: SepconLanguage L\nwandL: WandLanguage L\nGamma: Provable L\nminAX: MinimumAxiomatization L Gamma\nipAX: IntuitionisticPropositionalLogic L Gamma\nsepconAX: SepconAxiomatization L Gamma\nwandAX: WandAxiomatization L Gamma\nCosAX: Corable L Gamma\n\nGoal:\ncorable TT\n\nPremises:\nWandAxiomatization : forall L : Language, MinimumLanguage L -> SepconLanguage L -> WandLanguage L -> Provable L -> Prop\nMinimumAxiomatization : forall L : Language, MinimumLanguage L -> Provable L -> Prop\nRecord MinimumLanguage (L : Language) : Type := Build_MinimumLanguage { impp : expr -> expr -> expr } For Build_MinimumLanguage: Argument scopes are [_ function_scope]\nRecord PropositionalLanguage (L : Language) : Type := Build_PropositionalLanguage { andp : expr -> expr -> expr; orp : expr -> expr -> expr; falsep : expr } For Build_PropositionalLanguage: Argument scopes are [_ function_scope function_scope _]\nCorable : forall L : Language, MinimumLanguage L -> PropositionalLanguage L -> SepconLanguage L -> WandLanguage L -> Provable L -> Type\ncorable = fun (L : Language) (minL : MinimumLanguage L) (pL : PropositionalLanguage L) (sepconL : SepconLanguage L) (wandL : WandLanguage L) (Gamma : Provable L) (Corable0 : Corable L Gamma) => let (corable, _, _, _) := Corable0 in corable : forall (L : Language) (minL : MinimumLanguage L) (pL : PropositionalLanguage L) (sepconL : SepconLanguage L) (wandL : WandLanguage L) (Gamma : Provable L), Corable L Gamma -> expr -> Prop Arguments L, minL, pL, sepconL, wandL, Gamma, Corable are implicit and maximally inserted\nRecord SepconLanguage (L : Language) : Type := Build_SepconLanguage { sepcon : expr -> expr -> expr } For Build_SepconLanguage: Argument scopes are [_ function_scope]\nSepconAxiomatization : forall L : Language, MinimumLanguage L -> SepconLanguage L -> Provable L -> Prop\nRecord Provable (L : Language) : Type := Build_Provable { provable : expr -> Prop } For Build_Provable: Argument scopes are [_ function_scope]\nIntuitionisticPropositionalLogic : forall (L : Language) (minL : MinimumLanguage L), PropositionalLanguage L -> forall Gamma : Provable L, MinimumAxiomatization L Gamma -> Prop\nRecord WandLanguage (L : Language) : Type := Build_WandLanguage { wand : expr -> expr -> expr } For Build_WandLanguage: Argument scopes are [_ function_scope]\nGC_Ext_Classical_collapse_aux : forall x : expr, |-- x --> x * x where ?L : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L sepconL : SepconLanguage L wandL : WandLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipAX : IntuitionisticPropositionalLogic L Gamma sepconAX : SepconAxiomatization L Gamma wandAX : WandAxiomatization L Gamma CosAX : Corable L Gamma |- Language] ?minL : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L sepconL : SepconLanguage L wandL : WandLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipAX : IntuitionisticPropositionalLogic L Gamma sepconAX : SepconAxiomatization L Gamma wandAX : WandAxiomatization L Gamma CosAX : Corable L Gamma |- MinimumLanguage ?L] ?pL : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage...\nGC_Ext_Classical_collapse : forall x y : expr, |-- x * y <--> x && y where ?L : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L sepconL : SepconLanguage L wandL : WandLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipAX : IntuitionisticPropositionalLogic L Gamma sepconAX : SepconAxiomatization L Gamma wandAX : WandAxiomatization L Gamma CosAX : Corable L Gamma |- Language] ?minL : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L sepconL : SepconLanguage L wandL : WandLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipAX : IntuitionisticPropositionalLogic L Gamma sepconAX : SepconAxiomatization L Gamma wandAX : WandAxiomatization L Gamma CosAX : Corable L Gamma |- MinimumLanguage ?L] ?pL : [L : Language minL : MinimumLanguage L pL :...\nemp_sepcon_elim1 : forall x y : expr, |-- x * y && emp --> x where ?L : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L sepconL : SepconLanguage L wandL : WandLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipAX : IntuitionisticPropositionalLogic L Gamma sepconAX : SepconAxiomatization L Gamma wandAX : WandAxiomatization L Gamma CosAX : Corable L Gamma |- Language] ?minL : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L sepconL : SepconLanguage L wandL : WandLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipAX : IntuitionisticPropositionalLogic L Gamma sepconAX : SepconAxiomatization L Gamma wandAX : WandAxiomatization L Gamma CosAX : Corable L Gamma |- MinimumLanguage ?L] ?sepconL : [L : Language minL : MinimumLanguage L pL : Propositional...\nemp_sepcon_elim2 : forall x y : expr, |-- x * y && emp --> y where ?L : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L sepconL : SepconLanguage L wandL : WandLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipAX : IntuitionisticPropositionalLogic L Gamma sepconAX : SepconAxiomatization L Gamma wandAX : WandAxiomatization L Gamma CosAX : Corable L Gamma |- Language] ?minL : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L sepconL : SepconLanguage L wandL : WandLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipAX : IntuitionisticPropositionalLogic L Gamma sepconAX : SepconAxiomatization L Gamma wandAX : WandAxiomatization L Gamma CosAX : Corable L Gamma |- MinimumLanguage ?L] ?sepconL : [L : Language minL : MinimumLanguage L pL : Propositional...\nsepcon_falsep : forall x : expr, |-- x * FF <--> FF where ?L : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L sepconL : SepconLanguage L wandL : WandLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipAX : IntuitionisticPropositionalLogic L Gamma sepconAX : SepconAxiomatization L Gamma wandAX : WandAxiomatization L Gamma CosAX : Corable L Gamma |- Language] ?minL : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L sepconL : SepconLanguage L wandL : WandLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipAX : IntuitionisticPropositionalLogic L Gamma sepconAX : SepconAxiomatization L Gamma wandAX : WandAxiomatization L Gamma CosAX : Corable L Gamma |- MinimumLanguage ?L] ?sepconL : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L sep...\nsepcon_elim2 : forall x y : expr, |-- x * y --> y where ?L : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L sepconL : SepconLanguage L wandL : WandLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipAX : IntuitionisticPropositionalLogic L Gamma sepconAX : SepconAxiomatization L Gamma wandAX : WandAxiomatization L Gamma CosAX : Corable L Gamma |- Language] ?minL : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L sepconL : SepconLanguage L wandL : WandLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipAX : IntuitionisticPropositionalLogic L Gamma sepconAX : SepconAxiomatization L Gamma wandAX : WandAxiomatization L Gamma CosAX : Corable L Gamma |- MinimumLanguage ?L] ?sepconL : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L sep...\nsepcon_emp : forall x : expr, |-- x * emp <--> x where ?L : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L sepconL : SepconLanguage L wandL : WandLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipAX : IntuitionisticPropositionalLogic L Gamma sepconAX : SepconAxiomatization L Gamma wandAX : WandAxiomatization L Gamma CosAX : Corable L Gamma |- Language] ?minL : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L sepconL : SepconLanguage L wandL : WandLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipAX : IntuitionisticPropositionalLogic L Gamma sepconAX : SepconAxiomatization L Gamma wandAX : WandAxiomatization L Gamma CosAX : Corable L Gamma |- MinimumLanguage ?L] ?sepconL : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L sepcon...\nProofTheoryPatterns.assoc_fold_left_fold_right_equiv : forall xs : list expr, |-- fold_left ?prodp xs ?e <--> fold_right ?prodp ?e xs where ?L : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L sepconL : SepconLanguage L wandL : WandLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipAX : IntuitionisticPropositionalLogic L Gamma sepconAX : SepconAxiomatization L Gamma wandAX : WandAxiomatization L Gamma CosAX : Corable L Gamma |- Language] ?minL : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L sepconL : SepconLanguage L wandL : WandLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipAX : IntuitionisticPropositionalLogic L Gamma sepconAX : SepconAxiomatization L Gamma wandAX : WandAxiomatization L Gamma CosAX : Corable L Gamma |- MinimumLanguage ?L] ?pL :...\nfalsep_sepcon : forall x : expr, |-- FF * x <--> FF where ?L : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L sepconL : SepconLanguage L wandL : WandLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipAX : IntuitionisticPropositionalLogic L Gamma sepconAX : SepconAxiomatization L Gamma wandAX : WandAxiomatization L Gamma CosAX : Corable L Gamma |- Language] ?minL : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L sepconL : SepconLanguage L wandL : WandLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipAX : IntuitionisticPropositionalLogic L Gamma sepconAX : SepconAxiomatization L Gamma wandAX : WandAxiomatization L Gamma CosAX : Corable L Gamma |- MinimumLanguage ?L] ?sepconL : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L sep...\nsepcon_orp_distr_r : forall x y z : expr, |-- (x || y) * z <--> x * z || y * z where ?L : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L sepconL : SepconLanguage L wandL : WandLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipAX : IntuitionisticPropositionalLogic L Gamma sepconAX : SepconAxiomatization L Gamma wandAX : WandAxiomatization L Gamma CosAX : Corable L Gamma |- Language] ?minL : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L sepconL : SepconLanguage L wandL : WandLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipAX : IntuitionisticPropositionalLogic L Gamma sepconAX : SepconAxiomatization L Gamma wandAX : WandAxiomatization L Gamma CosAX : Corable L Gamma |- MinimumLanguage ?L] ?sepconL : [L :...\nsepcon_orp_distr_l : forall x y z : expr, |-- x * (y || z) <--> x * y || x * z where ?L : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L sepconL : SepconLanguage L wandL : WandLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipAX : IntuitionisticPropositionalLogic L Gamma sepconAX : SepconAxiomatization L Gamma wandAX : WandAxiomatization L Gamma CosAX : Corable L Gamma |- Language] ?minL : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L sepconL : SepconLanguage L wandL : WandLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipAX : IntuitionisticPropositionalLogic L Gamma sepconAX : SepconAxiomatization L Gamma wandAX : WandAxiomatization L Gamma CosAX : Corable L Gamma |- MinimumLanguage ?L] ?sepconL : [L :...\nProofTheoryPatterns.assoc_prodp_fold_left_equiv : forall xs1 xs2 : list expr, |-- ?prodp (fold_left ?prodp xs1 ?e) (fold_left ?prodp xs2 ?e) <--> fold_left ?prodp (xs1 ++ xs2) ?e where ?L : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L sepconL : SepconLanguage L wandL : WandLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipAX : IntuitionisticPropositionalLogic L Gamma sepconAX : SepconAxiomatization L Gamma wandAX : WandAxiomatization L Gamma CosAX : Corable L Gamma |- Language] ?minL : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L sepconL : SepconLanguage L wandL : WandLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipAX : IntuitionisticPropositionalLogic L Gamma sepconAX : SepconAxiomatization L Gamma wand...\nProofTheoryPatterns.falsep_prodp : forall x : expr, |-- ?prodp FF x <- ->...-> expr] ?Adj : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L sepconL : SepconLanguage L wandL : WandLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipAX : IntuitionisticPropositionalLogic L Gamma sepconAX : SepconAxiomatization L Gamma wandAX : WandAxiomatization L Gamma CosAX : Corable L Gamma |- ProofTheoryPatterns.Adjointness ?L ?Gamma ?prodp ?funcp]\nProofTheoryPatterns.orp_funcp : forall x y z : expr, |-- ?funcp (x || y) z <--> ?funcp x z && ?funcp y z where ?L : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L sepconL : SepconLanguage L wandL : WandLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipAX : IntuitionisticPropositionalLogic L Gamma sepconAX : SepconAxiomatization L Gamma wandAX : WandAxiomatization L Gamma CosAX : Corable L Gamma |- Language] ?minL : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L sepconL : SepconLanguage L wandL : WandLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipAX : IntuitionisticPropositionalLogic L Gamma sepconAX : SepconAxiomatization L Gamma wandAX : WandAxiomatization L Gamma CosAX : Corable L Gamma |- MinimumLanguage ?L] ?p...\nProofTheoryPatterns.prodp_orp_distr_r : forall x y z : expr, |-- ?prodp x (y || z) <--> ?prodp x y || ?prodp x z where ?L : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L sepconL : SepconLanguage L wandL : WandLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipAX : IntuitionisticPropositionalLogic L Gamma sepconAX : SepconAxiomatization L Gamma wandAX : WandAxiomatization L Gamma CosAX : Corable L Gamma |- Language] ?minL : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L sepconL : SepconLanguage L wandL : WandLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipAX : IntuitionisticPropositionalLogic L Gamma sepconAX : SepconAxiomatization L Gamma wandAX : WandAxiomatization L Gamma CosAX : Corable L Gamma |- MinimumLanguage ?L...\nexcluded_middle : forall x : expr, |-- x || ~~ x where ?L : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L sepconL : SepconLanguage L wandL : WandLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipAX : IntuitionisticPropositionalLogic L Gamma sepconAX : SepconAxiomatization L Gamma wandAX : WandAxiomatization L Gamma CosAX : Corable L Gamma |- Language] ?minL : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L sepconL : SepconLanguage L wandL : WandLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipAX : IntuitionisticPropositionalLogic L Gamma sepconAX : SepconAxiomatization L Gamma wandAX : WandAxiomatization L Gamma CosAX : Corable L Gamma |- MinimumLanguage ?L] ?pL : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L sepconL : Sepcon...\nProofTheoryPatterns.assoc_fold_left_Permutation : forall (x : expr) (ys1 ys2 : list expr), Permutation.Permutation ys1 ys2 -> |-- fold_left ?prodp ys1 x <--> fold_left ?prodp ys2 x where ?L : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L sepconL : SepconLanguage L wandL : WandLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipAX : IntuitionisticPropositionalLogic L Gamma sepconAX : SepconAxiomatization L Gamma wandAX : WandAxiomatization L Gamma CosAX : Corable L Gamma |- Language] ?minL : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L sepconL : SepconLanguage L wandL : WandLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipAX : IntuitionisticPropositionalLogic L Gamma sepconAX : SepconAxiomatization L Gamma wandAX : WandAxiomatization...\nProofTheoryPatterns.prodp_comm : forall x y : expr, |-- ?prodp x y <- ->...-> expr] ?Comm : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L sepconL : SepconLanguage L wandL : WandLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipAX : IntuitionisticPropositionalLogic L Gamma sepconAX : SepconAxiomatization L Gamma wandAX : WandAxiomatization L Gamma CosAX : Corable L Gamma |- ProofTheoryPatterns.Commutativity ?L ?Gamma ?prodp]\nweak_excluded_middle : forall x : expr, |-- ~~ x || ~~ (~~ x) where ?L : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L sepconL : SepconLanguage L wandL : WandLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipAX : IntuitionisticPropositionalLogic L Gamma sepconAX : SepconAxiomatization L Gamma wandAX : WandAxiomatization L Gamma CosAX : Corable L Gamma |- Language] ?minL : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L sepconL : SepconLanguage L wandL : WandLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipAX : IntuitionisticPropositionalLogic L Gamma sepconAX : SepconAxiomatization L Gamma wandAX : WandAxiomatization L Gamma CosAX : Corable L Gamma |- MinimumLanguage ?L] ?pL : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L sep...\nProofTheoryPatterns.fold_left_prodp_unfold : forall xs : list expr, |-- fold_left ?prodp xs ?e <--> match xs with | nil => ?e | x :: xs0 => fold_left ?prodp xs0 x end where ?L : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L sepconL : SepconLanguage L wandL : WandLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipAX : IntuitionisticPropositionalLogic L Gamma sepconAX : SepconAxiomatization L Gamma wandAX : WandAxiomatization L Gamma CosAX : Corable L Gamma |- Language] ?minL : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L sepconL : SepconLanguage L wandL : WandLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipAX : IntuitionisticPropositionalLogic L Gamma sepconAX : SepconAxiomatization L Gamma wandAX : WandAxiomatization L Gamma CosAX :...\nstable_andp_sepcon1 : forall x y z : expr, ?stable x -> |-- x && y * z <- ->...-> Prop] ?SeparationAbsorbStable : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L sepconL : SepconLanguage L wandL : WandLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipAX : IntuitionisticPropositionalLogic L Gamma sepconAX : SepconAxiomatization L Gamma wandAX : WandAxiomatization L Gamma CosAX : Corable L Gamma |- SeparationAbsorbStable ?L ?Gamma ?stable]\nProofTheoryPatterns.funcp_andp_distr_r : forall x y z : expr, |-- ?funcp x (y && z) <- ->...-> expr] ?Adj : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L sepconL : SepconLanguage L wandL : WandLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipAX : IntuitionisticPropositionalLogic L Gamma sepconAX : SepconAxiomatization L Gamma wandAX : WandAxiomatization L Gamma CosAX : Corable L Gamma |- ProofTheoryPatterns.Adjointness ?L ?Gamma ?prodp ?funcp]\nProofTheoryPatterns.prodp_sump_distr_l : forall x y z : expr, |-- ?prodp x (?sump y z) <- ->...-> expr] ?LDistr : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L sepconL : SepconLanguage L wandL : WandLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipAX : IntuitionisticPropositionalLogic L Gamma sepconAX : SepconAxiomatization L Gamma wandAX : WandAxiomatization L Gamma CosAX : Corable L Gamma |- ProofTheoryPatterns.LeftDistr ?L ?Gamma ?prodp ?sump]\nProofTheoryPatterns.prodp_orp_distr_l : forall x y z : expr, |-- ?prodp (x || y) z <- ->...-> expr] ?Adj : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L sepconL : SepconLanguage L wandL : WandLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipAX : IntuitionisticPropositionalLogic L Gamma sepconAX : SepconAxiomatization L Gamma wandAX : WandAxiomatization L Gamma CosAX : Corable L Gamma |- ProofTheoryPatterns.Adjointness ?L ?Gamma ?prodp ?funcp]\nProofTheoryPatterns.prodp_sump_distr_r : forall x y z : expr, |-- ?prodp (?sump y z) x <- ->...-> expr] ?RDistr : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L sepconL : SepconLanguage L wandL : WandLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipAX : IntuitionisticPropositionalLogic L Gamma sepconAX : SepconAxiomatization L Gamma wandAX : WandAxiomatization L Gamma CosAX : Corable L Gamma |- ProofTheoryPatterns.RightDistr ?L ?Gamma ?prodp ?sump]\nemp_dup : forall x : expr, |-- x && emp --> x * x where ?L : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L sepconL : SepconLanguage L wandL : WandLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipAX : IntuitionisticPropositionalLogic L Gamma sepconAX : SepconAxiomatization L Gamma wandAX : WandAxiomatization L Gamma CosAX : Corable L Gamma |- Language] ?minL : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L sepconL : SepconLanguage L wandL : WandLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipAX : IntuitionisticPropositionalLogic L Gamma sepconAX : SepconAxiomatization L Gamma wandAX : WandAxiomatization L Gamma CosAX : Corable L Gamma |- MinimumLanguage ?L] ?pL : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L sepconL...\nemp_sepcon_truep_elim : forall x : expr, |-- x * TT && emp --> x where ?L : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L sepconL : SepconLanguage L wandL : WandLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipAX : IntuitionisticPropositionalLogic L Gamma sepconAX : SepconAxiomatization L Gamma wandAX : WandAxiomatization L Gamma CosAX : Corable L Gamma |- Language] ?minL : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L sepconL : SepconLanguage L wandL : WandLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipAX : IntuitionisticPropositionalLogic L Gamma sepconAX : SepconAxiomatization L Gamma wandAX : WandAxiomatization L Gamma CosAX : Corable L Gamma |- MinimumLanguage ?L] ?pL : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage...\nProofTheoryPatterns.prodp_assoc : forall x y z : expr, |-- ?prodp x (?prodp y z) <- ->...-> expr] ?Assoc : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L sepconL : SepconLanguage L wandL : WandLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipAX : IntuitionisticPropositionalLogic L Gamma sepconAX : SepconAxiomatization L Gamma wandAX : WandAxiomatization L Gamma CosAX : Corable L Gamma |- ProofTheoryPatterns.Associativity ?L ?Gamma ?prodp]\ndemorgan_negp_andp : forall x y : expr, |-- ~~ (x && y) <--> ~~ x || ~~ y where ?L : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L sepconL : SepconLanguage L wandL : WandLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipAX : IntuitionisticPropositionalLogic L Gamma sepconAX : SepconAxiomatization L Gamma wandAX : WandAxiomatization L Gamma CosAX : Corable L Gamma |- Language] ?minL : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L sepconL : SepconLanguage L wandL : WandLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipAX : IntuitionisticPropositionalLogic L Gamma sepconAX : SepconAxiomatization L Gamma wandAX : WandAxiomatization L Gamma CosAX : Corable L Gamma |- MinimumLanguage ?L] ?pL : [L : Language minL : MinimumLanguage...\nderivable_excluded_middle : forall (Phi : context) (x : expr), Phi |-- x || ~~ x where ?L : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L sepconL : SepconLanguage L wandL : WandLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipAX : IntuitionisticPropositionalLogic L Gamma sepconAX : SepconAxiomatization L Gamma wandAX : WandAxiomatization L Gamma CosAX : Corable L Gamma |- Language] ?minL : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L sepconL : SepconLanguage L wandL : WandLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipAX : IntuitionisticPropositionalLogic L Gamma sepconAX : SepconAxiomatization L Gamma wandAX : WandAxiomatization L Gamma CosAX : Corable L Gamma |- MinimumLanguage ?L] ?pL : [L : Language minL : MinimumLanguage L pL : Proposition...\nProofTheoryPatterns.assoc_fold_left_app : forall xs1 xs2 : list expr, |-- fold_left ?prodp (xs1 ++ xs2) ?e --> ?prodp (fold_left ?prodp xs1 ?e) (fold_left ?prodp xs2 ?e) where ?L : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L sepconL : SepconLanguage L wandL : WandLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipAX : IntuitionisticPropositionalLogic L Gamma sepconAX : SepconAxiomatization L Gamma wandAX : WandAxiomatization L Gamma CosAX : Corable L Gamma |- Language] ?minL : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L sepconL : SepconLanguage L wandL : WandLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipAX : IntuitionisticPropositionalLogic L Gamma sepconAX : SepconAxiomatization L Gamma wandAX : Wand...\nProofTheoryPatterns.assoc_prodp_fold_left : forall xs1 xs2 : list expr, |-- ?prodp (fold_left ?prodp xs1 ?e) (fold_left ?prodp xs2 ?e) --> fold_left ?prodp (xs1 ++ xs2) ?e where ?L : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L sepconL : SepconLanguage L wandL : WandLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipAX : IntuitionisticPropositionalLogic L Gamma sepconAX : SepconAxiomatization L Gamma wandAX : WandAxiomatization L Gamma CosAX : Corable L Gamma |- Language] ?minL : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L sepconL : SepconLanguage L wandL : WandLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipAX : IntuitionisticPropositionalLogic L Gamma sepconAX : SepconAxiomatization L Gamma wandAX :...\nsepcon_ext : forall x : expr, |-- x --> x * TT where ?L : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L sepconL : SepconLanguage L wandL : WandLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipAX : IntuitionisticPropositionalLogic L Gamma sepconAX : SepconAxiomatization L Gamma wandAX : WandAxiomatization L Gamma CosAX : Corable L Gamma |- Language] ?minL : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L sepconL : SepconLanguage L wandL : WandLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipAX : IntuitionisticPropositionalLogic L Gamma sepconAX : SepconAxiomatization L Gamma wandAX : WandAxiomatization L Gamma CosAX : Corable L Gamma |- MinimumLanguage ?L] ?pL : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L sepconL :...\nfalsep_sepcon_left : forall x : expr, |-- FF * x --> FF where ?L : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L sepconL : SepconLanguage L wandL : WandLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipAX : IntuitionisticPropositionalLogic L Gamma sepconAX : SepconAxiomatization L Gamma wandAX : WandAxiomatization L Gamma CosAX : Corable L Gamma |- Language] ?minL : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L sepconL : SepconLanguage L wandL : WandLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipAX : IntuitionisticPropositionalLogic L Gamma sepconAX : SepconAxiomatization L Gamma wandAX : WandAxiomatization L Gamma CosAX : Corable L Gamma |- MinimumLanguage ?L] ?pL : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L sepcon...\nProofTheoryPatterns.prodp_iffp : forall x1 x2 y1 y2 : expr, |-- x1 <- -> x2 -> |-- y1 <- -> y2 -> |-- ?prodp x1 y1 <- ->...-> expr] ?Mono : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L sepconL : SepconLanguage L wandL : WandLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipAX : IntuitionisticPropositionalLogic L Gamma sepconAX : SepconAxiomatization L Gamma wandAX : WandAxiomatization L Gamma CosAX : Corable L Gamma |- ProofTheoryPatterns.Monotonicity ?L ?Gamma ?prodp]\nsepcon_elim1 : forall x y : expr, |-- x * y --> x where ?L : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L sepconL : SepconLanguage L wandL : WandLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipAX : IntuitionisticPropositionalLogic L Gamma sepconAX : SepconAxiomatization L Gamma wandAX : WandAxiomatization L Gamma CosAX : Corable L Gamma |- Language] ?minL : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L sepconL : SepconLanguage L wandL : WandLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipAX : IntuitionisticPropositionalLogic L Gamma sepconAX : SepconAxiomatization L Gamma wandAX : WandAxiomatization L Gamma CosAX : Corable L Gamma |- MinimumLanguage ?L] ?pL : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L sepcon...\nwand_stable : forall x y : expr, ?stable x -> ?stable y ->...-> Prop] ?SeparationStable : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L sepconL : SepconLanguage L wandL : WandLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipAX : IntuitionisticPropositionalLogic L Gamma sepconAX : SepconAxiomatization L Gamma wandAX : WandAxiomatization L Gamma CosAX : Corable L Gamma |- SeparationStable ?L ?Gamma ?stable]\nsepcon_stable : forall x y : expr, ?stable x -> ?stable y ->...-> Prop] ?SeparationStable : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L sepconL : SepconLanguage L wandL : WandLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipAX : IntuitionisticPropositionalLogic L Gamma sepconAX : SepconAxiomatization L Gamma wandAX : WandAxiomatization L Gamma CosAX : Corable L Gamma |- SeparationStable ?L ?Gamma ?stable]\nProofTheoryPatterns.fold_right_prodp_unfold : forall xs : list expr, |-- fold_right ?prodp ?e xs <--> (fix f (xs0 : list expr) : expr := match xs0 with | nil => ?e | x :: nil => x | x :: (_ :: _) as xs1 => ?prodp x (f xs1) end) xs where ?L : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L sepconL : SepconLanguage L wandL : WandLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipAX : IntuitionisticPropositionalLogic L Gamma sepconAX : SepconAxiomatization L Gamma wandAX : WandAxiomatization L Gamma CosAX : Corable L Gamma |- Language] ?minL : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L sepconL : SepconLanguage L wandL : WandLanguage L Gamma : Provable L minAX : MinimumAxiomatization L Gamma ipAX : IntuitionisticPropositionalLogic...\nBuild_Corable : forall (L : Language) (minL : MinimumLanguage L) (pL : PropositionalLanguage L) (sepconL : SepconLanguage L) (wandL : WandLanguage L) (Gamma : Provable L) (corable : expr -> Prop), PropositionalStable L Gamma corable -> SeparationStable L Gamma corable -> SeparationAbsorbStable L Gamma corable -> Corable L Gamma"}, {"role": "assistant", "content": "```coq\napply Corable with (minL := minL) (pL := pL) (sepconL := sepconL) (wandL := wandL) (Gamma := Gamma) in CosAX.\nexact CosAX.\nQed.\n```"}], "original": "apply Corable with (minL := minL) (pL := pL) (sepconL := sepconL) (wandL := wandL) (Gamma := Gamma) in CosAX. apply CosAX.", "succ": false}]