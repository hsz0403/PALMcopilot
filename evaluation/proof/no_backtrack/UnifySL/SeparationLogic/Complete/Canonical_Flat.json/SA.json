[{"history": {"proof": "shelve.", "repairs": [""], "exceptions": [{"ctx": [], "tactic": "apply WeakSemantics.WeakSemanticsMono.sepcon.", "exn": "In environment L : Language minL : MinimumLanguage L pL : PropositionalLanguage L sepconL : SepconLanguage L wandL : WandLanguage L GammaP : Provable L GammaD : Derivable L SC : NormalSequentCalculus L GammaP GammaD bSC : BasicSequentCalculus L GammaD minSC : MinimumSequentCalculus L GammaD ipSC : IntuitionisticPropositionalSequentCalculus L GammaD AX : NormalAxiomatization L GammaP GammaD minAX : MinimumAxiomatization L GammaP ipAX : IntuitionisticPropositionalLogic L GammaP sepconAX : SepconAxiomatization L GammaP wandAX : WandAxiomatization L GammaP MD : Model kMD : KripkeModel MD M : Kmodel R : Relation (Kworlds M) J : Join (Kworlds M) SM : Semantics L MD fsepconSM : SepconSemantics L MD M SM fwandSM : WandSemantics L MD M SM cP : context -> Prop rel : bijection (Kworlds M) {x : context | cP x} H_R : forall (m n : Kworlds M) (Phi Psi : {x : context | cP x}), rel m Phi -> rel n Psi -> m <= n <-> Included expr (proj1_sig Phi) (proj1_sig Psi) H_J : forall (m1 m2 m : Kworlds M) (Phi1 Phi2 Phi : {x : context | cP x}), rel m1 Phi1 -> rel m2 Phi2 -> rel m Phi -> join m1 m2 m <-> Included expr (context_sepcon (proj1_sig Phi1) (proj1_sig Phi2)) (proj1_sig Phi) AL_DC : at_least derivable_closed cP LIN_SR : forall (Phi : context) (Psi : {x : context | cP x}), Lindenbaum_constructable (context_sepcon_included_r Phi (proj1_sig Psi)) cP Unable to unify \"{x : ?worlds -> Prop | upwards_closed_Kdenote x}\" with \"SeparationAlgebra (Kworlds M)\".", "type": "cannot_unify", "handled": true}, {"ctx": [], "tactic": "apply WeakSemantics.WeakSemanticsMono.wand.", "exn": "In environment L : Language minL : MinimumLanguage L pL : PropositionalLanguage L sepconL : SepconLanguage L wandL : WandLanguage L GammaP : Provable L GammaD : Derivable L SC : NormalSequentCalculus L GammaP GammaD bSC : BasicSequentCalculus L GammaD minSC : MinimumSequentCalculus L GammaD ipSC : IntuitionisticPropositionalSequentCalculus L GammaD AX : NormalAxiomatization L GammaP GammaD minAX : MinimumAxiomatization L GammaP ipAX : IntuitionisticPropositionalLogic L GammaP sepconAX : SepconAxiomatization L GammaP wandAX : WandAxiomatization L GammaP MD : Model kMD : KripkeModel MD M : Kmodel R : Relation (Kworlds M) J : Join (Kworlds M) SM : Semantics L MD fsepconSM : SepconSemantics L MD M SM fwandSM : WandSemantics L MD M SM cP : context -> Prop rel : bijection (Kworlds M) {x : context | cP x} H_R : forall (m n : Kworlds M) (Phi Psi : {x : context | cP x}), rel m Phi -> rel n Psi -> m <= n <-> Included expr (proj1_sig Phi) (proj1_sig Psi) H_J : forall (m1 m2 m : Kworlds M) (Phi1 Phi2 Phi : {x : context | cP x}), rel m1 Phi1 -> rel m2 Phi2 -> rel m Phi -> join m1 m2 m <-> Included expr (context_sepcon (proj1_sig Phi1) (proj1_sig Phi2)) (proj1_sig Phi) AL_DC : at_least derivable_closed cP LIN_SR : forall (Phi : context) (Psi : {x : context | cP x}), Lindenbaum_constructable (context_sepcon_included_r Phi (proj1_sig Psi)) cP Unable to unify \"{x : ?worlds -> Prop | upwards_closed_Kdenote x}\" with \"SeparationAlgebra (Kworlds M)\".", "type": "cannot_unify", "handled": true}, {"ctx": [], "tactic": "apply join_comm.", "exn": "In environment L : Language minL : MinimumLanguage L pL : PropositionalLanguage L sepconL : SepconLanguage L wandL : WandLanguage L GammaP : Provable L GammaD : Derivable L SC : NormalSequentCalculus L GammaP GammaD bSC : BasicSequentCalculus L GammaD minSC : MinimumSequentCalculus L GammaD ipSC : IntuitionisticPropositionalSequentCalculus L GammaD AX : NormalAxiomatization L GammaP GammaD minAX : MinimumAxiomatization L GammaP ipAX : IntuitionisticPropositionalLogic L GammaP sepconAX : SepconAxiomatization L GammaP wandAX : WandAxiomatization L GammaP MD : Model kMD : KripkeModel MD M : Kmodel R : Relation (Kworlds M) J : Join (Kworlds M) SM : Semantics L MD fsepconSM : SepconSemantics L MD M SM fwandSM : WandSemantics L MD M SM cP : context -> Prop rel : bijection (Kworlds M) {x : context | cP x} H_R : forall (m n : Kworlds M) (Phi Psi : {x : context | cP x}), rel m Phi -> rel n Psi -> m <= n <-> Included expr (proj1_sig Phi) (proj1_sig Psi) H_J : forall (m1 m2 m : Kworlds M) (Phi1 Phi2 Phi : {x : context | cP x}), rel m1 Phi1 -> rel m2 Phi2 -> rel m Phi -> join m1 m2 m <-> Included expr (context_sepcon (proj1_sig Phi1) (proj1_sig Phi2)) (proj1_sig Phi) AL_DC : at_least derivable_closed cP LIN_SR : forall (Phi : context) (Psi : {x : context | cP x}), Lindenbaum_constructable (context_sepcon_included_r Phi (proj1_sig Psi)) cP Unable to unify \"?SA ?M2418 ?M2417 ?M2419\" with \"SeparationAlgebra (Kworlds M)\".", "type": "cannot_unify", "handled": true}, {"ctx": [], "tactic": "apply join_assoc.", "exn": "In environment L : Language minL : MinimumLanguage L pL : PropositionalLanguage L sepconL : SepconLanguage L wandL : WandLanguage L GammaP : Provable L GammaD : Derivable L SC : NormalSequentCalculus L GammaP GammaD bSC : BasicSequentCalculus L GammaD minSC : MinimumSequentCalculus L GammaD ipSC : IntuitionisticPropositionalSequentCalculus L GammaD AX : NormalAxiomatization L GammaP GammaD minAX : MinimumAxiomatization L GammaP ipAX : IntuitionisticPropositionalLogic L GammaP sepconAX : SepconAxiomatization L GammaP wandAX : WandAxiomatization L GammaP MD : Model kMD : KripkeModel MD M : Kmodel R : Relation (Kworlds M) J : Join (Kworlds M) SM : Semantics L MD fsepconSM : SepconSemantics L MD M SM fwandSM : WandSemantics L MD M SM cP : context -> Prop rel : bijection (Kworlds M) {x : context | cP x} H_R : forall (m n : Kworlds M) (Phi Psi : {x : context | cP x}), rel m Phi -> rel n Psi -> m <= n <-> Included expr (proj1_sig Phi) (proj1_sig Psi) H_J : forall (m1 m2 m : Kworlds M) (Phi1 Phi2 Phi : {x : context | cP x}), rel m1 Phi1 -> rel m2 Phi2 -> rel m Phi -> join m1 m2 m <-> Included expr (context_sepcon (proj1_sig Phi1) (proj1_sig Phi2)) (proj1_sig Phi) AL_DC : at_least derivable_closed cP LIN_SR : forall (Phi : context) (Psi : {x : context | cP x}), Lindenbaum_constructable (context_sepcon_included_r Phi (proj1_sig Psi)) cP Unable to unify \"exists myz : ?worlds, join ?M2418 ?M2419 myz /\\\\ join ?M2417 myz ?M2421\" with \"SeparationAlgebra (Kworlds M)\".", "type": "cannot_unify", "handled": true}, {"ctx": [], "tactic": "apply derivable_finite_witnessed.", "exn": "In environment L : Language minL : MinimumLanguage L pL : PropositionalLanguage L sepconL : SepconLanguage L wandL : WandLanguage L GammaP : Provable L GammaD : Derivable L SC : NormalSequentCalculus L GammaP GammaD bSC : BasicSequentCalculus L GammaD minSC : MinimumSequentCalculus L GammaD ipSC : IntuitionisticPropositionalSequentCalculus L GammaD AX : NormalAxiomatization L GammaP GammaD minAX : MinimumAxiomatization L GammaP ipAX : IntuitionisticPropositionalLogic L GammaP sepconAX : SepconAxiomatization L GammaP wandAX : WandAxiomatization L GammaP MD : Model kMD : KripkeModel MD M : Kmodel R : Relation (Kworlds M) J : Join (Kworlds M) SM : Semantics L MD fsepconSM : SepconSemantics L MD M SM fwandSM : WandSemantics L MD M SM cP : context -> Prop rel : bijection (Kworlds M) {x : context | cP x} H_R : forall (m n : Kworlds M) (Phi Psi : {x : context | cP x}), rel m Phi -> rel n Psi -> m <= n <-> Included expr (proj1_sig Phi) (proj1_sig Psi) H_J : forall (m1 m2 m : Kworlds M) (Phi1 Phi2 Phi : {x : context | cP x}), rel m1 Phi1 -> rel m2 Phi2 -> rel m Phi -> join m1 m2 m <-> Included expr (context_sepcon (proj1_sig Phi1) (proj1_sig Phi2)) (proj1_sig Phi) AL_DC : at_least derivable_closed cP LIN_SR : forall (Phi : context) (Psi : {x : context | cP x}), Lindenbaum_constructable (context_sepcon_included_r Phi (proj1_sig Psi)) cP Unable to unify \"exists xs : list expr, Forall ?M2417 xs /\\\\ (fun x : expr => In x xs) |-- ?M2418\" with \"SeparationAlgebra (Kworlds M)\".", "type": "cannot_unify", "handled": true}]}, "chat": [{"role": "user", "content": "I will give you a Coq proof state, including both hypotheses and a specific goal and your need to prove it. Your response should be a singular code block of Coq proof starting with \"```coq\n\", ending with \"Qed.\", without any additional explanation or commentary. Follow to these guidelines:\nIntroduce variables using unique names to avoid any conflicts.\nKeep each command distinct and separated, avoid concatenations like ';' or '[cmd|cmd]'.\nOrganize your proof with bullets like '-', '+', and '*' instead of braces ({, }). Shift to their double symbols like '--' and '++', when necessary.\nEffectively use given premises, follow the syntax and structure demonstrated in the examples provided.\n\nExample 1:\n\nHypotheses:\nn, m: nat\nIHn: m + n = n + m\n\nGoal:\nm + S n = S n + m\n\nProof:\n```coq\nsimpl. rewrite <- IHn. auto.\nQed.```\n\nExample 2:\nHypotheses:\n\nGoal:\nforall n m : nat, m + n = n + m\n\n```coq\nintros n m. induction n.\n- simpl. auto.\n- simpl. rewrite <- IHn. auto.\nQed.```\n\nSolve This Proof State:\n\nHypotheses:\nL: Language\nminL: MinimumLanguage L\npL: PropositionalLanguage L\nsepconL: SepconLanguage L\nwandL: WandLanguage L\nGammaP: Provable L\nGammaD: Derivable L\nSC: NormalSequentCalculus L GammaP GammaD\nbSC: BasicSequentCalculus L GammaD\nminSC: MinimumSequentCalculus L GammaD\nipSC: IntuitionisticPropositionalSequentCalculus L GammaD\nAX: NormalAxiomatization L GammaP GammaD\nminAX: MinimumAxiomatization L GammaP\nipAX: IntuitionisticPropositionalLogic L GammaP\nsepconAX: SepconAxiomatization L GammaP\nwandAX: WandAxiomatization L GammaP\nMD: Model\nkMD: KripkeModel MD\nM: Kmodel\nR: Relation (Kworlds M)\nJ: Join (Kworlds M)\nSM: Semantics L MD\nfsepconSM: SepconSemantics L MD M SM\nfwandSM: WandSemantics L MD M SM\ncP: context -> Prop\nrel: bijection (Kworlds M) {x : context | cP x}\nH_R: forall (m n : Kworlds M) (Phi Psi : {x : context | cP x}), rel m Phi -> rel n Psi -> m <= n <-> Included expr (proj1_sig Phi) (proj1_sig Psi)\nH_J: forall (m1 m2 m : Kworlds M) (Phi1 Phi2 Phi : {x : context | cP x}), rel m1 Phi1 -> rel m2 Phi2 -> rel m Phi -> join m1 m2 m <-> Included expr (context_sepcon (proj1_sig Phi1) (proj1_sig Phi2)) (proj1_sig Phi)\nAL_DC: at_least derivable_closed cP\nLIN_SR: forall (Phi : context) (Psi : {x : context | cP x}), Lindenbaum_constructable (context_sepcon_included_r Phi (proj1_sig Psi)) cP\n\nGoal:\nSeparationAlgebra (Kworlds M)\n\nPremises:\nMinimumAxiomatization : forall L : Language, MinimumLanguage L -> Provable L -> Prop\nLindenbaum_constructable : (Ensemble ?A -> Prop) -> (Ensemble ?A -> Prop) -> Prop where ?A : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L sepconL : SepconLanguage L wandL : WandLanguage L GammaP : Provable L GammaD : Derivable L SC : NormalSequentCalculus L GammaP GammaD bSC : BasicSequentCalculus L GammaD minSC : MinimumSequentCalculus L GammaD ipSC : IntuitionisticPropositionalSequentCalculus L GammaD AX : NormalAxiomat\ncontext = fun L : Language => expr -> Prop : Language -> Type Argument L is implicit and maximally inserted\nRecord Derivable (L : Language) : Type := Build_Derivable { derivable : context -> expr -> Prop } For Build_Derivable: Argument scopes are [_ function_scope]\nSepconSemantics : forall L : Language, SepconLanguage L -> forall (MD : Model) (kMD : KripkeModel MD) (M : Kmodel), Relation (Kworlds M) -> Join (Kworlds M) -> Semantics L MD -> Prop\nproj1_sig : forall (A : Type) (P : A -> Prop), {x : A | P x} -> A\nWandSemantics : forall L : Language, WandLanguage L -> forall (MD : Model) (kMD : KripkeModel MD) (M : Kmodel), Relation (Kworlds M) -> Join (Kworlds M) -> Semantics L MD -> Prop\nMinimumSequentCalculus : forall L : Language, MinimumLanguage L -> Derivable L -> Prop\nRelation = fun worlds : Type => worlds -> Ensemble worlds : Type -> Type Argument scope is [type_scope]\nRecord MinimumLanguage (L : Language) : Type := Build_MinimumLanguage { impp : expr -> expr -> expr } For Build_MinimumLanguage: Argument scopes are [_ function_scope]\nRecord Semantics (L : Language) (MD : Model) : Type := Build_Semantics { denotation : expr -> model -> Prop } For Build_Semantics: Argument scopes are [_ _ function_scope]\nRecord SepconLanguage (L : Language) : Type := Build_SepconLanguage { sepcon : expr -> expr -> expr } For Build_SepconLanguage: Argument scopes are [_ function_scope]\njoin = fun (worlds : Type) (Join : Join worlds) => Join : forall worlds : Type, Join worlds -> worlds -> worlds -> worlds -> Prop Arguments worlds, Join are implicit and maximally inserted Argument scopes are [type_scope _ _ _ _]\nNormalAxiomatization : forall L : Language, MinimumLanguage L -> Provable L -> Derivable L -> Prop\nRecord WandLanguage (L : Language) : Type := Build_WandLanguage { wand : expr -> expr -> expr } For Build_WandLanguage: Argument scopes are [_ function_scope]\nIntuitionisticPropositionalSequentCalculus : forall L : Language, PropositionalLanguage L -> Derivable L -> Prop\nSeparationAlgebra : forall worlds : Type, Join worlds -> Prop\nRecord KripkeModel (MD : Model) : Type := Build_KripkeModel { Kmodel : Type; Kworlds : Kmodel -> Type; build_model : forall M : Kmodel, Kworlds M -> model } For Build_KripkeModel: Argument scopes are [_ type_scope function_scope function_scope]\nIntuitionisticPropositionalLogic : forall (L : Language) (minL : MinimumLanguage L), PropositionalLanguage L -> forall Gamma : Provable L, MinimumAxiomatization L Gamma -> Prop\nderivable_closed = fun (L : Language) (Gamma : Derivable L) (Phi : context) => forall x : expr, Phi |-- x -> Phi x : forall L : Language, Derivable L -> context -> Prop Arguments L, Gamma are implicit and maximally inserted\nJoin = fun worlds : Type => worlds -> worlds -> worlds -> Prop : Type -> Type Argument scope is [type_scope]\nexpr = fun Language0 : Language => let (expr) := Language0 in expr : Language -> Type Argument Language is implicit and maximally inserted\nIncluded : forall U : Type, Ensemble U -> Ensemble U -> Prop\nWandAxiomatization : forall L : Language, MinimumLanguage L -> SepconLanguage L -> WandLanguage L -> Provable L -> Prop\nRecord bijection (A B : Type) : Type := Build_bijection { bij_R : A -> B -> Prop; im_bij : image_defined bij_R; pf_bij : Bijection.partial_functional bij_R; in_bij : injective bij_R; su_bij : surjective bij_R } For bijection: Argument scopes are [type_scope type_scope] For Build_bijection: Argument scopes are [type_scope type_scope function_scope _ _ _ _]\nKworlds = fun (MD : Model) (KripkeModel0 : KripkeModel MD) => let (Kmodel, Kworlds, _) as KripkeModel return (Kmodel -> Type) := KripkeModel0 in Kworlds : forall (MD : Model) (KripkeModel : KripkeModel MD), Kmodel -> Type Arguments MD, KripkeModel are implicit and maximally inserted\nNormalSequentCalculus : forall L : Language, Provable L -> Derivable L -> Prop\nRecord PropositionalLanguage (L : Language) : Type := Build_PropositionalLanguage { andp : expr -> expr -> expr; orp : expr -> expr -> expr; falsep : expr } For Build_PropositionalLanguage: Argument scopes are [_ function_scope function_scope _]\nat_least = fun (L : Language) (P cP : context -> Prop) => forall Phi : context, cP Phi -> P Phi : forall L : Language, (context -> Prop) -> (context -> Prop) -> Prop Argument L is implicit and maximally inserted Argument scopes are [_ function_scope function_scope]\ncontext_sepcon = fun (L : Language) (sepconL : SepconLanguage L) (GammaD : Derivable L) (Phi Psi : context) (z : expr) => exists x y : expr, z = x * y /\\ Phi |-- x /\\ Psi |-- y : forall L : Language, SepconLanguage L -> Derivable L -> context -> context -> context Arguments L, sepconL, GammaD are implicit and maximally inserted\nSepconAxiomatization : forall L : Language, MinimumLanguage L -> SepconLanguage L -> Provable L -> Prop\ncontext_sepcon_included_r = fun (L : Language) (sepconL : SepconLanguage L) (GammaD : Derivable L) (Phi1 Psi Phi2 : context) => Included expr (context_sepcon Phi1 Phi2) Psi : forall L : Language, SepconLanguage L -> Derivable L -> context -> context -> context -> Prop Arguments L, sepconL, GammaD are implicit and maximally inserted\nRecord Provable (L : Language) : Type := Build_Provable { provable : expr -> Prop } For Build_Provable: Argument scopes are [_ function_scope]\nBasicSequentCalculus : forall L : Language, Derivable L -> Prop\ncontext_sepcon_included_l_context_orp_captured : forall Phi2 Psi : context, derivable_closed Psi -> orp_witnessed Psi ->...-> Included expr (context_sepcon (proj1_sig Phi1) (proj1_sig Phi2)) (proj1_sig Phi) AL_DC : at_least derivable_closed cP LIN_SR : forall (Phi : context) (Psi : {x : context | cP x}), Lindenbaum_constructable (context_sepcon_included_r Phi (proj1_sig Psi)) cP |- SepconOrAxiomatization ?L ?GammaP]\ncontext_sepcon_consistent_rev_left : forall Phi1 Phi2 Psi : context, Included expr (context_sepcon Phi1 Phi2) Psi -> consistent Psi ->...-> Included expr (context_sepcon (proj1_sig Phi1) (proj1_sig Phi2)) (proj1_sig Phi) AL_DC : at_least derivable_closed cP LIN_SR : forall (Phi : context) (Psi : {x : context | cP x}), Lindenbaum_constructable (context_sepcon_included_r Phi (proj1_sig Psi)) cP |- SepconFalseAxiomatization ?L ?GammaP]\nAxiomatization2SequentCalculus_cpSC : ClassicalPropositionalSequentCalculus ?L ?GammaD where ?L : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L sepconL : SepconLanguage L wandL : WandLanguage L GammaP : Provable L GammaD : Derivable L SC : NormalSequentCalculus L GammaP GammaD bSC : BasicSequentCalculus L GammaD minSC : MinimumSequentCalculus L GammaD ipSC : IntuitionisticPropositionalSequentCalculus L GammaD AX : NormalAxiomatization L GammaP GammaD minAX : MinimumAxiomatization L GammaP ipAX : IntuitionisticPropositionalLogic L GammaP sepconAX : SepconAxiomatization L GammaP wandAX : WandAxiomatization L GammaP MD : Model kMD : KripkeModel MD M : K...\nSequentCalculus2Axiomatization_cpAX : ClassicalPropositionalLogic ?L ?GammaP where ?L : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L sepconL : SepconLanguage L wandL : WandLanguage L GammaP : Provable L GammaD : Derivable L SC : NormalSequentCalculus L GammaP GammaD bSC : BasicSequentCalculus L GammaD minSC : MinimumSequentCalculus L GammaD ipSC : IntuitionisticPropositionalSequentCalculus L GammaD AX : NormalAxiomatization L GammaP GammaD minAX : MinimumAxiomatization L GammaP ipAX : IntuitionisticPropositionalLogic L GammaP sepconAX : SepconAxiomatization L GammaP wandAX : WandAxiomatization L GammaP MD : Model kMD : KripkeModel MD M : Kmodel R :...\nsat_falsep : forall m : Kworlds ?M, KRIPKE: ?M, m |= FF < ->...-> Included expr (context_sepcon (proj1_sig Phi1) (proj1_sig Phi2)) (proj1_sig Phi) AL_DC : at_least derivable_closed cP LIN_SR : forall (Phi : context) (Psi : {x : context | cP x}), Lindenbaum_constructable (context_sepcon_included_r Phi (proj1_sig Psi)) cP |- KripkePropositionalSemantics ?L ?MD ?M ?SM]\ndenote_falsep : Same_set (Kworlds ?M) (Kdenotation ?M FF) Semantics.falsep where ?L : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L sepconL : SepconLanguage L wandL : WandLanguage L GammaP : Provable L GammaD : Derivable L SC : NormalSequentCalculus L GammaP GammaD bSC : BasicSequentCalculus L GammaD minSC : MinimumSequentCalculus L GammaD ipSC : IntuitionisticPropositionalSequentCalculus L GammaD AX : NormalAxiomatization L GammaP GammaD minAX : MinimumAxiomatization L GammaP ipAX : IntuitionisticPropositionalLogic L GammaP sepconAX : SepconAxiomatization L GammaP wandAX : WandAxiomatization L GammaP MD : Model kMD : KripkeModel MD M :...\nsat_emp : forall m : Kworlds ?M, KRIPKE: ?M, m |= emp < ->...-> Included expr (context_sepcon (proj1_sig Phi1) (proj1_sig Phi2)) (proj1_sig Phi) AL_DC : at_least derivable_closed cP LIN_SR : forall (Phi : context) (Psi : {x : context | cP x}), Lindenbaum_constructable (context_sepcon_included_r Phi (proj1_sig Psi)) cP |- EmpSemantics ?L ?MD ?M ?SM]\ndenote_emp : Same_set (Kworlds ?M) (Kdenotation ?M emp) WeakSemantics.WeakSemantics.emp where ?L : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L sepconL : SepconLanguage L wandL : WandLanguage L GammaP : Provable L GammaD : Derivable L SC : NormalSequentCalculus L GammaP GammaD bSC : BasicSequentCalculus L GammaD minSC : MinimumSequentCalculus L GammaD ipSC : IntuitionisticPropositionalSequentCalculus L GammaD AX : NormalAxiomatization L GammaP GammaD minAX : MinimumAxiomatization L GammaP ipAX : IntuitionisticPropositionalLogic L GammaP sepconAX : SepconAxiomatization L GammaP wandAX : WandAxiomatization L GammaP MD : Model kMD : KripkeModel...\ndenote_orp : forall x y : expr, Same_set (Kworlds ?M) (Kdenotation ?M (x || y)) (Semantics.orp (Kdenotation ?M x) (Kdenotation ?M y)) where ?L : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L sepconL : SepconLanguage L wandL : WandLanguage L GammaP : Provable L GammaD : Derivable L SC : NormalSequentCalculus L GammaP GammaD bSC : BasicSequentCalculus L GammaD minSC : MinimumSequentCalculus L GammaD ipSC : IntuitionisticPropositionalSequentCalculus L GammaD AX : NormalAxiomatization L GammaP GammaD minAX : MinimumAxiomatization L GammaP ipAX : IntuitionisticPropositionalLogic L GammaP sepconAX : SepconAxiomatization L...\ndenote_andp : forall x y : expr, Same_set (Kworlds ?M) (Kdenotation ?M (x && y)) (Semantics.andp (Kdenotation ?M x) (Kdenotation ?M y)) where ?L : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L sepconL : SepconLanguage L wandL : WandLanguage L GammaP : Provable L GammaD : Derivable L SC : NormalSequentCalculus L GammaP GammaD bSC : BasicSequentCalculus L GammaD minSC : MinimumSequentCalculus L GammaD ipSC : IntuitionisticPropositionalSequentCalculus L GammaD AX : NormalAxiomatization L GammaP GammaD minAX : MinimumAxiomatization L GammaP ipAX : IntuitionisticPropositionalLogic L GammaP sepconAX : SepconAxiomatization L...\nsat_orp : forall (m : Kworlds ?M) (x y : expr), KRIPKE: ?M, m |= x || y < ->...-> Included expr (context_sepcon (proj1_sig Phi1) (proj1_sig Phi2)) (proj1_sig Phi) AL_DC : at_least derivable_closed cP LIN_SR : forall (Phi : context) (Psi : {x : context | cP x}), Lindenbaum_constructable (context_sepcon_included_r Phi (proj1_sig Psi)) cP |- KripkePropositionalSemantics ?L ?MD ?M ?SM]\nsat_andp : forall (m : Kworlds ?M) (x y : expr), KRIPKE: ?M, m |= x && y < ->...-> Included expr (context_sepcon (proj1_sig Phi1) (proj1_sig Phi2)) (proj1_sig Phi) AL_DC : at_least derivable_closed cP LIN_SR : forall (Phi : context) (Psi : {x : context | cP x}), Lindenbaum_constructable (context_sepcon_included_r Phi (proj1_sig Psi)) cP |- KripkePropositionalSemantics ?L ?MD ?M ?SM]\nProofTheoryPatterns.orp_funcp : forall x y z : expr, |-- ?funcp (x || y) z <- ->...-> Included expr (context_sepcon (proj1_sig Phi1) (proj1_sig Phi2)) (proj1_sig Phi) AL_DC : at_least derivable_closed cP LIN_SR : forall (Phi : context) (Psi : {x : context | cP x}), Lindenbaum_constructable (context_sepcon_included_r Phi (proj1_sig Psi)) cP |- ProofTheoryPatterns.Commutativity ?L ?Gamma ?prodp]\nSequentCalculus2Axiomatization_AX : NormalAxiomatization ?L ?GammaP ?GammaD where ?L : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L sepconL : SepconLanguage L wandL : WandLanguage L GammaP : Provable L GammaD : Derivable L SC : NormalSequentCalculus L GammaP GammaD bSC : BasicSequentCalculus L GammaD minSC : MinimumSequentCalculus L GammaD ipSC : IntuitionisticPropositionalSequentCalculus L GammaD AX : NormalAxiomatization L GammaP GammaD minAX : MinimumAxiomatization L GammaP ipAX : IntuitionisticPropositionalLogic L GammaP sepconAX : SepconAxiomatization L GammaP wandAX : WandAxiomatization L GammaP MD : Model kMD : KripkeModel MD M : Kmodel...\nWeakSemantics.WeakSemantics.emp_closed : upwards_closed_Kdenote WeakSemantics.WeakSemantics.emp where ?worlds : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L sepconL : SepconLanguage L wandL : WandLanguage L GammaP : Provable L GammaD : Derivable L SC : NormalSequentCalculus L GammaP GammaD bSC : BasicSequentCalculus L GammaD minSC : MinimumSequentCalculus L GammaD ipSC : IntuitionisticPropositionalSequentCalculus L GammaD AX : NormalAxiomatization L GammaP GammaD minAX : MinimumAxiomatization L GammaP ipAX : IntuitionisticPropositionalLogic L GammaP sepconAX : SepconAxiomatization L GammaP wandAX : WandAxiomatization L GammaP MD : Model kMD : KripkeModel MD M : Kmodel...\nWeakSemantics.WeakSemanticsMono.emp : MonoEnsemble ?worlds where ?worlds : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L sepconL : SepconLanguage L wandL : WandLanguage L GammaP : Provable L GammaD : Derivable L SC : NormalSequentCalculus L GammaP GammaD bSC : BasicSequentCalculus L GammaD minSC : MinimumSequentCalculus L GammaD ipSC : IntuitionisticPropositionalSequentCalculus L GammaD AX : NormalAxiomatization L GammaP GammaD minAX : MinimumAxiomatization L GammaP ipAX : IntuitionisticPropositionalLogic L GammaP sepconAX : SepconAxiomatization L GammaP wandAX : WandAxiomatization L GammaP MD : Model kMD : KripkeModel MD M : Kmodel R : Relation (Kworlds...\nsepcon_orp_distr_r : forall x y z : expr, |-- (x || y) * z <- ->...-> Included expr (context_sepcon (proj1_sig Phi1) (proj1_sig Phi2)) (proj1_sig Phi) AL_DC : at_least derivable_closed cP LIN_SR : forall (Phi : context) (Psi : {x : context | cP x}), Lindenbaum_constructable (context_sepcon_included_r Phi (proj1_sig Psi)) cP |- SepconOrAxiomatization ?L ?Gamma]\nWeakSemantics.WeakSemanticsMono.sepcon : MonoEnsemble ?worlds -> MonoEnsemble ?worlds ->...-> Included expr (context_sepcon (proj1_sig Phi1) (proj1_sig Phi2)) (proj1_sig Phi) AL_DC : at_least derivable_closed cP LIN_SR : forall (Phi : context) (Psi : {x : context | cP x}), Lindenbaum_constructable (context_sepcon_included_r Phi (proj1_sig Psi)) cP |- UpwardsClosedSeparationAlgebra ?worlds]\nWeakSemantics.WeakSemanticsMono.wand : MonoEnsemble ?worlds -> MonoEnsemble ?worlds ->...-> Included expr (context_sepcon (proj1_sig Phi1) (proj1_sig Phi2)) (proj1_sig Phi) AL_DC : at_least derivable_closed cP LIN_SR : forall (Phi : context) (Psi : {x : context | cP x}), Lindenbaum_constructable (context_sepcon_included_r Phi (proj1_sig Psi)) cP |- DownwardsClosedSeparationAlgebra ?worlds]\nderivable_excluded_middle : forall (Phi : context) (x : expr), Phi |-- x || ~~ x where ?L : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L sepconL : SepconLanguage L wandL : WandLanguage L GammaP : Provable L GammaD : Derivable L SC : NormalSequentCalculus L GammaP GammaD bSC : BasicSequentCalculus L GammaD minSC : MinimumSequentCalculus L GammaD ipSC : IntuitionisticPropositionalSequentCalculus L GammaD AX : NormalAxiomatization L GammaP GammaD minAX : MinimumAxiomatization L GammaP ipAX : IntuitionisticPropositionalLogic L GammaP sepconAX : SepconAxiomatization L GammaP wandAX : WandAxiomatization L GammaP MD : Model kMD : KripkeModel MD M : Kmodel R...\nProofTheoryPatterns.funcp_andp_distr_r : forall x y z : expr, |-- ?funcp x (y && z) <- ->...-> Included expr (context_sepcon (proj1_sig Phi1) (proj1_sig Phi2)) (proj1_sig Phi) AL_DC : at_least derivable_closed cP LIN_SR : forall (Phi : context) (Psi : {x : context | cP x}), Lindenbaum_constructable (context_sepcon_included_r Phi (proj1_sig Psi)) cP |- ProofTheoryPatterns.Adjointness ?L ?Gamma ?prodp ?funcp]\nfalsep_sepcon : forall x : expr, |-- FF * x <- ->...-> Included expr (context_sepcon (proj1_sig Phi1) (proj1_sig Phi2)) (proj1_sig Phi) AL_DC : at_least derivable_closed cP LIN_SR : forall (Phi : context) (Psi : {x : context | cP x}), Lindenbaum_constructable (context_sepcon_included_r Phi (proj1_sig Psi)) cP |- SepconFalseAxiomatization ?L ?Gamma]\nsat_impp : forall (m : Kworlds ?M) (x y : expr), KRIPKE: ?M, m |= x - -> y < ->...-> Included expr (context_sepcon (proj1_sig Phi1) (proj1_sig Phi2)) (proj1_sig Phi) AL_DC : at_least derivable_closed cP LIN_SR : forall (Phi : context) (Psi : {x : context | cP x}), Lindenbaum_constructable (context_sepcon_included_r Phi (proj1_sig Psi)) cP |- KripkeMinimumSemantics ?L ?MD ?M ?SM]\nWeakSemantics.WeakSemantics.wand_closed : forall X Y : Ensemble ?worlds, upwards_closed_Kdenote X -> upwards_closed_Kdenote Y ->...-> Included expr (context_sepcon (proj1_sig Phi1) (proj1_sig Phi2)) (proj1_sig Phi) AL_DC : at_least derivable_closed cP LIN_SR : forall (Phi : context) (Psi : {x : context | cP x}), Lindenbaum_constructable (context_sepcon_included_r Phi (proj1_sig Psi)) cP |- DownwardsClosedSeparationAlgebra ?worlds]\nWeakSemantics.WeakSemantics.sepcon_closed : forall X Y : Ensemble ?worlds, upwards_closed_Kdenote X -> upwards_closed_Kdenote Y ->...-> Included expr (context_sepcon (proj1_sig Phi1) (proj1_sig Phi2)) (proj1_sig Phi) AL_DC : at_least derivable_closed cP LIN_SR : forall (Phi : context) (Psi : {x : context | cP x}), Lindenbaum_constructable (context_sepcon_included_r Phi (proj1_sig Psi)) cP |- UpwardsClosedSeparationAlgebra ?worlds]\ndenote_impp : forall x y : expr, Same_set (Kworlds ?M) (Kdenotation ?M (x --> y)) (Semantics.impp (Kdenotation ?M x) (Kdenotation ?M y)) where ?L : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L sepconL : SepconLanguage L wandL : WandLanguage L GammaP : Provable L GammaD : Derivable L SC : NormalSequentCalculus L GammaP GammaD bSC : BasicSequentCalculus L GammaD minSC : MinimumSequentCalculus L GammaD ipSC : IntuitionisticPropositionalSequentCalculus L GammaD AX : NormalAxiomatization L GammaP GammaD minAX : MinimumAxiomatization L GammaP ipAX : IntuitionisticPropositionalLogic L GammaP sepconAX : SepconAxiomatization L...\nsat_mono : forall (m n : Kworlds ?M) (x : expr), m <= n -> KRIPKE: ?M, m |= x ->...-> Included expr (context_sepcon (proj1_sig Phi1) (proj1_sig Phi2)) (proj1_sig Phi) AL_DC : at_least derivable_closed cP LIN_SR : forall (Phi : context) (Psi : {x : context | cP x}), Lindenbaum_constructable (context_sepcon_included_r Phi (proj1_sig Psi)) cP |- KripkeIntuitionisticSemantics ?L ?MD ?M ?SM]\ndenote_closed : forall x : expr, upwards_closed_Kdenote (Kdenotation ?M x) where ?L : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L sepconL : SepconLanguage L wandL : WandLanguage L GammaP : Provable L GammaD : Derivable L SC : NormalSequentCalculus L GammaP GammaD bSC : BasicSequentCalculus L GammaD minSC : MinimumSequentCalculus L GammaD ipSC : IntuitionisticPropositionalSequentCalculus L GammaD AX : NormalAxiomatization L GammaP GammaD minAX : MinimumAxiomatization L GammaP ipAX : IntuitionisticPropositionalLogic L GammaP sepconAX : SepconAxiomatization L GammaP wandAX : WandAxiomatization L GammaP MD : Model kMD : KripkeModel MD M : Kmodel R :...\nexcluded_middle : forall x : expr, |-- x || ~~ x where ?L : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L sepconL : SepconLanguage L wandL : WandLanguage L GammaP : Provable L GammaD : Derivable L SC : NormalSequentCalculus L GammaP GammaD bSC : BasicSequentCalculus L GammaD minSC : MinimumSequentCalculus L GammaD ipSC : IntuitionisticPropositionalSequentCalculus L GammaD AX : NormalAxiomatization L GammaP GammaD minAX : MinimumAxiomatization L GammaP ipAX : IntuitionisticPropositionalLogic L GammaP sepconAX : SepconAxiomatization L GammaP wandAX : WandAxiomatization L GammaP MD : Model kMD : KripkeModel MD M : Kmodel R : Relation (Kworlds M) J...\nweak_excluded_middle : forall x : expr, |-- ~~ x || ~~ (~~ x) where ?L : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L sepconL : SepconLanguage L wandL : WandLanguage L GammaP : Provable L GammaD : Derivable L SC : NormalSequentCalculus L GammaP GammaD bSC : BasicSequentCalculus L GammaD minSC : MinimumSequentCalculus L GammaD ipSC : IntuitionisticPropositionalSequentCalculus L GammaD AX : NormalAxiomatization L GammaP GammaD minAX : MinimumAxiomatization L GammaP ipAX : IntuitionisticPropositionalLogic L GammaP sepconAX : SepconAxiomatization L GammaP wandAX : WandAxiomatization L GammaP MD : Model kMD : KripkeModel MD M : Kmodel R : Relation (K...\nProofTheoryPatterns.funcp_mono : forall x1 y1 x2 y2 : expr, |-- x2 - -> x1 -> |-- y1 - -> y2 -> |-- ?funcp x1 y1 - ->...-> Included expr (context_sepcon (proj1_sig Phi1) (proj1_sig Phi2)) (proj1_sig Phi) AL_DC : at_least derivable_closed cP LIN_SR : forall (Phi : context) (Psi : {x : context | cP x}), Lindenbaum_constructable (context_sepcon_included_r Phi (proj1_sig Psi)) cP |- ProofTheoryPatterns.Monotonicity ?L ?Gamma ?prodp]\nimpp_choice : forall x y : expr, |-- (x --> y) || (y --> x) where ?L : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L sepconL : SepconLanguage L wandL : WandLanguage L GammaP : Provable L GammaD : Derivable L SC : NormalSequentCalculus L GammaP GammaD bSC : BasicSequentCalculus L GammaD minSC : MinimumSequentCalculus L GammaD ipSC : IntuitionisticPropositionalSequentCalculus L GammaD AX : NormalAxiomatization L GammaP GammaD minAX : MinimumAxiomatization L GammaP ipAX : IntuitionisticPropositionalLogic L GammaP sepconAX : SepconAxiomatization L GammaP wandAX : WandAxiomatization L GammaP MD : Model kMD : KripkeModel MD M : Kmodel R :...\nProofTheoryPatterns.adjoint_modus_ponens : forall x y : expr, |-- ?prodp (?funcp x y) x - ->...-> Included expr (context_sepcon (proj1_sig Phi1) (proj1_sig Phi2)) (proj1_sig Phi) AL_DC : at_least derivable_closed cP LIN_SR : forall (Phi : context) (Psi : {x : context | cP x}), Lindenbaum_constructable (context_sepcon_included_r Phi (proj1_sig Psi)) cP |- ProofTheoryPatterns.Adjointness ?L ?Gamma ?prodp ?funcp]\njoin_comm : forall m1 m2 m : ?worlds, join m1 m2 m ->...-> Included expr (context_sepcon (proj1_sig Phi1) (proj1_sig Phi2)) (proj1_sig Phi) AL_DC : at_least derivable_closed cP LIN_SR : forall (Phi : context) (Psi : {x : context | cP x}), Lindenbaum_constructable (context_sepcon_included_r Phi (proj1_sig Psi)) cP |- SeparationAlgebra ?worlds]\njoin_assoc : forall mx my mz mxy mxyz : ?worlds, join mx my mxy -> join mxy mz mxyz ->...-> Included expr (context_sepcon (proj1_sig Phi1) (proj1_sig Phi2)) (proj1_sig Phi) AL_DC : at_least derivable_closed cP LIN_SR : forall (Phi : context) (Psi : {x : context | cP x}), Lindenbaum_constructable (context_sepcon_included_r Phi (proj1_sig Psi)) cP |- SeparationAlgebra ?worlds]\nderivable_finite_witnessed : forall (Phi : context) (y : expr), Phi |-- y ->...-> Included expr (context_sepcon (proj1_sig Phi1) (proj1_sig Phi2)) (proj1_sig Phi) AL_DC : at_least derivable_closed cP LIN_SR : forall (Phi : context) (Psi : {x : context | cP x}), Lindenbaum_constructable (context_sepcon_included_r Phi (proj1_sig Psi)) cP |- FiniteWitnessedSequentCalculus ?L ?Gamma]\nemp : expr where ?L : [L : Language minL : MinimumLanguage L pL : PropositionalLanguage L sepconL : SepconLanguage L wandL : WandLanguage L GammaP : Provable L GammaD : Derivable L SC : NormalSequentCalculus L GammaP GammaD bSC : BasicSequentCalculus L GammaD minSC : MinimumSequentCalculus L GammaD ipSC : IntuitionisticPropositionalSequentCalculus L GammaD AX : NormalAxiomatization L GammaP GammaD minAX : MinimumAxiomatization L GammaP ipAX : IntuitionisticPropositionalLogic L GammaP sepconAX : SepconAxiomatization L GammaP wandAX : WandAxiomatization L GammaP MD : Model kMD : KripkeModel MD M : Kmodel R : Relation (Kworlds M) J : Join (Kworlds M) SM : Sem...\nbijection_sym : bijection ?A ?B ->...-> Included expr (context_sepcon (proj1_sig Phi1) (proj1_sig Phi2)) (proj1_sig Phi) AL_DC : at_least derivable_closed cP LIN_SR : forall (Phi : context) (Psi : {x : context | cP x}), Lindenbaum_constructable (context_sepcon_included_r Phi (proj1_sig Psi)) cP |- Type]\nbijection_injection : bijection ?A ?B ->...-> Included expr (context_sepcon (proj1_sig Phi1) (proj1_sig Phi2)) (proj1_sig Phi) AL_DC : at_least derivable_closed cP LIN_SR : forall (Phi : context) (Psi : {x : context | cP x}), Lindenbaum_constructable (context_sepcon_included_r Phi (proj1_sig Psi)) cP |- Type]\nBijection.partial_functional : (?A -> ?B -> Prop) ->...-> Included expr (context_sepcon (proj1_sig Phi1) (proj1_sig Phi2)) (proj1_sig Phi) AL_DC : at_least derivable_closed cP LIN_SR : forall (Phi : context) (Psi : {x : context | cP x}), Lindenbaum_constructable (context_sepcon_included_r Phi (proj1_sig Psi)) cP |- Type]"}, {"role": "assistant", "content": "```coq\napply WeakSemantics.WeakSemanticsMono.sepcon.\napply WeakSemantics.WeakSemanticsMono.wand.\napply join_comm.\napply join_assoc.\napply derivable_finite_witnessed.\nQed.```"}], "original": "apply WeakSemantics.WeakSemanticsMono.sepcon. apply WeakSemantics.WeakSemanticsMono.wand. apply join_comm. apply join_assoc. apply derivable_finite_witnessed.", "succ": false}]