[{"history": {"proof": "intros. unfold type_term_log_monotonic. intros. split. - destruct H; auto. shelve. - shelve.", "repairs": ["", "", "", "", "", "", "unfinished_bullet", "", ""], "exceptions": [{"ctx": ["intros."], "tactic": "intros h st t n pli plt es ci st' ps H.", "exn": "h is already used.", "type": "used_var", "handled": true}, {"ctx": ["intros.", "unfold type_term_log_monotonic.", "intros.", "split.", "-", "destruct H; auto."], "tactic": "-", "exn": "Wrong bullet -: Current bullet - is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["intros.", "unfold type_term_log_monotonic.", "intros.", "split.", "-", "destruct H; auto.", "shelve.", "-"], "tactic": "left.", "exn": "Not an inductive goal with 2 constructors.", "type": "not_inductive_goal", "handled": false}, {"ctx": ["intros.", "unfold type_term_log_monotonic.", "intros.", "split.", "-", "destruct H; auto.", "shelve.", "-"], "tactic": "apply H0.", "exn": "In environment orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params rri : raft_refinement_interface aecfli : append_entries_came_from_leaders_interface ollpti : one_leaderLog_per_term_interface lltsi : leaderLogs_term_sanity_interface olpti : one_leader_per_term_interface h : name st : raft_data t : term n : name pli : logIndex plt : term es : list entry ci : logIndex st' : raft_data ps : msg H : handleAppendEntries h st t n pli plt es ci = (st', ps) H0 : type st' = Leader Unable to unify \"type st' = Leader\" with \"currentTerm st' = currentTerm st /\\\\ (forall e : entry, In e (log st) -> In e (log st'))\".", "type": "cannot_unify", "handled": false}]}, "chat": [{"role": "user", "content": "I will give you a Coq proof state, including both hypotheses and a specific goal and your need to prove it. Your response should be a singular code block of Coq proof, without any additional explanation or commentary. Follow to these guidelines:\nIntroduce variables using unique names to avoid any conflicts.\nKeep each command distinct and separated, avoid concatenations like ';' or '[cmd|cmd]'.\nOrganize your proof with bullets like '-', '+', and '*' instead of braces ({, }). Shift to their double symbols like '--' and '++', when necessary.\nEffectively use given premises, follow the syntax and structure demonstrated in the examples provided.\n\nExample 1:\n\nHypotheses:\nn, m: nat\nIHn: m + n = n + m\n\nGoal:\nm + S n = S n + m\n\nProof:\n```simpl. rewrite <- IHn. auto.```\n\nExample 2:\nHypotheses:\n\nGoal:\nforall n m : nat, m + n = n + m\n\n```intros n m. induction n.\n- simpl. auto.\n- simpl. rewrite <- IHn. auto.```\n\nSovle This Proof State:\n\nHypotheses:\norig_base_params: BaseParams\none_node_params: OneNodeParams orig_base_params\nraft_params: RaftParams orig_base_params\nrri: raft_refinement_interface\naecfli: append_entries_came_from_leaders_interface\nollpti: one_leaderLog_per_term_interface\nlltsi: leaderLogs_term_sanity_interface\nolpti: one_leader_per_term_interface\n\nGoal:\nforall (h : name) (st : raft_data) (t : term) (n : name) (pli : logIndex) (plt : term) (es : list entry) (ci : logIndex) (st' : raft_data) (ps : msg), handleAppendEntries h st t n pli plt es ci = (st', ps) -> type_term_log_monotonic st st'\n\nPremises:\nRecord OneNodeParams (P : BaseParams) : Type := Build_OneNodeParams { init : data; handler : input -> data -> output * data } Arguments Build_OneNodeParams _ _ _%function_scope\nRecord one_leader_per_term_interface (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params) : Prop := Build_one_leader_per_term_interface { one_leader_per_term_invariant : forall net : network, raft_intermediate_reachable net -> one_leader_per_term net } Arguments one_leader_per_term_interface {orig_base_params one_node_params raft_params} Arguments Build_one_leader_per_term_interface {orig_base_params one_node_params raft_params} _%function_scope\nhandleAppendEntries = fun (orig_base_params : BaseParams) (raft_params : RaftParams orig_base_params) (_ : name) (state : raft_data) (t : term) (leaderId : name) (prevLogIndex : logIndex) (prevLogTerm : term) (entries : list entry) (leaderCommit : logIndex) => if t <? currentTerm state then (state, AppendEntriesReply (currentTerm state) entries false) else if prevLogIndex =? 0 then if haveNewEntries state entries then (RaftState.set_raft_data_leaderId term name entry logIndex serverType data clientId output (RaftState.set_raft_data_type term name entry logIndex serverType data clientId output (RaftState.set_raft_data_commitIndex term name entry logIndex serverType data clientId output\nRecord BaseParams : Type := Build_BaseParams { data : Type; input : Type; output : Type } Arguments Build_BaseParams (_ _ _)%type_scope\nRecord one_leaderLog_per_term_interface (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params) : Prop := Build_one_leaderLog_per_term_interface { one_leaderLog_per_term_invariant : forall net : network, refined_raft_intermediate_reachable net -> one_leaderLog_per_term net; one_leaderLog_per_term_log_invariant : forall net : network, refined_raft_intermediate_reachable net -> one_leaderLog_per_term_log net; one_leaderLog_per_term_host_invariant : forall net : network, refined_raft_intermediate_reachable net -> one_leaderLog_per_term_host net } Arguments one_leaderLog_per_term_interface {orig_base_params one_node_params raft_params} Arguments Build_one_leaderLog_per_term_interface {orig_base_params one_node\nname = fun (orig_base_params : BaseParams) (raft_params : RaftParams orig_base_params) => fin N : forall orig_base_params : BaseParams, RaftParams orig_base_params -> Type Arguments name {orig_base_params raft_params}\nlogIndex = nat : Set\nRecord RaftParams (orig_base_params : BaseParams) : Type := Build_RaftParams { N : nat; input_eq_dec : forall x y : input, {x = y} + {x <> y}; output_eq_dec : forall x y : output, {x = y} + {x <> y}; clientId : Type; clientId_eq_dec : forall x y : clientId, {x = y} + {x <> y} } Arguments Build_RaftParams _ _%nat_scope (_ _)%function_scope [clientId]%type_scope _%function_scope\nInductive list (A : Type) : Type := nil : list A | cons : A -> list A -> list A Arguments list _%type_scope Arguments nil {A}%type_scope Arguments cons {A}%type_scope a l%list_scope : rename\nRecord append_entries_came_from_leaders_interface (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params) : Prop := Build_append_entries_came_from_leaders_interface { append_entries_came_from_leaders_invariant : forall net : network, refined_raft_intermediate_reachable net -> append_entries_came_from_leaders net } Arguments append_entries_came_from_leaders_interface {orig_base_params one_node_params raft_params} Arguments Build_append_entries_came_from_leaders_interface {orig_base_params one_node_params raft_params} _%function_scope\nInductive msg (orig_base_params : BaseParams) (raft_params : RaftParams orig_base_params) : Type := RequestVote : term -> name -> logIndex -> term -> msg | RequestVoteReply : term -> bool -> msg | AppendEntries : term -> name -> logIndex -> term -> list entry -> logIndex -> msg | AppendEntriesReply : term -> list entry -> bool -> msg Arguments msg {orig_base_params raft_params} Arguments RequestVote {orig_base_params raft_params} Arguments RequestVoteReply {orig_base_params raft_params} _ _%bool_scope Arguments AppendEntries {orig_base_params raft_params} _ _ _ _ _%list_scope Arguments AppendEntriesReply {orig_base_params raft_params} _ _%list_scope _%bool_scope\nRecord leaderLogs_term_sanity_interface (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params) : Prop := Build_leaderLogs_term_sanity_interface { leaderLogs_term_sanity_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaderLogs_term_sanity net; leaderLogs_currentTerm_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaderLogs_currentTerm_sanity net; leaderLogs_currentTerm_sanity_candidate_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaderLogs_currentTerm_sanity_candidate net } Arguments leaderLogs_term_sanity_interface {orig_base_params one_node_params raft_params} Arguments Build_leaderLogs_term_sanity_interface {orig_base_params one_node\nterm = nat : Set\nraft_data = fun (orig_base_params : BaseParams) (raft_params : RaftParams orig_base_params) => RaftState.raft_data term name entry logIndex serverType data clientId output : forall orig_base_params : BaseParams, RaftParams orig_base_params -> Type Arguments raft_data {orig_base_params raft_params}\ntype_term_log_monotonic = fun st st' : RaftState.raft_data term name entry logIndex serverType data clientId output => type st' = Leader -> type st = Leader /\\ currentTerm st' = currentTerm st /\\ (forall e : entry, In e (log st) -> In e (log st')) : RaftState.raft_data term name entry logIndex serverType data clientId output -> RaftState.raft_data term name entry logIndex serverType data clientId output -> Prop\nRecord raft_refinement_interface (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params) : Prop := Build_raft_refinement_interface { refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft_net_invariant_state_same_packet_subset P -> refined_\nRecord entry (orig_base_params : BaseParams) (raft_params : RaftParams orig_base_params) : Type := mkEntry { eAt : name; eClient : clientId; eId : nat; eIndex : logIndex; eTerm : term; eInput : input } Arguments entry {orig_base_params raft_params} Arguments mkEntry {orig_base_params raft_params} _ _ _%nat_scope\nhandleAppendEntries_same_lastApplied : forall (h : name) (st : raft_data) (t : term) (n : name) (pli : logIndex) (plt : term) (es : list entry) (ci : logIndex) (st' : raft_data) (ps : msg), handleAppendEntries h st t n pli plt es ci = (st', ps) -> lastApplied st' = lastApplied st\nhandleAppendEntries_votesReceived : forall (h : name) (st : raft_data) (t : term) (n : name) (pli : logIndex) (plt : term) (es : list entry) (ci : logIndex) (st' : raft_data) (ps : msg), handleAppendEntries h st t n pli plt es ci = (st', ps) -> votesReceived st' = votesReceived st\nhandleAppendEntries_currentTerm : forall (h : name) (st : raft_data) (t : term) (n : name) (pli : logIndex) (plt : term) (es : list entry) (ci : logIndex) (st' : raft_data) (ps : msg), handleAppendEntries h st t n pli plt es ci = (st', ps) -> currentTerm st <= currentTerm st'\nhandleAppendEntries_same_term_votedFor_preserved : forall (h : name) (st : raft_data) (t : term) (n : name) (pli : logIndex) (plt : term) (es : list entry) (ci : logIndex) (st' : raft_data) (ps : msg), handleAppendEntries h st t n pli plt es ci = (st', ps) -> currentTerm st' = currentTerm st -> votedFor st' = votedFor st\nhandleAppendEntries_type : forall (h : name) (st : raft_data) (t : term) (n : name) (pli : logIndex) (plt : term) (es : list entry) (ci : logIndex) (st' : raft_data) (ps : msg), handleAppendEntries h st t n pli plt es ci = (st', ps) -> type st' = type st /\\ currentTerm st' = currentTerm st \\/ type st' = Follower\nhandleAppendEntries_not_append_entries : forall (h : name) (st : raft_data) (t : term) (n : name) (pli : logIndex) (plt : term) (es : list entry) (ci : logIndex) (st' : raft_data) (m : msg), handleAppendEntries h st t n pli plt es ci = (st', m) -> ~ is_append_entries m\nhandleAppendEntries_log_term_type : forall (h : name) (st : raft_data) (t : term) (n : name) (pli : logIndex) (plt : term) (es : list entry) (ci : logIndex) (st' : raft_data) (ps : msg), handleAppendEntries h st t n pli plt es ci = (st', ps) -> log st' = log st /\\ currentTerm st' = currentTerm st /\\ type st' = type st \\/ type st' = Follower\nhandleAppendEntries_type_term : forall (h : name) (st : raft_data) (t : term) (n : name) (pli : logIndex) (plt : term) (es : list entry) (ci : logIndex) (st' : raft_data) (ps : msg), handleAppendEntries h st t n pli plt es ci = (st', ps) -> type st' = type st /\\ currentTerm st' = currentTerm st \\/ type st' = Follower /\\ currentTerm st' >= currentTerm st\nhandleAppendEntries_currentTerm_leaderId : forall (h : name) (st : raft_data) (t : term) (n : name) (pli : logIndex) (plt : term) (es : list entry) (ci : logIndex) (st' : raft_data) (ps : msg), handleAppendEntries h st t n pli plt es ci = (st', ps) -> currentTerm st < currentTerm st' \\/ currentTerm st <= currentTerm st' /\\ (leaderId st' = leaderId st \\/ leaderId st' <> None)\nhandleAppendEntries_term_votedFor : forall (h : name) (st : raft_data) (t : term) (n : name) (pli : logIndex) (plt : term) (es : list entry) (ci : logIndex) (st' : raft_data) (ps : msg) (h' : name), handleAppendEntries h st t n pli plt es ci = (st', ps) -> votedFor st' = Some h' -> currentTerm st' = currentTerm st /\\ votedFor st' = votedFor st\nhandleAppendEntries_matchIndex_preserved : forall (h : name) (st d : raft_data) (m : msg) (t : term) (n : name) (pli : logIndex) (plt : term) (es : list entry) (ci : logIndex), handleAppendEntries h st t n pli plt es ci = (d, m) -> matchIndex_preserved st d\nhandleAppendEntries_clientCache : forall (h : name) (st d : raft_data) (m : msg) (t : term) (n : name) (pli : logIndex) (plt : term) (es : list entry) (ci : logIndex), handleAppendEntries h st t n pli plt es ci = (d, m) -> clientCache d = clientCache st\nhandleAppendEntries_stateMachine : forall (h : name) (st d : raft_data) (m : msg) (t : term) (n : name) (pli : logIndex) (plt : term) (es : list entry) (ci : logIndex), handleAppendEntries h st t n pli plt es ci = (d, m) -> stateMachine d = stateMachine st\nhandleAppendEntries_log : forall (h : name) (st : raft_data) (t : term) (n : name) (pli : logIndex) (plt : term) (es : list entry) (ci : logIndex) (st' : raft_data) (ps : msg), handleAppendEntries h st t n pli plt es ci = (st', ps) -> log st' = log st \\/ currentTerm st <= t /\\ es <> [] /\\ pli = 0 /\\ log st' = es \\/ (currentTerm st <= t /\\ es <> [] /\\ pli <> 0 /\\ (exists e : entry, In e (log st) /\\ eIndex e = pli /\\ eTerm e = plt)) /\\ log st' = es ++ removeAfterIndex (log st) pli\nhandleAppendEntries_log_detailed : forall (h : name) (st : raft_data) (t : term) (n : name) (pli : logIndex) (plt : term) (es : list entry) (ci : logIndex) (st' : raft_data) (ps : msg), handleAppendEntries h st t n pli plt es ci = (st', ps) -> commitIndex st' = commitIndex st /\\ log st' = log st \\/ leaderId st' <> None /\\ currentTerm st' = t /\\ commitIndex st' = Init.Nat.max (commitIndex st) (Init.Nat.min ci (maxIndex es)) /\\ es <> [] /\\ pli = 0 /\\ t >= currentTerm st /\\ log st' = es /\\ (findAtIndex (log st) (maxIndex es) = None \\/ (exists e : entry, findAtIndex (log st) (maxIndex es) = Some e /\\ eTerm e...\nappend_entries_came_from_leaders = fun (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params) (net : network) => forall (p : packet) (t : term) (n : name) (pli : logIndex) (plt : term) (es : list entry) (ci : logIndex), In p (nwPackets net) -> pBody p = AppendEntries t n pli plt es ci -> exists ll : list entry, In (t, ll) (leaderLogs (fst (nwState net (pSrc p)))) : forall (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params), network -> Prop Arguments append_entries_came_from_leaders {orig_base_params one_node_params raft_params}\nrefined_raft_net_invariant_append_entries = fun (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params) (P : network -> Prop) => forall (xs : list packet) (p : packet) (ys : list packet) (net : network) (st' : name -> data) (ps' : list packet) (gd : electionsData) (d : raft_data) (m : msg) (t : term) (n : name) (pli : logIndex) (plt : term) (es : list entry) (ci : logIndex), handleAppendEntries (pDst p) (snd (nwState net (pDst p))) t n pli plt es ci = (d, m) ->...-> Prop Arguments refined_raft_net_invariant_append_entries {orig_base_params one_node_params raft_params} _%function_scope\nraft_net_invariant_append_entries = fun (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params) (P : network -> Prop) => forall (xs : list packet) (p : packet) (ys : list packet) (net : network) (st' : name -> data) (ps' : list packet) (d : raft_data) (m : msg) (t : term) (n : name) (pli : logIndex) (plt : term) (es : list entry) (ci : logIndex), handleAppendEntries (pDst p) (nwState net (pDst p)) t n pli plt es ci = (d, m) -> pBody p = AppendEntries t n pli plt es ci -> P net ->...-> Prop Arguments raft_net_invariant_append_entries {orig_base_params one_node_params raft_params} _%function_scope\nrefined_raft_net_invariant_append_entries' = fun (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params) (P : network -> Prop) => forall (xs : list packet) (p : packet) (ys : list packet) (net : network) (st' : Net.name -> data) (ps' : list packet) (gd : electionsData) (d : raft_data) (m : msg) (t : term) (n : name) (pli : logIndex) (plt : term) (es : list entry) (ci : logIndex), handleAppendEntries (pDst p) (snd (nwState net (pDst p))) t n pli plt es ci = (d, m) ->...-> Prop Arguments refined_raft_net_invariant_append_entries' {orig_base_params one_node_params raft_params} _%function_scope\ndoGenericServer_log : forall (h : name) (st : raft_data) (os : list raft_output) (st' : raft_data) (ps : list (name * msg)), doGenericServer h st = (os, st', ps) -> log st' = log st\nhandleTimeout_TTLM : forall (h : name) (st : raft_data) (out : list raft_output) (st' : raft_data) (l : list (name * msg)), handleTimeout h st = (out, st', l) -> type_term_log_monotonic st st'\nhandleRequestVote_matchIndex_preserved : forall (n : name) (st : RaftState.raft_data term name entry logIndex serverType data clientId output) (t : nat) (c : fin N) (li lt : nat) (st' : raft_data) (ms : msg), handleRequestVote n st t c li lt = (st', ms) -> matchIndex_preserved st st'\nhandleRequestVote_stateMachine : forall (n : name) (st : RaftState.raft_data term name entry logIndex serverType data clientId output) (t : nat) (c : fin N) (li lt : nat) (st' : raft_data) (ms : msg), handleRequestVote n st t c li lt = (st', ms) -> stateMachine st' = stateMachine st\nhandleRequestVote_same_lastApplied : forall (n : name) (st : RaftState.raft_data term name entry logIndex serverType data clientId output) (t : nat) (c : fin N) (li lt : nat) (st' : raft_data) (ms : msg), handleRequestVote n st t c li lt = (st', ms) -> lastApplied st' = lastApplied st\nhandleRequestVote_same_commitIndex : forall (n : name) (st : RaftState.raft_data term name entry logIndex serverType data clientId output) (t : nat) (c : fin N) (li lt : nat) (st' : raft_data) (ms : msg), handleRequestVote n st t c li lt = (st', ms) -> commitIndex st' = commitIndex st\nhandleRequestVote_clientCache : forall (n : name) (st : RaftState.raft_data term name entry logIndex serverType data clientId output) (t : nat) (c : fin N) (li lt : nat) (st' : raft_data) (ms : msg), handleRequestVote n st t c li lt = (st', ms) -> clientCache st' = clientCache st\nhandleRequestVote_same_log : forall (n : name) (st : RaftState.raft_data term name entry logIndex serverType data clientId output) (t : nat) (c : fin N) (li lt : nat) (st' : raft_data) (ms : msg), handleRequestVote n st t c li lt = (st', ms) -> log st' = log st\nhandleClientRequest_TTLM : forall (h : name) (st : raft_data) (client : clientId) (id : nat) (c : input) (out : list raft_output) (st' : raft_data) (l : list (name * msg)), handleClientRequest h st client id c = (out, st', l) -> type_term_log_monotonic st st'\nhandleRequestVote_log : forall (h : name) (st : RaftState.raft_data term name entry logIndex serverType data clientId output) (t : nat) (candidate : fin N) (lli llt : nat) (st' : raft_data) (m : msg), handleRequestVote h st t candidate lli llt = (st', m) -> log st' = log st\nhandleRequestVote_votesReceived : forall (h : name) (st : RaftState.raft_data term name entry logIndex serverType data clientId output) (t : nat) (c : fin N) (li lt : nat) (st' : raft_data) (m : msg), handleRequestVote h st t c li lt = (st', m) -> votesReceived st' = votesReceived st\nhandleRequestVote_currentTerm : forall (st : RaftState.raft_data term name entry logIndex serverType data clientId output) (h : name) (h' : fin N) (t lli llt : nat) (st' : raft_data) (m : msg), handleRequestVote h st t h' lli llt = (st', m) -> currentTerm st <= currentTerm st'\nhandleRequestVote_no_append_entries : forall (st : RaftState.raft_data term name entry logIndex serverType data clientId output) (h : name) (h' : fin N) (t lli llt : nat) (st' : raft_data) (m : msg), handleRequestVote h st t h' lli llt = (st', m) -> ~ is_append_entries m\nhandleRequestVote_currentTerm_leaderId : forall (h : name) (st : RaftState.raft_data term name entry logIndex serverType data clientId output) (t : nat) (c : fin N) (li lt0 : nat) (st' : raft_data) (m : msg), handleRequestVote h st t c li lt0 = (st', m) -> currentTerm st < currentTerm st' \\/ currentTerm st = currentTerm st' /\\ leaderId st' = leaderId st\nhandleRequestVote_type : forall (st : RaftState.raft_data term name entry logIndex serverType data clientId output) (h : name) (h' : fin N) (t lli llt : nat) (st' : raft_data) (m : msg), handleRequestVote h st t h' lli llt = (st', m) -> type st' = type st /\\ currentTerm st' = currentTerm st \\/ type st' = Follower\nhandleRequestVote_log_term_type : forall (h : name) (st : RaftState.raft_data term name entry logIndex serverType data clientId output) (t : nat) (c : fin N) (li lt : nat) (st' : raft_data) (m : msg), handleRequestVote h st t c li lt = (st', m) -> log st' = log st /\\ currentTerm st' = currentTerm st /\\ type st' = type st \\/ type st' = Follower\nhandleRequestVote_type_term : forall (st : RaftState.raft_data term name entry logIndex serverType data clientId output) (h : name) (h' : fin N) (t lli llt : nat) (st' : raft_data) (m : msg), handleRequestVote h st t h' lli llt = (st', m) -> type st' = type st /\\ currentTerm st' = currentTerm st \\/ type st' = Follower /\\ currentTerm st' >= currentTerm st\nupdate_elections_data_appendEntries = fun (orig_base_params : BaseParams) (raft_params : RaftParams orig_base_params) (me : name) (st : electionsData * raft_data) (t : term) (leaderId : name) (prevLogIndex : logIndex) (prevLogTerm : term) (entries : list entry) (leaderCommit : logIndex) => let (_, m) := handleAppendEntries me (snd st) t leaderId prevLogIndex prevLogTerm entries leaderCommit in match m with | AppendEntriesReply t0 entries0 true => {| votes := votes (fst st); votesWithLog := votesWithLog (fst st); cronies := cronies (fst st); leaderLogs := leaderLogs (fst st); allEntries := map (fun e : entry => (t0, e)) entries0 ++ allEntries (fst st) |} | AppendEntriesReply t0 entries0 false => fst st | _ => fst st...\napplyEntries_spec : forall (es : list entry) (h : name) (st : raft_data) (os : list raft_output) (st' : raft_data), applyEntries h st es = (os, st') -> exists (d : data) (cc : list (clientId * (nat * output))), st' = RaftState.set_raft_data_clientCache term name entry logIndex serverType data clientId output (RaftState.set_raft_data_stateMachine term name entry logIndex serverType data clientId output st d) cc\nhandleRequestVote_reply_true' : forall (h : name) (h' : fin N) (st : RaftState.raft_data term name entry logIndex serverType data clientId output) (t lli llt : nat) (st' : raft_data) (t' : term), handleRequestVote h st t h' lli llt = (st', RequestVoteReply t' true) -> t' = t /\\ currentTerm st' = t\nhandleRequestVote_cases : forall (h : name) (h' : fin N) (t lli llt : nat) (st : RaftState.raft_data term name entry logIndex serverType data clientId output) (st' : raft_data) (m : msg), handleRequestVote h st t h' lli llt = (st', m) -> st' = st \\/ st' = advanceCurrentTerm st t \\/ st' = RaftState.set_raft_data_votedFor term name entry logIndex serverType data clientId output (advanceCurrentTerm st t) (Some h') /\\ (votedFor st = None /\\ currentTerm st = t \\/ currentTerm st < t)"}, {"role": "assistant", "content": "```intros.\nintros h st t n pli plt es ci st' ps H.\nunfold type_term_log_monotonic.\nintros.\nsplit.\n- destruct H; auto.\n- left.\napply H0.```"}], "original": "intros. intros h st t n pli plt es ci st' ps H. unfold type_term_log_monotonic. intros. split. - destruct H; auto. - left. apply H0.", "succ": false}]