[{"history": {"proof": "intros h st src t v st' crony HhandleRequestVoteReply HinVotesReceived. unfold handleRequestVoteReply in HhandleRequestVoteReply. destruct (currentTerm st <? t) eqn:HtermLess. - inversion HhandleRequestVoteReply. shelve. - destruct (t <? currentTerm st) eqn:HtLess. + inversion HhandleRequestVoteReply. shelve. + inversion HhandleRequestVoteReply; subst. left. split; auto. * shelve. * shelve.", "repairs": ["", "", "", "", "", "unfinished_bullet", "", "", "", "", "unfinished_bullet", "", "", "", "", "", "", "", ""], "exceptions": [{"ctx": ["intros h st src t v st' crony HhandleRequestVoteReply HinVotesReceived.", "unfold handleRequestVoteReply in HhandleRequestVoteReply.", "destruct (currentTerm st <? t) eqn:HtermLess.", "-", "inversion HhandleRequestVoteReply."], "tactic": "-", "exn": "Wrong bullet -: Current bullet - is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["intros h st src t v st' crony HhandleRequestVoteReply HinVotesReceived.", "unfold handleRequestVoteReply in HhandleRequestVoteReply.", "destruct (currentTerm st <? t) eqn:HtermLess.", "-", "inversion HhandleRequestVoteReply.", "shelve.", "-", "destruct (t <? currentTerm st) eqn:HtLess.", "+", "inversion HhandleRequestVoteReply."], "tactic": "+", "exn": "Wrong bullet +: Current bullet + is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["intros h st src t v st' crony HhandleRequestVoteReply HinVotesReceived.", "unfold handleRequestVoteReply in HhandleRequestVoteReply.", "destruct (currentTerm st <? t) eqn:HtermLess.", "-", "inversion HhandleRequestVoteReply.", "shelve.", "-", "destruct (t <? currentTerm st) eqn:HtLess.", "+", "inversion HhandleRequestVoteReply.", "shelve.", "+", "inversion HhandleRequestVoteReply; subst.", "left.", "split; auto."], "tactic": "right.", "exn": "Not an inductive goal with 2 constructors.", "type": "not_inductive_goal", "handled": false}, {"ctx": ["intros h st src t v st' crony HhandleRequestVoteReply HinVotesReceived.", "unfold handleRequestVoteReply in HhandleRequestVoteReply.", "destruct (currentTerm st <? t) eqn:HtermLess.", "-", "inversion HhandleRequestVoteReply.", "shelve.", "-", "destruct (t <? currentTerm st) eqn:HtLess.", "+", "inversion HhandleRequestVoteReply.", "shelve.", "+", "inversion HhandleRequestVoteReply; subst.", "left.", "split; auto."], "tactic": "apply votes_received_cronies; auto.", "exn": "In environment orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params rri : raft_refinement_interface vci : votes_correct_interface cvfsi : candidates_vote_for_selves_interface h : name st : RaftState.raft_data term name entry logIndex serverType data clientId output src : name t : nat v : bool crony : name HtermLess : (currentTerm st <? t) = false HtLess : (t <? currentTerm st) = false H : match type st with | Candidate => RaftState.set_raft_data_electoralVictories term name entry logIndex serverType data clientId output (RaftState.set_raft_data_nextIndex term name entry logIndex serverType data clientId output (RaftState.set_raft_data_matchIndex term name entry logIndex serverType data clientId output (RaftState.set_raft_data_type term name entry logIndex serverType data clientId output (RaftState.set_raft_data_votesReceived term name entry logIndex serverType data clientId output st ((if v then [src] else []) ++ votesReceived st)) (if v && wonElection (dedup name_eq_dec (src :: votesReceived st)) then Leader else type st)) (assoc_set name_eq_dec [] h (maxIndex (log st)))) []) ((if v && wonElection (dedup name_eq_dec (src :: votesReceived st)) then [(currentTerm st, src :: votesReceived st, log st)] else []) ++ electoralVictories st) | _ => st end = match type st with | Candidate => RaftState.set_raft_data_electoralVictories term name entry logIndex serverType data clientId output (RaftState.set_raft_data_nextIndex term name entry logIndex serverType data clientId output (RaftState.set_raft_data_matchIndex term name entry logIndex serverType data clientId output (RaftState.set_raft_data_type term name entry logIndex serverType data clientId output (RaftState.set_raft_data_votesReceived term name entry logIndex serverType data clientId output st ((if v then [src] else []) ++ votesReceived st)) (if v && wonElection (dedup name_eq_dec (src :: votesReceived st)) then Leader else type st)) (assoc_set name_eq_dec [] h (maxIndex (log st)))) []) ((if v && wonElection (dedup name_eq_dec (src :: votesReceived st)) then [(currentTerm st, src :: votesReceived st, log st)] else []) ++ electoralVictories st) | _ => st end HinVotesReceived : In crony (votesReceived match type st with | Candidate => RaftState.set_raft_data_electoralVictories term name entry logIndex serverType data clientId output (RaftState.set_raft_data_nextIndex term name entry logIndex serverType data clientId output (RaftState.set_raft_data_matchIndex term name entry logIndex serverType data clientId output (RaftState.set_raft_data_type term name entry logIndex serverType data clientId output (RaftState.set_raft_data_votesReceived term name entry logIndex serverType data clientId output st ((if v then [src] else []) ++ votesReceived st)) (if v && wonElection (dedup name_eq_dec (src :: votesReceived st)) then Leader else type st)) (assoc_set name_eq_dec [] h (maxIndex (log st)))) []) ((if v && wonElection (dedup name_eq_dec (src :: votesReceived st)) then [(currentTerm st, src :: votesReceived st, log st)] else []) ++ electoralVictories st) | _ => st end) Unable to unify \"Prop\" with \"crony = src\".", "type": "cannot_unify", "handled": false}]}, "chat": [{"role": "user", "content": "I will give you a Coq proof state, including both hypotheses and a specific goal and your need to prove it. Your response should be a singular code block of Coq proof, without any additional explanation or commentary. Follow to these guidelines:\nIntroduce variables using unique names to avoid any conflicts.\nKeep each command distinct and separated, avoid concatenations like ';' or '[cmd|cmd]'.\nOrganize your proof with bullets like '-', '+', and '*' instead of braces ({, }). Shift to their double symbols like '--' and '++', when necessary.\nEffectively use given premises, follow the syntax and structure demonstrated in the examples provided.\n\nExample 1:\n\nHypotheses:\nn, m: nat\nIHn: m + n = n + m\n\nGoal:\nm + S n = S n + m\n\nProof:\n```simpl. rewrite <- IHn. auto.```\n\nExample 2:\nHypotheses:\n\nGoal:\nforall n m : nat, m + n = n + m\n\n```intros n m. induction n.\n- simpl. auto.\n- simpl. rewrite <- IHn. auto.```\n\nSovle This Proof State:\n\nHypotheses:\norig_base_params: BaseParams\none_node_params: OneNodeParams orig_base_params\nraft_params: RaftParams orig_base_params\nrri: raft_refinement_interface\nvci: votes_correct_interface\ncvfsi: candidates_vote_for_selves_interface\n\nGoal:\nforall (h : name) (st : RaftState.raft_data term name entry logIndex serverType data clientId output) (src : name) (t : nat) (v : bool) (st' : raft_data) (crony : name), handleRequestVoteReply h st src t v = st' -> In crony (votesReceived st') -> crony = src /\\ v = true /\\ currentTerm st' = t \\/ In crony (votesReceived st)\n\nPremises:\nterm = nat : Set\noutput = fun BaseParams0 : BaseParams => let (_, _, output) := BaseParams0 in output : BaseParams -> Type Arguments output {BaseParams}\nRecord OneNodeParams (P : BaseParams) : Type := Build_OneNodeParams { init : data; handler : input -> data -> output * data } Arguments Build_OneNodeParams _ _ _%function_scope\nNotation currentTerm := (RaftState.currentTerm term name entry logIndex serverType data clientId output)\ndata = fun BaseParams0 : BaseParams => let (data, _, _) := BaseParams0 in data : BaseParams -> Type Arguments data {BaseParams}\nhandleRequestVoteReply = fun (orig_base_params : BaseParams) (raft_params : RaftParams orig_base_params) (me : name) (state : RaftState.raft_data term name entry logIndex serverType data clientId output) (src : name) (t : nat) (voteGranted : bool) => if currentTerm state <? t then RaftState.set_raft_data_type term name entry logIndex serverType data clientId output (advanceCurrentTerm state t) Follower else if t <? currentTerm state then state else let won := voteGranted && wonElection (dedup name_eq_dec (src :: votesReceived state)) in match type state with | Candidate => RaftState.set_raft_data_electoralVictories term name entry logIndex serverType data\nclientId = fun (orig_base_params : BaseParams) (RaftParams0 : RaftParams orig_base_params) => let (_, _, _, clientId, _) := RaftParams0 in clientId : forall orig_base_params : BaseParams, RaftParams orig_base_params -> Type Arguments clientId {orig_base_params RaftParams}\nRecord BaseParams : Type := Build_BaseParams { data : Type; input : Type; output : Type } Arguments Build_BaseParams (_ _ _)%type_scope\nRecord RaftParams (orig_base_params : BaseParams) : Type := Build_RaftParams { N : nat; input_eq_dec : forall x y : input, {x = y} + {x <> y}; output_eq_dec : forall x y : output, {x = y} + {x <> y}; clientId : Type; clientId_eq_dec : forall x y : clientId, {x = y} + {x <> y} } Arguments Build_RaftParams _ _%nat_scope (_ _)%function_scope [clientId]%type_scope _%function_scope\nRecord candidates_vote_for_selves_interface (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params) : Prop := Build_candidates_vote_for_selves_interface { candidates_vote_for_selves_invariant : forall net : network, raft_intermediate_reachable net -> candidates_vote_for_selves net } Arguments candidates_vote_for_selves_interface {orig_base_params one_node_params raft_params} Arguments Build_candidates_vote_for_selves_interface {orig_base_params one_node_params raft_params} _%function_scope\nRecord votes_correct_interface (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params) : Prop := Build_votes_correct_interface { votes_correct_invariant : forall net : network, refined_raft_intermediate_reachable net -> votes_correct net } Arguments votes_correct_interface {orig_base_params one_node_params raft_params} Arguments Build_votes_correct_interface {orig_base_params one_node_params raft_params} _%function_scope\nRecord raft_refinement_interface (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params) : Prop := Build_raft_refinement_interface { refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do_leader P -> refined_raft_net_invariant_do_generic_server P -> refined_raft\nRecord entry (orig_base_params : BaseParams) (raft_params : RaftParams orig_base_params) : Type := mkEntry { eAt : name; eClient : clientId; eId : nat; eIndex : logIndex; eTerm : term; eInput : input } Arguments entry {orig_base_params raft_params} Arguments mkEntry {orig_base_params raft_params} _ _ _%nat_scope\nInductive bool : Set := true : bool | false : bool\nname = fun (orig_base_params : BaseParams) (raft_params : RaftParams orig_base_params) => fin N : forall orig_base_params : BaseParams, RaftParams orig_base_params -> Type Arguments name {orig_base_params raft_params}\nInductive nat : Set := O : nat | S : nat -> nat Arguments S _%nat_scope\nIn : forall A : Type, A -> list A -> Prop\nlogIndex = nat : Set\nraft_data = fun (orig_base_params : BaseParams) (raft_params : RaftParams orig_base_params) => RaftState.raft_data term name entry logIndex serverType data clientId output : forall orig_base_params : BaseParams, RaftParams orig_base_params -> Type Arguments raft_data {orig_base_params raft_params}\nNotation votesReceived := (RaftState.votesReceived term name entry logIndex serverType data clientId output)\nInductive serverType : Set := Follower : serverType | Candidate : serverType | Leader : serverType\nhandleRequestVoteReply_candidate : forall (h : name) (st : RaftState.raft_data term name entry logIndex serverType data clientId output) (src : name) (t : nat) (v : bool) (st' : raft_data), handleRequestVoteReply h st src t v = st' -> type st' = Candidate -> type st = Candidate /\\ currentTerm st' = currentTerm st\nhandleRequestVote_currentTerm_same_or_follower : forall (h : name) (st : RaftState.raft_data term name entry logIndex serverType data clientId output) (t : nat) (h' : fin N) (lli llt : nat) (st' : raft_data) (m : msg), handleRequestVote h st t h' lli llt = (st', m) -> currentTerm st' = currentTerm st /\\ type st' = type st \\/ type st' = Follower\nhandleRequestVote_true_votedFor : forall (h : name) (st : RaftState.raft_data term name entry logIndex serverType data clientId output) (t : nat) (src : fin N) (lli llt : nat) (d : raft_data) (t' : term), handleRequestVote h st t src lli llt = (d, RequestVoteReply t' true) -> currentTerm d = t' /\\ votedFor d = Some src\nupdate_elections_data_requestVote_votedFor : forall (h : name) (h' : fin N) (t lli llt : nat) (st : electionsData * RaftState.raft_data term name entry logIndex serverType data clientId output) (st' : raft_data) (m : msg), handleRequestVote h (snd st) t h' lli llt = (st', m) -> votedFor st' = Some h' -> In (currentTerm st', h') (votes (update_elections_data_requestVote h h' t h' lli llt st)) \\/ votedFor st' = votedFor (snd st) /\\ currentTerm st' = currentTerm (snd st)\nvotes_received_cronies = fun (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params) (net : network) => forall (h : Net.name) (crony : name), In crony (votesReceived (snd (nwState net h))) -> type (snd (nwState net h)) = Leader \\/ type (snd (nwState net h)) = Candidate -> In crony (cronies (fst (nwState net h)) (currentTerm (snd (nwState net h)))) : forall (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params), network -> Prop Arguments votes_received_cronies {orig_base_params one_node_params raft_params}\nhandleAppendEntriesReply_rvr : forall (h : name) (s : RaftState.raft_data term name entry logIndex serverType data clientId output) (src : name) (ps ps' : list packet) (p : packet) (d : raft_data) (l : list (name * msg)) (tae : nat) (es : list entry) (res : bool) (t : term) (v : bool), handleAppendEntriesReply h s src tae es res = (d, l) -> (forall p' : packet, In p' ps -> In p' ps' \\/ In p' (send_packets h l)) -> pBody p = RequestVoteReply t v -> In p ps -> In p ps'\nhandleAppendEntriesReply_same_commitIndex : forall (n : name) (st : RaftState.raft_data term name entry logIndex serverType data clientId output) (src : name) (t : nat) (es : list entry) (b : bool) (st' : raft_data) (l : list (name * msg)), handleAppendEntriesReply n st src t es b = (st', l) -> commitIndex st' = commitIndex st\nhandleAppendEntriesReply_same_log : forall (n : name) (st : RaftState.raft_data term name entry logIndex serverType data clientId output) (src : name) (t : nat) (es : list entry) (b : bool) (st' : raft_data) (l : list (name * msg)), handleAppendEntriesReply n st src t es b = (st', l) -> log st' = log st\nhandleAppendEntriesReply_same_lastApplied : forall (n : name) (st : RaftState.raft_data term name entry logIndex serverType data clientId output) (src : name) (t : nat) (es : list entry) (b : bool) (st' : raft_data) (l : list (name * msg)), handleAppendEntriesReply n st src t es b = (st', l) -> lastApplied st' = lastApplied st\nhandleRequestVoteReply_same_log : forall (n : name) (st : RaftState.raft_data term name entry logIndex serverType data clientId output) (src : name) (t : nat) (v : bool), log (handleRequestVoteReply n st src t v) = log st\nhandleRequestVoteReply_same_commitIndex : forall (n : name) (st : RaftState.raft_data term name entry logIndex serverType data clientId output) (src : name) (t : nat) (v : bool), commitIndex (handleRequestVoteReply n st src t v) = commitIndex st\nhandleRequestVoteReply_same_lastApplied : forall (n : name) (st : RaftState.raft_data term name entry logIndex serverType data clientId output) (src : name) (t : nat) (v : bool), lastApplied (handleRequestVoteReply n st src t v) = lastApplied st\nhandleRequestVote_votesReceived : forall (h : name) (st : RaftState.raft_data term name entry logIndex serverType data clientId output) (t : nat) (h' : fin N) (lli llt : nat) (st' : raft_data) (m : msg), handleRequestVote h st t h' lli llt = (st', m) -> votesReceived st' = votesReceived st\nhandleRequestVote_same_commitIndex : forall (n : name) (st : RaftState.raft_data term name entry logIndex serverType data clientId output) (t : nat) (c : fin N) (li lt : nat) (st' : raft_data) (ms : msg), handleRequestVote n st t c li lt = (st', ms) -> commitIndex st' = commitIndex st\nhandleRequestVote_same_log : forall (n : name) (st : RaftState.raft_data term name entry logIndex serverType data clientId output) (t : nat) (c : fin N) (li lt : nat) (st' : raft_data) (ms : msg), handleRequestVote n st t c li lt = (st', ms) -> log st' = log st\nhandleRequestVote_same_lastApplied : forall (n : name) (st : RaftState.raft_data term name entry logIndex serverType data clientId output) (t : nat) (c : fin N) (li lt : nat) (st' : raft_data) (ms : msg), handleRequestVote n st t c li lt = (st', ms) -> lastApplied st' = lastApplied st\nrefined_raft_net_invariant_request_vote_reply = fun (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params) (P : network -> Prop) => forall (xs : list packet) (p : packet) (ys : list packet) (net : network) (st' : name -> data) (ps' : list packet) (gd : electionsData) (d : raft_data) (t : nat) (v : bool), handleRequestVoteReply (pDst p) (snd (nwState net (pDst p))) (pSrc p) t v = d -> gd = update_elections_data_requestVoteReply (pDst p) (pSrc p) t v (nwState net (pDst p)) -> pBody p = RequestVoteReply t v -> P net ->...-> Prop Arguments refined_raft_net_invariant_request_vote_reply {orig_base_params one_node_params raft_params} _%function_scope\nrefined_raft_net_invariant_request_vote_reply' = fun (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params) (P : network -> Prop) => forall (xs : list packet) (p : packet) (ys : list packet) (net : network) (st' : Net.name -> data) (ps' : list packet) (gd : electionsData) (d : raft_data) (t : nat) (v : bool), handleRequestVoteReply (pDst p) (snd (nwState net (pDst p))) (pSrc p) t v = d -> gd = update_elections_data_requestVoteReply (pDst p) (pSrc p) t v (nwState net (pDst p)) -> pBody p = RequestVoteReply t v -> P net ->...-> Prop Arguments refined_raft_net_invariant_request_vote_reply' {orig_base_params one_node_params raft_params} _%function_scope\nraft_net_invariant_request_vote_reply = fun (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params) (P : network -> Prop) => forall (xs : list packet) (p : packet) (ys : list packet) (net : network) (st' : name -> data) (ps' : list packet) (d : raft_data) (t : nat) (v : bool), handleRequestVoteReply (pDst p) (nwState net (pDst p)) (pSrc p) t v = d -> pBody p = RequestVoteReply t v -> P net -> raft_intermediate_reachable net -> nwPackets net = xs ++ p :: ys -> (forall h : name, st' h = update name_eq_dec (nwState net) (pDst p) d h) ->...-> Prop Arguments raft_net_invariant_request_vote_reply {orig_base_params one_node_params raft_params} _%function_scope\ncronies_votes = fun (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params) (net : network) => forall (t : term) (candidate : Net.name) (crony : name), In crony (cronies (fst (nwState net candidate)) t) -> In (t, candidate) (votes (fst (nwState net crony))) : forall (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params), network -> Prop Arguments cronies_votes {orig_base_params one_node_params raft_params}\napplied_entries_update : forall (sigma : name -> RaftState.raft_data term name entry logIndex serverType data clientId output) (h : name) (st : RaftState.raft_data term name entry logIndex serverType data clientId output), lastApplied st >= lastApplied (sigma h) -> applied_entries (update name_eq_dec sigma h st) = applied_entries sigma /\\ (exists h' : name, argmax (fun h0 : name => lastApplied (sigma h0)) (all_fin N) = Some h' /\\ lastApplied (sigma h') >= lastApplied st) \\/ argmax (fun h' : name => lastApplied (update name_eq_dec sigma h st h')) (all_fin N) = Some h /\\ applied_entries (update name_eq_dec sigma h st) = rev (removeAfterIndex (log st) (lastApplied st))\nupdate_elections_data_net = fun (orig_base_params : BaseParams) (raft_params : RaftParams orig_base_params) (me src : name) (m : msg) (st : electionsData * RaftState.raft_data term name entry logIndex serverType data clientId output) => match m with | RequestVote t _ lastLogIndex lastLogTerm => update_elections_data_requestVote me src t src lastLogIndex lastLogTerm st | RequestVoteReply t voteGranted => update_elections_data_requestVoteReply me src t voteGranted st | AppendEntries t lid prevLogIndex prevLogTerm entries leaderCommit => update_elections_data_appendEntries me st t lid prevLogIndex prevLogTerm entries leaderCommit | AppendEntriesReply _ _ _ => fst st end : forall (orig_base_params : BaseParams) (raft_params : RaftParams orig_base_params), name -> name -> msg ->...-> electionsData Arguments update_elections_data_net {orig_base_params raft_params}\nupdate_elections_data_requestVoteReply = fun (orig_base_params : BaseParams) (raft_params : RaftParams orig_base_params) (me src : name) (t : nat) (voteGranted : bool) (st : electionsData * RaftState.raft_data term name entry logIndex serverType data clientId output) => let st' := handleRequestVoteReply me (snd st) src t voteGranted in match type st' with | Follower => fst st | Candidate => {| votes := votes (fst st); votesWithLog := votesWithLog (fst st); cronies := fun tm : term => if Nat.eq_dec tm (currentTerm st') then votesReceived st' else cronies (fst st) tm; leaderLogs := leaderLogs (fst st); allEntries := allEntries (fst st) |} | Leader => {| votes := votes (fst st); votesWithLog := votesWithLog (fst st); cronies := fun tm : term => if Nat.eq_dec tm (currentTerm st') then...\napplied_entries_log_lastApplied_update_same : forall (sigma : name -> RaftState.raft_data term name entry logIndex serverType data clientId output) (h : name) (st : RaftState.raft_data term name entry logIndex serverType data clientId output), log st = log (sigma h) -> lastApplied st = lastApplied (sigma h) -> applied_entries (update name_eq_dec sigma h st) = applied_entries sigma\nrefined_raft_net_invariant_do_generic_server = fun (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params) (P : network -> Prop) => forall (net : network) (st' : name -> data) (ps' : list packet) (gd : ghost_data) (d : raft_data) (os : list raft_output) (d' : raft_data) (ms : list (name * msg)) (h : name), doGenericServer h d = (os, d', ms) -> P net -> refined_raft_intermediate_reachable net -> nwState net h = (gd, d) -> (forall h' : name, st' h' = update name_eq_dec (nwState net) h (gd, d') h') ->...-> Prop Arguments refined_raft_net_invariant_do_generic_server {orig_base_params one_node_params raft_params} _%function_scope\nrefined_raft_net_invariant_do_generic_server' = fun (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params) (P : network -> Prop) => forall (net : network) (st' : Net.name -> data) (ps' : list packet) (gd : ghost_data) (d : raft_data) (os : list raft_output) (d' : raft_data) (ms : list (name * msg)) (h : name), doGenericServer h d = (os, d', ms) -> P net -> refined_raft_intermediate_reachable net -> refined_raft_intermediate_reachable {| nwPackets := ps'; nwState := st' |} -> nwState net h = (gd, d) ->...-> Prop Arguments refined_raft_net_invariant_do_generic_server' {orig_base_params one_node_params raft_params} _%function_scope\nrefined_raft_net_invariant_do_leader = fun (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params) (P : network -> Prop) => forall (net : network) (st' : name -> data) (ps' : list packet) (gd : ghost_data) (d : raft_data) (h : name) (os : list raft_output) (d' : raft_data) (ms : list (name * msg)), doLeader d h = (os, d', ms) -> P net -> refined_raft_intermediate_reachable net -> nwState net h = (gd, d) -> (forall h' : name, st' h' = update name_eq_dec (nwState net) h (gd, d') h') ->...-> Prop Arguments refined_raft_net_invariant_do_leader {orig_base_params one_node_params raft_params} _%function_scope\nhandleAppendEntriesReply = fun (orig_base_params : BaseParams) (raft_params : RaftParams orig_base_params) (_ : name) (state : RaftState.raft_data term name entry logIndex serverType data clientId output) (src : name) (term0 : nat) (entries : list entry) (result : bool) => if currentTerm state =? term0 then if result then let index := maxIndex entries in (RaftState.set_raft_data_nextIndex term name entry logIndex serverType data clientId output (RaftState.set_raft_data_matchIndex term name entry logIndex serverType data clientId output state (assoc_set name_eq_dec (matchIndex state) src (Init.Nat.max (assoc_default name_eq_dec (matchIndex state) src 0) index))) (assoc_set name_eq_dec (nextIndex state) src (Init.Nat.max (getNextIndex state src) (S index))), []) else (RaftState.set_raft_data_nextIndex term name entry logIndex serverType data...\nrefined_raft_net_invariant_do_leader' = fun (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params) (P : network -> Prop) => forall (net : network) (st' : Net.name -> data) (ps' : list packet) (gd : ghost_data) (d : raft_data) (h : name) (os : list raft_output) (d' : raft_data) (ms : list (name * msg)), doLeader d h = (os, d', ms) -> P net -> refined_raft_intermediate_reachable net -> refined_raft_intermediate_reachable {| nwPackets := ps'; nwState := st' |} -> nwState net h = (gd, d) ->...-> Prop Arguments refined_raft_net_invariant_do_leader' {orig_base_params one_node_params raft_params} _%function_scope\nwonElection_dedup_spec : forall l : list name, wonElection (dedup name_eq_dec l) = true -> exists quorum : list name, NoDup quorum /\\ length quorum > div2 (length nodes) /\\ (forall h : name, In h quorum -> In h l)\nrefined_raft_net_invariant_timeout = fun (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params) (P : network -> Prop) => forall (net : network) (h : name) (st' : name -> data) (ps' : list packet) (gd : electionsData) (out : list raft_output) (d : raft_data) (l : list (name * msg)), handleTimeout h (snd (nwState net h)) = (out, d, l) -> gd = update_elections_data_timeout h (nwState net h) -> P net -> refined_raft_intermediate_reachable net -> (forall h' : name, st' h' = update name_eq_dec (nwState net) h (gd, d) h') ->...-> Prop Arguments refined_raft_net_invariant_timeout {orig_base_params one_node_params raft_params} _%function_scope\ncurrentTerm_votedFor_votes_correct = fun (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params) (net : network) => forall (h : Net.name) (t : term) (n : name), currentTerm (snd (nwState net h)) = t -> votedFor (snd (nwState net h)) = Some n -> In (t, n) (votes (fst (nwState net h))) : forall (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params), network -> Prop Arguments currentTerm_votedFor_votes_correct {orig_base_params one_node_params raft_params}\nvotes_currentTerm_votedFor_correct = fun (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params) (net : network) => forall (h : Net.name) (t : term) (n : name), In (t, n) (votes (fst (nwState net h))) -> currentTerm (snd (nwState net h)) = t -> votedFor (snd (nwState net h)) = Some n : forall (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params), network -> Prop Arguments votes_currentTerm_votedFor_correct {orig_base_params one_node_params raft_params}\nrefined_raft_net_invariant_request_vote = fun (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params) (P : network -> Prop) => forall (xs : list packet) (p : packet) (ys : list packet) (net : network) (st' : name -> data) (ps' : list packet) (gd : electionsData) (d : raft_data) (m : msg) (t : nat) (cid : name) (lli llt : nat), handleRequestVote (pDst p) (snd (nwState net (pDst p))) t (pSrc p) lli llt = (d, m) ->...-> Prop Arguments refined_raft_net_invariant_request_vote {orig_base_params one_node_params raft_params} _%function_scope\nrefined_raft_net_invariant_request_vote' = fun (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params) (P : network -> Prop) => forall (xs : list packet) (p : packet) (ys : list packet) (net : network) (st' : Net.name -> data) (ps' : list packet) (gd : electionsData) (d : raft_data) (m : msg) (t : nat) (cid : name) (lli llt : nat), handleRequestVote (pDst p) (snd (nwState net (pDst p))) t (pSrc p) lli llt = (d, m) ->...-> Prop Arguments refined_raft_net_invariant_request_vote' {orig_base_params one_node_params raft_params} _%function_scope\nrefined_raft_net_invariant_timeout' = fun (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params) (P : network -> Prop) => forall (net : network) (h : name) (st' : Net.name -> data) (ps' : list packet) (gd : electionsData) (out : list raft_output) (d : raft_data) (l : list (name * msg)), handleTimeout h (snd (nwState net h)) = (out, d, l) -> gd = update_elections_data_timeout h (nwState net h) -> P net -> refined_raft_intermediate_reachable net -> refined_raft_intermediate_reachable {| nwPackets := ps'; nwState := st' |} ->...-> Prop Arguments refined_raft_net_invariant_timeout' {orig_base_params one_node_params raft_params} _%function_scope\nupdate_elections_data_requestVote_cronies : forall (h h' : name) (t : nat) (h'' : fin N) (lli llt : nat) (st : electionsData * RaftState.raft_data term name entry logIndex serverType data clientId output), cronies (update_elections_data_requestVote h h' t h'' lli llt st) = cronies (fst st)\nrefined_raft_net_invariant_client_request = fun (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params) (P : network -> Prop) => forall (h : name) (net : network) (st' : name -> data) (ps' : list packet) (gd : electionsData) (out : list raft_output) (d : raft_data) (l : list (name * msg)) (client : clientId) (id : nat) (c : input), handleClientRequest h (snd (nwState net h)) client id c = (out, d, l) -> gd = update_elections_data_client_request h (nwState net h) client id c -> P net -> refined_raft_intermediate_reachable net ->...-> Prop Arguments refined_raft_net_invariant_client_request {orig_base_params one_node_params raft_params} _%function_scope\nrefined_raft_net_invariant_append_entries_reply = fun (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params) (P : network -> Prop) => forall (xs : list packet) (p : packet) (ys : list packet) (net : network) (st' : name -> data) (ps' : list packet) (gd : ghost_data) (d : raft_data) (m : list (name * msg)) (t : nat) (es : list entry) (res : bool), handleAppendEntriesReply (pDst p) (snd (nwState net (pDst p))) (pSrc p) t es res = (d, m) -> gd = fst (nwState net (pDst p)) -> pBody p = AppendEntriesReply t es res -> P net ->...-> Prop Arguments refined_raft_net_invariant_append_entries_reply {orig_base_params one_node_params raft_params} _%function_scope\nrefined_raft_net_invariant_append_entries_reply' = fun (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params) (P : network -> Prop) => forall (xs : list packet) (p : packet) (ys : list packet) (net : network) (st' : Net.name -> data) (ps' : list packet) (gd : ghost_data) (d : raft_data) (m : list (name * msg)) (t : nat) (es : list entry) (res : bool), handleAppendEntriesReply (pDst p) (snd (nwState net (pDst p))) (pSrc p) t es res = (d, m) -> gd = fst (nwState net (pDst p)) -> pBody p = AppendEntriesReply t es res -> P net ->...-> Prop Arguments refined_raft_net_invariant_append_entries_reply' {orig_base_params one_node_params raft_params} _%function_scope"}, {"role": "assistant", "content": "```\nintros h st src t v st' crony HhandleRequestVoteReply HinVotesReceived.\nunfold handleRequestVoteReply in HhandleRequestVoteReply.\ndestruct (currentTerm st <? t) eqn:HtermLess.\n- inversion HhandleRequestVoteReply.\n- destruct (t <? currentTerm st) eqn:HtLess.\n  + inversion HhandleRequestVoteReply.\n  + destruct (voteGranted && wonElection (dedup name_eq_dec (src :: votesReceived st))) eqn:Hwon.\n    * inversion HhandleRequestVoteReply; subst.\n      left.\n      split; auto.\n      right.\n      apply votes_received_cronies; auto.\nQed.```"}], "original": "intros h st src t v st' crony HhandleRequestVoteReply HinVotesReceived. unfold handleRequestVoteReply in HhandleRequestVoteReply. destruct (currentTerm st <? t) eqn:HtermLess. - inversion HhandleRequestVoteReply. - destruct (t <? currentTerm st) eqn:HtLess. + inversion HhandleRequestVoteReply. + destruct (voteGranted && wonElection (dedup name_eq_dec (src :: votesReceived st))) eqn:Hwon. * inversion HhandleRequestVoteReply; subst. left. split; auto. right. apply votes_received_cronies; auto.", "succ": false}]