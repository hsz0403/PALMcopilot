[{"history": {"proof": "intros h h' t lli llt st st' m H1 H2. unfold handleRequestVote in H1. destruct (t <? currentTerm (snd st)) eqn:Heq1. - inversion H1. shelve. - destruct (advanceCurrentTerm (snd st) t) as [st'' m'] eqn:Heq2. inversion H1; subst; clear H1. right. split. ++ unfold votedFor. shelve. ++ unfold currentTerm. shelve.", "repairs": ["", "", "", "", "", "unfinished_bullet", "", "", "", "", "", "", "", "unfinished_bullet", "", "", "unfinished_bullet"], "exceptions": [{"ctx": ["intros h h' t lli llt st st' m H1 H2.", "unfold handleRequestVote in H1.", "destruct (t <? currentTerm (snd st)) eqn:Heq1.", "-", "inversion H1."], "tactic": "-", "exn": "Wrong bullet -: Current bullet - is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["intros h h' t lli llt st st' m H1 H2.", "unfold handleRequestVote in H1.", "destruct (t <? currentTerm (snd st)) eqn:Heq1.", "-", "inversion H1.", "shelve.", "-", "destruct (advanceCurrentTerm (snd st) t) as [st'' m'] eqn:Heq2."], "tactic": "destruct (votedFor st'') eqn:Heq4.", "exn": "In environment orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params rri : raft_refinement_interface vci : votes_correct_interface cvfsi : candidates_vote_for_selves_interface h : name h' : fin N t, lli, llt : nat st : electionsData * RaftState.raft_data term name entry logIndex serverType data clientId output st' : raft_data m : msg Heq1 : (t <? currentTerm (snd st)) = false st'' : term m', leaderId : option name log : list entry commitIndex, lastApplied : logIndex stateMachine : data nextIndex, matchIndex : list (name * logIndex) shouldSend : bool votesReceived : list name type : serverType clientCache : list (clientId * (nat * output)) electoralVictories : list (term * list name * list entry) Heq2 : advanceCurrentTerm (snd st) t = mkRaft_data st'' m' leaderId log commitIndex lastApplied stateMachine nextIndex matchIndex shouldSend votesReceived type clientCache electoralVictories H1 : (if (if Raft.leaderId (mkRaft_data st'' m' leaderId log commitIndex lastApplied stateMachine nextIndex matchIndex shouldSend votesReceived type clientCache electoralVictories) then false else true) && moreUpToDate llt lli (maxTerm (Raft.log (mkRaft_data st'' m' leaderId log commitIndex lastApplied stateMachine nextIndex matchIndex shouldSend votesReceived type clientCache electoralVictories))) (maxIndex (Raft.log (mkRaft_data st'' m' leaderId log commitIndex lastApplied stateMachine nextIndex matchIndex shouldSend votesReceived type clientCache electoralVictories))) then match votedFor (mkRaft_data st'' m' leaderId log commitIndex lastApplied stateMachine nextIndex matchIndex shouldSend votesReceived type clientCache electoralVictories) with | Some candidateId' => (mkRaft_data st'' m' leaderId log commitIndex lastApplied stateMachine nextIndex matchIndex shouldSend votesReceived type clientCache electoralVictories, RequestVoteReply (currentTerm (mkRaft_data st'' m' leaderId log commitIndex lastApplied stateMachine nextIndex matchIndex shouldSend votesReceived type clientCache electoralVictories)) (if fin_eq_dec N h' candidateId' then true else false)) | None => (RaftState.set_raft_data_votedFor term name entry logIndex serverType data clientId output (mkRaft_data st'' m' leaderId log commitIndex lastApplied stateMachine nextIndex matchIndex shouldSend votesReceived type clientCache electoralVictories) (Some h'), RequestVoteReply (currentTerm (mkRaft_data st'' m' leaderId log commitIndex lastApplied stateMachine nextIndex matchIndex shouldSend votesReceived type clientCache electoralVictories)) true) end else (mkRaft_data st'' m' leaderId log commitIndex lastApplied stateMachine nextIndex matchIndex shouldSend votesReceived type clientCache electoralVictories, RequestVoteReply (currentTerm (mkRaft_data st'' m' leaderId log commitIndex lastApplied stateMachine nextIndex matchIndex shouldSend votesReceived type clientCache electoralVictories)) false)) = (st', m) H2 : votedFor st' = Some h' The term \"st''\" has type \"term\" while it is expected to have type \"RaftState.raft_data term name entry logIndex serverType data clientId output\".", "type": "wrong_type", "handled": false}, {"ctx": ["intros h h' t lli llt st st' m H1 H2.", "unfold handleRequestVote in H1.", "destruct (t <? currentTerm (snd st)) eqn:Heq1.", "-", "inversion H1.", "shelve.", "-", "destruct (advanceCurrentTerm (snd st) t) as [st'' m'] eqn:Heq2.", "inversion H1; subst; clear H1.", "right.", "split.", "++", "unfold votedFor."], "tactic": "reflexivity.", "exn": "In environment orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params rri : raft_refinement_interface vci : votes_correct_interface cvfsi : candidates_vote_for_selves_interface h : name h' : fin N t, lli, llt : nat st : electionsData * RaftState.raft_data term name entry logIndex serverType data clientId output st' : raft_data m : msg Heq1 : (t <? currentTerm (snd st)) = false st'' : term m', leaderId : option name log : list entry commitIndex, lastApplied : logIndex stateMachine : data nextIndex, matchIndex : list (name * logIndex) shouldSend : bool votesReceived : list name type : serverType clientCache : list (clientId * (nat * output)) electoralVictories : list (term * list name * list entry) Heq2 : advanceCurrentTerm (snd st) t = mkRaft_data st'' m' leaderId log commitIndex lastApplied stateMachine nextIndex matchIndex shouldSend votesReceived type clientCache electoralVictories H2 : votedFor st' = Some h' H0 : (if (if leaderId then false else true) && moreUpToDate llt lli (maxTerm log) (maxIndex log) then match m' with | Some candidateId' => (mkRaft_data st'' m' leaderId log commitIndex lastApplied stateMachine nextIndex matchIndex shouldSend votesReceived type clientCache electoralVictories, RequestVoteReply st'' (if fin_eq_dec N h' candidateId' then true else false)) | None => (mkRaft_data st'' (Some h') leaderId log commitIndex lastApplied stateMachine nextIndex matchIndex shouldSend votesReceived type clientCache electoralVictories, RequestVoteReply st'' true) end else (mkRaft_data st'' m' leaderId log commitIndex lastApplied stateMachine nextIndex matchIndex shouldSend votesReceived type clientCache electoralVictories, RequestVoteReply st'' false)) = (st', m) Unable to unify \"let (_, votedFor, _, _, _, _, _, _, _, _, _, _, _, _) := snd st in votedFor\" with \"let (_, votedFor, _, _, _, _, _, _, _, _, _, _, _, _) := st' in votedFor\".", "type": "cannot_unify", "handled": false}, {"ctx": ["intros h h' t lli llt st st' m H1 H2.", "unfold handleRequestVote in H1.", "destruct (t <? currentTerm (snd st)) eqn:Heq1.", "-", "inversion H1.", "shelve.", "-", "destruct (advanceCurrentTerm (snd st) t) as [st'' m'] eqn:Heq2.", "inversion H1; subst; clear H1.", "right.", "split.", "++", "unfold votedFor."], "tactic": "++", "exn": "Wrong bullet ++: Current bullet ++ is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["intros h h' t lli llt st st' m H1 H2.", "unfold handleRequestVote in H1.", "destruct (t <? currentTerm (snd st)) eqn:Heq1.", "-", "inversion H1.", "shelve.", "-", "destruct (advanceCurrentTerm (snd st) t) as [st'' m'] eqn:Heq2.", "inversion H1; subst; clear H1.", "right.", "split.", "++", "unfold votedFor.", "shelve.", "++", "unfold currentTerm."], "tactic": "rewrite <- Heq2.", "exn": "Found no subterm matching \"mkRaft_data st'' m' leaderId log commitIndex lastApplied stateMachine nextIndex matchIndex shouldSend votesReceived type clientCache electoralVictories\" in the current goal.", "type": "no_subterm", "handled": false}, {"ctx": ["intros h h' t lli llt st st' m H1 H2.", "unfold handleRequestVote in H1.", "destruct (t <? currentTerm (snd st)) eqn:Heq1.", "-", "inversion H1.", "shelve.", "-", "destruct (advanceCurrentTerm (snd st) t) as [st'' m'] eqn:Heq2.", "inversion H1; subst; clear H1.", "right.", "split.", "++", "unfold votedFor.", "shelve.", "++", "unfold currentTerm."], "tactic": "reflexivity.", "exn": "In environment orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params rri : raft_refinement_interface vci : votes_correct_interface cvfsi : candidates_vote_for_selves_interface h : name h' : fin N t, lli, llt : nat st : electionsData * RaftState.raft_data term name entry logIndex serverType data clientId output st' : raft_data m : msg Heq1 : (t <? currentTerm (snd st)) = false st'' : term m', leaderId : option name log : list entry commitIndex, lastApplied : logIndex stateMachine : data nextIndex, matchIndex : list (name * logIndex) shouldSend : bool votesReceived : list name type : serverType clientCache : list (clientId * (nat * output)) electoralVictories : list (term * list name * list entry) Heq2 : advanceCurrentTerm (snd st) t = mkRaft_data st'' m' leaderId log commitIndex lastApplied stateMachine nextIndex matchIndex shouldSend votesReceived type clientCache electoralVictories H2 : votedFor st' = Some h' H0 : (if (if leaderId then false else true) && moreUpToDate llt lli (maxTerm log) (maxIndex log) then match m' with | Some candidateId' => (mkRaft_data st'' m' leaderId log commitIndex lastApplied stateMachine nextIndex matchIndex shouldSend votesReceived type clientCache electoralVictories, RequestVoteReply st'' (if fin_eq_dec N h' candidateId' then true else false)) | None => (mkRaft_data st'' (Some h') leaderId log commitIndex lastApplied stateMachine nextIndex matchIndex shouldSend votesReceived type clientCache electoralVictories, RequestVoteReply st'' true) end else (mkRaft_data st'' m' leaderId log commitIndex lastApplied stateMachine nextIndex matchIndex shouldSend votesReceived type clientCache electoralVictories, RequestVoteReply st'' false)) = (st', m) Unable to unify \"let (currentTerm, _, _, _, _, _, _, _, _, _, _, _, _, _) := snd st in currentTerm\" with \"let (currentTerm, _, _, _, _, _, _, _, _, _, _, _, _, _) := st' in currentTerm\".", "type": "cannot_unify", "handled": false}, {"ctx": ["intros h h' t lli llt st st' m H1 H2.", "unfold handleRequestVote in H1.", "destruct (t <? currentTerm (snd st)) eqn:Heq1.", "-", "inversion H1.", "shelve.", "-", "destruct (advanceCurrentTerm (snd st) t) as [st'' m'] eqn:Heq2.", "inversion H1; subst; clear H1.", "right.", "split.", "++", "unfold votedFor.", "shelve.", "++", "unfold currentTerm."], "tactic": "left.", "exn": "Not an inductive goal with 2 constructors.", "type": "not_inductive_goal", "handled": false}, {"ctx": ["intros h h' t lli llt st st' m H1 H2.", "unfold handleRequestVote in H1.", "destruct (t <? currentTerm (snd st)) eqn:Heq1.", "-", "inversion H1.", "shelve.", "-", "destruct (advanceCurrentTerm (snd st) t) as [st'' m'] eqn:Heq2.", "inversion H1; subst; clear H1.", "right.", "split.", "++", "unfold votedFor.", "shelve.", "++", "unfold currentTerm."], "tactic": "left.", "exn": "Not an inductive goal with 2 constructors.", "type": "not_inductive_goal", "handled": false}, {"ctx": ["intros h h' t lli llt st st' m H1 H2.", "unfold handleRequestVote in H1.", "destruct (t <? currentTerm (snd st)) eqn:Heq1.", "-", "inversion H1.", "shelve.", "-", "destruct (advanceCurrentTerm (snd st) t) as [st'' m'] eqn:Heq2.", "inversion H1; subst; clear H1.", "right.", "split.", "++", "unfold votedFor.", "shelve.", "++", "unfold currentTerm."], "tactic": "apply Heq2.", "exn": "In environment orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params rri : raft_refinement_interface vci : votes_correct_interface cvfsi : candidates_vote_for_selves_interface h : name h' : fin N t, lli, llt : nat st : electionsData * RaftState.raft_data term name entry logIndex serverType data clientId output st' : raft_data m : msg Heq1 : (t <? currentTerm (snd st)) = false st'' : term m', leaderId : option name log : list entry commitIndex, lastApplied : logIndex stateMachine : data nextIndex, matchIndex : list (name * logIndex) shouldSend : bool votesReceived : list name type : serverType clientCache : list (clientId * (nat * output)) electoralVictories : list (term * list name * list entry) Heq2 : advanceCurrentTerm (snd st) t = mkRaft_data st'' m' leaderId log commitIndex lastApplied stateMachine nextIndex matchIndex shouldSend votesReceived type clientCache electoralVictories H2 : votedFor st' = Some h' H0 : (if (if leaderId then false else true) && moreUpToDate llt lli (maxTerm log) (maxIndex log) then match m' with | Some candidateId' => (mkRaft_data st'' m' leaderId log commitIndex lastApplied stateMachine nextIndex matchIndex shouldSend votesReceived type clientCache electoralVictories, RequestVoteReply st'' (if fin_eq_dec N h' candidateId' then true else false)) | None => (mkRaft_data st'' (Some h') leaderId log commitIndex lastApplied stateMachine nextIndex matchIndex shouldSend votesReceived type clientCache electoralVictories, RequestVoteReply st'' true) end else (mkRaft_data st'' m' leaderId log commitIndex lastApplied stateMachine nextIndex matchIndex shouldSend votesReceived type clientCache electoralVictories, RequestVoteReply st'' false)) = (st', m) Unable to unify \"advanceCurrentTerm (snd st) t = mkRaft_data st'' m' leaderId log commitIndex lastApplied stateMachine nextIndex matchIndex shouldSend votesReceived type clientCache electoralVictories\" with \"(let (currentTerm, _, _, _, _, _, _, _, _, _, _, _, _, _) := st' in currentTerm) = (let (currentTerm, _, _, _, _, _, _, _, _, _, _, _, _, _) := snd st in currentTerm)\".", "type": "cannot_unify", "handled": false}, {"ctx": ["intros h h' t lli llt st st' m H1 H2.", "unfold handleRequestVote in H1.", "destruct (t <? currentTerm (snd st)) eqn:Heq1.", "-", "inversion H1.", "shelve.", "-", "destruct (advanceCurrentTerm (snd st) t) as [st'' m'] eqn:Heq2.", "inversion H1; subst; clear H1.", "right.", "split.", "++", "unfold votedFor.", "shelve.", "++", "unfold currentTerm."], "tactic": "destruct (votedFor st'') eqn:Heq4.", "exn": "In environment orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params rri : raft_refinement_interface vci : votes_correct_interface cvfsi : candidates_vote_for_selves_interface h : name h' : fin N t, lli, llt : nat st : electionsData * RaftState.raft_data term name entry logIndex serverType data clientId output st' : raft_data m : msg Heq1 : (t <? currentTerm (snd st)) = false st'' : term m', leaderId : option name log : list entry commitIndex, lastApplied : logIndex stateMachine : data nextIndex, matchIndex : list (name * logIndex) shouldSend : bool votesReceived : list name type : serverType clientCache : list (clientId * (nat * output)) electoralVictories : list (term * list name * list entry) Heq2 : advanceCurrentTerm (snd st) t = mkRaft_data st'' m' leaderId log commitIndex lastApplied stateMachine nextIndex matchIndex shouldSend votesReceived type clientCache electoralVictories H2 : votedFor st' = Some h' H0 : (if (if leaderId then false else true) && moreUpToDate llt lli (maxTerm log) (maxIndex log) then match m' with | Some candidateId' => (mkRaft_data st'' m' leaderId log commitIndex lastApplied stateMachine nextIndex matchIndex shouldSend votesReceived type clientCache electoralVictories, RequestVoteReply st'' (if fin_eq_dec N h' candidateId' then true else false)) | None => (mkRaft_data st'' (Some h') leaderId log commitIndex lastApplied stateMachine nextIndex matchIndex shouldSend votesReceived type clientCache electoralVictories, RequestVoteReply st'' true) end else (mkRaft_data st'' m' leaderId log commitIndex lastApplied stateMachine nextIndex matchIndex shouldSend votesReceived type clientCache electoralVictories, RequestVoteReply st'' false)) = (st', m) The term \"st''\" has type \"term\" while it is expected to have type \"RaftState.raft_data term name entry logIndex serverType data clientId output\".", "type": "wrong_type", "handled": false}, {"ctx": ["intros h h' t lli llt st st' m H1 H2.", "unfold handleRequestVote in H1.", "destruct (t <? currentTerm (snd st)) eqn:Heq1.", "-", "inversion H1.", "shelve.", "-", "destruct (advanceCurrentTerm (snd st) t) as [st'' m'] eqn:Heq2.", "inversion H1; subst; clear H1.", "right.", "split.", "++", "unfold votedFor.", "shelve.", "++", "unfold currentTerm."], "tactic": "inversion H1; subst; clear H1.", "exn": "No such hypothesis: H1", "type": "no_hypos", "handled": false}, {"ctx": ["intros h h' t lli llt st st' m H1 H2.", "unfold handleRequestVote in H1.", "destruct (t <? currentTerm (snd st)) eqn:Heq1.", "-", "inversion H1.", "shelve.", "-", "destruct (advanceCurrentTerm (snd st) t) as [st'' m'] eqn:Heq2.", "inversion H1; subst; clear H1.", "right.", "split.", "++", "unfold votedFor.", "shelve.", "++", "unfold currentTerm."], "tactic": "right.", "exn": "Not an inductive goal with 2 constructors.", "type": "not_inductive_goal", "handled": false}, {"ctx": ["intros h h' t lli llt st st' m H1 H2.", "unfold handleRequestVote in H1.", "destruct (t <? currentTerm (snd st)) eqn:Heq1.", "-", "inversion H1.", "shelve.", "-", "destruct (advanceCurrentTerm (snd st) t) as [st'' m'] eqn:Heq2.", "inversion H1; subst; clear H1.", "right.", "split.", "++", "unfold votedFor.", "shelve.", "++", "unfold currentTerm."], "tactic": "split.", "exn": "In environment orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params rri : raft_refinement_interface vci : votes_correct_interface cvfsi : candidates_vote_for_selves_interface h : name h' : fin N t, lli, llt : nat st : electionsData * RaftState.raft_data term name entry logIndex serverType data clientId output st' : raft_data m : msg Heq1 : (t <? currentTerm (snd st)) = false st'' : term m', leaderId : option name log : list entry commitIndex, lastApplied : logIndex stateMachine : data nextIndex, matchIndex : list (name * logIndex) shouldSend : bool votesReceived : list name type : serverType clientCache : list (clientId * (nat * output)) electoralVictories : list (term * list name * list entry) Heq2 : advanceCurrentTerm (snd st) t = mkRaft_data st'' m' leaderId log commitIndex lastApplied stateMachine nextIndex matchIndex shouldSend votesReceived type clientCache electoralVictories H2 : votedFor st' = Some h' H0 : (if (if leaderId then false else true) && moreUpToDate llt lli (maxTerm log) (maxIndex log) then match m' with | Some candidateId' => (mkRaft_data st'' m' leaderId log commitIndex lastApplied stateMachine nextIndex matchIndex shouldSend votesReceived type clientCache electoralVictories, RequestVoteReply st'' (if fin_eq_dec N h' candidateId' then true else false)) | None => (mkRaft_data st'' (Some h') leaderId log commitIndex lastApplied stateMachine nextIndex matchIndex shouldSend votesReceived type clientCache electoralVictories, RequestVoteReply st'' true) end else (mkRaft_data st'' m' leaderId log commitIndex lastApplied stateMachine nextIndex matchIndex shouldSend votesReceived type clientCache electoralVictories, RequestVoteReply st'' false)) = (st', m) Unable to unify \"let (currentTerm, _, _, _, _, _, _, _, _, _, _, _, _, _) := snd st in currentTerm\" with \"let (currentTerm, _, _, _, _, _, _, _, _, _, _, _, _, _) := st' in currentTerm\".", "type": "cannot_unify", "handled": false}, {"ctx": ["intros h h' t lli llt st st' m H1 H2.", "unfold handleRequestVote in H1.", "destruct (t <? currentTerm (snd st)) eqn:Heq1.", "-", "inversion H1.", "shelve.", "-", "destruct (advanceCurrentTerm (snd st) t) as [st'' m'] eqn:Heq2.", "inversion H1; subst; clear H1.", "right.", "split.", "++", "unfold votedFor.", "shelve.", "++", "unfold currentTerm."], "tactic": "++", "exn": "Wrong bullet ++: Current bullet ++ is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["intros h h' t lli llt st st' m H1 H2.", "unfold handleRequestVote in H1.", "destruct (t <? currentTerm (snd st)) eqn:Heq1.", "-", "inversion H1.", "shelve.", "-", "destruct (advanceCurrentTerm (snd st) t) as [st'' m'] eqn:Heq2.", "inversion H1; subst; clear H1.", "right.", "split.", "++", "unfold votedFor.", "shelve.", "++", "unfold currentTerm.", "shelve."], "tactic": "++", "exn": "Wrong bullet ++: No more subgoals.", "type": "no_more_subgoals", "handled": true}]}, "chat": [{"role": "user", "content": "I will give you a Coq proof state, including both hypotheses and a specific goal and your need to prove it. Your response should be a singular code block of Coq proof, without any additional explanation or commentary. Follow to these guidelines:\nIntroduce variables using unique names to avoid any conflicts.\nKeep each command distinct and separated, avoid concatenations like ';' or '[cmd|cmd]'.\nOrganize your proof with bullets like '-', '+', and '*' instead of braces ({, }). Shift to their double symbols like '--' and '++', when necessary.\nEffectively use given premises, follow the syntax and structure demonstrated in the examples provided.\n\nExample 1:\n\nHypotheses:\nn, m: nat\nIHn: m + n = n + m\n\nGoal:\nm + S n = S n + m\n\nProof:\n```simpl. rewrite <- IHn. auto.```\n\nExample 2:\nHypotheses:\n\nGoal:\nforall n m : nat, m + n = n + m\n\n```intros n m. induction n.\n- simpl. auto.\n- simpl. rewrite <- IHn. auto.```\n\nSovle This Proof State:\n\nHypotheses:\norig_base_params: BaseParams\none_node_params: OneNodeParams orig_base_params\nraft_params: RaftParams orig_base_params\nrri: raft_refinement_interface\nvci: votes_correct_interface\ncvfsi: candidates_vote_for_selves_interface\n\nGoal:\nforall (h : name) (h' : fin N) (t lli llt : nat) (st : electionsData * RaftState.raft_data term name entry logIndex serverType data clientId output) (st' : raft_data) (m : msg), handleRequestVote h (snd st) t h' lli llt = (st', m) -> votedFor st' = Some h' -> In (currentTerm st', h') (votes (update_elections_data_requestVote h h' t h' lli llt st)) \\/ votedFor st' = votedFor (snd st) /\\ currentTerm st' = currentTerm (snd st)\n\nPremises:\nterm = nat : Set\noutput = fun BaseParams0 : BaseParams => let (_, _, output) := BaseParams0 in output : BaseParams -> Type Arguments output {BaseParams}\nsnd = fun (A B : Type) (p : A * B) => let (_, y) := p in y : forall A B : Type, A * B -> B Arguments snd {A B}%type_scope\nRecord OneNodeParams (P : BaseParams) : Type := Build_OneNodeParams { init : data; handler : input -> data -> output * data } Arguments Build_OneNodeParams _ _ _%function_scope\nfin = fix fin (n : nat) : Type := match n with | 0 => False | S n' => option (fin n') end : nat -> Type Arguments fin _%nat_scope\nNotation currentTerm := (RaftState.currentTerm term name entry logIndex serverType data clientId output)\ndata = fun BaseParams0 : BaseParams => let (data, _, _) := BaseParams0 in data : BaseParams -> Type Arguments data {BaseParams}\nRecord BaseParams : Type := Build_BaseParams { data : Type; input : Type; output : Type } Arguments Build_BaseParams (_ _ _)%type_scope\nclientId = fun (orig_base_params : BaseParams) (RaftParams0 : RaftParams orig_base_params) => let (_, _, _, clientId, _) := RaftParams0 in clientId : forall orig_base_params : BaseParams, RaftParams orig_base_params -> Type Arguments clientId {orig_base_params RaftParams}\nhandleRequestVote = fun (orig_base_params : BaseParams) (raft_params : RaftParams orig_base_params) (_ : name) (state : RaftState.raft_data term name entry logIndex serverType data clientId output) (t : nat) (candidateId : fin N) (lastLogIndex lastLogTerm : nat) => if t <? currentTerm state then (state, RequestVoteReply (currentTerm state) false) else let state0 := advanceCurrentTerm state t in if (if leaderId state0 then false else true) && moreUpToDate lastLogTerm lastLogIndex (maxTerm (log state0)) (maxIndex (log state0)) then match votedFor\nRecord RaftParams (orig_base_params : BaseParams) : Type := Build_RaftParams { N : nat; input_eq_dec : forall x y : input, {x = y} + {x <> y}; output_eq_dec : forall x y : output, {x = y} + {x <> y}; clientId : Type; clientId_eq_dec : forall x y : clientId, {x = y} + {x <> y} } Arguments Build_RaftParams _ _%nat_scope (_ _)%function_scope [clientId]%type_scope _%function_scope\nRecord candidates_vote_for_selves_interface (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params) : Prop := Build_candidates_vote_for_selves_interface { candidates_vote_for_selves_invariant : forall net : network, raft_intermediate_reachable net -> candidates_vote_for_selves net } Arguments candidates_vote_for_selves_interface {orig_base_params one_node_params raft_params} Arguments Build_candidates_vote_for_selves_interface {orig_base_params one_node_params raft_params} _%function_scope\nRecord votes_correct_interface (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params) : Prop := Build_votes_correct_interface { votes_correct_invariant : forall net : network, refined_raft_intermediate_reachable net -> votes_correct net } Arguments votes_correct_interface {orig_base_params one_node_params raft_params} Arguments Build_votes_correct_interface {orig_base_params one_node_params raft_params} _%function_scope\nRecord raft_refinement_interface (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params) : Prop := Build_raft_refinement_interface { refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft_net_invariant_request_vote_reply P -> refined_raft_net_invariant_do\nRecord electionsData (orig_base_params : BaseParams) (raft_params : RaftParams orig_base_params) : Type := mkElectionsData { votes : list (term * name); votesWithLog : list (term * name * list entry); cronies : term -> list name; leaderLogs : list (term * list entry); allEntries : list (term * entry) } Arguments electionsData {orig_base_params raft_params} Arguments mkElectionsData {orig_base_params raft_params} (_ _)%list_scope _%function_scope (_ _)%list_scope\nRecord entry (orig_base_params : BaseParams) (raft_params : RaftParams orig_base_params) : Type := mkEntry { eAt : name; eClient : clientId; eId : nat; eIndex : logIndex; eTerm : term; eInput : input } Arguments entry {orig_base_params raft_params} Arguments mkEntry {orig_base_params raft_params} _ _ _%nat_scope\nname = fun (orig_base_params : BaseParams) (raft_params : RaftParams orig_base_params) => fin N : forall orig_base_params : BaseParams, RaftParams orig_base_params -> Type Arguments name {orig_base_params raft_params}\nInductive nat : Set := O : nat | S : nat -> nat Arguments S _%nat_scope\nIn : forall A : Type, A -> list A -> Prop\nlogIndex = nat : Set\nraft_data = fun (orig_base_params : BaseParams) (raft_params : RaftParams orig_base_params) => RaftState.raft_data term name entry logIndex serverType data clientId output : forall orig_base_params : BaseParams, RaftParams orig_base_params -> Type Arguments raft_data {orig_base_params raft_params}\nNotation votedFor := (RaftState.votedFor term name entry logIndex serverType data clientId output)\nvotes = fun (orig_base_params : BaseParams) (raft_params : RaftParams orig_base_params) (e : electionsData) => let (votes, _, _, _, _) := e in votes : forall (orig_base_params : BaseParams) (raft_params : RaftParams orig_base_params), electionsData -> list (term * name) Arguments votes {orig_base_params raft_params}\nInductive serverType : Set := Follower : serverType | Candidate : serverType | Leader : serverType\nN = fun (orig_base_params : BaseParams) (RaftParams0 : RaftParams orig_base_params) => let (N, _, _, clientId, _) := RaftParams0 in N : forall orig_base_params : BaseParams, RaftParams orig_base_params -> nat Arguments N {orig_base_params RaftParams}\nInductive option (A : Type) : Type := Some : A -> option A | None : option A Arguments option _%type_scope Arguments Some {A}%type_scope a : rename Arguments None {A}%type_scope\nupdate_elections_data_requestVote = fun (orig_base_params : BaseParams) (raft_params : RaftParams orig_base_params) (me _ : name) (t : nat) (candidateId : fin N) (lastLogIndex lastLogTerm : nat) (st : electionsData * RaftState.raft_data term name entry logIndex serverType data clientId output) => let (st', _) := handleRequestVote me (snd st) t candidateId lastLogIndex lastLogTerm in let (o, o0) := (votedFor (snd st), votedFor st') in match o with | Some cid => match o0 with | Some cid' => if (current\nInductive msg (orig_base_params : BaseParams) (raft_params : RaftParams orig_base_params) : Type := RequestVote : term -> name -> logIndex -> term -> msg | RequestVoteReply : term -> bool -> msg | AppendEntries : term -> name -> logIndex -> term -> list entry -> logIndex -> msg | AppendEntriesReply : term -> list entry -> bool -> msg Arguments msg {orig_base_params raft_params} Arguments RequestVote {orig_base_params raft_params} Arguments RequestVoteReply {orig_base_params raft_params} _ _%bool_scope Arguments AppendEntries {orig_base_params raft_params} _ _ _ _ _%list_scope Arguments AppendEntriesReply {orig_base_params raft\nhandleRequestVote_currentTerm_same_or_follower : forall (h : name) (st : RaftState.raft_data term name entry logIndex serverType data clientId output) (t : nat) (h' : fin N) (lli llt : nat) (st' : raft_data) (m : msg), handleRequestVote h st t h' lli llt = (st', m) -> currentTerm st' = currentTerm st /\\ type st' = type st \\/ type st' = Follower\nhandleRequestVote_votesReceived : forall (h : name) (st : RaftState.raft_data term name entry logIndex serverType data clientId output) (t : nat) (h' : fin N) (lli llt : nat) (st' : raft_data) (m : msg), handleRequestVote h st t h' lli llt = (st', m) -> votesReceived st' = votesReceived st\nupdate_elections_data_requestVote_cronies : forall (h h' : name) (t : nat) (h'' : fin N) (lli llt : nat) (st : electionsData * RaftState.raft_data term name entry logIndex serverType data clientId output), cronies (update_elections_data_requestVote h h' t h'' lli llt st) = cronies (fst st)\nhandleRequestVote_true_votedFor : forall (h : name) (st : RaftState.raft_data term name entry logIndex serverType data clientId output) (t : nat) (src : fin N) (lli llt : nat) (d : raft_data) (t' : term), handleRequestVote h st t src lli llt = (d, RequestVoteReply t' true) -> currentTerm d = t' /\\ votedFor d = Some src\nupdate_elections_data_requestVote_votes_preserved : forall (t : term) (c h h' : name) (t' : nat) (h'' : fin N) (lli llt : nat) (st : electionsData * RaftState.raft_data term name entry logIndex serverType data clientId output), In (t, c) (votes (fst st)) -> In (t, c) (votes (update_elections_data_requestVote h h' t' h'' lli llt st))\napplied_entries_update : forall (sigma : name -> RaftState.raft_data term name entry logIndex serverType data clientId output) (h : name) (st : RaftState.raft_data term name entry logIndex serverType data clientId output), lastApplied st >= lastApplied (sigma h) -> applied_entries (update name_eq_dec sigma h st) = applied_entries sigma /\\ (exists h' : name, argmax (fun h0 : name => lastApplied (sigma h0)) (all_fin N) = Some h' /\\ lastApplied (sigma h') >= lastApplied st) \\/ argmax (fun h' : name => lastApplied (update name_eq_dec sigma h st h')) (all_fin N) = Some h /\\ applied_entries (update name_eq_dec sigma h st) = rev (removeAfterIndex (log st) (lastApplied st))\nrefined_raft_net_invariant_request_vote = fun (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params) (P : network -> Prop) => forall (xs : list packet) (p : packet) (ys : list packet) (net : network) (st' : name -> data) (ps' : list packet) (gd : electionsData) (d : raft_data) (m : msg) (t : nat) (cid : name) (lli llt : nat), handleRequestVote (pDst p) (snd (nwState net (pDst p))) t (pSrc p) lli llt = (d, m) ->...-> Prop Arguments refined_raft_net_invariant_request_vote {orig_base_params one_node_params raft_params} _%function_scope\nrefined_raft_net_invariant_request_vote' = fun (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params) (P : network -> Prop) => forall (xs : list packet) (p : packet) (ys : list packet) (net : network) (st' : Net.name -> data) (ps' : list packet) (gd : electionsData) (d : raft_data) (m : msg) (t : nat) (cid : name) (lli llt : nat), handleRequestVote (pDst p) (snd (nwState net (pDst p))) t (pSrc p) lli llt = (d, m) ->...-> Prop Arguments refined_raft_net_invariant_request_vote' {orig_base_params one_node_params raft_params} _%function_scope\nraft_net_invariant_request_vote = fun (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params) (P : network -> Prop) => forall (xs : list packet) (p : packet) (ys : list packet) (net : network) (st' : name -> data) (ps' : list packet) (d : raft_data) (m : msg) (t : nat) (cid : name) (lli llt : nat), handleRequestVote (pDst p) (nwState net (pDst p)) t (pSrc p) lli llt = (d, m) -> pBody p = RequestVote t cid lli llt -> P net -> raft_intermediate_reachable net ->...-> Prop Arguments raft_net_invariant_request_vote {orig_base_params one_node_params raft_params} _%function_scope\nhandleRequestVote_same_log : forall (n : name) (st : RaftState.raft_data term name entry logIndex serverType data clientId output) (t : nat) (c : fin N) (li lt : nat) (st' : raft_data) (ms : msg), handleRequestVote n st t c li lt = (st', ms) -> log st' = log st\nhandleRequestVote_same_commitIndex : forall (n : name) (st : RaftState.raft_data term name entry logIndex serverType data clientId output) (t : nat) (c : fin N) (li lt : nat) (st' : raft_data) (ms : msg), handleRequestVote n st t c li lt = (st', ms) -> commitIndex st' = commitIndex st\nhandleRequestVote_same_lastApplied : forall (n : name) (st : RaftState.raft_data term name entry logIndex serverType data clientId output) (t : nat) (c : fin N) (li lt : nat) (st' : raft_data) (ms : msg), handleRequestVote n st t c li lt = (st', ms) -> lastApplied st' = lastApplied st\nupdate_elections_data_timeout = fun (orig_base_params : BaseParams) (raft_params : RaftParams orig_base_params) (me : name) (st : electionsData * raft_data) => let '(_, st', _) := handleTimeout me (snd st) in match votedFor st' with | Some cid => if serverType_eq_dec (type (snd st)) Leader then fst st else {| votes := (currentTerm st', cid) :: votes (fst st); votesWithLog := (currentTerm st', cid, log st') :: votesWithLog (fst st); cronies := if serverType_eq_dec (type st') Candidate then fun tm : term => if Nat.eq_dec tm (currentTerm st') then votesReceived st' else cronies (fst st) tm else cronies (fst st); leaderLogs := leaderLogs (fst st); allEntries := allEntries (fst st) |} | None => fst st end :...\nvotes_currentTerm_votedFor_correct = fun (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params) (net : network) => forall (h : Net.name) (t : term) (n : name), In (t, n) (votes (fst (nwState net h))) -> currentTerm (snd (nwState net h)) = t -> votedFor (snd (nwState net h)) = Some n : forall (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params), network -> Prop Arguments votes_currentTerm_votedFor_correct {orig_base_params one_node_params raft_params}\ncurrentTerm_votedFor_votes_correct = fun (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params) (net : network) => forall (h : Net.name) (t : term) (n : name), currentTerm (snd (nwState net h)) = t -> votedFor (snd (nwState net h)) = Some n -> In (t, n) (votes (fst (nwState net h))) : forall (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params), network -> Prop Arguments currentTerm_votedFor_votes_correct {orig_base_params one_node_params raft_params}\nupdate_elections_data_requestVoteReply = fun (orig_base_params : BaseParams) (raft_params : RaftParams orig_base_params) (me src : name) (t : nat) (voteGranted : bool) (st : electionsData * RaftState.raft_data term name entry logIndex serverType data clientId output) => let st' := handleRequestVoteReply me (snd st) src t voteGranted in match type st' with | Follower => fst st | Candidate => {| votes := votes (fst st); votesWithLog := votesWithLog (fst st); cronies := fun tm : term => if Nat.eq_dec tm (currentTerm st') then votesReceived st' else cronies (fst st) tm; leaderLogs := leaderLogs (fst st); allEntries := allEntries (fst st) |} | Leader => {| votes := votes (fst st); votesWithLog := votesWithLog (fst st); cronies...\nRRIR_handleInput : forall (net : network) (h : name) (inp : raft_input) (gd : electionsData) (out : list raft_output) (d : raft_data) (l : list (name * msg)) (ps' : list packet) (st' : name -> data), refined_raft_intermediate_reachable net -> handleInput h inp (snd (nwState net h)) = (out, d, l) -> update_elections_data_input h inp (nwState net h) = gd -> (forall h' : name, st' h' = update name_eq_dec (nwState net) h (gd, d) h') -> (forall p' : packet, In p' ps' -> In p' (nwPackets net) \\/ In p' (send_packets h l)) -> refined_raft_intermediate_reachable {| nwPackets := ps'; nwState := st' |}\nrefined_raft_net_invariant_timeout = fun (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params) (P : network -> Prop) => forall (net : network) (h : name) (st' : name -> data) (ps' : list packet) (gd : electionsData) (out : list raft_output) (d : raft_data) (l : list (name * msg)), handleTimeout h (snd (nwState net h)) = (out, d, l) -> gd = update_elections_data_timeout h (nwState net h) -> P net -> refined_raft_intermediate_reachable net ->...-> Prop Arguments refined_raft_net_invariant_timeout {orig_base_params one_node_params raft_params} _%function_scope\nrefined_raft_net_invariant_timeout' = fun (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params) (P : network -> Prop) => forall (net : network) (h : name) (st' : Net.name -> data) (ps' : list packet) (gd : electionsData) (out : list raft_output) (d : raft_data) (l : list (name * msg)), handleTimeout h (snd (nwState net h)) = (out, d, l) -> gd = update_elections_data_timeout h (nwState net h) -> P net -> refined_raft_intermediate_reachable net ->...-> Prop Arguments refined_raft_net_invariant_timeout' {orig_base_params one_node_params raft_params} _%function_scope\nrefined_raft_net_invariant_client_request = fun (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params) (P : network -> Prop) => forall (h : name) (net : network) (st' : name -> data) (ps' : list packet) (gd : electionsData) (out : list raft_output) (d : raft_data) (l : list (name * msg)) (client : clientId) (id : nat) (c : input), handleClientRequest h (snd (nwState net h)) client id c = (out, d, l) -> gd = update_elections_data_client_request h (nwState net h) client id c -> P net -> refined_raft_intermediate_reachable net ->...-> Prop Arguments refined_raft_net_invariant_client_request {orig_base_params one_node_params raft_params} _%function_scope\nrefined_raft_net_invariant_client_request' = fun (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params) (P : network -> Prop) => forall (h : name) (net : network) (st' : Net.name -> data) (ps' : list packet) (gd : electionsData) (out : list raft_output) (d : raft_data) (l : list (name * msg)) (client : clientId) (id : nat) (c : input), handleClientRequest h (snd (nwState net h)) client id c = (out, d, l) -> gd = update_elections_data_client_request h (nwState net h) client id c -> P net ->...-> Prop Arguments refined_raft_net_invariant_client_request' {orig_base_params one_node_params raft_params} _%function_scope\nrefined_raft_intermediate_reachable_sind : forall P : network -> SProp, P step_async_init -> (forall (failed : list Net.name) (net : network) (failed' : list Net.name) (net' : network) (out : list (Net.name * (input + list output))), refined_raft_intermediate_reachable net -> P net -> step_failure (failed, net) (failed', net') out -> P net') ->...-> P n\nrefined_raft_intermediate_reachable_ind : forall P : network -> Prop, P step_async_init -> (forall (failed : list Net.name) (net : network) (failed' : list Net.name) (net' : network) (out : list (Net.name * (input + list output))), refined_raft_intermediate_reachable net -> P net -> step_failure (failed, net) (failed', net') out -> P net') ->...-> P n\nupdate_elections_data_client_request = fun (orig_base_params : BaseParams) (raft_params : RaftParams orig_base_params) (me : name) (st : electionsData * raft_data) (client : clientId) (id : nat) (c : input) => let '(_, st', _) := handleClientRequest me (snd st) client id c in if length (log (snd st)) <? length (log st') then match log st' with | [] => fst st | e :: _ => {| votes := votes (fst st); votesWithLog := votesWithLog (fst st); cronies := cronies (fst st); leaderLogs := leaderLogs (fst st); allEntries := (currentTerm st', e) :: allEntries (fst st) |} end else fst st : forall (orig_base_params : BaseParams) (raft_params : RaftParams orig_base_params), name -> electionsData * raft_data -> clientId...\nrefined_raft_net_invariant_do_leader = fun (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params) (P : network -> Prop) => forall (net : network) (st' : name -> data) (ps' : list packet) (gd : ghost_data) (d : raft_data) (h : name) (os : list raft_output) (d' : raft_data) (ms : list (name * msg)), doLeader d h = (os, d', ms) -> P net -> refined_raft_intermediate_reachable net -> nwState net h = (gd, d) ->...-> Prop Arguments refined_raft_net_invariant_do_leader {orig_base_params one_node_params raft_params} _%function_scope\nrefined_raft_net_invariant_do_leader' = fun (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params) (P : network -> Prop) => forall (net : network) (st' : Net.name -> data) (ps' : list packet) (gd : ghost_data) (d : raft_data) (h : name) (os : list raft_output) (d' : raft_data) (ms : list (name * msg)), doLeader d h = (os, d', ms) -> P net -> refined_raft_intermediate_reachable net -> refined_raft_intermediate_reachable {| nwPackets := ps'; nwState := st' |} -> nwState net h = (gd, d) ->...-> Prop Arguments refined_raft_net_invariant_do_leader' {orig_base_params one_node_params raft_params} _%function_scope\nhandleAppendEntriesReply_same_commitIndex : forall (n : name) (st : RaftState.raft_data term name entry logIndex serverType data clientId output) (src : name) (t : nat) (es : list entry) (b : bool) (st' : raft_data) (l : list (name * msg)), handleAppendEntriesReply n st src t es b = (st', l) -> commitIndex st' = commitIndex st\nhandleAppendEntriesReply_same_log : forall (n : name) (st : RaftState.raft_data term name entry logIndex serverType data clientId output) (src : name) (t : nat) (es : list entry) (b : bool) (st' : raft_data) (l : list (name * msg)), handleAppendEntriesReply n st src t es b = (st', l) -> log st' = log st\nhandleAppendEntriesReply_same_lastApplied : forall (n : name) (st : RaftState.raft_data term name entry logIndex serverType data clientId output) (src : name) (t : nat) (es : list entry) (b : bool) (st' : raft_data) (l : list (name * msg)), handleAppendEntriesReply n st src t es b = (st', l) -> lastApplied st' = lastApplied st\nrefined_raft_net_invariant_do_generic_server = fun (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params) (P : network -> Prop) => forall (net : network) (st' : name -> data) (ps' : list packet) (gd : ghost_data) (d : raft_data) (os : list raft_output) (d' : raft_data) (ms : list (name * msg)) (h : name), doGenericServer h d = (os, d', ms) -> P net -> refined_raft_intermediate_reachable net -> nwState net h = (gd, d) ->...-> Prop Arguments refined_raft_net_invariant_do_generic_server {orig_base_params one_node_params raft_params} _%function_scope\nrefined_raft_net_invariant_do_generic_server' = fun (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params) (P : network -> Prop) => forall (net : network) (st' : Net.name -> data) (ps' : list packet) (gd : ghost_data) (d : raft_data) (os : list raft_output) (d' : raft_data) (ms : list (name * msg)) (h : name), doGenericServer h d = (os, d', ms) -> P net -> refined_raft_intermediate_reachable net -> refined_raft_intermediate_reachable {| nwPackets := ps'; nwState := st' |} ->...-> Prop Arguments refined_raft_net_invariant_do_generic_server' {orig_base_params one_node_params raft_params} _%function_scope\nInductive refined_raft_intermediate_reachable (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params) : network -> Prop := RRIR_init : refined_raft_intermediate_reachable step_async_init | RRIR_step_failure : forall (failed : list Net.name) (net : network) (failed' : list Net.name) (net' : network) (out : list (Net.name * (input + list output))), refined_raft_intermediate_reachable net -> step_failure (failed, net) (failed', net') out -> refined_raft_intermediate_reachable net' | RRIR_handleInput : forall (net : network) (h : name) (inp : raft_input) (gd : electionsData) (out : list raft_output) (d : raft_data) (l : list (name * msg)) (ps' : list packet)...\nhandleAppendEntries_same_lastApplied : forall (h : name) (st : raft_data) (t : term) (n : name) (pli : logIndex) (plt : term) (es : list entry) (ci : logIndex) (st' : raft_data) (ps : msg), handleAppendEntries h st t n pli plt es ci = (st', ps) -> lastApplied st' = lastApplied st\nInductive raft_intermediate_reachable (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params) : network -> Prop := RIR_init : raft_intermediate_reachable step_async_init | RIR_step_failure : forall (failed : list Net.name) (net : network) (failed' : list Net.name) (net' : network) (out : list (Net.name * (input + list output))), raft_intermediate_reachable net -> step_failure (failed, net) (failed', net') out -> raft_intermediate_reachable net' | RIR_handleInput : forall (net : network) (h : name) (inp : raft_input) (out : list raft_output) (d : raft_data) (l : list (name * msg)) (ps' : list packet) (st' : name -> data), raft_intermediate_reachable net...\nraft_net_invariant_reboot = fun (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params) (P : network -> Prop) => forall (net net' : network) (d : RaftState.raft_data term name entry logIndex serverType data clientId output) (h : Net.name) (d' : raft_data), reboot d = d' -> P net -> raft_intermediate_reachable net -> nwState net h = d -> (forall h' : Net.name, nwState net' h' = update name_eq_dec (nwState net) h d' h') -> nwPackets net = nwPackets net' ->...-> Prop Arguments raft_net_invariant_reboot {orig_base_params one_node_params raft_params} _%function_scope\nrefined_raft_net_invariant_append_entries_reply' = fun (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params) (P : network -> Prop) => forall (xs : list packet) (p : packet) (ys : list packet) (net : network) (st' : Net.name -> data) (ps' : list packet) (gd : ghost_data) (d : raft_data) (m : list (name * msg)) (t : nat) (es : list entry) (res : bool), handleAppendEntriesReply (pDst p) (snd (nwState net (pDst p))) (pSrc p) t es res = (d, m) ->...-> Prop Arguments refined_raft_net_invariant_append_entries_reply' {orig_base_params one_node_params raft_params} _%function_scope\nrefined_raft_net_invariant_append_entries_reply = fun (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params) (P : network -> Prop) => forall (xs : list packet) (p : packet) (ys : list packet) (net : network) (st' : name -> data) (ps' : list packet) (gd : ghost_data) (d : raft_data) (m : list (name * msg)) (t : nat) (es : list entry) (res : bool), handleAppendEntriesReply (pDst p) (snd (nwState net (pDst p))) (pSrc p) t es res = (d, m) -> gd = fst (nwState net (pDst p)) ->...-> Prop Arguments refined_raft_net_invariant_append_entries_reply {orig_base_params one_node_params raft_params} _%function_scope\nrefined_raft_net_invariant_reboot = fun (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params) (P : network -> Prop) => forall (net net' : network) (gd : ghost_data) (d : RaftState.raft_data term name entry logIndex serverType data clientId output) (h : Net.name) (d' : raft_data), reboot d = d' -> P net -> refined_raft_intermediate_reachable net -> nwState net h = (gd, d) -> (forall h' : Net.name, nwState net' h' = update name_eq_dec (nwState net) h (gd, d') h') -> nwPackets net = nwPackets net' ->...-> Prop Arguments refined_raft_net_invariant_reboot {orig_base_params one_node_params raft_params} _%function_scope\nrefined_raft_net_invariant_reboot' = fun (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params) (P : network -> Prop) => forall (net net' : network) (gd : ghost_data) (d : RaftState.raft_data term name entry logIndex serverType data clientId output) (h : Net.name) (d' : raft_data), reboot d = d' -> P net -> refined_raft_intermediate_reachable net -> refined_raft_intermediate_reachable net' -> nwState net h = (gd, d) -> (forall h' : Net.name, nwState net' h' = update name_eq_dec (nwState net) h (gd, d') h') ->...-> Prop Arguments refined_raft_net_invariant_reboot' {orig_base_params one_node_params raft_params} _%function_scope\napplied_entries_safe_update : forall (sigma : name -> RaftState.raft_data term name entry logIndex serverType data clientId output) (h : name) (st : RaftState.raft_data term name entry logIndex serverType data clientId output), lastApplied st = lastApplied (sigma h) -> removeAfterIndex (log st) (lastApplied (sigma h)) = removeAfterIndex (log (sigma h)) (lastApplied (sigma h)) -> applied_entries (update name_eq_dec sigma h st) = applied_entries sigma"}, {"role": "assistant", "content": "```coq\nintros h h' t lli llt st st' m H1 H2. unfold handleRequestVote in H1. \ndestruct (t <? currentTerm (snd st)) eqn:Heq1.\n- inversion H1.\n- destruct (advanceCurrentTerm (snd st) t) as [st'' m'] eqn:Heq2.\n  destruct (leaderId st'') eqn:Heq3.\n  + destruct (votedFor st'') eqn:Heq4.\n    * inversion H1; subst; clear H1.\n      right. split.\n      ++ unfold votedFor. rewrite <- Heq4. reflexivity.\n      ++ unfold currentTerm. rewrite <- Heq2. reflexivity.\n    * left. left. apply update_elections_data_requestVote_true.\n      apply Heq2.\n      apply Heq3.\n  + destruct (votedFor st'') eqn:Heq4.\n    * inversion H1; subst; clear H1.\n      right. split.\n      ++ unfold votedFor. rewrite <- Heq4. reflexivity.\n      ++ unfold currentTerm. rewrite <- Heq2. reflexivity.\n    * left. left. apply update_elections_data_requestVote_true.\n      apply Heq2.\n      apply Heq3.\nQed.\n```"}], "original": "intros h h' t lli llt st st' m H1 H2. unfold handleRequestVote in H1. destruct (t <? currentTerm (snd st)) eqn:Heq1. - inversion H1. - destruct (advanceCurrentTerm (snd st) t) as [st'' m'] eqn:Heq2. destruct (leaderId st'') eqn:Heq3. + destruct (votedFor st'') eqn:Heq4. * inversion H1; subst; clear H1. right. split. ++ unfold votedFor. rewrite <- Heq4. reflexivity. ++ unfold currentTerm. rewrite <- Heq2. reflexivity. * left. left. apply update_elections_data_requestVote_true. apply Heq2. apply Heq3. + destruct (votedFor st'') eqn:Heq4. * inversion H1; subst; clear H1. right. split. ++ unfold votedFor. rewrite <- Heq4. reflexivity. ++ unfold currentTerm. rewrite <- Heq2. reflexivity. * left. left. apply update_elections_data_requestVote_true. apply Heq2. apply Heq3.", "succ": false}]