[{"history": {"proof": "intros net net' h e t Hupdate Hlifted_committed. unfold lifted_committed in Hlifted_committed. destruct Hlifted_committed as [h' [e' [H1 [H2 [H3 [H4 H5]]]]]]. exists h', e'. repeat split; auto. - shelve. - shelve. - shelve.", "repairs": ["", "", "", "", "", "", "unfinished_bullet", "", "", "", ""], "exceptions": [{"ctx": ["intros net net' h e t Hupdate Hlifted_committed.", "unfold lifted_committed in Hlifted_committed.", "destruct Hlifted_committed as [h' [e' [H1 [H2 [H3 [H4 H5]]]]]].", "exists h', e'.", "repeat split; auto.", "-"], "tactic": "intros h''.", "exn": "No product even after head-reduction.", "type": "no_product", "handled": false}, {"ctx": ["intros net net' h e t Hupdate Hlifted_committed.", "unfold lifted_committed in Hlifted_committed.", "destruct Hlifted_committed as [h' [e' [H1 [H2 [H3 [H4 H5]]]]]].", "exists h', e'.", "repeat split; auto.", "-"], "tactic": "rewrite Hupdate.", "exn": "Found no subterm matching \"nwState net' ?M13743\" in the current goal.", "type": "no_subterm", "handled": false}, {"ctx": ["intros net net' h e t Hupdate Hlifted_committed.", "unfold lifted_committed in Hlifted_committed.", "destruct Hlifted_committed as [h' [e' [H1 [H2 [H3 [H4 H5]]]]]].", "exists h', e'.", "repeat split; auto.", "-"], "tactic": "-", "exn": "Wrong bullet -: Current bullet - is not finished.", "type": "unfinished_bullet", "handled": true}]}, "chat": [{"role": "user", "content": "I will give you a Coq proof state, including both hypotheses and a specific goal and your need to prove it. Your response should be a singular code block of Coq proof, without any additional explanation or commentary. Follow to these guidelines:\nIntroduce variables using unique names to avoid any conflicts.\nKeep each command distinct and separated, avoid concatenations like ';' or '[cmd|cmd]'.\nOrganize your proof with bullets like '-', '+', and '*' instead of braces ({, }). Shift to their double symbols like '--' and '++', when necessary.\nEffectively use given premises, follow the syntax and structure demonstrated in the examples provided.\n\nExample 1:\n\nHypotheses:\nn, m: nat\nIHn: m + n = n + m\n\nGoal:\nm + S n = S n + m\n\nProof:\n```simpl. rewrite <- IHn. auto.```\n\nExample 2:\nHypotheses:\n\nGoal:\nforall n m : nat, m + n = n + m\n\n```intros n m. induction n.\n- simpl. auto.\n- simpl. rewrite <- IHn. auto.```\n\nSovle This Proof State:\n\nHypotheses:\norig_base_params: BaseParams\none_node_params: OneNodeParams orig_base_params\nraft_params: RaftParams orig_base_params\nrri: raft_refinement_interface\nsi: sorted_interface\nlmi: log_matching_interface\nsmspi: state_machine_safety'interface\nrlmli: refined_log_matching_lemmas_interface\npllsi: prevLog_leader_sublog_interface\nctgt0: current_term_gt_zero_interface\nlalcii: lastApplied_le_commitIndex_interface\nmiaei: match_index_all_entries_interface\nlhlli: leaders_have_leaderLogs_interface\nlci: leader_completeness_interface\nlsi: leader_sublog_interface\ntaifoli: terms_and_indices_from_one_log_interface\nglci: ghost_log_correct_interface\nlphogli: log_properties_hold_on_ghost_logs_interface\nglemi: ghost_log_entries_match_interface\ntci: transitive_commit_interface\ntsi: term_sanity_interface\nlhllsi: leaders_have_leaderLogs_strong_interface\nollpti: one_leaderLog_per_term_interface\nrmri: raft_msg_refinement_interface\n\nGoal:\nforall (net net' : ghost_log_network) (h : name) (e : entry) (t : term), (forall h' : Net.name, nwState net' h' = update name_eq_dec (nwState net) h (fst (nwState net h), reboot (snd (nwState net h))) h') -> lifted_committed net e t -> lifted_committed net' e t\n\nPremises:\nterm = nat : Set\nRecord ghost_log_entries_match_interface (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params) : Prop := Build_ghost_log_entries_match_interface { ghost_log_entries_match_invariant : forall net : network, msg_refined_raft_intermediate_reachable net -> ghost_log_entries_match_host net } Arguments ghost_log_entries_match_interface {orig_base_params one_node_params raft_params} Arguments Build_ghost_log_entries_match_interface {orig_base_params one_node_params raft_params} _%function_scope\nRecord current_term_gt_zero_interface (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params) : Prop := Build_current_term_gt_zero_interface { current_term_gt_zero_invariant : forall net : network, raft_intermediate_reachable net -> current_term_gt_zero net } Arguments current_term_gt_zero_interface {orig_base_params one_node_params raft_params} Arguments Build_current_term_gt_zero_interface {orig_base_params one_node_params raft_params} _%function_scope\nsnd = fun (A B : Type) (p : A * B) => let (_, y) := p in y : forall A B : Type, A * B -> B Arguments snd {A B}%type_scope\nupdate : (forall x y : ?A, {x = y} + {x <> y}) -> (?A -> ?B) -> ?A -> ?B -> ?A -> ?B where ?A : [orig_base_params : BaseParams one_node_params : OneNodeParams orig_base_params raft_params : RaftParams orig_base_params rri : raft_refinement_interface si : sorted_interface lmi : log_matching_interface smspi : state_machine_safety'interface rlmli : refined_log_matching_lemmas_interface pllsi : prevLog_leader_sublog_interface ctgt0 : current_term_gt_zero_interface lalcii\nRecord raft_msg_refinement_interface (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params) : Prop := Build_raft_msg_refinement_interface { msg_refined_raft_net_invariant : forall (P : network -> Prop) (net : network), msg_refined_raft_net_invariant_init P -> msg_refined_raft_net_invariant_client_request P -> msg_refined_raft_net_invariant_timeout P -> msg_refined_raft_net_invariant_append_entries P -> msg_refined_raft_net_invariant_append_entries_reply P\nRecord leader_sublog_interface (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params) : Prop := Build_leader_sublog_interface { leader_sublog_invariant_invariant : forall net : network, raft_intermediate_reachable net -> leader_sublog_invariant net } Arguments leader_sublog_interface {orig_base_params one_node_params raft_params} Arguments Build_leader_sublog_interface {orig_base_params one_node_params raft_params} _%function_scope\nRecord sorted_interface (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params) : Prop := Build_sorted_interface { handleAppendEntries_logs_sorted : forall (net : network) (p : packet) (t : term) (n : name) (pli : logIndex) (plt : term) (es : list entry) (ci : logIndex) (st' : raft_data) (m : msg), raft_intermediate_reachable net -> logs_sorted net -> handleAppendEntries (pDst p) (nwState net (\nghost_log_network = network : Type\nRecord lastApplied_le_commitIndex_interface (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params) : Prop := Build_lastApplied_le_commitIndex_interface { lastApplied_le_commitIndex_invariant : forall net : network, raft_intermediate_reachable net -> lastApplied_le_commitIndex net } Arguments lastApplied_le_commitIndex_interface {orig_base_params one_node_params raft_params} Arguments Build_lastApplied_le_commitIndex_interface {orig_base_params one_node_params raft_params} _%function_scope\nRecord prevLog_leader_sublog_interface (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params) : Prop := Build_prevLog_leader_sublog_interface { prevLog_leader_sublog_invariant : forall net : network, raft_intermediate_reachable net -> prevLog_leader_sublog net } Arguments prevLog_leader_sublog_interface {orig_base_params one_node_params raft_params} Arguments Build_prevLog_leader_sublog_interface {orig_base_params one_node_params raft_params} _%function_scope\nRecord OneNodeParams (P : BaseParams) : Type := Build_OneNodeParams { init : data; handler : input -> data -> output * data } Arguments Build_OneNodeParams _ _ _%function_scope\nlifted_committed = fun (net : ghost_log_network) (e : entry) (t : term) => exists (h : Net.name) (e' : entry), eTerm e' <= t /\\ lifted_directly_committed net e' /\\ eIndex e <= eIndex e' /\\ In e (log (snd (nwState net h))) /\\ In e' (log (snd (nwState net h))) : ghost_log_network -> entry -> term -> Prop\nRecord BaseParams : Type := Build_BaseParams { data : Type; input : Type; output : Type } Arguments Build_BaseParams (_ _ _)%type_scope\nRecord leaders_have_leaderLogs_interface (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params) : Prop := Build_leaders_have_leaderLogs_interface { leaders_have_leaderLogs_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaders_have_leaderLogs net } Arguments leaders_have_leaderLogs_interface {orig_base_params one_node_params raft_params} Arguments Build_leaders_have_leaderLogs_interface {orig_base_params one_node_params raft_params} _%function_scope\nRecord RaftParams (orig_base_params : BaseParams) : Type := Build_RaftParams { N : nat; input_eq_dec : forall x y : input, {x = y} + {x <> y}; output_eq_dec : forall x y : output, {x = y} + {x <> y}; clientId : Type; clientId_eq_dec : forall x y : clientId, {x = y} + {x <> y} } Arguments Build_RaftParams _ _%nat_scope (_ _)%function_scope [clientId]%type_scope _%function_scope\nRecord one_leaderLog_per_term_interface (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params) : Prop := Build_one_leaderLog_per_term_interface { one_leaderLog_per_term_invariant : forall net : network, refined_raft_intermediate_reachable net -> one_leaderLog_per_term net; one_leaderLog_per_term_log_invariant : forall net : network, refined_raft_intermediate_reachable net -> one_leaderLog_per_term_log net; one_leaderLog_per_term_host_invariant : forall net : network, refined_raft_intermediate\nRecord log_properties_hold_on_ghost_logs_interface (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params) : Prop := Build_log_properties_hold_on_ghost_logs_interface { log_properties_hold_on_ghost_logs_invariant : forall net : network, msg_refined_raft_intermediate_reachable net -> log_properties_hold_on_ghost_logs net } Arguments log_properties_hold_on_ghost_logs_interface {orig_base_params one_node_params raft_params} Arguments Build_log_properties_hold_on_ghost_logs_interface {orig_base_params one_node_params raft_params} _%function_scope\nnwState = fun (P : BaseParams) (params : MultiParams P) (n : network) => let (_, nwState) := n in nwState : forall (P : BaseParams) (params : MultiParams P), network -> Net.name -> data Arguments nwState {P params}\nRecord raft_refinement_interface (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params) : Prop := Build_raft_refinement_interface { refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft_net_invariant_request_vote P -> refined_raft\nRecord match_index_all_entries_interface (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params) : Prop := Build_match_index_all_entries_interface { match_index_all_entries_invariant : forall net : network, refined_raft_intermediate_reachable net -> match_index_all_entries net } Arguments match_index_all_entries_interface {orig_base_params one_node_params raft_params} Arguments Build_match_index_all_entries_interface {orig_base_params one_node_params raft_params} _%function_scope\nRecord entry (orig_base_params : BaseParams) (raft_params : RaftParams orig_base_params) : Type := mkEntry { eAt : name; eClient : clientId; eId : nat; eIndex : logIndex; eTerm : term; eInput : input } Arguments entry {orig_base_params raft_params} Arguments mkEntry {orig_base_params raft_params} _ _ _%nat_scope\nRecord ghost_log_correct_interface (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params) : Prop := Build_ghost_log_correct_interface { ghost_log_correct_invariant : forall net : network, msg_refined_raft_intermediate_reachable net -> ghost_log_correct net } Arguments ghost_log_correct_interface {orig_base_params one_node_params raft_params} Arguments Build_ghost_log_correct_interface {orig_base_params one_node_params raft_params} _%function_scope\nRecord log_matching_interface (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params) : Prop := Build_log_matching_interface { log_matching_invariant : forall net : network, raft_intermediate_reachable net -> log_matching net } Arguments log_matching_interface {orig_base_params one_node_params raft_params} Arguments Build_log_matching_interface {orig_base_params one_node_params raft_params} _%function_scope\nRecord transitive_commit_interface (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params) : Prop := Build_transitive_commit_interface { transitive_commit_invariant : forall net : network, refined_raft_intermediate_reachable net -> transitive_commit net } Arguments transitive_commit_interface {orig_base_params one_node_params raft_params} Arguments Build_transitive_commit_interface {orig_base_params one_node_params raft_params} _%function_scope\nname = fun (orig_base_params : BaseParams) (raft_params : RaftParams orig_base_params) => fin N : forall orig_base_params : BaseParams, RaftParams orig_base_params -> Type Arguments name {orig_base_params raft_params}\nRecord leader_completeness_interface (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params) : Prop := Build_leader_completeness_interface { leader_completeness_invariant : forall net : network, refined_raft_intermediate_reachable net -> leader_completeness net } Arguments leader_completeness_interface {orig_base_params one_node_params raft_params} Arguments Build_leader_completeness_interface {orig_base_params one_node_params raft_params} _%function_scope\nRecord term_sanity_interface (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params) : Prop := Build_term_sanity_interface { no_entries_past_current_term_invariant : forall net : network, raft_intermediate_reachable net -> no_entries_past_current_term net } Arguments term_sanity_interface {orig_base_params one_node_params raft_params} Arguments Build_term_sanity_interface {orig_base_params one_node_params raft_params} _%function_scope\nRecord state_machine_safety'interface (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params) : Prop := Build_state_machine_safety'interface { state_machine_safety'_invariant : forall net : network, refined_raft_intermediate_reachable net -> state_machine_safety' net } Arguments state_machine_safety'interface {orig_base_params one_node_params raft_params} Arguments Build_state_machine_safety'interface {orig_base_params one_node_params raft_params} _%function_scope\nRecord terms_and_indices_from_one_log_interface (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params) : Prop := Build_terms_and_indices_from_one_log_interface { terms_and_indices_from_one_log_invariant : forall net : network, raft_intermediate_reachable net -> terms_and_indices_from_one_log net; terms_and_indices_from_one_log_nw_invariant : forall net : network, raft_intermediate_reachable net -> terms_and_indices_from_one_log_nw net } Arguments terms_and_indices_from_one_log_interface {orig_base_params one_node_params\nfst = fun (A B : Type) (p : A * B) => let (x, _) := p in x : forall A B : Type, A * B -> A Arguments fst {A B}%type_scope\nRecord leaders_have_leaderLogs_strong_interface (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params) : Prop := Build_leaders_have_leaderLogs_strong_interface { leaders_have_leaderLogs_strong_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaders_have_leaderLogs_strong net } Arguments leaders_have_leaderLogs_strong_interface {orig_base_params one_node_params raft_params} Arguments Build_leaders_have_leaderLogs_strong_interface {orig_base_params one_node_params raft_params} _%function_scope\nreboot = fun (orig_base_params : BaseParams) (raft_params : RaftParams orig_base_params) (state : RaftState.raft_data term name entry logIndex serverType data clientId output) => mkRaft_data (currentTerm state) (votedFor state) (leaderId state) (log state) (commitIndex state) (lastApplied state) (stateMachine state) [] [] false [] Follower (clientCache state) (electoralVictories state) : forall (orig_base_params : BaseParams) (raft_params : RaftParams orig_base_params), RaftState.raft_data\nRecord refined_log_matching_lemmas_interface (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params) : Prop := Build_refined_log_matching_lemmas_interface { entries_contiguous_nw_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_contiguous_nw net; entries_gt_0_nw_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_gt_0_nw net; entries_sorted_nw_invariant : forall net : network, refined_raft_inter\nname_eq_dec : forall x y : name, {x = y} + {x <> y}\ndoGenericServer_preserves_committed : forall (net net' : ghost_log_network) (h : name) (out : list raft_output) (st' : raft_data) (ms : list (name * msg)) (e : entry) (t : term), doGenericServer h (snd (nwState net h)) = (out, st', ms) -> (forall h' : Net.name, nwState net' h' = update name_eq_dec (nwState net) h (fst (nwState net h), st') h') -> lifted_committed net e t -> lifted_committed net' e t\nhandleTimeout_preserves_committed : forall (h : name) (net net' : ghost_log_network) (out : list raft_output) (d' : raft_data) (l : list (name * msg)) (e : entry) (t : term), handleTimeout h (snd (nwState net h)) = (out, d', l) -> (forall h' : Net.name, nwState net' h' = update name_eq_dec (nwState net) h (update_elections_data_timeout h (nwState net h), d') h') -> lifted_committed net e t -> lifted_committed net' e t\nhandleRequestVoteReply_preserves_committed : forall (net net' : ghost_log_network) (h src : name) (t : nat) (v : bool) (st' : raft_data) (e : entry) (t' : term), handleRequestVoteReply h (snd (nwState net h)) src t v = st' -> (forall h' : Net.name, nwState net' h' = update name_eq_dec (nwState net) h (update_elections_data_requestVoteReply h src t v (nwState net h), st') h') -> lifted_committed net e t' -> lifted_committed net' e t'\nhandleAppendEntriesReply_preserves_commit : forall (net net' : ghost_log_network) (h src : name) (t : nat) (es : list entry) (b : bool) (st' : raft_data) (l : list (name * msg)) (e : entry) (t' : term), handleAppendEntriesReply h (snd (nwState net h)) src t es b = (st', l) -> (forall h' : Net.name, nwState net' h' = update name_eq_dec (nwState net) h (fst (nwState net h), st') h') -> lifted_committed net e t' -> lifted_committed net' e t'\nhandleRequestVote_preserves_committed : forall (net net' : ghost_log_network) (h : name) (t : nat) (c : fin N) (li lt : nat) (st' : raft_data) (ms : msg) (e : entry) (t' : term), handleRequestVote h (snd (nwState net h)) t c li lt = (st', ms) -> (forall h' : Net.name, nwState net' h' = update name_eq_dec (nwState net) h (update_elections_data_requestVote h c t c li lt (nwState net h), st') h') -> lifted_committed net e t' -> lifted_committed net' e t'\nhCR_preserves_committed : forall (net net' : ghost_log_network) (h : name) (client : clientId) (id : nat) (c : input) (out : list raft_output) (d : raft_data) (l : list (name * msg)) (e : entry) (t : term), handleClientRequest h (snd (nwState net h)) client id c = (out, d, l) -> (forall h' : Net.name, nwState net' h' = update name_eq_dec (nwState net) h (update_elections_data_client_request h (nwState net h) client id c, d) h') -> lifted_committed net e t -> lifted_committed net' e t\ndoLeader_preserves_committed : forall (net net' : ghost_log_network) (d : raft_data) (h : name) (os : list raft_output) (d' : raft_data) (ms : list (name * msg)) (gd : ghost_data) (e : entry) (t : term), doLeader d h = (os, d', ms) -> nwState net h = (gd, d) -> (forall h' : Net.name, nwState net' h' = update name_eq_dec (nwState net) h (gd, d') h') -> lifted_committed net e t -> lifted_committed net' e t\nlifted_committed_log_allEntries_preserved : forall (net : ghost_log_network) (net' : network) (e : entry) (t : term), lifted_committed net e t -> (forall (h : Net.name) (e' : entry), In e' (log (snd (nwState net h))) -> In e' (log (snd (nwState net' h)))) -> (forall (h : Net.name) (e' : entry) (t' : term), In (t', e') (allEntries (fst (nwState net h))) -> In (t', e') (allEntries (fst (nwState net' h)))) -> lifted_committed net' e t\nhandleAppendEntries_preserves_commit : forall (net net' : network) (h : name) (p : packet) (t : term) (n : name) (pli : logIndex) (plt : term) (es : list entry) (ci : logIndex) (d : raft_data) (m : msg) (e : entry) (t' : term), msg_refined_raft_intermediate_reachable net -> In p (nwPackets net) -> snd (pBody p) = AppendEntries t n pli plt es ci -> handleAppendEntries h (snd (nwState net h)) t n pli plt es ci = (d, m) ->...-> lifted_committed net' e t'\ncommitted_log_allEntries_preserved : forall (net net' : network) (e : entry) (t : term), committed net e t -> (forall (h : Net.name) (e' : entry), In e' (log (snd (nwState net h))) -> In e' (log (snd (nwState net' h)))) -> (forall (h : Net.name) (e' : entry) (t' : term), In (t', e') (allEntries (fst (nwState net h))) -> In (t', e') (allEntries (fst (nwState net' h)))) -> committed net' e t\nmsg_refined_raft_net_invariant_reboot' = fun (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params) (P : network -> Prop) => forall (net net' : network) (gd : ghost_data) (d : RaftState.raft_data term name entry logIndex serverType data clientId output) (h : Net.name) (d' : raft_data), reboot d = d' -> P net -> msg_refined_raft_intermediate_reachable net -> msg_refined_raft_intermediate_reachable net' ->...-> Prop Arguments msg_refined_raft_net_invariant_reboot' {orig_base_params one_node_params raft_params} _%function_scope\nrefined_raft_net_invariant_reboot' = fun (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params) (P : network -> Prop) => forall (net net' : network) (gd : ghost_data) (d : RaftState.raft_data term name entry logIndex serverType data clientId output) (h : Net.name) (d' : raft_data), reboot d = d' -> P net -> refined_raft_intermediate_reachable net -> refined_raft_intermediate_reachable net' ->...-> Prop Arguments refined_raft_net_invariant_reboot' {orig_base_params one_node_params raft_params} _%function_scope\nmsg_refined_raft_net_invariant_reboot = fun (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params) (P : network -> Prop) => forall (net net' : network) (gd : ghost_data) (d : RaftState.raft_data term name entry logIndex serverType data clientId output) (h : Net.name) (d' : raft_data), reboot d = d' -> P net -> msg_refined_raft_intermediate_reachable net -> nwState net h = (gd, d) ->...-> Prop Arguments msg_refined_raft_net_invariant_reboot {orig_base_params one_node_params raft_params} _%function_scope\nrefined_raft_net_invariant_reboot = fun (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params) (P : network -> Prop) => forall (net net' : network) (gd : ghost_data) (d : RaftState.raft_data term name entry logIndex serverType data clientId output) (h : Net.name) (d' : raft_data), reboot d = d' -> P net -> refined_raft_intermediate_reachable net -> nwState net h = (gd, d) ->...-> Prop Arguments refined_raft_net_invariant_reboot {orig_base_params one_node_params raft_params} _%function_scope\nlifted_advanceCommitIndex_lifted_committed : forall (h : Net.name) (net : network), msg_refined_raft_intermediate_reachable net -> type (snd (nwState net h)) = Leader -> (forall e : entry, In e (log (snd (nwState net h))) -> eIndex e <= commitIndex (snd (nwState net h)) -> lifted_committed net e (currentTerm (snd (nwState net h)))) -> forall e : entry, In e (log (snd (nwState net h))) -> eIndex e <= commitIndex (advanceCommitIndex (snd (nwState net h)) h) -> lifted_committed net e (currentTerm (snd (nwState net h)))\ncommit_invariant_host = fun net : ghost_log_network => forall (h : Net.name) (e : entry), In e (log (snd (nwState net h))) -> eIndex e <= commitIndex (snd (nwState net h)) -> lifted_committed net e (currentTerm (snd (nwState net h))) : ghost_log_network -> Prop\nlifted_committed_committed : forall (net : ghost_log_network) (e : entry) (t : term), lifted_committed net e t -> committed (mgv_deghost net) e t\ntransitive_commit = fun (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params) (net : network) => forall (h : Net.name) (e e' : entry) (t : term), In e (log (snd (nwState net h))) -> In e' (log (snd (nwState net h))) -> eIndex e <= eIndex e' -> committed net e' t -> committed net e t : forall (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params), network -> Prop Arguments transitive_commit {orig_base_params one_node_params raft_params}\nmatch_index_all_entries = fun (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params) (net : network) => forall (e : entry) (leader : Net.name) (h : name), type (snd (nwState net leader)) = Leader -> eIndex e <= assoc_default name_eq_dec (matchIndex (snd (nwState net leader))) h 0 -> In e (log (snd (nwState net leader))) -> eTerm e = currentTerm (snd (nwState net leader)) ->...-> Prop Arguments match_index_all_entries {orig_base_params one_node_params raft_params}\nleaders_have_leaderLogs_strong = fun (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params) (net : network) => forall h : Net.name, type (snd (nwState net h)) = Leader ->...-> Prop Arguments leaders_have_leaderLogs_strong {orig_base_params one_node_params raft_params}\ncommitted_lifted_committed : forall (net : network) (e : entry) (t : term), committed (mgv_deghost net) e t -> lifted_committed net e t\ncommit_invariant_do_leader : forall (net : ghost_log_network) (st' : name -> data) (ps' : list packet) (gd : ghost_data) (d : raft_data) (h : name) (os : list raft_output) (d' : raft_data) (ms : list (name * msg)), doLeader d h = (os, d', ms) -> commit_invariant net -> msg_refined_raft_intermediate_reachable net -> lifted_maxIndex_sanity net -> nwState net h = (gd, d) ->...-> commit_invariant {| nwPackets := ps'; nwState := st' |}\ncommitted = fun (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params) (net : network) (e : entry) (t : term) => exists (h : Net.name) (e' : entry), eTerm e' <= t /\\ directly_committed net e' /\\ eIndex e <= eIndex e' /\\ In e (log (snd (nwState net h))) /\\ In e' (log (snd (nwState net h))) : forall (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params), network -> entry -> term -> Prop Arguments committed {...\nInductive raft_intermediate_reachable (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params) : network -> Prop := RIR_init : raft_intermediate_reachable step_async_init | RIR_step_failure : forall (failed : list Net.name) (net : network) (failed' : list Net.name) (net' : network) (out : list (Net.name * (input + list output))), raft_intermediate_reachable net -> step_failure (failed, net) (failed', net') out -> raft_intermediate_reachable net' | RIR_handleInput : forall (net : network) (h : name) (inp : raft_input) (out...\nInductive refined_raft_intermediate_reachable (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params) : network -> Prop := RRIR_init : refined_raft_intermediate_reachable step_async_init | RRIR_step_failure : forall (failed : list Net.name) (net : network) (failed' : list Net.name) (net' : network) (out : list (Net.name * (input + list output))), refined_raft_intermediate_reachable net -> step_failure (failed, net) (failed', net') out -> refined_raft_intermediate_reachable net' | RRIR_handleInput : forall (net : network) (h : name)...\nInductive msg_refined_raft_intermediate_reachable (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params) : network -> Prop := MRRIR_init : msg_refined_raft_intermediate_reachable step_async_init | MRRIR_step_failure : forall (failed : list Net.name) (net : network) (failed' : list Net.name) (net' : network) (out : list (Net.name * (input + list output))), msg_refined_raft_intermediate_reachable net -> step_failure (failed, net) (failed', net') out -> msg_refined_raft_intermediate_reachable net' | MRRIR_handleInput :...\nleaders_have_leaderLogs = fun (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params) (net : network) => forall h : Net.name, type (snd (nwState net h)) = Leader -> exists ll : list entry, In (currentTerm (snd (nwState net h)), ll) (leaderLogs (fst (nwState net h))) : forall (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params), network -> Prop Arguments leaders_have_leaderLogs {orig_base_params one_node_params raft_params}\nlifted_committed_ext' : forall (ps ps' : list packet) (st st' : Net.name -> data) (t : term) (e : entry), (forall h : Net.name, st' h = st h) -> lifted_committed {| nwPackets := ps; nwState := st |} e t -> lifted_committed {| nwPackets := ps'; nwState := st' |} e t\ncommit_invariant_nw = fun net : ghost_log_network => forall (p : packet) (t : term) (lid : name) (pli : logIndex) (plt : term) (es : list entry) (lci : logIndex) (e : entry), In p (nwPackets net) -> snd (pBody p) = AppendEntries t lid pli plt es lci -> In e (fst (pBody p)) -> eIndex e <= lci -> lifted_committed net e t : ghost_log_network -> Prop\nlifted_directly_committed = fun (net : ghost_log_network) (e : entry) => exists quorum : list Net.name, NoDup quorum /\\ length quorum > div2 (length nodes) /\\ (forall h : Net.name, In h quorum -> In (eTerm e, e) (allEntries (fst (nwState net h)))) : ghost_log_network -> entry -> Prop\nlifted_maxIndex_sanity = fun net : ghost_log_network => (forall h : Net.name, lastApplied (snd (nwState net h)) <= maxIndex (log (snd (nwState net h)))) /\\ (forall h : Net.name, commitIndex (snd (nwState net h)) <= maxIndex (log (snd (nwState net h)))) : ghost_log_network -> Prop\nlifted_maxIndex_sanity_append_entries : forall (xs : list ghost_log_packet) (p : ghost_log_packet) (ys : list ghost_log_packet) (net : ghost_log_network) (st' : name -> data) (ps' : list ghost_log_packet) (gd : electionsData) (d : raft_data) (m : msg) (t : term) (n : name) (pli : logIndex) (plt : term) (es : list entry) (ci : logIndex), handleAppendEntries (pDst p) (snd (nwState net (pDst p))) t n pli plt es ci = (d, m) -> gd = update_elections_data_appendEntries (pDst p) (...\nghost_log_entries_match_host = fun (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params) (net : network) => forall (h : Net.name) (p : packet), In p (nwPackets net) -> entries_match (log (snd (nwState net h))) (fst (pBody p)) : forall (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params), network -> Prop Arguments ghost_log_entries_match_host {orig_base_params one_node_params raft_params}\nmsg_lifted_sorted_host : forall (net : network) (h : Net.name), msg_refined_raft_intermediate_reachable net -> sorted (log (snd (nwState net h)))\ncurrent_term_gt_zero = fun (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params) (net : network) => forall h : Net.name, type (nwState net h) <> Follower -> 1 <= currentTerm (nwState net h) : forall (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params), network -> Prop Arguments current_term_gt_zero {orig_base_params one_node_params raft_params}\nlastApplied_le_commitIndex = fun (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params) (net : network) => forall h : Net.name, lastApplied (nwState net h) <= commitIndex (nwState net h) : forall (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params), network -> Prop Arguments lastApplied_le_commitIndex {orig_base_params one_node_params raft_params}\nprevLog_leader_sublog = fun (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params) (net : network) => forall (leader : Net.name) (p : packet) (t : term) (leaderId : name) (prevLogIndex : logIndex) (prevLogTerm : term) (entries : list entry) (leaderCommit : logIndex), type (nwState net leader) = Leader -> In p (nwPackets net) -> pBody p = AppendEntries t leaderId prevLogIndex prevLogTerm entries leaderCommit ->...-> Prop Arguments prevLog_leader_sublog {orig_base_params one_node_params raft_params}\nterms_and_indices_from_one_log = fun (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params) (net : network) => forall h : Net.name, terms_and_indices_from_one (log (nwState net h)) : forall (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params), network -> Prop Arguments terms_and_indices_from_one_log {orig_base_params one_node_params raft_params}\nupdate_elections_data_requestVote_allEntries : forall (h h' : name) (t lli llt : nat) (st : electionsData * RaftState.raft_data term name entry logIndex serverType data clientId output), allEntries (update_elections_data_requestVote h h' t h' lli llt st) = allEntries (fst st)\nupdate_elections_data_requestVoteReply_allEntries : forall (h h' : name) (t : nat) (st : electionsData * RaftState.raft_data term name entry logIndex serverType data clientId output) (r : bool), allEntries (update_elections_data_requestVoteReply h h' t r st) = allEntries (fst st)"}, {"role": "assistant", "content": "```coq\nintros net net' h e t Hupdate Hlifted_committed.\nunfold lifted_committed in Hlifted_committed.\ndestruct Hlifted_committed as [h' [e' [H1 [H2 [H3 [H4 H5]]]]]].\nexists h', e'. repeat split; auto.\n- intros h''. rewrite Hupdate. destruct (name_eq_dec h'' h); auto.\n- auto.\n```"}], "original": "intros net net' h e t Hupdate Hlifted_committed. unfold lifted_committed in Hlifted_committed. destruct Hlifted_committed as [h' [e' [H1 [H2 [H3 [H4 H5]]]]]]. exists h', e'. repeat split; auto. - intros h''. rewrite Hupdate. destruct (name_eq_dec h'' h); auto. - auto.", "succ": false}]