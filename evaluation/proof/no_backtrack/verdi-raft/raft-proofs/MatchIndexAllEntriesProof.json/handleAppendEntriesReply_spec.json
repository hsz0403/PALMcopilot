[{"history": {"proof": "intros n st src t es b st' l H. destruct H as [H1 H2]. right. left. shelve.", "repairs": ["", "", "", "", ""], "exceptions": [{"ctx": ["intros n st src t es b st' l H.", "destruct H as [H1 H2].", "right.", "left."], "tactic": "right.", "exn": "Not an inductive goal with 2 constructors.", "type": "not_inductive_goal", "handled": false}, {"ctx": ["intros n st src t es b st' l H.", "destruct H as [H1 H2].", "right.", "left."], "tactic": "right.", "exn": "Not an inductive goal with 2 constructors.", "type": "not_inductive_goal", "handled": false}, {"ctx": ["intros n st src t es b st' l H.", "destruct H as [H1 H2].", "right.", "left."], "tactic": "left.", "exn": "Not an inductive goal with 2 constructors.", "type": "not_inductive_goal", "handled": false}, {"ctx": ["intros n st src t es b st' l H.", "destruct H as [H1 H2].", "right.", "left."], "tactic": "reflexivity.", "exn": "Tactic failure: The relation and is not a declared reflexive relation. Maybe you need to require the Coq.Classes.RelationClasses library.", "type": "not_reflexive", "handled": false}]}, "chat": [{"role": "user", "content": "I will give you a Coq proof state, including both hypotheses and a specific goal and your need to prove it. Your response should be a singular code block of Coq proof, without any additional explanation or commentary. Follow to these guidelines:\nIntroduce variables using unique names to avoid any conflicts.\nKeep each command distinct and separated, avoid concatenations like ';' or '[cmd|cmd]'.\nOrganize your proof with bullets like '-', '+', and '*' instead of braces ({, }). Shift to their double symbols like '--' and '++', when necessary.\nEffectively use given premises, follow the syntax and structure demonstrated in the examples provided.\n\nExample 1:\n\nHypotheses:\nn, m: nat\nIHn: m + n = n + m\n\nGoal:\nm + S n = S n + m\n\nProof:\n```simpl. rewrite <- IHn. auto.```\n\nExample 2:\nHypotheses:\n\nGoal:\nforall n m : nat, m + n = n + m\n\n```intros n m. induction n.\n- simpl. auto.\n- simpl. rewrite <- IHn. auto.```\n\nSovle This Proof State:\n\nHypotheses:\norig_base_params: BaseParams\none_node_params: OneNodeParams orig_base_params\nraft_params: RaftParams orig_base_params\nrri: raft_refinement_interface\nnaetli: no_append_entries_to_leader_interface\nnaetsi: no_append_entries_to_self_interface\ntaifoli: terms_and_indices_from_one_log_interface\nrlmli: refined_log_matching_lemmas_interface\nlaei: log_all_entries_interface\naelli: append_entries_leaderLogs_interface\nlsi: leader_sublog_interface\nlhllsi: leaders_have_leaderLogs_strong_interface\nollpti: one_leaderLog_per_term_interface\nmili: match_index_leader_interface\nmatchisi: match_index_sanity_interface\naersi: append_entries_reply_sublog_interface\ncei: candidate_entries_interface\nvci: votes_correct_interface\ncci: cronies_correct_interface\n\nGoal:\nforall (n : name) (st : RaftState.raft_data term name entry logIndex serverType data clientId output) (src : name) (t : nat) (es : list entry) (b : bool) (st' : raft_data) (l : list (name * msg)), handleAppendEntriesReply n st src t es b = (st', l) -> type st' = type st /\\ matchIndex st' = matchIndex st /\\ currentTerm st' = currentTerm st \\/ currentTerm st' = t /\\ type st' = Follower \\/ b = true /\\ t = currentTerm st' /\\ type st' = type st /\\ matchIndex st' = assoc_set name_eq_dec (matchIndex st) src (Nat.max (assoc_default name_eq_dec (matchIndex st) src 0) (maxIndex es)) /\\ currentTerm st' = currentTerm st\n\nPremises:\nInductive list (A : Type) : Type := nil : list A | cons : A -> list A -> list A Arguments list _%type_scope Arguments nil {A}%type_scope Arguments cons {A}%type_scope a l%list_scope : rename\nRecord append_entries_leaderLogs_interface (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params) : Prop := Build_append_entries_leaderLogs_interface { append_entries_leaderLogs_invariant : forall net : network, refined_raft_intermediate_reachable net -> append_entries_leaderLogs net } Arguments append_entries_leaderLogs_interface {orig_base_params one_node_params raft_params} Arguments Build_append_entries_leaderLogs_interface {orig_base_params one_node_params raft_params} _%function_scope\nterm = nat : Set\nRecord candidate_entries_interface (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params) : Prop := Build_candidate_entries_interface { candidate_entries_invariant : forall net : network, refined_raft_intermediate_reachable net -> CandidateEntries net } Arguments candidate_entries_interface {orig_base_params one_node_params raft_params} Arguments Build_candidate_entries_interface {orig_base_params one_node_params raft_params} _%function_scope\nNotation matchIndex := (RaftState.matchIndex term name entry logIndex serverType data clientId output)\noutput = fun BaseParams0 : BaseParams => let (_, _, output) := BaseParams0 in output : BaseParams -> Type Arguments output {BaseParams}\nInductive msg (orig_base_params : BaseParams) (raft_params : RaftParams orig_base_params) : Type := RequestVote : term -> name -> logIndex -> term -> msg | RequestVoteReply : term -> bool -> msg | AppendEntries : term -> name -> logIndex -> term -> list entry -> logIndex -> msg | AppendEntriesReply : term -> list entry -> bool -> msg Arguments msg {orig_base_params raft_params} Arguments RequestVote {orig_base_params raft_params} Arguments RequestVoteReply {orig_base_params raft_params} _ _%bool_scope Arguments Append\nRecord leader_sublog_interface (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params) : Prop := Build_leader_sublog_interface { leader_sublog_invariant_invariant : forall net : network, raft_intermediate_reachable net -> leader_sublog_invariant net } Arguments leader_sublog_interface {orig_base_params one_node_params raft_params} Arguments Build_leader_sublog_interface {orig_base_params one_node_params raft_params} _%function_scope\nassoc_default : forall K V : Type, (forall k k' : K, {k = k'} + {k <> k'}) -> list (K * V) -> K -> V -> V\nassoc_set : forall K V : Type, (forall k k' : K, {k = k'} + {k <> k'}) -> list (K * V) -> K -> V -> list (K * V)\nRecord match_index_sanity_interface (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params) : Prop := Build_match_index_sanity_interface { match_index_sanity_invariant : forall net : network, raft_intermediate_reachable net -> match_index_sanity net } Arguments match_index_sanity_interface {orig_base_params one_node_params raft_params} Arguments Build_match_index_sanity_interface {orig_base_params one_node_params raft_params} _%function_scope\nRecord OneNodeParams (P : BaseParams) : Type := Build_OneNodeParams { init : data; handler : input -> data -> output * data } Arguments Build_OneNodeParams _ _ _%function_scope\nNotation currentTerm := (RaftState.currentTerm term name entry logIndex serverType data clientId output)\ndata = fun BaseParams0 : BaseParams => let (data, _, _) := BaseParams0 in data : BaseParams -> Type Arguments data {BaseParams}\nRecord BaseParams : Type := Build_BaseParams { data : Type; input : Type; output : Type } Arguments Build_BaseParams (_ _ _)%type_scope\nclientId = fun (orig_base_params : BaseParams) (RaftParams0 : RaftParams orig_base_params) => let (_, _, _, clientId, _) := RaftParams0 in clientId : forall orig_base_params : BaseParams, RaftParams orig_base_params -> Type Arguments clientId {orig_base_params RaftParams}\nRecord RaftParams (orig_base_params : BaseParams) : Type := Build_RaftParams { N : nat; input_eq_dec : forall x y : input, {x = y} + {x <> y}; output_eq_dec : forall x y : output, {x = y} + {x <> y}; clientId : Type; clientId_eq_dec : forall x y : clientId, {x = y} + {x <> y} } Arguments Build_RaftParams _ _%nat_scope (_ _)%function_scope [clientId]%type_scope _%function_scope\nRecord one_leaderLog_per_term_interface (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params) : Prop := Build_one_leaderLog_per_term_interface { one_leaderLog_per_term_invariant : forall net : network, refined_raft_intermediate_reachable net -> one_leaderLog_per_term net; one_leaderLog_per_term_log_invariant : forall net : network, refined_raft_intermediate_reachable net -> one_leaderLog_per_term_log net; one_leaderLog_per_term_host_invariant :\nRecord match_index_leader_interface (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params) : Prop := Build_match_index_leader_interface { match_index_leader_invariant : forall net : network, raft_intermediate_reachable net -> match_index_leader net } Arguments match_index_leader_interface {orig_base_params one_node_params raft_params} Arguments Build_match_index_leader_interface {orig_base_params one_node_params raft_params} _%function_scope\nRecord votes_correct_interface (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params) : Prop := Build_votes_correct_interface { votes_correct_invariant : forall net : network, refined_raft_intermediate_reachable net -> votes_correct net } Arguments votes_correct_interface {orig_base_params one_node_params raft_params} Arguments Build_votes_correct_interface {orig_base_params one_node_params raft_params} _%function_scope\nNotation max := Init.Nat.max\nRecord entry (orig_base_params : BaseParams) (raft_params : RaftParams orig_base_params) : Type := mkEntry { eAt : name; eClient : clientId; eId : nat; eIndex : logIndex; eTerm : term; eInput : input } Arguments entry {orig_base_params raft_params} Arguments mkEntry {orig_base_params raft_params} _ _ _%nat_scope\nInductive bool : Set := true : bool | false : bool\nname = fun (orig_base_params : BaseParams) (raft_params : RaftParams orig_base_params) => fin N : forall orig_base_params : BaseParams, RaftParams orig_base_params -> Type Arguments name {orig_base_params raft_params}\nInductive nat : Set := O : nat | S : nat -> nat Arguments S _%nat_scope\nRecord log_all_entries_interface (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params) : Prop := Build_log_all_entries_interface { log_all_entries_invariant : forall net : network, refined_raft_intermediate_reachable net -> log_all_entries net } Arguments log_all_entries_interface {orig_base_params one_node_params raft_params} Arguments Build_log_all_entries_interface {orig_base_params one_node_params raft_params} _%function_scope\nRecord append_entries_reply_sublog_interface (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params) : Prop := Build_append_entries_reply_sublog_interface { append_entries_reply_sublog_invariant : forall net : network, raft_intermediate_reachable net -> append_entries_reply_sublog net } Arguments append_entries_reply_sublog_interface {orig_base_params one_node_params raft_params} Arguments Build_append_entries_reply_sublog_interface {orig_base_params one_node_params raft_params} _%function_scope\nRecord no_append_entries_to_leader_interface (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params) : Prop := Build_no_append_entries_to_leader_interface { no_append_entries_to_leader_invariant : forall net : network, raft_intermediate_reachable net -> no_append_entries_to_leader net } Arguments no_append_entries_to_leader_interface {orig_base_params one_node_params raft_params} Arguments Build_no_append_entries_to_leader_interface {orig_base_params one_node_params raft_params} _%function_scope\nlogIndex = nat : Set\nmaxIndex = fun (orig_base_params : BaseParams) (raft_params : RaftParams orig_base_params) => fix maxIndex (entries : list entry) : logIndex := match entries with | [] => 0 | e :: _ => eIndex e end : forall (orig_base_params : BaseParams) (raft_params : RaftParams orig_base_params), list entry -> logIndex Arguments maxIndex {orig_base_params raft_params} _%list_scope\nraft_data = fun (orig_base_params : BaseParams) (raft_params : RaftParams orig_base_params) => RaftState.raft_data term name entry logIndex serverType data clientId output : forall orig_base_params : BaseParams, RaftParams orig_base_params -> Type Arguments raft_data {orig_base_params raft_params}\nNotation type := (RaftState.type term name entry logIndex serverType data clientId output)\nRecord terms_and_indices_from_one_log_interface (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params) : Prop := Build_terms_and_indices_from_one_log_interface { terms_and_indices_from_one_log_invariant : forall net : network, raft_intermediate_reachable net -> terms_and_indices_from_one_log net; terms_and_indices_from_one_log_nw_invariant : forall net : network, raft_intermediate_reachable net -> terms_and_indices_from_one_log_nw net } Arguments terms_and_indices_from\nInductive serverType : Set := Follower : serverType | Candidate : serverType | Leader : serverType\nhandleAppendEntriesReply = fun (orig_base_params : BaseParams) (raft_params : RaftParams orig_base_params) (_ : name) (state : RaftState.raft_data term name entry logIndex serverType data clientId output) (src : name) (term0 : nat) (entries : list entry) (result : bool) => if currentTerm state =? term0 then if result then let index := maxIndex entries in (RaftState.set_raft_data_nextIndex term name entry logIndex serverType data clientId output (RaftState.set_raft\nRecord cronies_correct_interface (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params) : Prop := Build_cronies_correct_interface { cronies_correct_invariant : forall net : network, refined_raft_intermediate_reachable net -> cronies_correct net } Arguments cronies_correct_interface {orig_base_params one_node_params raft_params} Arguments Build_cronies_correct_interface {orig_base_params one_node_params raft_params} _%function_scope\nRecord no_append_entries_to_self_interface (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params) : Prop := Build_no_append_entries_to_self_interface { no_append_entries_to_self_invariant : forall net : network, raft_intermediate_reachable net -> no_append_entries_to_self net } Arguments no_append_entries_to_self_interface {orig_base_params one_node_params raft_params} Arguments Build_no_append_entries_to_self_interface {orig_base_params one_node_params raft_params} _%function_scope\nRecord leaders_have_leaderLogs_strong_interface (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params) : Prop := Build_leaders_have_leaderLogs_strong_interface { leaders_have_leaderLogs_strong_invariant : forall net : network, refined_raft_intermediate_reachable net -> leaders_have_leaderLogs_strong net } Arguments leaders_have_leaderLogs_strong_interface {orig_base_params one_node_params raft_params} Arguments Build_leaders_have_leaderLogs_strong_interface {orig_base_params one_node_params\nRecord refined_log_matching_lemmas_interface (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params) : Prop := Build_refined_log_matching_lemmas_interface { entries_contiguous_nw_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_contiguous_nw net; entries_gt_0_nw_invariant : forall net : network, refined_raft_intermediate_reachable net -> entries_gt_0_nw net; entries_sorted_nw_invariant\nname_eq_dec : forall x y : name, {x = y} + {x <> y}\nRecord raft_refinement_interface (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params) : Prop := Build_raft_refinement_interface { refined_raft_net_invariant : forall (P : network -> Prop) (net : network), refined_raft_net_invariant_init P -> refined_raft_net_invariant_client_request P -> refined_raft_net_invariant_timeout P -> refined_raft_net_invariant_append_entries P -> refined_raft_net_invariant_append_entries_reply P -> refined_raft\nhandleAppendEntriesReply_log_term_type : forall (h : name) (st : RaftState.raft_data term name entry logIndex serverType data clientId output) (n : name) (t : nat) (es : list entry) (r : bool) (st' : raft_data) (ps : list (name * msg)), handleAppendEntriesReply h st n t es r = (st', ps) -> log st' = log st /\\ currentTerm st' = currentTerm st /\\ type st' = type st \\/ type st' = Follower\nhandleAppendEntriesReply_type_term : forall (h : name) (st : RaftState.raft_data term name entry logIndex serverType data clientId output) (h' : name) (t : nat) (es : list entry) (r : bool) (st' : raft_data) (ms : list (name * msg)), handleAppendEntriesReply h st h' t es r = (st', ms) -> type st' = type st /\\ currentTerm st' = currentTerm st \\/ type st' = Follower /\\ currentTerm st' >= currentTerm st\nhandleRequestVoteReply_type : forall (h : name) (st : RaftState.raft_data term name entry logIndex serverType data clientId output) (h' : name) (t : nat) (r : bool) (st' : raft_data), handleRequestVoteReply h st h' t r = st' -> type st' = type st /\\ currentTerm st' = currentTerm st \\/ type st' = Follower /\\ currentTerm st' > currentTerm st \\/ type st = Candidate /\\ type st' = Leader /\\ currentTerm st' = currentTerm st\nhandleAppendEntriesReply_type : forall (h : name) (st : RaftState.raft_data term name entry logIndex serverType data clientId output) (h' : name) (t : nat) (es : list entry) (r : bool) (st' : raft_data) (ms : list (name * msg)), handleAppendEntriesReply h st h' t es r = (st', ms) -> type st' = type st /\\ currentTerm st' = currentTerm st \\/ type st' = Follower\nhandleAppendEntries_type_term : forall (h : name) (st : raft_data) (t : term) (n : name) (pli : logIndex) (plt : term) (es : list entry) (ci : logIndex) (st' : raft_data) (ps : msg), handleAppendEntries h st t n pli plt es ci = (st', ps) -> type st' = type st /\\ currentTerm st' = currentTerm st \\/ type st' = Follower /\\ currentTerm st' >= currentTerm st\nhandleRequestVote_type_term : forall (st : RaftState.raft_data term name entry logIndex serverType data clientId output) (h : name) (h' : fin N) (t lli llt : nat) (st' : raft_data) (m : msg), handleRequestVote h st t h' lli llt = (st', m) -> type st' = type st /\\ currentTerm st' = currentTerm st \\/ type st' = Follower /\\ currentTerm st' >= currentTerm st\nhandleAppendEntries_log_term_type : forall (h : name) (st : raft_data) (t : term) (n : name) (pli : logIndex) (plt : term) (es : list entry) (ci : logIndex) (st' : raft_data) (ps : msg), handleAppendEntries h st t n pli plt es ci = (st', ps) -> log st' = log st /\\ currentTerm st' = currentTerm st /\\ type st' = type st \\/ type st' = Follower\nhandleRequestVote_log_term_type : forall (h : name) (st : RaftState.raft_data term name entry logIndex serverType data clientId output) (t : nat) (c : fin N) (li lt : nat) (st' : raft_data) (m : msg), handleRequestVote h st t c li lt = (st', m) -> log st' = log st /\\ currentTerm st' = currentTerm st /\\ type st' = type st \\/ type st' = Follower\nhandleRequestVoteReply_spec' : forall (h : name) (st : RaftState.raft_data term name entry logIndex serverType data clientId output) (h' : name) (t : nat) (r : bool) (st' : raft_data), st' = handleRequestVoteReply h st h' t r -> log st' = log st /\\ (forall v : name, In v (votesReceived st) -> In v (votesReceived st')) /\\ (type st <> Leader /\\ type st' = Leader -> (type st = Candidate /\\ wonElection (dedup name_eq_dec (votesReceived st')) = true) /\\ r = true /\\ currentTerm st' = currentTerm st /\\ currentTerm st = t /\\ votesReceived st' = h' :: votesReceived st)\nhandleClientRequest_matchIndex_log : forall (h : name) (st : raft_data) (client : clientId) (id : nat) (c : input) (out : list raft_output) (st' : raft_data) (ps : list (name * msg)), handleClientRequest h st client id c = (out, st', ps) -> ps = [] /\\ (log st' = log st /\\ matchIndex st' = matchIndex st \\/ (exists e : entry, log st' = e :: log st /\\ eIndex e = S (maxIndex (log st)) /\\ eTerm e = currentTerm st /\\ eClient e = client /\\ eInput e = c /\\ eId e = id /\\ type st = Leader /\\ matchIndex st' = assoc_set name_eq_dec...\nhandleRequestVoteReply_matchIndex : forall (n : name) (st : RaftState.raft_data term name entry logIndex serverType data clientId output) (src : name) (t : nat) (v : bool), type (handleRequestVoteReply n st src t v) = Leader -> type st = Leader /\\ matchIndex (handleRequestVoteReply n st src t v) = matchIndex st \\/ assoc_default name_eq_dec (matchIndex (handleRequestVoteReply n st src t v)) n 0 = maxIndex (log (handleRequestVoteReply n st src t v))\nhandleRequestVoteReply_spec : forall (h : name) (st : RaftState.raft_data term name entry logIndex serverType data clientId output) (h' : name) (t : nat) (r : bool) (st' : raft_data), st' = handleRequestVoteReply h st h' t r -> log st' = log st /\\ (forall v : name, In v (votesReceived st) -> In v (votesReceived st')) /\\ (currentTerm st' = currentTerm st /\\ type st' = type st \\/ type st' <> Candidate) /\\ (type st <> Leader /\\ type st' = Leader -> type st = Candidate /\\ wonElection (dedup name_eq_dec (votesReceived st')) = true)\nhandleRequestVoteReply_log_term_type : forall (h : name) (st : RaftState.raft_data term name entry logIndex serverType data clientId output) (t : nat) (h' : name) (r : bool) (st' : RaftState.raft_data term name entry logIndex serverType data clientId output), type st' = Candidate -> handleRequestVoteReply h st h' t r = st' -> log st' = log st /\\ currentTerm st' = currentTerm st /\\ type st' = type st\nhandleRequestVote_type : forall (st : RaftState.raft_data term name entry logIndex serverType data clientId output) (h : name) (h' : fin N) (t lli llt : nat) (st' : raft_data) (m : msg), handleRequestVote h st t h' lli llt = (st', m) -> type st' = type st /\\ currentTerm st' = currentTerm st \\/ type st' = Follower\nhandleAppendEntries_type : forall (h : name) (st : raft_data) (t : term) (n : name) (pli : logIndex) (plt : term) (es : list entry) (ci : logIndex) (st' : raft_data) (ps : msg), handleAppendEntries h st t n pli plt es ci = (st', ps) -> type st' = type st /\\ currentTerm st' = currentTerm st \\/ type st' = Follower\nhandleAppendEntriesReply_term_votedFor : forall (h : name) (st : RaftState.raft_data term name entry logIndex serverType data clientId output) (n : name) (t : nat) (es : list entry) (r : bool) (st' : raft_data) (ps : list (name * msg)) (h' : name), handleAppendEntriesReply h st n t es r = (st', ps) -> votedFor st' = Some h' -> currentTerm st' = currentTerm st /\\ votedFor st' = votedFor st\ndoGenericServer_log_type_term_votesReceived : forall (h : name) (st : raft_data) (os : list raft_output) (st' : raft_data) (ps : list (name * msg)), doGenericServer h st = (os, st', ps) -> log st' = log st /\\ type st' = type st /\\ currentTerm st' = currentTerm st /\\ votesReceived st' = votesReceived st /\\ votedFor st' = votedFor st\nleaderLogs_update_elections_data_RVR : forall (h src : name) (t1 : nat) (v : bool) (st : electionsData * RaftState.raft_data term name entry logIndex serverType data clientId output) (t2 : term) (ll : list entry) (st' : raft_data), handleRequestVoteReply h (snd st) src t1 v = st' -> In (t2, ll) (leaderLogs (update_elections_data_requestVoteReply h src t1 v st)) -> In (t2, ll) (leaderLogs (fst st)) \\/ type st' = Leader /\\ type (snd st) = Candidate /\\ t2 = currentTerm st' /\\ ll = log st'\nhandleClientRequest_matchIndex : forall (h : name) (st : raft_data) (client : clientId) (id : nat) (c : input) (out : list raft_output) (st' : raft_data) (ps : list (name * msg)), handleClientRequest h st client id c = (out, st', ps) -> maxIndex (log st') = maxIndex (log st) /\\ matchIndex st' = matchIndex st \\/ matchIndex st' = assoc_set name_eq_dec (matchIndex st) h (maxIndex (log st')) /\\ maxIndex (log st') = S (maxIndex (log st))\nupdate_elections_data_timeout_votedFor : forall (h cid : name) (st : electionsData * raft_data) (out : list raft_output) (st' : raft_data) (m : list (name * msg)), handleTimeout h (snd st) = (out, st', m) -> votedFor st' = Some cid -> votedFor (snd st) = Some cid /\\ currentTerm st' = currentTerm (snd st) /\\ type st' = type (snd st) /\\ votesWithLog (update_elections_data_timeout h st) = votesWithLog (fst st) \\/ cid = h /\\ currentTerm st' = S (currentTerm (snd st)) /\\ votesWithLog (update_elections_data_timeout h st) = (currentTerm st', cid, log...\nmatchIndex_preserved = fun (orig_base_params : BaseParams) (raft_params : RaftParams orig_base_params) (st st' : RaftState.raft_data term name entry logIndex serverType data clientId output) => type st' = Leader -> type st = Leader /\\ matchIndex st' = matchIndex st /\\ log st' = log st : forall (orig_base_params : BaseParams) (raft_params : RaftParams orig_base_params), RaftState.raft_data term name entry logIndex serverType data clientId output -> RaftState.raft_data term name entry logIndex serverType data clientId output -> Prop Arguments matchIndex_preserved {orig_base_params raft_params}\nhandleClientRequest_log : forall (h : name) (st : raft_data) (client : clientId) (id : nat) (c : input) (out : list raft_output) (st' : raft_data) (ps : list (name * msg)), handleClientRequest h st client id c = (out, st', ps) -> ps = [] /\\ (log st' = log st \\/ (exists e : entry, log st' = e :: log st /\\ eIndex e = S (maxIndex (log st)) /\\ eTerm e = currentTerm st /\\ eClient e = client /\\ eInput e = c /\\ eId e = id /\\ type st = Leader))\nhandleAppendEntriesReply_currentTerm : forall (h : name) (st : RaftState.raft_data term name entry logIndex serverType data clientId output) (h' : name) (t : nat) (es : list entry) (r : bool) (st' : raft_data) (ms : list (name * msg)), handleAppendEntriesReply h st h' t es r = (st', ms) -> currentTerm st <= currentTerm st'\nupdate_elections_data_timeout_votesWithLog_votesReceived : forall (h : name) (st : electionsData * raft_data) (out : list raft_output) (st' : raft_data) (ps : list (name * msg)), handleTimeout h (snd st) = (out, st', ps) -> votesReceived st' = votesReceived (snd st) /\\ votesWithLog (update_elections_data_timeout h st) = votesWithLog (fst st) /\\ type st' = Leader \\/ votesReceived st' = [h] /\\ votesWithLog (update_elections_data_timeout h st) = (currentTerm st', h, log st') :: votesWithLog (fst st) /\\ currentTerm st' = S (currentTerm (snd st))\nhandleClientRequest_matchIndex_maxIndex : forall (h : name) (st : raft_data) (client : clientId) (id : nat) (c : input) (out : list raft_output) (st' : raft_data) (ps : list (name * msg)), handleClientRequest h st client id c = (out, st', ps) -> maxIndex (log st') = maxIndex (log st) /\\ matchIndex st' = matchIndex st \\/ assoc_default name_eq_dec (matchIndex st') h 0 = maxIndex (log st')\nupdate_elections_data_client_request_log_allEntries : forall (h : name) (st : electionsData * raft_data) (client : clientId) (id : nat) (c : input) (out : list raft_output) (st' : raft_data) (ms : list (name * msg)), handleClientRequest h (snd st) client id c = (out, st', ms) -> allEntries (update_elections_data_client_request h st client id c) = allEntries (fst st) /\\ log st' = log (snd st) \\/ type (snd st) = Leader /\\ (exists e : entry, eIndex e = S (maxIndex (log (snd st))) /\\ eTerm e = currentTerm (snd st) /\\ eClient e = client /\\ eInput...\nmatchIndex_preserved_except_at_host = fun (orig_base_params : BaseParams) (raft_params : RaftParams orig_base_params) (h : name) (st st' : RaftState.raft_data term name entry logIndex serverType data clientId output) => type st' = Leader -> type st = Leader /\\ (forall h' : name, h <> h' -> assoc_default name_eq_dec (matchIndex st') h' 0 = assoc_default name_eq_dec (matchIndex st) h' 0) : forall (orig_base_params : BaseParams) (raft_params : RaftParams orig_base_params), name -> RaftState.raft_data term name entry logIndex serverType data clientId output ->...-> Prop Arguments matchIndex_preserved_except_at_host {orig_base_params raft_params}\nhandleTimeout_matchIndex : forall (h : name) (st : raft_data) (out : list raft_output) (st' : raft_data) (l : list (name * msg)), handleTimeout h st = (out, st', l) -> matchIndex st' = matchIndex st\nupdate_elections_data_client_request_allEntries : forall (h : name) (st : electionsData * raft_data) (client : clientId) (id : nat) (c : input) (out : list raft_output) (st' : raft_data) (ms : list (name * msg)), handleClientRequest h (snd st) client id c = (out, st', ms) -> allEntries (update_elections_data_client_request h st client id c) = allEntries (fst st) \\/ (exists e : entry, eIndex e = S (maxIndex (log (snd st))) /\\ eTerm e = currentTerm (snd st) /\\ eClient e = client /\\ eInput e = c /\\ eId e = id /\\ type (snd st) = Leader /\\ all...\napplyEntries_spec : forall (es : list entry) (h : name) (st : raft_data) (os : list raft_output) (st' : raft_data), applyEntries h st es = (os, st') -> exists (d : data) (cc : list (clientId * (nat * output))), st' = RaftState.set_raft_data_clientCache term name entry logIndex serverType data clientId output (RaftState.set_raft_data_stateMachine term name entry logIndex serverType data clientId output st d) cc\nupdate_elections_data_requestVoteReply = fun (orig_base_params : BaseParams) (raft_params : RaftParams orig_base_params) (me src : name) (t : nat) (voteGranted : bool) (st : electionsData * RaftState.raft_data term name entry logIndex serverType data clientId output) => let st' := handleRequestVoteReply me (snd st) src t voteGranted in match type st' with | Follower => fst st | Candidate => {| votes := votes (fst st); votesWithLog := votesWithLog (fst st); cronies := fun tm : term => if Nat.eq_dec tm (currentTerm st') then votesReceived st' else cronies (fst st) tm; leaderLogs := leaderLogs (fst st); allEntries :=...\nappend_entries_leaderLogs = fun (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params) (net : network) => forall (p : packet) (t : term) (n : name) (pli : logIndex) (plt : term) (es : list entry) (ci : logIndex), In p (nwPackets net) -> pBody p = AppendEntries t n pli plt es ci ->...-> Prop Arguments append_entries_leaderLogs {orig_base_params one_node_params raft_params}\nno_append_entries_to_leader = fun (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params) (net : network) => forall (p : packet) (t : term) (n : name) (pli : logIndex) (plt : term) (es : list entry) (ci : logIndex), In p (nwPackets net) -> pBody p = AppendEntries t n pli plt es ci -> type (nwState net (pDst p)) = Leader -> currentTerm (nwState net (pDst p)) = t ->...-> Prop Arguments no_append_entries_to_leader {orig_base_params one_node_params raft_params}\ncandidateEntries = fun (orig_base_params : BaseParams) (raft_params : RaftParams orig_base_params) (e : entry) (sigma : name -> electionsData * RaftState.raft_data term name entry logIndex serverType data clientId output) => exists h : name, wonElection (dedup name_eq_dec (cronies (fst (sigma h)) (eTerm e))) = true /\\ (currentTerm (snd (sigma h)) = eTerm e -> type (snd (sigma h)) <> Candidate) : forall (orig_base_params : BaseParams) (raft_params : RaftParams orig_base_params), entry ->...-> Prop Arguments candidateEntries {orig_base_params raft_params} _ _%function_scope\nappend_entries_reply_sublog = fun (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params) (net : network) => forall (p : packet) (t : term) (es : list entry) (h : Net.name) (e : entry), In p (nwPackets net) -> pBody p = AppendEntriesReply t es true -> currentTerm (nwState net h) = t -> type (nwState net h) = Leader -> In e es ->...-> Prop Arguments append_entries_reply_sublog {orig_base_params one_node_params raft_params}\nhandleRequestVoteReply = fun (orig_base_params : BaseParams) (raft_params : RaftParams orig_base_params) (me : name) (state : RaftState.raft_data term name entry logIndex serverType data clientId output) (src : name) (t : nat) (voteGranted : bool) => if currentTerm state <? t then RaftState.set_raft_data_type term name entry logIndex serverType data clientId output (advanceCurrentTerm state t) Follower else if t <? currentTerm state then state else let won := voteGranted && wonElection (dedup name_eq_dec (src :: votesReceived state)) in match type state with | Candidate => RaftState.set_raft_data_electoralVictories term name entry logIndex serverType data clientId output (Ra...\nleaders_have_leaderLogs_strong = fun (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params) (net : network) => forall h : Net.name, type (snd (nwState net h)) = Leader ->...-> Prop Arguments leaders_have_leaderLogs_strong {orig_base_params one_node_params raft_params}\nhandleRequestVoteReply_preserves_candidate_entries : forall (net : network) (h h' : name) (t : nat) (r : bool) (st' : raft_data) (e : entry), st' = handleRequestVoteReply h (snd (nwState net h)) h' t r -> refined_raft_intermediate_reachable net -> candidateEntries e (nwState net) -> candidateEntries e (update name_eq_dec (nwState net) h (update_elections_data_requestVoteReply h h' t r (nwState net h), st'))\nInductive raft_intermediate_reachable (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params) : network -> Prop := RIR_init : raft_intermediate_reachable step_async_init | RIR_step_failure : forall (failed : list Net.name) (net : network) (failed' : list Net.name) (net' : network) (out : list (Net.name * (input + list output))), raft_intermediate_reachable net -> step_failure (failed, net) (failed', net') out -> raft_intermediate_reachable net' | RIR_handleInput : forall (net : network) (h : name) (inp : raft_input) (out : list raft_output) (d : raft...\nInductive refined_raft_intermediate_reachable (orig_base_params : BaseParams) (one_node_params : OneNodeParams orig_base_params) (raft_params : RaftParams orig_base_params) : network -> Prop := RRIR_init : refined_raft_intermediate_reachable step_async_init | RRIR_step_failure : forall (failed : list Net.name) (net : network) (failed' : list Net.name) (net' : network) (out : list (Net.name * (input + list output))), refined_raft_intermediate_reachable net -> step_failure (failed, net) (failed', net') out -> refined_raft_intermediate_reachable net' | RRIR_handleInput : forall (net : network) (h : name) (inp : raft_input) (gd :..."}, {"role": "assistant", "content": "```coq\nintros n st src t es b st' l H.\ndestruct H as [H1 H2].\ndestruct H2 as [H3 | H4].\n- right. left. split; [exact H3 | split; [exact H1 | exact H2]].\n- destruct H4 as [H5 H6].\n  right. right. left. split; [exact H5 | split; [exact H6 | split; [exact H4 | split; [exact H1 | split]]]].\n  + rewrite assoc_set_assoc_default_same. reflexivity.\n  + exact H3.\nQed.\n```"}], "original": "intros n st src t es b st' l H. destruct H as [H1 H2]. destruct H2 as [H3 | H4]. - right. left. split; [apply H3 | split; [apply H1 | apply H2]]. - destruct H4 as [H5 H6]. right. right. left. split; [apply H5 | split; [apply H6 | split; [apply H4 | split; [apply H1 | split]]]]. + rewrite assoc_set_assoc_default_same. reflexivity. + apply H3.", "succ": false}]