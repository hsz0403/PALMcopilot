[{"history": {"proof": "intros n x H. shelve.", "repairs": ["", ""], "exceptions": []}, "chat": [{"role": "user", "content": "I will give you a Coq proof state, including both hypotheses and a specific goal and your need to prove it. Your response should be a singular code block of Coq proof starting with \"```coq\n\", ending with \"Qed.\", without any additional explanation or commentary. Follow to these guidelines:\nIntroduce variables using unique names to avoid any conflicts.\nKeep each command distinct and separated, avoid concatenations like ';' or '[cmd|cmd]'.\nOrganize your proof with bullets like '-', '+', and '*' instead of braces ({, }). Shift to their double symbols like '--' and '++', when necessary.\nEffectively use given premises, follow the syntax and structure demonstrated in the examples provided.\n\nExample 1:\n\nHypotheses:\nn, m: nat\nIHn: m + n = n + m\n\nGoal:\nm + S n = S n + m\n\nProof:\n```coq\nsimpl. rewrite <- IHn. auto.\nQed.```\n\nExample 2:\nHypotheses:\n\nGoal:\nforall n m : nat, m + n = n + m\n\n```coq\nintros n m. induction n.\n- simpl. auto.\n- simpl. rewrite <- IHn. auto.\nQed.```\n\nSolve This Proof State:\n\nHypotheses:\n\n\nGoal:\nforall (n : nat) (x : list nat), sorted (Cons nat n x) -> sorted x\n\nPremises:\nCons : forall X : Set, X -> list X -> list X\nsorted = fix sorted (l : list nat) : Prop := match l with | @Nil _ => True | @Cons _ n (@Nil _) => True | @Cons _ n (@Cons _ m _ as l0) => inf_egal n m = true /\\ sorted l0 end : list nat -> Prop\nInductive nat : Set := O : nat | S : nat -> nat Arguments S _%nat_scope\nInductive list (X : Set) : Set := Nil : list X | Cons : X -> list X -> list X Arguments list _%type_scope Arguments Nil _%type_scope Arguments Cons _%type_scope\nsorted_eq3 : forall (n m : nat) (x : list nat), sorted (Cons nat n (Cons nat m x)) = (inf_egal n m = true /\\ sorted (Cons nat m x))\nnocc_eq2 : forall (n m : nat) (x : list nat), nocc n (Cons nat m x) = si nat (egal_nat n m) (S (nocc n x)) (nocc n x)\nsorted_eq2 : forall n : nat, sorted (Cons nat n (Nil nat)) = True\nlist_ind : forall (X : Set) (P : list X -> Prop), P (Nil X) -> (forall (x : X) (l : list X), P l -> P (Cons X x l)) -> forall l : list X, P l\nlist_rect : forall (X : Set) (P : list X -> Type), P (Nil X) -> (forall (x : X) (l : list X), P l -> P (Cons X x l)) -> forall l : list X, P l\nlist_rec : forall (X : Set) (P : list X -> Set), P (Nil X) -> (forall (x : X) (l : list X), P l -> P (Cons X x l)) -> forall l : list X, P l\nlist_sind : forall (X : Set) (P : list X -> SProp), P (Nil X) -> (forall (x : X) (l : list X), P l -> P (Cons X x l)) -> forall l : list X, P l\nnocc = fix nocc (n : nat) (l : list nat) {struct l} : nat := match l with | @Nil _ => 0 | @Cons _ m x => si nat (egal_nat n m) (S (nocc n x)) (nocc n x) end : nat -> list nat -> nat Arguments nocc _%nat_scope\nsorted_eq1 = eq_refl : sorted (Nil nat) = True\nVectorDef.Exists_sind : forall (A : Type) (P : A -> Prop) (P0 : forall n : nat, VectorDef.t A n -> SProp), (forall (m : nat) (x : A) (v : VectorDef.t A m), P x -> P0 (S m) (VectorDef.cons A x m v)) -> (forall (m : nat) (x : A) (v : VectorDef.t A m), VectorDef.Exists P v -> P0 m v -> P0 (S m) (VectorDef.cons A x m v)) -> forall (n : nat) (t : VectorDef.t A n), VectorDef.Exists P t -> P0 n t\nList.firstn_skipn_rev : forall (A : Type) (x : nat) (l : Datatypes.list A), List.firstn x l = List.rev (List.skipn (Datatypes.length l - x) (List.rev l))\nList.skipn_rev : forall (A : Type) (x : nat) (l : Datatypes.list A), List.skipn x (List.rev l) = List.rev (List.firstn (Datatypes.length l - x) l)\nBinPosDef.Pos.of_succ_nat = fix of_succ_nat (n : nat) : BinNums.positive := match n with | 0 => BinNums.xH | S x => BinPosDef.Pos.succ (of_succ_nat x) end : nat -> BinNums.positive Arguments BinPosDef.Pos.of_succ_nat _%nat_scope\nBetween.bet_emp : forall (P : nat -> Prop) (k : nat), Between.between P k k\nInductive Exists (A : Type) (P : A -> Prop) : forall n : nat, VectorDef.t A n -> Prop := Exists_cons_hd : forall (m : nat) (x : A) (v : VectorDef.t A m), P x -> VectorDef.Exists P (VectorDef.cons A x m v) | Exists_cons_tl : forall (m : nat) (x : A) (v : VectorDef.t A m), VectorDef.Exists P v -> VectorDef.Exists P (VectorDef.cons A x m v) Arguments VectorDef.Exists {A}%type_scope _%function_scope {n}%nat_scope Arguments VectorDef.Exists_cons_hd {A}%type_scope _%function_scope {m}%nat_scope Arguments VectorDef.Exists_cons_tl {A}%type_scope _%function_scope {m}%nat_scope\nBinPosDef.Pos.of_nat = fix of_nat (n : nat) : BinNums.positive := match n with | S (S _ as x) => BinPosDef.Pos.succ (of_nat x) | _ => BinNums.xH end : nat -> BinNums.positive Arguments BinPosDef.Pos.of_nat _%nat_scope\nlength : forall X : Set, list X -> nat\nRecord almost_ring_theory (R : Type) (rO rI : R) (radd rmul rsub : R -> R -> R) (ropp : R -> R) (req : R -> R -> Prop) : Prop := mk_art { ARadd_0_l : forall x : R, req (radd rO x) x; ARadd_comm : forall x y : R, req (radd x y) (radd y x); ARadd_assoc : forall x y z : R, req (radd x (radd y z)) (radd (radd x y) z); ARmul_1_l : forall x : R, req (rmul rI x) x; ARmul_0_l : forall x : R, req (rmul rO x) rO; ARmul_comm : forall x y : R, req (rmul x y) (rmul y x); ARmul_assoc : forall x y z : R, req (rmul x (rmul y z)) (rmul (rmul x y) z); ARdistr_l : forall x y z : R, req...\nappend : forall X : Set, list X -> list X -> list X\nFin.caseS : forall P : forall n : nat, Fin.t (S n) -> Type, (forall n : nat, P n Fin.F1) -> (forall (n : nat) (p : Fin.t n), P n (Fin.FS p)) -> forall (n : nat) (p : Fin.t (S n)), P n p\nRecord ring_morph (R : Type) (rO rI : R) (radd rmul rsub : R -> R -> R) (ropp : R -> R) (req : R -> R -> Prop) (C : Type) (cO cI : C) (cadd cmul csub : C -> C -> C) (copp : C -> C) (ceqb : C -> C -> bool) (phi : C -> R) : Prop := mkmorph { morph0 : req (phi cO) rO; morph1 : req (phi cI) rI; morph_add : forall x y : C, req (phi (cadd x y)) (radd (phi x) (phi y)); morph_sub : forall x y : C, req (phi (csub x y)) (rsub (phi x) (phi y)); morph_mul : forall x y : C, req (phi (cmul x y)) (rmul (phi x) (phi y)); morph_opp : forall x : C, req (phi (copp x)) (ropp (phi x)); morph_eq...\nRing_theory.ARmul_1_l : forall (R : Type) (rO rI : R) (radd rmul rsub : R -> R -> R) (ropp : R -> R) (req : R -> R -> Prop), Ring_theory.almost_ring_theory rO rI radd rmul rsub ropp req -> forall x : R, req (rmul rI x) x\nRing_theory.ARmul_comm : forall (R : Type) (rO rI : R) (radd rmul rsub : R -> R -> R) (ropp : R -> R) (req : R -> R -> Prop), Ring_theory.almost_ring_theory rO rI radd rmul rsub ropp req -> forall x y : R, req (rmul x y) (rmul y x)\ncdr : forall X : Set, list X -> list X\nPeanoNat.Nat.add_wd_obligation_1 = fun (x y : nat) (H : x = y) (x0 y0 : nat) (H0 : x0 = y0) => eq_ind_r (fun x1 : nat => x + x1 = y + y0) (eq_ind_r (fun x1 : nat => x1 + y0 = y + y0) eq_refl H) H0 : Morphisms.respectful eq (Morphisms.respectful eq eq) Nat.add Nat.add\nRing_theory.ARopp_mul_l : forall (R : Type) (rO rI : R) (radd rmul rsub : R -> R -> R) (ropp : R -> R) (req : R -> R -> Prop), Ring_theory.almost_ring_theory rO rI radd rmul rsub ropp req -> forall x y : R, req (ropp (rmul x y)) (rmul (ropp x) y)\nPeanoNat.Nat.succ_wd_obligation_1 = fun (x y : nat) (H : x = y) => eq_ind_r (fun x0 : nat => S x0 = S y) eq_refl H : Morphisms.respectful eq eq S S\nRing_theory.ARmul_0_l : forall (R : Type) (rO rI : R) (radd rmul rsub : R -> R -> R) (ropp : R -> R) (req : R -> R -> Prop), Ring_theory.almost_ring_theory rO rI radd rmul rsub ropp req -> forall x : R, req (rmul rO x) rO\nssrbool.has_quality : forall (n : nat) (T : Type), ssrbool.qualifier n T -> ssrbool.pred_sort (ssrbool.predPredType T)\nInductive le (n : nat) : nat -> Prop := le_n : n <= n | le_S : forall m : nat, n <= m -> n <= S m Arguments le (_ _)%nat_scope Arguments le_n _%nat_scope Arguments le_S (_ _)%nat_scope\nRing_theory.ARdistr_r : forall (R : Type) (rO rI : R) (radd rmul rsub : R -> R -> R) (ropp : R -> R) (req : R -> R -> Prop), RelationClasses.Equivalence req -> Ring_theory.ring_eq_ext radd rmul ropp req -> Ring_theory.almost_ring_theory rO rI radd rmul rsub ropp req -> forall x y z : R, req (rmul z (radd x y)) (radd (rmul z x) (rmul z y))\nByte.to_of_nat_option_map : forall x : nat, option_map Byte.to_nat (Byte.of_nat x) = (if Nat.leb x 255 then Some x else None)\nList.skipn_all2 : forall (A : Type) (n : nat) (l : Datatypes.list A), Datatypes.length l <= n -> List.skipn n l = nil\nList.firstn_all2 : forall (A : Type) (n : nat) (l : Datatypes.list A), Datatypes.length l <= n -> List.firstn n l = l\nNat.add = fix add (n m : nat) {struct n} : nat := match n with | 0 => m | S p => S (add p m) end : nat -> nat -> nat Arguments Nat.add (_ _)%nat_scope\nNat.pow = fix pow (n m : nat) {struct m} : nat := match m with | 0 => 1 | S m0 => n * pow n m0 end : nat -> nat -> nat Arguments Nat.pow (_ _)%nat_scope\nNat.mul = fix mul (n m : nat) {struct n} : nat := match n with | 0 => 0 | S p => m + mul p m end : nat -> nat -> nat Arguments Nat.mul (_ _)%nat_scope\nPeanoNat.Nat.divide_wd = fun (x x' : nat) (Hx : x = x') (y y' : nat) (Hy : y = y') => Morphisms.trans_co_eq_inv_impl_morphism RelationClasses.iff_Transitive (exists p : nat, y = p * x) (exists p : nat, y = p * x') (Morphisms_Prop.ex_iff_morphism (fun p : nat => y = p * x) (fun p : nat => y = p * x') (fun p : nat => Morphisms.per_partial_app_morphism (RelationClasses.Equivalence_PER PeanoNat.Nat.eq_equiv) (p * x) (p * x') (Morphisms.Reflexive_partial_app_morphism PeanoNat.Nat.mul_wd (Morphisms.reflexive_proper_proxy RelationClasses.Equivalence_Reflexive p) x x' Hx))) (exists p : nat, y' = p * x') (exists p : nat, y' = p * x') (Morphisms.eq_proper_proxy (exists p : nat, y' = p * x...\nssrbool.PackKeyedQualifier : forall (T : Type) (n : nat) (q : ssrbool.qualifier n T) (k : ssrbool.pred_key (T:=T) (ssrbool.has_quality n q)) (unkey_qualifier : ssrbool.qualifier n T), unkey_qualifier = q -> ssrbool.keyed_qualifier (q:=q) k\nSetoid.Seq_sym : forall (A : Type) (Aeq : Relation_Definitions.relation A), Setoid.Setoid_Theory A Aeq -> forall x y : A, Aeq x y -> Aeq y x"}, {"role": "assistant", "content": "```coq\nintros n x H.\ninversion H; auto.\nQed.```"}], "original": "intros n x H. inversion H; auto.", "succ": false}]