[{"history": {"proof": "intros. reflexivity.", "repairs": ["", ""], "exceptions": []}, "chat": [{"role": "user", "content": "I will give you a Coq proof state, including both hypotheses and a specific goal and your need to prove it. Your response should be a singular code block of Coq proof starting with \"```coq\n\", ending with \"Qed.\", without any additional explanation or commentary. Follow to these guidelines:\nIntroduce variables using unique names to avoid any conflicts.\nKeep each command distinct and separated, avoid concatenations like ';' or '[cmd|cmd]'.\nOrganize your proof with bullets like '-', '+', and '*' instead of braces ({, }). Shift to their double symbols like '--' and '++', when necessary.\nEffectively use given premises, follow the syntax and structure demonstrated in the examples provided.\n\nExample 1:\n\nHypotheses:\nn, m: nat\nIHn: m + n = n + m\n\nGoal:\nm + S n = S n + m\n\nProof:\n```coq\nsimpl. rewrite <- IHn. auto.\nQed.```\n\nExample 2:\nHypotheses:\n\nGoal:\nforall n m : nat, m + n = n + m\n\n```coq\nintros n m. induction n.\n- simpl. auto.\n- simpl. rewrite <- IHn. auto.\nQed.```\n\nSolve This Proof State:\n\nHypotheses:\n\n\nGoal:\nforall m : nat, inf_egal 0 m = true\n\nPremises:\nInductive nat : Set := O : nat | S : nat -> nat Arguments S _%nat_scope\ninf_egal = fix inf_egal (n m : nat) {struct n} : bool := match n with | 0 => true | S n0 => match m with | 0 => false | S m0 => inf_egal n0 m0 end end : nat -> nat -> bool Arguments inf_egal (_ _)%nat_scope\nPeanoNat.Nat.eqb_eq : forall n m : nat, PeanoNat.Nat.eqb n m = true < -> n = m\nEqNat.beq_nat_eq : forall n m : nat, true = PeanoNat.Nat.eqb n m -> n = m\nPeanoNat.Nat.setbit_iff : forall a n m : nat, PeanoNat.Nat.testbit (PeanoNat.Nat.setbit a n) m = true < -> n = m \\/ PeanoNat.Nat.testbit a m = true\nPeanoNat.Nat.ltb_lt : forall n m : nat, PeanoNat.Nat.ltb n m = true < -> n < m\nPeanoNat.Nat.leb_le : forall n m : nat, PeanoNat.Nat.leb n m = true < -> n <= m\nCompare_dec.leb_correct : forall m n : nat, m <= n -> PeanoNat.Nat.leb m n = true\nPeanoNat.Nat.clearbit_iff : forall a n m : nat, PeanoNat.Nat.testbit (PeanoNat.Nat.clearbit a n) m = true < -> PeanoNat.Nat.testbit a m = true /\\ n <> m\nPeanoNat.Nat.ones_spec_iff : forall n m : nat, PeanoNat.Nat.testbit (PeanoNat.Nat.ones n) m = true < -> m < n\nPeanoNat.Nat.ones_spec_low : forall n m : nat, m < n -> PeanoNat.Nat.testbit (PeanoNat.Nat.ones n) m = true\nCompare_dec.leb_compare : forall n m : nat, PeanoNat.Nat.leb n m = true < -> PeanoNat.Nat.compare n m <> Gt\neq_add_S : forall n m : nat, S n = S m -> n = m\nPeanoNat.Nat.add_comm : forall n m : nat, n + m = m + n\nBinInt.Z.eqb_eq : forall n m : BinNums.Z, BinInt.Z.eqb n m = true < -> n = m\nBinNat.N.eqb_eq : forall n m : BinNums.N, BinNat.N.eqb n m = true < -> n = m\nPeanoNat.Nat.lt_eq_cases : forall n m : nat, n <= m < -> n < m \\/ n = m\nPeanoNat.Nat.ones_spec_high : forall n m : nat, n <= m -> PeanoNat.Nat.testbit (PeanoNat.Nat.ones n) m = false\nBinInt.Z.leb_le : forall n m : BinNums.Z, BinInt.Z.leb n m = true < -> BinInt.Z.le n m\nBinInt.Z.ltb_lt : forall n m : BinNums.Z, BinInt.Z.ltb n m = true < -> BinInt.Z.lt n m\nBinNat.N.ones_spec_iff : forall n m : BinNums.N, BinNat.N.testbit (BinNat.N.ones n) m = true < -> BinNat.N.lt m n\nBinNat.N.ones_spec_low : forall n m : BinNums.N, BinNat.N.lt m n -> BinNat.N.testbit (BinNat.N.ones n) m = true\nPeanoNat.Nat.ones_mod_pow2 : forall n m : nat, m <= n -> PeanoNat.Nat.modulo (PeanoNat.Nat.ones n) (PeanoNat.Nat.pow 2 m) = PeanoNat.Nat.ones m\nPeanoNat.Nat.setbit_eqb : forall a n m : nat, PeanoNat.Nat.testbit (PeanoNat.Nat.setbit a n) m = (PeanoNat.Nat.eqb n m || PeanoNat.Nat.testbit a m)%bool\nPeanoNat.Nat.clearbit_eqb : forall a n m : nat, PeanoNat.Nat.testbit (PeanoNat.Nat.clearbit a n) m = (PeanoNat.Nat.testbit a m && negb (PeanoNat.Nat.eqb n m))%bool\nmult_n_O : forall n : nat, 0 = n * 0\nPeanoNat.Nat.mul_0_r : forall n : nat, n * 0 = 0\nPeanoNat.Nat.even_0 = (fun lemma : PeanoNat.Nat.even 0 = true <-> PeanoNat.Nat.Even 0 => Morphisms.iff_flip_impl_subrelation (PeanoNat.Nat.even 0 = true) (PeanoNat.Nat.Even 0) lemma) (PeanoNat.Nat.even_spec 0) (ex_intro (fun m : nat => 0 = 2 * m) 0 ((fun lemma : 2 * 0 = 0 => Morphisms.trans_sym_co_inv_impl_morphism (RelationClasses.Equivalence_PER PeanoNat.Nat.eq_equiv) (2 * 0) 0 lemma) (PeanoNat.Nat.mul_0_r 2) (RelationClasses.reflexivity 0))) : PeanoNat.Nat.even 0 = true\nPeanoNat.Nat.mul_pow2_bits_add : forall a n m : nat, PeanoNat.Nat.testbit (a * PeanoNat.Nat.pow 2 n) (m + n) = PeanoNat.Nat.testbit a m\nPeanoNat.Nat.testbit_odd_0 : forall a : nat, PeanoNat.Nat.testbit (2 * a + 1) 0 = true\nPeanoNat.Nat.ones_div_pow2 : forall n m : nat, m <= n -> PeanoNat.Nat.div (PeanoNat.Nat.ones n) (PeanoNat.Nat.pow 2 m) = PeanoNat.Nat.ones (n - m)\nPeanoNat.Nat.le_succ_l : forall n m : nat, S n <= m < -> n < m\nPeanoNat.Nat.lt_nge : forall n m : nat, n < m < -> ~ m <= n\nPeanoNat.Nat.bit_log2 : forall a : nat, a <> 0 -> PeanoNat.Nat.testbit a (PeanoNat.Nat.log2 a) = true\nBinNat.N.ones_spec_high : forall n m : BinNums.N, BinNat.N.le n m -> BinNat.N.testbit (BinNat.N.ones n) m = false\nPeanoNat.Nat.compare_le_iff : forall n m : nat, PeanoNat.Nat.compare n m <> Gt < -> n <= m\nle_S_n : forall n m : nat, S n <= S m -> n <= m\nle_n_S : forall n m : nat, n <= m -> S n <= S m\nBinInt.Z.bits_iff_neg_ex : forall a : BinNums.Z, BinInt.Z.lt a BinNums.Z0 < -> (exists k : BinNums.Z, forall m : BinNums.Z, BinInt.Z.lt k m -> BinInt.Z.testbit a m = true)\nPeanoNat.Nat.add_0_l : forall n : nat, 0 + n = n\nNat.mul = fix mul (n m : nat) {struct n} : nat := match n with | 0 => 0 | S p => m + mul p m end : nat -> nat -> nat Arguments Nat.mul (_ _)%nat_scope\nPeanoNat.Nat.bit0_odd : forall a : nat, PeanoNat.Nat.testbit a 0 = PeanoNat.Nat.odd a"}, {"role": "assistant", "content": "```coq\nintros. reflexivity.\nQed.```"}], "original": "intros. reflexivity.", "succ": true}]