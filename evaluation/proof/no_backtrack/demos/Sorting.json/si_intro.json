[{"history": {"proof": "intros X P x y b Htrue Hfalse. destruct b. - apply Htrue. reflexivity. - apply Hfalse. reflexivity.", "repairs": ["", "", "", "", "", "", "", ""], "exceptions": []}, "chat": [{"role": "user", "content": "I will give you a Coq proof state, including both hypotheses and a specific goal and your need to prove it. Your response should be a singular code block of Coq proof starting with \"```coq\n\", ending with \"Qed.\", without any additional explanation or commentary. Follow to these guidelines:\nIntroduce variables using unique names to avoid any conflicts.\nKeep each command distinct and separated, avoid concatenations like ';' or '[cmd|cmd]'.\nOrganize your proof with bullets like '-', '+', and '*' instead of braces ({, }). Shift to their double symbols like '--' and '++', when necessary.\nEffectively use given premises, follow the syntax and structure demonstrated in the examples provided.\n\nExample 1:\n\nHypotheses:\nn, m: nat\nIHn: m + n = n + m\n\nGoal:\nm + S n = S n + m\n\nProof:\n```coq\nsimpl. rewrite <- IHn. auto.\nQed.```\n\nExample 2:\nHypotheses:\n\nGoal:\nforall n m : nat, m + n = n + m\n\n```coq\nintros n m. induction n.\n- simpl. auto.\n- simpl. rewrite <- IHn. auto.\nQed.```\n\nSolve This Proof State:\n\nHypotheses:\n\n\nGoal:\nforall (X : Set) (P : X -> Prop) (x y : X) (b : bool), (b = true -> P x) -> (b = false -> P y) -> P (si X b x y)\n\nPremises:\nInductive GFormula (TA TX AA AF : Type) : Type := TT : Tauto.GFormula | FF : Tauto.GFormula | X : TX -> Tauto.GFormula | A : TA -> AA -> Tauto.GFormula | Cj : Tauto.GFormula -> Tauto.GFormula -> Tauto.GFormula | D : Tauto.GFormula -> Tauto.GFormula -> Tauto.GFormula | N : Tauto.GFormula -> Tauto.GFormula | I : Tauto.GFormula -> option AF -> Tauto.GFormula -> Tauto.GFormula Arguments Tauto.GFormula {TA TX AA AF}%type_scope Arguments Tauto.TT {TA TX AA AF}%type_scope Arguments Tauto.FF {TA TX AA AF}%type_scope Arguments Tauto.X {TA TX AA AF}%type_scope Arguments Tauto.A {TA TX AA AF}%type_scope Arguments Tauto.Cj {TA TX AA AF}%type_scope Arguments Tauto.D {TA TX AA AF}%type_scope Arguments Tauto.N {TA TX AA AF}%type_scope Arguments Tauto.I {TA TX AA AF}%type_scope\nInductive bool : Set := true : bool | false : bool\nsi : forall X : Set, bool -> X -> X -> X\nssrbool.introNf : forall (P : Prop) (b : bool), Bool.reflect P b -> P -> negb b = false\nssrbool.introF : forall (P : Prop) (b : bool), Bool.reflect P b -> ~ P -> b = false\nSumbool.bool_eq_ind : forall (b : bool) (P : bool -> Prop), (b = true -> P true) -> (b = false -> P false) -> P b\nSumbool.bool_eq_rec : forall (b : bool) (P : bool -> Set), (b = true -> P true) -> (b = false -> P false) -> P b\nBool.iff_reflect : forall (P : Prop) (b : bool), P < -> b = true -> Bool.reflect P b\nssrbool.introTF : forall (P : Prop) (b c : bool), Bool.reflect P b -> (if c then P else ~ P) -> b = c\nssrbool.introNTF : forall (P : Prop) (b c : bool), Bool.reflect P b -> (if c then ~ P else P) -> negb b = c\nssrbool.introTFn : forall (P : Prop) (b c : bool), Bool.reflect P (negb b) -> (if c then ~ P else P) -> b = c\nssrbool.introFn : forall (P : Prop) (b' : bool), Bool.reflect P (negb b') -> P -> b' = false\nsi_eq1 : forall (X : Set) (x y : X), si X true x y = x\nsi_eq2 : forall (X : Set) (x y : X), si X false x y = y\nexist : forall (A : Type) (P : A -> Prop) (x : A), P x -> {x : A | P x}\nbool_rec : forall P : bool -> Set, P true -> P false -> forall b : bool, P b\nInductive list (X : Set) : Set := Nil : list X | Cons : X -> list X -> list X Arguments list _%type_scope Arguments Nil _%type_scope Arguments Cons _%type_scope\nInductive reflect (P : Prop) : bool -> Set := ReflectT : P -> Bool.reflect P true | ReflectF : ~ P -> Bool.reflect P false Arguments Bool.reflect _%type_scope _%bool_scope Arguments Bool.ReflectT _%type_scope Arguments Bool.ReflectF _%type_scope\nVectorEq.eq_dec : forall (A : Type) (A_beq : A -> A -> bool), (forall x y : A, A_beq x y = true <-> x = y) -> forall (n : nat) (v1 v2 : VectorDef.t A n), {v1 = v2} + {v1 <> v2}\nVectorEq.eqb_eq : forall (A : Type) (A_beq : A -> A -> bool), (forall x y : A, A_beq x y = true <-> x = y) -> forall (n : nat) (v1 v2 : VectorDef.t A n), VectorEq.eqb A A_beq v1 v2 = true < -> v1 = v2\nDatatypes.list_ind : forall (A : Type) (P : Datatypes.list A -> Prop), P nil -> (forall (a : A) (l : Datatypes.list A), P l -> P (a :: l)%list) -> forall l : Datatypes.list A, P l\nInductive sig (A : Type) (P : A -> Prop) : Type := exist : forall x : A, P x -> {x : A | P x} Arguments sig [A]%type_scope _%type_scope Arguments exist [A]%type_scope _%function_scope\nnat_ind : forall P : nat -> Prop, P 0 -> (forall n : nat, P n -> P (S n)) -> forall n : nat, P n\nCons : forall X : Set, X -> list X -> list X\nBool.ReflectT : forall P : Prop, P -> Bool.reflect P true\nBool.ReflectF : forall P : Prop, ~ P -> Bool.reflect P false\nEqdep_dec.UIP_refl_bool : forall (b : bool) (x : b = b), x = eq_refl\nRecord ring_morph (R : Type) (rO rI : R) (radd rmul rsub : R -> R -> R) (ropp : R -> R) (req : R -> R -> Prop) (C : Type) (cO cI : C) (cadd cmul csub : C -> C -> C) (copp : C -> C) (ceqb : C -> C -> bool) (phi : C -> R) : Prop := mkmorph { morph0 : req (phi cO) rO; morph1 : req (phi cI) rI; morph_add : forall x y : C, req (phi (cadd x y)) (radd (phi x) (phi y)); morph_sub : forall x y : C, req (phi (csub x y)) (rsub (phi x) (phi y)); morph_mul : forall x y : C, req (phi (cmul x y)) (rmul (phi x) (phi y)); morph_opp : forall x : C, req (phi (copp x)) (ropp (phi x...\nByte.byte_dec_bl : forall x y : Byte.byte, Byte.eqb x y = true -> x = y\nbool_choice : forall (S : Set) (R1 R2 : S -> Prop), (forall x : S, {R1 x} + {R2 x}) -> {f : S -> bool | forall x : S, f x = true /\\ R1 x \\/ f x = false /\\ R2 x}\nRingMicromega.mk_SOR_addon : forall (R : Type) (rO rI : R) (rplus rtimes rminus : R -> R -> R) (ropp : R -> R) (req rle : R -> R -> Prop) (C : Type) (cO cI : C) (cplus ctimes cminus : C -> C -> C) (copp : C -> C) (ceqb cleb : C -> C -> bool) (phi : C -> R) (E : Type) (pow_phi : BinNums.N -> E) (rpow : R -> E -> R), Ring_theory.ring_morph rO rI rplus rtimes rminus ropp req cO cI cplus ctimes cminus copp ceqb phi -> Ring_theory.power_theory rI rtimes req pow_phi rpow ->...-> RingMicromega.SORaddon rO rI rplus rtimes rminus ropp req rle cO cI cplus ctimes cminus copp ceqb cleb phi pow_phi rpow\nRecord SORaddon (R : Type) (rO rI : R) (rplus rtimes rminus : R -> R -> R) (ropp : R -> R) (req rle : R -> R -> Prop) (C : Type) (cO cI : C) (cplus ctimes cminus : C -> C -> C) (copp : C -> C) (ceqb cleb : C -> C -> bool) (phi : C -> R) (E : Type) (pow_phi : BinNums.N -> E) (rpow : R -> E -> R) : Prop := mk_SOR_addon { SORrm : Ring_theory.ring_morph rO rI rplus rtimes rminus ropp req cO cI cplus ctimes cminus copp ceqb phi; SORpower : Ring_theory.power_theory rI rtimes req pow_phi rpow; SORcneqb_morph : forall x y : C, ceqb x y = false -> ~ req (phi x) (phi y); SORcleb_morph : forall x y :...\nssrbool.IfSpecTrue : forall (A : Type) (b : bool) (vT vF : A) (not_b : Prop), is_true b -> ssrbool.if_spec b vT vF not_b true vT\nByte.eqb_false : forall x y : Byte.byte, Byte.eqb x y = false -> x <> y\nssrbool.IfSpecFalse : forall (A : Type) (b : bool) (vT vF : A) (not_b : Prop), not_b -> ssrbool.if_spec b vT vF not_b false vF\nBool.andb_false_r : forall b : bool, (b && false)%bool = false\nList.find_none : forall (A : Type) (f : A -> bool) (l : Datatypes.list A), List.find f l = None -> forall x : A, List.In x l -> f x = false\nVariant if_spec (A : Type) (b : bool) (vT vF : A) (not_b : Prop) : bool -> A -> Set := IfSpecTrue : is_true b -> ssrbool.if_spec b vT vF not_b true vT | IfSpecFalse : not_b -> ssrbool.if_spec b vT vF not_b false vF Arguments ssrbool.if_spec [A]%type_scope _%bool_scope _ _ _%type_scope _%bool_scope Arguments ssrbool.IfSpecTrue [A]%type_scope [b]%bool_scope _ _ _%type_scope Arguments ssrbool.IfSpecFalse [A]%type_scope _%bool_scope _ _ [not_b]%type_scope\nBool.andb_negb_r : forall b : bool, (b && negb b)%bool = false\nssrbool.andbN : forall b : bool, (b && negb b)%bool = false\nssrbool.contraFF : forall c b : bool, (is_true c -> is_true b) -> b = false -> c = false\nssrbool.ifP : forall (A : Type) (b : bool) (vT vF : A), ssrbool.if_spec b vT vF (b = false) b (if b then vT else vF)\nBool.not_false_is_true : forall b : bool, b <> false -> b = true"}, {"role": "assistant", "content": "```coq\nintros X P x y b Htrue Hfalse.\ndestruct b.\n- apply Htrue. reflexivity.\n- apply Hfalse. reflexivity.\nQed.```"}], "original": "intros X P x y b Htrue Hfalse. destruct b. - apply Htrue. reflexivity. - apply Hfalse. reflexivity.", "succ": true}]