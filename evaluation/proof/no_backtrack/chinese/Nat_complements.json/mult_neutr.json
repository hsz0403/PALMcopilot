[{"history": {"proof": "intros n. apply Nat.mul_1_l.", "repairs": ["", ""], "exceptions": []}, "chat": [{"role": "user", "content": "I will give you a Coq proof state, including both hypotheses and a specific goal and your need to prove it. Your response should be a singular code block of Coq proof, without any additional explanation or commentary. Follow to these guidelines:\nIntroduce variables using unique names to avoid any conflicts.\nKeep each command distinct and separated, avoid concatenations like ';' or '[cmd|cmd]'.\nOrganize your proof with bullets like '-', '+', and '*' instead of braces ({, }). Shift to their double symbols like '--' and '++', when necessary.\nEffectively use given premises, follow the syntax and structure demonstrated in the examples provided.\n\nExample 1:\n\nHypotheses:\nn, m: nat\nIHn: m + n = n + m\n\nGoal:\nm + S n = S n + m\n\nProof:\n```simpl. rewrite <- IHn. auto.```\n\nExample 2:\nHypotheses:\n\nGoal:\nforall n m : nat, m + n = n + m\n\n```intros n m. induction n.\n- simpl. auto.\n- simpl. rewrite <- IHn. auto.```\n\nSovle This Proof State:\n\nHypotheses:\n\n\nGoal:\nforall n : nat, 1 * n = n\n\nPremises:\nInductive nat : Set := O : nat | S : nat -> nat Arguments S _%nat_scope\nNat.eq_mul_1 : forall n m : nat, n * m = 1 < -> n = 1 /\\ m = 1\nNat.mul_eq_1 : forall n m : nat, n * m = 1 < -> n = 1 /\\ m = 1\nNat.mul_1_l : forall n : nat, 1 * n = n\nNat.mul_1_r : forall n : nat, n * 1 = n\nNat.pow_0_r : forall a : nat, a ^ 0 = 1\nNat.div_1_r : forall a : nat, a / 1 = a\nNat.add_1_l : forall n : nat, 1 + n = S n\nNat.add_1_r : forall n : nat, n + 1 = S n\nNat.lt_1_r : forall n : nat, n < 1 < -> n = 0\nNat.mul_id_r : forall n m : nat, n <> 0 -> n * m = n < -> m = 1\nNat.mul_id_l : forall n m : nat, m <> 0 -> n * m = m < -> n = 1\nNat.log2_up_eqn : forall a : nat, 1 < a -> Nat.log2_up a = S (Nat.log2 (Nat.pred a))\nNat.gauss : forall n m p : nat, Nat.divide n (m * p) -> Nat.gcd n m = 1 -> Nat.divide n p\nNat.gcd_1_lcm_mul : forall n m : nat, n <> 0 -> m <> 0 -> Nat.gcd n m = 1 < -> Nat.lcm n m = n * m\nNat.one_succ = eq_refl : 1 = 1\nodd_even_lem : forall p q : nat, 2 * p + 1 <> 2 * q\nNat.Odd = fun n : nat => exists m : nat, n = 2 * m + 1 : nat -> Prop Arguments Nat.Odd _%nat_scope\nNat.lt_1_l : forall n m : nat, 0 < n -> n < m -> 1 < m\nNat.mul_0_r : forall n : nat, n * 0 = 0\nNat.mul_0_l : forall n : nat, 0 * n = 0\nNat.double_below : forall n m : nat, n <= m -> 2 * n < 2 * m + 1\nNat.mul_2_mono_l : forall n m : nat, n < m -> 1 + 2 * n < 2 * m\nNat.double_above : forall n m : nat, n < m -> 2 * n + 1 < 2 * m\nNat.eq_square_0 : forall n : nat, n * n = 0 < -> n = 0\nNat.lt_0_1 = (fun lemma : 1 = 1 => Morphisms.Reflexive_partial_app_morphism (Morphisms.subrelation_proper Nat.lt_wd tt (Morphisms.subrelation_respectful (Morphisms.subrelation_refl eq) (Morphisms.subrelation_respectful (Morphisms.subrelation_refl eq) Morphisms.iff_flip_impl_subrelation))) (Morphisms.reflexive_proper_proxy RelationClasses.Equivalence_Reflexive 0) 1 1 lemma) Nat.one_succ (Nat.lt_succ_diag_r 0) : 0 < 1\nNat.double_twice : forall n : nat, Nat.double n = 2 * n\nNat.div2_double : forall n : nat, Nat.div2 (2 * n) = n\nNat.le_0_1 = Nat.lt_le_incl 0 1 Nat.lt_0_1 : 0 <= 1\nNat.add_0_r : forall n : nat, n + 0 = n\nNnat.Nat2N.id : forall n : nat, BinNat.N.to_nat (BinNat.N.of_nat n) = n\nNat.add_0_l : forall n : nat, 0 + n = n\nNat.sub_diag : forall n : nat, n - n = 0\nNat.pred_succ : forall n : nat, Nat.pred (S n) = n\nNat.sub_0_r : forall n : nat, n - 0 = n\nNat.div2_succ_double : forall n : nat, Nat.div2 (S (2 * n)) = n\nNat.pow_2_r : forall a : nat, a ^ 2 = a * a\nNat.testbit_even_0 : forall a : nat, Nat.testbit (2 * a) 0 = false\nNat.log2_eq_succ_is_pow2 : forall a : nat, Nat.log2 (S a) = S (Nat.log2 a) -> exists b : nat, S a = 2 ^ b\nNat.succ_inj_wd : forall n1 n2 : nat, S n1 = S n2 < -> n1 = n2\nNat.bit0_odd : forall a : nat, Nat.testbit a 0 = Nat.odd a"}, {"role": "assistant", "content": "```intros n. apply Nat.mul_1_l.```"}], "original": "intros n. apply Nat.mul_1_l.", "succ": true}]