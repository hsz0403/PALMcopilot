[{"history": {"proof": "induction s as [| [x y] s' IHs]. - simpl. reflexivity. - simpl. shelve.", "repairs": ["", "", "", "", "", "", ""], "exceptions": []}, "chat": [{"role": "user", "content": "I will give you a Coq proof state, including both hypotheses and a specific goal and your need to prove it. Your response should be a singular code block of Coq proof starting with \"```coq\n\", ending with \"Qed.\", without any additional explanation or commentary. Follow to these guidelines:\nIntroduce variables using unique names to avoid any conflicts.\nKeep each command distinct and separated, avoid concatenations like ';' or '[cmd|cmd]'.\nOrganize your proof with bullets like '-', '+', and '*' instead of braces ({, }). Shift to their double symbols like '--' and '++', when necessary.\nEffectively use given premises, follow the syntax and structure demonstrated in the examples provided.\n\nExample 1:\n\nHypotheses:\nn, m: nat\nIHn: m + n = n + m\n\nGoal:\nm + S n = S n + m\n\nProof:\n```coq\nsimpl. rewrite <- IHn. auto.\nQed.```\n\nExample 2:\nHypotheses:\n\nGoal:\nforall n m : nat, m + n = n + m\n\n```coq\nintros n m. induction n.\n- simpl. auto.\n- simpl. rewrite <- IHn. auto.\nQed.```\n\nSolve This Proof State:\n\nHypotheses:\nS: Type\nT: Type\ns: seq (S * T)\n\nGoal:\nunzip2 (belast s) = belast (unzip2 s)\n\nPremises:\nbelast = fun (T : Type) (s : seq T) => match s with | [::] => [::] | h :: s0 => seq.belast h s0 end : forall T : Type, seq T -> seq T Argument T is implicit and maximally inserted Argument scopes are [type_scope seq_scope]\nNotation seq := list\nunzip2 = fun S T : Type => map snd : forall S T : Type, seq (S * T) -> seq T Arguments S, T are implicit and maximally inserted Argument scopes are [type_scope type_scope seq_scope]\nunzip1_belast : forall s0 : seq (?S * ?T), unzip1 (belast s0) = belast (unzip1 s0) where ?S : [S : Type T : Type s : seq (S * T) |- Type] ?T : [S : Type T : Type s : seq (S * T) |- Type]\nzip_unzip : forall (S T : Type) (s : seq (S * T)), zip (unzip1 s) (unzip2 s) = s\nunzip2_rcons : forall (s0 : seq (?S * ?T)) (h : ?S * ?T), unzip2 (rcons s0 h) = rcons (unzip2 s0) (snd h) where ?S : [S : Type T : Type s : seq (S * T) |- Type] ?T : [S : Type T : Type s : seq (S * T) |- Type]\nunzip2_zip : forall (S T : Type) (s : seq S) (t : seq T), ssrnat.leq (size t) (size s) -> unzip2 (zip s t) = t\nbehead_rev : forall s0 : seq ?T, behead (rev s0) = rev (belast s0) where ?T : [S : Type T : Type s : seq (S * T) |- Type]\nsize_unzip2 : forall s0 : seq (?T * ?T0), size (unzip2 s0) = size s0 where ?T : [S : Type T : Type s : seq (S * T) |- Type] ?T0 : [S : Type T : Type s : seq (S * T) |- Type]\nsize_unzip1 : forall s0 : seq (?T * ?T0), size (unzip1 s0) = size s0 where ?T : [S : Type T : Type s : seq (S * T) |- Type] ?T0 : [S : Type T : Type s : seq (S * T) |- Type]\nsize_zip : forall (S T : Type) (s : seq S) (t : seq T), size (zip s t) = ssrnat.minn (size s) (size t)\nunzip1_rcons : forall (s0 : seq (?S * ?T)) (h : ?S * ?T), unzip1 (rcons s0 h) = rcons (unzip1 s0) (fst h) where ?S : [S : Type T : Type s : seq (S * T) |- Type] ?T : [S : Type T : Type s : seq (S * T) |- Type]\nseq.belast = fun T : Type => fix belast (x : T) (s : seq T) {struct s} : seq T := match s with | [::] => [::] | x' :: s' => x :: belast x' s' end : forall T : Type, T -> seq T -> seq T Argument T is implicit and maximally inserted Argument scopes are [type_scope _ seq_scope]\nbehead_rcons : forall (s0 : seq ?T) (t : ?T), (0 < size s0)%nat -> behead (rcons s0 t) = rcons (behead s0) t where ?T : [S : Type T : Type s : seq (S * T) |- Type]\nunzip1 = fun S T : Type => map fst : forall S T : Type, seq (S * T) -> seq S Arguments S, T are implicit and maximally inserted Argument scopes are [type_scope type_scope seq_scope]\nrev_cons : forall (T : Type) (x : T) (s : seq T), rev (x :: s) = rcons (rev s) x\nsize_tally_seq : forall (T : eqtype.Equality.type) (bs : seq (eqtype.Equality.sort T * nat)), size (tally_seq (T:=T) bs) = sumn (unzip2 bs)\nzip = fun S T : Type => fix zip (s : seq S) (t : seq T) {struct t} : seq (S * T) := match s with | [::] => [::] | x :: s' => match t with | [::] => [::] | y :: t' => (x, y) :: zip s' t' end end : forall S T : Type, seq S -> seq T -> seq (S * T) Arguments S, T are implicit and maximally inserted Argument scopes are [type_scope type_scope seq_scope seq_scope]\nsize_rev : forall (T : Type) (s : seq T), size (rev s) = size s\nTauto.clause = fun Term' Annot : Type => seq (Term' * Annot) : Type -> Type -> Type Argument scopes are [type_scope type_scope]\nTauto.cnf = fun Term' Annot : Type => seq (Tauto.clause Term' Annot) : Type -> Type -> Type Argument scopes are [type_scope type_scope]\nshape = fun T : Type => map size : forall T : Type, seq (seq T) -> seq nat Argument T is implicit and maximally inserted Argument scopes are [type_scope seq_scope]\nlt = fun n m : nat => (S n <= m)%nat : nat -> nat -> Prop Argument scopes are [nat_scope nat_scope]\nrcons = fun T : Type => fix rcons (s : seq T) (z : T) {struct s} : seq T := match s with | [::] => [:: z] | x :: s' => x :: rcons s' z end : forall T : Type, seq T -> T -> seq T Argument T is implicit and maximally inserted Argument scopes are [type_scope seq_scope _]\nsize = fun T : Type => fix size (s : seq T) : nat := match s with | [::] => 0%nat | _ :: s' => S (size s') end : forall T : Type, seq T -> nat Argument T is implicit and maximally inserted Argument scopes are [type_scope seq_scope]\nssrnat.minn = fun m n : nat => if ssrnat.leq (S m) n then m else n : nat -> nat -> nat Argument scopes are [nat_scope nat_scope]\neqtype.Equality.sort = fun t : eqtype.Equality.type => let (sort, _) := t in sort : eqtype.Equality.type -> Type\nInductive list (A : Type) : Type := nil : seq A | cons : A -> seq A -> seq A For nil: Arguments are renamed to T For cons: Arguments are renamed to T, x, s For nil: Argument T is implicit and maximally inserted For cons: Argument T is implicit and maximally inserted For list: Argument scope is [type_scope] For nil: Argument scope is [type_scope] For cons: Argument scopes are [type_scope _ seq_scope]\nRecord linear (C : Type) : Type := mk_linear { num : Ring_polynom.PExpr C; denum : Ring_polynom.PExpr C; condition : seq (Ring_polynom.PExpr C) } For mk_linear: Argument C is implicit For linear: Argument scope is [type_scope] For mk_linear: Argument scopes are [type_scope _ _ seq_scope]\nTauto.cnf_checker_sound : forall (Env Term' Annot : Type) (eval' : Env -> Term' -> Prop) (Witness : Type) (checker : seq (Term' * Annot) -> Witness -> bool), (forall (t : seq (Term' * Annot)) (w : Witness), checker t w = true -> forall env : Env, Refl.make_impl (Tauto.eval_tt eval' env) t False) -> forall (t : Tauto.cnf Term' Annot) (w : seq Witness), Tauto.cnf_checker checker t w = true -> forall env : Env, Tauto.eval_cnf eval' env t\nList.split_length_l : forall (A B : Type) (l : seq (A * B)), length (fst (List.split l)) = length l\nList.split_length_r : forall (A B : Type) (l : seq (A * B)), length (snd (List.split l)) = length l\nList.split_combine : forall (A B : Type) (l : seq (A * B)), let (l1, l2) := List.split l in List.combine l1 l2 = l\nList.split_nth : forall (A B : Type) (l : seq (A * B)) (n : nat) (d : A * B), List.nth n l d = (List.nth n (fst (List.split l)) (fst d), List.nth n (snd (List.split l)) (snd d))\nnth_zip_cond : forall (S0 T : Type) (p : S0 * T) (s : seq S0) (t : seq T) (i : nat), nth p (zip s t) i = (if ssrnat.leq (Datatypes.S i) (size (zip s t)) then (nth (fst p) s i, nth (snd p) t i) else p)\nInductive prod (A B : Type) : Type := pair : A -> B -> A * B For pair: Arguments A, B are implicit and maximally inserted For prod: Argument scopes are [type_scope type_scope] For pair: Argument scopes are [type_scope type_scope _ _]\nList.split : forall A B : Type, seq (A * B) -> seq A * seq B\nTauto.ror_clause_cnf : forall Term' Annot : Type, (Term' -> bool) -> (Term' -> Term' -> option Term') -> seq (Term' * Annot) -> seq (Tauto.clause Term' Annot) -> seq (Tauto.clause Term' Annot) * seq Annot\nrev = fun (T : Type) (s : seq T) => catrev s [::] : forall T : Type, seq T -> seq T Argument T is implicit and maximally inserted Argument scopes are [type_scope seq_scope]\nList.combine : forall A B : Type, seq A -> seq B -> seq (A * B)\nRing_polynom.add_pow_list : forall R : Type, R -> N -> seq (R * positive) -> seq (R * positive)\nTauto.ror_cnf : forall Term' Annot : Type, (Term' -> bool) -> (Term' -> Term' -> option Term') -> seq (seq (Term' * Annot)) -> seq (Tauto.clause Term' Annot) -> Tauto.cnf Term' Annot * seq Annot\nsumn = foldr ssrnat.addn 0%nat : seq nat -> nat Argument scope is [seq_scope]"}, {"role": "assistant", "content": "```coq\ninduction s as [| [x y] s' IHs].\n- simpl. reflexivity.\n- simpl. rewrite unzip2_rcons, IHs. reflexivity.\nQed.\n```"}], "original": "induction s as [| [x y] s' IHs]. - simpl. reflexivity. - simpl.", "succ": false}]