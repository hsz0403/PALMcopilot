[{"history": {"proof": "shelve.", "repairs": [""], "exceptions": []}, "chat": [{"role": "user", "content": "I will give you a Coq proof state, including both hypotheses and a specific goal and your need to prove it. Your response should be a singular code block of Coq proof starting with \"```coq\n\", ending with \"Qed.\", without any additional explanation or commentary. Follow to these guidelines:\nIntroduce variables using unique names to avoid any conflicts.\nKeep each command distinct and separated, avoid concatenations like ';' or '[cmd|cmd]'.\nOrganize your proof with bullets like '-', '+', and '*' instead of braces ({, }). Shift to their double symbols like '--' and '++', when necessary.\nEffectively use given premises, follow the syntax and structure demonstrated in the examples provided.\n\nExample 1:\n\nHypotheses:\nn, m: nat\nIHn: m + n = n + m\n\nGoal:\nm + S n = S n + m\n\nProof:\n```coq\nsimpl. rewrite <- IHn. auto.\nQed.```\n\nExample 2:\nHypotheses:\n\nGoal:\nforall n m : nat, m + n = n + m\n\n```coq\nintros n m. induction n.\n- simpl. auto.\n- simpl. rewrite <- IHn. auto.\nQed.```\n\nSolve This Proof State:\n\nHypotheses:\nK: AbsRing\nV: NormedModule K\n\nGoal:\nnorm zero = 0\n\nPremises:\nnorm = NormedModule.norm K (NormedModuleAux.Pack K V (NormedModule.class K V) V) (NormedModule.class K V) : V -> R\nzero = fun G : AbelianGroup => AbelianGroup.zero G (AbelianGroup.class G) : forall G : AbelianGroup, G Argument G is implicit and maximally inserted\nNotation NormedModule := NormedModule.type\nnorm_eq_zero : forall x : V, norm x = 0 -> x = zero\nRecord mixin_of (K : AbsRing) (V : NormedModuleAux K) : Type := Mixin { norm : V -> R; norm_factor : R; ax1 : forall x y : V, norm (plus x y) <= norm x + norm y; ax2 : forall (l : K) (x : V), norm (scal l x) <= abs l * norm x; ax3 : forall (x y : V) (eps : R), norm (minus y x) < eps -> ball x eps y; ax4 : forall (x y : V) (eps : posreal), ball x eps y -> norm (minus y x) < norm_factor * eps; ax5 : forall x : V, norm x = 0 -> x = zero } For Mixin: Argument scopes are [_ _ function_scope R_scope function_scope function_scope function_scope function_scope function_scope]\nNormedModule.Mixin : forall (K : AbsRing) (V : NormedModuleAux K) (norm : V -> R) (norm_factor : R), (forall x y : V, norm (plus x y) <= norm x + norm y) -> (forall (l : K) (x : V), norm (scal l x) <= abs l * norm x) -> (forall (x y : V) (eps : R), norm (minus y x) < eps -> ball x eps y) -> (forall (x y : V) (eps : posreal), ball x eps y -> norm (minus y x) < norm_factor * eps) -> (forall x : V, norm x = 0 -> x = zero) -> NormedModule.mixin_of K V\nnorm_triangle : forall x y : V, norm (plus x y) <= norm x + norm y\nabs_eq_zero : forall x : ?K, abs x = 0 -> x = zero where ?K : [K : AbsRing V : NormedModule K |- AbsRing]\nmult_zero_l : forall x : ?K, mult zero x = zero where ?K : [K : AbsRing V : NormedModule K |- Ring]\nmult_zero_r : forall x : ?K, mult x zero = zero where ?K : [K : AbsRing V : NormedModule K |- Ring]\nscal_zero_l : forall u : ?V, scal zero u = zero where ?K : [K : AbsRing V : NormedModule K |- Ring] ?V : [K : AbsRing V : NormedModule K |- ModuleSpace ?K]\nscal_zero_r : forall x : ?K, scal x zero = zero where ?K : [K : AbsRing V : NormedModule K |- Ring] ?V : [K : AbsRing V : NormedModule K |- ModuleSpace ?K]\nnorm_scal : forall (l : K) (x : V), norm (scal l x) <= abs l * norm x\nAbsRing.ax1 : forall (K : Ring) (m : AbsRing.mixin_of K), AbsRing.abs K m zero = 0\nplus_zero_l : forall x : ?G, plus zero x = x where ?G : [K : AbsRing V : NormedModule K |- AbelianGroup]\nplus_zero_r : forall x : ?G, plus x zero = x where ?G : [K : AbsRing V : NormedModule K |- AbelianGroup]\nminus_eq_zero : forall x : ?G, minus x x = zero where ?G : [K : AbsRing V : NormedModule K |- AbelianGroup]\nminus_zero_r : forall x : ?G, minus x zero = x where ?G : [K : AbsRing V : NormedModule K |- AbelianGroup]\nplus_opp_l : forall x : ?G, plus (opp x) x = zero where ?G : [K : AbsRing V : NormedModule K |- AbelianGroup]\nplus_opp_r : forall x : ?G, plus x (opp x) = zero where ?G : [K : AbsRing V : NormedModule K |- AbelianGroup]\nAbsRing.ax5 : forall (K : Ring) (m : AbsRing.mixin_of K) (x : K), AbsRing.abs K m x = 0 -> x = zero\nsum_n_m_const_zero : forall n m : nat, sum_n_m (fun _ : nat => zero) n m = zero where ?G : [K : AbsRing V : NormedModule K |- AbelianGroup]\nNormedModule.ax5 : forall (K : AbsRing) (V : NormedModuleAux K) (m : NormedModule.mixin_of K V) (x : V), NormedModule.norm K V m x = 0 -> x = zero\nabs_zero = fun K : AbsRing => AbsRing.ax1 (Ring.Pack K (AbsRing.class K) K) (AbsRing.class K) : forall K : AbsRing, abs zero = 0 Argument K is implicit and maximally inserted\nnorm_compat1 : forall (x y : V) (eps : R), norm (minus y x) < eps -> ball x eps y\nsum_n_m_zero : forall (a : nat -> ?G) (n m : nat), (m < n)%nat -> sum_n_m a n m = zero where ?G : [K : AbsRing V : NormedModule K |- AbelianGroup]\nnorm_compat2 : forall (x y : V) (eps : posreal), ball x eps y -> norm (minus y x) < norm_factor * eps\nabs_ge_0 : forall x : ?K, 0 <= abs x where ?K : [K : AbsRing V : NormedModule K |- AbsRing]\nAbsRing.Mixin : forall (K : Ring) (abs : K -> R), abs zero = 0 -> abs (opp one) = 1 -> (forall x y : K, abs (plus x y) <= abs x + abs y) -> (forall x y : K, abs (mult x y) <= abs x * abs y) -> (forall x : K, abs x = 0 -> x = zero) -> AbsRing.mixin_of K\nRsqr_0 = Rmult_0_l 0 : 0\u00b2 = 0\nRecord mixin_of (K : Ring) : Type := Mixin { abs : K -> R; ax1 : abs zero = 0; ax2 : abs (opp one) = 1; ax3 : forall x y : K, abs (plus x y) <= abs x + abs y; ax4 : forall x y : K, abs (mult x y) <= abs x * abs y; ax5 : forall x : K, abs x = 0 -> x = zero } For Mixin: Argument scopes are [_ function_scope _ _ function_scope function_scope function_scope]\nopp_zero = fun G : AbelianGroup => eq_ind (plus (opp zero) zero) (fun s : G => s = zero) (plus_opp_l zero) (opp zero) (plus_zero_r (opp zero)) : forall G : AbelianGroup, opp zero = zero Argument G is implicit and maximally inserted\nRmult_integral : forall r1 r2 : R, r1 * r2 = 0 -> r1 = 0 \\/ r2 = 0\nRmult_0_r : forall r : R, r * 0 = 0\nRmult_0_l : forall r : R, 0 * r = 0\nRopp_eq_0_compat : forall r : R, r = 0 -> - r = 0\nRlt_0_2 = Rlt_trans 0 (0 + 1) 2 (Rlt_n_Sn 0) (eq_ind_r (fun r : R => r < 2) (Rplus_lt_compat_l R1 0 R1 (let H : 0 + 1 = R1 := Rplus_0_l R1 in eq_ind (0 + 1) (fun r : R => 0 < r) (Rlt_n_Sn 0) R1 H)) (Rplus_comm 0 1)) : 0 < 2\nsign_0 = let s := total_order_T 0 0 in match s as s0 return (match s0 with | inleft (left _) => 1 | inleft (right _) => 0 | inright _ => -1 end = 0) with | inleft s0 => match s0 as s1 return ((if s1 then 1 else 0) = 0) with | left H => False_ind (1 = 0) (Rlt_irrefl 0 H) | right H => H end | inright H => False_ind (-1 = 0) (Rlt_irrefl 0 H) end : sign 0 = 0\nsin_eq_O_2PI_0 : forall x : R, 0 <= x -> x <= 2 * PI -> sin x = 0 -> x = 0 \\/ x = PI \\/ x = 2 * PI\nsign_neq_0 : forall x : R, x <> 0 -> sign x <> 0\nRopp_neq_0_compat : forall r : R, r <> 0 -> - r <> 0\nRlt_0_1 = let H : 1\u00b2 = 1 := Rmult_1_r 1 in eq_ind 1\u00b2 (fun r : R => 0 < r) (Rlt_0_sqr 1 (fun H0 : 1 = 0 => R1_neq_R0 H0)) 1 H : 0 < 1\npow_nonzero : forall (x : R) (n : nat), x <> 0 -> x ^ n <> 0"}, {"role": "assistant", "content": "```coq\nrewrite norm_eq_zero. auto.\nQed.```"}], "original": "rewrite norm_eq_zero. auto.", "succ": false}]