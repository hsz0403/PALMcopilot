[{"history": {"proof": "unfold abs. destruct K as [G [abs [H1 H2 H3 H4 H5]]]. shelve.", "repairs": ["", "", ""], "exceptions": []}, "chat": [{"role": "user", "content": "I will give you a Coq proof state, including both hypotheses and a specific goal and your need to prove it. Your response should be a singular code block of Coq proof starting with \"```coq\n\", ending with \"Qed.\", without any additional explanation or commentary. Follow to these guidelines:\nIntroduce variables using unique names to avoid any conflicts.\nKeep each command distinct and separated, avoid concatenations like ';' or '[cmd|cmd]'.\nOrganize your proof with bullets like '-', '+', and '*' instead of braces ({, }). Shift to their double symbols like '--' and '++', when necessary.\nEffectively use given premises, follow the syntax and structure demonstrated in the examples provided.\n\nExample 1:\n\nHypotheses:\nn, m: nat\nIHn: m + n = n + m\n\nGoal:\nm + S n = S n + m\n\nProof:\n```coq\nsimpl. rewrite <- IHn. auto.\nQed.```\n\nExample 2:\nHypotheses:\n\nGoal:\nforall n m : nat, m + n = n + m\n\n```coq\nintros n m. induction n.\n- simpl. auto.\n- simpl. rewrite <- IHn. auto.\nQed.```\n\nSolve This Proof State:\n\nHypotheses:\nK: AbsRing\n\nGoal:\nabs zero = 0\n\nPremises:\nzero = fun G : AbelianGroup => AbelianGroup.zero G (AbelianGroup.class G) : forall G : AbelianGroup, G Argument G is implicit and maximally inserted\nabs = AbsRing.abs (Ring.Pack K (AbsRing.class K) K) (AbsRing.class K) : K -> R\nRecord mixin_of (K : Ring) : Type := Mixin { abs : K -> R; ax1 : abs zero = 0; ax2 : abs (opp one) = 1; ax3 : forall x y : K, abs (plus x y) <= abs x + abs y; ax4 : forall x y : K, abs (mult x y) <= abs x * abs y; ax5 : forall x : K, abs x = 0 -> x = zero } For Mixin: Argument scopes are [_ function_scope _ _ function_scope function_scope function_scope]\nAbsRing.Mixin : forall (K : Ring) (abs : K -> R), abs zero = 0 -> abs (opp one) = 1 -> (forall x y : K, abs (plus x y) <= abs x + abs y) -> (forall x y : K, abs (mult x y) <= abs x * abs y) -> (forall x : K, abs x = 0 -> x = zero) -> AbsRing.mixin_of K\nmult_zero_l : forall x : ?K, mult zero x = zero where ?K : [K : AbsRing |- Ring]\nmult_zero_r : forall x : ?K, mult x zero = zero where ?K : [K : AbsRing |- Ring]\nplus_zero_l : forall x : ?G, plus zero x = x where ?G : [K : AbsRing |- AbelianGroup]\nplus_zero_r : forall x : ?G, plus x zero = x where ?G : [K : AbsRing |- AbelianGroup]\nminus_eq_zero : forall x : ?G, minus x x = zero where ?G : [K : AbsRing |- AbelianGroup]\nminus_zero_r : forall x : ?G, minus x zero = x where ?G : [K : AbsRing |- AbelianGroup]\nplus_opp_l : forall x : ?G, plus (opp x) x = zero where ?G : [K : AbsRing |- AbelianGroup]\nplus_opp_r : forall x : ?G, plus x (opp x) = zero where ?G : [K : AbsRing |- AbelianGroup]\nsum_n_m_const_zero : forall n m : nat, sum_n_m (fun _ : nat => zero) n m = zero where ?G : [K : AbsRing |- AbelianGroup]\nsum_n_m_zero : forall (a : nat -> ?G) (n m : nat), (m < n)%nat -> sum_n_m a n m = zero where ?G : [K : AbsRing |- AbelianGroup]\nAbsRing.sort = fun t : AbsRing => let (sort, _, _) := t in sort : AbsRing -> Type AbsRing.sort is a coercion\nopp_zero = fun G : AbelianGroup => eq_ind (plus (opp zero) zero) (fun s : G => s = zero) (plus_opp_l zero) (opp zero) (plus_zero_r (opp zero)) : forall G : AbelianGroup, opp zero = zero Argument G is implicit and maximally inserted\nAbsRing.ax1 : forall (K : Ring) (m : AbsRing.mixin_of K), AbsRing.abs K m zero = 0\nAbsRing.ax5 : forall (K : Ring) (m : AbsRing.mixin_of K) (x : K), AbsRing.abs K m x = 0 -> x = zero\nAbsRing.Ring = fun cT : AbsRing => let xT := let '{| AbsRing.sort := T |} := cT in T in Ring.Pack cT (AbsRing.class cT : AbsRing.class_of xT) xT : AbsRing -> Ring AbsRing.Ring is a coercion\nAbsRing.AbelianGroup = fun cT : AbsRing => let xT := let '{| AbsRing.sort := T |} := cT in T in AbelianGroup.Pack cT (AbsRing.class cT : AbsRing.class_of xT) xT : AbsRing -> AbelianGroup AbsRing.AbelianGroup is a coercion\nplus_reg_r : forall r x y : ?G, plus x r = plus y r -> x = y where ?G : [K : AbsRing |- AbelianGroup]\nplus_comm : forall x y : ?G, plus x y = plus y x where ?G : [K : AbsRing |- AbelianGroup]\nmult_distr_l : forall x y z : ?K, mult x (plus y z) = plus (mult x y) (mult x z) where ?K : [K : AbsRing |- Ring]\nmult_distr_r : forall x y z : ?K, mult (plus x y) z = plus (mult x z) (mult y z) where ?K : [K : AbsRing |- Ring]\nAbsRing.Pack : forall sort : Type, AbsRing.class_of sort -> Type -> AbsRing\nsum_n_m = fun (G : AbelianGroup) (a : nat -> G) (n m : nat) => iter_nat plus zero a n m : forall G : AbelianGroup, (nat -> G) -> nat -> nat -> G Argument G is implicit and maximally inserted Argument scopes are [_ function_scope nat_scope nat_scope]\niter_nat_S : forall (op : ?T -> ?T -> ?T) (x0 : ?T) (a : nat -> ?T) (n m : nat), iter_nat op x0 (fun n0 : nat => a (S n0)) n m = iter_nat op x0 a (S n) (S m) where ?T : [K : AbsRing |- Type]\nRmult_eq_0_compat : forall r1 r2 : R, r1 = 0 \\/ r2 = 0 -> r1 * r2 = 0\nln_1 = eq_ind (exp 0) (fun r : R => ln r = 0) (eq_ind_r (fun r : R => r = 0) eq_refl (ln_exp 0)) 1 exp_0 : ln 1 = 0\nRabs_eq_0 : forall x : R, Rabs x = 0 -> x = 0\nRopp_eq_0_compat : forall r : R, r = 0 -> - r = 0\nsin_PI = let H : (sin PI)\u00b2 + (cos PI)\u00b2 = 1 := sin2_cos2 PI in let H0 : (sin PI)\u00b2 + (-1)\u00b2 = 1 := eq_ind (cos PI) (fun r : R => (sin PI)\u00b2 + r\u00b2 = 1) H (-1) cos_PI in let H1 : (sin PI)\u00b2 + 1\u00b2 = 1 := eq_ind_r (fun r : R => (sin PI)\u00b2 + r = 1) H0 (Rsqr_neg 1) in let H2 : (sin PI)\u00b2 + 1 = 1 := eq_ind 1\u00b2 (fun r : R => (sin PI)\u00b2 + r = 1) H1 1 Rsqr_1 in let H3 : (sin PI)\u00b2 = 0 := Rplus_eq_reg_l 1 (sin PI)\u00b2 0 (eq_ind_r (fun r : R => 1 + (sin PI)\u00b2 = r) (eq_ind_r (fun r : R => r = 1) H2 (Rplus_comm 1 (sin PI)...\nRminus_diag_uniq : forall r1 r2 : R, r1 - r2 = 0 -> r1 = r2\nR_dist_refl : forall x y : R, R_dist x y = 0 < -> x = y\neq_IZR : forall n m : Z, IZR n = IZR m -> n = m\nRminus_diag_eq : forall r1 r2 : R, r1 = r2 -> r1 - r2 = 0\nRlt_0_1 = let H : 1\u00b2 = 1 := Rmult_1_r 1 in eq_ind 1\u00b2 (fun r : R => 0 < r) (Rlt_0_sqr 1 (fun H0 : 1 = 0 => R1_neq_R0 H0)) 1 H : 0 < 1\nRmult_eq_reg_l : forall r r1 r2 : R, r * r1 = r * r2 -> r <> 0 -> r1 = r2\nPI = 2 * PI2 : R\nRge = fun r1 r2 : R => r1 > r2 \\/ r1 = r2 : R -> R -> Prop Argument scopes are [R_scope R_scope]\nRle = fun r1 r2 : R => r1 < r2 \\/ r1 = r2 : R -> R -> Prop Argument scopes are [R_scope R_scope]\nRMicromega.Q2R_0 = Rmult_0_l (/ IZR (Z.pos (QArith_base.Qden {| QArith_base.Qnum := 0; QArith_base.Qden := 1 |}))) : Qreals.Q2R {| QArith_base.Qnum := 0; QArith_base.Qden := 1 |} = 0"}, {"role": "assistant", "content": "```coq\nunfold abs. destruct K as [G [abs [H1 H2 H3 H4 H5]]]. rewrite H1. reflexivity.\nQed.```"}], "original": "unfold abs. destruct K as [G [abs [H1 H2 H3 H4 H5]]]. rewrite H1. reflexivity.", "succ": false}]