[{"history": {"proof": "intros x. unfold plus, opp, zero. rewrite AbelianGroup.ax4. reflexivity.", "repairs": ["", "", "", ""], "exceptions": []}, "chat": [{"role": "user", "content": "I will give you a Coq proof state, including both hypotheses and a specific goal and your need to prove it. Your response should be a singular code block of Coq proof starting with \"```coq\n\", ending with \"Qed.\", without any additional explanation or commentary. Follow to these guidelines:\nIntroduce variables using unique names to avoid any conflicts.\nKeep each command distinct and separated, avoid concatenations like ';' or '[cmd|cmd]'.\nOrganize your proof with bullets like '-', '+', and '*' instead of braces ({, }). Shift to their double symbols like '--' and '++', when necessary.\nEffectively use given premises, follow the syntax and structure demonstrated in the examples provided.\n\nExample 1:\n\nHypotheses:\nn, m: nat\nIHn: m + n = n + m\n\nGoal:\nm + S n = S n + m\n\nProof:\n```coq\nsimpl. rewrite <- IHn. auto.\nQed.```\n\nExample 2:\nHypotheses:\n\nGoal:\nforall n m : nat, m + n = n + m\n\n```coq\nintros n m. induction n.\n- simpl. auto.\n- simpl. rewrite <- IHn. auto.\nQed.```\n\nSolve This Proof State:\n\nHypotheses:\nG: AbelianGroup\n\nGoal:\nforall x : G, plus x (opp x) = zero\n\nPremises:\nopp = AbelianGroup.opp G (AbelianGroup.class G) : G -> G\nplus = AbelianGroup.plus G (AbelianGroup.class G) : G -> G -> G\nRecord mixin_of (G : Type) : Type := Mixin { plus : G -> G -> G; opp : G -> G; zero : G; ax1 : forall x y : G, plus x y = plus y x; ax2 : forall x y z : G, plus x (plus y z) = plus (plus x y) z; ax3 : forall x : G, plus x zero = x; ax4 : forall x : G, plus x (opp x) = zero } For mixin_of: Argument scope is [type_scope] For Mixin: Argument scopes are [type_scope function_scope function_scope _ function_scope function_scope function_scope function_scope]\nplus_zero_r : forall x : G, plus x zero = x\nplus_comm : forall x y : G, plus x y = plus y x\nplus_assoc : forall x y z : G, plus x (plus y z) = plus (plus x y) z\nminus = fun x y : G => plus x (opp y) : G -> G -> G\nByte.of_N_via_nat : forall x : N, Byte.of_N x = Byte.of_nat (N.to_nat x)\nByte.byte_dec_lb : forall x y : Byte.byte, x = y -> Byte.eqb x y = true\nByte.eqb_false : forall x y : Byte.byte, Byte.eqb x y = false -> x <> y\nByte.to_of_N_iff : forall (x : N) (y : Byte.byte), Byte.of_N x = Some y < -> Byte.to_N y = x\nByte.of_nat_None_iff : forall x : nat, Byte.of_nat x = None < -> (255 < x)%nat\nByte.of_N_None_iff : forall x : N, Byte.of_N x = None < -> (255 < x)%N\nAbelianGroup.ax3 : forall (G : Type) (m : AbelianGroup.mixin_of G) (x : G), AbelianGroup.plus G m x (AbelianGroup.zero G m) = x\nzero = AbelianGroup.zero G (AbelianGroup.class G) : G\nAbelianGroup.ax1 : forall (G : Type) (m : AbelianGroup.mixin_of G) (x y : G), AbelianGroup.plus G m x y = AbelianGroup.plus G m y x\nAbelianGroup.ax2 : forall (G : Type) (m : AbelianGroup.mixin_of G) (x y z : G), AbelianGroup.plus G m x (AbelianGroup.plus G m y z) = AbelianGroup.plus G m (AbelianGroup.plus G m x y) z\nssrbool.mem = fun (T : Type) (pT : ssrbool.predType T) => let '{| ssrbool.pred_sort := pred_sort; ssrbool.topred := toP |} as pT0 := pT return (ssrbool.pred_sort pT0 -> ssrbool.mem_pred T) in fun A : ssrbool.pred_sort {| ssrbool.pred_sort := pred_sort; ssrbool.topred := toP |} => ssrbool.Mem (T:=T) (fun x : T => toP A x) : forall (T : Type) (pT : ssrbool.predType T), ssrbool.pred_sort pT -> ssrbool.mem_pred T Arguments are renamed to T, pT, A Arguments T, pT are implicit and maximally inserted Argument scopes are [type_scope _ _]\nprojT2 : forall (A : Type) (P : A -> Type) (x : {x : A & P x}), P (projT1 x)\nseq.cons_uniq : forall (T : eqtype.Equality.type) (x : eqtype.Equality.sort T) (s : list (eqtype.Equality.sort T)), seq.uniq (x :: s) = (negb (ssrbool.in_mem x (ssrbool.mem s)) && seq.uniq s)%bool\nssrbool.in_mem = fun (T : Type) (x : T) (mp : ssrbool.mem_pred T) => ssrbool.pred_of_mem mp x : forall T : Type, T -> ssrbool.mem_pred T -> bool Argument T is implicit and maximally inserted Argument scopes are [type_scope _ _]\nBinIntDef.Z.opp = fun x : Z => match x with | 0%Z => 0%Z | Z.pos x0 => Z.neg x0 | Z.neg x0 => Z.pos x0 end : Z -> Z Argument scope is [Z_scope]\nexistT : forall (A : Type) (P : A -> Type) (x : A), P x -> {x : A & P x}\nZ.lt = fun x y : Z => (x ?= y)%Z = Lt : Z -> Z -> Prop Argument scopes are [Z_scope Z_scope]\nBinIntDef.Z.succ = fun x : Z => (x + 1)%Z : Z -> Z Argument scope is [Z_scope]\nBinIntDef.Z.pred = fun x : Z => (x + -1)%Z : Z -> Z Argument scope is [Z_scope]\nInit.Nat.div = fun x y : nat => match y with | 0%nat => y | S y' => fst (Init.Nat.divmod x y' 0 y') end : nat -> nat -> nat Argument scopes are [nat_scope nat_scope]\nBinIntDef.Z.pow = fun x y : Z => match y with | 0%Z => 1%Z | Z.pos p => BinIntDef.Z.pow_pos x p | Z.neg _ => 0%Z end : Z -> Z -> Z Argument scopes are [Z_scope Z_scope]\nInductive sigT (A : Type) (P : A -> Type) : Type := existT : forall x : A, P x -> {x : A & P x} For sigT: Argument A is implicit For existT: Argument A is implicit For sigT: Argument scopes are [type_scope type_scope] For existT: Argument scopes are [type_scope function_scope _ _]\nZ.le = fun x y : Z => (x ?= y)%Z <> Gt : Z -> Z -> Prop Argument scopes are [Z_scope Z_scope]\nZ.eqf_equiv = {| RelationClasses.Equivalence_Reflexive := fun (x : Z -> bool) (n : Z) => eq_refl; RelationClasses.Equivalence_Symmetric := fun (x y : Z -> bool) (H : Z.eqf x y) => SYM1 H; RelationClasses.Equivalence_Transitive := fun (x y z : Z -> bool) (H : Z.eqf x y) (H0 : Z.eqf y z) (n : Z) => eq_trans (H n) (H0 n) |} : RelationClasses.Equivalence Z.eqf\nseq.uniq = fun T : eqtype.Equality.type => fix uniq (s : list (eqtype.Equality.sort T)) : bool := match s with | Datatypes.nil => true | (x :: s')%list => (negb (ssrbool.in_mem x (ssrbool.mem s')) && uniq s')%bool end : forall T : eqtype.Equality.type, list (eqtype.Equality.sort T) -> bool Argument T is implicit and maximally inserted Argument scopes are [_ list_scope]\nBinIntDef.Z.add = fun x y : Z => match x with | 0%Z => y | Z.pos x' => match y with | 0%Z => x | Z.pos y' => Z.pos (x' + y') | Z.neg y' => BinIntDef.Z.pos_sub x' y' end | Z.neg x' => match y with | 0%Z => x | Z.pos y' => BinIntDef.Z.pos_sub y' x' | Z.neg y' => Z.neg (x' + y') end end : Z -> Z -> Z Argument scopes are [Z_scope Z_scope]\nZeq_bool = fun x y : Z => match (x ?= y)%Z with | Eq => true | _ => false end : Z -> Z -> bool Argument scopes are [Z_scope Z_scope]\nBinIntDef.Z.mul = fun x y : Z => match x with | 0%Z => 0%Z | Z.pos x' => match y with | 0%Z => 0%Z | Z.pos y' => Z.pos (x' * y') | Z.neg y' => Z.neg (x' * y') end | Z.neg x' => match y with | 0%Z => 0%Z | Z.pos y' => Z.neg (x' * y') | Z.neg y' => Z.pos (x' * y') end end : Z -> Z -> Z Argument scopes are [Z_scope Z_scope]\nZ.bits_inj_0 : forall a : Z, (forall n : Z, Z.testbit a n = false) -> a = 0%Z\nZ.succ_inj : forall n1 n2 : Z, Z.succ n1 = Z.succ n2 -> n1 = n2\nZ.opp_inj : forall n m : Z, (- n)%Z = (- m)%Z -> n = m\nN.succ_inj_wd : forall n1 n2 : N, N.succ n1 = N.succ n2 < -> n1 = n2\nRplus_eq_compat_l : forall r r1 r2 : R, r1 = r2 -> r + r1 = r + r2\nRminus_eq_compat_l : forall r r1 r2 : R, r1 = r2 < -> r - r1 = r - r2\nN.add_0_r : forall n : N, (n + 0)%N = n"}, {"role": "assistant", "content": "```coq\nintros x.\nunfold plus, opp, zero.\nrewrite AbelianGroup.ax4.\nreflexivity.\nQed.```"}], "original": "intros x. unfold plus, opp, zero. rewrite AbelianGroup.ax4. reflexivity.", "succ": true}]