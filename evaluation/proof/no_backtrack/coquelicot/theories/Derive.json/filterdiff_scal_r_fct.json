[{"history": {"proof": "intros F FF k f lf Hmult Hdiff. split. - unfold scal. shelve. - intros x limx. intros eps. shelve.", "repairs": ["", "", "", "", "unfinished_bullet", "", "", "", ""], "exceptions": [{"ctx": ["intros F FF k f lf Hmult Hdiff.", "split.", "-"], "tactic": "unfold is_linear.", "exn": "Cannot coerce is_linear to an evaluable reference.", "type": "not_evaluable", "handled": true}, {"ctx": ["intros F FF k f lf Hmult Hdiff.", "split.", "-"], "tactic": "intros a x y.", "exn": "No product even after head-reduction.", "type": "no_product", "handled": true}, {"ctx": ["intros F FF k f lf Hmult Hdiff.", "split.", "-", "unfold scal."], "tactic": "rewrite (Hmult a (f x) (f y)).", "exn": "The reference y was not found in the current environment.", "type": "ref_not_found", "handled": true}, {"ctx": ["intros F FF k f lf Hmult Hdiff.", "split.", "-", "unfold scal."], "tactic": "apply Hdiff.", "exn": "In environment K : AbsRing U, V : NormedModule K F : (U -> Prop) -> Prop FF : Filter F k : K f, lf : U -> V Hmult : forall n m : K, mult n m = mult m n Hdiff : filterdiff f F lf Unable to unify \"filterdiff f F lf\" with \"is_linear (fun x : U => ModuleSpace.scal K (AbelianGroup.Pack V (ModuleSpace.class K V) V) (ModuleSpace.class K V) k (lf x))\".", "type": "cannot_unify", "handled": true}, {"ctx": ["intros F FF k f lf Hmult Hdiff.", "split.", "-", "unfold scal."], "tactic": "-", "exn": "Wrong bullet -: Current bullet - is not finished.", "type": "unfinished_bullet", "handled": true}]}, "chat": [{"role": "user", "content": "I will give you a Coq proof state, including both hypotheses and a specific goal and your need to prove it. Your response should be a singular code block of Coq proof starting with \"```coq\n\", ending with \"Qed.\", without any additional explanation or commentary. Follow to these guidelines:\nIntroduce variables using unique names to avoid any conflicts.\nKeep each command distinct and separated, avoid concatenations like ';' or '[cmd|cmd]'.\nOrganize your proof with bullets like '-', '+', and '*' instead of braces ({, }). Shift to their double symbols like '--' and '++', when necessary.\nEffectively use given premises, follow the syntax and structure demonstrated in the examples provided.\n\nExample 1:\n\nHypotheses:\nn, m: nat\nIHn: m + n = n + m\n\nGoal:\nm + S n = S n + m\n\nProof:\n```coq\nsimpl. rewrite <- IHn. auto.\nQed.```\n\nExample 2:\nHypotheses:\n\nGoal:\nforall n m : nat, m + n = n + m\n\n```coq\nintros n m. induction n.\n- simpl. auto.\n- simpl. rewrite <- IHn. auto.\nQed.```\n\nSolve This Proof State:\n\nHypotheses:\nK: AbsRing\nV: NormedModule K\nU: NormedModule K\n\nGoal:\nforall F : (U -> Prop) -> Prop, Filter F -> forall (k : K) (f lf : U -> V), (forall n m : K, mult n m = mult m n) -> filterdiff f F lf -> filterdiff (fun x : U => scal k (f x)) F (fun x : U => scal k (lf x))\n\nPremises:\nmult = fun K : Ring => Ring.mult (AbelianGroup.Pack K (Ring.class K) K) (Ring.class K) : forall K : Ring, K -> K -> K Argument K is implicit and maximally inserted\nNotation NormedModule := NormedModule.type\nClassicalFacts.F : forall A : Prop, ClassicalFacts.has_fixpoint A -> (A -> A) -> A\nf = fun f : family => let (ind, f0, _) := f in f0 : family -> R -> R -> Prop Argument scopes are [_ R_scope R_scope] f is a coercion\nfilterdiff = fun (K : AbsRing) (U V : NormedModule K) (f : U -> V) (F : (U -> Prop) -> Prop) (l : U -> V) => is_linear l /\\ (forall x : U, is_filter_lim F x -> is_domin F (fun y : U => minus y x) (fun y : U => minus (minus (f y) (f x)) (l (minus y x)))) : forall (K : AbsRing) (U V : NormedModule K), (U -> V) -> ((U -> Prop) -> Prop) -> (U -> V) -> Prop Arguments K, U, V are implicit and maximally inserted Argument scopes are [_ _ _ function_scope function_scope function_scope]\nRecord Filter (T : Type) (F : (T -> Prop) -> Prop) : Prop := Build_Filter { filter_true : F (fun _ : T => True); filter_and : forall P Q : T -> Prop, F P -> F Q -> F (fun x : T => P x /\\ Q x); filter_imp : forall P Q : T -> Prop, (forall x : T, P x -> Q x) -> F P -> F Q } For Filter: Argument T is implicit and maximally inserted For Filter: Argument scopes are [type_scope function_scope] For Build_Filter: Argument scopes are [type_scope function_scope _ function_scope function_scope]\nscal = fun (K : Ring) (V : ModuleSpace K) => ModuleSpace.scal K (AbelianGroup.Pack V (ModuleSpace.class K V) V) (ModuleSpace.class K V) : forall (K : Ring) (V : ModuleSpace K), K -> V -> V Arguments K, V are implicit and maximally inserted\nfilterdiff_scal_fct : forall (x : U) (f : U -> K) (g : U -> V) (lf : U -> AbsRing_NormedModule K) (lg : U -> V), (forall n m : K, mult n m = mult m n) -> filterdiff f (locally x) lf -> filterdiff g (locally x) lg -> filterdiff (fun t : U => scal (f t) (g t)) (locally x) (fun t : U => plus (scal (lf t) (g x)) (scal (f x) (lg t)))\nex_filterdiff_scal_fct : forall (x : U) (f : U -> K) (g : U -> V), (forall n m : K, mult n m = mult m n) -> ex_filterdiff f (locally x) -> ex_filterdiff g (locally x) -> ex_filterdiff (fun t : U => scal (f t) (g t)) (locally x)\nfilterdiff_scal_r : forall k : ?K, (forall n m : ?K, mult n m = mult m n) -> filterdiff (fun x : ?V => scal k x) ?F (fun x : ?V => scal k x) where ?K : [K : AbsRing U : NormedModule K V : NormedModule K |- AbsRing] ?V : [K : AbsRing U : NormedModule K V : NormedModule K |- NormedModule ?K] ?F : [K : AbsRing U : NormedModule K V : NormedModule K |- (?V -> Prop) -> Prop] ?FF : [K : AbsRing U : NormedModule K V : NormedModule K |- Filter ?F]\nis_linear_scal_r : forall k : ?K, (forall n m : ?K, mult n m = mult m n) -> is_linear (fun x : ?V => scal k x) where ?K : [K : AbsRing U : NormedModule K V : NormedModule K |- AbsRing] ?V : [K : AbsRing U : NormedModule K V : NormedModule K |- NormedModule ?K]\nex_filterdiff_scal_r : forall k : ?K, (forall n m : ?K, mult n m = mult m n) -> ex_filterdiff (fun x : ?V => scal k x) ?F where ?K : [K : AbsRing U : NormedModule K V : NormedModule K |- AbsRing] ?V : [K : AbsRing U : NormedModule K V : NormedModule K |- NormedModule ?K] ?F : [K : AbsRing U : NormedModule K V : NormedModule K |- (?V -> Prop) -> Prop] ?FF : [K : AbsRing U : NormedModule K V : NormedModule K |- Filter ?F]\nfilterdiff_scal_l_fct : forall (x : V) (f : U -> K) (lf : U -> AbsRing_NormedModule K), filterdiff f ?F lf -> filterdiff (fun u : U => scal (f u) x) ?F (fun u : U => scal (lf u) x) where ?F : [K : AbsRing U : NormedModule K V : NormedModule K |- (U -> Prop) -> Prop] ?FF : [K : AbsRing U : NormedModule K V : NormedModule K |- Filter ?F]\nfilterdiff_mult : forall x : ?K * ?K, is_filter_lim (at_point ?a) x -> (forall n m : ?K, mult n m = mult m n) -> filterdiff (fun t : ?K * ?K => mult (fst t) (snd t)) (at_point ?a) (fun t : prod_NormedModule ?K (AbsRing_NormedModule ?K) (AbsRing_NormedModule ?K) => plus (mult (fst t) (snd x)) (mult (fst x) (snd t))) where ?K : [K : AbsRing U : NormedModule K V : NormedModule K |- AbsRing] ?a : [K : AbsRing U : NormedModule K V : NormedModule K |- UniformSpace.sort (prod_UniformSpace (AbsRing_UniformSpace ?K) (AbsRing_UniformSpace ?K))]\nfilterdiff_scal : forall x : ?Goal0 * ?t, is_filter_lim (at_point ?a) x -> (forall n m : ?Goal0, mult n m = mult m n) -> filterdiff (fun t : ?Goal0 * ?t => scal (fst t) (snd t)) (at_point ?a) (fun t : prod_NormedModule ?Goal0 (AbsRing_NormedModule ?Goal0) ?t => plus (scal (fst t) (snd x)) (scal (fst x) (snd t))) where ?a : [K : AbsRing U : NormedModule K V : NormedModule K |- UniformSpace.sort (prod_UniformSpace (AbsRing_UniformSpace ?Goal0) ?t)] ?t : [K : AbsRing U : NormedModule K V : NormedModule K |- NormedModule ?Goal0] ?Goal0 : [K : AbsRing U : NormedModule K V : NormedModule K |- AbsRing]\nex_filterdiff_mult : forall x : ?K * ?K, is_filter_lim (at_point ?a) x -> (forall n m : ?K, mult n m = mult m n) -> ex_filterdiff (fun t : ?K * ?K => mult (fst t) (snd t)) (at_point ?a) where ?K : [K : AbsRing U : NormedModule K V : NormedModule K |- AbsRing] ?a : [K : AbsRing U : NormedModule K V : NormedModule K |- UniformSpace.sort (prod_UniformSpace (AbsRing_UniformSpace ?K) (AbsRing_UniformSpace ?K))]\nex_filterdiff_scal : forall x : ?K * ?V, is_filter_lim (at_point ?a) x -> (forall n m : ?K, mult n m = mult m n) -> ex_filterdiff (fun t : ?K * ?V => scal (fst t) (snd t)) (at_point ?a) where ?K : [K : AbsRing U : NormedModule K V : NormedModule K |- AbsRing] ?V : [K : AbsRing U : NormedModule K V : NormedModule K |- NormedModule ?K] ?a : [K : AbsRing U : NormedModule K V : NormedModule K |- UniformSpace.sort (prod_UniformSpace (AbsRing_UniformSpace ?K) ?V)]\nfilterdiff_opp_fct : forall f lf : U -> V, filterdiff f ?F lf -> filterdiff (fun t : U => opp (f t)) ?F (fun t : U => opp (lf t)) where ?F : [K : AbsRing U : NormedModule K V : NormedModule K |- (U -> Prop) -> Prop] ?FF : [K : AbsRing U : NormedModule K V : NormedModule K |- Filter ?F]\nfilterdiff_plus_fct : forall f g lf lg : U -> V, filterdiff f ?F lf -> filterdiff g ?F lg -> filterdiff (fun u : U => plus (f u) (g u)) ?F (fun u : U => plus (lf u) (lg u)) where ?F : [K : AbsRing U : NormedModule K V : NormedModule K |- (U -> Prop) -> Prop] ?FF : [K : AbsRing U : NormedModule K V : NormedModule K |- Filter ?F]\nfilterdiff_minus_fct : forall f g lf lg : U -> V, filterdiff f ?F lf -> filterdiff g ?F lg -> filterdiff (fun u : U => minus (f u) (g u)) ?F (fun u : U => minus (lf u) (lg u)) where ?F : [K : AbsRing U : NormedModule K V : NormedModule K |- (U -> Prop) -> Prop] ?FF : [K : AbsRing U : NormedModule K V : NormedModule K |- Filter ?F]\nex_filterdiff = fun (K : AbsRing) (U V : NormedModule K) (f : U -> V) (F : (U -> Prop) -> Prop) => exists l : U -> V, filterdiff f F l : forall (K : AbsRing) (U V : NormedModule K), (U -> V) -> ((U -> Prop) -> Prop) -> Prop Arguments K, U, V are implicit and maximally inserted Argument scopes are [_ _ _ function_scope function_scope]\nfiltermap = fun (T U : Type) (f : T -> U) (F : (T -> Prop) -> Prop) (P : U -> Prop) => F (fun x : T => P (f x)) : forall T U : Type, (T -> U) -> ((T -> Prop) -> Prop) -> (U -> Prop) -> Prop Arguments T, U are implicit and maximally inserted Argument scopes are [type_scope type_scope function_scope function_scope function_scope]\nProper_StrongProper : forall F : (?T -> Prop) -> Prop, ProperFilter F -> ProperFilter' F where ?T : [K : AbsRing U : NormedModule K V : NormedModule K |- Type]\nfilterdiff_opp : forall F : (?V -> Prop) -> Prop, filterdiff opp F opp where ?K : [K : AbsRing U : NormedModule K V : NormedModule K |- AbsRing] ?V : [K : AbsRing U : NormedModule K V : NormedModule K |- NormedModule ?K]\nis_equiv = fun (T : Type) (K : AbsRing) (V : NormedModule K) (F : (T -> Prop) -> Prop) (f g : T -> V) => is_domin F g (fun x : T => minus (g x) (f x)) : forall (T : Type) (K : AbsRing) (V : NormedModule K), ((T -> Prop) -> Prop) -> (T -> V) -> (T -> V) -> Prop Arguments T, K, V are implicit and maximally inserted Argument scopes are [type_scope _ _ function_scope function_scope function_scope]\nfilterlim_id : forall (T : Type) (F : (T -> Prop) -> Prop), filterlim (fun x : T => x) F F\nfilterdiff_comp' : forall (f : ?U -> ?V) (g : ?V -> ?W) (x : ?U) (lf : ?U -> ?V) (lg : ?V -> ?W), filterdiff f (locally x) lf -> filterdiff g (locally (f x)) lg -> filterdiff (fun y : ?U => g (f y)) (locally x) (fun y : ?U => lg (lf y)) where ?K : [K : AbsRing U : NormedModule K V : NormedModule K |- AbsRing] ?U : [K : AbsRing U : NormedModule K V : NormedModule K |- NormedModule ?K] ?V : [K : AbsRing U : NormedModule K V : NormedModule K |- NormedModule ?K] ?W : [K : AbsRing U : NormedModule K V : NormedModule K |- NormedModule ?K]\nfiltermap_proper_filter : forall (T U : Type) (f : T -> U) (F : (T -> Prop) -> Prop), ProperFilter F -> ProperFilter (filtermap f F)\nis_filter_lim_filtermap : forall (F : (?T -> Prop) -> Prop) (x : ?T) (f : ?T -> ?U), filterlim f (locally x) (locally (f x)) -> is_filter_lim F x -> is_filter_lim (filtermap f F) (f x) where ?T : [K : AbsRing U : NormedModule K V : NormedModule K |- UniformSpace] ?U : [K : AbsRing U : NormedModule K V : NormedModule K |- UniformSpace]\nfilterdiff_minus : forall F : (?V * ?V -> Prop) -> Prop, filterdiff (fun u : prod_NormedModule ?K ?V ?V => minus (fst u) (snd u)) F (fun u : prod_NormedModule ?K ?V ?V => minus (fst u) (snd u)) where ?K : [K : AbsRing U : NormedModule K V : NormedModule K |- AbsRing] ?V : [K : AbsRing U : NormedModule K V : NormedModule K |- NormedModule ?K]\nfilterdiff_plus : forall F : (?V * ?V -> Prop) -> Prop, filterdiff (fun u : prod_NormedModule ?K ?V ?V => plus (fst u) (snd u)) F (fun u : prod_NormedModule ?K ?V ?V => plus (fst u) (snd u)) where ?K : [K : AbsRing U : NormedModule K V : NormedModule K |- AbsRing] ?V : [K : AbsRing U : NormedModule K V : NormedModule K |- NormedModule ?K]\nfilterdiff_iter_plus_fct : forall (l : list ?I) (f df : ?I -> U -> V), U -> (forall j : ?I, List.In j l -> filterdiff (f j) ?F (df j)) -> filterdiff (fun y : U => iter plus zero l (fun j : ?I => f j y)) ?F (fun x0 : U => iter plus zero l (fun j : ?I => df j x0)) where ?I : [K : AbsRing U : NormedModule K V : NormedModule K |- Type] ?F : [K : AbsRing U : NormedModule K V : NormedModule K |- (U -> Prop) -> Prop] ?FF : [K : AbsRing U : NormedModule K V : NormedModule K |- Filter ?F]\nfilterdiff_comp : forall (f : ?U -> ?V) (g : ?V -> ?W) (lf : ?U -> ?V) (lg : ?V -> ?W), filterdiff f ?F lf -> filterdiff g (filtermap f ?F) lg ->...-> Prop] ?FF : [K : AbsRing U : NormedModule K V : NormedModule K |- Filter ?F]\ncontinuous_scal : forall (k : ?U -> ?K) (f : ?U -> ?V) (x : ?U), continuous k x -> continuous f x -> continuous (fun y : ?U => scal (k y) (f y)) x where ?U : [K : AbsRing U : NormedModule K V : NormedModule K |- UniformSpace] ?K : [K : AbsRing U : NormedModule K V : NormedModule K |- AbsRing] ?V : [K : AbsRing U : NormedModule K V : NormedModule K |- NormedModule ?K]\nis_domin = fun (T : Type) (Ku Kv : AbsRing) (U : NormedModule Ku) (V : NormedModule Kv) (F : (T -> Prop) -> Prop) (f : T -> U) (g : T -> V) => forall eps : posreal, F (fun x : T => norm (g x) <= eps * norm (f x)) : forall (T : Type) (Ku Kv : AbsRing) (U : NormedModule Ku) (V : NormedModule Kv), ((T -> Prop) -> Prop) -> (T -> U) -> (T -> V) -> Prop Arguments T, Ku, Kv, U, V are implicit and maximally inserted Argument scopes are [type_scope _ _ _ _ function_scope function_scope function_scope]\nfilterdiff_comp'_2 : forall (f : ?T -> ?U) (g : ?T -> ?V) (h : ?U -> ?V -> ?W) (x : ?T) (lf : ?T -> ?U) (lg : ?T -> ?V) (lh : ?U -> ?V -> ?W), filterdiff f (locally x) lf -> filterdiff g (locally x) lg -> filterdiff (fun t : prod_NormedModule ?K ?U ?V => h (fst t) (snd t)) (locally (f x, g x)) (fun t : prod_NormedModule ?K ?U ?V => lh (fst t) (snd t)) -> filterdiff (fun y : ?T => h (f y) (g y)) (locally x) (fun y : ?T => lh (lf y) (lg y)) where ?K : [K : AbsRing U : NormedModule K V : NormedModule K |- AbsRing] ?T : [K : AbsRing U : Norm...\nfilterdiff_scal_l : forall x : ?V, filterdiff (fun k : ?K => scal k x) ?F (fun k : AbsRing_NormedModule ?K => scal k x) where ?K : [K : AbsRing U : NormedModule K V : NormedModule K |- AbsRing] ?V : [K : AbsRing U : NormedModule K V : NormedModule K |- NormedModule ?K] ?F : [K : AbsRing U : NormedModule K V : NormedModule K |- (AbsRing_NormedModule ?K -> Prop) -> Prop] ?FF : [K : AbsRing U : NormedModule K V : NormedModule K |- Filter ?F]\nequiv_scal : forall (f g : ?T -> ?V) (c : ?K), (exists y : ?K, mult y c = one) -> is_equiv ?F f g -> is_equiv ?F (fun x : ?T => scal c (f x)) (fun x : ?T => scal c (g x)) where ?T : [K : AbsRing U : NormedModule K V : NormedModule K |- Type] ?K : [K : AbsRing U : NormedModule K V : NormedModule K |- AbsRing] ?V : [K : AbsRing U : NormedModule K V : NormedModule K |- NormedModule ?K] ?F : [K : AbsRing U : NormedModule K V : NormedModule K |- (?T -> Prop) -> Prop] ?FF : [K : AbsRing U : NormedModule K V : NormedModule K |- Filter ?F]\nfilter_true = fun (T : Type) (F : (T -> Prop) -> Prop) (Filter0 : Filter F) => let (filter_true, _, _) := Filter0 in filter_true : forall (T : Type) (F : (T -> Prop) -> Prop), Filter F -> F (fun _ : T => True) Arguments T, F, Filter are implicit and maximally inserted Argument scopes are [type_scope function_scope _]\nfilterdiff_comp_2 : forall (f : ?T -> ?U) (g : ?T -> ?V) (h : ?U -> ?V -> ?W) (lf : ?T -> ?U) (lg : ?T -> ?V) (lh : ?U -> ?V -> ?W), filterdiff f ?F lf -> filterdiff g ?F lg -> filterdiff (fun t : prod_NormedModule ?K ?U ?V => h (fst t) (snd t)) (filtermap (fun t : ?T => (f t, g t)) ?F) (fun t : prod_NormedModule ?K ?U ?V => lh (fst t) (snd t)) ->...-> Prop] ?FF : [K : AbsRing U : NormedModule K V : NormedModule K |- Filter ?F]\nex_filterdiff_scal_l_fct : forall (x : V) (f : U -> K), ex_filterdiff f ?F -> ex_filterdiff (fun u : U => scal (f u) x) ?F where ?F : [K : AbsRing U : NormedModule K V : NormedModule K |- (U -> Prop) -> Prop] ?FF : [K : AbsRing U : NormedModule K V : NormedModule K |- Filter ?F]\nis_filter_lim_unique = fun (K : AbsRing) (V : NormedModule K) (F : (V -> Prop) -> Prop) (FF : ProperFilter' F) (x y : V) (Hx : is_filter_lim F x) (Hy : is_filter_lim F y) => ball_norm_eq x y (fun eps : posreal => let Hx' : F (ball_norm x (pos_div_2 eps)) := Hx (ball_norm x (pos_div_2 eps)) (locally_ball_norm x (pos_div_2 eps)) in let Hy' : F (ball_norm y (pos_div_2 eps)) := Hy (ball_norm y (pos_div_2 eps)) (locally_ball_norm y (pos_div_2 eps)) in Rnot_le_lt eps (norm (minus y x)) (fun H : eps <= norm (minus y x) => filter_not_empty (filter_imp (fun x0 : V => ball_norm x (pos_div_2 eps) x0 /\\ ball_norm y (pos_div_2 eps) x0) (fun...\nFilter_prod : forall (F : (?T -> Prop) -> Prop) (G : (?U -> Prop) -> Prop) (P : ?T * ?U -> Prop) (Q : ?T -> Prop) (R : ?U -> Prop), F Q -> G R -> (forall (x : ?T) (y : ?U), Q x -> R y -> P (x, y)) -> filter_prod F G P where ?T : [K : AbsRing U : NormedModule K V : NormedModule K |- Type] ?U : [K : AbsRing U : NormedModule K V : NormedModule K |- Type]\ncontinuous_scal_r : forall (k : ?K) (f : ?U -> ?V) (x : ?U), continuous f x -> continuous (fun y : ?U => scal k (f y)) x where ?U : [K : AbsRing U : NormedModule K V : NormedModule K |- UniformSpace] ?K : [K : AbsRing U : NormedModule K V : NormedModule K |- AbsRing] ?V : [K : AbsRing U : NormedModule K V : NormedModule K |- NormedModule ?K]\nRecord ProperFilter (T : Type) (F : (T -> Prop) -> Prop) : Prop := Build_ProperFilter { filter_ex : forall P : T -> Prop, F P -> exists x : T, P x; filter_filter : Filter F } For ProperFilter: Argument T is implicit and maximally inserted For ProperFilter: Argument scopes are [type_scope function_scope] For Build_ProperFilter: Argument scopes are [type_scope function_scope function_scope _]\nis_filter_lim = fun (T : UniformSpace) (F : (T -> Prop) -> Prop) (x : T) => forall P : T -> Prop, locally x P -> F P : forall T : UniformSpace, ((T -> Prop) -> Prop) -> T -> Prop Argument T is implicit and maximally inserted Argument scopes are [_ function_scope _]\nfilter_filter = fun (T : Type) (F : (T -> Prop) -> Prop) (ProperFilter0 : ProperFilter F) => let (_, filter_filter) := ProperFilter0 in filter_filter : forall (T : Type) (F : (T -> Prop) -> Prop), ProperFilter F -> Filter F Arguments T, F, ProperFilter are implicit and maximally inserted Argument scopes are [type_scope function_scope _]"}, {"role": "assistant", "content": "```coq\nintros F FF k f lf Hmult Hdiff.\nsplit.\n- unfold is_linear. intros a x y. unfold scal.\n  rewrite (Hmult a (f x) (f y)). apply Hdiff.\n- intros x limx. unfold is_domin in Hdiff.\n  intros eps. specialize (Hdiff eps).\n  unfold is_filter_lim in limx. specialize (Hdiff (locally x) (limx eps)).\n  intros P hx. unfold scal.\n  apply Hdiff. apply hx.\nQed.```"}], "original": "intros F FF k f lf Hmult Hdiff. split. - unfold is_linear. intros a x y. unfold scal. rewrite (Hmult a (f x) (f y)). apply Hdiff. - intros x limx. unfold is_domin in Hdiff. intros eps. specialize (Hdiff eps). unfold is_filter_lim in limx. specialize (Hdiff (locally x) (limx eps)). intros P hx. unfold scal. apply Hdiff. apply hx.", "succ": false}]