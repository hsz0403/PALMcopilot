[{"history": {"proof": "shelve.", "repairs": [""], "exceptions": []}, "chat": [{"role": "user", "content": "I will give you a Coq proof state, including both hypotheses and a specific goal and your need to prove it. Your response should be a singular code block of Coq proof starting with \"```coq\n\", ending with \"Qed.\", without any additional explanation or commentary. Follow to these guidelines:\nIntroduce variables using unique names to avoid any conflicts.\nKeep each command distinct and separated, avoid concatenations like ';' or '[cmd|cmd]'.\nOrganize your proof with bullets like '-', '+', and '*' instead of braces ({, }). Shift to their double symbols like '--' and '++', when necessary.\nEffectively use given premises, follow the syntax and structure demonstrated in the examples provided.\n\nExample 1:\n\nHypotheses:\nn, m: nat\nIHn: m + n = n + m\n\nGoal:\nm + S n = S n + m\n\nProof:\n```coq\nsimpl. rewrite <- IHn. auto.\nQed.```\n\nExample 2:\nHypotheses:\n\nGoal:\nforall n m : nat, m + n = n + m\n\n```coq\nintros n m. induction n.\n- simpl. auto.\n- simpl. rewrite <- IHn. auto.\nQed.```\n\nSolve This Proof State:\n\nHypotheses:\nT: Type\nx0: R\n\nGoal:\nSF_lx (SF_nil x0) = [:: x0]\n\nPremises:\nSF_lx = fun s : SF_seq => SF_h s :: unzip1 (SF_t s) : SF_seq -> seq R\nSF_nil = fun x0 : R => {| SF_h := x0; SF_t := [::] |} : R -> SF_seq Argument scope is [R_scope]\nList.app_eq_unit : forall (A : Type) (x y : seq A) (a : A), (x ++ y)%list = [:: a] -> x = [::] /\\ y = [:: a] \\/ x = [:: a] /\\ y = [::]\nSF_seq_bij_lx : forall (lx : seq R) (ly : seq T) (Hs : size lx = S (size ly)), SF_lx (SF_make lx ly Hs) = lx\ncat1s : forall (T : Type) (x : T) (s : seq T), [:: x] ++ s = x :: s\nList.rev_unit : forall (A : Type) (l : seq A) (a : A), List.rev (l ++ [:: a])%list = a :: List.rev l\nfilter_pred1_uniq : forall (T : eqtype.Equality.type) (s : seq (eqtype.Equality.sort T)) (x : eqtype.Equality.sort T), uniq s -> x \\in s -> [seq x0 <- s | pred_of_simpl (eqtype.pred1 x) x0] = [:: x]\neqtype.Equality.sort = fun t : eqtype.Equality.type => let (sort, _) := t in sort : eqtype.Equality.type -> Type\nSF_rcons_dec : forall P : SF_seq -> Type, (forall x0 : R, P (SF_nil x0)) -> (forall (s : SF_seq) (t : R * T), P (SF_rcons s t)) -> forall s : SF_seq, P s\nSF_cons_dec : forall P : SF_seq -> Type, (forall x0 : R, P (SF_nil x0)) -> (forall (h : R * T) (s : SF_seq), P (SF_cons h s)) -> forall s : SF_seq, P s\nSF_rcons_ind : forall P : SF_seq -> Type, (forall x0 : R, P (SF_nil x0)) -> (forall (s : SF_seq) (t : R * T), P s -> P (SF_rcons s t)) -> forall s : SF_seq, P s\nSF_cons_ind : forall P : SF_seq -> Type, (forall x0 : R, P (SF_nil x0)) -> (forall (h : R * T) (s : SF_seq), P s -> P (SF_cons h s)) -> forall s : SF_seq, P s\nunzip2 = fun S T : Type => map snd : forall S T : Type, seq (S * T) -> seq T Arguments S, T are implicit and maximally inserted Argument scopes are [type_scope type_scope seq_scope]\nunzip1 = fun S T : Type => map fst : forall S T : Type, seq (S * T) -> seq S Arguments S, T are implicit and maximally inserted Argument scopes are [type_scope type_scope seq_scope]\nNewton_integrable = fun (f : R -> R) (a b : R) => {g : R -> R | antiderivative f g a b \\/ antiderivative f g b a} : (R -> R) -> R -> R -> Type Argument scopes are [function_scope R_scope R_scope]\nsize = fun T : Type => fix size (s : seq T) : nat := match s with | [::] => 0%nat | _ :: s' => S (size s') end : forall T : Type, seq T -> nat Argument T is implicit and maximally inserted Argument scopes are [type_scope seq_scope]\nRecord SF_seq : Type := mkSF_seq { SF_h : R; SF_t : seq (R * T) } For mkSF_seq: Argument scopes are [R_scope seq_scope]\nRecord type : Type := Pack { sort : Type; _ : eqtype.Equality.mixin_of sort } For Pack: Argument sort is implicit For Pack: Argument scopes are [type_scope _]\nlast = fun T : Type => fix last (x : T) (s : seq T) {struct s} : T := match s with | [::] => x | x' :: s' => last x' s' end : forall T : Type, T -> seq T -> T Argument T is implicit and maximally inserted Argument scopes are [type_scope _ seq_scope]\ncat = fun T : Type => fix cat (s1 s2 : seq T) {struct s1} : seq T := match s1 with | [::] => s2 | x :: s1' => x :: cat s1' s2 end : forall T : Type, seq T -> seq T -> seq T Argument T is implicit and maximally inserted Argument scopes are [type_scope seq_scope seq_scope]\nrcons_dec : forall P : seq ?T -> Type, P [::] -> (forall (s : seq ?T) (t : ?T), P (rcons s t)) -> forall s : seq ?T, P s where ?T : [T : Type x0 : R |- Type]\nInductive prod (A B : Type) : Type := pair : A -> B -> A * B For pair: Arguments A, B are implicit and maximally inserted For prod: Argument scopes are [type_scope type_scope] For pair: Argument scopes are [type_scope type_scope _ _]\nrcons_ind : forall P : seq ?T -> Type, P [::] -> (forall (s : seq ?T) (t : ?T), P s -> P (rcons s t)) -> forall s : seq ?T, P s where ?T : [T : Type x0 : R |- Type]\nzip = fun S T : Type => fix zip (s : seq S) (t : seq T) {struct t} : seq (S * T) := match s with | [::] => [::] | x :: s' => match t with | [::] => [::] | y :: t' => (x, y) :: zip s' t' end end : forall S T : Type, seq S -> seq T -> seq (S * T) Arguments S, T are implicit and maximally inserted Argument scopes are [type_scope type_scope seq_scope seq_scope]\nRinv_1 = let list_hyp := [::] in let field_lemma : forall lmp : seq (Z * Ring_polynom.Mon * Ring_polynom.Pol Z), Ring_polynom.mk_monpol_list 0%Z 1%Z Z.add Z.mul Z.sub Z.opp Zeq_bool Z.quotrem list_hyp = lmp -> forall nfe1 : linear Z, Fnorm 0%Z 1%Z Z.add Z.mul Z.sub Z.opp Zeq_bool (FEinv (FEc 1%Z)) = nfe1 -> forall nfe2 : linear Z, Fnorm 0%Z 1%Z Z.add Z.mul Z.sub Z.opp Zeq_bool (FEc 1%Z) = nfe2 -> Ring_polynom.Peq Zeq_bool (Ring_polynom.norm_subst 0%Z 1%Z Z.add Z.mul Z.sub Z.opp Zeq_bool Z.quotrem ring_subst_niter lmp (Ring_polynom.PEmul (num nfe1) (denum nfe2))) (Ring_polynom.norm_subst 0%Z ...\nInductive sig (A : Type) (P : A -> Prop) : Type := exist : forall x : A, P x -> {x : A | P x} For sig: Argument A is implicit For exist: Argument A is implicit For sig: Argument scopes are [type_scope type_scope] For exist: Argument scopes are [type_scope function_scope _ _]\nInductive sigT (A : Type) (P : A -> Type) : Type := existT : forall x : A, P x -> {x : A & P x} For sigT: Argument A is implicit For existT: Argument A is implicit For sigT: Argument scopes are [type_scope type_scope] For existT: Argument scopes are [type_scope function_scope _ _]\nINR_eq : forall n m : nat, INR n = INR m -> n = m\nRabs_R0 = match Rcase_abs 0 as s return ((if s then - 0 else 0) = 0) with | left r => (fun H : ~ 0 < 0 => False_ind (- 0 = 0) (H r)) (Rlt_irrefl 0) | right _ => eq_refl end : Rabs 0 = 0\nRlt_0_1 = let H : 1\u00b2 = 1 := Rmult_1_r 1 in eq_ind 1\u00b2 (fun r : R => 0 < r) (Rlt_0_sqr 1 (fun H0 : 1 = 0 => R1_neq_R0 H0)) 1 H : 0 < 1\nis_true = fun b : bool => b = true : bool -> Prop Argument scope is [bool_scope] is_true is a coercion\nRmult_eq_reg_l : forall r r1 r2 : R, r * r1 = r * r2 -> r <> 0 -> r1 = r2\nRle = fun r1 r2 : R => r1 < r2 \\/ r1 = r2 : R -> R -> Prop Argument scopes are [R_scope R_scope]\nList.destruct_list : forall (A : Type) (l : seq A), {x : A & {tl : seq A | l = x :: tl}} + {l = [::]}\nInductive list (A : Type) : Type := nil : seq A | cons : A -> seq A -> seq A For nil: Arguments are renamed to T For cons: Arguments are renamed to T, x, s For nil: Argument T is implicit and maximally inserted For cons: Argument T is implicit and maximally inserted For list: Argument scope is [type_scope] For nil: Argument scope is [type_scope] For cons: Argument scopes are [type_scope _ seq_scope]\nring_subst_niter = (10 * 10 * 10)%nat : nat\nList.list_eq_dec : forall A : Type, (forall x y : A, {x = y} + {x <> y}) -> forall l l' : seq A, {l = l'} + {l <> l'}\nRlt_R0_R2 = lt_0_INR 2 (Nat.lt_0_succ 1) : 0 < 2\nEUn = fun (Un : nat -> R) (r : R) => exists i : nat, r = Un i : (nat -> R) -> R -> Prop Argument scopes are [function_scope R_scope]\nRplus_0_r : forall r : R, r + 0 = r\nRplus_0_l : forall r : R, 0 + r = r\nRmult_0_r : forall r : R, r * 0 = 0"}, {"role": "assistant", "content": "```coq\nrewrite SF_nil. simpl. auto.\nQed.```"}], "original": "rewrite SF_nil. simpl. auto.", "succ": false}]