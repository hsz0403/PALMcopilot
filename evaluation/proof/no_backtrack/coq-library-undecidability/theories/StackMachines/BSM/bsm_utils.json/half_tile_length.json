[{"history": {"proof": "induction l. - simpl. reflexivity. - simpl. rewrite <- IHl. reflexivity.", "repairs": ["", "", "", "", "", "", "", ""], "exceptions": []}, "chat": [{"role": "user", "content": "I will give you a Coq proof state, including both hypotheses and a specific goal and your need to prove it. Your response should be a singular code block of Coq proof, without any additional explanation or commentary. Follow to these guidelines:\nIntroduce variables using unique names to avoid any conflicts.\nKeep each command distinct and separated, avoid concatenations like ';' or '[cmd|cmd]'.\nOrganize your proof with bullets like '-', '+', and '*' instead of braces ({, }). Shift to their double symbols like '--' and '++', when necessary.\nEffectively use given premises, follow the syntax and structure demonstrated in the examples provided.\n\nExample 1:\n\nHypotheses:\nn, m: nat\nIHn: m + n = n + m\n\nGoal:\nm + S n = S n + m\n\nProof:\n```simpl. rewrite <- IHn. auto.```\n\nExample 2:\nHypotheses:\n\nGoal:\nforall n m : nat, m + n = n + m\n\n```intros n m. induction n.\n- simpl. auto.\n- simpl. rewrite <- IHn. auto.```\n\nSovle This Proof State:\n\nHypotheses:\nn: nat\nx: pos n\nl: list bool\n\nGoal:\nlength (half_tile l) = length l\n\nPremises:\nInductive list (A : Type) : Type := nil : list A | cons : A -> list A -> list A Arguments list _%type_scope Arguments nil {A}%type_scope Arguments cons {A}%type_scope a l%list_scope : rename\nhalf_tile = fix half_tile (l : list bool) : list (bsm_instr n) := match l with | nil => nil | b :: l0 => PUSH x b :: half_tile l0 end : list bool -> list (bsm_instr n) Arguments half_tile _%list_scope\nNotation pos := Fin.t\nInductive nat : Set := O : nat | S : nat -> nat Arguments S _%nat_scope\nlength : forall A : Type, list A -> nat\nInductive bool : Set := true : bool | false : bool\nrev_length : forall (A : Type) (l : list A), length (rev l) = length l\ntiles_solvable = fun lt0 : list (list bool * list bool) => exists ln : list nat, ln <> nil /\\ Forall (fun x : nat => x < length lt0) ln /\\ (let (hh, ll) := tile_concat ln lt0 in hh = ll) : list (list bool * list bool) -> Prop Arguments tiles_solvable _%list_scope\nlength_cons : forall (X : Type) (x : X) (l : list X), length (x :: l) = S (length l)\nskipn_length : forall (A : Type) (n : nat) (l : list A), length (skipn n l) = length l - n\nfirstn_length : forall (A : Type) (n : nat) (l : list A), length (firstn n l) = Init.Nat.min n (length l)\nmap_length : forall (A B : Type) (f : A -> B) (l : list A), length (map f l) = length l\ntile_concat = fix tile_concat (ln : list nat) (lt : list (list bool * list bool)) {struct ln} : list bool * list bool := match ln with | nil => (nil, nil) | x :: ln0 => let (th, tl) := nth x lt (nil, nil) in let (hh, ll) := tile_concat ln0 lt in (hh ++ th, ll ++ tl) end : list nat -> list (list bool * list bool) -> list bool * list bool Arguments tile_concat (_ _)%list_scope\nfirstn_length_le : forall (A : Type) (l : list A) (n : nat), n <= length l -> length (firstn n l) = n\nnat_sort_length : forall l : list nat, length (nat_sort l) <= length l\nlist_an_app_inv : forall (a n : nat) (l r : list nat), list_an a n = l ++ r -> l = list_an a (length l) /\\ r = list_an (a + length l) (length r)\ncombine_length : forall (A B : Type) (l : list A) (l' : list B), length (combine l l') = Init.Nat.min (length l) (length l')\nnat_list_insert_length : forall (x : nat) (l : list nat), length (nat_list_insert x l) <= S (length l)\nnth_error_app2 : forall (A : Type) (l l' : list A) (n : nat), length l <= n -> nth_error (l ++ l') n = nth_error l' (n - length l)\nlast_length : forall (A : Type) (l : list A) (a : A), length (l ++ a :: nil) = S (length l)\nAdd_length : forall (A : Type) (a : A) (l l' : list A), Add a l l' -> length l' = S (length l)\nprod_length : forall (A B : Type) (l : list A) (l' : list B), length (list_prod l l') = length l * length l'\napp_length : forall (A : Type) (l l' : list A), length (l ++ l') = length l + length l'\nPUSH : forall n : nat, pos n -> bool -> bsm_instr n\ncombine_split : forall (A B : Type) (l : list A) (l' : list B), length l = length l' -> split (combine l l') = (l, l')\npartition_length : forall (A : Type) (f : A -> bool) (l l1 l2 : list A), partition f l = (l1, l2) -> length l = length l1 + length l2\nPermutation.Permutation_length : forall (A : Type) (l l' : list A), l ~p l' -> length l = length l'\nsplit_length_r : forall (A B : Type) (l : list (A * B)), length (snd (split l)) = length l\nsplit_length_l : forall (A B : Type) (l : list (A * B)), length (fst (split l)) = length l\nlist_split_length : forall (X : Type) (ll : list X) (k : nat), k <= length ll -> {l : list X & {r : list X | ll = l ++ r /\\ length l = k}}\nlist_app_inj : forall (X : Type) (l1 l2 r1 r2 : list X), length l1 = length l2 -> l1 ++ r1 = l2 ++ r2 -> l1 = l2 /\\ r1 = r2\nnth_ext : forall (A : Type) (l l' : list A) (d d' : A), length l = length l' -> (forall n : nat, n < length l -> nth n l d = nth n l' d') -> l = l'\nlist_pick : forall (X : Type) (ll : list X) (k : nat), k < length ll -> {x : X & {l : list X & {r : list X | ll = l ++ x :: r /\\ length l = k}}}\nempty_stack_length : forall (x : pos n) (i : nat), length (empty_stack x i) = 3\nlength_zero_iff_nil : forall (A : Type) (l : list A), length l = 0 < -> l = nil\nnth_split : forall (A : Type) (n : nat) (l : list A) (d : A), n < length l -> exists l1 l2 : list A, l = l1 ++ nth n l d :: l2 /\\ length l1 = n\nlength_move_rev_stack : forall (x y : pos n) (i : nat), length (move_rev_stack x y i) = 7\nfirstn_rev : forall (A : Type) (x : nat) (l : list A), firstn x (rev l) = rev (skipn (length l - x) l)\nZMicromega.ZTautoChecker = fun (f : Tauto.BFormula (RingMicromega.Formula BinNums.Z)) (w : list ZMicromega.ZArithProof) => Tauto.tauto_checker ZMicromega.Zunsat ZMicromega.Zdeduce ZMicromega.normalise ZMicromega.negate (fun cl : list (RingMicromega.NFormula BinNums.Z * unit) => ZMicromega.ZChecker (map fst cl)) f w : Tauto.BFormula (RingMicromega.Formula BinNums.Z) -> list ZMicromega.ZArithProof -> bool Arguments ZMicromega.ZTautoChecker _ _%list_scope\nrev_involutive : forall (A : Type) (l : list A), rev (rev l) = l\ncombine_nth : forall (A B : Type) (l : list A) (l' : list B) (n : nat) (x : A) (y : B), length l = length l' -> nth n (combine l l') (x, y) = (nth n l x, nth n l' y)\nlength_copy_rev_stack : forall (x y z : pos n) (i : nat), length (copy_rev_stack x y z i) = 9\ncopy_stack_length : forall (x y z : pos n) (i : nat), length (copy_stack x y z i) = 16\ncompare_stacks_length : forall (x y : pos n) (i p q : nat), length (compare_stacks x y i p q) = 10\nPermutation.Permutation_nth_error : forall (A : Type) (l l' : list A), l ~p l' < -> length l = length l' /\\ (exists f : nat -> nat, FinFun.Injective f /\\ (forall n : nat, nth_error l' n = nth_error l (f n)))\nnth_error_split : forall (A : Type) (l : list A) (n : nat) (a : A), nth_error l n = Some a -> exists l1 l2 : list A, l = l1 ++ a :: l2 /\\ length l1 = n"}, {"role": "assistant", "content": "``` \ninduction l.\n- simpl. reflexivity.\n- simpl. rewrite <- IHl. reflexivity.\n```"}], "original": "induction l. - simpl. reflexivity. - simpl. rewrite <- IHl. reflexivity.", "succ": true}]