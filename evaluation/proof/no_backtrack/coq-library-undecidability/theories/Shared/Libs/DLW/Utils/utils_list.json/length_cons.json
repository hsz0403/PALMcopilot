[{"history": {"proof": "simpl. reflexivity.", "repairs": ["", ""], "exceptions": [{"ctx": [], "tactic": "rewrite Zcomplements.Zlength_cons.", "exn": "Found no subterm matching \"Zcomplements.Zlength (?M1409 :: ?M1410)\" in the current goal.", "type": "no_subterm", "handled": true}]}, "chat": [{"role": "user", "content": "I will give you a Coq proof state, including both hypotheses and a specific goal and your need to prove it. Your response should be a singular code block of Coq proof, without any additional explanation or commentary. Follow to these guidelines:\nIntroduce variables using unique names to avoid any conflicts.\nKeep each command distinct and separated, avoid concatenations like ';' or '[cmd|cmd]'.\nOrganize your proof with bullets like '-', '+', and '*' instead of braces ({, }). Shift to their double symbols like '--' and '++', when necessary.\nEffectively use given premises, follow the syntax and structure demonstrated in the examples provided.\n\nExample 1:\n\nHypotheses:\nn, m: nat\nIHn: m + n = n + m\n\nGoal:\nm + S n = S n + m\n\nProof:\n```simpl. rewrite <- IHn. auto.```\n\nExample 2:\nHypotheses:\n\nGoal:\nforall n m : nat, m + n = n + m\n\n```intros n m. induction n.\n- simpl. auto.\n- simpl. rewrite <- IHn. auto.```\n\nSovle This Proof State:\n\nHypotheses:\nX: Type\nx: X\nl: list X\n\nGoal:\nlength (x :: l) = S (length l)\n\nPremises:\nInductive list (A : Type) : Type := nil : list A | cons : A -> list A -> list A Arguments list _%type_scope Arguments nil {A}%type_scope Arguments cons {A}%type_scope a l%list_scope : rename\nlength : forall A : Type, list A -> nat\nInductive nat : Set := O : nat | S : nat -> nat Arguments S _%nat_scope\nlast_length : forall (A : Type) (l : list A) (a : A), length (l ++ a :: nil) = S (length l)\nVectorDef.of_list : forall l0 : list ?A, VectorDef.t ?A (length l0) where ?A : [X : Type x : X l : list X |- Type]\nAdd_length : forall (A : Type) (a : A) (l l' : list A), Add a l l' -> length l' = S (length l)\nVectorSpec.to_list_of_list_opp : forall l0 : list ?A, VectorDef.to_list (VectorDef.of_list l0) = l0 where ?A : [X : Type x : X l : list X |- Type]\ncombine_length : forall (A B : Type) (l : list A) (l' : list B), length (combine l l') = Init.Nat.min (length l) (length l')\nskipn_rev : forall (A : Type) (x : nat) (l : list A), skipn x (rev l) = rev (firstn (length l - x) l)\nfirstn_rev : forall (A : Type) (x : nat) (l : list A), firstn x (rev l) = rev (skipn (length l - x) l)\nfirstn_length : forall (A : Type) (n : nat) (l : list A), length (firstn n l) = Init.Nat.min n (length l)\nZcomplements.Zlength_cons : forall (A : Type) (x : A) (l : list A), Zcomplements.Zlength (x :: l) = BinInt.Z.succ (Zcomplements.Zlength l)\nrev_nth : forall (A : Type) (l : list A) (d : A) (n : nat), n < length l -> nth n (rev l) d = nth (length l - S n) l d\ncount_occ_cons_eq : forall (A : Type) (eq_dec : forall x y : A, {x = y} + {x <> y}) (l : list A) (x y : A), x = y -> count_occ eq_dec (x :: l) y = S (count_occ eq_dec l y)\nhd_error_cons : forall (A : Type) (l : list A) (x : A), hd_error (x :: l) = Some x\nconcat_cons : forall (A : Type) (x : list A) (l : list (list A)), concat (x :: l) = x ++ concat l\nfold_left_length : forall (A : Type) (l : list A), fold_left (fun (x : nat) (_ : A) => S x) l 0 = length l\nZcomplements.Zlength_correct : forall (A : Type) (l : list A), Zcomplements.Zlength l = BinInt.Z.of_nat (length l)\nfirstn_all : forall (A : Type) (l : list A), firstn (length l) l = l\nskipn_all : forall (A : Type) (l : list A), skipn (length l) l = nil\nnth_middle : forall (A : Type) (l l' : list A) (a d : A), nth (length l) (l ++ a :: l') d = a\nmap_cons : forall (A B : Type) (f : A -> B) (x : A) (l : list A), map f (x :: l) = f x :: map f l\ncombine_firstn_r : forall (A B : Type) (l : list A) (l' : list B), combine l l' = combine (firstn (length l') l) l'\ncombine_firstn_l : forall (A B : Type) (l : list A) (l' : list B), combine l l' = combine l (firstn (length l) l')\nremove_cons : forall (A : Type) (eq_dec : forall x y : A, {x = y} + {x <> y}) (x : A) (l : list A), remove eq_dec x (x :: l) = remove eq_dec x l\nfirstn_skipn_rev : forall (A : Type) (x : nat) (l : list A), firstn x l = rev (skipn (length l - x) (rev l))\nrev_length : forall (A : Type) (l : list A), length (rev l) = length l\nPermutation_ind : forall (A : Type) (P : list A -> list A -> Prop), P nil nil -> (forall (x : A) (l l' : list A), l ~p l' -> P l l' -> P (x :: l) (x :: l')) -> (forall (x y : A) (l : list A), P (y :: x :: l) (x :: y :: l)) -> (forall l l' l'' : list A, l ~p l' -> P l l' -> l' ~p l'' -> P l' l'' -> P l l'') -> forall l l0 : list A, l ~p l0 -> P l l0\nremove_length_le : forall (A : Type) (eq_dec : forall x y : A, {x = y} + {x <> y}) (l : list A) (x : A), length (remove eq_dec x l) <= length l\nNoDup_cons : forall (A : Type) (x : A) (l : list A), ~ In x l -> NoDup l -> NoDup (x :: l)\ncount_occ_cons_neq : forall (A : Type) (eq_dec : forall x y : A, {x = y} + {x <> y}) (l : list A) (x y : A), x <> y -> count_occ eq_dec (x :: l) y = count_occ eq_dec l y\nInductive Add (A : Type) (a : A) : list A -> list A -> Prop := Add_head : forall l : list A, Add a l (a :: l) | Add_cons : forall (x : A) (l l' : list A), Add a l l' -> Add a (x :: l) (x :: l') Arguments Add [A]%type_scope _ (_ _)%list_scope Arguments Add_head [A]%type_scope _ _%list_scope Arguments Add_cons [A]%type_scope [a] _ [l l']%list_scope\nInductive Exists (A : Type) (P : A -> Prop) : list A -> Prop := Exists_cons_hd : forall (x : A) (l : list A), P x -> Exists P (x :: l) | Exists_cons_tl : forall (x : A) (l : list A), Exists P l -> Exists P (x :: l) Arguments Exists [A]%type_scope _%function_scope _%list_scope Arguments Exists_cons_hd [A]%type_scope _%function_scope _ _%list_scope Arguments Exists_cons_tl [A]%type_scope [P]%function_scope _ [l]%list_scope\napp_eq_unit : forall (A : Type) (x y : list A) (a : A), x ++ y = a :: nil -> x = nil /\\ y = a :: nil \\/ x = a :: nil /\\ y = nil\nremove_length_lt : forall (A : Type) (eq_dec : forall x y : A, {x = y} + {x <> y}) (l : list A) (x : A), In x l -> length (remove eq_dec x l) < length l\nAdd_ind : forall (A : Type) (a : A) (P : list A -> list A -> Prop), (forall l : list A, P l (a :: l)) -> (forall (x : A) (l l' : list A), Add a l l' -> P l l' -> P (x :: l) (x :: l')) -> forall l l0 : list A, Add a l l0 -> P l l0\nskipn_length : forall (A : Type) (n : nat) (l : list A), length (skipn n l) = length l - n\napp_comm_cons : forall (A : Type) (x y : list A) (a : A), a :: x ++ y = (a :: x) ++ y\nmap_length : forall (A B : Type) (f : A -> B) (l : list A), length (map f l) = length l\nfirstn_length_le : forall (A : Type) (l : list A) (n : nat), n <= length l -> length (firstn n l) = n\nremovelast_firstn_len : forall (A : Type) (l : list A), removelast l = firstn (Init.Nat.pred (length l)) l\nin_split : forall (A : Type) (x : A) (l : list A), In x l -> exists l1 l2 : list A, l = l1 ++ x :: l2\ncombine_nth : forall (A B : Type) (l : list A) (l' : list B) (n : nat) (x : A) (y : B), length l = length l' -> nth n (combine l l') (x, y) = (nth n l x, nth n l' y)"}, {"role": "assistant", "content": "``` \nrewrite Zcomplements.Zlength_cons.\nsimpl. reflexivity.\n```"}], "original": "rewrite Zcomplements.Zlength_cons. simpl. reflexivity.", "succ": true}]