[{"history": {"proof": "induction n. - simpl. reflexivity. - simpl. reflexivity.", "repairs": ["", "", "", "", "", "", ""], "exceptions": [{"ctx": ["induction n.", "-", "simpl.", "reflexivity.", "-", "simpl."], "tactic": "rewrite IHn.", "exn": "Found no subterm matching \"fact (S n)\" in the current goal.", "type": "no_subterm", "handled": true}]}, "chat": [{"role": "user", "content": "I will give you a Coq proof state, including both hypotheses and a specific goal and your need to prove it. Your response should be a singular code block of Coq proof, without any additional explanation or commentary. Follow to these guidelines:\nIntroduce variables using unique names to avoid any conflicts.\nKeep each command distinct and separated, avoid concatenations like ';' or '[cmd|cmd]'.\nOrganize your proof with bullets like '-', '+', and '*' instead of braces ({, }). Shift to their double symbols like '--' and '++', when necessary.\nEffectively use given premises, follow the syntax and structure demonstrated in the examples provided.\n\nExample 1:\n\nHypotheses:\nn, m: nat\nIHn: m + n = n + m\n\nGoal:\nm + S n = S n + m\n\nProof:\n```simpl. rewrite <- IHn. auto.```\n\nExample 2:\nHypotheses:\n\nGoal:\nforall n m : nat, m + n = n + m\n\n```intros n m. induction n.\n- simpl. auto.\n- simpl. rewrite <- IHn. auto.```\n\nSovle This Proof State:\n\nHypotheses:\nn: nat\n\nGoal:\nfact (S n) = S n * fact n\n\nPremises:\nfact = fix fact (n : nat) : nat := match n with | 0 => 1 | S n0 => S n0 * fact n0 end : nat -> nat Arguments fact _%nat_scope\nInductive nat : Set := O : nat | S : nat -> nat Arguments S _%nat_scope\nFactorial.fact = fix fact (n : nat) : nat := match n with | 0 => 1 | S n0 => S n0 * fact n0 end : nat -> nat Arguments Factorial.fact _%nat_scope\nfact_0 = eq_refl : fact 0 = 1\nZnat.Nat2Z.inj_succ : forall n : nat, BinInt.Z.of_nat (S n) = BinInt.Z.succ (BinInt.Z.of_nat n)\nNat.double_bits_succ : forall a n : nat, Nat.testbit (2 * a) (S n) = Nat.testbit a n\nNat.testbit_even_succ' : forall a n : nat, Nat.testbit (2 * a) (S n) = Nat.testbit a n\nNat.pred_succ : forall n : nat, Nat.pred (S n) = n\nNat.testbit_odd_succ' : forall a n : nat, Nat.testbit (2 * a + 1) (S n) = Nat.testbit a n\nNat.testbit_even_succ : forall a n : nat, 0 <= n -> Nat.testbit (2 * a) (S n) = Nat.testbit a n\nNat.log2_succ_or : forall a : nat, Nat.log2 (S a) = S (Nat.log2 a) \\/ Nat.log2 (S a) = Nat.log2 a\nNat.testbit_odd_succ : forall a n : nat, 0 <= n -> Nat.testbit (2 * a + 1) (S n) = Nat.testbit a n\nNat.div2_bits : forall a n : nat, Nat.testbit (a / 2) n = Nat.testbit a (S n)\nByteVector.to_Bvector = fix to_Bvector (n : nat) (v : ByteVector.ByteVector n) {struct v} : Bvector.Bvector (n * 8) := match v in (Vector.t _ n0) return (Bvector.Bvector (n0 * 8)) with | Vector.nil _ => Vector.nil bool | Vector.cons _ (Ascii.Ascii b0 b1 b2 b3 b4 b5 b6 b7) n0 v' => Vector.cons bool b0 (S (S (S (S (S (S (S (n0 * 8)))))))) (Vector.cons bool b1 (S (S (S (S (S (S (n0 * 8))))))) (Vector.cons bool b2 (S (S (S (S (S (n0 * 8)))))) (Vector.cons bool b3 (S (S (S (S (n0 * 8))))) (Vector.cons bool b4 (S (S (S (n0 * 8)))) (Vector.cons bool b5 (S (S (n0 * 8))) (Vector.cons bool b6 (...\nNat.sub_succ_l : forall n m : nat, n <= m -> S m - n = S (m - n)\nNat.testbit_succ_r : forall (a : nat) (b : bool) (n : nat), Nat.testbit (2 * a + Nat.b2n b) (S n) = Nat.testbit a n\nNat.log2_eq_succ_is_pow2 : forall a : nat, Nat.log2 (S a) = S (Nat.log2 a) -> exists b : nat, S a = 2 ^ b\nNat.le_wd = fun (n n' : nat) (Hn : n = n') (m m' : nat) (Hm : m = m') => (fun lemma : n < S m <-> n <= m => Morphisms.trans_co_eq_inv_impl_morphism RelationClasses.iff_Transitive (n <= m) (n < S m) (RelationClasses.symmetry lemma) (n' <= m') (n' <= m') (Morphisms.eq_proper_proxy (n' <= m'))) (Nat.lt_succ_r n m) ((fun lemma : n' < S m' <-> n' <= m' => Morphisms.trans_sym_co_inv_impl_morphism (RelationClasses.Equivalence_PER RelationClasses.iff_equivalence) (n' <= m') (n' < S m') (RelationClasses.symmetry lemma)) (Nat.lt_succ_r n' m') ((fun lemma : n = n' => Morphisms.trans_co_eq_inv_impl_morphism RelationClasses.iff_Transitive (n < S m) (n' < S m) (Nat.lt_wd n n' lemma (S m) (S m) (Morphisms.reflex...\nNat.lt_succ_pred : forall z n : nat, z < n -> S (Nat.pred n) = n\nVectorDef.uncons = fun (A : Type) (n : nat) (v : VectorDef.t A (S n)) => (VectorDef.hd v, VectorDef.tl v) : forall (A : Type) (n : nat), VectorDef.t A (S n) -> A * VectorDef.t A n Arguments VectorDef.uncons {A}%type_scope {n}%nat_scope\nZifyClasses.mkrel : forall (S T : Type) (R : S -> S -> Prop) (I : S -> T) (TR : T -> T -> Prop), (forall n m : S, R n m <-> TR (I n) (I m)) -> forall (s1 : S) (t1 : T), I s1 = t1 -> forall (s2 : S) (t2 : T), I s2 = t2 -> R s1 s2 < -> TR t1 t2\nNat.div2_succ_double : forall n : nat, Nat.div2 (S (2 * n)) = n\nNat.div2_double : forall n : nat, Nat.div2 (2 * n) = n\ndiv_2_fix_1 : forall n : nat, div (2 * n) 2 = n\nNat.mul_succ_r : forall n m : nat, n * S m = n * m + n\nNat.mul_succ_l : forall n m : nat, S n * m = n * m + m\nrem_2_fix_1 : forall n : nat, rem (2 * n) 2 = 0\nVectorDef.cons : forall A : Type, A -> forall n : nat, VectorDef.t A n -> VectorDef.t A (S n)\ndiv_2_fix_2 : forall n : nat, div (1 + 2 * n) 2 = n\nrem_2_fix_2 : forall n : nat, rem (1 + 2 * n) 2 = 1\nZnat.Nat2Z.inj_mul : forall n m : nat, BinInt.Z.of_nat (n * m) = BinInt.Z.mul (BinInt.Z.of_nat n) (BinInt.Z.of_nat m)\nNat.add_succ_r : forall n m : nat, n + S m = S (n + m)\nNat.add_succ_l : forall n m : nat, S n + m = S (n + m)\nNat.succ_inj_wd : forall n1 n2 : nat, S n1 = S n2 < -> n1 = n2\nNat.add_1_r : forall n : nat, n + 1 = S n\nNat.add_1_l : forall n : nat, 1 + n = S n\nmult_S_lt_compat_l : forall n m p : nat, m < p -> S n * m < S n * p\nNat.log2_double : forall a : nat, 0 < a -> Nat.log2 (2 * a) = S (Nat.log2 a)\nNat.log2_up_double : forall a : nat, 0 < a -> Nat.log2_up (2 * a) = S (Nat.log2_up a)\nZnat.Nat2Z.inj_add : forall n m : nat, BinInt.Z.of_nat (n + m) = BinInt.Z.add (BinInt.Z.of_nat n) (BinInt.Z.of_nat m)\nNat.log2_succ_double : forall a : nat, 0 < a -> Nat.log2 (2 * a + 1) = S (Nat.log2 a)\nNat.succ_wd = PeanoNat.Nat.succ_wd_obligation_1 : Morphisms.Proper (Morphisms.respectful eq eq) S"}, {"role": "assistant", "content": "```  \ninduction n.\n- simpl. reflexivity.\n- simpl. rewrite IHn. reflexivity.\n```"}], "original": "induction n. - simpl. reflexivity. - simpl. rewrite IHn. reflexivity.", "succ": true}]