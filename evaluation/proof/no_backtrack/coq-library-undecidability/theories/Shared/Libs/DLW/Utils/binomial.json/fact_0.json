[{"history": {"proof": "simpl. reflexivity.", "repairs": ["", ""], "exceptions": []}, "chat": [{"role": "user", "content": "I will give you a Coq proof state, including both hypotheses and a specific goal and your need to prove it. Your response should be a singular code block of Coq proof, without any additional explanation or commentary. Follow to these guidelines:\nIntroduce variables using unique names to avoid any conflicts.\nKeep each command distinct and separated, avoid concatenations like ';' or '[cmd|cmd]'.\nOrganize your proof with bullets like '-', '+', and '*' instead of braces ({, }). Shift to their double symbols like '--' and '++', when necessary.\nEffectively use given premises, follow the syntax and structure demonstrated in the examples provided.\n\nExample 1:\n\nHypotheses:\nn, m: nat\nIHn: m + n = n + m\n\nGoal:\nm + S n = S n + m\n\nProof:\n```simpl. rewrite <- IHn. auto.```\n\nExample 2:\nHypotheses:\n\nGoal:\nforall n m : nat, m + n = n + m\n\n```intros n m. induction n.\n- simpl. auto.\n- simpl. rewrite <- IHn. auto.```\n\nSovle This Proof State:\n\nHypotheses:\n\n\nGoal:\nfact 0 = 1\n\nPremises:\nfact = fix fact (n : nat) : nat := match n with | 0 => 1 | S n0 => S n0 * fact n0 end : nat -> nat Arguments fact _%nat_scope\nNat.eq_add_1 : forall n m : nat, n + m = 1 -> n = 1 /\\ m = 0 \\/ n = 0 /\\ m = 1\nNat.le_0_1 = Nat.lt_le_incl 0 1 Nat.lt_0_1 : 0 <= 1\nNat.eq_mul_1_nonneg : forall n m : nat, 0 <= n -> n * m = 1 -> n = 1 /\\ m = 1\nNat.eq_mul_1_nonneg' : forall n m : nat, 0 <= m -> n * m = 1 -> n = 1 /\\ m = 1\nNat.le_1_r : forall n : nat, n <= 1 < -> n = 0 \\/ n = 1\nNat.zero_one : forall n : nat, n = 0 \\/ n = 1 \\/ 1 < n\nNat.eq_pred_0 : forall n : nat, Nat.pred n = 0 < -> n = 0 \\/ n = 1\nplus_is_one : forall m n : nat, m + n = 1 -> {m = 0 /\\ n = 1} + {m = 1 /\\ n = 0}\nNat.sqrt_up_1 = (fun lemma : 1 * 1 = 1 => Morphisms.trans_co_eq_inv_impl_morphism RelationClasses.Equivalence_Transitive (Nat.sqrt_up 1) (Nat.sqrt_up (1 * 1)) (Nat.sqrt_up_wd 1 (1 * 1) (RelationClasses.symmetry lemma)) 1 1 (Morphisms.eq_proper_proxy 1)) (Nat.mul_1_l 1) (Nat.sqrt_up_square 1 ((fun (H : 0 < 1) (_ : 1 < 2) => Nat.Private_OrderTac.Tac.not_gt_le (fun H1 : 1 < 0 => (fun H2 : 0 < 0 => Nat.Private_OrderTac.Tac.lt_irrefl H2) (Nat.Private_OrderTac.Tac.lt_trans H H1))) Nat.lt_0_1 Nat.lt_1_2)) : Nat.sqrt_up 1 = 1\nNat.lt_0_1 = (fun lemma : 1 = 1 => Morphisms.Reflexive_partial_app_morphism (Morphisms.subrelation_proper Nat.lt_wd tt (Morphisms.subrelation_respectful (Morphisms.subrelation_refl eq) (Morphisms.subrelation_respectful (Morphisms.subrelation_refl eq) Morphisms.iff_flip_impl_subrelation))) (Morphisms.reflexive_proper_proxy RelationClasses.Equivalence_Reflexive 0) 1 1 lemma) Nat.one_succ (Nat.lt_succ_diag_r 0) : 0 < 1\nNat.log2_2 = (fun lemma : 2 ^ 1 = 2 => Morphisms.trans_co_eq_inv_impl_morphism RelationClasses.Equivalence_Transitive (Nat.log2 2) (Nat.log2 (2 ^ 1)) (Nat.log2_wd 2 (2 ^ 1) (RelationClasses.symmetry lemma)) 1 1 (Morphisms.eq_proper_proxy 1)) (Nat.Private_NZPow.pow_1_r 2) (Nat.log2_pow2 1 ((fun (H : 0 < 1) (_ : 1 < 2) => Nat.Private_OrderTac.Tac.not_gt_le (fun H1 : 1 < 0 => (fun H2 : 0 < 0 => Nat.Private_OrderTac.Tac.lt_irrefl H2) (Nat.Private_OrderTac.Tac.lt_trans H H1))) Nat.lt_0_1 Nat.lt_1_2)) : Nat.log2 2 = 1\nNat.log2_up_2 = (fun lemma : 2 ^ 1 = 2 => Morphisms.trans_co_eq_inv_impl_morphism RelationClasses.Equivalence_Transitive (Nat.log2_up 2) (Nat.log2_up (2 ^ 1)) (Nat.log2_up_wd 2 (2 ^ 1) (RelationClasses.symmetry lemma)) 1 1 (Morphisms.eq_proper_proxy 1)) (Nat.Private_NZPow.pow_1_r 2) (Nat.log2_up_pow2 1 ((fun (H : 0 < 1) (_ : 1 < 2) => Nat.Private_OrderTac.Tac.not_gt_le (fun H1 : 1 < 0 => (fun H2 : 0 < 0 => Nat.Private_OrderTac.Tac.lt_irrefl H2) (Nat.Private_OrderTac.Tac.lt_trans H H1))) Nat.lt_0_1 Nat.lt_1_2)) : Nat.log2_up 2 = 1\nNat.one_succ = eq_refl : 1 = 1\nNat.sqrt_1 = Nat.Private_NZSqrt.sqrt_1 : Nat.sqrt 1 = 1\nown_multiple : forall x p : nat, x = p * x -> x = 0 \\/ p = 1\nBinInt.ZL0 = eq_refl : 2 = 1 + 1\nmult_is_one : forall p q : nat, p * q = 1 -> p = 1 /\\ q = 1\nMult.mult_is_one : forall n m : nat, n * m = 1 -> n = 1 /\\ m = 1\nNat.eq_mul_1 : forall n m : nat, n * m = 1 < -> n = 1 /\\ m = 1\nNat.mul_eq_1 : forall n m : nat, n * m = 1 < -> n = 1 /\\ m = 1\nrem_2_is_0_or_1 : forall x : nat, rem x 2 = 0 \\/ rem x 2 = 1\nNat.divide_1_r_nonneg : forall n : nat, 0 <= n -> Nat.divide n 1 -> n = 1\nNat.pow_0_r : forall a : nat, a ^ 0 = 1\nNat.mul_id_l : forall n m : nat, m <> 0 -> n * m = m < -> n = 1\nNat.lt_1_r : forall n : nat, n < 1 < -> n = 0\nrem_2_mult : forall x y : nat, rem (x * y) 2 = 1 < -> rem x 2 = 1 /\\ rem y 2 = 1\nNat.log2_null : forall a : nat, Nat.log2 a = 0 < -> a <= 1\nNat.gcd_1_lcm_mul : forall n m : nat, n <> 0 -> m <> 0 -> Nat.gcd n m = 1 < -> Nat.lcm n m = n * m\nPnat.Pos2Nat.inj_1 = eq_refl : BinPos.Pos.to_nat BinNums.xH = 1\nNat.sqrt_2 = Nat.Private_NZSqrt.sqrt_2 : Nat.sqrt 2 = 1\nNat.div_same : forall a : nat, a <> 0 -> a / a = 1\nNat.mod_1_l : forall a : nat, 1 < a -> 1 mod a = 1\nNat.gcd_1_r : forall n : nat, Nat.gcd n 1 = 1\nNat.pow_1_l : forall a : nat, 1 ^ a = 1\nNat.gcd_1_l : forall n : nat, Nat.gcd 1 n = 1\nNat.gcd_div_gcd : forall a b g : nat, g <> 0 -> g = Nat.gcd a b -> Nat.gcd (a / g) (b / g) = 1\nNat.divide_1_r : forall n : nat, Nat.divide n 1 -> n = 1\ndivides_1_inv : forall p : nat, divides p 1 -> p = 1\nNat.b2n = fun b : bool => if b then 1 else 0 : bool -> nat Arguments Nat.b2n _%bool_scope\nNat.pred_0 = eq_refl : Nat.pred 0 = 0"}, {"role": "assistant", "content": "```simpl. reflexivity.```"}], "original": "simpl. reflexivity.", "succ": true}]