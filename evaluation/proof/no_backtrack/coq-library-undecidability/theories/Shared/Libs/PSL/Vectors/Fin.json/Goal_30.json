[{"history": {"proof": "apply I.", "repairs": [""], "exceptions": []}, "chat": [{"role": "user", "content": "I will give you a Coq proof state, including both hypotheses and a specific goal and your need to prove it. Your response should be a singular code block of Coq proof, without any additional explanation or commentary. Follow to these guidelines:\nIntroduce variables using unique names to avoid any conflicts.\nKeep each command distinct and separated, avoid concatenations like ';' or '[cmd|cmd]'.\nOrganize your proof with bullets like '-', '+', and '*' instead of braces ({, }). Shift to their double symbols like '--' and '++', when necessary.\nEffectively use given premises, follow the syntax and structure demonstrated in the examples provided.\n\nExample 1:\n\nHypotheses:\nn, m: nat\nIHn: m + n = n + m\n\nGoal:\nm + S n = S n + m\n\nProof:\n```simpl. rewrite <- IHn. auto.```\n\nExample 2:\nHypotheses:\n\nGoal:\nforall n m : nat, m + n = n + m\n\n```intros n m. induction n.\n- simpl. auto.\n- simpl. rewrite <- IHn. auto.```\n\nSovle This Proof State:\n\nHypotheses:\n\n\nGoal:\nTrue\n\nPremises:\nInductive True : Prop := I : True\nrdone = fun (T : Type) (_ : T) => True : forall T : Type, T -> Prop Arguments rdone {T}%type_scope\nBinPosDef.Pos.shiftl_nat = fun p : positive => nat_rect (fun _ : nat => positive) p (fun _ : nat => xO) : positive -> forall n : nat, (fun _ : nat => positive) n Arguments BinPosDef.Pos.shiftl_nat _%positive_scope _%nat_scope\nZifyClasses.inj = fun (S T : Type) (InjTyp : ZifyClasses.InjTyp S T) => ZifyClasses.inj : forall S T : Type, ZifyClasses.InjTyp S T -> S -> T Arguments ZifyClasses.inj {S T}%type_scope {InjTyp}\nNat2Z.inj_ge : forall n m : nat, n >= m < -> (Z.of_nat n >= Z.of_nat m)%Z\nBinNatDef.N.double = fun n : N => match n with | 0%N => 0%N | N.pos p => N.pos p~0 end : N -> N Arguments BinNatDef.N.double _%N_scope\nZ.mod_pos_bound : forall a b : Z, (0 < b)%Z -> (0 <= a mod b < b)%Z\nZ.mod_same : forall a : Z, a <> 0%Z -> (a mod a)%Z = 0%Z\nZ.eq_dec : forall x y : Z, {x = y} + {x <> y}\nRecord GT (T : Type) (F : T) : Prop := Build_GT { } Arguments DeclConstant.GT {T}%type_scope Arguments DeclConstant.Build_GT _%type_scope\nZ.lt = fun x y : Z => (x ?= y)%Z = Lt : Z -> Z -> Prop Arguments Z.lt (_ _)%Z_scope\nZ.le = fun x y : Z => (x ?= y)%Z <> Gt : Z -> Z -> Prop Arguments Z.le (_ _)%Z_scope\nEnv.hd : forall D : Type, Env.Env D -> D\nZ.Even_Odd_False : forall x : Z, Z.Even x -> Z.Odd x -> False\nZeq_is_eq_bool : forall x y : Z, x = y < -> Zeq_bool x y = true\nRecord PropUOp (Op : Prop -> Prop) : Prop := mkuprop { uop_iff : forall p1 q1 : Prop, p1 < -> q1 -> Op p1 < -> Op q1 } PropUOp has primitive projections with eta conversion. Arguments ZifyClasses.PropUOp _%function_scope Arguments ZifyClasses.mkuprop (_ _)%function_scope\nInductive or4 (P1 P2 P3 P4 : Prop) : Prop := Or41 : P1 -> ssrbool.or4 P1 P2 P3 P4 | Or42 : P2 -> ssrbool.or4 P1 P2 P3 P4 | Or43 : P3 -> ssrbool.or4 P1 P2 P3 P4 | Or44 : P4 -> ssrbool.or4 P1 P2 P3 P4 Arguments ssrbool.or4 (_ _ _ _)%type_scope Arguments ssrbool.Or41 [P1]%type_scope (_ _ _)%type_scope Arguments ssrbool.Or42 _%type_scope [P2]%type_scope (_ _)%type_scope Arguments ssrbool.Or43 (_ _)%type_scope [P3]%type_scope _%type_scope Arguments ssrbool.Or44 (_ _ _)%type_scope [P4]%type_scope\nZ.lt_succ_r : forall n m : Z, (n < Z.succ m)%Z < -> (n <= m)%Z\nInductive Op1 : Set := Equal : RingMicromega.Op1 | NonEqual : RingMicromega.Op1 | Strict : RingMicromega.Op1 | NonStrict : RingMicromega.Op1\nZ.max_r : forall n m : Z, (n <= m)%Z -> Z.max n m = m\nBinPosDef.Pos.pred_double = fix pred_double (x : positive) : positive := match x with | (p~1)%positive => (p~0~1)%positive | (p~0)%positive => ((pred_double p)~1)%positive | 1%positive => 1%positive end : positive -> positive Arguments BinPosDef.Pos.pred_double _%positive_scope\nZ.compare_refl : forall x : Z, (x ?= x)%Z = Eq\nRecord semi_field_theory (R : Type) (rO rI : R) (radd rmul rdiv : R -> R -> R) (rinv : R -> R) (req : R -> R -> Prop) : Prop := mk_sfield { SF_SR : Ring_theory.semi_ring_theory rO rI radd rmul req; SF_1_neq_0 : ~ req rI rO; SFdiv_def : forall p q : R, req (rdiv p q) (rmul p (rinv q)); SFinv_l : forall p : R, ~ req p rO -> req (rmul (rinv p) p) rI } Arguments Field_theory.semi_field_theory [R]%type_scope _ _ (_ _ _ _ _)%function_scope Arguments Field_theory.mk_sfield [R]%type_scope [rO rI] [radd rmul]%function_scope (_ _)%function_scope [req]%function_scope _ _ (_ _)%function_scope\nEnv.tail : forall D : Type, Env.Env D -> positive -> D\nZ.mod_bound_abs : forall a b : Z, b <> 0%Z -> (Z.abs (a mod b) < Z.abs b)%Z\nZ.pow_mul_r : forall a b c : Z, (0 <= b)%Z -> (0 <= c)%Z -> (a ^ (b * c))%Z = ((a ^ b) ^ c)%Z\nZ.opp_lt_mono : forall n m : Z, (n < m)%Z < -> (- m < - n)%Z\nEnvRing.mkPinj : forall C : Type, positive -> EnvRing.Pol C -> EnvRing.Pol C\nRing_theory.SRopp : forall R : Type, R -> R\nZ.log2_nonpos : forall n : Z, (n <= 0)%Z -> Z.log2 n = 0%Z\nEnv.jump : forall D : Type, positive -> Env.Env D -> positive -> D\nInductive Z : Set := Z0 : Z | Zpos : positive -> Z | Zneg : positive -> Z Arguments Zpos _%positive_scope Arguments Zneg _%positive_scope\nBinNatDef.N.testbit = fun a n : N => match a with | 0%N => false | N.pos p => Pos.testbit p n end : N -> N -> bool Arguments BinNatDef.N.testbit (_ _)%N_scope\nZ.sub_cancel_r : forall n m p : Z, (n - p)%Z = (m - p)%Z < -> n = m\nBinIntDef.Z.compare = fun x y : Z => match x with | 0%Z => match y with | 0%Z => Eq | Z.pos _ => Lt | Z.neg _ => Gt end | Z.pos x' => match y with | Z.pos y' => (x' ?= y')%positive | _ => Gt end | Z.neg x' => match y with | Z.neg y' => CompOpp (x' ?= y')%positive | _ => Lt end end : Z -> Z -> comparison Arguments BinIntDef.Z.compare (_ _)%Z_scope\nEnvRing.mkPinj_ok : forall (R : Type) (radd rmul : R -> R -> R) (req : R -> R -> Prop), Equivalence req -> forall (C : Type) (phi : C -> R) (j : positive) (l : Env.Env R) (P : EnvRing.Pol C), req (EnvRing.Pphi radd rmul phi l (EnvRing.mkPinj j P)) (EnvRing.Pphi radd rmul phi (Env.jump j l) P)\nRing_theory.IDphi : forall R : Type, R -> R\nBinPosDef.Pos.add = with add (x y : positive) {struct x} : positive := match x with | (p~1)%positive => match y with | (q~1)%positive => ((add_carry p q)~0)%positive | (q~0)%positive => ((add p q)~1)%positive | 1%positive => ((BinPosDef.Pos.succ p)~0)%positive end | (p~0)%positive => match y with | (q~1)%positive => ((add p q)~1)%positive | (q~0)%positive => ((add p q)~0)%positive | 1%positive => (p~1)%positive end | 1%positive => match y with | (q~1)%positive => ((BinPosDef.Pos.succ q)~0)%positive | (q~0)%positive => (q~1)%positive | 1%positive => 2%positive end end with add_carry (x y : positive) {struct x} : positive := match x with | (p~1)%positive => match y with | (q~1)%positive => ((add...\nZ.lt_eq_cases : forall n m : Z, (n <= m)%Z < -> (n < m)%Z \\/ n = m\nEnv.Env = fun D : Type => positive -> D : Type -> Type Arguments Env.Env _%type_scope\nZ.compare_eq_iff : forall n m : Z, (n ?= m)%Z = Eq < -> n = m"}, {"role": "assistant", "content": "``` \nexact I.\n```"}], "original": "apply I.", "succ": true}]