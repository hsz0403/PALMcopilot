[{"history": {"proof": "intros a. apply rel_prime_1.", "exceptions": []}, "chat": [{"role": "user", "content": "============================\nforall a : Z, rel_prime 1 a\n\nRelated definitions and lemmas:\nrel_prime = fun a b : Z => Zis_gcd a b 1 : Z -> Z -> Prop Arguments rel_prime (_ _)%Z_scope\nInductive Z : Set := Z0 : Z | Zpos : positive -> Z | Zneg : positive -> Z Arguments Zpos _%positive_scope Arguments Zneg _%positive_scope\nbezout_rel_prime : forall a b : Z, Bezout a b 1 -> rel_prime a b\nrel_prime_bezout : forall a b : Z, rel_prime a b -> Bezout a b 1\nZgcd_1_rel_prime : forall a b : Z, Z.gcd a b = 1 < -> rel_prime a b\nrel_prime_le_prime : forall a p : Z, prime p -> 1 <= a < p -> rel_prime a p\nZrel_prime_neq_mod_0 : forall a b : Z, 1 < b -> rel_prime a b -> a mod b <> 0\nrel_prime_sym : forall a b : Z, rel_prime a b -> rel_prime b a\nrel_prime_mult : forall a b c : Z, rel_prime a b -> rel_prime a c -> rel_prime a (b * c)\nrel_prime_dec : forall a b : Z, {rel_prime a b} + {~ rel_prime a b}\nprime_rel_prime : forall p : Z, prime p -> forall a : Z, ~ (p | a) -> rel_prime p a\nZ.pow_1_l : forall a : Z, 0 <= a -> 1 ^ a = 1\nZ.div_1_l : forall a : Z, 1 < a -> 1 / a = 0\nZ.quot_1_r : forall a : Z, a \u00c3\u00b7 1 = a\nZ_div_same : forall a : Z, a > 0 -> a / a = 1\nZ_div_same_full : forall a : Z, a <> 0 -> a / a = 1\nrel_prime_cross_prod : forall a b c d : Z, rel_prime a b -> rel_prime c d -> b > 0 -> d > 0 -> a * d = b * c -> a = c /\\ b = d\nZ.pow_gt_1 : forall a b : Z, 1 < a -> 0 < b < -> 1 < a ^ b\nGauss : forall a b c : Z, (a | b * c) -> rel_prime a b -> (a | c)\nprime_divisors : forall p : Z, prime p -> forall a : Z, (a | p) -> a = -1 \\/ a = 1 \\/ a = p \\/ a = - p\nZis_gcd_rel_prime : forall a b g : Z, b > 0 -> g >= 0 -> Zis_gcd a b g -> rel_prime (a / g) (b / g)\nZgcd_is_gcd : forall a b : Z, Zis_gcd a b (Z.gcd a b)\nrel_prime_1 : forall n : Z, rel_prime 1 n\nQArith_base.Qinv_lt_contravar : forall a b : QArith_base.Q, QArith_base.Qlt {| QArith_base.Qnum := 0; QArith_base.Qden := 1 |} a -> QArith_base.Qlt {| QArith_base.Qnum := 0; QArith_base.Qden := 1 |} b -> QArith_base.Qlt a b < -> QArith_base.Qlt (QArith_base.Qinv b) (QArith_base.Qinv a)\nZis_gcd_bezout : forall a b d : Z, Zis_gcd a b d -> Bezout a b d\nZis_gcd_sym : forall a b d : Z, Zis_gcd a b d -> Zis_gcd b a d\nZ.gcd_nonneg : forall a b : Z, 0 <= Z.gcd a b\nZ_div_mult : forall a b : Z, b > 0 -> a * b / b = a\nZ.shiftl_mul_pow2 : forall a n : Z, 0 <= n -> Z.shiftl a n = a * 2 ^ n\nZ.shiftl_div_pow2 : forall a n : Z, n <= 0 -> Z.shiftl a n = a / 2 ^ (- n)\nprime_dec_aux : forall p m : Z, {forall n : Z, 1 < n < m -> rel_prime n p} + {exists n : Z, 1 < n < m /\\ ~ rel_prime n p}\nZdivide_opp_l : forall a b : Z, (a | b) -> (- a | b)"}, {"role": "assistant", "content": "```intros a. apply rel_prime_1.```"}], "original": "intros a. apply rel_prime_1.", "succ": true}]