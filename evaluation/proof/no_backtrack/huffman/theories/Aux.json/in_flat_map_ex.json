[{"history": {"proof": "intros l a Hin_flat_map. shelve.", "repairs": ["used_var", ""], "exceptions": [{"ctx": [], "tactic": "intros l f a Hin_flat_map.", "exn": "f is already used.", "type": "used_var", "handled": true}, {"ctx": ["intros l a Hin_flat_map."], "tactic": "apply in_flat_map in Hin_flat_map as [b [Hin_l Hin_f]].", "exn": "Unable to apply lemma of type \"forall (l : list B) (f : B -> list C) (a : C) (b : B), In a (f b) -> In b l -> In a (flat_map f l)\" on hypothesis of type \"C\".", "type": "cannot_apply_in", "handled": false}]}, "chat": [{"role": "user", "content": "A: Type\nB: Type\nC: Type\nf: A -> B\n============================\nforall (l : list B) (f : B -> list C) (a : C), In a (flat_map f l) -> exists b : B, In b l /\\ In a (f b)\n\nRelated definitions and lemmas:\nflat_map : forall A B : Type, (A -> list B) -> list A -> list B\nInductive list (A : Type) : Type := nil : list A | cons : A -> list A -> list A Arguments list _%type_scope Arguments nil {A}%type_scope Arguments cons {A}%type_scope a l%list_scope : rename\nIn : forall A : Type, A -> list A -> Prop\nin_flat_map : forall (l : list B) (f : B -> list C) (a : C) (b : B), In a (f b) -> In b l -> In a (flat_map f l)\nin_map_inv : forall (b : B) (l : list A), In b (map f l) -> exists a : A, In a l /\\ b = f a\nfold_left_eta : forall (A B : Type) (f : A -> B -> A) (l : list B) (a : A) (f1 : A -> B -> A), (forall (a0 : A) (b : B), In b l -> f a0 b = f1 a0 b) -> fold_left f l a = fold_left f1 l a\nLists.List.in_flat_map : forall (A B : Type) (f : A -> list B) (l : list A) (y : B), In y (flat_map f l) < -> (exists x : A, In x l /\\ In y (f x))\nin_inv : forall (A : Type) (a b : A) (l : list A), In b (a :: l) -> a = b \\/ In b l\next_in_map : forall (A B : Type) (f g : A -> B) (l : list A), map f l = map g l -> forall a : A, In a l -> f a = g a\nmap_ext_in : forall (A B : Type) (f g : A -> B) (l : list A), (forall a : A, In a l -> f a = g a) -> map f l = map g l\nin_map : forall (A B : Type) (f : A -> B) (l : list A) (x : A), In x l -> In (f x) (map f l)\nin_cons : forall (A : Type) (a b : A) (l : list A), In b l -> In b (a :: l)\nZMicromega.in_bdepth : forall (l : list ZMicromega.ZArithProof) (a b : ZMicromega.ZWitness) (y : ZMicromega.ZArithProof), In y l -> ltof ZMicromega.ZArithProof ZMicromega.bdepth y (ZMicromega.EnumProof a b l)\nin_map_iff : forall (A B : Type) (f : A -> B) (l : list A) (y : B), In y (map f l) < -> (exists x : A, f x = y /\\ In x l)\next_in_filter : forall (A : Type) (f g : A -> bool) (l : list A), filter f l = filter g l -> forall a : A, In a l -> f a = g a\nin_map_fst_inv : forall (a : B) (l : list (B * C)), In a (map fst l) -> exists c : C, In (a, c) l\nfilter_ext_in : forall (A : Type) (f g : A -> bool) (l : list A), (forall a : A, In a l -> f a = g a) -> filter f l = filter g l\npartition_cons2 : forall (A : Type) (f : A -> bool) (a : A) (l l1 l2 : list A), partition f l = (l1, l2) -> f a = false -> partition f (a :: l) = (l1, a :: l2)\nfilter_ext_in_iff : forall (A : Type) (f g : A -> bool) (l : list A), filter f l = filter g l < -> (forall a : A, In a l -> f a = g a)\nflat_map_concat_map : forall (A B : Type) (f : A -> list B) (l : list A), flat_map f l = concat (map f l)\nfilter_In : forall (A : Type) (f : A -> bool) (x : A) (l : list A), In x (filter f l) < -> In x l /\\ f x = true\nAdd_inv : forall (A : Type) (a : A) (l : list A), In a l -> exists l' : list A, Add a l' l\nin_ex_app : forall (a : A) (l : list A), In a l -> exists l1 l2 : list A, l = l1 ++ a :: l2\nfind_some : forall (A : Type) (f : A -> bool) (l : list A) (x : A), find f l = Some x -> In x l /\\ f x = true\nBool.orb_prop : forall a b : bool, (a || b)%bool = true -> a = true \\/ b = true\nexistsb_exists : forall (A : Type) (f : A -> bool) (l : list A), existsb f l = true < -> (exists x : A, In x l /\\ f x = true)\nfind_none : forall (A : Type) (f : A -> bool) (l : list A), find f l = None -> forall x : A, In x l -> f x = false\nincl_Add_inv : forall (A : Type) (a : A) (l u v : list A), ~ In a l -> incl (a :: l) v -> Add a u v -> incl l u\nNoDup_Add : forall (A : Type) (a : A) (l l' : list A), Add a l l' -> NoDup l' < -> NoDup l /\\ ~ In a l\nin_or_app : forall (A : Type) (l m : list A) (a : A), In a l \\/ In a m -> In a (l ++ m)\nin_app_or : forall (A : Type) (l m : list A) (a : A), In a (l ++ m) -> In a l \\/ In a m\nincl_cons : forall (A : Type) (a : A) (l m : list A), In a m -> incl l m -> incl (a :: l) m\nforallb_forall : forall (A : Type) (f : A -> bool) (l : list A), forallb f l = true < -> (forall x : A, In x l -> f x = true)"}, {"role": "assistant", "content": "```intros l f a Hin_flat_map.\napply in_flat_map in Hin_flat_map as [b [Hin_l Hin_f]].\nexists b. auto.```"}], "original": "intros l f a Hin_flat_map. apply in_flat_map in Hin_flat_map as [b [Hin_l Hin_f]]. exists b. auto.", "succ": false}]