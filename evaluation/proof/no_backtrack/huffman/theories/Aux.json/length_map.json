[{"history": {"proof": "intros l. induction l. - simpl. auto. - simpl. rewrite map_length. auto.", "repairs": ["", "", "", "", "", "", "", "", ""], "exceptions": [{"ctx": ["intros l.", "induction l.", "-", "simpl.", "auto.", "-", "simpl.", "rewrite map_length."], "tactic": "rewrite IHl.", "exn": "Found no subterm matching \"length (map f l)\" in the current goal.", "type": "no_subterm", "handled": false}]}, "chat": [{"role": "user", "content": "A: Type\nB: Type\nC: Type\nf: A -> B\n============================\nforall l : list A, length (map f l) = length l\n\nRelated definitions and lemmas:\nlength : forall A : Type, list A -> nat\nInductive list (A : Type) : Type := nil : list A | cons : A -> list A -> list A Arguments list _%type_scope Arguments nil {A}%type_scope Arguments cons {A}%type_scope a l%list_scope : rename\nmap : forall A B : Type, (A -> B) -> list A -> list B\nmap_length : forall (A B : Type) (f : A -> B) (l : list A), length (map f l) = length l\nVectorSpec.to_list_of_list_opp : forall l : list ?A, VectorDef.to_list (VectorDef.of_list l) = l where ?A : [A : Type B : Type C : Type f : A -> B |- Type]\nin_map_inv : forall (b : B) (l : list A), In b (map f l) -> exists a : A, In a l /\\ b = f a\nlist_length_ind : forall P : list A -> Prop, (forall l1 : list A, (forall l2 : list A, length l2 < length l1 -> P l2) -> P l1) -> forall l : list A, P l\nlist_length_induction : forall P : list A -> Type, (forall l1 : list A, (forall l2 : list A, length l2 < length l1 -> P l2) -> P l1) -> forall l : list A, P l\nflat_map_concat_map : forall (A B : Type) (f : A -> list B) (l : list A), flat_map f l = concat (map f l)\nin_map_iff : forall (A B : Type) (f : A -> B) (l : list A) (y : B), In y (map f l) < -> (exists x : A, f x = y /\\ In x l)\nmap_rev : forall (A B : Type) (f : A -> B) (l : list A), map f (rev l) = rev (map f l)\npartition_length : forall (A : Type) (f : A -> bool) (l l1 l2 : list A), partition f l = (l1, l2) -> length l = length l1 + length l2\nVectorDef.of_list : forall l : list ?A, VectorDef.t ?A (length l) where ?A : [A : Type B : Type C : Type f : A -> B |- Type]\nconcat_map : forall (A B : Type) (f : A -> B) (l : list (list A)), map f (concat l) = concat (map (map f) l)\nmap_ext_in_iff : map ?f ?l = map ?g ?l < -> (forall a : ?A, In a ?l -> ?f a = ?g a) where ?A : [A : Type B : Type C : Type f : A -> B |- Type] ?B : [A : Type B : Type C : Type f : A -> B |- Type] ?f : [A : Type B : Type C : Type f : A -> B |- ?A -> ?B] ?g : [A : Type B : Type C : Type f : A -> B |- ?A -> ?B] ?l : [A : Type B : Type C : Type f : A -> B |- list ?A]\ncount_occ_map : forall (A B : Type) (f : A -> B) (decA : forall x1 x2 : A, {x1 = x2} + {x1 <> x2}) (decB : forall y1 y2 : B, {y1 = y2} + {y1 <> y2}), (forall x1 x2 : A, f x1 = f x2 -> x1 = x2) -> forall (x : A) (l : list A), count_occ decA l x = count_occ decB (map f l) (f x)\nmap_ext : forall (A B : Type) (f g : A -> B), (forall a : A, f a = g a) -> forall l : list A, map f l = map g l\nconcat_filter_map : forall (A : Type) (f : A -> bool) (l : list (list A)), concat (map (filter f) l) = filter f (concat l)\nNoDup_map_inv : forall (A B : Type) (f : A -> B) (l : list A), NoDup (map f l) -> NoDup l\nlength_app : forall l1 l2 : list A, length (l1 ++ l2) = length l1 + length l2\nexistsb_nth : forall (A : Type) (f : A -> bool) (l : list A) (n : nat) (d : A), n < length l -> existsb f l = false -> f (nth n l d) = false\nmap_nth : forall (A B : Type) (f : A -> B) (l : list A) (d : A) (n : nat), nth n (map f l) (f d) = f (nth n l d)\next_in_map : forall (A B : Type) (f g : A -> B) (l : list A), map f l = map g l -> forall a : A, In a l -> f a = g a\nmap_nth_error : forall (A B : Type) (f : A -> B) (n : nat) (l : list A) (d : A), nth_error l n = Some d -> nth_error (map f l) n = Some (f d)\nmap_map : forall (A B C : Type) (f : A -> B) (g : B -> C) (l : list A), map g (map f l) = map (fun x : A => g (f x)) l\nfirstn_length_le : forall (A : Type) (l : list A) (n : nat), n <= length l -> length (firstn n l) = n\nrev_length : forall (A : Type) (l : list A), length (rev l) = length l\nmap_ext_in : forall (A B : Type) (f g : A -> B) (l : list A), (forall a : A, In a l -> f a = g a) -> map f l = map g l\nin_map : forall (A B : Type) (f : A -> B) (l : list A) (x : A), In x l -> In (f x) (map f l)\nnth_split : forall (A : Type) (n : nat) (l : list A) (d : A), n < length l -> exists l1 l2 : list A, l = l1 ++ nth n l d :: l2 /\\ length l1 = n\nfold_left_map : forall (A B : Type) (f : A -> B -> A) (C : Type) (a : A) (l : list C) (k : C -> B), fold_left f (map k l) a = fold_left (fun (a0 : A) (b : C) => f a0 (k b)) l a\ncombine_split : forall (A B : Type) (l : list A) (l' : list B), length l = length l' -> split (combine l l') = (l, l')\nsame_length_ex : forall (a : A) (l1 l2 : list A) (l3 : list B), length (l1 ++ a :: l2) = length l3 -> exists (l4 l5 : list B) (b : B), length l1 = length l4 /\\ length l2 = length l5 /\\ l3 = l4 ++ b :: l5"}, {"role": "assistant", "content": "```intros l. induction l.\n- simpl. auto.\n- simpl. rewrite map_length. rewrite IHl. auto.```"}], "original": "intros l. induction l. - simpl. auto. - simpl. rewrite map_length. rewrite IHl. auto.", "succ": true}]