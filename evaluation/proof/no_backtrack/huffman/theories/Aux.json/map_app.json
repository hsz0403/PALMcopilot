[{"history": {"proof": "intros l1 l2. rewrite map_app. reflexivity.", "repairs": ["", "", ""], "exceptions": []}, "chat": [{"role": "user", "content": "A: Type\nB: Type\nC: Type\nf: A -> B\n============================\nforall l1 l2 : list A, map f (l1 ++ l2) = map f l1 ++ map f l2\n\nRelated definitions and lemmas:\nInductive list (A : Type) : Type := nil : list A | cons : A -> list A -> list A Arguments list _%type_scope Arguments nil {A}%type_scope Arguments cons {A}%type_scope a l%list_scope : rename\nmap : forall A B : Type, (A -> B) -> list A -> list B\nmap_app : forall (A B : Type) (f : A -> B) (l l' : list A), map f (l ++ l') = map f l ++ map f l'\nforallb_app : forall (A : Type) (f : A -> bool) (l1 l2 : list A), forallb f (l1 ++ l2) = (forallb f l1 && forallb f l2)%bool\nexistsb_app : forall (A : Type) (f : A -> bool) (l1 l2 : list A), existsb f (l1 ++ l2) = (existsb f l1 || existsb f l2)%bool\nfold_left_app : forall (A B : Type) (f : A -> B -> A) (a : A) (l1 l2 : list B), fold_left f (l1 ++ l2) a = fold_left f l2 (fold_left f l1 a)\nmap_ext : forall (A B : Type) (f g : A -> B), (forall a : A, f a = g a) -> forall l : list A, map f l = map g l\next_in_map : forall (A B : Type) (f g : A -> B) (l : list A), map f l = map g l -> forall a : A, In a l -> f a = g a\nmap_ext_in : forall (A B : Type) (f g : A -> B) (l : list A), (forall a : A, In a l -> f a = g a) -> map f l = map g l\nmap_cons : forall (A B : Type) (f : A -> B) (x : A) (l : list A), map f (x :: l) = f x :: map f l\nlength_app : forall l1 l2 : list A, length (l1 ++ l2) = length l1 + length l2\nfilter_map : forall (A : Type) (f g : A -> bool) (l : list A), filter f l = filter g l < -> map f l = map g l\nTauto.map_simpl : forall (A B : Type) (f : A -> B) (l : list A), map f l = match l with | nil => nil | a :: l0 => f a :: map f l0 end\nmap_rev : forall (A B : Type) (f : A -> B) (l : list A), map f (rev l) = rev (map f l)\napp_inv_tail : forall l1 l2 l3 : list A, l2 ++ l1 = l3 ++ l1 -> l2 = l3\napp_inv_head : forall l1 l2 l3 : list A, l1 ++ l2 = l1 ++ l3 -> l2 = l3\nfirstn_app_2 : forall (A : Type) (n : nat) (l1 l2 : list A), firstn (length l1 + n) (l1 ++ l2) = l1 ++ firstn n l2\nconcat_app : forall (A : Type) (l1 l2 : list (list A)), concat (l1 ++ l2) = concat l1 ++ concat l2\nmap_ext_in_iff : map ?f ?l = map ?g ?l < -> (forall a : ?A, In a ?l -> ?f a = ?g a) where ?A : [A : Type B : Type C : Type f : A -> B |- Type] ?B : [A : Type B : Type C : Type f : A -> B |- Type] ?f : [A : Type B : Type C : Type f : A -> B |- ?A -> ?B] ?g : [A : Type B : Type C : Type f : A -> B |- ?A -> ?B] ?l : [A : Type B : Type C : Type f : A -> B |- list ?A]\nmap_eq_nil : forall (A B : Type) (f : A -> B) (l : list A), map f l = nil -> l = nil\nmap_map : forall (A B C : Type) (f : A -> B) (g : B -> C) (l : list A), map g (map f l) = map (fun x : A => g (f x)) l\nRefl.make_conj_rapp : forall (A : Type) (eval : A -> Prop) (l1 l2 : list A), Refl.make_conj eval (rev_append l1 l2) < -> Refl.make_conj eval (l1 ++ l2)\napp_inv_app : forall (l1 l2 l3 l4 : list A) (a : A), l1 ++ l2 = l3 ++ a :: l4 -> (exists l5 : list A, l1 = l3 ++ a :: l5) \\/ (exists l5 : list A, l2 = l5 ++ a :: l4)\nfold_right_app : forall (A B : Type) (g : B -> A -> A) (a : A) (l1 l2 : list B), fold_right g a (l1 ++ l2) = fold_right g (fold_right g a l2) l1\nRefl.make_conj_app : forall (A : Type) (eval : A -> Prop) (l1 l2 : list A), Refl.make_conj eval (l1 ++ l2) < -> Refl.make_conj eval l1 /\\ Refl.make_conj eval l2\nfirstn_app : forall (A : Type) (n : nat) (l1 l2 : list A), firstn n (l1 ++ l2) = firstn n l1 ++ firstn (n - length l1) l2\nskipn_app : forall (A : Type) (n : nat) (l1 l2 : list A), skipn n (l1 ++ l2) = skipn n l1 ++ skipn (n - length l1) l2\nconcat_map : forall (A B : Type) (f : A -> B) (l : list (list A)), map f (concat l) = concat (map (map f) l)\nLists.List.app_inv_tail : forall (A : Type) (l l1 l2 : list A), l1 ++ l = l2 ++ l -> l1 = l2\nLists.List.app_inv_head : forall (A : Type) (l l1 l2 : list A), l ++ l1 = l ++ l2 -> l1 = l2\napp_inv_app2 : forall (l1 l2 l3 l4 : list A) (a b : A), l1 ++ l2 = l3 ++ a :: b :: l4 -> (exists l5 : list A, l1 = l3 ++ a :: b :: l5) \\/ (exists l5 : list A, l2 = l5 ++ a :: b :: l4) \\/ l1 = l3 ++ a :: nil /\\ l2 = b :: l4\nAdd_split : forall (A : Type) (a : A) (l l' : list A), Add a l l' -> exists l1 l2 : list A, l = l1 ++ l2 /\\ l' = l1 ++ a :: l2"}, {"role": "assistant", "content": "```intros l1 l2. rewrite map_app. reflexivity.```"}], "original": "intros l1 l2. rewrite map_app. reflexivity.", "succ": true}]