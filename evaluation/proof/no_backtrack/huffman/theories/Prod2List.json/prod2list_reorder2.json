[{"history": {"proof": "intros. shelve.", "repairs": ["", ""], "exceptions": [{"ctx": ["intros."], "tactic": "apply same_length_ex in H; destruct H as [l6 [l7 [b H]]]; destruct H as [H1 [H2 H3]].", "exn": "Unable to apply lemma of type \"forall (A B : Type) (a : A) (l1 l2 : list A) (l3 : list B), length (l1 ++ a :: l2) = length l3 -> exists (l4 l5 : list B) (b : B), length l1 = length l4 /\\\\ length l2 = length l5 /\\\\ l3 = l4 ++ b :: l5\" on hypothesis of type \"length l1 = length l3\".", "type": "cannot_apply_in", "handled": false}, {"ctx": ["intros."], "tactic": "apply prod2list_reorder with (a:=a) in H0 as H4; auto.", "exn": "Unable to find an instance for the variables b, b1, l1, l3, l5.", "type": "no_instance_var", "handled": false}, {"ctx": ["intros."], "tactic": "apply prod2list_reorder with (a:=a) in H1 as H5; auto.", "exn": "Unable to find an instance for the variables b, b1, l1, l3, l4, l5.", "type": "no_instance_var", "handled": false}, {"ctx": ["intros."], "tactic": "apply app_inv_app2 in H2; destruct H2 as [l3' [H6|H6]]; destruct H6 as [H6|H6].", "exn": "Unable to apply lemma of type \"forall (A : Type) (l1 l2 l3 l4 : list A) (a b : A), l1 ++ l2 = l3 ++ a :: b :: l4 -> (exists l5 : list A, l1 = l3 ++ a :: b :: l5) \\\\/ (exists l5 : list A, l2 = l5 ++ a :: b :: l4) \\\\/ l1 = l3 ++ a :: nil /\\\\ l2 = b :: l4\" on hypothesis of type \"forall b : nat, In b l2 -> b <= a\".", "type": "cannot_apply_in", "handled": false}, {"ctx": ["intros."], "tactic": "apply permutation_cons_ex with (a:=b) in H3.", "exn": "Unable to apply lemma of type \"forall (A : Type) (a : A) (l1 l2 : list A), permutation (a :: l1) l2 -> exists l3 l4 : list A, l2 = l3 ++ a :: l4 /\\\\ permutation l1 (l3 ++ l4)\" on hypothesis of type \"permutation (l3 ++ b :: c :: l4) (b1 :: c1 :: l5)\".", "type": "cannot_apply_in", "handled": false}, {"ctx": ["intros."], "tactic": "destruct H3 as [l8 [l9 [H7 H8]]].", "exn": "Expects a disjunctive pattern with 4 branches.", "type": "num_branch", "handled": false}, {"ctx": ["intros."], "tactic": "apply permutation_cons_ex_aux with (l11:=l3') (l12:=l4) in H8.", "exn": "No such hypothesis: H8", "type": "no_hypos", "handled": false}, {"ctx": ["intros."], "tactic": "rewrite app_assoc.", "exn": "Found no subterm matching \"?M1503 ++ ?M1504 ++ ?M1505\" in the current goal.", "type": "no_subterm", "handled": false}, {"ctx": ["intros."], "tactic": "rewrite app_assoc.", "exn": "Found no subterm matching \"?M1503 ++ ?M1504 ++ ?M1505\" in the current goal.", "type": "no_subterm", "handled": false}, {"ctx": ["intros."], "tactic": "apply prod2list_app.", "exn": "In environment A : Type f : A -> nat a : nat b, c, b1, c1 : btree A l1, l2 : list nat l3, l4, l5 : list (btree A) H : length l1 = length l3 H0 : length l2 = length l4 H1 : forall b : nat, In b l1 -> b <= a H2 : forall b : nat, In b l2 -> b <= a H3 : permutation (l3 ++ b :: c :: l4) (b1 :: c1 :: l5) H4 : ordered (sum_order f) (b1 :: c1 :: l5) Unable to unify \"prod2list (?M1502 ++ ?M1504) (?M1503 ++ ?M1505) = prod2list ?M1502 ?M1503 + prod2list ?M1504 ?M1505\" with \"exists l6 l7 : list (btree A), length l1 = length l6 /\\\\ length l2 = length l7 /\\\\ permutation (b1 :: c1 :: l5) (l6 ++ b1 :: c1 :: l7) /\\\\ prod2list (l1 ++ a :: a :: l2) (l6 ++ b1 :: c1 :: l7) <= prod2list (l1 ++ a :: a :: l2) (l3 ++ b :: c :: l4)\".", "type": "cannot_unify", "handled": false}, {"ctx": ["intros."], "tactic": "apply prod2list_app.", "exn": "In environment A : Type f : A -> nat a : nat b, c, b1, c1 : btree A l1, l2 : list nat l3, l4, l5 : list (btree A) H : length l1 = length l3 H0 : length l2 = length l4 H1 : forall b : nat, In b l1 -> b <= a H2 : forall b : nat, In b l2 -> b <= a H3 : permutation (l3 ++ b :: c :: l4) (b1 :: c1 :: l5) H4 : ordered (sum_order f) (b1 :: c1 :: l5) Unable to unify \"prod2list (?M1502 ++ ?M1504) (?M1503 ++ ?M1505) = prod2list ?M1502 ?M1503 + prod2list ?M1504 ?M1505\" with \"exists l6 l7 : list (btree A), length l1 = length l6 /\\\\ length l2 = length l7 /\\\\ permutation (b1 :: c1 :: l5) (l6 ++ b1 :: c1 :: l7) /\\\\ prod2list (l1 ++ a :: a :: l2) (l6 ++ b1 :: c1 :: l7) <= prod2list (l1 ++ a :: a :: l2) (l3 ++ b :: c :: l4)\".", "type": "cannot_unify", "handled": false}, {"ctx": ["intros."], "tactic": "apply f_equal with (f:=@length btree) in H6.", "exn": "No such hypothesis: H6", "type": "no_hypos", "handled": false}, {"ctx": ["intros."], "tactic": "simpl in H6.", "exn": "No such hypothesis: H6", "type": "no_hypos", "handled": false}, {"ctx": ["intros."], "tactic": "apply f_equal with (f:=@length btree) in H9.", "exn": "No such hypothesis: H9", "type": "no_hypos", "handled": false}, {"ctx": ["intros."], "tactic": "simpl in H9.", "exn": "No such hypothesis: H9", "type": "no_hypos", "handled": false}, {"ctx": ["intros."], "tactic": "apply f_equal with (f:=prod2list).", "exn": "In environment A : Type f : A -> nat a : nat b, c, b1, c1 : btree A l1, l2 : list nat l3, l4, l5 : list (btree A) H : length l1 = length l3 H0 : length l2 = length l4 H1 : forall b : nat, In b l1 -> b <= a H2 : forall b : nat, In b l2 -> b <= a H3 : permutation (l3 ++ b :: c :: l4) (b1 :: c1 :: l5) H4 : ordered (sum_order f) (b1 :: c1 :: l5) Unable to unify \"prod2list ?M1505 = prod2list ?M1506\" with \"exists l6 l7 : list (btree A), length l1 = length l6 /\\\\ length l2 = length l7 /\\\\ permutation (b1 :: c1 :: l5) (l6 ++ b1 :: c1 :: l7) /\\\\ prod2list (l1 ++ a :: a :: l2) (l6 ++ b1 :: c1 :: l7) <= prod2list (l1 ++ a :: a :: l2) (l3 ++ b :: c :: l4)\".", "type": "cannot_unify", "handled": false}, {"ctx": ["intros."], "tactic": "apply f_equal2; auto.", "exn": "In environment A : Type f : A -> nat a : nat b, c, b1, c1 : btree A l1, l2 : list nat l3, l4, l5 : list (btree A) H : length l1 = length l3 H0 : length l2 = length l4 H1 : forall b : nat, In b l1 -> b <= a H2 : forall b : nat, In b l2 -> b <= a H3 : permutation (l3 ++ b :: c :: l4) (b1 :: c1 :: l5) H4 : ordered (sum_order f) (b1 :: c1 :: l5) Unable to unify \"?M1505 ?M1506 ?M1508 = ?M1505 ?M1507 ?M1509\" with \"exists l6 l7 : list (btree A), length l1 = length l6 /\\\\ length l2 = length l7 /\\\\ permutation (b1 :: c1 :: l5) (l6 ++ b1 :: c1 :: l7) /\\\\ prod2list (l1 ++ a :: a :: l2) (l6 ++ b1 :: c1 :: l7) <= prod2list (l1 ++ a :: a :: l2) (l3 ++ b :: c :: l4)\".", "type": "cannot_unify", "handled": false}, {"ctx": ["intros."], "tactic": "apply prod2list_app.", "exn": "In environment A : Type f : A -> nat a : nat b, c, b1, c1 : btree A l1, l2 : list nat l3, l4, l5 : list (btree A) H : length l1 = length l3 H0 : length l2 = length l4 H1 : forall b : nat, In b l1 -> b <= a H2 : forall b : nat, In b l2 -> b <= a H3 : permutation (l3 ++ b :: c :: l4) (b1 :: c1 :: l5) H4 : ordered (sum_order f) (b1 :: c1 :: l5) Unable to unify \"prod2list (?M1502 ++ ?M1504) (?M1503 ++ ?M1505) = prod2list ?M1502 ?M1503 + prod2list ?M1504 ?M1505\" with \"exists l6 l7 : list (btree A), length l1 = length l6 /\\\\ length l2 = length l7 /\\\\ permutation (b1 :: c1 :: l5) (l6 ++ b1 :: c1 :: l7) /\\\\ prod2list (l1 ++ a :: a :: l2) (l6 ++ b1 :: c1 :: l7) <= prod2list (l1 ++ a :: a :: l2) (l3 ++ b :: c :: l4)\".", "type": "cannot_unify", "handled": false}, {"ctx": ["intros."], "tactic": "apply f_equal with (f:=@length btree) in H7.", "exn": "No such hypothesis: H7", "type": "no_hypos", "handled": false}, {"ctx": ["intros."], "tactic": "simpl in H7.", "exn": "No such hypothesis: H7", "type": "no_hypos", "handled": false}, {"ctx": ["intros."], "tactic": "apply f_equal with (f:=@length btree) in H0.", "exn": "In environment A : Type f : A -> nat a : nat b, c, b1, c1 : btree A l1, l2 : list nat l3, l4, l5 : list (btree A) H : length l1 = length l3 H0 : length l2 = length l4 H1 : forall b : nat, In b l1 -> b <= a H2 : forall b : nat, In b l2 -> b <= a H3 : permutation (l3 ++ b :: c :: l4) (b1 :: c1 :: l5) H4 : ordered (sum_order f) (b1 :: c1 :: l5) The term \"btree\" has type \"Type -> Type\" while it is expected to have type \"Type\".", "type": "wrong_type", "handled": false}]}, "chat": [{"role": "user", "content": "A: Type\nf: A -> nat\n============================\nforall (a : nat) (b c b1 c1 : btree A) (l1 l2 : list nat) (l3 l4 l5 : list (btree A)), length l1 = length l3 -> length l2 = length l4 -> (forall b0 : nat, In b0 l1 -> b0 <= a) -> (forall b0 : nat, In b0 l2 -> b0 <= a) -> permutation (l3 ++ b :: c :: l4) (b1 :: c1 :: l5) -> ordered (sum_order f) (b1 :: c1 :: l5) -> exists l6 l7 : list (btree A), length l1 = length l6 /\\ length l2 = length l7 /\\ permutation (b1 :: c1 :: l5) (l6 ++ b1 :: c1 :: l7) /\\ prod2list (l1 ++ a :: a :: l2) (l6 ++ b1 :: c1 :: l7) <= prod2list (l1 ++ a :: a :: l2) (l3 ++ b :: c :: l4)\n\nRelated definitions and lemmas:\nInductive btree (A : Type) : Type := leaf : A -> btree A | node : btree A -> btree A -> btree A Arguments btree _%type_scope Arguments leaf [A]%type_scope Arguments node [A]%type_scope\nprod2list = fun (l1 : list nat) (l2 : list (btree A)) => fold_left Init.Nat.add (map2 (fun (a : nat) (b : btree A) => a * sum_leaves f b + weight_tree f b) l1 l2) 0 : list nat -> list (btree A) -> nat Arguments prod2list (_ _)%list_scope\nIn : forall A : Type, A -> list A -> Prop\nordered : forall A : Type, (A -> A -> Prop) -> list A -> Prop\nInductive nat : Set := O : nat | S : nat -> nat Arguments S _%nat_scope\nInductive list (A : Type) : Type := nil : list A | cons : A -> list A -> list A Arguments list _%type_scope Arguments nil {A}%type_scope Arguments cons {A}%type_scope a l%list_scope : rename\nlength : forall A : Type, list A -> nat\nsum_order : forall A : Type, (A -> nat) -> btree A -> btree A -> Prop\npermutation : forall A : Type, list A -> list A -> Prop\nprod2list_reorder : forall (a : nat) (b b1 : btree A) (l1 l2 : list nat) (l3 l4 l5 : list (btree A)), length l1 = length l3 -> length l2 = length l4 -> (forall b0 : nat, In b0 l1 -> b0 <= a) -> (forall b0 : nat, In b0 l2 -> b0 <= a) -> permutation (l3 ++ b :: l4) (b1 :: l5) -> ordered (sum_order f) (b1 :: l5) -> exists l6 l7 : list (btree A), length l1 = length l6 /\\ length l2 = length l7 /\\ permutation (b1 :: l5) (l6 ++ b1 :: l7) /\\ prod2list (l1 ++ a :: l2) (l6 ++ b1 :: l7) <= prod2list (l1 ++ a :: l2) (l3 ++ b :: l4)\nprod2list_eq : forall (a : nat) (b c : btree A) (l1 l2 l3 : list nat) (l4 l5 l6 : list (btree A)), length l1 = length l4 -> length l2 = length l5 -> length l3 = length l6 -> prod2list (l1 ++ a :: l2 ++ a :: l3) (l4 ++ b :: l5 ++ c :: l6) = prod2list (l1 ++ a :: l2 ++ a :: l3) (l4 ++ c :: l5 ++ b :: l6)\nprod2list_le_r : forall (a b : nat) (c d : btree A) (l1 l2 l3 : list nat) (l4 l5 l6 : list (btree A)), length l1 = length l4 -> length l2 = length l5 -> length l3 = length l6 -> sum_leaves f d <= sum_leaves f c -> b <= a -> prod2list (l1 ++ a :: l2 ++ b :: l3) (l4 ++ d :: l5 ++ c :: l6) <= prod2list (l1 ++ a :: l2 ++ b :: l3) (l4 ++ c :: l5 ++ d :: l6)\nprod2list_le_l : forall (a b : nat) (c d : btree A) (l1 l2 l3 : list nat) (l4 l5 l6 : list (btree A)), length l1 = length l4 -> length l2 = length l5 -> length l3 = length l6 -> sum_leaves f c <= sum_leaves f d -> a <= b -> prod2list (l1 ++ a :: l2 ++ b :: l3) (l4 ++ d :: l5 ++ c :: l6) <= prod2list (l1 ++ a :: l2 ++ b :: l3) (l4 ++ c :: l5 ++ d :: l6)\nsame_length_ex : forall (A B : Type) (a : A) (l1 l2 : list A) (l3 : list B), length (l1 ++ a :: l2) = length l3 -> exists (l4 l5 : list B) (b : B), length l1 = length l4 /\\ length l2 = length l5 /\\ l3 = l4 ++ b :: l5\napp_inv_app2 : forall (A : Type) (l1 l2 l3 l4 : list A) (a b : A), l1 ++ l2 = l3 ++ a :: b :: l4 -> (exists l5 : list A, l1 = l3 ++ a :: b :: l5) \\/ (exists l5 : list A, l2 = l5 ++ a :: b :: l4) \\/ l1 = l3 ++ a :: nil /\\ l2 = b :: l4\npermutation_cons_ex : forall (A : Type) (a : A) (l1 l2 : list A), permutation (a :: l1) l2 -> exists l3 l4 : list A, l2 = l3 ++ a :: l4 /\\ permutation l1 (l3 ++ l4)\npermutation_cons_ex_aux : forall (A : Type) (a : A) (l1 l2 : list A), permutation l1 l2 -> forall l11 l12 : list A, l1 = l11 ++ a :: l12 -> exists l3 l4 : list A, l2 = l3 ++ a :: l4 /\\ permutation (l11 ++ l12) (l3 ++ l4)\nprod2list_app : forall (l1 : list nat) (l2 : list (btree A)) (l3 : list nat) (l4 : list (btree A)), length l1 = length l2 -> prod2list (l1 ++ l3) (l2 ++ l4) = prod2list l1 l2 + prod2list l3 l4\napp_inv_app : forall (A : Type) (l1 l2 l3 l4 : list A) (a : A), l1 ++ l2 = l3 ++ a :: l4 -> (exists l5 : list A, l1 = l3 ++ a :: l5) \\/ (exists l5 : list A, l2 = l5 ++ a :: l4)\nexist_first_max : forall l : list nat, l <> nil -> exists (a : nat) (l1 l2 : list nat), l = l1 ++ a :: l2 /\\ (forall n1 : nat, In n1 l1 -> n1 < a) /\\ (forall n1 : nat, In n1 l2 -> n1 <= a)\npermutation_sind : forall (A : Type) (P : list A -> list A -> SProp), P nil nil -> (forall (a : A) (l1 l2 : list A), permutation l2 l1 -> P l2 l1 -> P (a :: l2) (a :: l1)) -> (forall (a b : A) (l : list A), P (a :: b :: l) (b :: a :: l)) -> (forall l1 l2 l3 : list A, permutation l1 l2 -> P l1 l2 -> permutation l2 l3 -> P l2 l3 -> P l1 l3) -> forall l l0 : list A, permutation l l0 -> P l l0\npermutation_ind : forall (A : Type) (P : list A -> list A -> Prop), P nil nil -> (forall (a : A) (l1 l2 : list A), permutation l2 l1 -> P l2 l1 -> P (a :: l2) (a :: l1)) -> (forall (a b : A) (l : list A), P (a :: b :: l) (b :: a :: l)) -> (forall l1 l2 l3 : list A, permutation l1 l2 -> P l1 l2 -> permutation l2 l3 -> P l2 l3 -> P l1 l3) -> forall l l0 : list A, permutation l l0 -> P l l0\nnth_split : forall (A : Type) (n : nat) (l : list A) (d : A), n < length l -> exists l1 l2 : list A, l = l1 ++ nth n l d :: l2 /\\ length l1 = n\nnth_error_split : forall (A : Type) (l : list A) (n : nat) (a : A), nth_error l n = Some a -> exists l1 l2 : list A, l = l1 ++ a :: l2 /\\ length l1 = n\npermutation_transposition : forall (A : Type) (a b : A) (l1 l2 l3 : list A), permutation (l1 ++ a :: l2 ++ b :: l3) (l1 ++ b :: l2 ++ a :: l3)\nmap2_app : forall (A B C : Type) (f : A -> B -> C) (l1 : list A) (l2 : list B) (l3 : list A) (l4 : list B), length l1 = length l2 -> map2 f (l1 ++ l3) (l2 ++ l4) = map2 f l1 l2 ++ map2 f l3 l4\nfirst_n_app1 : forall (A : Type) (n : nat) (l1 l2 : list A), length l1 <= n -> first_n (l1 ++ l2) n = l1 ++ first_n l2 (n - length l1)\npermutation_one_inv_aux : forall (A : Type) (l1 l2 : list A), permutation l1 l2 -> forall a : A, l1 = a :: nil -> l2 = a :: nil\npermutation_inv : forall (A : Type) (a : A) (l1 l2 : list A), permutation (a :: l1) (a :: l2) -> permutation l1 l2\npermutation_skip : forall (A : Type) (a : A) (l1 l2 : list A), permutation l2 l1 -> permutation (a :: l2) (a :: l1)\nskip_n_app1 : forall (A : Type) (n : nat) (l1 l2 : list A), length l1 <= n -> skip_n (l1 ++ l2) n = skip_n l2 (n - length l1)\nordered_skip : forall (A : Type) (order : A -> A -> Prop), (forall a b c : A, order a b -> order b c -> order a c) -> forall (a b : A) (l : list A), ordered order (a :: b :: l) -> ordered order (a :: l)\nin_ex_app : forall (A : Type) (a : A) (l : list A), In a l -> exists l1 l2 : list A, l = l1 ++ a :: l2\nordered_trans_app : forall (A : Type) (order : A -> A -> Prop), (forall a b c : A, order a b -> order b c -> order a c) -> forall (a b : A) (l1 l2 : list A), ordered order (l1 ++ l2) -> In a l1 -> In b l2 -> order a b\napp_inj_tail : forall (A : Type) (x y : list A) (a b : A), x ++ a :: nil = y ++ b :: nil -> x = y /\\ a = b\nlength_app : forall (A : Type) (l1 l2 : list A), length (l1 ++ l2) = length l1 + length l2\nordered_ind : forall (A : Type) (order : A -> A -> Prop) (P : list A -> Prop), P nil -> (forall a : A, P (a :: nil)) -> (forall (a b : A) (l : list A), order a b -> ordered order (b :: l) -> P (b :: l) -> P (a :: b :: l)) -> forall l : list A, ordered order l -> P l\nordered_sind : forall (A : Type) (order : A -> A -> Prop) (P : list A -> SProp), P nil -> (forall a : A, P (a :: nil)) -> (forall (a b : A) (l : list A), order a b -> ordered order (b :: l) -> P (b :: l) -> P (a :: b :: l)) -> forall l : list A, ordered order l -> P l\nordered_sum_leaves_eq : forall (A : Type) (f : A -> nat) (l1 l2 : list (btree A)), permutation l1 l2 -> ordered (sum_order f) l1 -> ordered (sum_order f) l2 -> map (sum_leaves f) l1 = map (sum_leaves f) l2"}, {"role": "assistant", "content": "``` \nintros.\napply same_length_ex in H; destruct H as [l6 [l7 [b H]]]; destruct H as [H1 [H2 H3]].\napply prod2list_reorder with (a:=a) in H0 as H4; auto.\napply prod2list_reorder with (a:=a) in H1 as H5; auto.\napply app_inv_app2 in H2; destruct H2 as [l3' [H6|H6]]; destruct H6 as [H6|H6].\n+ apply permutation_cons_ex with (a:=b) in H3.\n  destruct H3 as [l8 [l9 [H7 H8]]].\n  apply permutation_cons_ex_aux with (l11:=l3') (l12:=l4) in H8.\n  destruct H8 as [l10 [l11 [H9 H10]]].\n  exists l6, (l10 ++ l7); repeat split; auto.\n  (* Additional subgoals *)\n  * rewrite H; rewrite H7; rewrite H9.\n    rewrite app_assoc. rewrite app_assoc. apply prod2list_app. auto.\n  * apply prod2list_app.\n    -- apply f_equal with (f:=@length btree) in H6.\n       repeat rewrite app_length in H6. simpl in H6. omega.\n    -- apply f_equal with (f:=@length btree) in H9.\n       repeat rewrite app_length in H9. simpl in H9. omega.\n+ destruct H6 as [l8 [H7 H8]].\n  exists (l6 ++ l8), l7; repeat split; auto.\n  (* Additional subgoals *)\n  * rewrite H; rewrite H7.\n    repeat rewrite <- app_assoc. apply f_equal with (f:=prod2list).\n    apply f_equal2; auto. auto.\n  * apply prod2list_app.\n    -- apply f_equal with (f:=@length btree) in H7.\n       repeat rewrite app_length in H7. simpl in H7. omega.\n    -- apply f_equal with (f:=@length btree) in H0.\n       repeat rewrite app_length in H0. simpl in H0. omega.\n```  "}], "original": "intros. apply same_length_ex in H; destruct H as [l6 [l7 [b H]]]; destruct H as [H1 [H2 H3]]. apply prod2list_reorder with (a:=a) in H0 as H4; auto. apply prod2list_reorder with (a:=a) in H1 as H5; auto. apply app_inv_app2 in H2; destruct H2 as [l3' [H6|H6]]; destruct H6 as [H6|H6]. + apply permutation_cons_ex with (a:=b) in H3. destruct H3 as [l8 [l9 [H7 H8]]]. apply permutation_cons_ex_aux with (l11:=l3') (l12:=l4) in H8. destruct H8 as [l10 [l11 [H9 H10]]]. exists l6, (l10 ++ l7); repeat split; auto. * rewrite H; rewrite H7; rewrite H9. rewrite app_assoc. rewrite app_assoc. apply prod2list_app. auto. * apply prod2list_app. -- apply f_equal with (f:=@length btree) in H6. repeat rewrite app_length in H6. simpl in H6. omega. -- apply f_equal with (f:=@length btree) in H9. repeat rewrite app_length in H9. simpl in H9. omega. + destruct H6 as [l8 [H7 H8]]. exists (l6 ++ l8), l7; repeat split; auto. * rewrite H; rewrite H7. repeat rewrite <- app_assoc. apply f_equal with (f:=prod2list). apply f_equal2; auto. auto. * apply prod2list_app. -- apply f_equal with (f:=@length btree) in H7. repeat rewrite app_length in H7. simpl in H7. omega. -- apply f_equal with (f:=@length btree) in H0. repeat rewrite app_length in H0. simpl in H0. omega.", "succ": false}]