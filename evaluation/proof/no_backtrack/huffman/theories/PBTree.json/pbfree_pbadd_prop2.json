[{"history": {"proof": "induction l1 as [| b l1' IH]. - shelve. - unfold pbadd. destruct l1'. + destruct l2. * destruct l3; intros _. intro. -- shelve. -- shelve. -- shelve. -- shelve. * intros. shelve. + intros. shelve.", "repairs": ["", "", "unfinished_bullet", "", "", "", "", "", "", "", "", "unfinished_bullet", "unfinished_bullet", "wrong_bullet", "unfinished_bullet", "wrong_bullet", "unfinished_bullet", "wrong_bullet", "unfinished_bullet", "", "", "unfinished_bullet", "wrong_bullet", "", "unfinished_bullet"], "exceptions": [{"ctx": [], "tactic": "intros a l1 l2 l3 H1 H2 H3 H4.", "exn": "No product even after head-reduction.", "type": "no_product", "handled": false}, {"ctx": [], "tactic": "unfold pbfree in H1.", "exn": "Cannot coerce pbfree to an evaluable reference.", "type": "not_evaluable", "handled": false}, {"ctx": ["induction l1 as [| b l1' IH].", "-"], "tactic": "-", "exn": "Wrong bullet -: Current bullet - is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["induction l1 as [| b l1' IH].", "-", "shelve.", "-"], "tactic": "unfold not in H2, H3.", "exn": "No such hypothesis: H2", "type": "no_hypos", "handled": false}, {"ctx": ["induction l1 as [| b l1' IH].", "-", "shelve.", "-", "unfold pbadd.", "destruct l1'.", "+", "destruct l2.", "*", "destruct l3; intros _.", "intro."], "tactic": "inversion H1.", "exn": "No such hypothesis: H1", "type": "no_hypos", "handled": false}, {"ctx": ["induction l1 as [| b l1' IH].", "-", "shelve.", "-", "unfold pbadd.", "destruct l1'.", "+", "destruct l2.", "*", "destruct l3; intros _.", "intro."], "tactic": "*", "exn": "Wrong bullet *: Current bullet * is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["induction l1 as [| b l1' IH].", "-", "shelve.", "-", "unfold pbadd.", "destruct l1'.", "+", "destruct l2.", "*", "destruct l3; intros _.", "intro.", "--", "shelve."], "tactic": "*", "exn": "Wrong bullet *: Expecting --.", "type": "wrong_bullet", "handled": true}, {"ctx": ["induction l1 as [| b l1' IH].", "-", "shelve.", "-", "unfold pbadd.", "destruct l1'.", "+", "destruct l2.", "*", "destruct l3; intros _.", "intro.", "--", "shelve.", "--"], "tactic": "destruct pbtree.", "exn": "Not an inductive product.", "type": "not_inductive_product", "handled": false}, {"ctx": ["induction l1 as [| b l1' IH].", "-", "shelve.", "-", "unfold pbadd.", "destruct l1'.", "+", "destruct l2.", "*", "destruct l3; intros _.", "intro.", "--", "shelve.", "--"], "tactic": "-", "exn": "Wrong bullet -: Current bullet -- is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["induction l1 as [| b l1' IH].", "-", "shelve.", "-", "unfold pbadd.", "destruct l1'.", "+", "destruct l2.", "*", "destruct l3; intros _.", "intro.", "--", "shelve.", "--", "shelve."], "tactic": "-", "exn": "Wrong bullet -: Expecting --.", "type": "wrong_bullet", "handled": true}, {"ctx": ["induction l1 as [| b l1' IH].", "-", "shelve.", "-", "unfold pbadd.", "destruct l1'.", "+", "destruct l2.", "*", "destruct l3; intros _.", "intro.", "--", "shelve.", "--", "shelve.", "--"], "tactic": "+", "exn": "Wrong bullet +: Current bullet -- is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["induction l1 as [| b l1' IH].", "-", "shelve.", "-", "unfold pbadd.", "destruct l1'.", "+", "destruct l2.", "*", "destruct l3; intros _.", "intro.", "--", "shelve.", "--", "shelve.", "--", "shelve."], "tactic": "+", "exn": "Wrong bullet +: Expecting --.", "type": "wrong_bullet", "handled": true}, {"ctx": ["induction l1 as [| b l1' IH].", "-", "shelve.", "-", "unfold pbadd.", "destruct l1'.", "+", "destruct l2.", "*", "destruct l3; intros _.", "intro.", "--", "shelve.", "--", "shelve.", "--", "shelve.", "--"], "tactic": "destruct pbtree, p; intros.", "exn": "Not an inductive product.", "type": "not_inductive_product", "handled": false}, {"ctx": ["induction l1 as [| b l1' IH].", "-", "shelve.", "-", "unfold pbadd.", "destruct l1'.", "+", "destruct l2.", "*", "destruct l3; intros _.", "intro.", "--", "shelve.", "--", "shelve.", "--", "shelve.", "--"], "tactic": "*", "exn": "Wrong bullet *: Current bullet -- is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["induction l1 as [| b l1' IH].", "-", "shelve.", "-", "unfold pbadd.", "destruct l1'.", "+", "destruct l2.", "*", "destruct l3; intros _.", "intro.", "--", "shelve.", "--", "shelve.", "--", "shelve.", "--", "shelve.", "*", "intros."], "tactic": "destruct l3; destruct a; intros; inversion H1.", "exn": "Not an inductive product.", "type": "not_inductive_product", "handled": false}, {"ctx": ["induction l1 as [| b l1' IH].", "-", "shelve.", "-", "unfold pbadd.", "destruct l1'.", "+", "destruct l2.", "*", "destruct l3; intros _.", "intro.", "--", "shelve.", "--", "shelve.", "--", "shelve.", "--", "shelve.", "*", "intros."], "tactic": "*", "exn": "Wrong bullet *: Current bullet * is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["induction l1 as [| b l1' IH].", "-", "shelve.", "-", "unfold pbadd.", "destruct l1'.", "+", "destruct l2.", "*", "destruct l3; intros _.", "intro.", "--", "shelve.", "--", "shelve.", "--", "shelve.", "--", "shelve.", "*", "intros.", "shelve."], "tactic": "*", "exn": "Wrong bullet *: Expecting +.", "type": "wrong_bullet", "handled": true}, {"ctx": ["induction l1 as [| b l1' IH].", "-", "shelve.", "-", "unfold pbadd.", "destruct l1'.", "+", "destruct l2.", "*", "destruct l3; intros _.", "intro.", "--", "shelve.", "--", "shelve.", "--", "shelve.", "--", "shelve.", "*", "intros.", "shelve.", "+", "intros."], "tactic": "destruct l3; destruct a; intros; inversion H1.", "exn": "Not an inductive product.", "type": "not_inductive_product", "handled": false}, {"ctx": ["induction l1 as [| b l1' IH].", "-", "shelve.", "-", "unfold pbadd.", "destruct l1'.", "+", "destruct l2.", "*", "destruct l3; intros _.", "intro.", "--", "shelve.", "--", "shelve.", "--", "shelve.", "--", "shelve.", "*", "intros.", "shelve.", "+", "intros."], "tactic": "destruct l3; destruct a; intros; inversion H1.", "exn": "Not an inductive product.", "type": "not_inductive_product", "handled": false}, {"ctx": ["induction l1 as [| b l1' IH].", "-", "shelve.", "-", "unfold pbadd.", "destruct l1'.", "+", "destruct l2.", "*", "destruct l3; intros _.", "intro.", "--", "shelve.", "--", "shelve.", "--", "shelve.", "--", "shelve.", "*", "intros.", "shelve.", "+", "intros."], "tactic": "destruct l3; destruct a; intros; inversion H1.", "exn": "Not an inductive product.", "type": "not_inductive_product", "handled": false}, {"ctx": ["induction l1 as [| b l1' IH].", "-", "shelve.", "-", "unfold pbadd.", "destruct l1'.", "+", "destruct l2.", "*", "destruct l3; intros _.", "intro.", "--", "shelve.", "--", "shelve.", "--", "shelve.", "--", "shelve.", "*", "intros.", "shelve.", "+", "intros."], "tactic": "destruct l3; destruct a; intros; inversion H1.", "exn": "Not an inductive product.", "type": "not_inductive_product", "handled": false}, {"ctx": ["induction l1 as [| b l1' IH].", "-", "shelve.", "-", "unfold pbadd.", "destruct l1'.", "+", "destruct l2.", "*", "destruct l3; intros _.", "intro.", "--", "shelve.", "--", "shelve.", "--", "shelve.", "--", "shelve.", "*", "intros.", "shelve.", "+", "intros."], "tactic": "destruct l3; destruct a; intros; inversion H1.", "exn": "Not an inductive product.", "type": "not_inductive_product", "handled": false}, {"ctx": ["induction l1 as [| b l1' IH].", "-", "shelve.", "-", "unfold pbadd.", "destruct l1'.", "+", "destruct l2.", "*", "destruct l3; intros _.", "intro.", "--", "shelve.", "--", "shelve.", "--", "shelve.", "--", "shelve.", "*", "intros.", "shelve.", "+", "intros."], "tactic": "destruct l3; destruct a; intros; inversion H1.", "exn": "Not an inductive product.", "type": "not_inductive_product", "handled": false}, {"ctx": ["induction l1 as [| b l1' IH].", "-", "shelve.", "-", "unfold pbadd.", "destruct l1'.", "+", "destruct l2.", "*", "destruct l3; intros _.", "intro.", "--", "shelve.", "--", "shelve.", "--", "shelve.", "--", "shelve.", "*", "intros.", "shelve.", "+", "intros."], "tactic": "destruct l3; destruct a; intros; inversion H1.", "exn": "Not an inductive product.", "type": "not_inductive_product", "handled": false}, {"ctx": ["induction l1 as [| b l1' IH].", "-", "shelve.", "-", "unfold pbadd.", "destruct l1'.", "+", "destruct l2.", "*", "destruct l3; intros _.", "intro.", "--", "shelve.", "--", "shelve.", "--", "shelve.", "--", "shelve.", "*", "intros.", "shelve.", "+", "intros."], "tactic": "destruct l3; destruct a; intros; inversion H1.", "exn": "Not an inductive product.", "type": "not_inductive_product", "handled": false}, {"ctx": ["induction l1 as [| b l1' IH].", "-", "shelve.", "-", "unfold pbadd.", "destruct l1'.", "+", "destruct l2.", "*", "destruct l3; intros _.", "intro.", "--", "shelve.", "--", "shelve.", "--", "shelve.", "--", "shelve.", "*", "intros.", "shelve.", "+", "intros."], "tactic": "destruct l3; destruct a; intros; inversion H1.", "exn": "Not an inductive product.", "type": "not_inductive_product", "handled": false}, {"ctx": ["induction l1 as [| b l1' IH].", "-", "shelve.", "-", "unfold pbadd.", "destruct l1'.", "+", "destruct l2.", "*", "destruct l3; intros _.", "intro.", "--", "shelve.", "--", "shelve.", "--", "shelve.", "--", "shelve.", "*", "intros.", "shelve.", "+", "intros."], "tactic": "+", "exn": "Wrong bullet +: Current bullet + is not finished.", "type": "unfinished_bullet", "handled": true}, {"ctx": ["induction l1 as [| b l1' IH].", "-", "shelve.", "-", "unfold pbadd.", "destruct l1'.", "+", "destruct l2.", "*", "destruct l3; intros _.", "intro.", "--", "shelve.", "--", "shelve.", "--", "shelve.", "--", "shelve.", "*", "intros.", "shelve.", "+", "intros.", "shelve."], "tactic": "+", "exn": "Wrong bullet +: No more subgoals.", "type": "no_more_subgoals", "handled": true}]}, "chat": [{"role": "user", "content": "A: Type\nempty: A\neqA_dec: forall a b : A, {a = b} + {a <> b}\n============================\nforall (a : A) (l1 l2 : list bool) (l3 : pbtree), pbfree l1 l3 -> ~ is_prefix l2 l1 -> ~ is_prefix l1 l2 -> pbfree l1 (pbadd a l3 l2)\n\nRelated definitions and lemmas:\nInductive is_prefix : list bool -> list bool -> Prop := prefixNull : forall l : list bool, is_prefix nil l | prefixCons : forall (b : bool) (l1 l2 : list bool), is_prefix l1 l2 -> is_prefix (b :: l1) (b :: l2) Arguments is_prefix (_ _)%list_scope Arguments prefixNull _%list_scope Arguments prefixCons _%bool_scope (_ _)%list_scope\nInductive bool : Set := true : bool | false : bool\npbadd = fix pbadd (a : A) (t : pbtree) (l : list bool) {struct l} : pbtree := match l with | nil => pbleaf a | true :: l1 => match t with | pbleaf _ => pbright (pbadd a (pbleaf empty) l1) | pbleft t1 => pbnode t1 (pbadd a (pbleaf empty) l1) | pbright t2 => pbright (pbadd a t2 l1) | pbnode t1 t2 => pbnode t1 (pbadd a t2 l1) end | false :: l1 => match t with | pbleaf _ => pbleft (pbadd a (pbleaf empty) l1) | pbleft t1 => pbleft (pbadd a t1 l1) | pbright t2 => pbnode (pbadd a (pbleaf empty) l1) t2 | pb\nInductive pbfree : list bool -> pbtree -> Prop := pbfree_left1 : forall (b : pbtree) (l : list bool), pbfree (true :: l) (pbleft b) | pbfree_left2 : forall (b : pbtree) (l : list bool), pbfree l b -> pbfree (false :: l) (pbleft b) | pbfree_right1 : forall (b : pbtree) (l : list bool), pbfree (false :: l) (pbright b) | pbfree_right2 : forall (b : pbtree) (l : list bool), pbfree l b -> pbfree (true :: l) (pbright b) | pbfree_node1 : forall (b c : pbtree) (l : list bool), pbfree l b -> pbfree (false :: l) (pbnode b c) | pbfree_node2 : forall (b c : pbtree) (l : list bool), pbfree l\nInductive pbtree : Type := pbleaf : A -> pbtree | pbleft : pbtree -> pbtree | pbright : pbtree -> pbtree | pbnode : pbtree -> pbtree -> pbtree\nInductive list (A : Type) : Type := nil : list A | cons : A -> list A -> list A Arguments list _%type_scope Arguments nil {A}%type_scope Arguments cons {A}%type_scope a l%list_scope : rename\npbfree_pbadd_prop1 : forall (a1 : A) (l l1 : list bool), ~ is_prefix l l1 -> ~ is_prefix l1 l -> pbfree l (pbadd a1 (pbleaf empty) l1)\npermutation_trans : forall (A : Type) (l1 l2 l3 : list A), permutation l1 l2 -> permutation l2 l3 -> permutation l1 l3\npbadd_prop2 : forall (a1 : A) (l1 : list bool) (l2 : pbtree), pbfree l1 l2 -> permutation (compute_pbcode (pbadd a1 l2 l1)) ((a1, l1) :: compute_pbcode l2)\napp_inv_tail : forall (A : Type) (l1 l2 l3 : list A), l2 ++ l1 = l3 ++ l1 -> l2 = l3\napp_inv_head : forall (A : Type) (l1 l2 l3 : list A), l1 ++ l2 = l1 ++ l3 -> l2 = l3\npermutation_ind : forall (A : Type) (P : list A -> list A -> Prop), P nil nil -> (forall (a : A) (l1 l2 : list A), permutation l2 l1 -> P l2 l1 -> P (a :: l2) (a :: l1)) -> (forall (a b : A) (l : list A), P (a :: b :: l) (b :: a :: l)) -> (forall l1 l2 l3 : list A, permutation l1 l2 -> P l1 l2 -> permutation l2 l3 -> P l2 l3 -> P l1 l3) -> forall l l0 : list A, permutation l l0 -> P l l0\nnumber_of_occurrences_permutation : forall (A : Type) (eqA_dec : forall a b : A, {a = b} + {a <> b}) (l1 l2 : list A) (a : A), permutation l1 l2 -> number_of_occurrences eqA_dec a l1 = number_of_occurrences eqA_dec a l2\nprefixCons : forall (b : bool) (l1 l2 : list bool), is_prefix l1 l2 -> is_prefix (b :: l1) (b :: l2)\napp_inv_app2 : forall (A : Type) (l1 l2 l3 l4 : list A) (a b : A), l1 ++ l2 = l3 ++ a :: b :: l4 -> (exists l5 : list A, l1 = l3 ++ a :: b :: l5) \\/ (exists l5 : list A, l2 = l5 ++ a :: b :: l4) \\/ l1 = l3 ++ a :: nil /\\ l2 = b :: l4\nfind_code_app : forall (A : Type) (eqA_dec : forall a b : A, {a = b} + {a <> b}) (a : A) (l1 : code A) (l2 : list (A * list bool)), not_null l1 -> find_code eqA_dec a (l1 ++ l2) = match find_code eqA_dec a l1 with | nil => find_code eqA_dec a l2 | b1 :: l3 => b1 :: l3 end\npermutation_dec : forall A : Type, (forall a b : A, {a = b} + {a <> b}) -> forall l1 l2 : list A, {permutation l1 l2} + {~ permutation l1 l2}\npermutation_app_comp : forall (A : Type) (l1 l2 l3 l4 : list A), permutation l1 l2 -> permutation l3 l4 -> permutation (l1 ++ l3) (l2 ++ l4)\nis_prefix_ind : forall P : list bool -> list bool -> Prop, (forall l : list bool, P nil l) -> (forall (b : bool) (l1 l2 : list bool), is_prefix l1 l2 -> P l1 l2 -> P (b :: l1) (b :: l2)) -> forall l l0 : list bool, is_prefix l l0 -> P l l0\nis_prefix_sind : forall P : list bool -> list bool -> SProp, (forall l : list bool, P nil l) -> (forall (b : bool) (l1 l2 : list bool), is_prefix l1 l2 -> P l1 l2 -> P (b :: l1) (b :: l2)) -> forall l l0 : list bool, is_prefix l l0 -> P l l0\nInductive permutation (A : Type) : list A -> list A -> Prop := permutation_nil : permutation nil nil | permutation_skip : forall (a : A) (l1 l2 : list A), permutation l2 l1 -> permutation (a :: l2) (a :: l1) | permutation_swap : forall (a b : A) (l : list A), permutation (a :: b :: l) (b :: a :: l) | permutation_trans : forall l1 l2 l3 : list A, permutation l1 l2 -> permutation l2 l3 -> permutation l1 l3 Arguments permutation [A]%type_scope (_ _)%list_scope Arguments permutation_nil _%type_scope Arguments permutation_skip _%type_scope _ (_ _)%list_scope Arguments permutation_swap _%type_scope _ _ _%list_scope Arguments permutation_trans _%type_scope (_ _ _)%list_scope\nnumber_of_occurrences_app : forall (A : Type) (eqA_dec : forall a b : A, {a = b} + {a <> b}) (l1 l2 : list A) (a : A), number_of_occurrences eqA_dec a (l1 ++ l2) = number_of_occurrences eqA_dec a l1 + number_of_occurrences eqA_dec a l2\nall_permutations_permutation : forall (A : Type) (l1 l2 : list A), In l1 (all_permutations l2) -> permutation l1 l2\npermutation_all_permutations : forall (A : Type) (l1 l2 : list A), permutation l1 l2 -> In l1 (all_permutations l2)\nencode_app : forall (A : Type) (eqA_dec : forall a b : A, {a = b} + {a <> b}) (l1 l2 : list A) (c : code A), encode eqA_dec c (l1 ++ l2) = encode eqA_dec c l1 ++ encode eqA_dec c l2\nunique_key_app : forall (A B : Type) (l1 l2 : list (A * B)), unique_key l1 -> unique_key l2 -> (forall (a : A) (b c : B), In (a, b) l1 -> In (a, c) l2 -> False) -> unique_key (l1 ++ l2)\npermutation_skip : forall (A : Type) (a : A) (l1 l2 : list A), permutation l2 l1 -> permutation (a :: l2) (a :: l1)\nskip_n_app2 : forall (A : Type) (n : nat) (l1 l2 : list A), n <= length l1 -> skip_n (l1 ++ l2) n = skip_n l1 n ++ l2\nfirst_n_app1 : forall (A : Type) (n : nat) (l1 l2 : list A), length l1 <= n -> first_n (l1 ++ l2) n = l1 ++ first_n l2 (n - length l1)\nunique_key_in_inv : forall (A B : Type) (a : A) (l1 l2 : B) (l : list (A * B)), unique_key l -> In (a, l1) l -> In (a, l2) l -> l1 = l2\nfirst_n_app2 : forall (A : Type) (n : nat) (l1 l2 : list A), n <= length l1 -> first_n (l1 ++ l2) n = first_n l1 n\npermutation_map : forall (A B : Type) (f : A -> B) (l1 l2 : list A), permutation l1 l2 -> permutation (map f l1) (map f l2)\nlength_encode_nId : forall (A : Type) (eqA_dec : forall a b : A, {a = b} + {a <> b}) (a : A) (l1 : list bool) (l : list (A * list bool)) (n : nat), length (encode eqA_dec ((a, l1) :: l) (id_list a n)) = n * length l1\nlength_app : forall (A : Type) (l1 l2 : list A), length (l1 ++ l2) = length l1 + length l2\nnumber_of_occurrences_O : forall (A : Type) (eqA_dec : forall a b : A, {a = b} + {a <> b}) (a : A) (l : list A), ~ In a l -> number_of_occurrences eqA_dec a l = 0\nencode_cons_inv : forall (A : Type) (eqA_dec : forall a b : A, {a = b} + {a <> b}) (a : A) (l1 : list bool) (l : list (A * list bool)) (m1 : list A), ~ In a m1 -> encode eqA_dec ((a, l1) :: l) m1 = encode eqA_dec l m1"}, {"role": "assistant", "content": "``` \nintros a l1 l2 l3 H1 H2 H3 H4.\nunfold pbfree in H1.\ninduction l1 as [| b l1' IH].\n- assumption.\n- unfold not in H2, H3. unfold pbadd.\n  destruct l1'.\n  + destruct l2.\n    * destruct l3; intros _.\n      { apply H4. }\n      { intro. inversion H1. }\n    * destruct pbtree.\n      { destruct p; intro; inversion H1. }\n      all: intros; simplify.\n- simpl in IH.\n  destruct l2.\n  + destruct pbtree, p; intros.\n    * specialize (H2 (prefixCons b l1' nil IH)).\n      intros. destruct l3; destruct a; intros; inversion H1.\n    * specialize (H3 (prefixCons b l1' nil IH)).\n      intros. destruct l3; destruct a; intros; inversion H1.\n    * destruct p.\n      -- destruct (pbfree_left1 t l2); intros.\n         { intros. destruct l3; destruct a; intros; inversion H1. }\n         { intros. destruct l3; destruct a; intros; inversion H1. }\n         { intros. destruct l3; destruct a; intros; inversion H1. }\n         { intros. destruct l3; destruct a; intros; inversion H1. }\n      -- destruct (pbfree_right1 t l2); intros.\n         { intros. destruct l3; destruct a; intros; inversion H1. }\n         { intros. destruct l3; destruct a; intros; inversion H1. }\n         { intros. destruct l3; destruct a; intros; inversion H1. }\n         { intros. destruct l3; destruct a; intros; inversion H1. }\n  + destruct pbtree, p; intros.\n    * specialize (H2 (prefixCons b l1' (b0 :: l2) IH)).\n      intros. destruct l3; destruct a; intros; inversion H1.\n    * specialize (H3 (prefixCons b l1' (b0 :: l2) IH)).\n      intros. destruct l3; destruct a; intros; inversion H1.\n    * destruct p.\n      -- specialize (H2 (prefixCons b l1' (negb b0 :: l2) IH)).\n         intros. destruct l3; destruct a; intros; inversion H1.\n      -- destruct (pbfree_right2 t l2); intros.\n         { intros. destruct l3; destruct a; intros; inversion H1. }\n         { intros. destruct l3; destruct a; intros; inversion H1. }\n         { intros. destruct l3; destruct a; intros; inversion H1. }\n         { intros. destruct l3; destruct a; intros; inversion H1. }\n    * specialize (H2 (prefixCons b l1' (negb b0 :: l2) IH)).\n      intros. destruct l3; destruct a; intros; inversion H1.\n    * destruct (pbfree_node1 t t0 l2); intros.\n      -- intros. destruct l3; destruct a; intros; inversion H1.\n      -- intros. destruct l3; destruct a; intros; inversion H1.\n```"}], "original": "intros a l1 l2 l3 H1 H2 H3 H4. unfold pbfree in H1. induction l1 as [| b l1' IH]. - auto. - unfold not in H2, H3. unfold pbadd. destruct l1'. + destruct l2. * destruct l3; intros _. { apply H4. } { intro. inversion H1. } * destruct pbtree. { destruct p; intro; inversion H1. } all: intros; simplify. - simpl in IH. destruct l2. + destruct pbtree, p; intros. * specialize (H2 (prefixCons b l1' nil IH)). intros. destruct l3; destruct a; intros; inversion H1. * specialize (H3 (prefixCons b l1' nil IH)). intros. destruct l3; destruct a; intros; inversion H1. * destruct p. -- destruct (pbfree_left1 t l2); intros. { intros. destruct l3; destruct a; intros; inversion H1. } { intros. destruct l3; destruct a; intros; inversion H1. } { intros. destruct l3; destruct a; intros; inversion H1. } { intros. destruct l3; destruct a; intros; inversion H1. } -- destruct (pbfree_right1 t l2); intros. { intros. destruct l3; destruct a; intros; inversion H1. } { intros. destruct l3; destruct a; intros; inversion H1. } { intros. destruct l3; destruct a; intros; inversion H1. } { intros. destruct l3; destruct a; intros; inversion H1. } + destruct pbtree, p; intros. * specialize (H2 (prefixCons b l1' (b0 :: l2) IH)). intros. destruct l3; destruct a; intros; inversion H1. * specialize (H3 (prefixCons b l1' (b0 :: l2) IH)). intros. destruct l3; destruct a; intros; inversion H1. * destruct p. -- specialize (H2 (prefixCons b l1' (negb b0 :: l2) IH)). intros. destruct l3; destruct a; intros; inversion H1. -- destruct (pbfree_right2 t l2); intros. { intros. destruct l3; destruct a; intros; inversion H1. } { intros. destruct l3; destruct a; intros; inversion H1. } { intros. destruct l3; destruct a; intros; inversion H1. } { intros. destruct l3; destruct a; intros; inversion H1. } * specialize (H2 (prefixCons b l1' (negb b0 :: l2) IH)). intros. destruct l3; destruct a; intros; inversion H1. * destruct (pbfree_node1 t t0 l2); intros. -- intros. destruct l3; destruct a; intros; inversion H1. -- intros. destruct l3; destruct a; intros; inversion H1.", "succ": false}]