[{"history": {"proof": "shelve.", "repairs": [""], "exceptions": []}, "chat": [{"role": "user", "content": "I will give you a Coq proof state, including both hypotheses and a specific goal and your need to prove it. Your response should be a singular code block of Coq proof, without any additional explanation or commentary. Follow to these guidelines:\nIntroduce variables using unique names to avoid any conflicts.\nKeep each command distinct and separated, avoid concatenations like ';' or '[cmd|cmd]'.\nOrganize your proof with bullets like '-', '+', and '*' instead of braces ({, }). Shift to their double symbols like '--' and '++', when necessary.\nEffectively use given premises, follow the syntax and structure demonstrated in the examples provided.\n\nExample 1:\n\nHypotheses:\nn, m: nat\nIHn: m + n = n + m\n\nGoal:\nm + S n = S n + m\n\nProof:\n```simpl. rewrite <- IHn. auto.```\n\nExample 2:\nHypotheses:\n\nGoal:\nforall n m : nat, m + n = n + m\n\n```intros n m. induction n.\n- simpl. auto.\n- simpl. rewrite <- IHn. auto.```\n\nSovle This Proof State:\n\nHypotheses:\n\n\nGoal:\nLiftVar\n\nPremises:\nRecord LiftVar (A : Type) (H : Var A) (H0 : Lift A) : Prop := Build_LiftVar { lift_var : forall w k x : nat, lift w k (var x) = var (lift w k x) } Arguments LiftVar {A}%type_scope {H H0} Arguments Build_LiftVar [A]%type_scope _ _ _%function_scope\nBuild_LiftVar : forall (A : Type) (H : Var A) (H0 : Lift A), (forall w k x : nat, lift w k (var x) = var (lift w k x)) -> LiftVar\nfast_OMEGA14 : forall (v l1 l2 : Z) (x : positive) (P : Z -> Prop), P (l1 + l2)%Z -> P (v * Z.neg x + l1 + (v * Z.pos x + l2))%Z\nNat.le_0_l : forall n : nat, 0 <= n\nNat.add_comm : forall n m : nat, n + m = m + n\nplus_is_O : forall n m : nat, n + m = 0 -> n = 0 /\\ m = 0\nlift = fun (T : Type) (Lift0 : Lift T) => let (lift) := Lift0 in lift : forall T : Type, Lift T -> nat -> nat -> T -> T Arguments lift {T}%type_scope {Lift} (_ _)%nat_scope\ninj_gt : forall n m : nat, n > m -> (Z.of_nat n > Z.of_nat m)%Z\nByte.of_nat = fun x : nat => match x with | 0 => Some Byte.x00 | 1 => Some Byte.x01 | 2 => Some Byte.x02 | 3 => Some Byte.x03 | 4 => Some Byte.x04 | 5 => Some Byte.x05 | 6 => Some Byte.x06 | 7 => Some Byte.x07 | 8 => Some Byte.x08 | 9 => Some Byte.x09 | 10 => Some Byte.x0a | 11 => Some Byte.x0b | 12 => Some Byte.x0c | 13 => Some Byte.x0d | 14 => Some Byte.x0e | 15 => Some Byte.x0f | 16 => Some Byte.x10 | 17 => Some Byte.x11 | 18 => Some Byte.x12 | 19 => Some Byte.x13 | 20 => Some Byte.x14 | 21 => Some Byte.x15 | 22 => Some Byte.x16 | 23 => Some Byte.x17 | 24 => Some Byte.x18 | 25 => Some Byte.x19 | 26 => Some Byte.x1a | 27 => Some Byte.x1b |...\nFin.FS_inj : forall x y : Fin.t ?n, Fin.FS x = Fin.FS y -> x = y where ?n : [ |- nat]\nNat.le_wd = fun (n n' : nat) (Hn : n = n') (m m' : nat) (Hm : m = m') => (fun lemma : n < S m <-> n <= m => Morphisms.trans_co_eq_inv_impl_morphism RelationClasses.iff_Transitive (n <= m) (n < S m) (RelationClasses.symmetry lemma) (n' <= m') (n' <= m') (Morphisms.eq_proper_proxy (n' <= m'))) (Nat.lt_succ_r n m) ((fun lemma : n' < S m' <-> n' <= m' => Morphisms.trans_sym_co_inv_impl_morphism (RelationClasses.Equivalence_PER RelationClasses.iff_equivalence) (n' <= m') (n' < S m') (RelationClasses.symmetry lemma)) (Nat.lt_succ_r n' m') ((fun lemma : n = n' => Morphisms.trans_co_eq_inv_impl_morphism RelationClasses.iff_Transitive (n < S m) (n' < S m) (Nat.lt_wd n n' lemma (S m) (S m) (Morphisms.reflex...\nPos2Nat.inj_succ : forall p : positive, Pos.to_nat (Pos.succ p) = S (Pos.to_nat p)\nNat.ones_add : forall n m : nat, Nat.ones (m + n) = 2 ^ m * Nat.ones n + Nat.ones m\nInductive positive : Set := xI : positive -> positive | xO : positive -> positive | xH : positive Arguments xI _%positive_scope Arguments xO _%positive_scope\nfast_Zred_factor6 : forall (x : Z) (P : Z -> Prop), P (x + 0)%Z -> P x\nPos2Nat.inj_iter : forall (p : positive) (A : Type) (f : A -> A) (x : A), Pos.iter f x p = nat_rect (fun _ : nat => A) x (fun _ : nat => f) (Pos.to_nat p)\nNat.pow_nonzero : forall a b : nat, a <> 0 -> a ^ b <> 0\nNat.min_compat = fun (x x' : nat) (Hx : x = x') (y y' : nat) (Hy : y = y') => let H1 : x < y /\\ Nat.min x y = x \\/ y <= x /\\ Nat.min x y = y := Nat.min_spec x y in let H2 : x' < y' /\\ Nat.min x' y' = x' \\/ y' <= x' /\\ Nat.min x' y' = y' := Nat.min_spec x' y' in let m := Nat.min x y in let m' := Nat.min x' y' in let o : x < y \\/ x = y \\/ y < x := Nat.lt_total x y in match o with | or_introl H => or_ind (fun H0 : x < y /\\ m = x => and_ind (fun (H3 : x < y) (H4 : m = x) => or_ind (fun H5 : x < y /\\ m' = x => and_ind (fun (_ : x < y) (H7 : m' = x) => Nat.Private_Tac.not_neq_eq (fun H8 : m...\nNat.square_spec : forall n : nat, Nat.square n = n * n\nNat.succ_pred : forall n : nat, n <> 0 -> S (Nat.pred n) = n\nvar = fun (V : Type) (Var0 : Var V) => let (var) := Var0 in var : forall V : Type, Var V -> nat -> V Arguments var {V}%type_scope {Var} _%nat_scope\nNat.mul_comm : forall n m : nat, n * m = m * n\nZ.gt = fun x y : Z => (x ?= y)%Z = Gt : Z -> Z -> Prop Arguments Z.gt (_ _)%Z_scope\nRecord Lift (T : Type) : Type := Build_Lift { lift : nat -> nat -> T -> T } Arguments Lift _%type_scope Arguments Build_Lift [T]%type_scope _%function_scope\nsubst_idx = fun (V : Type) (H : Var V) (v : V) (k x : nat) => match lt_eq_lt_dec x k with | inleft (left _) => var x | inleft (right _) => v | inright _ => var (x - 1) end : forall V : Type, Var V -> V -> nat -> nat -> V Arguments subst_idx {V}%type_scope {H} _ (_ _)%nat_scope\nNat.bi_induction : forall A : nat -> Prop, Morphisms.Proper (Morphisms.respectful eq iff) A -> A 0 -> (forall n : nat, A n <-> A (S n)) -> forall n : nat, A n\nlift_idx_recent : forall w k x : nat, k > x -> lift w k x = x\nBinPosDef.Pos.to_nat = fun x : positive => BinPosDef.Pos.iter_op Init.Nat.add x 1 : positive -> nat Arguments BinPosDef.Pos.to_nat _%positive_scope : simpl never\nNat.b2n = fun b : bool => if b then 1 else 0 : bool -> nat Arguments Nat.b2n _%bool_scope\nNat.ones_equiv : forall n : nat, Nat.ones n = Nat.pred (2 ^ n)\nBuild_LiftSubst : forall (V : Type) (H : Lift V) (T : Type) (H0 : Lift T) (H1 : Subst V T), (forall (t : T) (k : nat) (v : V) (s w : nat), lift w k (subst v s t) = subst (lift w k v) (lift w (1 + k) s) (lift w (shift s k) t)) -> LiftSubst\nInductive Z : Set := Z0 : Z | Zpos : positive -> Z | Zneg : positive -> Z Arguments Zpos _%positive_scope Arguments Zneg _%positive_scope\nByte.to_of_nat_option_map : forall x : nat, option_map Byte.to_nat (Byte.of_nat x) = (if x <=? 255 then Some x else None)\nNat.testbit_even_succ : forall a n : nat, 0 <= n -> Nat.testbit (2 * a) (S n) = Nat.testbit a n\nSubst_idx = {| subst := subst_idx |} : Subst nat nat\nNat2Z.inj_min : forall n m : nat, Z.of_nat (Nat.min n m) = Z.min (Z.of_nat n) (Z.of_nat m)\nPos.peano_ind : forall P : positive -> Prop, P 1%positive -> (forall p : positive, P p -> P (Pos.succ p)) -> forall p : positive, P p\nLift_idx = {| lift := fun w k x : nat => if le_gt_dec k x then w + x else x |} : Lift nat\nNat.sub_wd = PeanoNat.Nat.sub_wd_obligation_1 : Morphisms.Proper (Morphisms.respectful eq (Morphisms.respectful eq eq)) Init.Nat.sub\nNat.lt_wd = PeanoNat.Nat.lt_wd_obligation_1 : Morphisms.Proper (Morphisms.respectful eq (Morphisms.respectful eq iff)) lt\nfast_Zplus_comm : forall (x y : Z) (P : Z -> Prop), P (y + x)%Z -> P (x + y)%Z"}, {"role": "assistant", "content": "```intros. destruct H. exact lift_var0.```"}], "original": "intros. destruct H. apply lift_var0.", "succ": false}]