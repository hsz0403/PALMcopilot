[{"history": {"proof": "intros A B f l1 l2. induction l1 as [| x xs IH]. - simpl. reflexivity. - simpl. rewrite -> IH. reflexivity.", "repairs": ["", "", "", "", "", "", "", "", ""], "exceptions": []}, "chat": [{"role": "user", "content": "I will give you a Coq proof state, including both hypotheses and a specific goal and your need to prove it. Your response should be a singular code block of Coq proof, without any additional explanation or commentary. Follow to these guidelines:\nIntroduce variables using unique names to avoid any conflicts.\nKeep each command distinct and separated, avoid concatenations like ';' or '[cmd|cmd]'.\nOrganize your proof with bullets like '-', '+', and '*' instead of braces ({, }). Shift to their double symbols like '--' and '++', when necessary.\nEffectively use given premises, follow the syntax and structure demonstrated in the examples provided.\n\nExample 1:\n\nHypotheses:\nn, m: nat\nIHn: m + n = n + m\n\nGoal:\nm + S n = S n + m\n\nProof:\n```simpl. rewrite <- IHn. auto.```\n\nExample 2:\nHypotheses:\n\nGoal:\nforall n m : nat, m + n = n + m\n\n```intros n m. induction n.\n- simpl. auto.\n- simpl. rewrite <- IHn. auto.```\n\nSovle This Proof State:\n\nHypotheses:\n\n\nGoal:\nforall (A B : Type) (f : A -> B) (l1 l2 : list A), map f (l1 ++ l2) = map f l1 ++ map f l2\n\nPremises:\nmap : forall A B : Type, (A -> B) -> list A -> list B\nInductive list (A : Type) : Type := nil : list A | cons : A -> list A -> list A Arguments list _%type_scope Arguments nil {A}%type_scope Arguments cons {A}%type_scope a l%list_scope : rename\nexistsb_app : forall (A : Type) (f : A -> bool) (l1 l2 : list A), existsb f (l1 ++ l2) = (existsb f l1 || existsb f l2)%bool\nforallb_app : forall (A : Type) (f : A -> bool) (l1 l2 : list A), forallb f (l1 ++ l2) = (forallb f l1 && forallb f l2)%bool\nmap_app : forall (A B : Type) (f : A -> B) (l l' : list A), map f (l ++ l') = map f l ++ map f l'\nmap_cons : forall (A B : Type) (f : A -> B) (x : A) (l : list A), map f (x :: l) = f x :: map f l\nmap_rev : forall (A B : Type) (f : A -> B) (l : list A), map f (rev l) = rev (map f l)\nconcat_app : forall (A : Type) (l1 l2 : list (list A)), concat (l1 ++ l2) = concat l1 ++ concat l2\next_in_map : forall (A B : Type) (f g : A -> B) (l : list A), map f l = map g l -> forall a : A, In a l -> f a = g a\nmap_ext_in : forall (A B : Type) (f g : A -> B) (l : list A), (forall a : A, In a l -> f a = g a) -> map f l = map g l\nfirstn_app_2 : forall (A : Type) (n : nat) (l1 l2 : list A), firstn (length l1 + n) (l1 ++ l2) = l1 ++ firstn n l2\nTauto.map_simpl : forall (A B : Type) (f : A -> B) (l : list A), map f l = match l with | nil => nil | a :: l0 => f a :: map f l0 end\nmap_eq_nil : forall (A B : Type) (f : A -> B) (l : list A), map f l = nil -> l = nil\nmap_map : forall (A B C : Type) (f : A -> B) (g : B -> C) (l : list A), map g (map f l) = map (fun x : A => g (f x)) l\nmap_ext : forall (A B : Type) (f g : A -> B), (forall a : A, f a = g a) -> forall l : list A, map f l = map g l\nRefl.make_conj_rapp : forall (A : Type) (eval : A -> Prop) (l1 l2 : list A), Refl.make_conj eval (rev_append l1 l2) < -> Refl.make_conj eval (l1 ++ l2)\nRefl.make_conj_app : forall (A : Type) (eval : A -> Prop) (l1 l2 : list A), Refl.make_conj eval (l1 ++ l2) < -> Refl.make_conj eval l1 /\\ Refl.make_conj eval l2\nForall2_app : forall (A B : Type) (R : A -> B -> Prop) (l1 l2 : list A) (l1' l2' : list B), Forall2 R l1 l1' -> Forall2 R l2 l2' -> Forall2 R (l1 ++ l2) (l1' ++ l2')\nfirstn_app : forall (A : Type) (n : nat) (l1 l2 : list A), firstn n (l1 ++ l2) = firstn n l1 ++ firstn (n - length l1) l2\nskipn_app : forall (A : Type) (n : nat) (l1 l2 : list A), skipn n (l1 ++ l2) = skipn n l1 ++ skipn (n - length l1) l2\nfilter_map : forall (A : Type) (f g : A -> bool) (l : list A), filter f l = filter g l < -> map f l = map g l\nAdd_app : forall (A : Type) (a : A) (l1 l2 : list A), Add a (l1 ++ l2) (l1 ++ a :: l2)\nconcat_map : forall (A B : Type) (f : A -> B) (l : list (list A)), map f (concat l) = concat (map (map f) l)\nForall2_app_inv_l : forall (A B : Type) (R : A -> B -> Prop) (l1 l2 : list A) (l' : list B), Forall2 R (l1 ++ l2) l' -> exists l1' l2' : list B, Forall2 R l1 l1' /\\ Forall2 R l2 l2' /\\ l' = l1' ++ l2'\nfold_left_app : forall (A B : Type) (f : A -> B -> A) (l l' : list B) (i : A), fold_left f (l ++ l') i = fold_left f l' (fold_left f l i)\napp_inv_head : forall (A : Type) (l l1 l2 : list A), l ++ l1 = l ++ l2 -> l1 = l2\napp_inv_tail : forall (A : Type) (l l1 l2 : list A), l1 ++ l = l2 ++ l -> l1 = l2\nfold_right_app : forall (A B : Type) (f : A -> B -> B) (l l' : list A) (i : B), fold_right f i (l ++ l') = fold_right f (fold_right f i l') l\nForall2_app_inv_r : forall (A B : Type) (R : A -> B -> Prop) (l1' l2' : list B) (l : list A), Forall2 R l (l1' ++ l2') -> exists l1 l2 : list A, Forall2 R l1 l1' /\\ Forall2 R l2 l2' /\\ l = l1 ++ l2\nflat_map_concat_map : forall (A B : Type) (f : A -> list B) (l : list A), flat_map f l = concat (map f l)\nfilter_app : forall (A : Type) (f : A -> bool) (l l' : list A), filter f (l ++ l') = filter f l ++ filter f l'\nmap_length : forall (A B : Type) (f : A -> B) (l : list A), length (map f l) = length l\nAdd_split : forall (A : Type) (a : A) (l l' : list A), Add a l l' -> exists l1 l2 : list A, l = l1 ++ l2 /\\ l' = l1 ++ a :: l2\nmap_in : forall (A B : Type) (f : A -> B) (b : B) (xs : list A), In b (map f xs) -> exists a : A, b = f a /\\ In a xs\nmap_nth : forall (A B : Type) (f : A -> B) (l : list A) (d : A) (n : nat), nth n (map f l) (f d) = f (nth n l d)\nNoDup_map_inv : forall (A B : Type) (f : A -> B) (l : list A), NoDup (map f l) -> NoDup l\nin_split : forall (A : Type) (x : A) (l : list A), In x l -> exists l1 l2 : list A, l = l1 ++ x :: l2\nin_map : forall (A B : Type) (f : A -> B) (l : list A) (x : A), In x l -> In (f x) (map f l)\nin_map_iff : forall (A B : Type) (f : A -> B) (l : list A) (y : B), In y (map f l) < -> (exists x : A, f x = y /\\ In x l)\nnth_error_split : forall (A : Type) (l : list A) (n : nat) (a : A), nth_error l n = Some a -> exists l1 l2 : list A, l = l1 ++ a :: l2 /\\ length l1 = n\nmap_nth_error : forall (A B : Type) (f : A -> B) (n : nat) (l : list A) (d : A), nth_error l n = Some d -> nth_error (map f l) n = Some (f d)\nnth_split : forall (A : Type) (n : nat) (l : list A) (d : A), n < length l -> exists l1 l2 : list A, l = l1 ++ nth n l d :: l2 /\\ length l1 = n"}, {"role": "assistant", "content": "```intros A B f l1 l2.\ninduction l1 as [| x xs IH].\n- simpl. reflexivity.\n- simpl. rewrite -> IH. reflexivity.```"}], "original": "intros A B f l1 l2. induction l1 as [| x xs IH]. - simpl. reflexivity. - simpl. rewrite -> IH. reflexivity.", "succ": true}]